//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ../pdfreporter-test/src/test/ch/digireport/jasper/ExporterTest.java
//
//  Created by kendra on 10/1/13.
//

#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "java/lang/Boolean.h"
#include "java/lang/Exception.h"
#include "java/lang/Integer.h"
#include "java/lang/RuntimeException.h"
#include "java/lang/reflect/Method.h"
#include "java/util/HashMap.h"
#include "java/util/Map.h"
#include "java/util/logging/Handler.h"
#include "java/util/logging/Logger.h"
#include "org/oss/pdfreporter/engine/JasperReport.h"
#include "org/oss/pdfreporter/engine/export/JRPdfExporterParameter.h"
#include "org/oss/pdfreporter/pdf/IDocument.h"
#include "org/oss/pdfreporter/repo/DigireportRepositoryManager.h"
#include "org/oss/pdfreporter/repo/SubreportUtil.h"
#include "test/ch/digireport/jasper/ExporterTest.h"
#include "test/ch/digireport/jasper/ReportExporter.h"
#include "test/ch/digireport/jasper/providers/JavaTestProvider.h"
#include "test/ch/digireport/jasper/providers/TestProviderInterface.h"

@implementation TestChDigireportJasperExporterTest

static NSString * TestChDigireportJasperExporterTest_HSQLDB_URLPREFIX_ = @"jdbc:hsqldb:hsql://";
static NSString * TestChDigireportJasperExporterTest_HSQLDB_JDBC_DRIVER_ = @"org.hsqldb.jdbcDriver";
static NSString * TestChDigireportJasperExporterTest_JRXML_RESOURCE_FOLDER_ = @"resource";
static NSString * TestChDigireportJasperExporterTest_JRXML_REPORT_FOLDER_ = @"testdata/jrxml";
static NSString * TestChDigireportJasperExporterTest_XML_DATASOURCE_FOLDER_ = @"datasource";
static NSString * TestChDigireportJasperExporterTest_PDF_OUTPUT_FOLDER_ = @"testdata/pdf";
static NSString * TestChDigireportJasperExporterTest_DESIGN_REPORT_FONTS_ = @"FontsReport.jrxml";
static NSString * TestChDigireportJasperExporterTest_DESIGN_REPORT_SHIPMENTS_ = @"ShipmentsReportSqlJeval.jrxml";
static NSString * TestChDigireportJasperExporterTest_DESIGN_REPORT_PRODUCTS_ = @"ProductsReport.jrxml";
static NSString * TestChDigireportJasperExporterTest_DESIGN_REPORT_ORDERS_ = @"OrdersReport.jrxml";
static NSString * TestChDigireportJasperExporterTest_DESIGN_REPORT_LATE_ORDERS_ = @"LateOrdersReport.jrxml";
static NSString * TestChDigireportJasperExporterTest_DESIGN_REPORT_IMAGE_ = @"ImagesReport.jrxml";
static NSString * TestChDigireportJasperExporterTest_DESIGN_REPORT_SHAPES_ = @"ShapesReport.jrxml";
static NSString * TestChDigireportJasperExporterTest_DESIGN_REPORT_PARAGRAPH_ = @"ParagraphsReport.jrxml";
static NSString * TestChDigireportJasperExporterTest_DESIGN_REPORT_STYLEDTEXT_ = @"StyledTextReport.jrxml";
static NSString * TestChDigireportJasperExporterTest_DESIGN_REPORT_CDBOOCKLET_ = @"CDBooklet.jrxml";
static NSString * TestChDigireportJasperExporterTest_DESIGN_REPORT_ROTATION_ = @"RotationReport.jrxml";
static NSString * TestChDigireportJasperExporterTest_DESIGN_REPORT_PDFCRYPT_ = @"PdfEncryptReport.jrxml";
static NSString * TestChDigireportJasperExporterTest_DESIGN_REPORT_MASTER_ = @"MasterReport.jrxml";
static NSString * TestChDigireportJasperExporterTest_XML_DATA_CDBOOKLET_ = @"CDBooklets.xml";
static NSString * TestChDigireportJasperExporterTest_XPATH_DATA_CDBOOKLET_ = @"/CDBooklets";
static NSString * TestChDigireportJasperExporterTest_XML_DATA_NORTHWIND_ = @"northwind.xml";
static NSString * TestChDigireportJasperExporterTest_XPATH_DATA_NORTHWIND_ORDERS_ = @"/Northwind/Orders";
static NSString * TestChDigireportJasperExporterTest_XPATH_DATA_NORTHWIND_ORDERS_SHIPPED_NOT_NULL_ = @"/Northwind/Orders[ShippedDate]";

@synthesize testProvider = testProvider_;

+ (NSString *)HSQLDB_URLPREFIX {
  return TestChDigireportJasperExporterTest_HSQLDB_URLPREFIX_;
}

+ (NSString *)HSQLDB_JDBC_DRIVER {
  return TestChDigireportJasperExporterTest_HSQLDB_JDBC_DRIVER_;
}

+ (NSString *)JRXML_RESOURCE_FOLDER {
  return TestChDigireportJasperExporterTest_JRXML_RESOURCE_FOLDER_;
}

+ (NSString *)JRXML_REPORT_FOLDER {
  return TestChDigireportJasperExporterTest_JRXML_REPORT_FOLDER_;
}

+ (NSString *)XML_DATASOURCE_FOLDER {
  return TestChDigireportJasperExporterTest_XML_DATASOURCE_FOLDER_;
}

+ (NSString *)PDF_OUTPUT_FOLDER {
  return TestChDigireportJasperExporterTest_PDF_OUTPUT_FOLDER_;
}

+ (NSString *)DESIGN_REPORT_FONTS {
  return TestChDigireportJasperExporterTest_DESIGN_REPORT_FONTS_;
}

+ (NSString *)DESIGN_REPORT_SHIPMENTS {
  return TestChDigireportJasperExporterTest_DESIGN_REPORT_SHIPMENTS_;
}

+ (NSString *)DESIGN_REPORT_PRODUCTS {
  return TestChDigireportJasperExporterTest_DESIGN_REPORT_PRODUCTS_;
}

+ (NSString *)DESIGN_REPORT_ORDERS {
  return TestChDigireportJasperExporterTest_DESIGN_REPORT_ORDERS_;
}

+ (NSString *)DESIGN_REPORT_LATE_ORDERS {
  return TestChDigireportJasperExporterTest_DESIGN_REPORT_LATE_ORDERS_;
}

+ (NSString *)DESIGN_REPORT_IMAGE {
  return TestChDigireportJasperExporterTest_DESIGN_REPORT_IMAGE_;
}

+ (NSString *)DESIGN_REPORT_SHAPES {
  return TestChDigireportJasperExporterTest_DESIGN_REPORT_SHAPES_;
}

+ (NSString *)DESIGN_REPORT_PARAGRAPH {
  return TestChDigireportJasperExporterTest_DESIGN_REPORT_PARAGRAPH_;
}

+ (NSString *)DESIGN_REPORT_STYLEDTEXT {
  return TestChDigireportJasperExporterTest_DESIGN_REPORT_STYLEDTEXT_;
}

+ (NSString *)DESIGN_REPORT_CDBOOCKLET {
  return TestChDigireportJasperExporterTest_DESIGN_REPORT_CDBOOCKLET_;
}

+ (NSString *)DESIGN_REPORT_ROTATION {
  return TestChDigireportJasperExporterTest_DESIGN_REPORT_ROTATION_;
}

+ (NSString *)DESIGN_REPORT_PDFCRYPT {
  return TestChDigireportJasperExporterTest_DESIGN_REPORT_PDFCRYPT_;
}

+ (NSString *)DESIGN_REPORT_MASTER {
  return TestChDigireportJasperExporterTest_DESIGN_REPORT_MASTER_;
}

+ (NSString *)XML_DATA_CDBOOKLET {
  return TestChDigireportJasperExporterTest_XML_DATA_CDBOOKLET_;
}

+ (NSString *)XPATH_DATA_CDBOOKLET {
  return TestChDigireportJasperExporterTest_XPATH_DATA_CDBOOKLET_;
}

+ (NSString *)XML_DATA_NORTHWIND {
  return TestChDigireportJasperExporterTest_XML_DATA_NORTHWIND_;
}

+ (NSString *)XPATH_DATA_NORTHWIND_ORDERS {
  return TestChDigireportJasperExporterTest_XPATH_DATA_NORTHWIND_ORDERS_;
}

+ (NSString *)XPATH_DATA_NORTHWIND_ORDERS_SHIPPED_NOT_NULL {
  return TestChDigireportJasperExporterTest_XPATH_DATA_NORTHWIND_ORDERS_SHIPPED_NOT_NULL_;
}

- (id)init {
  return [self initTestChDigireportJasperExporterTestWithBOOL:YES withTestChDigireportJasperProvidersTestProviderInterface:[[TestChDigireportJasperProvidersJavaTestProvider alloc] init]];
}

- (id)initTestChDigireportJasperExporterTestWithBOOL:(BOOL)initJava
withTestChDigireportJasperProvidersTestProviderInterface:(id<TestChDigireportJasperProvidersTestProviderInterface>)testProvider {
  if ((self = [super init])) {
    self.testProvider = testProvider;
    if (initJava) {
      @try {
        IOSObjectArray *noArgs = [IOSObjectArray arrayWithLength:0 type:[IOSClass classWithClass:[IOSClass class]]];
        id noInstance = nil;
        IOSObjectArray *noParams = [IOSObjectArray arrayWithLength:0 type:[IOSClass classWithClass:[NSObject class]]];
        IOSClass *bridgeHandler = [IOSClass forName:@"org.slf4j.bridge.SLF4JBridgeHandler"];
        (void) [((JavaLangReflectMethod *) nil_chk([((IOSClass *) nil_chk(bridgeHandler)) getMethod:@"removeHandlersForRootLogger" parameterTypes:noArgs])) invokeWithId:noInstance withNSObjectArray:noParams];
        (void) [((JavaLangReflectMethod *) nil_chk([((IOSClass *) nil_chk(bridgeHandler)) getMethod:@"install" parameterTypes:noArgs])) invokeWithId:noInstance withNSObjectArray:noParams];
        IOSClass *sqlFactory = [IOSClass forName:@"org.oss.pdfreporter.sql.SqlFactory"];
        (void) [((JavaLangReflectMethod *) nil_chk([((IOSClass *) nil_chk(sqlFactory)) getMethod:@"registerFactory" parameterTypes:[IOSObjectArray arrayWithObjects:(id[]){ [IOSClass classWithClass:[NSString class]], [IOSClass classWithClass:[NSString class]] } count:2 type:[IOSClass classWithClass:[IOSClass class]]]])) invokeWithId:noInstance withNSObjectArray:[IOSObjectArray arrayWithObjects:(id[]){ TestChDigireportJasperExporterTest_HSQLDB_JDBC_DRIVER_, TestChDigireportJasperExporterTest_HSQLDB_URLPREFIX_ } count:2 type:[IOSClass classWithClass:[NSObject class]]]];
      }
      @catch (JavaLangException *e) {
        @throw [[JavaLangRuntimeException alloc] initWithJavaLangThrowable:e];
      }
    }
    else {
      @try {
        JavaUtilLoggingLogger *logger = [JavaUtilLoggingLogger getLoggerWithNSString:@""];
        IOSObjectArray *handlers = [((JavaUtilLoggingLogger *) nil_chk(logger)) getHandlers];
        {
          IOSObjectArray *a__ = handlers;
          int n__ = (int) [((IOSObjectArray *) nil_chk(a__)) count];
          for (int i__ = 0; i__ < n__; i__++) {
            JavaUtilLoggingHandler *hndl = [((IOSObjectArray *) nil_chk(a__)) objectAtIndex:i__];
            [((JavaUtilLoggingLogger *) nil_chk(logger)) removeHandlerWithJavaUtilLoggingHandler:hndl];
          }
        }
      }
      @catch (JavaLangException *e) {
        @throw [[JavaLangRuntimeException alloc] initWithJavaLangThrowable:e];
      }
    }
  }
  return self;
}

- (id)initWithBOOL:(BOOL)initJava
withTestChDigireportJasperProvidersTestProviderInterface:(id<TestChDigireportJasperProvidersTestProviderInterface>)testProvider {
  return [self initTestChDigireportJasperExporterTestWithBOOL:initJava withTestChDigireportJasperProvidersTestProviderInterface:testProvider];
}

- (void)exportFonts {
  [((TestChDigireportJasperReportExporter *) nil_chk([self getExporterWithNSString:@"fonts" withNSString:@"extra-fonts"])) exportReportWithNSString:TestChDigireportJasperExporterTest_DESIGN_REPORT_FONTS_];
}

- (void)exportShippment {
  [((TestChDigireportJasperReportExporter *) nil_chk([self getExporterWithNSString:@"crosstabs" withNSString:@"extra-fonts"])) exportSqlReportWithNSString:TestChDigireportJasperExporterTest_DESIGN_REPORT_SHIPMENTS_];
}

- (void)exportMasterReport {
  TestChDigireportJasperReportExporter *exporter = [self getExporterWithNSString:@"subreports" withNSString:@"extra-fonts"];
  OrgOssPdfreporterEngineJasperReport *subreport = [OrgOssPdfreporterRepoSubreportUtil loadSubreportWithNSString:@"ProductReport.jasper"];
  id<JavaUtilMap> parameters = [[JavaUtilHashMap alloc] init];
  (void) [((id<JavaUtilMap>) nil_chk(parameters)) putWithId:@"ProductsSubreport" withId:subreport];
  [((TestChDigireportJasperReportExporter *) nil_chk(exporter)) exportSqlReportWithNSString:TestChDigireportJasperExporterTest_DESIGN_REPORT_MASTER_ withJavaUtilMap:parameters];
}

- (void)exportProducts {
  [((TestChDigireportJasperReportExporter *) nil_chk([self getExporterWithNSString:@"crosstabs" withNSString:@"extra-fonts"])) exportSqlReportWithNSString:TestChDigireportJasperExporterTest_DESIGN_REPORT_PRODUCTS_];
}

- (void)exportOrders {
  [((TestChDigireportJasperReportExporter *) nil_chk([self getExporterWithNSString:@"crosstabs" withNSString:@"extra-fonts"])) exportReportWithNSString:TestChDigireportJasperExporterTest_DESIGN_REPORT_ORDERS_ withNSString:TestChDigireportJasperExporterTest_XML_DATA_NORTHWIND_ withNSString:TestChDigireportJasperExporterTest_XPATH_DATA_NORTHWIND_ORDERS_];
}

- (void)exportLateOrder {
  [((TestChDigireportJasperReportExporter *) nil_chk([self getExporterWithNSString:@"crosstabs" withNSString:@"extra-fonts"])) exportReportWithNSString:TestChDigireportJasperExporterTest_DESIGN_REPORT_LATE_ORDERS_ withNSString:TestChDigireportJasperExporterTest_XML_DATA_NORTHWIND_ withNSString:TestChDigireportJasperExporterTest_XPATH_DATA_NORTHWIND_ORDERS_SHIPPED_NOT_NULL_];
}

- (void)exportImages {
  [((TestChDigireportJasperReportExporter *) nil_chk([self getExporterWithNSString:@"images"])) exportReportWithNSString:TestChDigireportJasperExporterTest_DESIGN_REPORT_IMAGE_];
}

- (void)exportShapes {
  [((TestChDigireportJasperReportExporter *) nil_chk([self getExporterWithNSString:@"shapes"])) exportReportWithNSString:TestChDigireportJasperExporterTest_DESIGN_REPORT_SHAPES_];
}

- (void)exportRotation {
  [((TestChDigireportJasperReportExporter *) nil_chk([self getExporterWithNSString:@"misc"])) exportReportWithNSString:TestChDigireportJasperExporterTest_DESIGN_REPORT_ROTATION_];
}

- (void)exportEncrypt {
  id<JavaUtilMap> parameters = [[JavaUtilHashMap alloc] init];
  (void) [((id<JavaUtilMap>) nil_chk(parameters)) putWithId:[OrgOssPdfreporterEngineExportJRPdfExporterParameter IS_ENCRYPTED] withId:[JavaLangBoolean getTRUE]];
  (void) [((id<JavaUtilMap>) nil_chk(parameters)) putWithId:[OrgOssPdfreporterEngineExportJRPdfExporterParameter IS_128_BIT_KEY] withId:[JavaLangBoolean getTRUE]];
  (void) [((id<JavaUtilMap>) nil_chk(parameters)) putWithId:[OrgOssPdfreporterEngineExportJRPdfExporterParameter USER_PASSWORD] withId:@"jasper"];
  (void) [((id<JavaUtilMap>) nil_chk(parameters)) putWithId:[OrgOssPdfreporterEngineExportJRPdfExporterParameter OWNER_PASSWORD] withId:@"reports"];
  (void) [((id<JavaUtilMap>) nil_chk(parameters)) putWithId:[OrgOssPdfreporterEngineExportJRPdfExporterParameter PERMISSIONS] withId:[JavaLangInteger valueOfWithInt:OrgOssPdfreporterPdfIDocument_PERMISSION_COPY | OrgOssPdfreporterPdfIDocument_PERMISSION_PRINT]];
  [((TestChDigireportJasperReportExporter *) nil_chk([self getExporterWithNSString:@"misc"])) exportReportWithNSString:TestChDigireportJasperExporterTest_DESIGN_REPORT_PDFCRYPT_ withJavaUtilMap:parameters];
}

- (void)exportParagraph {
  [((TestChDigireportJasperReportExporter *) nil_chk([self getExporterWithNSString:@"text" withNSString:@"extra-fonts"])) exportReportWithNSString:TestChDigireportJasperExporterTest_DESIGN_REPORT_PARAGRAPH_];
}

- (void)exportStyledText {
  [((TestChDigireportJasperReportExporter *) nil_chk([self getExporterWithNSString:@"text" withNSString:@"extra-fonts"])) exportReportWithNSString:TestChDigireportJasperExporterTest_DESIGN_REPORT_STYLEDTEXT_];
}

- (void)exportCDBooklet {
  [((TestChDigireportJasperReportExporter *) nil_chk([self getExporterWithNSString:@"cdbooklet" withNSString:@"extra-fonts"])) exportReportWithNSString:TestChDigireportJasperExporterTest_DESIGN_REPORT_CDBOOCKLET_ withNSString:TestChDigireportJasperExporterTest_XML_DATA_CDBOOKLET_ withNSString:TestChDigireportJasperExporterTest_XPATH_DATA_CDBOOKLET_];
}

- (TestChDigireportJasperReportExporter *)getExporterWithNSString:(NSString *)reportFolder {
  return [self getExporterWithNSString:reportFolder withNSString:nil];
}

- (TestChDigireportJasperReportExporter *)getExporterWithNSString:(NSString *)reportFolder
                                                     withNSString:(NSString *)extraFolder {
  OrgOssPdfreporterRepoDigireportRepositoryManager *repo = [OrgOssPdfreporterRepoDigireportRepositoryManager getInstance];
  [((OrgOssPdfreporterRepoDigireportRepositoryManager *) nil_chk(repo)) setDefaultResourceFolderWithNSString:[self inputPathWithNSString:TestChDigireportJasperExporterTest_JRXML_RESOURCE_FOLDER_]];
  [((OrgOssPdfreporterRepoDigireportRepositoryManager *) nil_chk(repo)) setDefaulReportFolderWithNSString:[self inputPathWithNSString:[NSString stringWithFormat:@"testdata/jrxml/%@", reportFolder]]];
  if (nil != extraFolder) {
    [((OrgOssPdfreporterRepoDigireportRepositoryManager *) nil_chk(repo)) addExtraReportFolderWithNSString:[self inputPathWithNSString:[NSString stringWithFormat:@"testdata/jrxml/%@", extraFolder]]];
  }
  [((OrgOssPdfreporterRepoDigireportRepositoryManager *) nil_chk(repo)) addExtraReportFolderWithNSString:[self inputPathWithNSString:TestChDigireportJasperExporterTest_XML_DATASOURCE_FOLDER_]];
  return [[TestChDigireportJasperReportExporter alloc] initWithNSString:[self outputPathWithNSString:TestChDigireportJasperExporterTest_PDF_OUTPUT_FOLDER_] withNSString:[((id<TestChDigireportJasperProvidersTestProviderInterface>) nil_chk(testProvider_)) databasePath]];
}

- (NSString *)inputPathWithNSString:(NSString *)path {
  if (testProvider_ != nil) return [testProvider_ inputPathWithNSString:path];
  else return path;
}

- (NSString *)outputPathWithNSString:(NSString *)path {
  if (testProvider_ != nil) return [testProvider_ outputPathWithNSString:path];
  else return path;
}

- (void)copyAllPropertiesTo:(id)copy {
  [super copyAllPropertiesTo:copy];
  TestChDigireportJasperExporterTest *typedCopy = (TestChDigireportJasperExporterTest *) copy;
  typedCopy.testProvider = testProvider_;
}

@end
