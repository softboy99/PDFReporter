//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ../pdfreporter-test/src/test/ch/digireport/jasper/ReportExporter.java
//
//  Created by kendra on 10/1/13.
//

#include "IOSClass.h"
#include "java/io/Closeable.h"
#include "java/io/InputStream.h"
#include "java/util/Map.h"
#include "java/util/logging/Level.h"
#include "java/util/logging/Logger.h"
#include "org/oss/pdfreporter/engine/JRDataSource.h"
#include "org/oss/pdfreporter/engine/JREmptyDataSource.h"
#include "org/oss/pdfreporter/engine/JasperCompileManager.h"
#include "org/oss/pdfreporter/engine/JasperExportManager.h"
#include "org/oss/pdfreporter/engine/JasperFillManager.h"
#include "org/oss/pdfreporter/engine/JasperPrint.h"
#include "org/oss/pdfreporter/engine/JasperReport.h"
#include "org/oss/pdfreporter/engine/data/JRXmlDataSource.h"
#include "org/oss/pdfreporter/engine/design/JasperDesign.h"
#include "org/oss/pdfreporter/engine/xml/JRXmlLoader.h"
#include "org/oss/pdfreporter/registry/ApiRegistry.h"
#include "org/oss/pdfreporter/repo/DigireportFileResourceLoader.h"
#include "org/oss/pdfreporter/sql/IConnection.h"
#include "org/oss/pdfreporter/sql/factory/ISqlFactory.h"
#include "test/ch/digireport/jasper/ReportExporter.h"

@implementation TestChDigireportJasperReportExporter

@synthesize pdfOutputFolder = pdfOutputFolder_;
@synthesize databasePath = databasePath_;

- (id)initWithNSString:(NSString *)pdfOutputFolder
          withNSString:(NSString *)databasePath {
  if ((self = [super init])) {
    self.pdfOutputFolder = pdfOutputFolder;
    self.databasePath = databasePath;
    [((JavaUtilLoggingLogger *) nil_chk([JavaUtilLoggingLogger getLoggerWithNSString:@""])) setLevelWithJavaUtilLoggingLevel:[JavaUtilLoggingLevel FINEST]];
    [OrgOssPdfreporterRegistryApiRegistry initSession];
  }
  return self;
}

- (void)exportReportWithNSString:(NSString *)reportFileName
                    withNSString:(NSString *)xmlDataFile
                    withNSString:(NSString *)xmlXpath
                 withJavaUtilMap:(id<JavaUtilMap>)exporterParameters {
  OrgOssPdfreporterEngineDesignJasperDesign *design = [self loadReportWithNSString:reportFileName];
  OrgOssPdfreporterEngineJasperReport *report = [self compileReportWithOrgOssPdfreporterEngineDesignJasperDesign:design];
  [self exportReportWithOrgOssPdfreporterEngineJasperReport:report withNSString:xmlDataFile withNSString:xmlXpath withJavaUtilMap:exporterParameters];
  [OrgOssPdfreporterRegistryApiRegistry dispose];
}

- (void)exportReportWithNSString:(NSString *)reportFileName
                    withNSString:(NSString *)xmlDataFile
                    withNSString:(NSString *)xmlXpath {
  [self exportReportWithNSString:reportFileName withNSString:xmlDataFile withNSString:xmlXpath withJavaUtilMap:nil];
}

- (void)exportSqlReportWithNSString:(NSString *)reportFileName {
  [self exportSqlReportWithNSString:reportFileName withJavaUtilMap:nil withJavaUtilMap:nil];
}

- (void)exportSqlReportWithNSString:(NSString *)reportFileName
                    withJavaUtilMap:(id<JavaUtilMap>)fillParameters {
  [self exportSqlReportWithNSString:reportFileName withJavaUtilMap:fillParameters withJavaUtilMap:nil];
}

- (void)exportSqlReportWithNSString:(NSString *)reportFileName
                    withJavaUtilMap:(id<JavaUtilMap>)fillParameters
                    withJavaUtilMap:(id<JavaUtilMap>)exporterParameters {
  OrgOssPdfreporterEngineDesignJasperDesign *design = [self loadReportWithNSString:reportFileName];
  OrgOssPdfreporterEngineJasperReport *report = [self compileReportWithOrgOssPdfreporterEngineDesignJasperDesign:design];
  [self exportSqlReportWithOrgOssPdfreporterEngineJasperReport:report withJavaUtilMap:fillParameters withJavaUtilMap:exporterParameters];
  [OrgOssPdfreporterRegistryApiRegistry dispose];
}

- (void)exportReportWithNSString:(NSString *)reportFileName
                 withJavaUtilMap:(id<JavaUtilMap>)exporterParameters {
  [self exportReportWithNSString:reportFileName withNSString:nil withNSString:nil withJavaUtilMap:exporterParameters];
}

- (void)exportReportWithNSString:(NSString *)reportFileName {
  [self exportReportWithNSString:reportFileName withNSString:nil withNSString:nil withJavaUtilMap:nil];
}

- (OrgOssPdfreporterEngineDesignJasperDesign *)loadReportWithNSString:(NSString *)reportFileName {
  JavaIoInputStream *isReport = nil;
  @try {
    isReport = [OrgOssPdfreporterRepoDigireportFileResourceLoader getInputStreamWithNSString:reportFileName];
    return [OrgOssPdfreporterEngineXmlJRXmlLoader load__WithJavaIoInputStream:isReport];
  }
  @finally {
    [self closeWithJavaIoCloseable:isReport];
  }
}

- (OrgOssPdfreporterEngineJasperReport *)compileReportWithOrgOssPdfreporterEngineDesignJasperDesign:(OrgOssPdfreporterEngineDesignJasperDesign *)design {
  return [OrgOssPdfreporterEngineJasperCompileManager compileReportWithOrgOssPdfreporterEngineDesignJasperDesign:design];
}

- (void)exportReportWithOrgOssPdfreporterEngineJasperReport:(OrgOssPdfreporterEngineJasperReport *)compiledReport
                                               withNSString:(NSString *)xmlDataFile
                                               withNSString:(NSString *)xmlXpath
                                            withJavaUtilMap:(id<JavaUtilMap>)exporterParameters {
  id<OrgOssPdfreporterEngineJRDataSource> dataSource = nil;
  JavaIoInputStream *isXmlData = nil;
  @try {
    if (xmlDataFile == nil) {
      dataSource = [[OrgOssPdfreporterEngineJREmptyDataSource alloc] init];
    }
    else {
      isXmlData = [OrgOssPdfreporterRepoDigireportFileResourceLoader getInputStreamWithNSString:xmlDataFile];
      OrgOssPdfreporterEngineDataJRXmlDataSource *xmlDataSource = [[OrgOssPdfreporterEngineDataJRXmlDataSource alloc] initWithJavaIoInputStream:isXmlData withNSString:xmlXpath];
      [((OrgOssPdfreporterEngineDataJRXmlDataSource *) nil_chk(xmlDataSource)) setDatePatternWithNSString:@"yyyy-MM-dd"];
      dataSource = xmlDataSource;
    }
    OrgOssPdfreporterEngineJasperPrint *printReport = [OrgOssPdfreporterEngineJasperFillManager fillReportWithOrgOssPdfreporterEngineJasperReport:compiledReport withJavaUtilMap:nil withOrgOssPdfreporterEngineJRDataSource:dataSource];
    NSString *pathToPdfFile = [NSString stringWithFormat:@"%@/%@.pdf", pdfOutputFolder_, [((OrgOssPdfreporterEngineJasperPrint *) nil_chk(printReport)) getName]];
    [OrgOssPdfreporterEngineJasperExportManager exportReportToPdfFileWithOrgOssPdfreporterEngineJasperPrint:printReport withNSString:pathToPdfFile withJavaUtilMap:exporterParameters];
  }
  @finally {
    [self closeWithJavaIoCloseable:isXmlData];
  }
}

- (void)exportSqlReportWithOrgOssPdfreporterEngineJasperReport:(OrgOssPdfreporterEngineJasperReport *)compiledReport
                                               withJavaUtilMap:(id<JavaUtilMap>)fillParameters
                                               withJavaUtilMap:(id<JavaUtilMap>)exporterParameters {
  id<OrgOssPdfreporterSqlIConnection> sqlDataSource = nil;
  id<OrgOssPdfreporterSqlFactoryISqlFactory> sqlFactory = [OrgOssPdfreporterRegistryApiRegistry getSqlFactory];
  @try {
    sqlDataSource = [((id<OrgOssPdfreporterSqlFactoryISqlFactory>) nil_chk(sqlFactory)) newConnectionWithNSString:databasePath_ withNSString:@"sa" withNSString:@""];
    OrgOssPdfreporterEngineJasperPrint *printReport = [OrgOssPdfreporterEngineJasperFillManager fillReportWithOrgOssPdfreporterEngineJasperReport:compiledReport withJavaUtilMap:fillParameters withOrgOssPdfreporterSqlIConnection:sqlDataSource];
    NSString *pathToPdfFile = [NSString stringWithFormat:@"%@/%@.pdf", pdfOutputFolder_, [((OrgOssPdfreporterEngineJasperPrint *) nil_chk(printReport)) getName]];
    [OrgOssPdfreporterEngineJasperExportManager exportReportToPdfFileWithOrgOssPdfreporterEngineJasperPrint:printReport withNSString:pathToPdfFile withJavaUtilMap:exporterParameters];
  }
  @finally {
    [self closeWithJavaIoCloseable:sqlDataSource];
  }
}

- (void)closeWithJavaIoCloseable:(id<JavaIoCloseable>)stream {
  if (stream != nil) {
    [stream close];
  }
}

- (void)copyAllPropertiesTo:(id)copy {
  [super copyAllPropertiesTo:copy];
  TestChDigireportJasperReportExporter *typedCopy = (TestChDigireportJasperReportExporter *) copy;
  typedCopy.pdfOutputFolder = pdfOutputFolder_;
  typedCopy.databasePath = databasePath_;
}

@end
