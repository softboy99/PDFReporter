//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ../pdfreporter-test/src/test/ch/digireport/jasper/RealestateTest.java
//
//  Created by kendra on 10/1/13.
//

#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "java/lang/Exception.h"
#include "java/lang/RuntimeException.h"
#include "java/lang/reflect/Method.h"
#include "java/util/logging/Handler.h"
#include "java/util/logging/Logger.h"
#include "org/oss/pdfreporter/repo/DigireportRepositoryManager.h"
#include "test/ch/digireport/jasper/RealestateTest.h"
#include "test/ch/digireport/jasper/ReportExporter.h"
#include "test/ch/digireport/jasper/providers/JavaTestProvider.h"
#include "test/ch/digireport/jasper/providers/TestProviderInterface.h"

@implementation TestChDigireportJasperRealestateTest

static NSString * TestChDigireportJasperRealestateTest_HSQLDB_URLPREFIX_ = @"jdbc:hsqldb:hsql://";
static NSString * TestChDigireportJasperRealestateTest_HSQLDB_JDBC_DRIVER_ = @"org.hsqldb.jdbcDriver";
static NSString * TestChDigireportJasperRealestateTest_JRXML_RESOURCE_FOLDER_ = @"../pdfreporter-testdata/resource";
static NSString * TestChDigireportJasperRealestateTest_JRXML_REPORT_FOLDER_ = @"../pdfreporter-testdata/testdata/jrxml";
static NSString * TestChDigireportJasperRealestateTest_XML_DATASOURCE_FOLDER_ = @"../pdfreporter-testdata/datasource";
static NSString * TestChDigireportJasperRealestateTest_PDF_OUTPUT_FOLDER_ = @"../pdfreporter-testdata/testdata/pdf";
static NSString * TestChDigireportJasperRealestateTest_DESIGN_REPORT_REALESTATE_CHEKLIST_IN_DE_ = @"realestate-checklist-movein-de.jrxml";
static NSString * TestChDigireportJasperRealestateTest_DESIGN_REPORT_REALESTATE_CHEKLIST_OUT_DE_ = @"realestate-checklist-moveout-de.jrxml";
static NSString * TestChDigireportJasperRealestateTest_DESIGN_REPORT_REALESTATE_DEFECT_DE_ = @"realestate-defectgallery-de.jrxml";
static NSString * TestChDigireportJasperRealestateTest_DESIGN_REPORT_REALESTATE_CHEKLIST_IN_EN_ = @"realestate-checklist-movein-en.jrxml";
static NSString * TestChDigireportJasperRealestateTest_DESIGN_REPORT_REALESTATE_CHEKLIST_OUT_EN_ = @"realestate-checklist-moveout-en.jrxml";
static NSString * TestChDigireportJasperRealestateTest_DESIGN_REPORT_REALESTATE_DEFECT_EN_ = @"realestate-defectgallery-en.jrxml";

@synthesize testProvider = testProvider_;

+ (NSString *)HSQLDB_URLPREFIX {
  return TestChDigireportJasperRealestateTest_HSQLDB_URLPREFIX_;
}

+ (NSString *)HSQLDB_JDBC_DRIVER {
  return TestChDigireportJasperRealestateTest_HSQLDB_JDBC_DRIVER_;
}

+ (NSString *)JRXML_RESOURCE_FOLDER {
  return TestChDigireportJasperRealestateTest_JRXML_RESOURCE_FOLDER_;
}

+ (NSString *)JRXML_REPORT_FOLDER {
  return TestChDigireportJasperRealestateTest_JRXML_REPORT_FOLDER_;
}

+ (NSString *)XML_DATASOURCE_FOLDER {
  return TestChDigireportJasperRealestateTest_XML_DATASOURCE_FOLDER_;
}

+ (NSString *)PDF_OUTPUT_FOLDER {
  return TestChDigireportJasperRealestateTest_PDF_OUTPUT_FOLDER_;
}

+ (NSString *)DESIGN_REPORT_REALESTATE_CHEKLIST_IN_DE {
  return TestChDigireportJasperRealestateTest_DESIGN_REPORT_REALESTATE_CHEKLIST_IN_DE_;
}

+ (NSString *)DESIGN_REPORT_REALESTATE_CHEKLIST_OUT_DE {
  return TestChDigireportJasperRealestateTest_DESIGN_REPORT_REALESTATE_CHEKLIST_OUT_DE_;
}

+ (NSString *)DESIGN_REPORT_REALESTATE_DEFECT_DE {
  return TestChDigireportJasperRealestateTest_DESIGN_REPORT_REALESTATE_DEFECT_DE_;
}

+ (NSString *)DESIGN_REPORT_REALESTATE_CHEKLIST_IN_EN {
  return TestChDigireportJasperRealestateTest_DESIGN_REPORT_REALESTATE_CHEKLIST_IN_EN_;
}

+ (NSString *)DESIGN_REPORT_REALESTATE_CHEKLIST_OUT_EN {
  return TestChDigireportJasperRealestateTest_DESIGN_REPORT_REALESTATE_CHEKLIST_OUT_EN_;
}

+ (NSString *)DESIGN_REPORT_REALESTATE_DEFECT_EN {
  return TestChDigireportJasperRealestateTest_DESIGN_REPORT_REALESTATE_DEFECT_EN_;
}

- (id)init {
  return [self initTestChDigireportJasperRealestateTestWithBOOL:YES withTestChDigireportJasperProvidersTestProviderInterface:[[TestChDigireportJasperProvidersJavaTestProvider alloc] init]];
}

- (id)initTestChDigireportJasperRealestateTestWithBOOL:(BOOL)initJava
withTestChDigireportJasperProvidersTestProviderInterface:(id<TestChDigireportJasperProvidersTestProviderInterface>)testProvider {
  if ((self = [super init])) {
    self.testProvider = testProvider;
    if (initJava) {
      @try {
        IOSObjectArray *noArgs = [IOSObjectArray arrayWithLength:0 type:[IOSClass classWithClass:[IOSClass class]]];
        id noInstance = nil;
        IOSObjectArray *noParams = [IOSObjectArray arrayWithLength:0 type:[IOSClass classWithClass:[NSObject class]]];
        IOSClass *bridgeHandler = [IOSClass forName:@"org.slf4j.bridge.SLF4JBridgeHandler"];
        (void) [((JavaLangReflectMethod *) nil_chk([((IOSClass *) nil_chk(bridgeHandler)) getMethod:@"removeHandlersForRootLogger" parameterTypes:noArgs])) invokeWithId:noInstance withNSObjectArray:noParams];
        (void) [((JavaLangReflectMethod *) nil_chk([((IOSClass *) nil_chk(bridgeHandler)) getMethod:@"install" parameterTypes:noArgs])) invokeWithId:noInstance withNSObjectArray:noParams];
        IOSClass *sqlFactory = [IOSClass forName:@"org.oss.pdfreporter.sql.SqlFactory"];
        (void) [((JavaLangReflectMethod *) nil_chk([((IOSClass *) nil_chk(sqlFactory)) getMethod:@"registerFactory" parameterTypes:[IOSObjectArray arrayWithObjects:(id[]){ [IOSClass classWithClass:[NSString class]], [IOSClass classWithClass:[NSString class]] } count:2 type:[IOSClass classWithClass:[IOSClass class]]]])) invokeWithId:noInstance withNSObjectArray:[IOSObjectArray arrayWithObjects:(id[]){ TestChDigireportJasperRealestateTest_HSQLDB_JDBC_DRIVER_, TestChDigireportJasperRealestateTest_HSQLDB_URLPREFIX_ } count:2 type:[IOSClass classWithClass:[NSObject class]]]];
      }
      @catch (JavaLangException *e) {
        @throw [[JavaLangRuntimeException alloc] initWithJavaLangThrowable:e];
      }
    }
    else {
      @try {
        JavaUtilLoggingLogger *logger = [JavaUtilLoggingLogger getLoggerWithNSString:@""];
        IOSObjectArray *handlers = [((JavaUtilLoggingLogger *) nil_chk(logger)) getHandlers];
        {
          IOSObjectArray *a__ = handlers;
          int n__ = (int) [((IOSObjectArray *) nil_chk(a__)) count];
          for (int i__ = 0; i__ < n__; i__++) {
            JavaUtilLoggingHandler *hndl = [((IOSObjectArray *) nil_chk(a__)) objectAtIndex:i__];
            [((JavaUtilLoggingLogger *) nil_chk(logger)) removeHandlerWithJavaUtilLoggingHandler:hndl];
          }
        }
      }
      @catch (JavaLangException *e) {
        @throw [[JavaLangRuntimeException alloc] initWithJavaLangThrowable:e];
      }
    }
  }
  return self;
}

- (id)initWithBOOL:(BOOL)initJava
withTestChDigireportJasperProvidersTestProviderInterface:(id<TestChDigireportJasperProvidersTestProviderInterface>)testProvider {
  return [self initTestChDigireportJasperRealestateTestWithBOOL:initJava withTestChDigireportJasperProvidersTestProviderInterface:testProvider];
}

- (void)exportRealEstateChecklistMoveInDe {
  [((TestChDigireportJasperReportExporter *) nil_chk([self getExporterWithNSString:@"digireport-realestate-checklist-v0"])) exportSqlReportWithNSString:TestChDigireportJasperRealestateTest_DESIGN_REPORT_REALESTATE_CHEKLIST_IN_DE_];
}

- (void)exportRealEstateChecklistMoveOutDe {
  [((TestChDigireportJasperReportExporter *) nil_chk([self getExporterWithNSString:@"digireport-realestate-checklist-v0"])) exportSqlReportWithNSString:TestChDigireportJasperRealestateTest_DESIGN_REPORT_REALESTATE_CHEKLIST_OUT_DE_];
}

- (void)exportRealEstateDefectDe {
  [((TestChDigireportJasperReportExporter *) nil_chk([self getExporterWithNSString:@"digireport-realestate-checklist-v0"])) exportSqlReportWithNSString:TestChDigireportJasperRealestateTest_DESIGN_REPORT_REALESTATE_DEFECT_DE_];
}

- (void)exportRealEstateChecklistMoveInEn {
  [((TestChDigireportJasperReportExporter *) nil_chk([self getExporterWithNSString:@"digireport-realestate-checklist-v0"])) exportSqlReportWithNSString:TestChDigireportJasperRealestateTest_DESIGN_REPORT_REALESTATE_CHEKLIST_IN_EN_];
}

- (void)exportRealEstateChecklistMoveOutEn {
  [((TestChDigireportJasperReportExporter *) nil_chk([self getExporterWithNSString:@"digireport-realestate-checklist-v0"])) exportSqlReportWithNSString:TestChDigireportJasperRealestateTest_DESIGN_REPORT_REALESTATE_CHEKLIST_OUT_EN_];
}

- (void)exportRealEstateDefectEn {
  [((TestChDigireportJasperReportExporter *) nil_chk([self getExporterWithNSString:@"digireport-realestate-checklist-v0"])) exportSqlReportWithNSString:TestChDigireportJasperRealestateTest_DESIGN_REPORT_REALESTATE_DEFECT_EN_];
}

- (TestChDigireportJasperReportExporter *)getExporterWithNSString:(NSString *)reportFolder {
  return [self getExporterWithNSString:reportFolder withNSString:nil];
}

- (TestChDigireportJasperReportExporter *)getExporterWithNSString:(NSString *)reportFolder
                                                     withNSString:(NSString *)extraFolder {
  OrgOssPdfreporterRepoDigireportRepositoryManager *repo = [OrgOssPdfreporterRepoDigireportRepositoryManager getInstance];
  [((OrgOssPdfreporterRepoDigireportRepositoryManager *) nil_chk(repo)) setDefaultResourceFolderWithNSString:[self inputPathWithNSString:TestChDigireportJasperRealestateTest_JRXML_RESOURCE_FOLDER_]];
  [((OrgOssPdfreporterRepoDigireportRepositoryManager *) nil_chk(repo)) setDefaulReportFolderWithNSString:[self inputPathWithNSString:[NSString stringWithFormat:@"../pdfreporter-testdata/testdata/jrxml/%@", reportFolder]]];
  if (nil != extraFolder) {
    [((OrgOssPdfreporterRepoDigireportRepositoryManager *) nil_chk(repo)) addExtraReportFolderWithNSString:[self inputPathWithNSString:[NSString stringWithFormat:@"../pdfreporter-testdata/testdata/jrxml/%@", extraFolder]]];
  }
  [((OrgOssPdfreporterRepoDigireportRepositoryManager *) nil_chk(repo)) addExtraReportFolderWithNSString:[self inputPathWithNSString:TestChDigireportJasperRealestateTest_XML_DATASOURCE_FOLDER_]];
  return [[TestChDigireportJasperReportExporter alloc] initWithNSString:[self outputPathWithNSString:TestChDigireportJasperRealestateTest_PDF_OUTPUT_FOLDER_] withNSString:[((id<TestChDigireportJasperProvidersTestProviderInterface>) nil_chk(testProvider_)) databasePath]];
}

- (NSString *)inputPathWithNSString:(NSString *)path {
  if (testProvider_ != nil) return [testProvider_ inputPathWithNSString:path];
  else return path;
}

- (NSString *)outputPathWithNSString:(NSString *)path {
  if (testProvider_ != nil) return [testProvider_ outputPathWithNSString:path];
  else return path;
}

- (void)copyAllPropertiesTo:(id)copy {
  [super copyAllPropertiesTo:copy];
  TestChDigireportJasperRealestateTest *typedCopy = (TestChDigireportJasperRealestateTest *) copy;
  typedCopy.testProvider = testProvider_;
}

@end
