//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: pdfreporter-core/src/org/w3c/tools/codec/Base64Decoder.java
//
//  Created by kendra on 9/27/13.
//

#include "IOSByteArray.h"
#include "IOSClass.h"
#include "java/io/ByteArrayInputStream.h"
#include "java/io/ByteArrayOutputStream.h"
#include "java/io/IOException.h"
#include "java/io/InputStream.h"
#include "java/io/OutputStream.h"
#include "java/io/UnsupportedEncodingException.h"
#include "java/lang/RuntimeException.h"
#include "org/w3c/tools/codec/Base64Decoder.h"
#include "org/w3c/tools/codec/Base64FormatException.h"

@implementation OrgW3cToolsCodecBase64Decoder

@synthesize in = in_;
@synthesize out = out_;
@synthesize stringp = stringp_;

- (int)get1WithByteArray:(IOSByteArray *)buf
                 withInt:(int)off {
  return (([((IOSByteArray *) nil_chk(buf)) byteAtIndex:off] & (int) 0x3f) << 2) | ((int) (((unsigned int) ([((IOSByteArray *) nil_chk(buf)) byteAtIndex:off + 1] & (int) 0x30)) >> 4));
}

- (int)get2WithByteArray:(IOSByteArray *)buf
                 withInt:(int)off {
  return (([((IOSByteArray *) nil_chk(buf)) byteAtIndex:off + 1] & (int) 0x0f) << 4) | ((int) (((unsigned int) ([((IOSByteArray *) nil_chk(buf)) byteAtIndex:off + 2] & (int) 0x3c)) >> 2));
}

- (int)get3WithByteArray:(IOSByteArray *)buf
                 withInt:(int)off {
  return (([((IOSByteArray *) nil_chk(buf)) byteAtIndex:off + 2] & (int) 0x03) << 6) | ([((IOSByteArray *) nil_chk(buf)) byteAtIndex:off + 3] & (int) 0x3f);
}

- (int)checkWithInt:(int)ch {
  if ((ch >= 'A') && (ch <= 'Z')) {
    return ch - 'A';
  }
  else if ((ch >= 'a') && (ch <= 'z')) {
    return ch - 'a' + 26;
  }
  else if ((ch >= '0') && (ch <= '9')) {
    return ch - '0' + 52;
  }
  else {
    switch (ch) {
      case '=':
      return 65;
      case '+':
      return 62;
      case '/':
      return 63;
      default:
      return -1;
    }
  }
}

- (void)process {
  IOSByteArray *buffer = [IOSByteArray arrayWithLength:OrgW3cToolsCodecBase64Decoder_BUFFER_SIZE];
  IOSByteArray *chunk = [IOSByteArray arrayWithLength:4];
  int got = -1;
  int ready = 0;
  while ((got = [((JavaIoInputStream *) nil_chk(in_)) readWithByteArray:buffer]) > 0) {
    int skiped = 0;
    while (skiped < got) {
      while (ready < 4) {
        if (skiped >= got) {
          goto continue_fill;
        }
        int ch = [self checkWithInt:[((IOSByteArray *) nil_chk(buffer)) byteAtIndex:skiped++]];
        if (ch >= 0) {
          (*[((IOSByteArray *) nil_chk(chunk)) byteRefAtIndex:ready++]) = (char) ch;
        }
      }
      if ([((IOSByteArray *) nil_chk(chunk)) byteAtIndex:2] == 65) {
        [((JavaIoOutputStream *) nil_chk(out_)) writeWithInt:[self get1WithByteArray:chunk withInt:0]];
        return;
      }
      else if ([((IOSByteArray *) nil_chk(chunk)) byteAtIndex:3] == 65) {
        [((JavaIoOutputStream *) nil_chk(out_)) writeWithInt:[self get1WithByteArray:chunk withInt:0]];
        [((JavaIoOutputStream *) nil_chk(out_)) writeWithInt:[self get2WithByteArray:chunk withInt:0]];
        return;
      }
      else {
        [((JavaIoOutputStream *) nil_chk(out_)) writeWithInt:[self get1WithByteArray:chunk withInt:0]];
        [((JavaIoOutputStream *) nil_chk(out_)) writeWithInt:[self get2WithByteArray:chunk withInt:0]];
        [((JavaIoOutputStream *) nil_chk(out_)) writeWithInt:[self get3WithByteArray:chunk withInt:0]];
      }
      ready = 0;
    }
    continue_fill: ;
  }
  if (ready != 0) {
    @throw [[OrgW3cToolsCodecBase64FormatException alloc] initWithNSString:@"Invalid length."];
  }
  [((JavaIoOutputStream *) nil_chk(out_)) flush];
}

- (NSString *)processString {
  if (!stringp_) {
    @throw [[JavaLangRuntimeException alloc] initWithNSString:[NSString stringWithFormat:@"%@[processString]invalid call (not a String)", [[self getClass] getName]]];
  }
  @try {
    [self process];
  }
  @catch (JavaIoIOException *e) {
  }
  NSString *s;
  @try {
    s = [((JavaIoByteArrayOutputStream *) out_) toStringWithNSString:@"ISO-8859-1"];
  }
  @catch (JavaIoUnsupportedEncodingException *ex) {
    @throw [[JavaLangRuntimeException alloc] initWithNSString:[NSString stringWithFormat:@"%@[processString] Unable to convertproperly char to bytes", [[self getClass] getName]]];
  }
  return s;
}

- (id)initWithNSString:(NSString *)input {
  if ((self = [super init])) {
    in_ = nil;
    out_ = nil;
    stringp_ = NO;
    IOSByteArray *bytes;
    @try {
      bytes = [((NSString *) nil_chk(input)) getBytesWithCharset:@"ISO-8859-1"];
    }
    @catch (JavaIoUnsupportedEncodingException *ex) {
      @throw [[JavaLangRuntimeException alloc] initWithNSString:[NSString stringWithFormat:@"%@[Constructor] Unable to convertproperly char to bytes", [[self getClass] getName]]];
    }
    self.stringp = YES;
    self.in = [[JavaIoByteArrayInputStream alloc] initWithByteArray:bytes];
    self.out = [[JavaIoByteArrayOutputStream alloc] init];
  }
  return self;
}

- (id)initWithJavaIoInputStream:(JavaIoInputStream *)inArg
         withJavaIoOutputStream:(JavaIoOutputStream *)outArg {
  if ((self = [super init])) {
    in_ = nil;
    out_ = nil;
    stringp_ = NO;
    self.in = inArg;
    self.out = outArg;
    self.stringp = NO;
  }
  return self;
}

- (void)copyAllPropertiesTo:(id)copy {
  [super copyAllPropertiesTo:copy];
  OrgW3cToolsCodecBase64Decoder *typedCopy = (OrgW3cToolsCodecBase64Decoder *) copy;
  typedCopy.in = in_;
  typedCopy.out = out_;
  typedCopy.stringp = stringp_;
}

@end
