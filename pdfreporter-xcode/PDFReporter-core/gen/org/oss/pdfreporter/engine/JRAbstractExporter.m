//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: pdfreporter-core/src/org/oss/pdfreporter/engine/JRAbstractExporter.java
//
//  Created by kendra on 9/27/13.
//

#include "IOSClass.h"
#include "IOSIntArray.h"
#include "IOSObjectArray.h"
#include "java/io/File.h"
#include "java/io/InputStream.h"
#include "java/lang/Boolean.h"
#include "java/lang/Byte.h"
#include "java/lang/Character.h"
#include "java/lang/ClassLoader.h"
#include "java/lang/ClassNotFoundException.h"
#include "java/lang/Double.h"
#include "java/lang/Float.h"
#include "java/lang/Integer.h"
#include "java/lang/Long.h"
#include "java/lang/NumberFormatException.h"
#include "java/lang/Short.h"
#include "java/math/BigDecimal.h"
#include "java/math/BigInteger.h"
#include "java/text/ParseException.h"
#include "java/util/ArrayList.h"
#include "java/util/Date.h"
#include "java/util/HashMap.h"
#include "java/util/LinkedList.h"
#include "java/util/List.h"
#include "java/util/Locale.h"
#include "java/util/Map.h"
#include "java/util/TimeZone.h"
#include "org/oss/pdfreporter/engine/DefaultJasperReportsContext.h"
#include "org/oss/pdfreporter/engine/JRAbstractExporter.h"
#include "org/oss/pdfreporter/engine/JRException.h"
#include "org/oss/pdfreporter/engine/JRExporter.h"
#include "org/oss/pdfreporter/engine/JRExporterParameter.h"
#include "org/oss/pdfreporter/engine/JRLineBox.h"
#include "org/oss/pdfreporter/engine/JRPrintFrame.h"
#include "org/oss/pdfreporter/engine/JRPrintHyperlink.h"
#include "org/oss/pdfreporter/engine/JRPrintText.h"
#include "org/oss/pdfreporter/engine/JRPropertiesMap.h"
#include "org/oss/pdfreporter/engine/JRPropertiesUtil.h"
#include "org/oss/pdfreporter/engine/JRStyledTextAttributeSelector.h"
#include "org/oss/pdfreporter/engine/JasperPrint.h"
#include "org/oss/pdfreporter/engine/JasperReportsContext.h"
#include "org/oss/pdfreporter/engine/ReportContext.h"
#include "org/oss/pdfreporter/engine/export/DefaultHyperlinkProducerFactory.h"
#include "org/oss/pdfreporter/engine/export/ExporterFilter.h"
#include "org/oss/pdfreporter/engine/export/ExporterFilterFactory.h"
#include "org/oss/pdfreporter/engine/export/ExporterFilterFactoryUtil.h"
#include "org/oss/pdfreporter/engine/export/JRExporterContext.h"
#include "org/oss/pdfreporter/engine/export/JRHyperlinkProducer.h"
#include "org/oss/pdfreporter/engine/export/JRHyperlinkProducerFactory.h"
#include "org/oss/pdfreporter/engine/export/data/BooleanTextValue.h"
#include "org/oss/pdfreporter/engine/export/data/DateTextValue.h"
#include "org/oss/pdfreporter/engine/export/data/NumberTextValue.h"
#include "org/oss/pdfreporter/engine/export/data/StringTextValue.h"
#include "org/oss/pdfreporter/engine/export/data/TextValue.h"
#include "org/oss/pdfreporter/engine/util/FileResolver.h"
#include "org/oss/pdfreporter/engine/util/JRClassLoader.h"
#include "org/oss/pdfreporter/engine/util/JRDataUtils.h"
#include "org/oss/pdfreporter/engine/util/JRLoader.h"
#include "org/oss/pdfreporter/engine/util/JRStyledText.h"
#include "org/oss/pdfreporter/engine/util/JRStyledTextParser.h"
#include "org/oss/pdfreporter/engine/util/JRStyledTextUtil.h"
#include "org/oss/pdfreporter/engine/util/LocalJasperReportsContext.h"
#include "org/oss/pdfreporter/net/IURL.h"
#include "org/oss/pdfreporter/registry/ApiRegistry.h"
#include "org/oss/pdfreporter/text/format/IDateFormat.h"
#include "org/oss/pdfreporter/text/format/INumberFormat.h"
#include "org/oss/pdfreporter/text/format/factory/IFormatFactory.h"

@implementation OrgOssPdfreporterEngineJRAbstractExporter

static NSString * OrgOssPdfreporterEngineJRAbstractExporter_PROPERTY_DEFAULT_FILTER_FACTORY_ = @"net.sf.jasperreports.export.default.filter.factory";
static NSString * OrgOssPdfreporterEngineJRAbstractExporter_PROPERTY_SUFFIX_DEFAULT_FILTER_FACTORY_ = @"default.filter.factory";

@synthesize jasperReportsContext = jasperReportsContext_;
@synthesize propertiesUtil = propertiesUtil_;
@synthesize allSelector = allSelector_;
@synthesize noBackcolorSelector = noBackcolorSelector_;
@synthesize noneSelector = noneSelector_;
@synthesize styledTextUtil = styledTextUtil_;
@synthesize parameterResolver = parameterResolver_;
@synthesize parameters = parameters_;
@synthesize jasperPrintList = jasperPrintList_;
@synthesize jasperPrint = jasperPrint_;
@synthesize isModeBatch = isModeBatch_;
@synthesize startPageIndex = startPageIndex_;
@synthesize endPageIndex = endPageIndex_;
@synthesize globalOffsetX = globalOffsetX_;
@synthesize globalOffsetY = globalOffsetY_;
@synthesize filter = filter_;
@synthesize fontMap = fontMap_;
@synthesize elementOffsetStack = elementOffsetStack_;
@synthesize elementOffsetX = elementOffsetX_;
@synthesize elementOffsetY = elementOffsetY_;
@synthesize dateFormatCache = dateFormatCache_;
@synthesize numberFormatCache = numberFormatCache_;
@synthesize hyperlinkProducerFactory = hyperlinkProducerFactory_;
@synthesize reportContext = reportContext_;

+ (NSString *)PROPERTY_DEFAULT_FILTER_FACTORY {
  return OrgOssPdfreporterEngineJRAbstractExporter_PROPERTY_DEFAULT_FILTER_FACTORY_;
}

+ (NSString *)PROPERTY_SUFFIX_DEFAULT_FILTER_FACTORY {
  return OrgOssPdfreporterEngineJRAbstractExporter_PROPERTY_SUFFIX_DEFAULT_FILTER_FACTORY_;
}

- (id)init {
  return [self initOrgOssPdfreporterEngineJRAbstractExporterWithOrgOssPdfreporterEngineJasperReportsContext:[OrgOssPdfreporterEngineDefaultJasperReportsContext getInstance]];
}

- (id)initOrgOssPdfreporterEngineJRAbstractExporterWithOrgOssPdfreporterEngineJasperReportsContext:(id<OrgOssPdfreporterEngineJasperReportsContext>)jasperReportsContext {
  if ((self = [super init])) {
    parameters_ = [[JavaUtilHashMap alloc] init];
    isModeBatch_ = YES;
    elementOffsetStack_ = [[JavaUtilLinkedList alloc] init];
    elementOffsetX_ = globalOffsetX_;
    elementOffsetY_ = globalOffsetY_;
    dateFormatCache_ = [[JavaUtilHashMap alloc] init];
    numberFormatCache_ = [[JavaUtilHashMap alloc] init];
    [self setJasperReportsContextWithOrgOssPdfreporterEngineJasperReportsContext:jasperReportsContext];
  }
  return self;
}

- (id)initWithOrgOssPdfreporterEngineJasperReportsContext:(id<OrgOssPdfreporterEngineJasperReportsContext>)jasperReportsContext {
  return [self initOrgOssPdfreporterEngineJRAbstractExporterWithOrgOssPdfreporterEngineJasperReportsContext:jasperReportsContext];
}

- (void)reset {
  parameters_ = [[JavaUtilHashMap alloc] init];
  elementOffsetStack_ = [[JavaUtilLinkedList alloc] init];
}

- (void)setParameterWithOrgOssPdfreporterEngineJRExporterParameter:(OrgOssPdfreporterEngineJRExporterParameter *)parameter
                                                            withId:(id)value {
  (void) [((id<JavaUtilMap>) nil_chk(parameters_)) putWithId:parameter withId:value];
}

- (id)getParameterWithOrgOssPdfreporterEngineJRExporterParameter:(OrgOssPdfreporterEngineJRExporterParameter *)parameter {
  return [((id<JavaUtilMap>) nil_chk(parameters_)) getWithId:parameter];
}

- (void)setParametersWithJavaUtilMap:(id<JavaUtilMap>)parameters {
  self.parameters = parameters;
}

- (id<JavaUtilMap>)getParameters {
  return parameters_;
}

- (id<OrgOssPdfreporterEngineJRAbstractExporter_ParameterResolver>)getParameterResolver {
  if (parameterResolver_ == nil) {
    BOOL parametersOverrideHints;
    JavaLangBoolean *param = (JavaLangBoolean *) [((id<JavaUtilMap>) nil_chk(parameters_)) getWithId:[OrgOssPdfreporterEngineJRExporterParameter PARAMETERS_OVERRIDE_REPORT_HINTS]];
    if (param == nil) {
      parametersOverrideHints = [((OrgOssPdfreporterEngineJRPropertiesUtil *) nil_chk([self getPropertiesUtil])) getBooleanPropertyWithNSString:[OrgOssPdfreporterEngineJRExporterParameter PROPERTY_EXPORT_PARAMETERS_OVERRIDE_REPORT_HINTS]];
    }
    else {
      parametersOverrideHints = [param booleanValue];
    }
    if (parametersOverrideHints) {
      parameterResolver_ = [[OrgOssPdfreporterEngineJRAbstractExporter_ParameterOverrideResolver alloc] initWithOrgOssPdfreporterEngineJRAbstractExporter:self];
    }
    else {
      parameterResolver_ = [[OrgOssPdfreporterEngineJRAbstractExporter_ParameterOverriddenResolver alloc] initWithOrgOssPdfreporterEngineJRAbstractExporter:self];
    }
  }
  return parameterResolver_;
}

- (NSString *)getStringParameterWithOrgOssPdfreporterEngineJRExporterParameter:(OrgOssPdfreporterEngineJRExporterParameter *)parameter
                                                                  withNSString:(NSString *)property {
  return [((id<OrgOssPdfreporterEngineJRAbstractExporter_ParameterResolver>) nil_chk([self getParameterResolver])) getStringParameterWithOrgOssPdfreporterEngineJRExporterParameter:parameter withNSString:property];
}

- (IOSObjectArray *)getStringArrayParameterWithOrgOssPdfreporterEngineJRExporterParameter:(OrgOssPdfreporterEngineJRExporterParameter *)parameter
                                                                             withNSString:(NSString *)property {
  return [((id<OrgOssPdfreporterEngineJRAbstractExporter_ParameterResolver>) nil_chk([self getParameterResolver])) getStringArrayParameterWithOrgOssPdfreporterEngineJRExporterParameter:parameter withNSString:property];
}

- (NSString *)getStringParameterOrDefaultWithOrgOssPdfreporterEngineJRExporterParameter:(OrgOssPdfreporterEngineJRExporterParameter *)parameter
                                                                           withNSString:(NSString *)property {
  return [((id<OrgOssPdfreporterEngineJRAbstractExporter_ParameterResolver>) nil_chk([self getParameterResolver])) getStringParameterOrDefaultWithOrgOssPdfreporterEngineJRExporterParameter:parameter withNSString:property];
}

- (BOOL)getBooleanParameterWithOrgOssPdfreporterEngineJRExporterParameter:(OrgOssPdfreporterEngineJRExporterParameter *)parameter
                                                             withNSString:(NSString *)property
                                                                 withBOOL:(BOOL)defaultValue {
  return [((id<OrgOssPdfreporterEngineJRAbstractExporter_ParameterResolver>) nil_chk([self getParameterResolver])) getBooleanParameterWithOrgOssPdfreporterEngineJRExporterParameter:parameter withNSString:property withBOOL:defaultValue];
}

- (int)getIntegerParameterWithOrgOssPdfreporterEngineJRExporterParameter:(OrgOssPdfreporterEngineJRExporterParameter *)parameter
                                                            withNSString:(NSString *)property
                                                                 withInt:(int)defaultValue {
  return [((id<OrgOssPdfreporterEngineJRAbstractExporter_ParameterResolver>) nil_chk([self getParameterResolver])) getIntegerParameterWithOrgOssPdfreporterEngineJRExporterParameter:parameter withNSString:property withInt:defaultValue];
}

- (float)getFloatParameterWithOrgOssPdfreporterEngineJRExporterParameter:(OrgOssPdfreporterEngineJRExporterParameter *)parameter
                                                            withNSString:(NSString *)property
                                                               withFloat:(float)defaultValue {
  return [((id<OrgOssPdfreporterEngineJRAbstractExporter_ParameterResolver>) nil_chk([self getParameterResolver])) getFloatParameterWithOrgOssPdfreporterEngineJRExporterParameter:parameter withNSString:property withFloat:defaultValue];
}

- (JavaLangCharacter *)getCharacterParameterWithOrgOssPdfreporterEngineJRExporterParameter:(OrgOssPdfreporterEngineJRExporterParameter *)parameter
                                                                              withNSString:(NSString *)property {
  return [((id<OrgOssPdfreporterEngineJRAbstractExporter_ParameterResolver>) nil_chk([self getParameterResolver])) getCharacterParameterWithOrgOssPdfreporterEngineJRExporterParameter:parameter withNSString:property];
}

- (id<OrgOssPdfreporterEngineJasperReportsContext>)getJasperReportsContext {
  return jasperReportsContext_;
}

- (void)setJasperReportsContextWithOrgOssPdfreporterEngineJasperReportsContext:(id<OrgOssPdfreporterEngineJasperReportsContext>)jasperReportsContext {
  self.jasperReportsContext = jasperReportsContext;
  self.propertiesUtil = [OrgOssPdfreporterEngineJRPropertiesUtil getInstanceWithOrgOssPdfreporterEngineJasperReportsContext:jasperReportsContext];
  self.allSelector = [OrgOssPdfreporterEngineJRStyledTextAttributeSelector getAllSelectorWithOrgOssPdfreporterEngineJasperReportsContext:jasperReportsContext];
  self.noBackcolorSelector = [OrgOssPdfreporterEngineJRStyledTextAttributeSelector getNoBackcolorSelectorWithOrgOssPdfreporterEngineJasperReportsContext:jasperReportsContext];
  self.noneSelector = [OrgOssPdfreporterEngineJRStyledTextAttributeSelector getNoneSelectorWithOrgOssPdfreporterEngineJasperReportsContext:jasperReportsContext];
  self.styledTextUtil = [OrgOssPdfreporterEngineUtilJRStyledTextUtil getInstanceWithOrgOssPdfreporterEngineJasperReportsContext:jasperReportsContext];
}

- (void)setReportContextWithOrgOssPdfreporterEngineReportContext:(id<OrgOssPdfreporterEngineReportContext>)reportContext {
  self.reportContext = reportContext;
}

- (id<OrgOssPdfreporterEngineReportContext>)getReportContext {
  return reportContext_;
}

- (OrgOssPdfreporterEngineJRPropertiesUtil *)getPropertiesUtil {
  return propertiesUtil_;
}

- (void)exportReport {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
}

- (void)setOffset {
  [self setOffsetWithBOOL:YES];
}

- (void)setOffsetWithBOOL:(BOOL)setElementOffsets {
  JavaLangInteger *offsetX = (JavaLangInteger *) [((id<JavaUtilMap>) nil_chk(parameters_)) getWithId:[OrgOssPdfreporterEngineJRExporterParameter OFFSET_X]];
  if (offsetX != nil) {
    globalOffsetX_ = [offsetX intValue];
  }
  else {
    globalOffsetX_ = 0;
  }
  JavaLangInteger *offsetY = (JavaLangInteger *) [((id<JavaUtilMap>) nil_chk(parameters_)) getWithId:[OrgOssPdfreporterEngineJRExporterParameter OFFSET_Y]];
  if (offsetY != nil) {
    globalOffsetY_ = [offsetY intValue];
  }
  else {
    globalOffsetY_ = 0;
  }
  if (setElementOffsets) {
    elementOffsetX_ = globalOffsetX_;
    elementOffsetY_ = globalOffsetY_;
  }
}

- (void)setExportContext {
  if ([((id<JavaUtilMap>) nil_chk(parameters_)) containsKeyWithId:[OrgOssPdfreporterEngineJRExporterParameter CLASS_LOADER]] || [((id<JavaUtilMap>) nil_chk(parameters_)) containsKeyWithId:[OrgOssPdfreporterEngineJRExporterParameter URL_HANDLER_FACTORY]] || [((id<JavaUtilMap>) nil_chk(parameters_)) containsKeyWithId:[OrgOssPdfreporterEngineJRExporterParameter FILE_RESOLVER]]) {
    OrgOssPdfreporterEngineUtilLocalJasperReportsContext *localJasperReportsContext = [[OrgOssPdfreporterEngineUtilLocalJasperReportsContext alloc] initWithOrgOssPdfreporterEngineJasperReportsContext:jasperReportsContext_];
    if ([((id<JavaUtilMap>) nil_chk(parameters_)) containsKeyWithId:[OrgOssPdfreporterEngineJRExporterParameter CLASS_LOADER]]) {
      [((OrgOssPdfreporterEngineUtilLocalJasperReportsContext *) nil_chk(localJasperReportsContext)) setClassLoaderWithJavaLangClassLoader:(JavaLangClassLoader *) [((id<JavaUtilMap>) nil_chk(parameters_)) getWithId:[OrgOssPdfreporterEngineJRExporterParameter CLASS_LOADER]]];
    }
    if ([((id<JavaUtilMap>) nil_chk(parameters_)) containsKeyWithId:[OrgOssPdfreporterEngineJRExporterParameter FILE_RESOLVER]]) {
      [((OrgOssPdfreporterEngineUtilLocalJasperReportsContext *) nil_chk(localJasperReportsContext)) setFileResolverWithOrgOssPdfreporterEngineUtilFileResolver:(id<OrgOssPdfreporterEngineUtilFileResolver>) [((id<JavaUtilMap>) nil_chk(parameters_)) getWithId:[OrgOssPdfreporterEngineJRExporterParameter FILE_RESOLVER]]];
    }
    [self setJasperReportsContextWithOrgOssPdfreporterEngineJasperReportsContext:localJasperReportsContext];
  }
}

- (void)resetExportContext {
}

- (void)setClassLoader {
  [self setExportContext];
}

- (void)resetClassLoader {
  [self resetExportContext];
}

- (void)setJasperPrintWithOrgOssPdfreporterEngineJasperPrint:(OrgOssPdfreporterEngineJasperPrint *)jasperPrint {
  self.jasperPrint = jasperPrint;
  NSString *localeCode = [((OrgOssPdfreporterEngineJasperPrint *) nil_chk(jasperPrint)) getLocaleCode];
  [OrgOssPdfreporterEngineUtilJRStyledTextParser setLocaleWithJavaUtilLocale:localeCode == nil ? nil : [OrgOssPdfreporterEngineUtilJRDataUtils getLocaleWithNSString:localeCode]];
}

- (void)setInput {
  jasperPrintList_ = (id<JavaUtilList>) [((id<JavaUtilMap>) nil_chk(parameters_)) getWithId:[OrgOssPdfreporterEngineJRExporterParameter JASPER_PRINT_LIST]];
  if (jasperPrintList_ == nil) {
    isModeBatch_ = NO;
    jasperPrint_ = (OrgOssPdfreporterEngineJasperPrint *) [((id<JavaUtilMap>) nil_chk(parameters_)) getWithId:[OrgOssPdfreporterEngineJRExporterParameter JASPER_PRINT]];
    if (jasperPrint_ == nil) {
      JavaIoInputStream *is = (JavaIoInputStream *) [((id<JavaUtilMap>) nil_chk(parameters_)) getWithId:[OrgOssPdfreporterEngineJRExporterParameter INPUT_STREAM]];
      if (is != nil) {
        jasperPrint_ = (OrgOssPdfreporterEngineJasperPrint *) [OrgOssPdfreporterEngineUtilJRLoader loadObjectWithJavaIoInputStream:is];
      }
      else {
        id<OrgOssPdfreporterNetIURL> url = (id<OrgOssPdfreporterNetIURL>) [((id<JavaUtilMap>) nil_chk(parameters_)) getWithId:[OrgOssPdfreporterEngineJRExporterParameter INPUT_URL]];
        if (url != nil) {
          jasperPrint_ = (OrgOssPdfreporterEngineJasperPrint *) [OrgOssPdfreporterEngineUtilJRLoader loadObjectWithOrgOssPdfreporterNetIURL:url];
        }
        else {
          JavaIoFile *file = (JavaIoFile *) [((id<JavaUtilMap>) nil_chk(parameters_)) getWithId:[OrgOssPdfreporterEngineJRExporterParameter INPUT_FILE]];
          if (file != nil) {
            jasperPrint_ = (OrgOssPdfreporterEngineJasperPrint *) [OrgOssPdfreporterEngineUtilJRLoader loadObjectWithJavaIoFile:file];
          }
          else {
            NSString *fileName = (NSString *) [((id<JavaUtilMap>) nil_chk(parameters_)) getWithId:[OrgOssPdfreporterEngineJRExporterParameter INPUT_FILE_NAME]];
            if (fileName != nil) {
              jasperPrint_ = (OrgOssPdfreporterEngineJasperPrint *) [OrgOssPdfreporterEngineUtilJRLoader loadObjectFromFileWithNSString:fileName];
            }
            else {
              @throw [[OrgOssPdfreporterEngineJRException alloc] initWithNSString:@"No input source supplied to the exporter."];
            }
          }
        }
      }
    }
    jasperPrintList_ = [[JavaUtilArrayList alloc] init];
    [jasperPrintList_ addWithId:jasperPrint_];
  }
  else {
    isModeBatch_ = YES;
    if ([jasperPrintList_ size] == 0) {
      @throw [[OrgOssPdfreporterEngineJRException alloc] initWithNSString:@"Empty input source supplied to the exporter in batch mode."];
    }
    jasperPrint_ = [jasperPrintList_ getWithInt:0];
  }
  [self setJasperPrintWithOrgOssPdfreporterEngineJasperPrint:jasperPrint_];
  filter_ = (id<OrgOssPdfreporterEngineExportExporterFilter>) [((id<JavaUtilMap>) nil_chk(parameters_)) getWithId:[OrgOssPdfreporterEngineJRExporterParameter FILTER]];
}

- (void)setPageRange {
  int lastPageIndex = -1;
  if ([((OrgOssPdfreporterEngineJasperPrint *) nil_chk(jasperPrint_)) getPages] != nil) {
    lastPageIndex = [((id<JavaUtilList>) nil_chk([((OrgOssPdfreporterEngineJasperPrint *) nil_chk(jasperPrint_)) getPages])) size] - 1;
  }
  JavaLangInteger *start = (JavaLangInteger *) [((id<JavaUtilMap>) nil_chk(parameters_)) getWithId:[OrgOssPdfreporterEngineJRExporterParameter START_PAGE_INDEX]];
  if (start == nil) {
    startPageIndex_ = 0;
  }
  else {
    startPageIndex_ = [start intValue];
    if (startPageIndex_ < 0 || startPageIndex_ > lastPageIndex) {
      @throw [[OrgOssPdfreporterEngineJRException alloc] initWithNSString:[NSString stringWithFormat:@"Start page index out of range : %d of %d", startPageIndex_, lastPageIndex]];
    }
  }
  JavaLangInteger *end = (JavaLangInteger *) [((id<JavaUtilMap>) nil_chk(parameters_)) getWithId:[OrgOssPdfreporterEngineJRExporterParameter END_PAGE_INDEX]];
  if (end == nil) {
    endPageIndex_ = lastPageIndex;
  }
  else {
    endPageIndex_ = [end intValue];
    if (endPageIndex_ < startPageIndex_ || endPageIndex_ > lastPageIndex) {
      @throw [[OrgOssPdfreporterEngineJRException alloc] initWithNSString:[NSString stringWithFormat:@"End page index out of range : %d (%d : %d)", endPageIndex_, startPageIndex_, lastPageIndex]];
    }
  }
  JavaLangInteger *index = (JavaLangInteger *) [((id<JavaUtilMap>) nil_chk(parameters_)) getWithId:[OrgOssPdfreporterEngineJRExporterParameter PAGE_INDEX]];
  if (index != nil) {
    int pageIndex = [index intValue];
    if (pageIndex < 0 || pageIndex > lastPageIndex) {
      @throw [[OrgOssPdfreporterEngineJRException alloc] initWithNSString:[NSString stringWithFormat:@"Page index out of range : %d of %d", pageIndex, lastPageIndex]];
    }
    startPageIndex_ = pageIndex;
    endPageIndex_ = pageIndex;
  }
}

- (OrgOssPdfreporterEngineUtilJRStyledText *)getStyledTextWithOrgOssPdfreporterEngineJRPrintText:(id<OrgOssPdfreporterEngineJRPrintText>)textElement
                                                                                        withBOOL:(BOOL)setBackcolor {
  return [((OrgOssPdfreporterEngineUtilJRStyledTextUtil *) nil_chk(styledTextUtil_)) getStyledTextWithOrgOssPdfreporterEngineJRPrintText:textElement withOrgOssPdfreporterEngineJRStyledTextAttributeSelector:setBackcolor ? allSelector_ : noBackcolorSelector_];
}

- (OrgOssPdfreporterEngineUtilJRStyledText *)getStyledTextWithOrgOssPdfreporterEngineJRPrintText:(id<OrgOssPdfreporterEngineJRPrintText>)textElement {
  return [self getStyledTextWithOrgOssPdfreporterEngineJRPrintText:textElement withBOOL:YES];
}

- (void)setOutput {
}

- (int)getOffsetX {
  return elementOffsetX_;
}

- (int)getOffsetY {
  return elementOffsetY_;
}

- (void)setFrameElementsOffsetWithOrgOssPdfreporterEngineJRPrintFrame:(id<OrgOssPdfreporterEngineJRPrintFrame>)frame
                                                             withBOOL:(BOOL)relative {
  if (relative) {
    [self setElementOffsetsWithInt:0 withInt:0];
  }
  else {
    int topPadding = [((JavaLangInteger *) nil_chk([((id<OrgOssPdfreporterEngineJRLineBox>) nil_chk([((id<OrgOssPdfreporterEngineJRPrintFrame>) nil_chk(frame)) getLineBox])) getTopPadding])) intValue];
    int leftPadding = [((JavaLangInteger *) nil_chk([((id<OrgOssPdfreporterEngineJRLineBox>) nil_chk([((id<OrgOssPdfreporterEngineJRPrintFrame>) nil_chk(frame)) getLineBox])) getLeftPadding])) intValue];
    [self setElementOffsetsWithInt:[self getOffsetX] + [((id<OrgOssPdfreporterEngineJRPrintFrame>) nil_chk(frame)) getX] + leftPadding withInt:[self getOffsetY] + [((id<OrgOssPdfreporterEngineJRPrintFrame>) nil_chk(frame)) getY] + topPadding];
  }
}

- (void)setElementOffsetsWithInt:(int)offsetX
                         withInt:(int)offsetY {
  [((JavaUtilLinkedList *) nil_chk(elementOffsetStack_)) addLastWithId:[IOSIntArray arrayWithInts:(int[]){ elementOffsetX_, elementOffsetY_ } count:2]];
  elementOffsetX_ = offsetX;
  elementOffsetY_ = offsetY;
}

- (void)restoreElementOffsets {
  IOSIntArray *offsets = [((JavaUtilLinkedList *) nil_chk(elementOffsetStack_)) removeLast];
  elementOffsetX_ = [((IOSIntArray *) nil_chk(offsets)) intAtIndex:0];
  elementOffsetY_ = [((IOSIntArray *) nil_chk(offsets)) intAtIndex:1];
}

- (NSString *)getTextFormatFactoryClassWithOrgOssPdfreporterEngineJRPrintText:(id<OrgOssPdfreporterEngineJRPrintText>)text {
  NSString *formatFactoryClass = [((id<OrgOssPdfreporterEngineJRPrintText>) nil_chk(text)) getFormatFactoryClass];
  if (formatFactoryClass == nil) {
    formatFactoryClass = [((OrgOssPdfreporterEngineJasperPrint *) nil_chk(jasperPrint_)) getFormatFactoryClass];
  }
  return formatFactoryClass;
}

- (JavaUtilLocale *)getLocale {
  NSString *localeCode = [((OrgOssPdfreporterEngineJasperPrint *) nil_chk(jasperPrint_)) getLocaleCode];
  return localeCode == nil ? nil : [OrgOssPdfreporterEngineUtilJRDataUtils getLocaleWithNSString:localeCode];
}

- (JavaUtilLocale *)getTextLocaleWithOrgOssPdfreporterEngineJRPrintText:(id<OrgOssPdfreporterEngineJRPrintText>)text {
  NSString *localeCode = [((id<OrgOssPdfreporterEngineJRPrintText>) nil_chk(text)) getLocaleCode];
  if (localeCode == nil) {
    localeCode = [((OrgOssPdfreporterEngineJasperPrint *) nil_chk(jasperPrint_)) getLocaleCode];
  }
  return localeCode == nil ? nil : [OrgOssPdfreporterEngineUtilJRDataUtils getLocaleWithNSString:localeCode];
}

- (JavaUtilTimeZone *)getTextTimeZoneWithOrgOssPdfreporterEngineJRPrintText:(id<OrgOssPdfreporterEngineJRPrintText>)text {
  NSString *tzId = [((id<OrgOssPdfreporterEngineJRPrintText>) nil_chk(text)) getTimeZoneId];
  if (tzId == nil) {
    tzId = [((OrgOssPdfreporterEngineJasperPrint *) nil_chk(jasperPrint_)) getTimeZoneId];
  }
  return tzId == nil ? nil : [OrgOssPdfreporterEngineUtilJRDataUtils getTimeZoneWithNSString:tzId];
}

- (OrgOssPdfreporterEngineExportDataTextValue *)getTextValueWithOrgOssPdfreporterEngineJRPrintText:(id<OrgOssPdfreporterEngineJRPrintText>)text
                                                                                      withNSString:(NSString *)textStr {
  OrgOssPdfreporterEngineExportDataTextValue *textValue;
  if ([((id<OrgOssPdfreporterEngineJRPrintText>) nil_chk(text)) getValueClassName] == nil) {
    textValue = [self getTextValueStringWithOrgOssPdfreporterEngineJRPrintText:text withNSString:textStr];
  }
  else {
    @try {
      IOSClass *valueClass = [OrgOssPdfreporterEngineUtilJRClassLoader loadClassForRealNameWithNSString:[((id<OrgOssPdfreporterEngineJRPrintText>) nil_chk(text)) getValueClassName]];
      if ([[IOSClass classWithClass:[NSNumber class]] isAssignableFrom:valueClass]) {
        textValue = [self getNumberCellValueWithOrgOssPdfreporterEngineJRPrintText:text withNSString:textStr];
      }
      else if ([[IOSClass classWithClass:[JavaUtilDate class]] isAssignableFrom:valueClass]) {
        textValue = [self getDateCellValueWithOrgOssPdfreporterEngineJRPrintText:text withNSString:textStr];
      }
      else if ([[IOSClass classWithClass:[JavaLangBoolean class]] isEqual:valueClass]) {
        textValue = [self getBooleanCellValueWithOrgOssPdfreporterEngineJRPrintText:text withNSString:textStr];
      }
      else {
        textValue = [self getTextValueStringWithOrgOssPdfreporterEngineJRPrintText:text withNSString:textStr];
      }
    }
    @catch (JavaTextParseException *e) {
      textValue = [self getTextValueStringWithOrgOssPdfreporterEngineJRPrintText:text withNSString:textStr];
    }
    @catch (JavaLangClassNotFoundException *e) {
      textValue = [self getTextValueStringWithOrgOssPdfreporterEngineJRPrintText:text withNSString:textStr];
    }
  }
  return textValue;
}

- (OrgOssPdfreporterEngineExportDataTextValue *)getTextValueStringWithOrgOssPdfreporterEngineJRPrintText:(id<OrgOssPdfreporterEngineJRPrintText>)text
                                                                                            withNSString:(NSString *)textStr {
  return [[OrgOssPdfreporterEngineExportDataStringTextValue alloc] initWithNSString:textStr];
}

- (OrgOssPdfreporterEngineExportDataTextValue *)getDateCellValueWithOrgOssPdfreporterEngineJRPrintText:(id<OrgOssPdfreporterEngineJRPrintText>)text
                                                                                          withNSString:(NSString *)textStr {
  return [[OrgOssPdfreporterEngineExportDataDateTextValue alloc] initWithNSString:textStr withJavaUtilDate:(JavaUtilDate *) [((id<OrgOssPdfreporterEngineJRPrintText>) nil_chk(text)) getValue] withNSString:[((id<OrgOssPdfreporterEngineJRPrintText>) nil_chk(text)) getPattern]];
}

- (OrgOssPdfreporterEngineExportDataTextValue *)getNumberCellValueWithOrgOssPdfreporterEngineJRPrintText:(id<OrgOssPdfreporterEngineJRPrintText>)text
                                                                                            withNSString:(NSString *)textStr {
  return [[OrgOssPdfreporterEngineExportDataNumberTextValue alloc] initWithNSString:textStr withNSNumber:(NSNumber *) [((id<OrgOssPdfreporterEngineJRPrintText>) nil_chk(text)) getValue] withNSString:[((id<OrgOssPdfreporterEngineJRPrintText>) nil_chk(text)) getPattern]];
}

- (NSNumber *)defaultParseNumberWithNSString:(NSString *)textStr
                                withIOSClass:(IOSClass *)valueClass {
  NSNumber *value = nil;
  @try {
    if ([((IOSClass *) nil_chk(valueClass)) isEqual:[IOSClass classWithClass:[JavaLangByte class]]]) {
      value = [JavaLangByte valueOfWithNSString:textStr];
    }
    else if ([((IOSClass *) nil_chk(valueClass)) isEqual:[IOSClass classWithClass:[JavaLangShort class]]]) {
      value = [JavaLangShort valueOfWithNSString:textStr];
    }
    else if ([((IOSClass *) nil_chk(valueClass)) isEqual:[IOSClass classWithClass:[JavaLangInteger class]]]) {
      value = [JavaLangInteger valueOfWithNSString:textStr];
    }
    else if ([((IOSClass *) nil_chk(valueClass)) isEqual:[IOSClass classWithClass:[JavaLangLong class]]]) {
      value = [JavaLangLong valueOfWithNSString:textStr];
    }
    else if ([((IOSClass *) nil_chk(valueClass)) isEqual:[IOSClass classWithClass:[JavaLangFloat class]]]) {
      value = [JavaLangFloat valueOfWithNSString:textStr];
    }
    else if ([((IOSClass *) nil_chk(valueClass)) isEqual:[IOSClass classWithClass:[JavaLangDouble class]]]) {
      value = [JavaLangDouble valueOfWithNSString:textStr];
    }
    else if ([((IOSClass *) nil_chk(valueClass)) isEqual:[IOSClass classWithClass:[JavaMathBigInteger class]]]) {
      value = [[JavaMathBigInteger alloc] initWithNSString:textStr];
    }
    else if ([((IOSClass *) nil_chk(valueClass)) isEqual:[IOSClass classWithClass:[JavaMathBigDecimal class]]]) {
      value = [[JavaMathBigDecimal alloc] initWithNSString:textStr];
    }
  }
  @catch (JavaLangNumberFormatException *e) {
  }
  return value;
}

- (OrgOssPdfreporterEngineExportDataTextValue *)getBooleanCellValueWithOrgOssPdfreporterEngineJRPrintText:(id<OrgOssPdfreporterEngineJRPrintText>)text
                                                                                             withNSString:(NSString *)textStr {
  JavaLangBoolean *value = nil;
  if (textStr != nil && [((NSString *) nil_chk(textStr)) length] > 0) {
    value = [JavaLangBoolean valueOfWithNSString:textStr];
  }
  return [[OrgOssPdfreporterEngineExportDataBooleanTextValue alloc] initWithNSString:textStr withJavaLangBoolean:value];
}

- (id<OrgOssPdfreporterTextFormatIDateFormat>)getDateFormatWithNSString:(NSString *)formatFactoryClass
                                                           withNSString:(NSString *)pattern
                                                     withJavaUtilLocale:(JavaUtilLocale *)lc
                                                   withJavaUtilTimeZone:(JavaUtilTimeZone *)tz {
  NSString *key = [NSString stringWithFormat:@"%@|%@|%@|%@", formatFactoryClass, pattern, (lc == nil ? @"" : [OrgOssPdfreporterEngineUtilJRDataUtils getLocaleCodeWithJavaUtilLocale:lc]), (tz == nil ? @"" : [OrgOssPdfreporterEngineUtilJRDataUtils getTimeZoneIdWithJavaUtilTimeZone:tz])];
  id<OrgOssPdfreporterTextFormatIDateFormat> dateFormat = [((id<JavaUtilMap>) nil_chk(dateFormatCache_)) getWithId:key];
  if (dateFormat == nil) {
    id<OrgOssPdfreporterTextFormatFactoryIFormatFactory> formatFactory = [OrgOssPdfreporterRegistryApiRegistry getIFormatFactoryWithOrgOssPdfreporterTextFormatFactoryIFormatFactory_FormatTypeEnum:[OrgOssPdfreporterTextFormatFactoryIFormatFactory_FormatTypeEnum DEFAULT]];
    dateFormat = [((id<OrgOssPdfreporterTextFormatFactoryIFormatFactory>) nil_chk(formatFactory)) newDateFormatWithNSString:pattern withJavaUtilLocale:lc withJavaUtilTimeZone:tz];
    (void) [((id<JavaUtilMap>) nil_chk(dateFormatCache_)) putWithId:key withId:dateFormat];
  }
  return dateFormat;
}

- (id<OrgOssPdfreporterTextFormatINumberFormat>)getNumberFormatWithNSString:(NSString *)formatFactoryClass
                                                               withNSString:(NSString *)pattern
                                                         withJavaUtilLocale:(JavaUtilLocale *)lc {
  NSString *key = [NSString stringWithFormat:@"%@|%@|%@", formatFactoryClass, pattern, (lc == nil ? @"" : [OrgOssPdfreporterEngineUtilJRDataUtils getLocaleCodeWithJavaUtilLocale:lc])];
  id<OrgOssPdfreporterTextFormatINumberFormat> numberFormat = [((id<JavaUtilMap>) nil_chk(numberFormatCache_)) getWithId:key];
  if (numberFormat == nil) {
    id<OrgOssPdfreporterTextFormatFactoryIFormatFactory> formatFactory = [OrgOssPdfreporterRegistryApiRegistry getIFormatFactoryWithOrgOssPdfreporterTextFormatFactoryIFormatFactory_FormatTypeEnum:[OrgOssPdfreporterTextFormatFactoryIFormatFactory_FormatTypeEnum DEFAULT]];
    numberFormat = [((id<OrgOssPdfreporterTextFormatFactoryIFormatFactory>) nil_chk(formatFactory)) newNumberFormatWithNSString:pattern withJavaUtilLocale:lc];
    (void) [((id<JavaUtilMap>) nil_chk(numberFormatCache_)) putWithId:key withId:numberFormat];
  }
  return numberFormat;
}

- (id<OrgOssPdfreporterEngineExportExporterFilter>)createFilterWithNSString:(NSString *)exportPropertyPrefix {
  NSString *exportDefaultFactoryProperty = [NSString stringWithFormat:@"%@default.filter.factory", exportPropertyPrefix];
  NSString *defaultFilterClassName = nil;
  if ([((OrgOssPdfreporterEngineJasperPrint *) nil_chk(jasperPrint_)) hasProperties]) {
    defaultFilterClassName = [((OrgOssPdfreporterEngineJRPropertiesMap *) nil_chk([((OrgOssPdfreporterEngineJasperPrint *) nil_chk(jasperPrint_)) getPropertiesMap])) getPropertyWithNSString:exportDefaultFactoryProperty];
    if (defaultFilterClassName == nil) {
      defaultFilterClassName = [((OrgOssPdfreporterEngineJRPropertiesMap *) nil_chk([((OrgOssPdfreporterEngineJasperPrint *) nil_chk(jasperPrint_)) getPropertiesMap])) getPropertyWithNSString:OrgOssPdfreporterEngineJRAbstractExporter_PROPERTY_DEFAULT_FILTER_FACTORY_];
    }
  }
  if (defaultFilterClassName == nil) {
    defaultFilterClassName = [((OrgOssPdfreporterEngineJRPropertiesUtil *) nil_chk([self getPropertiesUtil])) getPropertyWithNSString:exportDefaultFactoryProperty];
  }
  if (defaultFilterClassName == nil) {
    defaultFilterClassName = [((OrgOssPdfreporterEngineJRPropertiesUtil *) nil_chk([self getPropertiesUtil])) getPropertyWithNSString:OrgOssPdfreporterEngineJRAbstractExporter_PROPERTY_DEFAULT_FILTER_FACTORY_];
  }
  id<OrgOssPdfreporterEngineExportExporterFilterFactory> defaultFactory = [OrgOssPdfreporterEngineExportExporterFilterFactoryUtil getFilterFactoryWithNSString:defaultFilterClassName];
  id<OrgOssPdfreporterEngineExportJRExporterContext> context = [[OrgOssPdfreporterEngineJRAbstractExporter_$1 alloc] initWithOrgOssPdfreporterEngineJRAbstractExporter:self withNSString:exportPropertyPrefix];
  return [((id<OrgOssPdfreporterEngineExportExporterFilterFactory>) nil_chk(defaultFactory)) getFilterWithOrgOssPdfreporterEngineExportJRExporterContext:context];
}

- (void)setFontMap {
  fontMap_ = (id<JavaUtilMap>) [((id<JavaUtilMap>) nil_chk(parameters_)) getWithId:[OrgOssPdfreporterEngineJRExporterParameter FONT_MAP]];
}

- (void)setHyperlinkProducerFactory {
  hyperlinkProducerFactory_ = (OrgOssPdfreporterEngineExportJRHyperlinkProducerFactory *) [((id<JavaUtilMap>) nil_chk(parameters_)) getWithId:[OrgOssPdfreporterEngineJRExporterParameter HYPERLINK_PRODUCER_FACTORY]];
  if (hyperlinkProducerFactory_ == nil) {
    hyperlinkProducerFactory_ = [[OrgOssPdfreporterEngineExportDefaultHyperlinkProducerFactory alloc] initWithOrgOssPdfreporterEngineJasperReportsContext:jasperReportsContext_];
  }
}

- (id<OrgOssPdfreporterEngineExportJRHyperlinkProducer>)getHyperlinkProducerWithOrgOssPdfreporterEngineJRPrintHyperlink:(id<OrgOssPdfreporterEngineJRPrintHyperlink>)link {
  return hyperlinkProducerFactory_ == nil ? nil : [((OrgOssPdfreporterEngineExportJRHyperlinkProducerFactory *) nil_chk(hyperlinkProducerFactory_)) getHandlerWithNSString:[((id<OrgOssPdfreporterEngineJRPrintHyperlink>) nil_chk(link)) getLinkType]];
}

- (id<OrgOssPdfreporterEngineExportJRHyperlinkProducer>)getCustomHandlerWithOrgOssPdfreporterEngineJRPrintHyperlink:(id<OrgOssPdfreporterEngineJRPrintHyperlink>)link {
  return [self getHyperlinkProducerWithOrgOssPdfreporterEngineJRPrintHyperlink:link];
}

- (NSString *)getExporterKey {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}

- (void)copyAllPropertiesTo:(id)copy {
  [super copyAllPropertiesTo:copy];
  OrgOssPdfreporterEngineJRAbstractExporter *typedCopy = (OrgOssPdfreporterEngineJRAbstractExporter *) copy;
  typedCopy.jasperReportsContext = jasperReportsContext_;
  typedCopy.propertiesUtil = propertiesUtil_;
  typedCopy.allSelector = allSelector_;
  typedCopy.noBackcolorSelector = noBackcolorSelector_;
  typedCopy.noneSelector = noneSelector_;
  typedCopy.styledTextUtil = styledTextUtil_;
  typedCopy.parameterResolver = parameterResolver_;
  typedCopy.parameters = parameters_;
  typedCopy.jasperPrintList = jasperPrintList_;
  typedCopy.jasperPrint = jasperPrint_;
  typedCopy.isModeBatch = isModeBatch_;
  typedCopy.startPageIndex = startPageIndex_;
  typedCopy.endPageIndex = endPageIndex_;
  typedCopy.globalOffsetX = globalOffsetX_;
  typedCopy.globalOffsetY = globalOffsetY_;
  typedCopy.filter = filter_;
  typedCopy.fontMap = fontMap_;
  typedCopy.elementOffsetStack = elementOffsetStack_;
  typedCopy.elementOffsetX = elementOffsetX_;
  typedCopy.elementOffsetY = elementOffsetY_;
  typedCopy.dateFormatCache = dateFormatCache_;
  typedCopy.numberFormatCache = numberFormatCache_;
  typedCopy.hyperlinkProducerFactory = hyperlinkProducerFactory_;
  typedCopy.reportContext = reportContext_;
}

@end
@implementation OrgOssPdfreporterEngineJRAbstractExporter_ParameterOverrideResolver

@synthesize this$0 = this$0_;

- (NSString *)getStringParameterWithOrgOssPdfreporterEngineJRExporterParameter:(OrgOssPdfreporterEngineJRExporterParameter *)parameter
                                                                  withNSString:(NSString *)property {
  if ([((id<JavaUtilMap>) nil_chk(this$0_.parameters)) containsKeyWithId:parameter]) {
    return (NSString *) [((id<JavaUtilMap>) nil_chk(this$0_.parameters)) getWithId:parameter];
  }
  else {
    return [((OrgOssPdfreporterEngineJRPropertiesUtil *) nil_chk([this$0_ getPropertiesUtil])) getPropertyWithOrgOssPdfreporterEngineJRPropertiesMap:[((OrgOssPdfreporterEngineJasperPrint *) nil_chk(this$0_.jasperPrint)) getPropertiesMap] withNSString:property];
  }
}

- (IOSObjectArray *)getStringArrayParameterWithOrgOssPdfreporterEngineJRExporterParameter:(OrgOssPdfreporterEngineJRExporterParameter *)parameter
                                                                             withNSString:(NSString *)propertyPrefix {
  IOSObjectArray *values = nil;
  if ([((id<JavaUtilMap>) nil_chk(this$0_.parameters)) containsKeyWithId:parameter]) {
    values = (IOSObjectArray *) [((id<JavaUtilMap>) nil_chk(this$0_.parameters)) getWithId:parameter];
  }
  else {
    id<JavaUtilList> properties = [OrgOssPdfreporterEngineJRPropertiesUtil getPropertiesWithOrgOssPdfreporterEngineJRPropertiesMap:[((OrgOssPdfreporterEngineJasperPrint *) nil_chk(this$0_.jasperPrint)) getPropertiesMap] withNSString:propertyPrefix];
    if (properties != nil) {
      values = [IOSObjectArray arrayWithLength:[properties size] type:[IOSClass classWithClass:[NSString class]]];
      for (int i = 0; i < (int) [((IOSObjectArray *) nil_chk(values)) count]; i++) {
        (void) [((IOSObjectArray *) nil_chk(values)) replaceObjectAtIndex:i withObject:[((OrgOssPdfreporterEngineJRPropertiesUtil_PropertySuffix *) nil_chk([properties getWithInt:i])) getValue]];
      }
    }
  }
  return values;
}

- (NSString *)getStringParameterOrDefaultWithOrgOssPdfreporterEngineJRExporterParameter:(OrgOssPdfreporterEngineJRExporterParameter *)parameter
                                                                           withNSString:(NSString *)property {
  if ([((id<JavaUtilMap>) nil_chk(this$0_.parameters)) containsKeyWithId:parameter]) {
    NSString *value = (NSString *) [((id<JavaUtilMap>) nil_chk(this$0_.parameters)) getWithId:parameter];
    if (value == nil) {
      return [((OrgOssPdfreporterEngineJRPropertiesUtil *) nil_chk([this$0_ getPropertiesUtil])) getPropertyWithNSString:property];
    }
    else {
      return value;
    }
  }
  else {
    return [((OrgOssPdfreporterEngineJRPropertiesUtil *) nil_chk([this$0_ getPropertiesUtil])) getPropertyWithOrgOssPdfreporterEngineJRPropertiesMap:[((OrgOssPdfreporterEngineJasperPrint *) nil_chk(this$0_.jasperPrint)) getPropertiesMap] withNSString:property];
  }
}

- (BOOL)getBooleanParameterWithOrgOssPdfreporterEngineJRExporterParameter:(OrgOssPdfreporterEngineJRExporterParameter *)parameter
                                                             withNSString:(NSString *)property
                                                                 withBOOL:(BOOL)defaultValue {
  if ([((id<JavaUtilMap>) nil_chk(this$0_.parameters)) containsKeyWithId:parameter]) {
    JavaLangBoolean *booleanValue = (JavaLangBoolean *) [((id<JavaUtilMap>) nil_chk(this$0_.parameters)) getWithId:parameter];
    if (booleanValue == nil) {
      return [((OrgOssPdfreporterEngineJRPropertiesUtil *) nil_chk([this$0_ getPropertiesUtil])) getBooleanPropertyWithNSString:property];
    }
    else {
      return [booleanValue booleanValue];
    }
  }
  else {
    return [((OrgOssPdfreporterEngineJRPropertiesUtil *) nil_chk([this$0_ getPropertiesUtil])) getBooleanPropertyWithOrgOssPdfreporterEngineJRPropertiesMap:[((OrgOssPdfreporterEngineJasperPrint *) nil_chk(this$0_.jasperPrint)) getPropertiesMap] withNSString:property withBOOL:defaultValue];
  }
}

- (int)getIntegerParameterWithOrgOssPdfreporterEngineJRExporterParameter:(OrgOssPdfreporterEngineJRExporterParameter *)parameter
                                                            withNSString:(NSString *)property
                                                                 withInt:(int)defaultValue {
  if ([((id<JavaUtilMap>) nil_chk(this$0_.parameters)) containsKeyWithId:parameter]) {
    JavaLangInteger *integerValue = (JavaLangInteger *) [((id<JavaUtilMap>) nil_chk(this$0_.parameters)) getWithId:parameter];
    if (integerValue == nil) {
      return [((OrgOssPdfreporterEngineJRPropertiesUtil *) nil_chk([this$0_ getPropertiesUtil])) getIntegerPropertyWithNSString:property];
    }
    else {
      return [integerValue intValue];
    }
  }
  else {
    return [((OrgOssPdfreporterEngineJRPropertiesUtil *) nil_chk([this$0_ getPropertiesUtil])) getIntegerPropertyWithOrgOssPdfreporterEngineJRPropertiesMap:[((OrgOssPdfreporterEngineJasperPrint *) nil_chk(this$0_.jasperPrint)) getPropertiesMap] withNSString:property withInt:defaultValue];
  }
}

- (float)getFloatParameterWithOrgOssPdfreporterEngineJRExporterParameter:(OrgOssPdfreporterEngineJRExporterParameter *)parameter
                                                            withNSString:(NSString *)property
                                                               withFloat:(float)defaultValue {
  if ([((id<JavaUtilMap>) nil_chk(this$0_.parameters)) containsKeyWithId:parameter]) {
    JavaLangFloat *floatValue = (JavaLangFloat *) [((id<JavaUtilMap>) nil_chk(this$0_.parameters)) getWithId:parameter];
    if (floatValue == nil) {
      return [((OrgOssPdfreporterEngineJRPropertiesUtil *) nil_chk([this$0_ getPropertiesUtil])) getFloatPropertyWithNSString:property];
    }
    else {
      return [floatValue floatValue];
    }
  }
  else {
    return [((OrgOssPdfreporterEngineJRPropertiesUtil *) nil_chk([this$0_ getPropertiesUtil])) getFloatPropertyWithOrgOssPdfreporterEngineJRPropertiesMap:[((OrgOssPdfreporterEngineJasperPrint *) nil_chk(this$0_.jasperPrint)) getPropertiesMap] withNSString:property withFloat:defaultValue];
  }
}

- (JavaLangCharacter *)getCharacterParameterWithOrgOssPdfreporterEngineJRExporterParameter:(OrgOssPdfreporterEngineJRExporterParameter *)parameter
                                                                              withNSString:(NSString *)property {
  if ([((id<JavaUtilMap>) nil_chk(this$0_.parameters)) containsKeyWithId:parameter]) {
    return (JavaLangCharacter *) [((id<JavaUtilMap>) nil_chk(this$0_.parameters)) getWithId:parameter];
  }
  else {
    return [((OrgOssPdfreporterEngineJRPropertiesUtil *) nil_chk([this$0_ getPropertiesUtil])) getCharacterPropertyWithOrgOssPdfreporterEngineJRPropertiesMap:[((OrgOssPdfreporterEngineJasperPrint *) nil_chk(this$0_.jasperPrint)) getPropertiesMap] withNSString:property];
  }
}

- (id)initWithOrgOssPdfreporterEngineJRAbstractExporter:(OrgOssPdfreporterEngineJRAbstractExporter *)outer$ {
  if ((self = [super init])) {
    this$0_ = outer$;
  }
  return self;
}

- (void)copyAllPropertiesTo:(id)copy {
  [super copyAllPropertiesTo:copy];
  OrgOssPdfreporterEngineJRAbstractExporter_ParameterOverrideResolver *typedCopy = (OrgOssPdfreporterEngineJRAbstractExporter_ParameterOverrideResolver *) copy;
  typedCopy.this$0 = this$0_;
}

@end
@implementation OrgOssPdfreporterEngineJRAbstractExporter_ParameterOverriddenResolver

@synthesize this$0 = this$0_;

- (NSString *)getStringParameterWithOrgOssPdfreporterEngineJRExporterParameter:(OrgOssPdfreporterEngineJRExporterParameter *)parameter
                                                                  withNSString:(NSString *)property {
  NSString *value;
  OrgOssPdfreporterEngineJRPropertiesMap *hintsMap = [((OrgOssPdfreporterEngineJasperPrint *) nil_chk(this$0_.jasperPrint)) getPropertiesMap];
  if (hintsMap != nil && [((OrgOssPdfreporterEngineJRPropertiesMap *) nil_chk(hintsMap)) containsPropertyWithNSString:property]) {
    value = [((OrgOssPdfreporterEngineJRPropertiesMap *) nil_chk(hintsMap)) getPropertyWithNSString:property];
  }
  else {
    value = (NSString *) [((id<JavaUtilMap>) nil_chk(this$0_.parameters)) getWithId:parameter];
    if (value == nil) {
      value = [((OrgOssPdfreporterEngineJRPropertiesUtil *) nil_chk([this$0_ getPropertiesUtil])) getPropertyWithNSString:property];
    }
  }
  return value;
}

- (IOSObjectArray *)getStringArrayParameterWithOrgOssPdfreporterEngineJRExporterParameter:(OrgOssPdfreporterEngineJRExporterParameter *)parameter
                                                                             withNSString:(NSString *)propertyPrefix {
  IOSObjectArray *values = nil;
  OrgOssPdfreporterEngineJRPropertiesMap *hintsMap = [((OrgOssPdfreporterEngineJasperPrint *) nil_chk(this$0_.jasperPrint)) getPropertiesMap];
  if (hintsMap != nil) {
    id<JavaUtilList> properties = [OrgOssPdfreporterEngineJRPropertiesUtil getPropertiesWithOrgOssPdfreporterEngineJRPropertiesMap:hintsMap withNSString:propertyPrefix];
    if (properties != nil) {
      values = [IOSObjectArray arrayWithLength:[properties size] type:[IOSClass classWithClass:[NSString class]]];
      for (int i = 0; i < (int) [((IOSObjectArray *) nil_chk(values)) count]; i++) {
        (void) [((IOSObjectArray *) nil_chk(values)) replaceObjectAtIndex:i withObject:[((OrgOssPdfreporterEngineJRPropertiesUtil_PropertySuffix *) nil_chk([properties getWithInt:i])) getValue]];
      }
    }
  }
  else {
    values = (IOSObjectArray *) [((id<JavaUtilMap>) nil_chk(this$0_.parameters)) getWithId:parameter];
  }
  return values;
}

- (NSString *)getStringParameterOrDefaultWithOrgOssPdfreporterEngineJRExporterParameter:(OrgOssPdfreporterEngineJRExporterParameter *)parameter
                                                                           withNSString:(NSString *)property {
  NSString *value;
  OrgOssPdfreporterEngineJRPropertiesMap *hintsMap = [((OrgOssPdfreporterEngineJasperPrint *) nil_chk(this$0_.jasperPrint)) getPropertiesMap];
  if (hintsMap != nil && [((OrgOssPdfreporterEngineJRPropertiesMap *) nil_chk(hintsMap)) containsPropertyWithNSString:property]) {
    value = [((OrgOssPdfreporterEngineJRPropertiesMap *) nil_chk(hintsMap)) getPropertyWithNSString:property];
  }
  else {
    value = (NSString *) [((id<JavaUtilMap>) nil_chk(this$0_.parameters)) getWithId:parameter];
  }
  if (value == nil) {
    value = [((OrgOssPdfreporterEngineJRPropertiesUtil *) nil_chk([this$0_ getPropertiesUtil])) getPropertyWithNSString:property];
  }
  return value;
}

- (BOOL)getBooleanParameterWithOrgOssPdfreporterEngineJRExporterParameter:(OrgOssPdfreporterEngineJRExporterParameter *)parameter
                                                             withNSString:(NSString *)property
                                                                 withBOOL:(BOOL)defaultValue {
  BOOL value;
  OrgOssPdfreporterEngineJRPropertiesMap *hintsMap = [((OrgOssPdfreporterEngineJasperPrint *) nil_chk(this$0_.jasperPrint)) getPropertiesMap];
  if (hintsMap != nil && [((OrgOssPdfreporterEngineJRPropertiesMap *) nil_chk(hintsMap)) containsPropertyWithNSString:property]) {
    NSString *prop = [((OrgOssPdfreporterEngineJRPropertiesMap *) nil_chk(hintsMap)) getPropertyWithNSString:property];
    if (prop == nil) {
      value = [((OrgOssPdfreporterEngineJRPropertiesUtil *) nil_chk([this$0_ getPropertiesUtil])) getBooleanPropertyWithNSString:property];
    }
    else {
      value = [OrgOssPdfreporterEngineJRPropertiesUtil asBooleanWithNSString:prop];
    }
  }
  else {
    JavaLangBoolean *param = (JavaLangBoolean *) [((id<JavaUtilMap>) nil_chk(this$0_.parameters)) getWithId:parameter];
    if (param == nil) {
      value = [((OrgOssPdfreporterEngineJRPropertiesUtil *) nil_chk([this$0_ getPropertiesUtil])) getBooleanPropertyWithNSString:property];
    }
    else {
      value = [param booleanValue];
    }
  }
  return value;
}

- (int)getIntegerParameterWithOrgOssPdfreporterEngineJRExporterParameter:(OrgOssPdfreporterEngineJRExporterParameter *)parameter
                                                            withNSString:(NSString *)property
                                                                 withInt:(int)defaultValue {
  int value;
  OrgOssPdfreporterEngineJRPropertiesMap *hintsMap = [((OrgOssPdfreporterEngineJasperPrint *) nil_chk(this$0_.jasperPrint)) getPropertiesMap];
  if (hintsMap != nil && [((OrgOssPdfreporterEngineJRPropertiesMap *) nil_chk(hintsMap)) containsPropertyWithNSString:property]) {
    NSString *prop = [((OrgOssPdfreporterEngineJRPropertiesMap *) nil_chk(hintsMap)) getPropertyWithNSString:property];
    if (prop == nil) {
      value = [((OrgOssPdfreporterEngineJRPropertiesUtil *) nil_chk([this$0_ getPropertiesUtil])) getIntegerPropertyWithNSString:property];
    }
    else {
      value = [OrgOssPdfreporterEngineJRPropertiesUtil asIntegerWithNSString:prop];
    }
  }
  else {
    JavaLangInteger *param = (JavaLangInteger *) [((id<JavaUtilMap>) nil_chk(this$0_.parameters)) getWithId:parameter];
    if (param == nil) {
      value = [((OrgOssPdfreporterEngineJRPropertiesUtil *) nil_chk([this$0_ getPropertiesUtil])) getIntegerPropertyWithNSString:property];
    }
    else {
      value = [param intValue];
    }
  }
  return value;
}

- (float)getFloatParameterWithOrgOssPdfreporterEngineJRExporterParameter:(OrgOssPdfreporterEngineJRExporterParameter *)parameter
                                                            withNSString:(NSString *)property
                                                               withFloat:(float)defaultValue {
  float value;
  OrgOssPdfreporterEngineJRPropertiesMap *hintsMap = [((OrgOssPdfreporterEngineJasperPrint *) nil_chk(this$0_.jasperPrint)) getPropertiesMap];
  if (hintsMap != nil && [((OrgOssPdfreporterEngineJRPropertiesMap *) nil_chk(hintsMap)) containsPropertyWithNSString:property]) {
    NSString *prop = [((OrgOssPdfreporterEngineJRPropertiesMap *) nil_chk(hintsMap)) getPropertyWithNSString:property];
    if (prop == nil) {
      value = [((OrgOssPdfreporterEngineJRPropertiesUtil *) nil_chk([this$0_ getPropertiesUtil])) getFloatPropertyWithNSString:property];
    }
    else {
      value = [OrgOssPdfreporterEngineJRPropertiesUtil asFloatWithNSString:prop];
    }
  }
  else {
    JavaLangFloat *param = (JavaLangFloat *) [((id<JavaUtilMap>) nil_chk(this$0_.parameters)) getWithId:parameter];
    if (param == nil) {
      value = [((OrgOssPdfreporterEngineJRPropertiesUtil *) nil_chk([this$0_ getPropertiesUtil])) getFloatPropertyWithNSString:property];
    }
    else {
      value = [param floatValue];
    }
  }
  return value;
}

- (JavaLangCharacter *)getCharacterParameterWithOrgOssPdfreporterEngineJRExporterParameter:(OrgOssPdfreporterEngineJRExporterParameter *)parameter
                                                                              withNSString:(NSString *)property {
  JavaLangCharacter *value;
  OrgOssPdfreporterEngineJRPropertiesMap *hintsMap = [((OrgOssPdfreporterEngineJasperPrint *) nil_chk(this$0_.jasperPrint)) getPropertiesMap];
  if (hintsMap != nil && [((OrgOssPdfreporterEngineJRPropertiesMap *) nil_chk(hintsMap)) containsPropertyWithNSString:property]) {
    NSString *prop = [((OrgOssPdfreporterEngineJRPropertiesMap *) nil_chk(hintsMap)) getPropertyWithNSString:property];
    value = [OrgOssPdfreporterEngineJRPropertiesUtil asCharacterWithNSString:prop];
  }
  else {
    value = (JavaLangCharacter *) [((id<JavaUtilMap>) nil_chk(this$0_.parameters)) getWithId:parameter];
    if (value == nil) {
      value = [((OrgOssPdfreporterEngineJRPropertiesUtil *) nil_chk([this$0_ getPropertiesUtil])) getCharacterPropertyWithNSString:property];
    }
  }
  return value;
}

- (id)initWithOrgOssPdfreporterEngineJRAbstractExporter:(OrgOssPdfreporterEngineJRAbstractExporter *)outer$ {
  if ((self = [super init])) {
    this$0_ = outer$;
  }
  return self;
}

- (void)copyAllPropertiesTo:(id)copy {
  [super copyAllPropertiesTo:copy];
  OrgOssPdfreporterEngineJRAbstractExporter_ParameterOverriddenResolver *typedCopy = (OrgOssPdfreporterEngineJRAbstractExporter_ParameterOverriddenResolver *) copy;
  typedCopy.this$0 = this$0_;
}

@end
@implementation OrgOssPdfreporterEngineJRAbstractExporter_BaseExporterContext

@synthesize this$0 = this$0_;

- (id<OrgOssPdfreporterEngineJRExporter>)getExporter {
  return this$0_;
}

- (id<OrgOssPdfreporterEngineJasperReportsContext>)getJasperReportsContext {
  return this$0_.jasperReportsContext;
}

- (OrgOssPdfreporterEngineJasperPrint *)getExportedReport {
  return this$0_.jasperPrint;
}

- (id<JavaUtilMap>)getExportParameters {
  return this$0_.parameters;
}

- (int)getOffsetX {
  return [this$0_ getOffsetX];
}

- (int)getOffsetY {
  return [this$0_ getOffsetY];
}

- (NSString *)getExportPropertiesPrefix {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}

- (id)initWithOrgOssPdfreporterEngineJRAbstractExporter:(OrgOssPdfreporterEngineJRAbstractExporter *)outer$ {
  if ((self = [super init])) {
    this$0_ = outer$;
  }
  return self;
}

- (void)copyAllPropertiesTo:(id)copy {
  [super copyAllPropertiesTo:copy];
  OrgOssPdfreporterEngineJRAbstractExporter_BaseExporterContext *typedCopy = (OrgOssPdfreporterEngineJRAbstractExporter_BaseExporterContext *) copy;
  typedCopy.this$0 = this$0_;
}

@end
@implementation OrgOssPdfreporterEngineJRAbstractExporter_$1

@synthesize val$exportPropertyPrefix = val$exportPropertyPrefix_;

- (NSString *)getExportPropertiesPrefix {
  return val$exportPropertyPrefix_;
}

- (id)initWithOrgOssPdfreporterEngineJRAbstractExporter:(OrgOssPdfreporterEngineJRAbstractExporter *)outer$
                                           withNSString:(NSString *)capture$0 {
  if ((self = [super initWithOrgOssPdfreporterEngineJRAbstractExporter:outer$])) {
    val$exportPropertyPrefix_ = capture$0;
  }
  return self;
}

- (void)copyAllPropertiesTo:(id)copy {
  [super copyAllPropertiesTo:copy];
  OrgOssPdfreporterEngineJRAbstractExporter_$1 *typedCopy = (OrgOssPdfreporterEngineJRAbstractExporter_$1 *) copy;
  typedCopy.val$exportPropertyPrefix = val$exportPropertyPrefix_;
}

@end
