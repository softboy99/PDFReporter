//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: pdfreporter-core/src/org/oss/pdfreporter/engine/DefaultJasperReportsContext.java
//
//  Created by kendra on 9/27/13.
//

#include "IOSClass.h"
#include "java/io/IOException.h"
#include "java/io/InputStream.h"
#include "java/lang/SecurityException.h"
#include "java/lang/System.h"
#include "java/util/Enumeration.h"
#include "java/util/HashMap.h"
#include "java/util/List.h"
#include "java/util/Map.h"
#include "java/util/logging/Logger.h"
#include "org/oss/pdfreporter/engine/DefaultJasperReportsContext.h"
#include "org/oss/pdfreporter/engine/JRException.h"
#include "org/oss/pdfreporter/engine/JRPropertiesUtil.h"
#include "org/oss/pdfreporter/engine/JRRuntimeException.h"
#include "org/oss/pdfreporter/engine/JasperReportsContext.h"
#include "org/oss/pdfreporter/engine/design/JRCompiler.h"
#include "org/oss/pdfreporter/engine/util/JRLoader.h"
#include "org/oss/pdfreporter/extensions/ExtensionsEnvironment.h"
#include "org/oss/pdfreporter/extensions/ExtensionsRegistry.h"
#include "org/oss/pdfreporter/uses/java/util/Properties.h"

@implementation OrgOssPdfreporterEngineDefaultJasperReportsContext

static JavaUtilLoggingLogger * OrgOssPdfreporterEngineDefaultJasperReportsContext_logger_;
static NSString * OrgOssPdfreporterEngineDefaultJasperReportsContext_DEFAULT_PROPERTIES_FILE_ = @"jasperreports.properties";
static NSString * OrgOssPdfreporterEngineDefaultJasperReportsContext_PROPERTIES_FILE_ = @"net.sf.jasperreports.properties";
static OrgOssPdfreporterEngineDefaultJasperReportsContext * OrgOssPdfreporterEngineDefaultJasperReportsContext_INSTANCE_;

@synthesize values = values_;
@synthesize properties = properties_;

+ (JavaUtilLoggingLogger *)logger {
  return OrgOssPdfreporterEngineDefaultJasperReportsContext_logger_;
}

+ (NSString *)DEFAULT_PROPERTIES_FILE {
  return OrgOssPdfreporterEngineDefaultJasperReportsContext_DEFAULT_PROPERTIES_FILE_;
}

+ (NSString *)PROPERTIES_FILE {
  return OrgOssPdfreporterEngineDefaultJasperReportsContext_PROPERTIES_FILE_;
}

+ (OrgOssPdfreporterEngineDefaultJasperReportsContext *)INSTANCE {
  return OrgOssPdfreporterEngineDefaultJasperReportsContext_INSTANCE_;
}

- (id)init {
  if ((self = [super init])) {
    values_ = [[JavaUtilHashMap alloc] init];
    [self initProperties];
  }
  return self;
}

+ (OrgOssPdfreporterEngineDefaultJasperReportsContext *)getInstance {
  return OrgOssPdfreporterEngineDefaultJasperReportsContext_INSTANCE_;
}

- (void)initProperties OBJC_METHOD_FAMILY_NONE {
  @try {
    OrgOssPdfreporterUsesJavaUtilProperties *defaults = [OrgOssPdfreporterEngineDefaultJasperReportsContext getDefaultProperties];
    NSString *propFile = [OrgOssPdfreporterEngineDefaultJasperReportsContext getSystemPropertyWithNSString:OrgOssPdfreporterEngineDefaultJasperReportsContext_PROPERTIES_FILE_];
    OrgOssPdfreporterUsesJavaUtilProperties *loadedProps;
    if (propFile == nil) {
      loadedProps = [OrgOssPdfreporterEngineJRPropertiesUtil loadPropertiesWithNSString:OrgOssPdfreporterEngineDefaultJasperReportsContext_DEFAULT_PROPERTIES_FILE_ withOrgOssPdfreporterUsesJavaUtilProperties:defaults];
      if (loadedProps == nil) {
        loadedProps = [[OrgOssPdfreporterUsesJavaUtilProperties alloc] initWithOrgOssPdfreporterUsesJavaUtilProperties:defaults];
      }
    }
    else {
      loadedProps = [OrgOssPdfreporterEngineJRPropertiesUtil loadPropertiesWithNSString:propFile withOrgOssPdfreporterUsesJavaUtilProperties:defaults];
      if (loadedProps == nil) {
        @throw [[OrgOssPdfreporterEngineJRRuntimeException alloc] initWithNSString:[NSString stringWithFormat:@"Could not load properties file \"%@\"", propFile]];
      }
    }
    properties_ = [[JavaUtilHashMap alloc] init];
    for (id<JavaUtilEnumeration> names = [((OrgOssPdfreporterUsesJavaUtilProperties *) nil_chk(loadedProps)) propertyNames]; [((id<JavaUtilEnumeration>) nil_chk(names)) hasMoreElements]; ) {
      NSString *name = (NSString *) [((id<JavaUtilEnumeration>) nil_chk(names)) nextElement];
      NSString *value = [((OrgOssPdfreporterUsesJavaUtilProperties *) nil_chk(loadedProps)) getPropertyWithNSString:name];
      (void) [((id<JavaUtilMap>) nil_chk(properties_)) putWithId:name withId:value];
    }
    [self loadSystemProperties];
  }
  @catch (OrgOssPdfreporterEngineJRException *e) {
    @throw [[OrgOssPdfreporterEngineJRRuntimeException alloc] initWithNSString:@"Error loading the properties" withJavaLangThrowable:e];
  }
  [((JavaUtilLoggingLogger *) nil_chk(OrgOssPdfreporterEngineDefaultJasperReportsContext_logger_)) finestWithNSString:[((id<JavaUtilMap>) nil_chk(properties_)) description]];
}

- (void)loadSystemProperties {
  [self loadSystemPropertyWithNSString:@"jasper.reports.compiler.class" withNSString:[OrgOssPdfreporterEngineDesignJRCompiler COMPILER_CLASS]];
  [self loadSystemPropertyWithNSString:@"jasper.reports.compile.xml.validation" withNSString:[OrgOssPdfreporterEngineJasperReportsContext COMPILER_XML_VALIDATION]];
  [self loadSystemPropertyWithNSString:@"jasper.reports.export.xml.validation" withNSString:[OrgOssPdfreporterEngineJasperReportsContext EXPORT_XML_VALIDATION]];
  [self loadSystemPropertyWithNSString:@"jasper.reports.compile.keep.java.file" withNSString:[OrgOssPdfreporterEngineDesignJRCompiler COMPILER_KEEP_JAVA_FILE]];
  [self loadSystemPropertyWithNSString:@"jasper.reports.compile.temp" withNSString:[OrgOssPdfreporterEngineDesignJRCompiler COMPILER_TEMP_DIR]];
  [self loadSystemPropertyWithNSString:@"jasper.reports.compile.class.path" withNSString:[OrgOssPdfreporterEngineDesignJRCompiler COMPILER_CLASSPATH]];
}

+ (OrgOssPdfreporterUsesJavaUtilProperties *)getDefaultProperties {
  OrgOssPdfreporterUsesJavaUtilProperties *defaults = [[OrgOssPdfreporterUsesJavaUtilProperties alloc] init];
  JavaIoInputStream *is = [OrgOssPdfreporterEngineUtilJRLoader getResourceInputStreamWithNSString:@"default.jasperreports.properties"];
  if (is == nil) {
    @throw [[OrgOssPdfreporterEngineJRException alloc] initWithNSString:@"Default properties file not found."];
  }
  @try {
    [((OrgOssPdfreporterUsesJavaUtilProperties *) nil_chk(defaults)) load__WithJavaIoInputStream:is];
  }
  @catch (JavaIoIOException *e) {
    @throw [[OrgOssPdfreporterEngineJRException alloc] initWithNSString:@"Failed to load default properties." withJavaLangThrowable:e];
  }
  @finally {
    @try {
      [((JavaIoInputStream *) nil_chk(is)) close];
    }
    @catch (JavaIoIOException *e) {
    }
  }
  NSString *userDir = [OrgOssPdfreporterEngineDefaultJasperReportsContext getSystemPropertyWithNSString:@"user.dir"];
  if (userDir != nil) {
    (void) [((OrgOssPdfreporterUsesJavaUtilProperties *) nil_chk(defaults)) setPropertyWithNSString:[OrgOssPdfreporterEngineDesignJRCompiler COMPILER_TEMP_DIR] withNSString:userDir];
  }
  NSString *classPath = [OrgOssPdfreporterEngineDefaultJasperReportsContext getSystemPropertyWithNSString:@"java.class.path"];
  if (classPath != nil) {
    (void) [((OrgOssPdfreporterUsesJavaUtilProperties *) nil_chk(defaults)) setPropertyWithNSString:[OrgOssPdfreporterEngineDesignJRCompiler COMPILER_CLASSPATH] withNSString:classPath];
  }
  return defaults;
}

+ (NSString *)getSystemPropertyWithNSString:(NSString *)propertyName {
  @try {
    return [JavaLangSystem getPropertyWithNSString:propertyName];
  }
  @catch (JavaLangSecurityException *e) {
    return nil;
  }
}

- (void)loadSystemPropertyWithNSString:(NSString *)sysKey
                          withNSString:(NSString *)propKey {
  NSString *val = [OrgOssPdfreporterEngineDefaultJasperReportsContext getSystemPropertyWithNSString:sysKey];
  if (val != nil) {
    (void) [((id<JavaUtilMap>) nil_chk(properties_)) putWithId:propKey withId:val];
  }
}

- (id)getValueWithNSString:(NSString *)key {
  return [((id<JavaUtilMap>) nil_chk(values_)) getWithId:key];
}

- (void)setValueWithNSString:(NSString *)key
                      withId:(id)value {
  (void) [((id<JavaUtilMap>) nil_chk(values_)) putWithId:key withId:value];
}

- (id<JavaUtilList>)getExtensionsWithIOSClass:(IOSClass *)extensionType {
  return [((id<OrgOssPdfreporterExtensionsExtensionsRegistry>) nil_chk([OrgOssPdfreporterExtensionsExtensionsEnvironment getExtensionsRegistry])) getExtensionsWithIOSClass:extensionType];
}

- (NSString *)getPropertyWithNSString:(NSString *)key {
  return [((id<JavaUtilMap>) nil_chk(properties_)) getWithId:key];
}

- (void)setPropertyWithNSString:(NSString *)key
                   withNSString:(NSString *)value {
  (void) [((id<JavaUtilMap>) nil_chk(properties_)) putWithId:key withId:value];
}

- (void)removePropertyWithNSString:(NSString *)key {
  (void) [((id<JavaUtilMap>) nil_chk(properties_)) removeWithId:key];
}

- (id<JavaUtilMap>)getProperties {
  return properties_;
}

+ (void)initialize {
  if (self == [OrgOssPdfreporterEngineDefaultJasperReportsContext class]) {
    OrgOssPdfreporterEngineDefaultJasperReportsContext_logger_ = [JavaUtilLoggingLogger getLoggerWithNSString:[[IOSClass classWithClass:[OrgOssPdfreporterEngineDefaultJasperReportsContext class]] getName]];
    OrgOssPdfreporterEngineDefaultJasperReportsContext_INSTANCE_ = [[OrgOssPdfreporterEngineDefaultJasperReportsContext alloc] init];
  }
}

- (void)copyAllPropertiesTo:(id)copy {
  [super copyAllPropertiesTo:copy];
  OrgOssPdfreporterEngineDefaultJasperReportsContext *typedCopy = (OrgOssPdfreporterEngineDefaultJasperReportsContext *) copy;
  typedCopy.values = values_;
  typedCopy.properties = properties_;
}

@end
