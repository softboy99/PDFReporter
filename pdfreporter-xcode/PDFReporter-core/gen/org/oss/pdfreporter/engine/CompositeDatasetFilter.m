//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: pdfreporter-core/src/org/oss/pdfreporter/engine/CompositeDatasetFilter.java
//
//  Created by kendra on 9/27/13.
//

#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "java/util/Arrays.h"
#include "java/util/Iterator.h"
#include "java/util/List.h"
#include "org/oss/pdfreporter/engine/CompositeDatasetFilter.h"
#include "org/oss/pdfreporter/engine/DatasetFilter.h"
#include "org/oss/pdfreporter/engine/EvaluationType.h"
#include "org/oss/pdfreporter/engine/fill/DatasetFillContext.h"

@implementation OrgOssPdfreporterEngineCompositeDatasetFilter

@synthesize filters = filters_;

+ (id<OrgOssPdfreporterEngineDatasetFilter>)combineWithOrgOssPdfreporterEngineDatasetFilter:(id<OrgOssPdfreporterEngineDatasetFilter>)filter
                                                   withOrgOssPdfreporterEngineDatasetFilter:(id<OrgOssPdfreporterEngineDatasetFilter>)other {
  id<OrgOssPdfreporterEngineDatasetFilter> combined;
  if (filter == nil) {
    combined = other;
  }
  else if (other == nil) {
    combined = filter;
  }
  else {
    combined = [[OrgOssPdfreporterEngineCompositeDatasetFilter alloc] initWithOrgOssPdfreporterEngineDatasetFilterArray:[IOSObjectArray arrayWithObjects:(id[]){ filter, other } count:2 type:[IOSClass classWithProtocol:@protocol(OrgOssPdfreporterEngineDatasetFilter)]]];
  }
  return combined;
}

- (id)initWithOrgOssPdfreporterEngineDatasetFilterArray:(IOSObjectArray *)filters {
  if ((self = [super init])) {
    self.filters = [JavaUtilArrays asListWithNSObjectArray:filters];
  }
  return self;
}

- (id)initWithJavaUtilList:(id<JavaUtilList>)filters {
  if ((self = [super init])) {
    self.filters = filters;
  }
  return self;
}

- (void)init__WithOrgOssPdfreporterEngineFillDatasetFillContext:(id<OrgOssPdfreporterEngineFillDatasetFillContext>)context OBJC_METHOD_FAMILY_NONE {
  {
    id<JavaUtilIterator> iter__ = [((id<JavaUtilList>) nil_chk(filters_)) iterator];
    while ([((id<JavaUtilIterator>) nil_chk(iter__)) hasNext]) {
      id<OrgOssPdfreporterEngineDatasetFilter> filter = [((id<JavaUtilIterator>) nil_chk(iter__)) next];
      [((id<OrgOssPdfreporterEngineDatasetFilter>) nil_chk(filter)) init__WithOrgOssPdfreporterEngineFillDatasetFillContext:context];
    }
  }
}

- (BOOL)matchesWithOrgOssPdfreporterEngineEvaluationTypeEnum:(OrgOssPdfreporterEngineEvaluationTypeEnum *)evaluation {
  BOOL matches = YES;
  {
    id<JavaUtilIterator> iter__ = [((id<JavaUtilList>) nil_chk(filters_)) iterator];
    while ([((id<JavaUtilIterator>) nil_chk(iter__)) hasNext]) {
      id<OrgOssPdfreporterEngineDatasetFilter> filter = [((id<JavaUtilIterator>) nil_chk(iter__)) next];
      if (![((id<OrgOssPdfreporterEngineDatasetFilter>) nil_chk(filter)) matchesWithOrgOssPdfreporterEngineEvaluationTypeEnum:evaluation]) {
        matches = NO;
        break;
      }
    }
  }
  return matches;
}

- (id<JavaUtilList>)getFilters {
  return filters_;
}

- (void)setFiltersWithJavaUtilList:(id<JavaUtilList>)filters {
  self.filters = filters;
}

- (void)copyAllPropertiesTo:(id)copy {
  [super copyAllPropertiesTo:copy];
  OrgOssPdfreporterEngineCompositeDatasetFilter *typedCopy = (OrgOssPdfreporterEngineCompositeDatasetFilter *) copy;
  typedCopy.filters = filters_;
}

@end
