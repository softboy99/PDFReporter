//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: pdfreporter-core/src/org/oss/pdfreporter/engine/JRPropertiesUtil.java
//
//  Created by kendra on 9/27/13.
//

#include "IOSObjectArray.h"
#include "java/io/IOException.h"
#include "java/io/InputStream.h"
#include "java/lang/Boolean.h"
#include "java/lang/Character.h"
#include "java/lang/Float.h"
#include "java/lang/Integer.h"
#include "java/lang/Long.h"
#include "java/lang/SecurityException.h"
#include "java/util/ArrayList.h"
#include "java/util/HashSet.h"
#include "java/util/Iterator.h"
#include "java/util/List.h"
#include "java/util/Map.h"
#include "java/util/Set.h"
#include "org/oss/pdfreporter/engine/JRException.h"
#include "org/oss/pdfreporter/engine/JRPropertiesHolder.h"
#include "org/oss/pdfreporter/engine/JRPropertiesMap.h"
#include "org/oss/pdfreporter/engine/JRPropertiesUtil.h"
#include "org/oss/pdfreporter/engine/JasperReportsContext.h"
#include "org/oss/pdfreporter/engine/util/JRLoader.h"
#include "org/oss/pdfreporter/uses/java/util/Properties.h"

@implementation OrgOssPdfreporterEngineJRPropertiesUtil

static NSString * OrgOssPdfreporterEngineJRPropertiesUtil_PROPERTY_PREFIX_ = @"net.sf.jasperreports.";

@synthesize jasperReportsContext = jasperReportsContext_;

+ (NSString *)PROPERTY_PREFIX {
  return OrgOssPdfreporterEngineJRPropertiesUtil_PROPERTY_PREFIX_;
}

- (id)initWithOrgOssPdfreporterEngineJasperReportsContext:(id<OrgOssPdfreporterEngineJasperReportsContext>)jasperReportsContext {
  if ((self = [super init])) {
    self.jasperReportsContext = jasperReportsContext;
  }
  return self;
}

+ (OrgOssPdfreporterEngineJRPropertiesUtil *)getInstanceWithOrgOssPdfreporterEngineJasperReportsContext:(id<OrgOssPdfreporterEngineJasperReportsContext>)jasperReportsContext {
  return [[OrgOssPdfreporterEngineJRPropertiesUtil alloc] initWithOrgOssPdfreporterEngineJasperReportsContext:jasperReportsContext];
}

+ (OrgOssPdfreporterUsesJavaUtilProperties *)loadPropertiesWithNSString:(NSString *)name
                            withOrgOssPdfreporterUsesJavaUtilProperties:(OrgOssPdfreporterUsesJavaUtilProperties *)defaults {
  OrgOssPdfreporterUsesJavaUtilProperties *properties = nil;
  JavaIoInputStream *is = nil;
  @try {
    is = [OrgOssPdfreporterEngineUtilJRLoader getLocationInputStreamWithNSString:name];
  }
  @catch (JavaLangSecurityException *e) {
  }
  if (is != nil) {
    properties = [[OrgOssPdfreporterUsesJavaUtilProperties alloc] initWithOrgOssPdfreporterUsesJavaUtilProperties:defaults];
    @try {
      [((OrgOssPdfreporterUsesJavaUtilProperties *) nil_chk(properties)) load__WithJavaIoInputStream:is];
    }
    @catch (JavaIoIOException *e) {
      @throw [[OrgOssPdfreporterEngineJRException alloc] initWithNSString:[NSString stringWithFormat:@"Failed to load properties file \"%@\"", name] withJavaLangThrowable:e];
    }
    @finally {
      @try {
        [is close];
      }
      @catch (JavaIoIOException *e) {
      }
    }
  }
  return properties;
}

- (NSString *)getPropertyWithNSString:(NSString *)key {
  return [((id<OrgOssPdfreporterEngineJasperReportsContext>) nil_chk(jasperReportsContext_)) getPropertyWithNSString:key];
}

- (void)setPropertyWithNSString:(NSString *)key
                   withNSString:(NSString *)value {
  [((id<OrgOssPdfreporterEngineJasperReportsContext>) nil_chk(jasperReportsContext_)) setPropertyWithNSString:key withNSString:value];
}

- (void)removePropertyWithNSString:(NSString *)key {
  [((id<OrgOssPdfreporterEngineJasperReportsContext>) nil_chk(jasperReportsContext_)) removePropertyWithNSString:key];
}

- (BOOL)getBooleanPropertyWithNSString:(NSString *)key {
  return [OrgOssPdfreporterEngineJRPropertiesUtil asBooleanWithNSString:[self getPropertyWithNSString:key]];
}

- (int)getIntegerPropertyWithNSString:(NSString *)key {
  return [OrgOssPdfreporterEngineJRPropertiesUtil asIntegerWithNSString:[self getPropertyWithNSString:key]];
}

- (float)getFloatPropertyWithNSString:(NSString *)key {
  return [OrgOssPdfreporterEngineJRPropertiesUtil asFloatWithNSString:[self getPropertyWithNSString:key]];
}

+ (BOOL)asBooleanWithNSString:(NSString *)value {
  return [[JavaLangBoolean valueOfWithNSString:value] booleanValue];
}

+ (BOOL)asBooleanWithNSString:(NSString *)value
                     withBOOL:(BOOL)defaultValue {
  return value == nil ? defaultValue : [[JavaLangBoolean valueOfWithNSString:value] booleanValue];
}

+ (int)asIntegerWithNSString:(NSString *)value {
  return [JavaLangInteger parseIntWithNSString:value];
}

+ (float)asFloatWithNSString:(NSString *)value {
  return [JavaLangFloat parseFloatWithNSString:value];
}

- (id<JavaUtilList>)getPropertiesWithNSString:(NSString *)prefix {
  id<JavaUtilMap> properties = [((id<OrgOssPdfreporterEngineJasperReportsContext>) nil_chk(jasperReportsContext_)) getProperties];
  int prefixLength = [((NSString *) nil_chk(prefix)) length];
  id<JavaUtilList> values = [[JavaUtilArrayList alloc] init];
  {
    id<JavaUtilIterator> iter__ = [((id<JavaUtilSet>) nil_chk([((id<JavaUtilMap>) nil_chk(properties)) entrySet])) iterator];
    while ([((id<JavaUtilIterator>) nil_chk(iter__)) hasNext]) {
      id<JavaUtilMap_Entry> entry = [((id<JavaUtilIterator>) nil_chk(iter__)) next];
      NSString *name = [((id<JavaUtilMap_Entry>) nil_chk(entry)) getKey];
      if ([((NSString *) nil_chk(name)) hasPrefix:prefix]) {
        NSString *suffix = [((NSString *) nil_chk(name)) substring:prefixLength];
        NSString *value = [((id<JavaUtilMap_Entry>) nil_chk(entry)) getValue];
        [((id<JavaUtilList>) nil_chk(values)) addWithId:[[OrgOssPdfreporterEngineJRPropertiesUtil_PropertySuffix alloc] initWithNSString:name withNSString:suffix withNSString:value]];
      }
    }
  }
  return values;
}

+ (id<JavaUtilList>)getPropertiesWithOrgOssPdfreporterEngineJRPropertiesHolder:(id<OrgOssPdfreporterEngineJRPropertiesHolder>)propertiesHolder
                                                                  withNSString:(NSString *)prefix {
  return [OrgOssPdfreporterEngineJRPropertiesUtil getPropertiesWithOrgOssPdfreporterEngineJRPropertiesMap:[OrgOssPdfreporterEngineJRPropertiesUtil getOwnPropertiesWithOrgOssPdfreporterEngineJRPropertiesHolder:propertiesHolder] withNSString:prefix];
}

- (id<JavaUtilList>)getAllPropertiesWithOrgOssPdfreporterEngineJRPropertiesHolder:(id<OrgOssPdfreporterEngineJRPropertiesHolder>)propertiesHolder
                                                                     withNSString:(NSString *)prefix {
  return [self getAllPropertiesWithOrgOssPdfreporterEngineJRPropertiesMap:[OrgOssPdfreporterEngineJRPropertiesUtil getOwnPropertiesWithOrgOssPdfreporterEngineJRPropertiesHolder:propertiesHolder] withNSString:prefix];
}

+ (id<JavaUtilList>)getPropertiesWithOrgOssPdfreporterEngineJRPropertiesMap:(OrgOssPdfreporterEngineJRPropertiesMap *)propertiesMap
                                                               withNSString:(NSString *)prefix {
  int prefixLength = [((NSString *) nil_chk(prefix)) length];
  id<JavaUtilList> values = [[JavaUtilArrayList alloc] init];
  if (propertiesMap != nil) {
    IOSObjectArray *propertyNames = [propertiesMap getPropertyNames];
    for (int i = 0; i < (int) [((IOSObjectArray *) nil_chk(propertyNames)) count]; i++) {
      NSString *name = [((IOSObjectArray *) nil_chk(propertyNames)) objectAtIndex:i];
      if ([((NSString *) nil_chk(name)) hasPrefix:prefix]) {
        NSString *suffix = [((NSString *) nil_chk(name)) substring:prefixLength];
        NSString *value = [propertiesMap getPropertyWithNSString:name];
        [((id<JavaUtilList>) nil_chk(values)) addWithId:[[OrgOssPdfreporterEngineJRPropertiesUtil_PropertySuffix alloc] initWithNSString:name withNSString:suffix withNSString:value]];
      }
    }
  }
  return values;
}

- (id<JavaUtilList>)getAllPropertiesWithOrgOssPdfreporterEngineJRPropertiesMap:(OrgOssPdfreporterEngineJRPropertiesMap *)propertiesMap
                                                                  withNSString:(NSString *)prefix {
  id<JavaUtilList> own = [OrgOssPdfreporterEngineJRPropertiesUtil getPropertiesWithOrgOssPdfreporterEngineJRPropertiesMap:propertiesMap withNSString:prefix];
  id<JavaUtilList> global = [self getPropertiesWithNSString:prefix];
  id<JavaUtilList> collected;
  if ([((id<JavaUtilList>) nil_chk(own)) isEmpty]) {
    collected = global;
  }
  else {
    if (![((id<JavaUtilList>) nil_chk(global)) isEmpty]) {
      id<JavaUtilSet> ownSuffixes = [[JavaUtilHashSet alloc] init];
      for (id<JavaUtilIterator> it = [((id<JavaUtilList>) nil_chk(own)) iterator]; [((id<JavaUtilIterator>) nil_chk(it)) hasNext]; ) {
        OrgOssPdfreporterEngineJRPropertiesUtil_PropertySuffix *prop = [((id<JavaUtilIterator>) nil_chk(it)) next];
        [((id<JavaUtilSet>) nil_chk(ownSuffixes)) addWithId:[((OrgOssPdfreporterEngineJRPropertiesUtil_PropertySuffix *) nil_chk(prop)) getSuffix]];
      }
      for (id<JavaUtilIterator> it = [((id<JavaUtilList>) nil_chk(global)) iterator]; [((id<JavaUtilIterator>) nil_chk(it)) hasNext]; ) {
        OrgOssPdfreporterEngineJRPropertiesUtil_PropertySuffix *prop = [((id<JavaUtilIterator>) nil_chk(it)) next];
        if (![((id<JavaUtilSet>) nil_chk(ownSuffixes)) containsWithId:[((OrgOssPdfreporterEngineJRPropertiesUtil_PropertySuffix *) nil_chk(prop)) getSuffix]]) {
          [((id<JavaUtilList>) nil_chk(own)) addWithId:prop];
        }
      }
    }
    collected = own;
  }
  return collected;
}

- (NSString *)getPropertyWithOrgOssPdfreporterEngineJRPropertiesHolder:(id<OrgOssPdfreporterEngineJRPropertiesHolder>)propertiesHolder
                                                          withNSString:(NSString *)key {
  NSString *value = nil;
  while (propertiesHolder != nil && value == nil) {
    if ([((id<OrgOssPdfreporterEngineJRPropertiesHolder>) nil_chk(propertiesHolder)) hasProperties]) {
      value = [((OrgOssPdfreporterEngineJRPropertiesMap *) nil_chk([((id<OrgOssPdfreporterEngineJRPropertiesHolder>) nil_chk(propertiesHolder)) getPropertiesMap])) getPropertyWithNSString:key];
    }
    propertiesHolder = [((id<OrgOssPdfreporterEngineJRPropertiesHolder>) nil_chk(propertiesHolder)) getParentProperties];
  }
  if (value == nil) {
    value = [self getPropertyWithNSString:key];
  }
  return value;
}

- (NSString *)getPropertyWithNSString:(NSString *)key
withOrgOssPdfreporterEngineJRPropertiesHolderArray:(IOSObjectArray *)propertiesHolders {
  NSString *value = nil;
  main: {
    IOSObjectArray *a__ = propertiesHolders;
    int n__ = (int) [((IOSObjectArray *) nil_chk(a__)) count];
    for (int i__ = 0; i__ < n__; i__++) {
      id<OrgOssPdfreporterEngineJRPropertiesHolder> propertiesHolder = [((IOSObjectArray *) nil_chk(a__)) objectAtIndex:i__];
      while (propertiesHolder != nil) {
        if ([((id<OrgOssPdfreporterEngineJRPropertiesHolder>) nil_chk(propertiesHolder)) hasProperties]) {
          NSString *prop = [((OrgOssPdfreporterEngineJRPropertiesMap *) nil_chk([((id<OrgOssPdfreporterEngineJRPropertiesHolder>) nil_chk(propertiesHolder)) getPropertiesMap])) getPropertyWithNSString:key];
          if (prop != nil) {
            value = prop;
            return value;
          }
        }
        propertiesHolder = [((id<OrgOssPdfreporterEngineJRPropertiesHolder>) nil_chk(propertiesHolder)) getParentProperties];
      }
    }
  }
  if (value == nil) {
    value = [self getPropertyWithNSString:key];
  }
  return value;
}

- (NSString *)getPropertyWithOrgOssPdfreporterEngineJRPropertiesMap:(OrgOssPdfreporterEngineJRPropertiesMap *)propertiesMap
                                                       withNSString:(NSString *)key {
  NSString *value = nil;
  if (propertiesMap != nil) {
    value = [propertiesMap getPropertyWithNSString:key];
  }
  if (value == nil) {
    value = [self getPropertyWithNSString:key];
  }
  return value;
}

- (BOOL)getBooleanPropertyWithOrgOssPdfreporterEngineJRPropertiesHolder:(id<OrgOssPdfreporterEngineJRPropertiesHolder>)propertiesHolder
                                                           withNSString:(NSString *)key
                                                               withBOOL:(BOOL)defaultValue {
  NSString *value = [self getPropertyWithOrgOssPdfreporterEngineJRPropertiesHolder:propertiesHolder withNSString:key];
  return value == nil ? defaultValue : [OrgOssPdfreporterEngineJRPropertiesUtil asBooleanWithNSString:value];
}

- (BOOL)getBooleanPropertyWithOrgOssPdfreporterEngineJRPropertiesMap:(OrgOssPdfreporterEngineJRPropertiesMap *)propertiesMap
                                                        withNSString:(NSString *)key
                                                            withBOOL:(BOOL)defaultValue {
  NSString *value = [self getPropertyWithOrgOssPdfreporterEngineJRPropertiesMap:propertiesMap withNSString:key];
  return value == nil ? defaultValue : [OrgOssPdfreporterEngineJRPropertiesUtil asBooleanWithNSString:value];
}

- (int)getIntegerPropertyWithOrgOssPdfreporterEngineJRPropertiesHolder:(id<OrgOssPdfreporterEngineJRPropertiesHolder>)propertiesHolder
                                                          withNSString:(NSString *)key
                                                               withInt:(int)defaultValue {
  NSString *value = [self getPropertyWithOrgOssPdfreporterEngineJRPropertiesHolder:propertiesHolder withNSString:key];
  return value == nil ? defaultValue : [OrgOssPdfreporterEngineJRPropertiesUtil asIntegerWithNSString:value];
}

- (int)getIntegerPropertyWithOrgOssPdfreporterEngineJRPropertiesMap:(OrgOssPdfreporterEngineJRPropertiesMap *)propertiesMap
                                                       withNSString:(NSString *)key
                                                            withInt:(int)defaultValue {
  NSString *value = [self getPropertyWithOrgOssPdfreporterEngineJRPropertiesMap:propertiesMap withNSString:key];
  return value == nil ? defaultValue : [OrgOssPdfreporterEngineJRPropertiesUtil asIntegerWithNSString:value];
}

- (int)getIntegerPropertyWithNSString:(NSString *)key
                              withInt:(int)defaultValue {
  NSString *value = [self getPropertyWithNSString:key];
  return value == nil ? defaultValue : [OrgOssPdfreporterEngineJRPropertiesUtil asIntegerWithNSString:value];
}

- (float)getFloatPropertyWithOrgOssPdfreporterEngineJRPropertiesHolder:(id<OrgOssPdfreporterEngineJRPropertiesHolder>)propertiesHolder
                                                          withNSString:(NSString *)key
                                                             withFloat:(float)defaultValue {
  NSString *value = [self getPropertyWithOrgOssPdfreporterEngineJRPropertiesHolder:propertiesHolder withNSString:key];
  return value == nil ? defaultValue : [OrgOssPdfreporterEngineJRPropertiesUtil asFloatWithNSString:value];
}

- (float)getFloatPropertyWithOrgOssPdfreporterEngineJRPropertiesMap:(OrgOssPdfreporterEngineJRPropertiesMap *)propertiesMap
                                                       withNSString:(NSString *)key
                                                          withFloat:(float)defaultValue {
  NSString *value = [self getPropertyWithOrgOssPdfreporterEngineJRPropertiesMap:propertiesMap withNSString:key];
  return value == nil ? defaultValue : [OrgOssPdfreporterEngineJRPropertiesUtil asFloatWithNSString:value];
}

- (float)getFloatPropertyWithNSString:(NSString *)key
                            withFloat:(float)defaultValue {
  NSString *value = [self getPropertyWithNSString:key];
  return value == nil ? defaultValue : [OrgOssPdfreporterEngineJRPropertiesUtil asFloatWithNSString:value];
}

+ (long long int)asLongWithNSString:(NSString *)value {
  return [JavaLangLong parseLongWithNSString:value];
}

- (long long int)getLongPropertyWithNSString:(NSString *)key {
  return [OrgOssPdfreporterEngineJRPropertiesUtil asLongWithNSString:[self getPropertyWithNSString:key]];
}

- (long long int)getLongPropertyWithOrgOssPdfreporterEngineJRPropertiesMap:(OrgOssPdfreporterEngineJRPropertiesMap *)propertiesMap
                                                              withNSString:(NSString *)key
                                                                   withInt:(int)defaultValue {
  NSString *value = [self getPropertyWithOrgOssPdfreporterEngineJRPropertiesMap:propertiesMap withNSString:key];
  return value == nil ? defaultValue : [OrgOssPdfreporterEngineJRPropertiesUtil asLongWithNSString:value];
}

- (long long int)getLongPropertyWithOrgOssPdfreporterEngineJRPropertiesHolder:(id<OrgOssPdfreporterEngineJRPropertiesHolder>)propertiesHolder
                                                                 withNSString:(NSString *)key
                                                                      withInt:(int)defaultValue {
  NSString *value = [self getPropertyWithOrgOssPdfreporterEngineJRPropertiesHolder:propertiesHolder withNSString:key];
  return value == nil ? defaultValue : [OrgOssPdfreporterEngineJRPropertiesUtil asLongWithNSString:value];
}

+ (OrgOssPdfreporterEngineJRPropertiesMap *)getOwnPropertiesWithOrgOssPdfreporterEngineJRPropertiesHolder:(id<OrgOssPdfreporterEngineJRPropertiesHolder>)propertiesHolder {
  return [((id<OrgOssPdfreporterEngineJRPropertiesHolder>) nil_chk(propertiesHolder)) hasProperties] ? [((id<OrgOssPdfreporterEngineJRPropertiesHolder>) nil_chk(propertiesHolder)) getPropertiesMap] : nil;
}

- (void)transferPropertiesWithOrgOssPdfreporterEngineJRPropertiesHolder:(id<OrgOssPdfreporterEngineJRPropertiesHolder>)source
                          withOrgOssPdfreporterEngineJRPropertiesHolder:(id<OrgOssPdfreporterEngineJRPropertiesHolder>)destination
                                                           withNSString:(NSString *)tranferPropertiesPrefix {
  if (![((id<OrgOssPdfreporterEngineJRPropertiesHolder>) nil_chk(source)) hasProperties]) {
    return;
  }
  [self transferWithOrgOssPdfreporterEngineJRPropertiesMap:[((id<OrgOssPdfreporterEngineJRPropertiesHolder>) nil_chk(source)) getPropertiesMap] withOrgOssPdfreporterEngineJRPropertiesHolder:destination withNSString:tranferPropertiesPrefix];
}

- (void)transferPropertiesWithOrgOssPdfreporterEngineJRPropertiesMap:(OrgOssPdfreporterEngineJRPropertiesMap *)source
                       withOrgOssPdfreporterEngineJRPropertiesHolder:(id<OrgOssPdfreporterEngineJRPropertiesHolder>)destination
                                                        withNSString:(NSString *)tranferPropertiesPrefix {
  if (source == nil || ![((OrgOssPdfreporterEngineJRPropertiesMap *) nil_chk(source)) hasProperties]) {
    return;
  }
  [self transferWithOrgOssPdfreporterEngineJRPropertiesMap:source withOrgOssPdfreporterEngineJRPropertiesHolder:destination withNSString:tranferPropertiesPrefix];
}

- (void)transferWithOrgOssPdfreporterEngineJRPropertiesMap:(OrgOssPdfreporterEngineJRPropertiesMap *)source
             withOrgOssPdfreporterEngineJRPropertiesHolder:(id<OrgOssPdfreporterEngineJRPropertiesHolder>)destination
                                              withNSString:(NSString *)tranferPropertiesPrefix {
  id<JavaUtilList> transferPrefixProps = [self getPropertiesWithNSString:tranferPropertiesPrefix];
  for (id<JavaUtilIterator> prefixIt = [((id<JavaUtilList>) nil_chk(transferPrefixProps)) iterator]; [((id<JavaUtilIterator>) nil_chk(prefixIt)) hasNext]; ) {
    OrgOssPdfreporterEngineJRPropertiesUtil_PropertySuffix *transferPrefixProp = [((id<JavaUtilIterator>) nil_chk(prefixIt)) next];
    NSString *transferPrefix = [((OrgOssPdfreporterEngineJRPropertiesUtil_PropertySuffix *) nil_chk(transferPrefixProp)) getValue];
    if (transferPrefix != nil && [((NSString *) nil_chk(transferPrefix)) length] > 0) {
      id<JavaUtilList> transferProps = [OrgOssPdfreporterEngineJRPropertiesUtil getPropertiesWithOrgOssPdfreporterEngineJRPropertiesMap:source withNSString:transferPrefix];
      for (id<JavaUtilIterator> propIt = [((id<JavaUtilList>) nil_chk(transferProps)) iterator]; [((id<JavaUtilIterator>) nil_chk(propIt)) hasNext]; ) {
        OrgOssPdfreporterEngineJRPropertiesUtil_PropertySuffix *property = [((id<JavaUtilIterator>) nil_chk(propIt)) next];
        NSString *value = [((OrgOssPdfreporterEngineJRPropertiesUtil_PropertySuffix *) nil_chk(property)) getValue];
        [((OrgOssPdfreporterEngineJRPropertiesMap *) nil_chk([((id<OrgOssPdfreporterEngineJRPropertiesHolder>) nil_chk(destination)) getPropertiesMap])) setPropertyWithNSString:[((OrgOssPdfreporterEngineJRPropertiesUtil_PropertySuffix *) nil_chk(property)) getKey] withNSString:value];
      }
    }
  }
}

- (JavaLangCharacter *)getCharacterPropertyWithNSString:(NSString *)key {
  return [OrgOssPdfreporterEngineJRPropertiesUtil asCharacterWithNSString:[self getPropertyWithNSString:key]];
}

- (JavaLangCharacter *)getCharacterPropertyWithOrgOssPdfreporterEngineJRPropertiesMap:(OrgOssPdfreporterEngineJRPropertiesMap *)propertiesMap
                                                                         withNSString:(NSString *)key {
  NSString *value = [self getPropertyWithOrgOssPdfreporterEngineJRPropertiesMap:propertiesMap withNSString:key];
  return [OrgOssPdfreporterEngineJRPropertiesUtil asCharacterWithNSString:value];
}

+ (JavaLangCharacter *)asCharacterWithNSString:(NSString *)value {
  return value == nil || [((NSString *) nil_chk(value)) length] == 0 ? nil : [[JavaLangCharacter alloc] initWithUnichar:[((NSString *) nil_chk(value)) charAtWithInt:0]];
}

+ (NSString *)getOwnPropertyWithOrgOssPdfreporterEngineJRPropertiesHolder:(id<OrgOssPdfreporterEngineJRPropertiesHolder>)propertiesHolder
                                                             withNSString:(NSString *)key {
  NSString *value = nil;
  if ([((id<OrgOssPdfreporterEngineJRPropertiesHolder>) nil_chk(propertiesHolder)) hasProperties]) {
    value = [((OrgOssPdfreporterEngineJRPropertiesMap *) nil_chk([((id<OrgOssPdfreporterEngineJRPropertiesHolder>) nil_chk(propertiesHolder)) getPropertiesMap])) getPropertyWithNSString:key];
  }
  return value;
}

- (void)copyAllPropertiesTo:(id)copy {
  [super copyAllPropertiesTo:copy];
  OrgOssPdfreporterEngineJRPropertiesUtil *typedCopy = (OrgOssPdfreporterEngineJRPropertiesUtil *) copy;
  typedCopy.jasperReportsContext = jasperReportsContext_;
}

@end
@implementation OrgOssPdfreporterEngineJRPropertiesUtil_PropertySuffix

@synthesize key = key_;
@synthesize suffix = suffix_;
@synthesize value = value_;

- (id)initWithNSString:(NSString *)key
          withNSString:(NSString *)suffix
          withNSString:(NSString *)value {
  if ((self = [super init])) {
    self.key = key;
    self.suffix = suffix;
    self.value = value;
  }
  return self;
}

- (NSString *)getKey {
  return key_;
}

- (NSString *)getSuffix {
  return suffix_;
}

- (NSString *)getValue {
  return value_;
}

- (void)copyAllPropertiesTo:(id)copy {
  [super copyAllPropertiesTo:copy];
  OrgOssPdfreporterEngineJRPropertiesUtil_PropertySuffix *typedCopy = (OrgOssPdfreporterEngineJRPropertiesUtil_PropertySuffix *) copy;
  typedCopy.key = key_;
  typedCopy.suffix = suffix_;
  typedCopy.value = value_;
}

@end
