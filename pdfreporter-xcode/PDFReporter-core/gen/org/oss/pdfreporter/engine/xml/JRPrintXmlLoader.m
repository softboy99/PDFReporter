//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: pdfreporter-core/src/org/oss/pdfreporter/engine/xml/JRPrintXmlLoader.java
//
//  Created by kendra on 9/27/13.
//

#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "java/io/FileInputStream.h"
#include "java/io/IOException.h"
#include "java/io/InputStream.h"
#include "java/lang/Exception.h"
#include "java/util/ArrayList.h"
#include "java/util/Iterator.h"
#include "java/util/List.h"
#include "org/oss/pdfreporter/engine/DefaultJasperReportsContext.h"
#include "org/oss/pdfreporter/engine/JRException.h"
#include "org/oss/pdfreporter/engine/JRFont.h"
#include "org/oss/pdfreporter/engine/JROrigin.h"
#include "org/oss/pdfreporter/engine/JRPrintElement.h"
#include "org/oss/pdfreporter/engine/JRPrintHyperlinkParameter.h"
#include "org/oss/pdfreporter/engine/JRPrintPage.h"
#include "org/oss/pdfreporter/engine/JRStyle.h"
#include "org/oss/pdfreporter/engine/JasperPrint.h"
#include "org/oss/pdfreporter/engine/JasperReportsContext.h"
#include "org/oss/pdfreporter/engine/TabStop.h"
#include "org/oss/pdfreporter/engine/xml/JRBoxFactory.h"
#include "org/oss/pdfreporter/engine/xml/JRGenericElementTypeFactory.h"
#include "org/oss/pdfreporter/engine/xml/JRGenericPrintElementFactory.h"
#include "org/oss/pdfreporter/engine/xml/JRGenericPrintElementParameterFactory.h"
#include "org/oss/pdfreporter/engine/xml/JROriginFactory.h"
#include "org/oss/pdfreporter/engine/xml/JRParagraphFactory.h"
#include "org/oss/pdfreporter/engine/xml/JRPenFactory.h"
#include "org/oss/pdfreporter/engine/xml/JRPrintElementFactory.h"
#include "org/oss/pdfreporter/engine/xml/JRPrintEllipseFactory.h"
#include "org/oss/pdfreporter/engine/xml/JRPrintFontFactory.h"
#include "org/oss/pdfreporter/engine/xml/JRPrintFrameFactory.h"
#include "org/oss/pdfreporter/engine/xml/JRPrintGraphicElementFactory.h"
#include "org/oss/pdfreporter/engine/xml/JRPrintHyperlinkParameterFactory.h"
#include "org/oss/pdfreporter/engine/xml/JRPrintHyperlinkParameterValueFactory.h"
#include "org/oss/pdfreporter/engine/xml/JRPrintImageFactory.h"
#include "org/oss/pdfreporter/engine/xml/JRPrintLineFactory.h"
#include "org/oss/pdfreporter/engine/xml/JRPrintPageFactory.h"
#include "org/oss/pdfreporter/engine/xml/JRPrintRectangleFactory.h"
#include "org/oss/pdfreporter/engine/xml/JRPrintStyleFactory.h"
#include "org/oss/pdfreporter/engine/xml/JRPrintTextFactory.h"
#include "org/oss/pdfreporter/engine/xml/JRPrintXmlLoader.h"
#include "org/oss/pdfreporter/engine/xml/JRPropertyDigesterRule.h"
#include "org/oss/pdfreporter/engine/xml/JRStyleFactory.h"
#include "org/oss/pdfreporter/engine/xml/JRXmlConstants.h"
#include "org/oss/pdfreporter/engine/xml/JRXmlDigester.h"
#include "org/oss/pdfreporter/engine/xml/JasperPrintFactory.h"
#include "org/oss/pdfreporter/engine/xml/TabStopFactory.h"
#include "org/oss/pdfreporter/engine/xml/TextLineBreakOffsetsRule.h"
#include "org/oss/pdfreporter/engine/xml/XmlHandlerNamespace.h"
#include "org/oss/pdfreporter/engine/xml/XmlValueHandler.h"
#include "org/oss/pdfreporter/engine/xml/XmlValueHandlerUtils.h"
#include "org/oss/pdfreporter/registry/IRegistry.h"
#include "org/oss/pdfreporter/uses/org/apache/digester/IDigester.h"
#include "org/oss/pdfreporter/uses/org/apache/digester/SetNestedPropertiesRule.h"
#include "org/oss/pdfreporter/uses/org/apache/digester/SetPropertiesRule.h"
#include "org/oss/pdfreporter/uses/org/apache/digester/factory/IDigesterFactory.h"
#include "org/oss/pdfreporter/xml/parsers/IInputSource.h"
#include "org/oss/pdfreporter/xml/parsers/ParserConfigurationException.h"
#include "org/oss/pdfreporter/xml/parsers/XMLParseException.h"
#include "org/oss/pdfreporter/xml/parsers/factory/IXmlParserFactory.h"

@implementation OrgOssPdfreporterEngineXmlJRPrintXmlLoader

@synthesize jasperReportsContext = jasperReportsContext_;
@synthesize jasperPrint = jasperPrint_;
@synthesize errors = errors_;

- (id)init {
  if ((self = [super init])) {
    errors_ = [[JavaUtilArrayList alloc] init];
  }
  return self;
}

- (id)initWithOrgOssPdfreporterEngineJasperReportsContext:(id<OrgOssPdfreporterEngineJasperReportsContext>)jasperReportsContext {
  if ((self = [super init])) {
    errors_ = [[JavaUtilArrayList alloc] init];
    self.jasperReportsContext = jasperReportsContext;
  }
  return self;
}

- (void)setJasperPrintWithOrgOssPdfreporterEngineJasperPrint:(OrgOssPdfreporterEngineJasperPrint *)jasperPrint {
  self.jasperPrint = jasperPrint;
}

+ (OrgOssPdfreporterEngineJasperPrint *)loadFromFileWithOrgOssPdfreporterEngineJasperReportsContext:(id<OrgOssPdfreporterEngineJasperReportsContext>)jasperReportsContext
                                                                                       withNSString:(NSString *)sourceFileName {
  OrgOssPdfreporterEngineJasperPrint *jasperPrint = nil;
  JavaIoFileInputStream *fis = nil;
  @try {
    fis = [[JavaIoFileInputStream alloc] initWithNSString:sourceFileName];
    OrgOssPdfreporterEngineXmlJRPrintXmlLoader *printXmlLoader = [[OrgOssPdfreporterEngineXmlJRPrintXmlLoader alloc] initWithOrgOssPdfreporterEngineJasperReportsContext:jasperReportsContext];
    jasperPrint = [((OrgOssPdfreporterEngineXmlJRPrintXmlLoader *) nil_chk(printXmlLoader)) loadXMLWithJavaIoInputStream:fis];
  }
  @catch (JavaIoIOException *e) {
    @throw [[OrgOssPdfreporterEngineJRException alloc] initWithJavaLangThrowable:e];
  }
  @finally {
    if (fis != nil) {
      @try {
        [fis close];
      }
      @catch (JavaIoIOException *e) {
      }
    }
  }
  return jasperPrint;
}

+ (OrgOssPdfreporterEngineJasperPrint *)loadFromFileWithNSString:(NSString *)sourceFileName {
  return [OrgOssPdfreporterEngineXmlJRPrintXmlLoader loadFromFileWithOrgOssPdfreporterEngineJasperReportsContext:[OrgOssPdfreporterEngineDefaultJasperReportsContext getInstance] withNSString:sourceFileName];
}

+ (OrgOssPdfreporterEngineJasperPrint *)load__WithNSString:(NSString *)sourceFileName {
  return [OrgOssPdfreporterEngineXmlJRPrintXmlLoader loadFromFileWithNSString:sourceFileName];
}

+ (OrgOssPdfreporterEngineJasperPrint *)load__WithOrgOssPdfreporterEngineJasperReportsContext:(id<OrgOssPdfreporterEngineJasperReportsContext>)jasperReportsContext
                                                                        withJavaIoInputStream:(JavaIoInputStream *)is {
  OrgOssPdfreporterEngineJasperPrint *jasperPrint = nil;
  OrgOssPdfreporterEngineXmlJRPrintXmlLoader *printXmlLoader = [[OrgOssPdfreporterEngineXmlJRPrintXmlLoader alloc] initWithOrgOssPdfreporterEngineJasperReportsContext:jasperReportsContext];
  jasperPrint = [((OrgOssPdfreporterEngineXmlJRPrintXmlLoader *) nil_chk(printXmlLoader)) loadXMLWithJavaIoInputStream:is];
  return jasperPrint;
}

+ (OrgOssPdfreporterEngineJasperPrint *)load__WithJavaIoInputStream:(JavaIoInputStream *)is {
  return [OrgOssPdfreporterEngineXmlJRPrintXmlLoader load__WithOrgOssPdfreporterEngineJasperReportsContext:[OrgOssPdfreporterEngineDefaultJasperReportsContext getInstance] withJavaIoInputStream:is];
}

- (OrgOssPdfreporterEngineJasperPrint *)loadXMLWithJavaIoInputStream:(JavaIoInputStream *)is {
  @try {
    OrgOssPdfreporterEngineXmlJRXmlDigester *digester = [self prepareDigester];
    (void) [((OrgOssPdfreporterEngineXmlJRXmlDigester *) nil_chk(digester)) parseWithOrgOssPdfreporterXmlParsersIInputSource:[((id<OrgOssPdfreporterXmlParsersFactoryIXmlParserFactory>) nil_chk([OrgOssPdfreporterRegistryIRegistry getIXmlParserFactory])) newInputSourceWithJavaIoInputStream:is]];
  }
  @catch (OrgOssPdfreporterXmlParsersXMLParseException *e) {
    @throw [[OrgOssPdfreporterEngineJRException alloc] initWithJavaLangThrowable:e];
  }
  @catch (JavaIoIOException *e) {
    @throw [[OrgOssPdfreporterEngineJRException alloc] initWithJavaLangThrowable:e];
  }
  @catch (OrgOssPdfreporterXmlParsersParserConfigurationException *e) {
    @throw [[OrgOssPdfreporterEngineJRException alloc] initWithJavaLangThrowable:e];
  }
  if ([((id<JavaUtilList>) nil_chk(errors_)) size] > 0) {
    JavaLangException *e = [((id<JavaUtilList>) nil_chk(errors_)) getWithInt:0];
    if ([e isKindOfClass:[OrgOssPdfreporterEngineJRException class]]) {
      @throw (OrgOssPdfreporterEngineJRException *) e;
    }
    @throw [[OrgOssPdfreporterEngineJRException alloc] initWithJavaLangThrowable:e];
  }
  return self.jasperPrint;
}

- (OrgOssPdfreporterEngineXmlJRXmlDigester *)prepareDigester {
  OrgOssPdfreporterEngineXmlJRXmlDigester *digester = [[OrgOssPdfreporterEngineXmlJRXmlDigester alloc] initWithOrgOssPdfreporterUsesOrgApacheDigesterIDigester:[((id<OrgOssPdfreporterUsesOrgApacheDigesterFactoryIDigesterFactory>) nil_chk([OrgOssPdfreporterRegistryIRegistry getIDigesterFactory])) newDigester]];
  [((OrgOssPdfreporterEngineXmlJRXmlDigester *) nil_chk(digester)) setNamespaceAwareWithBOOL:YES];
  [((OrgOssPdfreporterEngineXmlJRXmlDigester *) nil_chk(digester)) setRuleNamespaceURIWithNSString:[OrgOssPdfreporterEngineXmlJRXmlConstants JASPERPRINT_NAMESPACE]];
  [((OrgOssPdfreporterEngineXmlJRXmlDigester *) nil_chk(digester)) pushWithId:self];
  [((OrgOssPdfreporterEngineXmlJRXmlDigester *) nil_chk(digester)) setErrorHandlerWithOrgOssPdfreporterXmlParsersXMLErrorHandler:self];
  [((OrgOssPdfreporterEngineXmlJRXmlDigester *) nil_chk(digester)) setValidatingWithBOOL:YES];
  [((OrgOssPdfreporterEngineXmlJRXmlDigester *) nil_chk(digester)) addFactoryCreateWithNSString:@"jasperPrint" withNSString:[[IOSClass classWithClass:[OrgOssPdfreporterEngineXmlJasperPrintFactory class]] getName]];
  [((OrgOssPdfreporterEngineXmlJRXmlDigester *) nil_chk(digester)) addSetNextWithNSString:@"jasperPrint" withNSString:@"setJasperPrint" withNSString:[[IOSClass classWithClass:[OrgOssPdfreporterEngineJasperPrint class]] getName]];
  [((OrgOssPdfreporterEngineXmlJRXmlDigester *) nil_chk(digester)) addRuleWithNSString:@"*/property" withOrgOssPdfreporterUsesOrgApacheDigesterIRule:[[OrgOssPdfreporterEngineXmlJRPropertyDigesterRule alloc] init]];
  [((OrgOssPdfreporterEngineXmlJRXmlDigester *) nil_chk(digester)) addFactoryCreateWithNSString:@"jasperPrint/origin" withNSString:[[IOSClass classWithClass:[OrgOssPdfreporterEngineXmlJROriginFactory class]] getName]];
  [((OrgOssPdfreporterEngineXmlJRXmlDigester *) nil_chk(digester)) addSetNextWithNSString:@"jasperPrint/origin" withNSString:@"addOrigin" withNSString:[[IOSClass classWithClass:[OrgOssPdfreporterEngineJROrigin class]] getName]];
  [((OrgOssPdfreporterEngineXmlJRXmlDigester *) nil_chk(digester)) addFactoryCreateWithNSString:@"jasperPrint/reportFont" withNSString:[[IOSClass classWithClass:[OrgOssPdfreporterEngineXmlJRStyleFactory class]] getName]];
  [((OrgOssPdfreporterEngineXmlJRXmlDigester *) nil_chk(digester)) addSetNextWithNSString:@"jasperPrint/reportFont" withNSString:@"addStyle" withNSString:[[IOSClass classWithProtocol:@protocol(OrgOssPdfreporterEngineJRStyle)] getName]];
  [((OrgOssPdfreporterEngineXmlJRXmlDigester *) nil_chk(digester)) addFactoryCreateWithNSString:@"jasperPrint/style" withNSString:[[IOSClass classWithClass:[OrgOssPdfreporterEngineXmlJRPrintStyleFactory class]] getName]];
  [((OrgOssPdfreporterEngineXmlJRXmlDigester *) nil_chk(digester)) addSetNextWithNSString:@"jasperPrint/style" withNSString:@"addStyle" withNSString:[[IOSClass classWithProtocol:@protocol(OrgOssPdfreporterEngineJRStyle)] getName]];
  [((OrgOssPdfreporterEngineXmlJRXmlDigester *) nil_chk(digester)) addFactoryCreateWithNSString:@"*/style/pen" withNSString:[[IOSClass classWithClass:[OrgOssPdfreporterEngineXmlJRPenFactory_Style class]] getName]];
  [((OrgOssPdfreporterEngineXmlJRXmlDigester *) nil_chk(digester)) addFactoryCreateWithNSString:@"jasperPrint/page" withNSString:[[IOSClass classWithClass:[OrgOssPdfreporterEngineXmlJRPrintPageFactory class]] getName]];
  [((OrgOssPdfreporterEngineXmlJRXmlDigester *) nil_chk(digester)) addSetNextWithNSString:@"jasperPrint/page" withNSString:@"addPage" withNSString:[[IOSClass classWithProtocol:@protocol(OrgOssPdfreporterEngineJRPrintPage)] getName]];
  [((OrgOssPdfreporterEngineXmlJRXmlDigester *) nil_chk(digester)) addFactoryCreateWithNSString:@"*/line" withNSString:[[IOSClass classWithClass:[OrgOssPdfreporterEngineXmlJRPrintLineFactory class]] getName]];
  [((OrgOssPdfreporterEngineXmlJRXmlDigester *) nil_chk(digester)) addSetNextWithNSString:@"*/line" withNSString:@"addElement" withNSString:[[IOSClass classWithProtocol:@protocol(OrgOssPdfreporterEngineJRPrintElement)] getName]];
  [((OrgOssPdfreporterEngineXmlJRXmlDigester *) nil_chk(digester)) addFactoryCreateWithNSString:@"*/reportElement" withNSString:[[IOSClass classWithClass:[OrgOssPdfreporterEngineXmlJRPrintElementFactory class]] getName]];
  [((OrgOssPdfreporterEngineXmlJRXmlDigester *) nil_chk(digester)) addFactoryCreateWithNSString:@"*/graphicElement" withNSString:[[IOSClass classWithClass:[OrgOssPdfreporterEngineXmlJRPrintGraphicElementFactory class]] getName]];
  [((OrgOssPdfreporterEngineXmlJRXmlDigester *) nil_chk(digester)) addFactoryCreateWithNSString:@"*/pen" withNSString:[[IOSClass classWithClass:[OrgOssPdfreporterEngineXmlJRPenFactory class]] getName]];
  [((OrgOssPdfreporterEngineXmlJRXmlDigester *) nil_chk(digester)) addFactoryCreateWithNSString:@"*/rectangle" withNSString:[[IOSClass classWithClass:[OrgOssPdfreporterEngineXmlJRPrintRectangleFactory class]] getName]];
  [((OrgOssPdfreporterEngineXmlJRXmlDigester *) nil_chk(digester)) addSetNextWithNSString:@"*/rectangle" withNSString:@"addElement" withNSString:[[IOSClass classWithProtocol:@protocol(OrgOssPdfreporterEngineJRPrintElement)] getName]];
  [((OrgOssPdfreporterEngineXmlJRXmlDigester *) nil_chk(digester)) addFactoryCreateWithNSString:@"*/ellipse" withNSString:[[IOSClass classWithClass:[OrgOssPdfreporterEngineXmlJRPrintEllipseFactory class]] getName]];
  [((OrgOssPdfreporterEngineXmlJRXmlDigester *) nil_chk(digester)) addSetNextWithNSString:@"*/ellipse" withNSString:@"addElement" withNSString:[[IOSClass classWithProtocol:@protocol(OrgOssPdfreporterEngineJRPrintElement)] getName]];
  [((OrgOssPdfreporterEngineXmlJRXmlDigester *) nil_chk(digester)) addFactoryCreateWithNSString:@"*/image" withNSString:[[IOSClass classWithClass:[OrgOssPdfreporterEngineXmlJRPrintImageFactory class]] getName]];
  [((OrgOssPdfreporterEngineXmlJRXmlDigester *) nil_chk(digester)) addSetNextWithNSString:@"*/image" withNSString:@"addElement" withNSString:[[IOSClass classWithProtocol:@protocol(OrgOssPdfreporterEngineJRPrintElement)] getName]];
  [((OrgOssPdfreporterEngineXmlJRXmlDigester *) nil_chk(digester)) addFactoryCreateWithNSString:@"*/box" withNSString:[[IOSClass classWithClass:[OrgOssPdfreporterEngineXmlJRBoxFactory class]] getName]];
  [((OrgOssPdfreporterEngineXmlJRXmlDigester *) nil_chk(digester)) addFactoryCreateWithNSString:@"*/box/pen" withNSString:[[IOSClass classWithClass:[OrgOssPdfreporterEngineXmlJRPenFactory_Box class]] getName]];
  [((OrgOssPdfreporterEngineXmlJRXmlDigester *) nil_chk(digester)) addFactoryCreateWithNSString:@"*/box/topPen" withNSString:[[IOSClass classWithClass:[OrgOssPdfreporterEngineXmlJRPenFactory_Top class]] getName]];
  [((OrgOssPdfreporterEngineXmlJRXmlDigester *) nil_chk(digester)) addFactoryCreateWithNSString:@"*/box/leftPen" withNSString:[[IOSClass classWithClass:[OrgOssPdfreporterEngineXmlJRPenFactory_Left class]] getName]];
  [((OrgOssPdfreporterEngineXmlJRXmlDigester *) nil_chk(digester)) addFactoryCreateWithNSString:@"*/box/bottomPen" withNSString:[[IOSClass classWithClass:[OrgOssPdfreporterEngineXmlJRPenFactory_Bottom class]] getName]];
  [((OrgOssPdfreporterEngineXmlJRXmlDigester *) nil_chk(digester)) addFactoryCreateWithNSString:@"*/box/rightPen" withNSString:[[IOSClass classWithClass:[OrgOssPdfreporterEngineXmlJRPenFactory_Right class]] getName]];
  [((OrgOssPdfreporterEngineXmlJRXmlDigester *) nil_chk(digester)) addFactoryCreateWithNSString:@"*/paragraph" withNSString:[[IOSClass classWithClass:[OrgOssPdfreporterEngineXmlJRParagraphFactory class]] getName]];
  [((OrgOssPdfreporterEngineXmlJRXmlDigester *) nil_chk(digester)) addFactoryCreateWithNSString:@"*/paragraph/tabStop" withNSString:[[IOSClass classWithClass:[OrgOssPdfreporterEngineXmlTabStopFactory class]] getName]];
  [((OrgOssPdfreporterEngineXmlJRXmlDigester *) nil_chk(digester)) addSetNextWithNSString:@"*/paragraph/tabStop" withNSString:@"addTabStop" withNSString:[[IOSClass classWithClass:[OrgOssPdfreporterEngineTabStop class]] getName]];
  [((OrgOssPdfreporterEngineXmlJRXmlDigester *) nil_chk(digester)) addFactoryCreateWithNSString:@"*/text" withNSString:[[IOSClass classWithClass:[OrgOssPdfreporterEngineXmlJRPrintTextFactory class]] getName]];
  [((OrgOssPdfreporterEngineXmlJRXmlDigester *) nil_chk(digester)) addSetNextWithNSString:@"*/text" withNSString:@"addElement" withNSString:[[IOSClass classWithProtocol:@protocol(OrgOssPdfreporterEngineJRPrintElement)] getName]];
  OrgOssPdfreporterUsesOrgApacheDigesterSetNestedPropertiesRule *textRule = [[OrgOssPdfreporterUsesOrgApacheDigesterSetNestedPropertiesRule alloc] initWithNSStringArray:[IOSObjectArray arrayWithObjects:(id[]){ @"textContent", @"textTruncateSuffix", @"reportElement", @"box", @"font", [OrgOssPdfreporterEngineXmlJRXmlConstants ELEMENT_lineBreakOffsets] } count:6 type:[IOSClass classWithClass:[NSString class]]] withNSStringArray:[IOSObjectArray arrayWithObjects:(id[]){ @"text", @"textTruncateSuffix" } count:2 type:[IOSClass classWithClass:[NSString class]]]];
  [((OrgOssPdfreporterUsesOrgApacheDigesterSetNestedPropertiesRule *) nil_chk(textRule)) setTrimDataWithBOOL:NO];
  [((OrgOssPdfreporterUsesOrgApacheDigesterSetNestedPropertiesRule *) nil_chk(textRule)) setAllowUnknownChildElementsWithBOOL:YES];
  [((OrgOssPdfreporterEngineXmlJRXmlDigester *) nil_chk(digester)) addRuleWithNSString:@"*/text" withOrgOssPdfreporterUsesOrgApacheDigesterIRule:textRule];
  [((OrgOssPdfreporterEngineXmlJRXmlDigester *) nil_chk(digester)) addRuleWithNSString:@"*/text/textContent" withOrgOssPdfreporterUsesOrgApacheDigesterIRule:[[OrgOssPdfreporterUsesOrgApacheDigesterSetPropertiesRule alloc] initWithNSString:[OrgOssPdfreporterEngineXmlJRXmlConstants ATTRIBUTE_truncateIndex] withNSString:@"textTruncateIndex"]];
  [((OrgOssPdfreporterEngineXmlJRXmlDigester *) nil_chk(digester)) addFactoryCreateWithNSString:@"*/text/font" withNSString:[[IOSClass classWithClass:[OrgOssPdfreporterEngineXmlJRPrintFontFactory class]] getName]];
  [((OrgOssPdfreporterEngineXmlJRXmlDigester *) nil_chk(digester)) addSetNextWithNSString:@"*/text/font" withNSString:@"setFont" withNSString:[[IOSClass classWithProtocol:@protocol(OrgOssPdfreporterEngineJRFont)] getName]];
  [((OrgOssPdfreporterEngineXmlJRXmlDigester *) nil_chk(digester)) addRuleWithNSString:@"*/text/lineBreakOffsets" withOrgOssPdfreporterUsesOrgApacheDigesterIRule:[[OrgOssPdfreporterEngineXmlTextLineBreakOffsetsRule alloc] init]];
  [self addFrameRulesWithOrgOssPdfreporterEngineXmlJRXmlDigester:digester];
  [self addHyperlinkParameterRulesWithOrgOssPdfreporterEngineXmlJRXmlDigester:digester];
  [self addGenericElementRulesWithOrgOssPdfreporterEngineXmlJRXmlDigester:digester];
  return digester;
}

- (void)addFrameRulesWithOrgOssPdfreporterEngineXmlJRXmlDigester:(OrgOssPdfreporterEngineXmlJRXmlDigester *)digester {
  [((OrgOssPdfreporterEngineXmlJRXmlDigester *) nil_chk(digester)) addFactoryCreateWithNSString:@"*/frame" withNSString:[[IOSClass classWithClass:[OrgOssPdfreporterEngineXmlJRPrintFrameFactory class]] getName]];
  [((OrgOssPdfreporterEngineXmlJRXmlDigester *) nil_chk(digester)) addSetNextWithNSString:@"*/frame" withNSString:@"addElement" withNSString:[[IOSClass classWithProtocol:@protocol(OrgOssPdfreporterEngineJRPrintElement)] getName]];
}

- (void)addHyperlinkParameterRulesWithOrgOssPdfreporterEngineXmlJRXmlDigester:(OrgOssPdfreporterEngineXmlJRXmlDigester *)digester {
  NSString *parameterPattern = @"*/hyperlinkParameter";
  [((OrgOssPdfreporterEngineXmlJRXmlDigester *) nil_chk(digester)) addFactoryCreateWithNSString:parameterPattern withIOSClass:[IOSClass classWithClass:[OrgOssPdfreporterEngineXmlJRPrintHyperlinkParameterFactory class]]];
  [((OrgOssPdfreporterEngineXmlJRXmlDigester *) nil_chk(digester)) addSetNextWithNSString:parameterPattern withNSString:@"addHyperlinkParameter" withNSString:[[IOSClass classWithClass:[OrgOssPdfreporterEngineJRPrintHyperlinkParameter class]] getName]];
  NSString *parameterValuePattern = [NSString stringWithFormat:@"%@/hyperlinkParameterValue", parameterPattern];
  [((OrgOssPdfreporterEngineXmlJRXmlDigester *) nil_chk(digester)) addFactoryCreateWithNSString:parameterValuePattern withIOSClass:[IOSClass classWithClass:[OrgOssPdfreporterEngineXmlJRPrintHyperlinkParameterValueFactory class]]];
  [((OrgOssPdfreporterEngineXmlJRXmlDigester *) nil_chk(digester)) addCallMethodWithNSString:parameterValuePattern withNSString:@"setData" withInt:0];
}

- (void)addGenericElementRulesWithOrgOssPdfreporterEngineXmlJRXmlDigester:(OrgOssPdfreporterEngineXmlJRXmlDigester *)digester {
  NSString *elementPattern = @"*/genericElement";
  [((OrgOssPdfreporterEngineXmlJRXmlDigester *) nil_chk(digester)) addFactoryCreateWithNSString:elementPattern withIOSClass:[IOSClass classWithClass:[OrgOssPdfreporterEngineXmlJRGenericPrintElementFactory class]]];
  [((OrgOssPdfreporterEngineXmlJRXmlDigester *) nil_chk(digester)) addSetNextWithNSString:elementPattern withNSString:@"addElement" withNSString:[[IOSClass classWithProtocol:@protocol(OrgOssPdfreporterEngineJRPrintElement)] getName]];
  NSString *elementTypePattern = [NSString stringWithFormat:@"%@/genericElementType", elementPattern];
  [((OrgOssPdfreporterEngineXmlJRXmlDigester *) nil_chk(digester)) addFactoryCreateWithNSString:elementTypePattern withIOSClass:[IOSClass classWithClass:[OrgOssPdfreporterEngineXmlJRGenericElementTypeFactory class]]];
  [((OrgOssPdfreporterEngineXmlJRXmlDigester *) nil_chk(digester)) addSetNextWithNSString:elementTypePattern withNSString:@"setGenericType"];
  NSString *elementParameterPattern = [NSString stringWithFormat:@"%@/genericElementParameter", elementPattern];
  [((OrgOssPdfreporterEngineXmlJRXmlDigester *) nil_chk(digester)) addFactoryCreateWithNSString:elementParameterPattern withIOSClass:[IOSClass classWithClass:[OrgOssPdfreporterEngineXmlJRGenericPrintElementParameterFactory class]]];
  [((OrgOssPdfreporterEngineXmlJRXmlDigester *) nil_chk(digester)) addCallMethodWithNSString:elementParameterPattern withNSString:@"addParameter"];
  [((OrgOssPdfreporterEngineXmlJRXmlDigester *) nil_chk(digester)) addRuleWithNSString:elementParameterPattern withOrgOssPdfreporterUsesOrgApacheDigesterIRule:[[OrgOssPdfreporterEngineXmlJRGenericPrintElementParameterFactory_ArbitraryValueSetter alloc] init]];
  NSString *elementParameterValuePattern = [NSString stringWithFormat:@"%@/genericElementParameterValue", elementParameterPattern];
  [((OrgOssPdfreporterEngineXmlJRXmlDigester *) nil_chk(digester)) addFactoryCreateWithNSString:elementParameterValuePattern withIOSClass:[IOSClass classWithClass:[OrgOssPdfreporterEngineXmlJRGenericPrintElementParameterFactory_ParameterValueFactory class]]];
  [((OrgOssPdfreporterEngineXmlJRXmlDigester *) nil_chk(digester)) addCallMethodWithNSString:elementParameterValuePattern withNSString:@"setData" withInt:0];
  [self addValueHandlerRulesWithOrgOssPdfreporterEngineXmlJRXmlDigester:digester withNSString:elementParameterPattern];
}

- (void)addValueHandlerRulesWithOrgOssPdfreporterEngineXmlJRXmlDigester:(OrgOssPdfreporterEngineXmlJRXmlDigester *)digester
                                                           withNSString:(NSString *)elementParameterPattern {
  id<JavaUtilList> handlers = [((OrgOssPdfreporterEngineXmlXmlValueHandlerUtils *) nil_chk([OrgOssPdfreporterEngineXmlXmlValueHandlerUtils instance])) getHandlers];
  {
    id<JavaUtilIterator> iter__ = [((id<JavaUtilList>) nil_chk(handlers)) iterator];
    while ([((id<JavaUtilIterator>) nil_chk(iter__)) hasNext]) {
      id<OrgOssPdfreporterEngineXmlXmlValueHandler> handler = [((id<JavaUtilIterator>) nil_chk(iter__)) next];
      OrgOssPdfreporterEngineXmlXmlHandlerNamespace *namespace_ = [((id<OrgOssPdfreporterEngineXmlXmlValueHandler>) nil_chk(handler)) getNamespace];
      if (namespace_ != nil) {
        NSString *namespaceURI = [namespace_ getNamespaceURI];
        [((OrgOssPdfreporterEngineXmlJRXmlDigester *) nil_chk(digester)) setRuleNamespaceURIWithNSString:namespaceURI];
        [((id<OrgOssPdfreporterEngineXmlXmlValueHandler>) nil_chk(handler)) configureDigesterWithOrgOssPdfreporterEngineXmlJRXmlDigester:digester];
        NSString *schemaResource = [namespace_ getInternalSchemaResource];
        if (schemaResource != nil) {
          [((OrgOssPdfreporterEngineXmlJRXmlDigester *) nil_chk(digester)) addInternalEntityResourceWithNSString:[((OrgOssPdfreporterEngineXmlXmlHandlerNamespace *) nil_chk(namespace_)) getPublicSchemaLocation] withNSString:schemaResource];
        }
      }
    }
  }
  [((OrgOssPdfreporterEngineXmlJRXmlDigester *) nil_chk(digester)) setRuleNamespaceURIWithNSString:[OrgOssPdfreporterEngineXmlJRXmlConstants JASPERPRINT_NAMESPACE]];
}

- (void)addErrorWithJavaLangException:(JavaLangException *)e {
  [((id<JavaUtilList>) nil_chk(self.errors)) addWithId:e];
}

- (void)errorWithOrgOssPdfreporterXmlParsersXMLParseException:(OrgOssPdfreporterXmlParsersXMLParseException *)e {
  [((id<JavaUtilList>) nil_chk(self.errors)) addWithId:e];
}

- (void)fatalErrorWithOrgOssPdfreporterXmlParsersXMLParseException:(OrgOssPdfreporterXmlParsersXMLParseException *)e {
  [((id<JavaUtilList>) nil_chk(self.errors)) addWithId:e];
}

- (void)warningWithOrgOssPdfreporterXmlParsersXMLParseException:(OrgOssPdfreporterXmlParsersXMLParseException *)e {
  [((id<JavaUtilList>) nil_chk(self.errors)) addWithId:e];
}

- (void)copyAllPropertiesTo:(id)copy {
  [super copyAllPropertiesTo:copy];
  OrgOssPdfreporterEngineXmlJRPrintXmlLoader *typedCopy = (OrgOssPdfreporterEngineXmlJRPrintXmlLoader *) copy;
  typedCopy.jasperReportsContext = jasperReportsContext_;
  typedCopy.jasperPrint = jasperPrint_;
  typedCopy.errors = errors_;
}

@end
