//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: pdfreporter-core/src/org/oss/pdfreporter/engine/xml/TextLineBreakOffsetsRule.java
//
//  Created by kendra on 9/27/13.
//

#include "IOSShortArray.h"
#include "java/lang/Short.h"
#include "java/util/StringTokenizer.h"
#include "org/oss/pdfreporter/engine/JRPrintText.h"
#include "org/oss/pdfreporter/engine/xml/JRXmlConstants.h"
#include "org/oss/pdfreporter/engine/xml/TextLineBreakOffsetsRule.h"
#include "org/oss/pdfreporter/uses/org/apache/digester/AbstractRule.h"
#include "org/oss/pdfreporter/uses/org/apache/digester/IDigester.h"

@implementation OrgOssPdfreporterEngineXmlTextLineBreakOffsetsRule

- (void)bodyWithNSString:(NSString *)namespace_
            withNSString:(NSString *)name
            withNSString:(NSString *)text {
  if (text != nil) {
    JavaUtilStringTokenizer *tokenizer = [[JavaUtilStringTokenizer alloc] initWithNSString:text withNSString:[OrgOssPdfreporterEngineXmlJRXmlConstants LINE_BREAK_OFFSET_SEPARATOR]];
    int tokenCount = [((JavaUtilStringTokenizer *) nil_chk(tokenizer)) countTokens];
    IOSShortArray *offsets;
    if (tokenCount == 0) {
      offsets = [OrgOssPdfreporterEngineJRPrintText ZERO_LINE_BREAK_OFFSETS];
    }
    else {
      offsets = [IOSShortArray arrayWithLength:tokenCount];
      for (int i = 0; i < (int) [((IOSShortArray *) nil_chk(offsets)) count]; i++) {
        NSString *token = [((JavaUtilStringTokenizer *) nil_chk(tokenizer)) nextToken];
        (*[((IOSShortArray *) nil_chk(offsets)) shortRefAtIndex:i]) = [JavaLangShort parseShortWithNSString:token];
      }
    }
    id<OrgOssPdfreporterEngineJRPrintText> printText = (id<OrgOssPdfreporterEngineJRPrintText>) [((id<OrgOssPdfreporterUsesOrgApacheDigesterIDigester>) nil_chk([self getDigester])) peek];
    [((id<OrgOssPdfreporterEngineJRPrintText>) nil_chk(printText)) setLineBreakOffsetsWithShortArray:offsets];
  }
}

- (id)init {
  return [super init];
}

@end
