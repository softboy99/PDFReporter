//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: pdfreporter-core/src/org/oss/pdfreporter/engine/xml/JRParagraphFactory.java
//
//  Created by kendra on 9/27/13.
//

#include "java/lang/Float.h"
#include "java/lang/Integer.h"
#include "org/oss/pdfreporter/engine/JRParagraph.h"
#include "org/oss/pdfreporter/engine/JRParagraphContainer.h"
#include "org/oss/pdfreporter/engine/type/LineSpacingEnum.h"
#include "org/oss/pdfreporter/engine/xml/JRParagraphFactory.h"
#include "org/oss/pdfreporter/engine/xml/JRXmlConstants.h"
#include "org/oss/pdfreporter/uses/org/apache/digester/IDigester.h"
#include "org/oss/pdfreporter/xml/parsers/IAttributes.h"

@implementation OrgOssPdfreporterEngineXmlJRParagraphFactory

- (id)createObjectWithOrgOssPdfreporterXmlParsersIAttributes:(id<OrgOssPdfreporterXmlParsersIAttributes>)atts {
  id<OrgOssPdfreporterEngineJRParagraphContainer> paragraphContainer = (id<OrgOssPdfreporterEngineJRParagraphContainer>) [((id<OrgOssPdfreporterUsesOrgApacheDigesterIDigester>) nil_chk(digester_)) peek];
  id<OrgOssPdfreporterEngineJRParagraph> paragraph = [((id<OrgOssPdfreporterEngineJRParagraphContainer>) nil_chk(paragraphContainer)) getParagraph];
  [OrgOssPdfreporterEngineXmlJRParagraphFactory setParagraphAttributesWithOrgOssPdfreporterXmlParsersIAttributes:atts withOrgOssPdfreporterEngineJRParagraph:paragraph];
  return paragraph;
}

+ (void)setParagraphAttributesWithOrgOssPdfreporterXmlParsersIAttributes:(id<OrgOssPdfreporterXmlParsersIAttributes>)atts
                                  withOrgOssPdfreporterEngineJRParagraph:(id<OrgOssPdfreporterEngineJRParagraph>)paragraph {
  OrgOssPdfreporterEngineTypeLineSpacingEnumEnum *lineSpacing = [OrgOssPdfreporterEngineTypeLineSpacingEnumEnum getByNameWithNSString:[((id<OrgOssPdfreporterXmlParsersIAttributes>) nil_chk(atts)) getValueWithNSString:[OrgOssPdfreporterEngineXmlJRXmlConstants ATTRIBUTE_lineSpacing]]];
  if (lineSpacing != nil) {
    [((id<OrgOssPdfreporterEngineJRParagraph>) nil_chk(paragraph)) setLineSpacingWithOrgOssPdfreporterEngineTypeLineSpacingEnumEnum:lineSpacing];
  }
  NSString *lineSpacingSize = [((id<OrgOssPdfreporterXmlParsersIAttributes>) nil_chk(atts)) getValueWithNSString:[OrgOssPdfreporterEngineXmlJRXmlConstants ATTRIBUTE_lineSpacingSize]];
  if (lineSpacingSize != nil && [((NSString *) nil_chk(lineSpacingSize)) length] > 0) {
    [((id<OrgOssPdfreporterEngineJRParagraph>) nil_chk(paragraph)) setLineSpacingSizeWithJavaLangFloat:[JavaLangFloat valueOfWithFloat:[JavaLangFloat parseFloatWithNSString:lineSpacingSize]]];
  }
  NSString *firstLineIndent = [((id<OrgOssPdfreporterXmlParsersIAttributes>) nil_chk(atts)) getValueWithNSString:[OrgOssPdfreporterEngineXmlJRXmlConstants ATTRIBUTE_firstLineIndent]];
  if (firstLineIndent != nil && [((NSString *) nil_chk(firstLineIndent)) length] > 0) {
    [((id<OrgOssPdfreporterEngineJRParagraph>) nil_chk(paragraph)) setFirstLineIndentWithJavaLangInteger:[JavaLangInteger valueOfWithInt:[JavaLangInteger parseIntWithNSString:firstLineIndent]]];
  }
  NSString *leftIndent = [((id<OrgOssPdfreporterXmlParsersIAttributes>) nil_chk(atts)) getValueWithNSString:[OrgOssPdfreporterEngineXmlJRXmlConstants ATTRIBUTE_leftIndent]];
  if (leftIndent != nil && [((NSString *) nil_chk(leftIndent)) length] > 0) {
    [((id<OrgOssPdfreporterEngineJRParagraph>) nil_chk(paragraph)) setLeftIndentWithJavaLangInteger:[JavaLangInteger valueOfWithInt:[JavaLangInteger parseIntWithNSString:leftIndent]]];
  }
  NSString *rightIndent = [((id<OrgOssPdfreporterXmlParsersIAttributes>) nil_chk(atts)) getValueWithNSString:[OrgOssPdfreporterEngineXmlJRXmlConstants ATTRIBUTE_rightIndent]];
  if (rightIndent != nil && [((NSString *) nil_chk(rightIndent)) length] > 0) {
    [((id<OrgOssPdfreporterEngineJRParagraph>) nil_chk(paragraph)) setRightIndentWithJavaLangInteger:[JavaLangInteger valueOfWithInt:[JavaLangInteger parseIntWithNSString:rightIndent]]];
  }
  NSString *spacingBefore = [((id<OrgOssPdfreporterXmlParsersIAttributes>) nil_chk(atts)) getValueWithNSString:[OrgOssPdfreporterEngineXmlJRXmlConstants ATTRIBUTE_spacingBefore]];
  if (spacingBefore != nil && [((NSString *) nil_chk(spacingBefore)) length] > 0) {
    [((id<OrgOssPdfreporterEngineJRParagraph>) nil_chk(paragraph)) setSpacingBeforeWithJavaLangInteger:[JavaLangInteger valueOfWithInt:[JavaLangInteger parseIntWithNSString:spacingBefore]]];
  }
  NSString *spacingAfter = [((id<OrgOssPdfreporterXmlParsersIAttributes>) nil_chk(atts)) getValueWithNSString:[OrgOssPdfreporterEngineXmlJRXmlConstants ATTRIBUTE_spacingAfter]];
  if (spacingAfter != nil && [((NSString *) nil_chk(spacingAfter)) length] > 0) {
    [((id<OrgOssPdfreporterEngineJRParagraph>) nil_chk(paragraph)) setSpacingAfterWithJavaLangInteger:[JavaLangInteger valueOfWithInt:[JavaLangInteger parseIntWithNSString:spacingAfter]]];
  }
  NSString *tabStopWidth = [((id<OrgOssPdfreporterXmlParsersIAttributes>) nil_chk(atts)) getValueWithNSString:[OrgOssPdfreporterEngineXmlJRXmlConstants ATTRIBUTE_tabStopWidth]];
  if (tabStopWidth != nil && [((NSString *) nil_chk(tabStopWidth)) length] > 0) {
    [((id<OrgOssPdfreporterEngineJRParagraph>) nil_chk(paragraph)) setTabStopWidthWithJavaLangInteger:[JavaLangInteger valueOfWithInt:[JavaLangInteger parseIntWithNSString:tabStopWidth]]];
  }
}

- (id)init {
  return [super init];
}

@end
