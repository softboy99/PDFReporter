//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: pdfreporter-core/src/org/oss/pdfreporter/engine/xml/JRPrintFontFactory.java
//
//  Created by kendra on 9/27/13.
//

#include "java/lang/Boolean.h"
#include "java/lang/Integer.h"
#include "java/util/Map.h"
#include "org/oss/pdfreporter/engine/JRPrintText.h"
#include "org/oss/pdfreporter/engine/JRRuntimeException.h"
#include "org/oss/pdfreporter/engine/JRStyle.h"
#include "org/oss/pdfreporter/engine/JasperPrint.h"
#include "org/oss/pdfreporter/engine/xml/JRPrintFontFactory.h"
#include "org/oss/pdfreporter/engine/xml/JRPrintXmlLoader.h"
#include "org/oss/pdfreporter/engine/xml/JRXmlConstants.h"
#include "org/oss/pdfreporter/uses/org/apache/digester/IDigester.h"
#include "org/oss/pdfreporter/xml/parsers/IAttributes.h"

@implementation OrgOssPdfreporterEngineXmlJRPrintFontFactory

- (id)createObjectWithOrgOssPdfreporterXmlParsersIAttributes:(id<OrgOssPdfreporterXmlParsersIAttributes>)atts {
  id<OrgOssPdfreporterEngineJRPrintText> element = (id<OrgOssPdfreporterEngineJRPrintText>) [((id<OrgOssPdfreporterUsesOrgApacheDigesterIDigester>) nil_chk(digester_)) peek];
  OrgOssPdfreporterEngineXmlJRPrintXmlLoader *printXmlLoader = (OrgOssPdfreporterEngineXmlJRPrintXmlLoader *) [((id<OrgOssPdfreporterUsesOrgApacheDigesterIDigester>) nil_chk(digester_)) peekWithInt:[((id<OrgOssPdfreporterUsesOrgApacheDigesterIDigester>) nil_chk(digester_)) getCount] - 1];
  OrgOssPdfreporterEngineJasperPrint *jasperPrint = (OrgOssPdfreporterEngineJasperPrint *) [((id<OrgOssPdfreporterUsesOrgApacheDigesterIDigester>) nil_chk(digester_)) peekWithInt:[((id<OrgOssPdfreporterUsesOrgApacheDigesterIDigester>) nil_chk(digester_)) getCount] - 2];
  if ([((id<OrgOssPdfreporterEngineJRPrintText>) nil_chk(element)) getStyle] == nil && [((id<OrgOssPdfreporterEngineJRPrintText>) nil_chk(element)) getStyleNameReference] == nil) {
    NSString *styleName = [((id<OrgOssPdfreporterXmlParsersIAttributes>) nil_chk(atts)) getValueWithNSString:[OrgOssPdfreporterEngineXmlJRXmlConstants ATTRIBUTE_reportFont]];
    if (styleName != nil) {
      id<JavaUtilMap> stylesMap = [((OrgOssPdfreporterEngineJasperPrint *) nil_chk(jasperPrint)) getStylesMap];
      if (![((id<JavaUtilMap>) nil_chk(stylesMap)) containsKeyWithId:styleName]) {
        [((OrgOssPdfreporterEngineXmlJRPrintXmlLoader *) nil_chk(printXmlLoader)) addErrorWithJavaLangException:[[OrgOssPdfreporterEngineJRRuntimeException alloc] initWithNSString:[NSString stringWithFormat:@"Unknown report style : %@", styleName]]];
      }
      [((id<OrgOssPdfreporterEngineJRPrintText>) nil_chk(element)) setStyleWithOrgOssPdfreporterEngineJRStyle:[((id<JavaUtilMap>) nil_chk(stylesMap)) getWithId:styleName]];
    }
  }
  if ([((id<OrgOssPdfreporterXmlParsersIAttributes>) nil_chk(atts)) getValueWithNSString:[OrgOssPdfreporterEngineXmlJRXmlConstants ATTRIBUTE_fontName]] != nil) {
    [((id<OrgOssPdfreporterEngineJRPrintText>) nil_chk(element)) setFontNameWithNSString:[((id<OrgOssPdfreporterXmlParsersIAttributes>) nil_chk(atts)) getValueWithNSString:[OrgOssPdfreporterEngineXmlJRXmlConstants ATTRIBUTE_fontName]]];
  }
  if ([((id<OrgOssPdfreporterXmlParsersIAttributes>) nil_chk(atts)) getValueWithNSString:[OrgOssPdfreporterEngineXmlJRXmlConstants ATTRIBUTE_isBold]] != nil) {
    [((id<OrgOssPdfreporterEngineJRPrintText>) nil_chk(element)) setBoldWithJavaLangBoolean:[JavaLangBoolean valueOfWithNSString:[((id<OrgOssPdfreporterXmlParsersIAttributes>) nil_chk(atts)) getValueWithNSString:[OrgOssPdfreporterEngineXmlJRXmlConstants ATTRIBUTE_isBold]]]];
  }
  if ([((id<OrgOssPdfreporterXmlParsersIAttributes>) nil_chk(atts)) getValueWithNSString:[OrgOssPdfreporterEngineXmlJRXmlConstants ATTRIBUTE_isItalic]] != nil) {
    [((id<OrgOssPdfreporterEngineJRPrintText>) nil_chk(element)) setItalicWithJavaLangBoolean:[JavaLangBoolean valueOfWithNSString:[((id<OrgOssPdfreporterXmlParsersIAttributes>) nil_chk(atts)) getValueWithNSString:[OrgOssPdfreporterEngineXmlJRXmlConstants ATTRIBUTE_isItalic]]]];
  }
  if ([((id<OrgOssPdfreporterXmlParsersIAttributes>) nil_chk(atts)) getValueWithNSString:[OrgOssPdfreporterEngineXmlJRXmlConstants ATTRIBUTE_isUnderline]] != nil) {
    [((id<OrgOssPdfreporterEngineJRPrintText>) nil_chk(element)) setUnderlineWithJavaLangBoolean:[JavaLangBoolean valueOfWithNSString:[((id<OrgOssPdfreporterXmlParsersIAttributes>) nil_chk(atts)) getValueWithNSString:[OrgOssPdfreporterEngineXmlJRXmlConstants ATTRIBUTE_isUnderline]]]];
  }
  if ([((id<OrgOssPdfreporterXmlParsersIAttributes>) nil_chk(atts)) getValueWithNSString:[OrgOssPdfreporterEngineXmlJRXmlConstants ATTRIBUTE_isStrikeThrough]] != nil) {
    [((id<OrgOssPdfreporterEngineJRPrintText>) nil_chk(element)) setStrikeThroughWithJavaLangBoolean:[JavaLangBoolean valueOfWithNSString:[((id<OrgOssPdfreporterXmlParsersIAttributes>) nil_chk(atts)) getValueWithNSString:[OrgOssPdfreporterEngineXmlJRXmlConstants ATTRIBUTE_isStrikeThrough]]]];
  }
  if ([((id<OrgOssPdfreporterXmlParsersIAttributes>) nil_chk(atts)) getValueWithNSString:[OrgOssPdfreporterEngineXmlJRXmlConstants ATTRIBUTE_size]] != nil) {
    [((id<OrgOssPdfreporterEngineJRPrintText>) nil_chk(element)) setFontSizeWithInt:[JavaLangInteger parseIntWithNSString:[((id<OrgOssPdfreporterXmlParsersIAttributes>) nil_chk(atts)) getValueWithNSString:[OrgOssPdfreporterEngineXmlJRXmlConstants ATTRIBUTE_size]]]];
  }
  if ([((id<OrgOssPdfreporterXmlParsersIAttributes>) nil_chk(atts)) getValueWithNSString:[OrgOssPdfreporterEngineXmlJRXmlConstants ATTRIBUTE_pdfFontName]] != nil) {
    [((id<OrgOssPdfreporterEngineJRPrintText>) nil_chk(element)) setPdfFontNameWithNSString:[((id<OrgOssPdfreporterXmlParsersIAttributes>) nil_chk(atts)) getValueWithNSString:[OrgOssPdfreporterEngineXmlJRXmlConstants ATTRIBUTE_pdfFontName]]];
  }
  if ([((id<OrgOssPdfreporterXmlParsersIAttributes>) nil_chk(atts)) getValueWithNSString:[OrgOssPdfreporterEngineXmlJRXmlConstants ATTRIBUTE_pdfEncoding]] != nil) {
    [((id<OrgOssPdfreporterEngineJRPrintText>) nil_chk(element)) setPdfEncodingWithNSString:[((id<OrgOssPdfreporterXmlParsersIAttributes>) nil_chk(atts)) getValueWithNSString:[OrgOssPdfreporterEngineXmlJRXmlConstants ATTRIBUTE_pdfEncoding]]];
  }
  if ([((id<OrgOssPdfreporterXmlParsersIAttributes>) nil_chk(atts)) getValueWithNSString:[OrgOssPdfreporterEngineXmlJRXmlConstants ATTRIBUTE_isPdfEmbedded]] != nil) {
    [((id<OrgOssPdfreporterEngineJRPrintText>) nil_chk(element)) setPdfEmbeddedWithJavaLangBoolean:[JavaLangBoolean valueOfWithNSString:[((id<OrgOssPdfreporterXmlParsersIAttributes>) nil_chk(atts)) getValueWithNSString:[OrgOssPdfreporterEngineXmlJRXmlConstants ATTRIBUTE_isPdfEmbedded]]]];
  }
  return element;
}

- (id)init {
  return [super init];
}

@end
