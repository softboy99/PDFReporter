//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: pdfreporter-core/src/org/oss/pdfreporter/engine/xml/JRXmlLoader.java
//
//  Created by kendra on 9/27/13.
//

#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "java/io/File.h"
#include "java/io/FileInputStream.h"
#include "java/io/IOException.h"
#include "java/io/InputStream.h"
#include "java/lang/Exception.h"
#include "java/util/ArrayList.h"
#include "java/util/HashMap.h"
#include "java/util/HashSet.h"
#include "java/util/Iterator.h"
#include "java/util/LinkedList.h"
#include "java/util/List.h"
#include "java/util/Map.h"
#include "java/util/Set.h"
#include "org/oss/pdfreporter/engine/JRDataset.h"
#include "org/oss/pdfreporter/engine/JRDatasetRun.h"
#include "org/oss/pdfreporter/engine/JRElementDataset.h"
#include "org/oss/pdfreporter/engine/JRException.h"
#include "org/oss/pdfreporter/engine/JRGroup.h"
#include "org/oss/pdfreporter/engine/JRRuntimeException.h"
#include "org/oss/pdfreporter/engine/JRVariable.h"
#include "org/oss/pdfreporter/engine/design/JRDesignDataset.h"
#include "org/oss/pdfreporter/engine/design/JRDesignElement.h"
#include "org/oss/pdfreporter/engine/design/JRDesignElementDataset.h"
#include "org/oss/pdfreporter/engine/design/JRDesignImage.h"
#include "org/oss/pdfreporter/engine/design/JRDesignTextField.h"
#include "org/oss/pdfreporter/engine/design/JRDesignVariable.h"
#include "org/oss/pdfreporter/engine/design/JRValidationException.h"
#include "org/oss/pdfreporter/engine/design/JasperDesign.h"
#include "org/oss/pdfreporter/engine/type/IncrementTypeEnum.h"
#include "org/oss/pdfreporter/engine/type/ResetTypeEnum.h"
#include "org/oss/pdfreporter/engine/util/JRProperties.h"
#include "org/oss/pdfreporter/engine/xml/ElementReprintGroupReference.h"
#include "org/oss/pdfreporter/engine/xml/ImageEvaluationGroupReference.h"
#include "org/oss/pdfreporter/engine/xml/JRXmlDigester.h"
#include "org/oss/pdfreporter/engine/xml/JRXmlDigesterFactory.h"
#include "org/oss/pdfreporter/engine/xml/JRXmlLoader.h"
#include "org/oss/pdfreporter/engine/xml/TextFieldEvaluationGroupReference.h"
#include "org/oss/pdfreporter/engine/xml/XmlGroupReference.h"
#include "org/oss/pdfreporter/engine/xml/XmlLoaderReportContext.h"
#include "org/oss/pdfreporter/extensions/ExtensionsEnvironment.h"
#include "org/oss/pdfreporter/progress/IProgressHandler.h"
#include "org/oss/pdfreporter/progress/ProgressManager.h"
#include "org/oss/pdfreporter/registry/IRegistry.h"
#include "org/oss/pdfreporter/uses/org/apache/digester/IDigester.h"
#include "org/oss/pdfreporter/xml/parsers/IInputSource.h"
#include "org/oss/pdfreporter/xml/parsers/ParserConfigurationException.h"
#include "org/oss/pdfreporter/xml/parsers/XMLParseException.h"
#include "org/oss/pdfreporter/xml/parsers/factory/IXmlParserFactory.h"

@implementation OrgOssPdfreporterEngineXmlJRXmlLoader

@synthesize jasperDesign = jasperDesign_;
@synthesize contextStack = contextStack_;
@synthesize groupReferences = groupReferences_;
@synthesize groupBoundDatasets = groupBoundDatasets_;
@synthesize errors = errors_;
@synthesize digester = digester_;
@synthesize ignoreConsistencyProblems = ignoreConsistencyProblems_;

- (id)initWithOrgOssPdfreporterUsesOrgApacheDigesterIDigester:(id<OrgOssPdfreporterUsesOrgApacheDigesterIDigester>)digester {
  if ((self = [super init])) {
    contextStack_ = [[JavaUtilLinkedList alloc] init];
    groupReferences_ = [[JavaUtilHashMap alloc] init];
    groupBoundDatasets_ = [[JavaUtilHashSet alloc] init];
    errors_ = [[JavaUtilArrayList alloc] init];
    self.digester = digester;
  }
  return self;
}

- (void)setJasperDesignWithOrgOssPdfreporterEngineDesignJasperDesign:(OrgOssPdfreporterEngineDesignJasperDesign *)jasperDesign {
  self.jasperDesign = jasperDesign;
}

- (void)addGroupReferenceWithOrgOssPdfreporterEngineXmlXmlGroupReference:(id<OrgOssPdfreporterEngineXmlXmlGroupReference>)reference {
  OrgOssPdfreporterEngineXmlXmlLoaderReportContext *reportContext = [self getReportContext];
  (void) [((id<JavaUtilMap>) nil_chk(groupReferences_)) putWithId:reference withId:reportContext];
}

- (void)addGroupReprintedElementWithOrgOssPdfreporterEngineDesignJRDesignElement:(OrgOssPdfreporterEngineDesignJRDesignElement *)element {
  [self addGroupReferenceWithOrgOssPdfreporterEngineXmlXmlGroupReference:[[OrgOssPdfreporterEngineXmlElementReprintGroupReference alloc] initWithOrgOssPdfreporterEngineDesignJRDesignElement:element]];
}

- (void)addGroupEvaluatedImageWithOrgOssPdfreporterEngineDesignJRDesignImage:(OrgOssPdfreporterEngineDesignJRDesignImage *)image {
  [self addGroupReferenceWithOrgOssPdfreporterEngineXmlXmlGroupReference:[[OrgOssPdfreporterEngineXmlImageEvaluationGroupReference alloc] initWithOrgOssPdfreporterEngineDesignJRDesignImage:image]];
}

- (void)addGroupEvaluatedTextFieldWithOrgOssPdfreporterEngineDesignJRDesignTextField:(OrgOssPdfreporterEngineDesignJRDesignTextField *)textField {
  [self addGroupReferenceWithOrgOssPdfreporterEngineXmlXmlGroupReference:[[OrgOssPdfreporterEngineXmlTextFieldEvaluationGroupReference alloc] initWithOrgOssPdfreporterEngineDesignJRDesignTextField:textField]];
}

- (id<JavaUtilSet>)getGroupBoundDatasets {
  return groupBoundDatasets_;
}

+ (OrgOssPdfreporterEngineDesignJasperDesign *)load__WithNSString:(NSString *)sourceFileName {
  return [OrgOssPdfreporterEngineXmlJRXmlLoader load__WithJavaIoFile:[[JavaIoFile alloc] initWithNSString:sourceFileName]];
}

+ (OrgOssPdfreporterEngineDesignJasperDesign *)load__WithJavaIoFile:(JavaIoFile *)file {
  OrgOssPdfreporterEngineDesignJasperDesign *jasperDesign = nil;
  JavaIoFileInputStream *fis = nil;
  @try {
    fis = [[JavaIoFileInputStream alloc] initWithJavaIoFile:file];
    jasperDesign = [OrgOssPdfreporterEngineXmlJRXmlLoader load__WithJavaIoInputStream:fis];
  }
  @catch (JavaIoIOException *e) {
    @throw [[OrgOssPdfreporterEngineJRException alloc] initWithJavaLangThrowable:e];
  }
  @finally {
    if (fis != nil) {
      @try {
        [fis close];
      }
      @catch (JavaIoIOException *e) {
      }
    }
  }
  return jasperDesign;
}

+ (OrgOssPdfreporterEngineDesignJasperDesign *)load__WithJavaIoInputStream:(JavaIoInputStream *)is {
  OrgOssPdfreporterProgressProgressManager *pm = [[OrgOssPdfreporterProgressProgressManager alloc] initWithOrgOssPdfreporterProgressIProgressHandler_ProgressStateEnum:[OrgOssPdfreporterProgressIProgressHandler_ProgressStateEnum LOADING]];
  OrgOssPdfreporterEngineDesignJasperDesign *jasperDesign = nil;
  OrgOssPdfreporterEngineXmlJRXmlLoader *xmlLoader = nil;
  [OrgOssPdfreporterEngineUtilJRProperties reload];
  [OrgOssPdfreporterExtensionsExtensionsEnvironment reset];
  @try {
    xmlLoader = [[OrgOssPdfreporterEngineXmlJRXmlLoader alloc] initWithOrgOssPdfreporterUsesOrgApacheDigesterIDigester:[OrgOssPdfreporterEngineXmlJRXmlDigesterFactory createDigester]];
  }
  @catch (OrgOssPdfreporterXmlParsersXMLParseException *e) {
    @throw [[OrgOssPdfreporterEngineJRException alloc] initWithJavaLangThrowable:e];
  }
  jasperDesign = [((OrgOssPdfreporterEngineXmlJRXmlLoader *) nil_chk(xmlLoader)) loadXMLWithJavaIoInputStream:is];
  [((OrgOssPdfreporterProgressProgressManager *) nil_chk(pm)) done];
  return jasperDesign;
}

- (OrgOssPdfreporterEngineDesignJasperDesign *)loadXMLWithJavaIoInputStream:(JavaIoInputStream *)is {
  return [self loadXMLWithOrgOssPdfreporterXmlParsersIInputSource:[((id<OrgOssPdfreporterXmlParsersFactoryIXmlParserFactory>) nil_chk([OrgOssPdfreporterRegistryIRegistry getIXmlParserFactory])) newInputSourceWithJavaIoInputStream:is]];
}

- (OrgOssPdfreporterEngineDesignJasperDesign *)loadXMLWithOrgOssPdfreporterXmlParsersIInputSource:(id<OrgOssPdfreporterXmlParsersIInputSource>)is {
  @try {
    [((id<OrgOssPdfreporterUsesOrgApacheDigesterIDigester>) nil_chk(digester_)) pushWithId:self];
    (void) [((id<OrgOssPdfreporterUsesOrgApacheDigesterIDigester>) nil_chk(digester_)) parseWithOrgOssPdfreporterXmlParsersIInputSource:is];
  }
  @catch (OrgOssPdfreporterXmlParsersXMLParseException *e) {
    @throw [[OrgOssPdfreporterEngineJRException alloc] initWithJavaLangThrowable:e];
  }
  @catch (JavaIoIOException *e) {
    @throw [[OrgOssPdfreporterEngineJRException alloc] initWithJavaLangThrowable:e];
  }
  @catch (OrgOssPdfreporterXmlParsersParserConfigurationException *e) {
    @throw [[OrgOssPdfreporterEngineJRException alloc] initWithJavaLangThrowable:e];
  }
  @finally {
    [((id<OrgOssPdfreporterUsesOrgApacheDigesterIDigester>) nil_chk(digester_)) clear];
  }
  if ([((id<JavaUtilList>) nil_chk(errors_)) size] > 0) {
    JavaLangException *e = [((id<JavaUtilList>) nil_chk(errors_)) getWithInt:0];
    if ([e isKindOfClass:[OrgOssPdfreporterEngineJRException class]]) {
      @throw (OrgOssPdfreporterEngineJRException *) e;
    }
    @throw [[OrgOssPdfreporterEngineJRException alloc] initWithJavaLangThrowable:e];
  }
  [self assignGroupsToVariablesWithOrgOssPdfreporterEngineDesignJRDesignDataset:[((OrgOssPdfreporterEngineDesignJasperDesign *) nil_chk(jasperDesign_)) getMainDesignDataset]];
  for (id<JavaUtilIterator> it = [((id<JavaUtilList>) nil_chk([((OrgOssPdfreporterEngineDesignJasperDesign *) nil_chk(jasperDesign_)) getDatasetsList])) iterator]; [((id<JavaUtilIterator>) nil_chk(it)) hasNext]; ) {
    OrgOssPdfreporterEngineDesignJRDesignDataset *dataset = (OrgOssPdfreporterEngineDesignJRDesignDataset *) [((id<JavaUtilIterator>) nil_chk(it)) next];
    [self assignGroupsToVariablesWithOrgOssPdfreporterEngineDesignJRDesignDataset:dataset];
  }
  [self assignGroupReferences];
  [self assignGroupsToDatasets];
  return self.jasperDesign;
}

- (void)assignGroupsToVariablesWithOrgOssPdfreporterEngineDesignJRDesignDataset:(OrgOssPdfreporterEngineDesignJRDesignDataset *)dataset {
  IOSObjectArray *variables = [((OrgOssPdfreporterEngineDesignJRDesignDataset *) nil_chk(dataset)) getVariables];
  if (variables != nil && (int) [((IOSObjectArray *) nil_chk(variables)) count] > 0) {
    id<JavaUtilMap> groupsMap = [((OrgOssPdfreporterEngineDesignJRDesignDataset *) nil_chk(dataset)) getGroupsMap];
    for (int i = 0; i < (int) [((IOSObjectArray *) nil_chk(variables)) count]; i++) {
      OrgOssPdfreporterEngineDesignJRDesignVariable *variable = (OrgOssPdfreporterEngineDesignJRDesignVariable *) [((IOSObjectArray *) nil_chk(variables)) objectAtIndex:i];
      if ([((OrgOssPdfreporterEngineDesignJRDesignVariable *) nil_chk(variable)) getResetTypeValue] == [OrgOssPdfreporterEngineTypeResetTypeEnumEnum GROUP]) {
        NSString *groupName = nil;
        id<OrgOssPdfreporterEngineJRGroup> group = [((OrgOssPdfreporterEngineDesignJRDesignVariable *) nil_chk(variable)) getResetGroup];
        if (group != nil) {
          groupName = [group getName];
          group = [((id<JavaUtilMap>) nil_chk(groupsMap)) getWithId:groupName];
        }
        if (!ignoreConsistencyProblems_ && group == nil) {
          @throw [[OrgOssPdfreporterEngineDesignJRValidationException alloc] initWithNSString:[NSString stringWithFormat:@"Unknown reset group '%@' for variable : %@", groupName, [((OrgOssPdfreporterEngineDesignJRDesignVariable *) nil_chk(variable)) getName]] withId:variable];
        }
        [((OrgOssPdfreporterEngineDesignJRDesignVariable *) nil_chk(variable)) setResetGroupWithOrgOssPdfreporterEngineJRGroup:group];
      }
      else {
        [((OrgOssPdfreporterEngineDesignJRDesignVariable *) nil_chk(variable)) setResetGroupWithOrgOssPdfreporterEngineJRGroup:nil];
      }
      if ([((OrgOssPdfreporterEngineDesignJRDesignVariable *) nil_chk(variable)) getIncrementTypeValue] == [OrgOssPdfreporterEngineTypeIncrementTypeEnumEnum GROUP]) {
        NSString *groupName = nil;
        id<OrgOssPdfreporterEngineJRGroup> group = [((OrgOssPdfreporterEngineDesignJRDesignVariable *) nil_chk(variable)) getIncrementGroup];
        if (group != nil) {
          groupName = [group getName];
          group = [((id<JavaUtilMap>) nil_chk(groupsMap)) getWithId:groupName];
        }
        if (!ignoreConsistencyProblems_ && group == nil) {
          @throw [[OrgOssPdfreporterEngineDesignJRValidationException alloc] initWithNSString:[NSString stringWithFormat:@"Unknown increment group '%@' for variable : %@", groupName, [((OrgOssPdfreporterEngineDesignJRDesignVariable *) nil_chk(variable)) getName]] withId:variable];
        }
        [((OrgOssPdfreporterEngineDesignJRDesignVariable *) nil_chk(variable)) setIncrementGroupWithOrgOssPdfreporterEngineJRGroup:group];
      }
      else {
        [((OrgOssPdfreporterEngineDesignJRDesignVariable *) nil_chk(variable)) setIncrementGroupWithOrgOssPdfreporterEngineJRGroup:nil];
      }
    }
  }
}

- (void)assignGroupReferences {
  {
    id<JavaUtilIterator> iter__ = [((id<JavaUtilSet>) nil_chk([((id<JavaUtilMap>) nil_chk(groupReferences_)) entrySet])) iterator];
    while ([((id<JavaUtilIterator>) nil_chk(iter__)) hasNext]) {
      id<JavaUtilMap_Entry> entry = [((id<JavaUtilIterator>) nil_chk(iter__)) next];
      id<OrgOssPdfreporterEngineXmlXmlGroupReference> reference = [((id<JavaUtilMap_Entry>) nil_chk(entry)) getKey];
      OrgOssPdfreporterEngineXmlXmlLoaderReportContext *context = [((id<JavaUtilMap_Entry>) nil_chk(entry)) getValue];
      NSString *groupName = nil;
      id<OrgOssPdfreporterEngineJRGroup> group = [((id<OrgOssPdfreporterEngineXmlXmlGroupReference>) nil_chk(reference)) getGroupReference];
      if (group != nil) {
        groupName = [group getName];
        group = [self resolveGroupWithNSString:groupName withOrgOssPdfreporterEngineXmlXmlLoaderReportContext:context];
      }
      if (!ignoreConsistencyProblems_ && group == nil) {
        [((id<OrgOssPdfreporterEngineXmlXmlGroupReference>) nil_chk(reference)) groupNotFoundWithNSString:groupName];
      }
      else {
        [((id<OrgOssPdfreporterEngineXmlXmlGroupReference>) nil_chk(reference)) assignGroupWithOrgOssPdfreporterEngineJRGroup:group];
      }
    }
  }
}

- (id<OrgOssPdfreporterEngineJRGroup>)resolveGroupWithNSString:(NSString *)groupName
          withOrgOssPdfreporterEngineXmlXmlLoaderReportContext:(OrgOssPdfreporterEngineXmlXmlLoaderReportContext *)context {
  id<OrgOssPdfreporterEngineJRGroup> group;
  if (context == nil) {
    id<JavaUtilMap> groupsMap = [((OrgOssPdfreporterEngineDesignJasperDesign *) nil_chk(jasperDesign_)) getGroupsMap];
    group = [((id<JavaUtilMap>) nil_chk(groupsMap)) getWithId:groupName];
  }
  else {
    NSString *datasetName = [context getSubdatesetName];
    OrgOssPdfreporterEngineDesignJRDesignDataset *dataset = (OrgOssPdfreporterEngineDesignJRDesignDataset *) [((id<JavaUtilMap>) nil_chk([((OrgOssPdfreporterEngineDesignJasperDesign *) nil_chk(jasperDesign_)) getDatasetMap])) getWithId:datasetName];
    if (dataset == nil) {
      @throw [[OrgOssPdfreporterEngineJRRuntimeException alloc] initWithNSString:[NSString stringWithFormat:@"Could not find subdataset of name \"%@\"", datasetName]];
    }
    group = [((id<JavaUtilMap>) nil_chk([((OrgOssPdfreporterEngineDesignJRDesignDataset *) nil_chk(dataset)) getGroupsMap])) getWithId:groupName];
  }
  return group;
}

- (void)assignGroupsToDatasets {
  for (id<JavaUtilIterator> it = [((id<JavaUtilSet>) nil_chk(groupBoundDatasets_)) iterator]; [((id<JavaUtilIterator>) nil_chk(it)) hasNext]; ) {
    OrgOssPdfreporterEngineDesignJRDesignElementDataset *dataset = (OrgOssPdfreporterEngineDesignJRDesignElementDataset *) [((id<JavaUtilIterator>) nil_chk(it)) next];
    id<OrgOssPdfreporterEngineJRDatasetRun> datasetRun = [((OrgOssPdfreporterEngineDesignJRDesignElementDataset *) nil_chk(dataset)) getDatasetRun];
    id<JavaUtilMap> groupsMap;
    if (datasetRun == nil) {
      groupsMap = [((OrgOssPdfreporterEngineDesignJasperDesign *) nil_chk(jasperDesign_)) getGroupsMap];
    }
    else {
      id<JavaUtilMap> datasetMap = [((OrgOssPdfreporterEngineDesignJasperDesign *) nil_chk(jasperDesign_)) getDatasetMap];
      NSString *datasetName = [datasetRun getDatasetName];
      OrgOssPdfreporterEngineDesignJRDesignDataset *subDataset = (OrgOssPdfreporterEngineDesignJRDesignDataset *) [((id<JavaUtilMap>) nil_chk(datasetMap)) getWithId:datasetName];
      if (subDataset == nil) {
        @throw [[OrgOssPdfreporterEngineJRException alloc] initWithNSString:[NSString stringWithFormat:@"Unknown sub dataset '%@' for chart dataset.", datasetName]];
      }
      groupsMap = [((OrgOssPdfreporterEngineDesignJRDesignDataset *) nil_chk(subDataset)) getGroupsMap];
    }
    if ([((OrgOssPdfreporterEngineDesignJRDesignElementDataset *) nil_chk(dataset)) getIncrementTypeValue] == [OrgOssPdfreporterEngineTypeIncrementTypeEnumEnum GROUP]) {
      NSString *groupName = nil;
      id<OrgOssPdfreporterEngineJRGroup> group = [((OrgOssPdfreporterEngineDesignJRDesignElementDataset *) nil_chk(dataset)) getIncrementGroup];
      if (group != nil) {
        groupName = [group getName];
        group = [((id<JavaUtilMap>) nil_chk(groupsMap)) getWithId:[group getName]];
      }
      if (!ignoreConsistencyProblems_ && group == nil) {
        @throw [[OrgOssPdfreporterEngineDesignJRValidationException alloc] initWithNSString:[NSString stringWithFormat:@"Unknown increment group '%@' for chart dataset.", groupName] withId:dataset];
      }
      [((OrgOssPdfreporterEngineDesignJRDesignElementDataset *) nil_chk(dataset)) setIncrementGroupWithOrgOssPdfreporterEngineJRGroup:group];
    }
    else {
      [((OrgOssPdfreporterEngineDesignJRDesignElementDataset *) nil_chk(dataset)) setIncrementGroupWithOrgOssPdfreporterEngineJRGroup:nil];
    }
    if ([((OrgOssPdfreporterEngineDesignJRDesignElementDataset *) nil_chk(dataset)) getResetTypeValue] == [OrgOssPdfreporterEngineTypeResetTypeEnumEnum GROUP]) {
      NSString *groupName = nil;
      id<OrgOssPdfreporterEngineJRGroup> group = [((OrgOssPdfreporterEngineDesignJRDesignElementDataset *) nil_chk(dataset)) getResetGroup];
      if (group != nil) {
        groupName = [group getName];
        group = [((id<JavaUtilMap>) nil_chk(groupsMap)) getWithId:[group getName]];
      }
      if (!ignoreConsistencyProblems_ && group == nil) {
        @throw [[OrgOssPdfreporterEngineDesignJRValidationException alloc] initWithNSString:[NSString stringWithFormat:@"Unknown reset group '%@' for chart dataset.", groupName] withId:dataset];
      }
      [((OrgOssPdfreporterEngineDesignJRDesignElementDataset *) nil_chk(dataset)) setResetGroupWithOrgOssPdfreporterEngineJRGroup:group];
    }
    else {
      [((OrgOssPdfreporterEngineDesignJRDesignElementDataset *) nil_chk(dataset)) setResetGroupWithOrgOssPdfreporterEngineJRGroup:nil];
    }
  }
}

- (void)addErrorWithJavaLangException:(JavaLangException *)e {
  if (!ignoreConsistencyProblems_) {
    [((id<JavaUtilList>) nil_chk(self.errors)) addWithId:e];
  }
}

- (BOOL)isIgnoreConsistencyProblems {
  return ignoreConsistencyProblems_;
}

- (void)setIgnoreConsistencyProblemsWithBOOL:(BOOL)ignoreConsistencyProblems {
  self.ignoreConsistencyProblems = ignoreConsistencyProblems;
}

- (void)pushReportContextWithOrgOssPdfreporterEngineXmlXmlLoaderReportContext:(OrgOssPdfreporterEngineXmlXmlLoaderReportContext *)context {
  [((JavaUtilLinkedList *) nil_chk(contextStack_)) addFirstWithId:context];
}

- (OrgOssPdfreporterEngineXmlXmlLoaderReportContext *)popReportContext {
  return [((JavaUtilLinkedList *) nil_chk(contextStack_)) removeFirst];
}

- (OrgOssPdfreporterEngineXmlXmlLoaderReportContext *)getReportContext {
  return [((JavaUtilLinkedList *) nil_chk(contextStack_)) isEmpty] ? nil : [((JavaUtilLinkedList *) nil_chk(contextStack_)) getFirst];
}

- (void)copyAllPropertiesTo:(id)copy {
  [super copyAllPropertiesTo:copy];
  OrgOssPdfreporterEngineXmlJRXmlLoader *typedCopy = (OrgOssPdfreporterEngineXmlJRXmlLoader *) copy;
  typedCopy.jasperDesign = jasperDesign_;
  typedCopy.contextStack = contextStack_;
  typedCopy.groupReferences = groupReferences_;
  typedCopy.groupBoundDatasets = groupBoundDatasets_;
  typedCopy.errors = errors_;
  typedCopy.digester = digester_;
  typedCopy.ignoreConsistencyProblems = ignoreConsistencyProblems_;
}

@end
