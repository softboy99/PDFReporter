//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: pdfreporter-core/src/org/oss/pdfreporter/engine/xml/JRPrintTextFactory.java
//
//  Created by kendra on 9/27/13.
//

#include "java/lang/Boolean.h"
#include "java/lang/Float.h"
#include "java/lang/Integer.h"
#include "org/oss/pdfreporter/engine/JRCommonText.h"
#include "org/oss/pdfreporter/engine/JRDefaultStyleProvider.h"
#include "org/oss/pdfreporter/engine/JRParagraph.h"
#include "org/oss/pdfreporter/engine/JasperPrint.h"
#include "org/oss/pdfreporter/engine/base/JRBasePrintText.h"
#include "org/oss/pdfreporter/engine/type/HorizontalAlignEnum.h"
#include "org/oss/pdfreporter/engine/type/LineSpacingEnum.h"
#include "org/oss/pdfreporter/engine/type/RotationEnum.h"
#include "org/oss/pdfreporter/engine/type/RunDirectionEnum.h"
#include "org/oss/pdfreporter/engine/type/VerticalAlignEnum.h"
#include "org/oss/pdfreporter/engine/xml/JRPrintTextFactory.h"
#include "org/oss/pdfreporter/engine/xml/JRXmlConstants.h"
#include "org/oss/pdfreporter/uses/org/apache/digester/IDigester.h"
#include "org/oss/pdfreporter/xml/parsers/IAttributes.h"

@implementation OrgOssPdfreporterEngineXmlJRPrintTextFactory

- (id)createObjectWithOrgOssPdfreporterXmlParsersIAttributes:(id<OrgOssPdfreporterXmlParsersIAttributes>)atts {
  OrgOssPdfreporterEngineJasperPrint *jasperPrint = (OrgOssPdfreporterEngineJasperPrint *) [((id<OrgOssPdfreporterUsesOrgApacheDigesterIDigester>) nil_chk(digester_)) peekWithInt:[((id<OrgOssPdfreporterUsesOrgApacheDigesterIDigester>) nil_chk(digester_)) getCount] - 2];
  OrgOssPdfreporterEngineBaseJRBasePrintText *text = [[OrgOssPdfreporterEngineBaseJRBasePrintText alloc] initWithOrgOssPdfreporterEngineJRDefaultStyleProvider:[((OrgOssPdfreporterEngineJasperPrint *) nil_chk(jasperPrint)) getDefaultStyleProvider]];
  OrgOssPdfreporterEngineTypeHorizontalAlignEnumEnum *horizontalAlignment = [OrgOssPdfreporterEngineTypeHorizontalAlignEnumEnum getByNameWithNSString:[((id<OrgOssPdfreporterXmlParsersIAttributes>) nil_chk(atts)) getValueWithNSString:[OrgOssPdfreporterEngineXmlJRXmlConstants ATTRIBUTE_textAlignment]]];
  if (horizontalAlignment != nil) {
    [((OrgOssPdfreporterEngineBaseJRBasePrintText *) nil_chk(text)) setHorizontalAlignmentWithOrgOssPdfreporterEngineTypeHorizontalAlignEnumEnum:horizontalAlignment];
  }
  OrgOssPdfreporterEngineTypeVerticalAlignEnumEnum *verticalAlignment = [OrgOssPdfreporterEngineTypeVerticalAlignEnumEnum getByNameWithNSString:[((id<OrgOssPdfreporterXmlParsersIAttributes>) nil_chk(atts)) getValueWithNSString:[OrgOssPdfreporterEngineXmlJRXmlConstants ATTRIBUTE_verticalAlignment]]];
  if (verticalAlignment != nil) {
    [((OrgOssPdfreporterEngineBaseJRBasePrintText *) nil_chk(text)) setVerticalAlignmentWithOrgOssPdfreporterEngineTypeVerticalAlignEnumEnum:verticalAlignment];
  }
  OrgOssPdfreporterEngineTypeRotationEnumEnum *rotation = [OrgOssPdfreporterEngineTypeRotationEnumEnum getByNameWithNSString:[((id<OrgOssPdfreporterXmlParsersIAttributes>) nil_chk(atts)) getValueWithNSString:[OrgOssPdfreporterEngineXmlJRXmlConstants ATTRIBUTE_rotation]]];
  if (rotation != nil) {
    [((OrgOssPdfreporterEngineBaseJRBasePrintText *) nil_chk(text)) setRotationWithOrgOssPdfreporterEngineTypeRotationEnumEnum:rotation];
  }
  OrgOssPdfreporterEngineTypeRunDirectionEnumEnum *runDirection = [OrgOssPdfreporterEngineTypeRunDirectionEnumEnum getByNameWithNSString:[((id<OrgOssPdfreporterXmlParsersIAttributes>) nil_chk(atts)) getValueWithNSString:[OrgOssPdfreporterEngineXmlJRXmlConstants ATTRIBUTE_runDirection]]];
  if (runDirection != nil) {
    [((OrgOssPdfreporterEngineBaseJRBasePrintText *) nil_chk(text)) setRunDirectionWithOrgOssPdfreporterEngineTypeRunDirectionEnumEnum:runDirection];
  }
  NSString *textHeight = [((id<OrgOssPdfreporterXmlParsersIAttributes>) nil_chk(atts)) getValueWithNSString:[OrgOssPdfreporterEngineXmlJRXmlConstants ATTRIBUTE_textHeight]];
  if (textHeight != nil && [((NSString *) nil_chk(textHeight)) length] > 0) {
    [((OrgOssPdfreporterEngineBaseJRBasePrintText *) nil_chk(text)) setTextHeightWithFloat:[JavaLangFloat parseFloatWithNSString:textHeight]];
  }
  OrgOssPdfreporterEngineTypeLineSpacingEnumEnum *lineSpacing = [OrgOssPdfreporterEngineTypeLineSpacingEnumEnum getByNameWithNSString:[((id<OrgOssPdfreporterXmlParsersIAttributes>) nil_chk(atts)) getValueWithNSString:[OrgOssPdfreporterEngineXmlJRXmlConstants ATTRIBUTE_lineSpacing]]];
  if (lineSpacing != nil) {
    [((id<OrgOssPdfreporterEngineJRParagraph>) nil_chk([((OrgOssPdfreporterEngineBaseJRBasePrintText *) nil_chk(text)) getParagraph])) setLineSpacingWithOrgOssPdfreporterEngineTypeLineSpacingEnumEnum:lineSpacing];
  }
  [((OrgOssPdfreporterEngineBaseJRBasePrintText *) nil_chk(text)) setMarkupWithNSString:[((id<OrgOssPdfreporterXmlParsersIAttributes>) nil_chk(atts)) getValueWithNSString:[OrgOssPdfreporterEngineXmlJRXmlConstants ATTRIBUTE_markup]]];
  NSString *isStyledText = [((id<OrgOssPdfreporterXmlParsersIAttributes>) nil_chk(atts)) getValueWithNSString:[OrgOssPdfreporterEngineXmlJRXmlConstants ATTRIBUTE_isStyledText]];
  if (isStyledText != nil && [((NSString *) nil_chk(isStyledText)) length] > 0) {
    [((OrgOssPdfreporterEngineBaseJRBasePrintText *) nil_chk(text)) setMarkupWithNSString:[JavaLangBoolean valueOfWithNSString:isStyledText] ? [OrgOssPdfreporterEngineJRCommonText MARKUP_STYLED_TEXT] : [OrgOssPdfreporterEngineJRCommonText MARKUP_NONE]];
  }
  NSString *lineSpacingFactor = [((id<OrgOssPdfreporterXmlParsersIAttributes>) nil_chk(atts)) getValueWithNSString:[OrgOssPdfreporterEngineXmlJRXmlConstants ATTRIBUTE_lineSpacingFactor]];
  if (lineSpacingFactor != nil && [((NSString *) nil_chk(lineSpacingFactor)) length] > 0) {
    [((OrgOssPdfreporterEngineBaseJRBasePrintText *) nil_chk(text)) setLineSpacingFactorWithFloat:[JavaLangFloat parseFloatWithNSString:lineSpacingFactor]];
  }
  NSString *leadingOffset = [((id<OrgOssPdfreporterXmlParsersIAttributes>) nil_chk(atts)) getValueWithNSString:[OrgOssPdfreporterEngineXmlJRXmlConstants ATTRIBUTE_leadingOffset]];
  if (leadingOffset != nil && [((NSString *) nil_chk(leadingOffset)) length] > 0) {
    [((OrgOssPdfreporterEngineBaseJRBasePrintText *) nil_chk(text)) setLeadingOffsetWithFloat:[JavaLangFloat parseFloatWithNSString:leadingOffset]];
  }
  [((OrgOssPdfreporterEngineBaseJRBasePrintText *) nil_chk(text)) setLinkTypeWithNSString:[((id<OrgOssPdfreporterXmlParsersIAttributes>) nil_chk(atts)) getValueWithNSString:[OrgOssPdfreporterEngineXmlJRXmlConstants ATTRIBUTE_hyperlinkType]]];
  [((OrgOssPdfreporterEngineBaseJRBasePrintText *) nil_chk(text)) setLinkTargetWithNSString:[((id<OrgOssPdfreporterXmlParsersIAttributes>) nil_chk(atts)) getValueWithNSString:[OrgOssPdfreporterEngineXmlJRXmlConstants ATTRIBUTE_hyperlinkTarget]]];
  [((OrgOssPdfreporterEngineBaseJRBasePrintText *) nil_chk(text)) setAnchorNameWithNSString:[((id<OrgOssPdfreporterXmlParsersIAttributes>) nil_chk(atts)) getValueWithNSString:[OrgOssPdfreporterEngineXmlJRXmlConstants ATTRIBUTE_anchorName]]];
  [((OrgOssPdfreporterEngineBaseJRBasePrintText *) nil_chk(text)) setHyperlinkReferenceWithNSString:[((id<OrgOssPdfreporterXmlParsersIAttributes>) nil_chk(atts)) getValueWithNSString:[OrgOssPdfreporterEngineXmlJRXmlConstants ATTRIBUTE_hyperlinkReference]]];
  [((OrgOssPdfreporterEngineBaseJRBasePrintText *) nil_chk(text)) setHyperlinkAnchorWithNSString:[((id<OrgOssPdfreporterXmlParsersIAttributes>) nil_chk(atts)) getValueWithNSString:[OrgOssPdfreporterEngineXmlJRXmlConstants ATTRIBUTE_hyperlinkAnchor]]];
  NSString *hyperlinkPage = [((id<OrgOssPdfreporterXmlParsersIAttributes>) nil_chk(atts)) getValueWithNSString:[OrgOssPdfreporterEngineXmlJRXmlConstants ATTRIBUTE_hyperlinkPage]];
  if (hyperlinkPage != nil) {
    [((OrgOssPdfreporterEngineBaseJRBasePrintText *) nil_chk(text)) setHyperlinkPageWithJavaLangInteger:[JavaLangInteger valueOfWithNSString:hyperlinkPage]];
  }
  [((OrgOssPdfreporterEngineBaseJRBasePrintText *) nil_chk(text)) setHyperlinkTooltipWithNSString:[((id<OrgOssPdfreporterXmlParsersIAttributes>) nil_chk(atts)) getValueWithNSString:[OrgOssPdfreporterEngineXmlJRXmlConstants ATTRIBUTE_hyperlinkTooltip]]];
  NSString *bookmarkLevelAttr = [((id<OrgOssPdfreporterXmlParsersIAttributes>) nil_chk(atts)) getValueWithNSString:[OrgOssPdfreporterEngineXmlJRXmlConstants ATTRIBUTE_bookmarkLevel]];
  if (bookmarkLevelAttr != nil) {
    [((OrgOssPdfreporterEngineBaseJRBasePrintText *) nil_chk(text)) setBookmarkLevelWithInt:[JavaLangInteger parseIntWithNSString:bookmarkLevelAttr]];
  }
  NSString *valueClass = [((id<OrgOssPdfreporterXmlParsersIAttributes>) nil_chk(atts)) getValueWithNSString:[OrgOssPdfreporterEngineXmlJRXmlConstants ATTRIBUTE_valueClass]];
  if (valueClass != nil) {
    [((OrgOssPdfreporterEngineBaseJRBasePrintText *) nil_chk(text)) setValueClassNameWithNSString:valueClass];
  }
  NSString *pattern = [((id<OrgOssPdfreporterXmlParsersIAttributes>) nil_chk(atts)) getValueWithNSString:[OrgOssPdfreporterEngineXmlJRXmlConstants ATTRIBUTE_pattern]];
  if (pattern != nil) {
    [((OrgOssPdfreporterEngineBaseJRBasePrintText *) nil_chk(text)) setPatternWithNSString:pattern];
  }
  NSString *formatFactoryClass = [((id<OrgOssPdfreporterXmlParsersIAttributes>) nil_chk(atts)) getValueWithNSString:[OrgOssPdfreporterEngineXmlJRXmlConstants ATTRIBUTE_formatFactoryClass]];
  if (formatFactoryClass != nil) {
    [((OrgOssPdfreporterEngineBaseJRBasePrintText *) nil_chk(text)) setFormatFactoryClassWithNSString:formatFactoryClass];
  }
  NSString *locale = [((id<OrgOssPdfreporterXmlParsersIAttributes>) nil_chk(atts)) getValueWithNSString:[OrgOssPdfreporterEngineXmlJRXmlConstants ATTRIBUTE_locale]];
  if (locale != nil) {
    [((OrgOssPdfreporterEngineBaseJRBasePrintText *) nil_chk(text)) setLocaleCodeWithNSString:locale];
  }
  NSString *timezone = [((id<OrgOssPdfreporterXmlParsersIAttributes>) nil_chk(atts)) getValueWithNSString:[OrgOssPdfreporterEngineXmlJRXmlConstants ATTRIBUTE_timezone]];
  if (timezone != nil) {
    [((OrgOssPdfreporterEngineBaseJRBasePrintText *) nil_chk(text)) setTimeZoneIdWithNSString:timezone];
  }
  return text;
}

- (id)init {
  return [super init];
}

@end
