//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: pdfreporter-core/src/org/oss/pdfreporter/engine/xml/JRAbstractStyleFactory.java
//
//  Created by kendra on 9/27/13.
//

#include "IOSClass.h"
#include "java/lang/Boolean.h"
#include "java/lang/Integer.h"
#include "org/oss/pdfreporter/engine/JRCommonText.h"
#include "org/oss/pdfreporter/engine/JRLineBox.h"
#include "org/oss/pdfreporter/engine/JRParagraph.h"
#include "org/oss/pdfreporter/engine/JRPen.h"
#include "org/oss/pdfreporter/engine/JRStyle.h"
#include "org/oss/pdfreporter/engine/base/JRBoxPen.h"
#include "org/oss/pdfreporter/engine/design/JRDesignStyle.h"
#include "org/oss/pdfreporter/engine/type/FillEnum.h"
#include "org/oss/pdfreporter/engine/type/HorizontalAlignEnum.h"
#include "org/oss/pdfreporter/engine/type/LineSpacingEnum.h"
#include "org/oss/pdfreporter/engine/type/ModeEnum.h"
#include "org/oss/pdfreporter/engine/type/PenEnum.h"
#include "org/oss/pdfreporter/engine/type/RotationEnum.h"
#include "org/oss/pdfreporter/engine/type/ScaleImageEnum.h"
#include "org/oss/pdfreporter/engine/type/VerticalAlignEnum.h"
#include "org/oss/pdfreporter/engine/util/JRColorUtil.h"
#include "org/oss/pdfreporter/engine/util/JRPenUtil.h"
#include "org/oss/pdfreporter/engine/xml/JRAbstractStyleFactory.h"
#include "org/oss/pdfreporter/engine/xml/JRXmlConstants.h"
#include "org/oss/pdfreporter/geometry/IColor.h"
#include "org/oss/pdfreporter/xml/parsers/IAttributes.h"

@implementation OrgOssPdfreporterEngineXmlJRAbstractStyleFactory

- (id)createObjectWithOrgOssPdfreporterXmlParsersIAttributes:(id<OrgOssPdfreporterXmlParsersIAttributes>)atts {
  OrgOssPdfreporterEngineDesignJRDesignStyle *style = [[OrgOssPdfreporterEngineDesignJRDesignStyle alloc] init];
  [((OrgOssPdfreporterEngineDesignJRDesignStyle *) nil_chk(style)) setNameWithNSString:[((id<OrgOssPdfreporterXmlParsersIAttributes>) nil_chk(atts)) getValueWithNSString:[OrgOssPdfreporterEngineXmlJRXmlConstants ATTRIBUTE_name]]];
  NSString *isDefault = [((id<OrgOssPdfreporterXmlParsersIAttributes>) nil_chk(atts)) getValueWithNSString:[OrgOssPdfreporterEngineXmlJRXmlConstants ATTRIBUTE_isDefault]];
  if (isDefault != nil && [((NSString *) nil_chk(isDefault)) length] > 0) {
    [((OrgOssPdfreporterEngineDesignJRDesignStyle *) nil_chk(style)) setDefaultWithBOOL:[[JavaLangBoolean valueOfWithNSString:isDefault] booleanValue]];
  }
  if ([((id<OrgOssPdfreporterXmlParsersIAttributes>) nil_chk(atts)) getValueWithNSString:[OrgOssPdfreporterEngineXmlJRXmlConstants ATTRIBUTE_style]] != nil) {
    [self setParentStyleWithOrgOssPdfreporterEngineDesignJRDesignStyle:style withNSString:[((id<OrgOssPdfreporterXmlParsersIAttributes>) nil_chk(atts)) getValueWithNSString:[OrgOssPdfreporterEngineXmlJRXmlConstants ATTRIBUTE_style]]];
  }
  [self setCommonStyleWithOrgOssPdfreporterEngineJRStyle:style withOrgOssPdfreporterXmlParsersIAttributes:atts];
  return style;
}

- (void)setCommonStyleWithOrgOssPdfreporterEngineJRStyle:(id<OrgOssPdfreporterEngineJRStyle>)style
              withOrgOssPdfreporterXmlParsersIAttributes:(id<OrgOssPdfreporterXmlParsersIAttributes>)atts {
  OrgOssPdfreporterEngineTypeModeEnumEnum *mode = [OrgOssPdfreporterEngineTypeModeEnumEnum getByNameWithNSString:[((id<OrgOssPdfreporterXmlParsersIAttributes>) nil_chk(atts)) getValueWithNSString:[OrgOssPdfreporterEngineXmlJRXmlConstants ATTRIBUTE_mode]]];
  if (mode != nil) {
    [((id<OrgOssPdfreporterEngineJRStyle>) nil_chk(style)) setModeWithOrgOssPdfreporterEngineTypeModeEnumEnum:mode];
  }
  NSString *forecolor = [((id<OrgOssPdfreporterXmlParsersIAttributes>) nil_chk(atts)) getValueWithNSString:[OrgOssPdfreporterEngineXmlJRXmlConstants ATTRIBUTE_forecolor]];
  [((id<OrgOssPdfreporterEngineJRStyle>) nil_chk(style)) setForecolorWithOrgOssPdfreporterGeometryIColor:[OrgOssPdfreporterEngineUtilJRColorUtil getColorWithNSString:forecolor withOrgOssPdfreporterGeometryIColor:nil]];
  NSString *backcolor = [((id<OrgOssPdfreporterXmlParsersIAttributes>) nil_chk(atts)) getValueWithNSString:[OrgOssPdfreporterEngineXmlJRXmlConstants ATTRIBUTE_backcolor]];
  [((id<OrgOssPdfreporterEngineJRStyle>) nil_chk(style)) setBackcolorWithOrgOssPdfreporterGeometryIColor:[OrgOssPdfreporterEngineUtilJRColorUtil getColorWithNSString:backcolor withOrgOssPdfreporterGeometryIColor:nil]];
  OrgOssPdfreporterEngineTypePenEnumEnum *pen = [OrgOssPdfreporterEngineTypePenEnumEnum getByNameWithNSString:[((id<OrgOssPdfreporterXmlParsersIAttributes>) nil_chk(atts)) getValueWithNSString:[OrgOssPdfreporterEngineXmlJRXmlConstants ATTRIBUTE_pen]]];
  if (pen != nil) {
    [OrgOssPdfreporterEngineUtilJRPenUtil setLinePenFromPenWithOrgOssPdfreporterEngineTypePenEnumEnum:pen withOrgOssPdfreporterEngineJRPen:[((id<OrgOssPdfreporterEngineJRStyle>) nil_chk(style)) getLinePen]];
  }
  OrgOssPdfreporterEngineTypeFillEnumEnum *fill = [OrgOssPdfreporterEngineTypeFillEnumEnum getByNameWithNSString:[((id<OrgOssPdfreporterXmlParsersIAttributes>) nil_chk(atts)) getValueWithNSString:[OrgOssPdfreporterEngineXmlJRXmlConstants ATTRIBUTE_fill]]];
  if (fill != nil) {
    [((id<OrgOssPdfreporterEngineJRStyle>) nil_chk(style)) setFillWithOrgOssPdfreporterEngineTypeFillEnumEnum:fill];
  }
  NSString *radius = [((id<OrgOssPdfreporterXmlParsersIAttributes>) nil_chk(atts)) getValueWithNSString:[OrgOssPdfreporterEngineXmlJRXmlConstants ATTRIBUTE_radius]];
  if (radius != nil && [((NSString *) nil_chk(radius)) length] > 0) {
    [((id<OrgOssPdfreporterEngineJRStyle>) nil_chk(style)) setRadiusWithInt:[JavaLangInteger parseIntWithNSString:radius]];
  }
  OrgOssPdfreporterEngineTypeScaleImageEnumEnum *scaleImage = [OrgOssPdfreporterEngineTypeScaleImageEnumEnum getByNameWithNSString:[((id<OrgOssPdfreporterXmlParsersIAttributes>) nil_chk(atts)) getValueWithNSString:[OrgOssPdfreporterEngineXmlJRXmlConstants ATTRIBUTE_scaleImage]]];
  if (scaleImage != nil) {
    [((id<OrgOssPdfreporterEngineJRStyle>) nil_chk(style)) setScaleImageWithOrgOssPdfreporterEngineTypeScaleImageEnumEnum:scaleImage];
  }
  OrgOssPdfreporterEngineTypeHorizontalAlignEnumEnum *horizontalAlignment = [OrgOssPdfreporterEngineTypeHorizontalAlignEnumEnum getByNameWithNSString:[((id<OrgOssPdfreporterXmlParsersIAttributes>) nil_chk(atts)) getValueWithNSString:[OrgOssPdfreporterEngineXmlJRXmlConstants ATTRIBUTE_hAlign]]];
  if (horizontalAlignment != nil) {
    [((id<OrgOssPdfreporterEngineJRStyle>) nil_chk(style)) setHorizontalAlignmentWithOrgOssPdfreporterEngineTypeHorizontalAlignEnumEnum:horizontalAlignment];
  }
  OrgOssPdfreporterEngineTypeVerticalAlignEnumEnum *verticalAlignment = [OrgOssPdfreporterEngineTypeVerticalAlignEnumEnum getByNameWithNSString:[((id<OrgOssPdfreporterXmlParsersIAttributes>) nil_chk(atts)) getValueWithNSString:[OrgOssPdfreporterEngineXmlJRXmlConstants ATTRIBUTE_vAlign]]];
  if (verticalAlignment != nil) {
    [((id<OrgOssPdfreporterEngineJRStyle>) nil_chk(style)) setVerticalAlignmentWithOrgOssPdfreporterEngineTypeVerticalAlignEnumEnum:verticalAlignment];
  }
  OrgOssPdfreporterEngineTypePenEnumEnum *border = [OrgOssPdfreporterEngineTypePenEnumEnum getByNameWithNSString:[((id<OrgOssPdfreporterXmlParsersIAttributes>) nil_chk(atts)) getValueWithNSString:[OrgOssPdfreporterEngineXmlJRXmlConstants ATTRIBUTE_border]]];
  if (border != nil) {
    [OrgOssPdfreporterEngineUtilJRPenUtil setLinePenFromPenWithOrgOssPdfreporterEngineTypePenEnumEnum:border withOrgOssPdfreporterEngineJRPen:[((id<OrgOssPdfreporterEngineJRLineBox>) nil_chk([((id<OrgOssPdfreporterEngineJRStyle>) nil_chk(style)) getLineBox])) getPen]];
  }
  id<OrgOssPdfreporterGeometryIColor> borderColor = [OrgOssPdfreporterEngineUtilJRColorUtil getColorWithNSString:[((id<OrgOssPdfreporterXmlParsersIAttributes>) nil_chk(atts)) getValueWithNSString:[OrgOssPdfreporterEngineXmlJRXmlConstants ATTRIBUTE_borderColor]] withOrgOssPdfreporterGeometryIColor:nil];
  if (borderColor != nil) {
    [((id<OrgOssPdfreporterEngineBaseJRBoxPen>) nil_chk([((id<OrgOssPdfreporterEngineJRLineBox>) nil_chk([((id<OrgOssPdfreporterEngineJRStyle>) nil_chk(style)) getLineBox])) getPen])) setLineColorWithOrgOssPdfreporterGeometryIColor:borderColor];
  }
  NSString *padding = [((id<OrgOssPdfreporterXmlParsersIAttributes>) nil_chk(atts)) getValueWithNSString:[OrgOssPdfreporterEngineXmlJRXmlConstants ATTRIBUTE_padding]];
  if (padding != nil && [((NSString *) nil_chk(padding)) length] > 0) {
    [((id<OrgOssPdfreporterEngineJRLineBox>) nil_chk([((id<OrgOssPdfreporterEngineJRStyle>) nil_chk(style)) getLineBox])) setPaddingWithInt:[JavaLangInteger parseIntWithNSString:padding]];
  }
  border = [OrgOssPdfreporterEngineTypePenEnumEnum getByNameWithNSString:[((id<OrgOssPdfreporterXmlParsersIAttributes>) nil_chk(atts)) getValueWithNSString:[OrgOssPdfreporterEngineXmlJRXmlConstants ATTRIBUTE_topBorder]]];
  if (border != nil) {
    [OrgOssPdfreporterEngineUtilJRPenUtil setLinePenFromPenWithOrgOssPdfreporterEngineTypePenEnumEnum:border withOrgOssPdfreporterEngineJRPen:[((id<OrgOssPdfreporterEngineJRLineBox>) nil_chk([((id<OrgOssPdfreporterEngineJRStyle>) nil_chk(style)) getLineBox])) getTopPen]];
  }
  borderColor = [OrgOssPdfreporterEngineUtilJRColorUtil getColorWithNSString:[((id<OrgOssPdfreporterXmlParsersIAttributes>) nil_chk(atts)) getValueWithNSString:[OrgOssPdfreporterEngineXmlJRXmlConstants ATTRIBUTE_topBorderColor]] withOrgOssPdfreporterGeometryIColor:[OrgOssPdfreporterGeometryIColor black]];
  if (borderColor != nil) {
    [((id<OrgOssPdfreporterEngineBaseJRBoxPen>) nil_chk([((id<OrgOssPdfreporterEngineJRLineBox>) nil_chk([((id<OrgOssPdfreporterEngineJRStyle>) nil_chk(style)) getLineBox])) getTopPen])) setLineColorWithOrgOssPdfreporterGeometryIColor:borderColor];
  }
  padding = [((id<OrgOssPdfreporterXmlParsersIAttributes>) nil_chk(atts)) getValueWithNSString:[OrgOssPdfreporterEngineXmlJRXmlConstants ATTRIBUTE_topPadding]];
  if (padding != nil && [((NSString *) nil_chk(padding)) length] > 0) {
    [((id<OrgOssPdfreporterEngineJRLineBox>) nil_chk([((id<OrgOssPdfreporterEngineJRStyle>) nil_chk(style)) getLineBox])) setTopPaddingWithInt:[JavaLangInteger parseIntWithNSString:padding]];
  }
  border = [OrgOssPdfreporterEngineTypePenEnumEnum getByNameWithNSString:[((id<OrgOssPdfreporterXmlParsersIAttributes>) nil_chk(atts)) getValueWithNSString:[OrgOssPdfreporterEngineXmlJRXmlConstants ATTRIBUTE_leftBorder]]];
  if (border != nil) {
    [OrgOssPdfreporterEngineUtilJRPenUtil setLinePenFromPenWithOrgOssPdfreporterEngineTypePenEnumEnum:border withOrgOssPdfreporterEngineJRPen:[((id<OrgOssPdfreporterEngineJRLineBox>) nil_chk([((id<OrgOssPdfreporterEngineJRStyle>) nil_chk(style)) getLineBox])) getLeftPen]];
  }
  borderColor = [OrgOssPdfreporterEngineUtilJRColorUtil getColorWithNSString:[((id<OrgOssPdfreporterXmlParsersIAttributes>) nil_chk(atts)) getValueWithNSString:[OrgOssPdfreporterEngineXmlJRXmlConstants ATTRIBUTE_leftBorderColor]] withOrgOssPdfreporterGeometryIColor:[OrgOssPdfreporterGeometryIColor black]];
  if (borderColor != nil) {
    [((id<OrgOssPdfreporterEngineBaseJRBoxPen>) nil_chk([((id<OrgOssPdfreporterEngineJRLineBox>) nil_chk([((id<OrgOssPdfreporterEngineJRStyle>) nil_chk(style)) getLineBox])) getLeftPen])) setLineColorWithOrgOssPdfreporterGeometryIColor:borderColor];
  }
  padding = [((id<OrgOssPdfreporterXmlParsersIAttributes>) nil_chk(atts)) getValueWithNSString:[OrgOssPdfreporterEngineXmlJRXmlConstants ATTRIBUTE_leftPadding]];
  if (padding != nil && [((NSString *) nil_chk(padding)) length] > 0) {
    [((id<OrgOssPdfreporterEngineJRLineBox>) nil_chk([((id<OrgOssPdfreporterEngineJRStyle>) nil_chk(style)) getLineBox])) setLeftPaddingWithInt:[JavaLangInteger parseIntWithNSString:padding]];
  }
  border = [OrgOssPdfreporterEngineTypePenEnumEnum getByNameWithNSString:[((id<OrgOssPdfreporterXmlParsersIAttributes>) nil_chk(atts)) getValueWithNSString:[OrgOssPdfreporterEngineXmlJRXmlConstants ATTRIBUTE_bottomBorder]]];
  if (border != nil) {
    [OrgOssPdfreporterEngineUtilJRPenUtil setLinePenFromPenWithOrgOssPdfreporterEngineTypePenEnumEnum:border withOrgOssPdfreporterEngineJRPen:[((id<OrgOssPdfreporterEngineJRLineBox>) nil_chk([((id<OrgOssPdfreporterEngineJRStyle>) nil_chk(style)) getLineBox])) getBottomPen]];
  }
  borderColor = [OrgOssPdfreporterEngineUtilJRColorUtil getColorWithNSString:[((id<OrgOssPdfreporterXmlParsersIAttributes>) nil_chk(atts)) getValueWithNSString:[OrgOssPdfreporterEngineXmlJRXmlConstants ATTRIBUTE_bottomBorderColor]] withOrgOssPdfreporterGeometryIColor:[OrgOssPdfreporterGeometryIColor black]];
  if (borderColor != nil) {
    [((id<OrgOssPdfreporterEngineBaseJRBoxPen>) nil_chk([((id<OrgOssPdfreporterEngineJRLineBox>) nil_chk([((id<OrgOssPdfreporterEngineJRStyle>) nil_chk(style)) getLineBox])) getBottomPen])) setLineColorWithOrgOssPdfreporterGeometryIColor:borderColor];
  }
  padding = [((id<OrgOssPdfreporterXmlParsersIAttributes>) nil_chk(atts)) getValueWithNSString:[OrgOssPdfreporterEngineXmlJRXmlConstants ATTRIBUTE_bottomPadding]];
  if (padding != nil && [((NSString *) nil_chk(padding)) length] > 0) {
    [((id<OrgOssPdfreporterEngineJRLineBox>) nil_chk([((id<OrgOssPdfreporterEngineJRStyle>) nil_chk(style)) getLineBox])) setBottomPaddingWithInt:[JavaLangInteger parseIntWithNSString:padding]];
  }
  border = [OrgOssPdfreporterEngineTypePenEnumEnum getByNameWithNSString:[((id<OrgOssPdfreporterXmlParsersIAttributes>) nil_chk(atts)) getValueWithNSString:[OrgOssPdfreporterEngineXmlJRXmlConstants ATTRIBUTE_rightBorder]]];
  if (border != nil) {
    [OrgOssPdfreporterEngineUtilJRPenUtil setLinePenFromPenWithOrgOssPdfreporterEngineTypePenEnumEnum:border withOrgOssPdfreporterEngineJRPen:[((id<OrgOssPdfreporterEngineJRLineBox>) nil_chk([((id<OrgOssPdfreporterEngineJRStyle>) nil_chk(style)) getLineBox])) getRightPen]];
  }
  borderColor = [OrgOssPdfreporterEngineUtilJRColorUtil getColorWithNSString:[((id<OrgOssPdfreporterXmlParsersIAttributes>) nil_chk(atts)) getValueWithNSString:[OrgOssPdfreporterEngineXmlJRXmlConstants ATTRIBUTE_rightBorderColor]] withOrgOssPdfreporterGeometryIColor:[OrgOssPdfreporterGeometryIColor black]];
  if (borderColor != nil) {
    [((id<OrgOssPdfreporterEngineBaseJRBoxPen>) nil_chk([((id<OrgOssPdfreporterEngineJRLineBox>) nil_chk([((id<OrgOssPdfreporterEngineJRStyle>) nil_chk(style)) getLineBox])) getRightPen])) setLineColorWithOrgOssPdfreporterGeometryIColor:borderColor];
  }
  padding = [((id<OrgOssPdfreporterXmlParsersIAttributes>) nil_chk(atts)) getValueWithNSString:[OrgOssPdfreporterEngineXmlJRXmlConstants ATTRIBUTE_rightPadding]];
  if (padding != nil && [((NSString *) nil_chk(padding)) length] > 0) {
    [((id<OrgOssPdfreporterEngineJRLineBox>) nil_chk([((id<OrgOssPdfreporterEngineJRStyle>) nil_chk(style)) getLineBox])) setRightPaddingWithInt:[JavaLangInteger parseIntWithNSString:padding]];
  }
  OrgOssPdfreporterEngineTypeRotationEnumEnum *rotation = [OrgOssPdfreporterEngineTypeRotationEnumEnum getByNameWithNSString:[((id<OrgOssPdfreporterXmlParsersIAttributes>) nil_chk(atts)) getValueWithNSString:[OrgOssPdfreporterEngineXmlJRXmlConstants ATTRIBUTE_rotation]]];
  if (rotation != nil) {
    [((id<OrgOssPdfreporterEngineJRStyle>) nil_chk(style)) setRotationWithOrgOssPdfreporterEngineTypeRotationEnumEnum:rotation];
  }
  OrgOssPdfreporterEngineTypeLineSpacingEnumEnum *lineSpacing = [OrgOssPdfreporterEngineTypeLineSpacingEnumEnum getByNameWithNSString:[((id<OrgOssPdfreporterXmlParsersIAttributes>) nil_chk(atts)) getValueWithNSString:[OrgOssPdfreporterEngineXmlJRXmlConstants ATTRIBUTE_lineSpacing]]];
  if (lineSpacing != nil) {
    [((id<OrgOssPdfreporterEngineJRParagraph>) nil_chk([((id<OrgOssPdfreporterEngineJRStyle>) nil_chk(style)) getParagraph])) setLineSpacingWithOrgOssPdfreporterEngineTypeLineSpacingEnumEnum:lineSpacing];
  }
  [((id<OrgOssPdfreporterEngineJRStyle>) nil_chk(style)) setMarkupWithNSString:[((id<OrgOssPdfreporterXmlParsersIAttributes>) nil_chk(atts)) getValueWithNSString:[OrgOssPdfreporterEngineXmlJRXmlConstants ATTRIBUTE_markup]]];
  NSString *isStyledText = [((id<OrgOssPdfreporterXmlParsersIAttributes>) nil_chk(atts)) getValueWithNSString:[OrgOssPdfreporterEngineXmlJRXmlConstants ATTRIBUTE_isStyledText]];
  if (isStyledText != nil && [((NSString *) nil_chk(isStyledText)) length] > 0) {
    [((id<OrgOssPdfreporterEngineJRStyle>) nil_chk(style)) setMarkupWithNSString:[JavaLangBoolean valueOfWithNSString:isStyledText] ? [OrgOssPdfreporterEngineJRCommonText MARKUP_STYLED_TEXT] : [OrgOssPdfreporterEngineJRCommonText MARKUP_NONE]];
  }
  [((id<OrgOssPdfreporterEngineJRStyle>) nil_chk(style)) setPatternWithNSString:[((id<OrgOssPdfreporterXmlParsersIAttributes>) nil_chk(atts)) getValueWithNSString:[OrgOssPdfreporterEngineXmlJRXmlConstants ATTRIBUTE_pattern]]];
  NSString *isBlankWhenNull = [((id<OrgOssPdfreporterXmlParsersIAttributes>) nil_chk(atts)) getValueWithNSString:[OrgOssPdfreporterEngineXmlJRXmlConstants ATTRIBUTE_isBlankWhenNull]];
  if (isBlankWhenNull != nil && [((NSString *) nil_chk(isBlankWhenNull)) length] > 0) {
    [((id<OrgOssPdfreporterEngineJRStyle>) nil_chk(style)) setBlankWhenNullWithJavaLangBoolean:[JavaLangBoolean valueOfWithNSString:isBlankWhenNull]];
  }
  if ([((id<OrgOssPdfreporterXmlParsersIAttributes>) nil_chk(atts)) getValueWithNSString:[OrgOssPdfreporterEngineXmlJRXmlConstants ATTRIBUTE_fontName]] != nil) {
    [((id<OrgOssPdfreporterEngineJRStyle>) nil_chk(style)) setFontNameWithNSString:[((id<OrgOssPdfreporterXmlParsersIAttributes>) nil_chk(atts)) getValueWithNSString:[OrgOssPdfreporterEngineXmlJRXmlConstants ATTRIBUTE_fontName]]];
  }
  if ([((id<OrgOssPdfreporterXmlParsersIAttributes>) nil_chk(atts)) getValueWithNSString:[OrgOssPdfreporterEngineXmlJRXmlConstants ATTRIBUTE_isBold]] != nil) {
    [((id<OrgOssPdfreporterEngineJRStyle>) nil_chk(style)) setBoldWithJavaLangBoolean:[JavaLangBoolean valueOfWithNSString:[((id<OrgOssPdfreporterXmlParsersIAttributes>) nil_chk(atts)) getValueWithNSString:[OrgOssPdfreporterEngineXmlJRXmlConstants ATTRIBUTE_isBold]]]];
  }
  if ([((id<OrgOssPdfreporterXmlParsersIAttributes>) nil_chk(atts)) getValueWithNSString:[OrgOssPdfreporterEngineXmlJRXmlConstants ATTRIBUTE_isItalic]] != nil) {
    [((id<OrgOssPdfreporterEngineJRStyle>) nil_chk(style)) setItalicWithJavaLangBoolean:[JavaLangBoolean valueOfWithNSString:[((id<OrgOssPdfreporterXmlParsersIAttributes>) nil_chk(atts)) getValueWithNSString:[OrgOssPdfreporterEngineXmlJRXmlConstants ATTRIBUTE_isItalic]]]];
  }
  if ([((id<OrgOssPdfreporterXmlParsersIAttributes>) nil_chk(atts)) getValueWithNSString:[OrgOssPdfreporterEngineXmlJRXmlConstants ATTRIBUTE_isUnderline]] != nil) {
    [((id<OrgOssPdfreporterEngineJRStyle>) nil_chk(style)) setUnderlineWithJavaLangBoolean:[JavaLangBoolean valueOfWithNSString:[((id<OrgOssPdfreporterXmlParsersIAttributes>) nil_chk(atts)) getValueWithNSString:[OrgOssPdfreporterEngineXmlJRXmlConstants ATTRIBUTE_isUnderline]]]];
  }
  if ([((id<OrgOssPdfreporterXmlParsersIAttributes>) nil_chk(atts)) getValueWithNSString:[OrgOssPdfreporterEngineXmlJRXmlConstants ATTRIBUTE_isStrikeThrough]] != nil) {
    [((id<OrgOssPdfreporterEngineJRStyle>) nil_chk(style)) setStrikeThroughWithJavaLangBoolean:[JavaLangBoolean valueOfWithNSString:[((id<OrgOssPdfreporterXmlParsersIAttributes>) nil_chk(atts)) getValueWithNSString:[OrgOssPdfreporterEngineXmlJRXmlConstants ATTRIBUTE_isStrikeThrough]]]];
  }
  if ([((id<OrgOssPdfreporterXmlParsersIAttributes>) nil_chk(atts)) getValueWithNSString:[OrgOssPdfreporterEngineXmlJRXmlConstants ATTRIBUTE_fontSize]] != nil) {
    [((id<OrgOssPdfreporterEngineJRStyle>) nil_chk(style)) setFontSizeWithJavaLangInteger:[JavaLangInteger valueOfWithNSString:[((id<OrgOssPdfreporterXmlParsersIAttributes>) nil_chk(atts)) getValueWithNSString:[OrgOssPdfreporterEngineXmlJRXmlConstants ATTRIBUTE_fontSize]]]];
  }
  if ([((id<OrgOssPdfreporterXmlParsersIAttributes>) nil_chk(atts)) getValueWithNSString:[OrgOssPdfreporterEngineXmlJRXmlConstants ATTRIBUTE_pdfFontName]] != nil) {
    [((id<OrgOssPdfreporterEngineJRStyle>) nil_chk(style)) setPdfFontNameWithNSString:[((id<OrgOssPdfreporterXmlParsersIAttributes>) nil_chk(atts)) getValueWithNSString:[OrgOssPdfreporterEngineXmlJRXmlConstants ATTRIBUTE_pdfFontName]]];
  }
  if ([((id<OrgOssPdfreporterXmlParsersIAttributes>) nil_chk(atts)) getValueWithNSString:[OrgOssPdfreporterEngineXmlJRXmlConstants ATTRIBUTE_pdfEncoding]] != nil) {
    [((id<OrgOssPdfreporterEngineJRStyle>) nil_chk(style)) setPdfEncodingWithNSString:[((id<OrgOssPdfreporterXmlParsersIAttributes>) nil_chk(atts)) getValueWithNSString:[OrgOssPdfreporterEngineXmlJRXmlConstants ATTRIBUTE_pdfEncoding]]];
  }
  if ([((id<OrgOssPdfreporterXmlParsersIAttributes>) nil_chk(atts)) getValueWithNSString:[OrgOssPdfreporterEngineXmlJRXmlConstants ATTRIBUTE_isPdfEmbedded]] != nil) {
    [((id<OrgOssPdfreporterEngineJRStyle>) nil_chk(style)) setPdfEmbeddedWithJavaLangBoolean:[JavaLangBoolean valueOfWithNSString:[((id<OrgOssPdfreporterXmlParsersIAttributes>) nil_chk(atts)) getValueWithNSString:[OrgOssPdfreporterEngineXmlJRXmlConstants ATTRIBUTE_isPdfEmbedded]]]];
  }
}

- (void)setParentStyleWithOrgOssPdfreporterEngineDesignJRDesignStyle:(OrgOssPdfreporterEngineDesignJRDesignStyle *)currentStyle
                                                        withNSString:(NSString *)parentStyleName {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
}

- (id)init {
  return [super init];
}

@end
