//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: pdfreporter-core/src/org/oss/pdfreporter/engine/xml/JRFontFactory.java
//
//  Created by kendra on 9/27/13.
//

#include "java/lang/Boolean.h"
#include "java/lang/Integer.h"
#include "java/util/Map.h"
#include "org/oss/pdfreporter/engine/JRFont.h"
#include "org/oss/pdfreporter/engine/JRStyle.h"
#include "org/oss/pdfreporter/engine/design/JRDesignElement.h"
#include "org/oss/pdfreporter/engine/design/JasperDesign.h"
#include "org/oss/pdfreporter/engine/xml/JRFontFactory.h"
#include "org/oss/pdfreporter/engine/xml/JRXmlConstants.h"
#include "org/oss/pdfreporter/uses/org/apache/digester/IDigester.h"
#include "org/oss/pdfreporter/xml/parsers/IAttributes.h"

@implementation OrgOssPdfreporterEngineXmlJRFontFactory

- (id<OrgOssPdfreporterEngineJRFont>)getFont {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}

- (void)setStyleWithOrgOssPdfreporterEngineJRFont:(id<OrgOssPdfreporterEngineJRFont>)font
       withOrgOssPdfreporterXmlParsersIAttributes:(id<OrgOssPdfreporterXmlParsersIAttributes>)atts {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
}

- (id)createObjectWithOrgOssPdfreporterXmlParsersIAttributes:(id<OrgOssPdfreporterXmlParsersIAttributes>)atts {
  id<OrgOssPdfreporterEngineJRFont> font = [self getFont];
  if ([((id<OrgOssPdfreporterXmlParsersIAttributes>) nil_chk(atts)) getValueWithNSString:[OrgOssPdfreporterEngineXmlJRXmlConstants ATTRIBUTE_fontName]] != nil) {
    [((id<OrgOssPdfreporterEngineJRFont>) nil_chk(font)) setFontNameWithNSString:[((id<OrgOssPdfreporterXmlParsersIAttributes>) nil_chk(atts)) getValueWithNSString:[OrgOssPdfreporterEngineXmlJRXmlConstants ATTRIBUTE_fontName]]];
  }
  if ([((id<OrgOssPdfreporterXmlParsersIAttributes>) nil_chk(atts)) getValueWithNSString:[OrgOssPdfreporterEngineXmlJRXmlConstants ATTRIBUTE_isBold]] != nil) {
    [((id<OrgOssPdfreporterEngineJRFont>) nil_chk(font)) setBoldWithJavaLangBoolean:[JavaLangBoolean valueOfWithNSString:[((id<OrgOssPdfreporterXmlParsersIAttributes>) nil_chk(atts)) getValueWithNSString:[OrgOssPdfreporterEngineXmlJRXmlConstants ATTRIBUTE_isBold]]]];
  }
  if ([((id<OrgOssPdfreporterXmlParsersIAttributes>) nil_chk(atts)) getValueWithNSString:[OrgOssPdfreporterEngineXmlJRXmlConstants ATTRIBUTE_isItalic]] != nil) {
    [((id<OrgOssPdfreporterEngineJRFont>) nil_chk(font)) setItalicWithJavaLangBoolean:[JavaLangBoolean valueOfWithNSString:[((id<OrgOssPdfreporterXmlParsersIAttributes>) nil_chk(atts)) getValueWithNSString:[OrgOssPdfreporterEngineXmlJRXmlConstants ATTRIBUTE_isItalic]]]];
  }
  if ([((id<OrgOssPdfreporterXmlParsersIAttributes>) nil_chk(atts)) getValueWithNSString:[OrgOssPdfreporterEngineXmlJRXmlConstants ATTRIBUTE_isUnderline]] != nil) {
    [((id<OrgOssPdfreporterEngineJRFont>) nil_chk(font)) setUnderlineWithJavaLangBoolean:[JavaLangBoolean valueOfWithNSString:[((id<OrgOssPdfreporterXmlParsersIAttributes>) nil_chk(atts)) getValueWithNSString:[OrgOssPdfreporterEngineXmlJRXmlConstants ATTRIBUTE_isUnderline]]]];
  }
  if ([((id<OrgOssPdfreporterXmlParsersIAttributes>) nil_chk(atts)) getValueWithNSString:[OrgOssPdfreporterEngineXmlJRXmlConstants ATTRIBUTE_isStrikeThrough]] != nil) {
    [((id<OrgOssPdfreporterEngineJRFont>) nil_chk(font)) setStrikeThroughWithJavaLangBoolean:[JavaLangBoolean valueOfWithNSString:[((id<OrgOssPdfreporterXmlParsersIAttributes>) nil_chk(atts)) getValueWithNSString:[OrgOssPdfreporterEngineXmlJRXmlConstants ATTRIBUTE_isStrikeThrough]]]];
  }
  if ([((id<OrgOssPdfreporterXmlParsersIAttributes>) nil_chk(atts)) getValueWithNSString:[OrgOssPdfreporterEngineXmlJRXmlConstants ATTRIBUTE_size]] != nil) {
    [((id<OrgOssPdfreporterEngineJRFont>) nil_chk(font)) setFontSizeWithInt:[JavaLangInteger parseIntWithNSString:[((id<OrgOssPdfreporterXmlParsersIAttributes>) nil_chk(atts)) getValueWithNSString:[OrgOssPdfreporterEngineXmlJRXmlConstants ATTRIBUTE_size]]]];
  }
  if ([((id<OrgOssPdfreporterXmlParsersIAttributes>) nil_chk(atts)) getValueWithNSString:[OrgOssPdfreporterEngineXmlJRXmlConstants ATTRIBUTE_pdfFontName]] != nil) {
    [((id<OrgOssPdfreporterEngineJRFont>) nil_chk(font)) setPdfFontNameWithNSString:[((id<OrgOssPdfreporterXmlParsersIAttributes>) nil_chk(atts)) getValueWithNSString:[OrgOssPdfreporterEngineXmlJRXmlConstants ATTRIBUTE_pdfFontName]]];
  }
  if ([((id<OrgOssPdfreporterXmlParsersIAttributes>) nil_chk(atts)) getValueWithNSString:[OrgOssPdfreporterEngineXmlJRXmlConstants ATTRIBUTE_pdfEncoding]] != nil) {
    [((id<OrgOssPdfreporterEngineJRFont>) nil_chk(font)) setPdfEncodingWithNSString:[((id<OrgOssPdfreporterXmlParsersIAttributes>) nil_chk(atts)) getValueWithNSString:[OrgOssPdfreporterEngineXmlJRXmlConstants ATTRIBUTE_pdfEncoding]]];
  }
  if ([((id<OrgOssPdfreporterXmlParsersIAttributes>) nil_chk(atts)) getValueWithNSString:[OrgOssPdfreporterEngineXmlJRXmlConstants ATTRIBUTE_isPdfEmbedded]] != nil) {
    [((id<OrgOssPdfreporterEngineJRFont>) nil_chk(font)) setPdfEmbeddedWithJavaLangBoolean:[JavaLangBoolean valueOfWithNSString:[((id<OrgOssPdfreporterXmlParsersIAttributes>) nil_chk(atts)) getValueWithNSString:[OrgOssPdfreporterEngineXmlJRXmlConstants ATTRIBUTE_isPdfEmbedded]]]];
  }
  [self setStyleWithOrgOssPdfreporterEngineJRFont:font withOrgOssPdfreporterXmlParsersIAttributes:atts];
  return font;
}

- (id)init {
  return [super init];
}

@end
@implementation OrgOssPdfreporterEngineXmlJRFontFactory_TextElementFontFactory

- (id<OrgOssPdfreporterEngineJRFont>)getFont {
  return (id<OrgOssPdfreporterEngineJRFont>) [((id<OrgOssPdfreporterUsesOrgApacheDigesterIDigester>) nil_chk(digester_)) peek];
}

- (void)setStyleWithOrgOssPdfreporterEngineJRFont:(id<OrgOssPdfreporterEngineJRFont>)font
       withOrgOssPdfreporterXmlParsersIAttributes:(id<OrgOssPdfreporterXmlParsersIAttributes>)atts {
  OrgOssPdfreporterEngineDesignJRDesignElement *element = (OrgOssPdfreporterEngineDesignJRDesignElement *) font;
  if ([((OrgOssPdfreporterEngineDesignJRDesignElement *) nil_chk(element)) getStyle] == nil && [((OrgOssPdfreporterEngineDesignJRDesignElement *) nil_chk(element)) getStyleNameReference] == nil) {
    NSString *styleName = [((id<OrgOssPdfreporterXmlParsersIAttributes>) nil_chk(atts)) getValueWithNSString:[OrgOssPdfreporterEngineXmlJRXmlConstants ATTRIBUTE_reportFont]];
    if (styleName != nil) {
      OrgOssPdfreporterEngineDesignJasperDesign *jasperDesign = (OrgOssPdfreporterEngineDesignJasperDesign *) [((id<OrgOssPdfreporterUsesOrgApacheDigesterIDigester>) nil_chk(digester_)) peekWithInt:[((id<OrgOssPdfreporterUsesOrgApacheDigesterIDigester>) nil_chk(digester_)) getCount] - 2];
      id<JavaUtilMap> stylesMap = [((OrgOssPdfreporterEngineDesignJasperDesign *) nil_chk(jasperDesign)) getStylesMap];
      if ([((id<JavaUtilMap>) nil_chk(stylesMap)) containsKeyWithId:styleName]) {
        id<OrgOssPdfreporterEngineJRStyle> style = [((id<JavaUtilMap>) nil_chk(stylesMap)) getWithId:styleName];
        [((OrgOssPdfreporterEngineDesignJRDesignElement *) nil_chk(element)) setStyleWithOrgOssPdfreporterEngineJRStyle:style];
      }
      else {
        [((OrgOssPdfreporterEngineDesignJRDesignElement *) nil_chk(element)) setStyleNameReferenceWithNSString:styleName];
      }
    }
  }
}

- (id)init {
  return [super init];
}

@end
