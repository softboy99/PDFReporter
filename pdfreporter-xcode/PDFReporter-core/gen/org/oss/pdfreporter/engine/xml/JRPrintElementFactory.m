//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: pdfreporter-core/src/org/oss/pdfreporter/engine/xml/JRPrintElementFactory.java
//
//  Created by kendra on 9/27/13.
//

#include "IOSClass.h"
#include "java/lang/Integer.h"
#include "java/util/List.h"
#include "java/util/Map.h"
#include "org/oss/pdfreporter/engine/JROrigin.h"
#include "org/oss/pdfreporter/engine/JRRuntimeException.h"
#include "org/oss/pdfreporter/engine/JRStyle.h"
#include "org/oss/pdfreporter/engine/JasperPrint.h"
#include "org/oss/pdfreporter/engine/base/JRBasePrintElement.h"
#include "org/oss/pdfreporter/engine/type/ModeEnum.h"
#include "org/oss/pdfreporter/engine/util/JRColorUtil.h"
#include "org/oss/pdfreporter/engine/xml/JRPrintElementFactory.h"
#include "org/oss/pdfreporter/engine/xml/JRPrintXmlLoader.h"
#include "org/oss/pdfreporter/engine/xml/JRXmlConstants.h"
#include "org/oss/pdfreporter/geometry/IColor.h"
#include "org/oss/pdfreporter/uses/java/util/UUID.h"
#include "org/oss/pdfreporter/uses/org/apache/digester/IDigester.h"
#include "org/oss/pdfreporter/xml/parsers/IAttributes.h"

@implementation OrgOssPdfreporterEngineXmlJRPrintElementFactory

- (id)createObjectWithOrgOssPdfreporterXmlParsersIAttributes:(id<OrgOssPdfreporterXmlParsersIAttributes>)atts {
  OrgOssPdfreporterEngineXmlJRPrintXmlLoader *printXmlLoader = (OrgOssPdfreporterEngineXmlJRPrintXmlLoader *) [((id<OrgOssPdfreporterUsesOrgApacheDigesterIDigester>) nil_chk(digester_)) peekWithInt:[((id<OrgOssPdfreporterUsesOrgApacheDigesterIDigester>) nil_chk(digester_)) getCount] - 1];
  OrgOssPdfreporterEngineJasperPrint *jasperPrint = (OrgOssPdfreporterEngineJasperPrint *) [((id<OrgOssPdfreporterUsesOrgApacheDigesterIDigester>) nil_chk(digester_)) peekWithInt:[((id<OrgOssPdfreporterUsesOrgApacheDigesterIDigester>) nil_chk(digester_)) getCount] - 2];
  OrgOssPdfreporterEngineBaseJRBasePrintElement *element = (OrgOssPdfreporterEngineBaseJRBasePrintElement *) [((id<OrgOssPdfreporterUsesOrgApacheDigesterIDigester>) nil_chk(digester_)) peek];
  NSString *key = [((id<OrgOssPdfreporterXmlParsersIAttributes>) nil_chk(atts)) getValueWithNSString:[OrgOssPdfreporterEngineXmlJRXmlConstants ATTRIBUTE_key]];
  if (key != nil) {
    [((OrgOssPdfreporterEngineBaseJRBasePrintElement *) nil_chk(element)) setKeyWithNSString:key];
  }
  OrgOssPdfreporterEngineTypeModeEnumEnum *mode = [OrgOssPdfreporterEngineTypeModeEnumEnum getByNameWithNSString:[((id<OrgOssPdfreporterXmlParsersIAttributes>) nil_chk(atts)) getValueWithNSString:[OrgOssPdfreporterEngineXmlJRXmlConstants ATTRIBUTE_mode]]];
  if (mode != nil) {
    [((OrgOssPdfreporterEngineBaseJRBasePrintElement *) nil_chk(element)) setModeWithOrgOssPdfreporterEngineTypeModeEnumEnum:mode];
  }
  NSString *uuid = [((id<OrgOssPdfreporterXmlParsersIAttributes>) nil_chk(atts)) getValueWithNSString:[OrgOssPdfreporterEngineXmlJRXmlConstants ATTRIBUTE_uuid]];
  if (uuid != nil) {
    [((OrgOssPdfreporterEngineBaseJRBasePrintElement *) nil_chk(element)) setUUIDWithOrgOssPdfreporterUsesJavaUtilUUID:[OrgOssPdfreporterUsesJavaUtilUUID fromStringWithNSString:uuid]];
  }
  NSString *x = [((id<OrgOssPdfreporterXmlParsersIAttributes>) nil_chk(atts)) getValueWithNSString:[OrgOssPdfreporterEngineXmlJRXmlConstants ATTRIBUTE_x]];
  if (x != nil && [((NSString *) nil_chk(x)) length] > 0) {
    [((OrgOssPdfreporterEngineBaseJRBasePrintElement *) nil_chk(element)) setXWithInt:[JavaLangInteger parseIntWithNSString:x]];
  }
  NSString *y = [((id<OrgOssPdfreporterXmlParsersIAttributes>) nil_chk(atts)) getValueWithNSString:[OrgOssPdfreporterEngineXmlJRXmlConstants ATTRIBUTE_y]];
  if (y != nil && [((NSString *) nil_chk(y)) length] > 0) {
    [((OrgOssPdfreporterEngineBaseJRBasePrintElement *) nil_chk(element)) setYWithInt:[JavaLangInteger parseIntWithNSString:y]];
  }
  NSString *width = [((id<OrgOssPdfreporterXmlParsersIAttributes>) nil_chk(atts)) getValueWithNSString:[OrgOssPdfreporterEngineXmlJRXmlConstants ATTRIBUTE_width]];
  if (width != nil && [((NSString *) nil_chk(width)) length] > 0) {
    [((OrgOssPdfreporterEngineBaseJRBasePrintElement *) nil_chk(element)) setWidthWithInt:[JavaLangInteger parseIntWithNSString:width]];
  }
  NSString *height = [((id<OrgOssPdfreporterXmlParsersIAttributes>) nil_chk(atts)) getValueWithNSString:[OrgOssPdfreporterEngineXmlJRXmlConstants ATTRIBUTE_height]];
  if (height != nil && [((NSString *) nil_chk(height)) length] > 0) {
    [((OrgOssPdfreporterEngineBaseJRBasePrintElement *) nil_chk(element)) setHeightWithInt:[JavaLangInteger parseIntWithNSString:height]];
  }
  NSString *forecolor = [((id<OrgOssPdfreporterXmlParsersIAttributes>) nil_chk(atts)) getValueWithNSString:[OrgOssPdfreporterEngineXmlJRXmlConstants ATTRIBUTE_forecolor]];
  if (forecolor != nil && [((NSString *) nil_chk(forecolor)) length] > 0) {
    [((OrgOssPdfreporterEngineBaseJRBasePrintElement *) nil_chk(element)) setForecolorWithOrgOssPdfreporterGeometryIColor:[OrgOssPdfreporterEngineUtilJRColorUtil getColorWithNSString:forecolor withOrgOssPdfreporterGeometryIColor:nil]];
  }
  NSString *backcolor = [((id<OrgOssPdfreporterXmlParsersIAttributes>) nil_chk(atts)) getValueWithNSString:[OrgOssPdfreporterEngineXmlJRXmlConstants ATTRIBUTE_backcolor]];
  if (backcolor != nil && [((NSString *) nil_chk(backcolor)) length] > 0) {
    [((OrgOssPdfreporterEngineBaseJRBasePrintElement *) nil_chk(element)) setBackcolorWithOrgOssPdfreporterGeometryIColor:[OrgOssPdfreporterEngineUtilJRColorUtil getColorWithNSString:backcolor withOrgOssPdfreporterGeometryIColor:nil]];
  }
  NSString *styleName = [((id<OrgOssPdfreporterXmlParsersIAttributes>) nil_chk(atts)) getValueWithNSString:[OrgOssPdfreporterEngineXmlJRXmlConstants ATTRIBUTE_style]];
  if (styleName != nil) {
    id<JavaUtilMap> stylesMap = [((OrgOssPdfreporterEngineJasperPrint *) nil_chk(jasperPrint)) getStylesMap];
    if (![((id<JavaUtilMap>) nil_chk(stylesMap)) containsKeyWithId:styleName]) {
      [((OrgOssPdfreporterEngineXmlJRPrintXmlLoader *) nil_chk(printXmlLoader)) addErrorWithJavaLangException:[[OrgOssPdfreporterEngineJRRuntimeException alloc] initWithNSString:[NSString stringWithFormat:@"Unknown report style : %@", styleName]]];
    }
    [((OrgOssPdfreporterEngineBaseJRBasePrintElement *) nil_chk(element)) setStyleWithOrgOssPdfreporterEngineJRStyle:[((id<JavaUtilMap>) nil_chk(stylesMap)) getWithId:styleName]];
  }
  NSString *origin = [((id<OrgOssPdfreporterXmlParsersIAttributes>) nil_chk(atts)) getValueWithNSString:[OrgOssPdfreporterEngineXmlJRXmlConstants ATTRIBUTE_origin]];
  if (origin != nil && [((NSString *) nil_chk(origin)) length] > 0) {
    [((OrgOssPdfreporterEngineBaseJRBasePrintElement *) nil_chk(element)) setOriginWithOrgOssPdfreporterEngineJROrigin:[((id<JavaUtilList>) nil_chk([((OrgOssPdfreporterEngineJasperPrint *) nil_chk(jasperPrint)) getOriginsList])) getWithInt:[JavaLangInteger parseIntWithNSString:origin]]];
  }
  NSString *elementId = [((id<OrgOssPdfreporterXmlParsersIAttributes>) nil_chk(atts)) getValueWithNSString:[OrgOssPdfreporterEngineXmlJRXmlConstants ATTRIBUTE_srcId]];
  if (elementId != nil && [((NSString *) nil_chk(elementId)) length] > 0) {
    [((OrgOssPdfreporterEngineBaseJRBasePrintElement *) nil_chk(element)) setSourceElementIdWithInt:[JavaLangInteger parseIntWithNSString:elementId]];
  }
  return element;
}

- (id)init {
  return [super init];
}

@end
