//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: pdfreporter-core/src/org/oss/pdfreporter/engine/fill/JRFillGraphicElement.java
//
//  Created by kendra on 9/27/13.
//

#include "java/lang/Float.h"
#include "java/lang/UnsupportedOperationException.h"
#include "org/oss/pdfreporter/engine/JRElement.h"
#include "org/oss/pdfreporter/engine/JRExpressionCollector.h"
#include "org/oss/pdfreporter/engine/JRGraphicElement.h"
#include "org/oss/pdfreporter/engine/JRGroup.h"
#include "org/oss/pdfreporter/engine/JRPen.h"
#include "org/oss/pdfreporter/engine/JRStyle.h"
#include "org/oss/pdfreporter/engine/JRVisitor.h"
#include "org/oss/pdfreporter/engine/fill/JRBaseFiller.h"
#include "org/oss/pdfreporter/engine/fill/JRFillBand.h"
#include "org/oss/pdfreporter/engine/fill/JRFillCloneFactory.h"
#include "org/oss/pdfreporter/engine/fill/JRFillElement.h"
#include "org/oss/pdfreporter/engine/fill/JRFillGraphicElement.h"
#include "org/oss/pdfreporter/engine/fill/JRFillObjectFactory.h"
#include "org/oss/pdfreporter/engine/type/FillEnum.h"
#include "org/oss/pdfreporter/engine/util/JRStyleResolver.h"
#include "org/oss/pdfreporter/geometry/IColor.h"

@implementation OrgOssPdfreporterEngineFillJRFillGraphicElement

@synthesize initPen = initPen_;
@synthesize pen = pen_;

- (id)initWithOrgOssPdfreporterEngineFillJRBaseFiller:(OrgOssPdfreporterEngineFillJRBaseFiller *)filler
          withOrgOssPdfreporterEngineJRGraphicElement:(id<OrgOssPdfreporterEngineJRGraphicElement>)graphicElement
   withOrgOssPdfreporterEngineFillJRFillObjectFactory:(OrgOssPdfreporterEngineFillJRFillObjectFactory *)factory {
  if ((self = [super initWithOrgOssPdfreporterEngineFillJRBaseFiller:filler withOrgOssPdfreporterEngineJRElement:graphicElement withOrgOssPdfreporterEngineFillJRFillObjectFactory:factory])) {
    initPen_ = [((id<OrgOssPdfreporterEngineJRPen>) nil_chk([((id<OrgOssPdfreporterEngineJRGraphicElement>) nil_chk(graphicElement)) getLinePen])) cloneWithOrgOssPdfreporterEngineJRPenContainer:self];
  }
  return self;
}

- (id)initWithOrgOssPdfreporterEngineFillJRFillGraphicElement:(OrgOssPdfreporterEngineFillJRFillGraphicElement *)graphicElement
            withOrgOssPdfreporterEngineFillJRFillCloneFactory:(OrgOssPdfreporterEngineFillJRFillCloneFactory *)factory {
  if ((self = [super initWithOrgOssPdfreporterEngineFillJRFillElement:graphicElement withOrgOssPdfreporterEngineFillJRFillCloneFactory:factory])) {
    initPen_ = [((id<OrgOssPdfreporterEngineJRPen>) nil_chk([((OrgOssPdfreporterEngineFillJRFillGraphicElement *) nil_chk(graphicElement)) getLinePen])) cloneWithOrgOssPdfreporterEngineJRPenContainer:self];
  }
  return self;
}

- (void)evaluateStyleWithChar:(char)evaluation {
  [super evaluateStyleWithChar:evaluation];
  pen_ = nil;
  if (providerStyle_ != nil) {
    pen_ = [((id<OrgOssPdfreporterEngineJRPen>) nil_chk(initPen_)) cloneWithOrgOssPdfreporterEngineJRPenContainer:self];
    [OrgOssPdfreporterEngineUtilJRStyleResolver appendPenWithOrgOssPdfreporterEngineJRPen:pen_ withOrgOssPdfreporterEngineJRPen:[providerStyle_ getLinePen]];
  }
}

- (id<OrgOssPdfreporterEngineJRPen>)getLinePen {
  return pen_ == nil ? initPen_ : pen_;
}

- (OrgOssPdfreporterEngineTypeFillEnumEnum *)getFillValue {
  return [OrgOssPdfreporterEngineUtilJRStyleResolver getFillValueWithOrgOssPdfreporterEngineJRCommonGraphicElement:self];
}

- (OrgOssPdfreporterEngineTypeFillEnumEnum *)getOwnFillValue {
  return providerStyle_ == nil || [((id<OrgOssPdfreporterEngineJRStyle>) nil_chk(providerStyle_)) getOwnFillValue] == nil ? [((id<OrgOssPdfreporterEngineJRGraphicElement>) self.parent) getOwnFillValue] : [((id<OrgOssPdfreporterEngineJRStyle>) nil_chk(providerStyle_)) getOwnFillValue];
}

- (void)setFillWithOrgOssPdfreporterEngineTypeFillEnumEnum:(OrgOssPdfreporterEngineTypeFillEnumEnum *)fill {
  @throw [[JavaLangUnsupportedOperationException alloc] init];
}

- (JavaLangFloat *)getDefaultLineWidth {
  return [((id<OrgOssPdfreporterEngineJRGraphicElement>) self.parent) getDefaultLineWidth];
}

- (id<OrgOssPdfreporterGeometryIColor>)getDefaultLineColor {
  return [self getForecolor];
}

- (void)rewind {
}

- (BOOL)prepareWithInt:(int)availableHeight
              withBOOL:(BOOL)isOverflow {
  BOOL willOverflow = NO;
  [super prepareWithInt:availableHeight withBOOL:isOverflow];
  if (![self isToPrint]) {
    return willOverflow;
  }
  BOOL isToPrint = YES;
  BOOL isReprinted = NO;
  if (isOverflow && [self isAlreadyPrinted] && ![self isPrintWhenDetailOverflows]) {
    isToPrint = NO;
  }
  if (isToPrint && [self isPrintWhenExpressionNull] && ![self isPrintRepeatedValues]) {
    if ((![self isPrintInFirstWholeBand] || ![((OrgOssPdfreporterEngineFillJRFillBand *) nil_chk([self getBand])) isFirstWholeOnPageColumn]) && ([self getPrintWhenGroupChanges] == nil || ![((OrgOssPdfreporterEngineFillJRFillBand *) nil_chk([self getBand])) isNewGroupWithOrgOssPdfreporterEngineJRGroup:[self getPrintWhenGroupChanges]]) && (!isOverflow || ![self isPrintWhenDetailOverflows])) {
      isToPrint = NO;
    }
  }
  if (isToPrint && availableHeight < [self getRelativeY] + [self getHeight]) {
    isToPrint = NO;
    willOverflow = YES;
  }
  if (isToPrint && isOverflow && ([self isPrintWhenDetailOverflows] && ([self isAlreadyPrinted] || (![self isAlreadyPrinted] && ![self isPrintRepeatedValues])))) {
    isReprinted = YES;
  }
  [self setToPrintWithBOOL:isToPrint];
  [self setReprintedWithBOOL:isReprinted];
  return willOverflow;
}

- (void)collectExpressionsWithOrgOssPdfreporterEngineJRExpressionCollector:(OrgOssPdfreporterEngineJRExpressionCollector *)param0 {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
}

- (void)visitWithOrgOssPdfreporterEngineJRVisitor:(id<OrgOssPdfreporterEngineJRVisitor>)param0 {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
}

- (void)copyAllPropertiesTo:(id)copy {
  [super copyAllPropertiesTo:copy];
  OrgOssPdfreporterEngineFillJRFillGraphicElement *typedCopy = (OrgOssPdfreporterEngineFillJRFillGraphicElement *) copy;
  typedCopy.initPen = initPen_;
  typedCopy.pen = pen_;
}

@end
