//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: pdfreporter-core/src/org/oss/pdfreporter/engine/fill/JRFillFrame.java
//
//  Created by kendra on 9/27/13.
//

#include "IOSObjectArray.h"
#include "java/lang/Integer.h"
#include "java/util/HashMap.h"
#include "java/util/List.h"
#include "java/util/Map.h"
#include "org/oss/pdfreporter/engine/JRDefaultStyleProvider.h"
#include "org/oss/pdfreporter/engine/JRElement.h"
#include "org/oss/pdfreporter/engine/JRExpressionCollector.h"
#include "org/oss/pdfreporter/engine/JRFrame.h"
#include "org/oss/pdfreporter/engine/JRGroup.h"
#include "org/oss/pdfreporter/engine/JRLineBox.h"
#include "org/oss/pdfreporter/engine/JROrigin.h"
#include "org/oss/pdfreporter/engine/JRPrintElement.h"
#include "org/oss/pdfreporter/engine/JRStyle.h"
#include "org/oss/pdfreporter/engine/JRVisitor.h"
#include "org/oss/pdfreporter/engine/JasperPrint.h"
#include "org/oss/pdfreporter/engine/base/JRBaseElementGroup.h"
#include "org/oss/pdfreporter/engine/fill/JRBaseFiller.h"
#include "org/oss/pdfreporter/engine/fill/JRFillBand.h"
#include "org/oss/pdfreporter/engine/fill/JRFillCloneFactory.h"
#include "org/oss/pdfreporter/engine/fill/JRFillCloneable.h"
#include "org/oss/pdfreporter/engine/fill/JRFillContext.h"
#include "org/oss/pdfreporter/engine/fill/JRFillElement.h"
#include "org/oss/pdfreporter/engine/fill/JRFillElementContainer.h"
#include "org/oss/pdfreporter/engine/fill/JRFillFrame.h"
#include "org/oss/pdfreporter/engine/fill/JRFillObjectFactory.h"
#include "org/oss/pdfreporter/engine/fill/JRTemplateElement.h"
#include "org/oss/pdfreporter/engine/fill/JRTemplateFrame.h"
#include "org/oss/pdfreporter/engine/fill/JRTemplatePrintFrame.h"
#include "org/oss/pdfreporter/engine/type/ModeEnum.h"
#include "org/oss/pdfreporter/engine/util/JRBoxUtil.h"
#include "org/oss/pdfreporter/engine/util/JRStyleResolver.h"
#include "org/oss/pdfreporter/geometry/IColor.h"
#include "org/oss/pdfreporter/uses/java/util/UUID.h"

@implementation OrgOssPdfreporterEngineFillJRFillFrame

@synthesize parentFrame = parentFrame_;
@synthesize lineBox = lineBox_;
@synthesize frameContainer = frameContainer_;
@synthesize bottomTemplateFrames = bottomTemplateFrames_;
@synthesize topTemplateFrames = topTemplateFrames_;
@synthesize topBottomTemplateFrames = topBottomTemplateFrames_;
@synthesize first = first_;
@synthesize fillBottomBorder = fillBottomBorder_;
@synthesize filling = filling_;

- (id)initWithOrgOssPdfreporterEngineFillJRBaseFiller:(OrgOssPdfreporterEngineFillJRBaseFiller *)filler
                   withOrgOssPdfreporterEngineJRFrame:(id<OrgOssPdfreporterEngineJRFrame>)frame
   withOrgOssPdfreporterEngineFillJRFillObjectFactory:(OrgOssPdfreporterEngineFillJRFillObjectFactory *)factory {
  if ((self = [super initWithOrgOssPdfreporterEngineFillJRBaseFiller:filler withOrgOssPdfreporterEngineJRElement:frame withOrgOssPdfreporterEngineFillJRFillObjectFactory:factory])) {
    parentFrame_ = frame;
    lineBox_ = [((id<OrgOssPdfreporterEngineJRLineBox>) nil_chk([((id<OrgOssPdfreporterEngineJRFrame>) nil_chk(frame)) getLineBox])) cloneWithOrgOssPdfreporterEngineJRBoxContainer:self];
    frameContainer_ = [[OrgOssPdfreporterEngineFillJRFillFrame_JRFillFrameElements alloc] initWithOrgOssPdfreporterEngineFillJRFillFrame:self withOrgOssPdfreporterEngineFillJRFillObjectFactory:factory];
    bottomTemplateFrames_ = [[JavaUtilHashMap alloc] init];
    topTemplateFrames_ = [[JavaUtilHashMap alloc] init];
    topBottomTemplateFrames_ = [[JavaUtilHashMap alloc] init];
    [self setShrinkableWithBOOL:YES];
  }
  return self;
}

- (id)initWithOrgOssPdfreporterEngineFillJRFillFrame:(OrgOssPdfreporterEngineFillJRFillFrame *)frame
   withOrgOssPdfreporterEngineFillJRFillCloneFactory:(OrgOssPdfreporterEngineFillJRFillCloneFactory *)factory {
  if ((self = [super initWithOrgOssPdfreporterEngineFillJRFillElement:frame withOrgOssPdfreporterEngineFillJRFillCloneFactory:factory])) {
    parentFrame_ = ((OrgOssPdfreporterEngineFillJRFillFrame *) nil_chk(frame)).parentFrame;
    lineBox_ = [((id<OrgOssPdfreporterEngineJRLineBox>) nil_chk([((OrgOssPdfreporterEngineFillJRFillFrame *) nil_chk(frame)) getLineBox])) cloneWithOrgOssPdfreporterEngineJRBoxContainer:self];
    frameContainer_ = [[OrgOssPdfreporterEngineFillJRFillFrame_JRFillFrameElements alloc] initWithOrgOssPdfreporterEngineFillJRFillFrame:self withOrgOssPdfreporterEngineFillJRFillFrame_JRFillFrameElements:((OrgOssPdfreporterEngineFillJRFillFrame *) nil_chk(frame)).frameContainer withOrgOssPdfreporterEngineFillJRFillCloneFactory:factory];
    bottomTemplateFrames_ = ((OrgOssPdfreporterEngineFillJRFillFrame *) nil_chk(frame)).bottomTemplateFrames;
    topTemplateFrames_ = ((OrgOssPdfreporterEngineFillJRFillFrame *) nil_chk(frame)).topTemplateFrames;
    topBottomTemplateFrames_ = ((OrgOssPdfreporterEngineFillJRFillFrame *) nil_chk(frame)).topBottomTemplateFrames;
  }
  return self;
}

- (OrgOssPdfreporterEngineTypeModeEnumEnum *)getModeValue {
  return [OrgOssPdfreporterEngineUtilJRStyleResolver getModeWithOrgOssPdfreporterEngineJRCommonElement:self withOrgOssPdfreporterEngineTypeModeEnumEnum:[OrgOssPdfreporterEngineTypeModeEnumEnum TRANSPARENT]];
}

- (id<OrgOssPdfreporterGeometryIColor>)getDefaultLineColor {
  return [self getForecolor];
}

- (void)evaluateWithChar:(char)evaluation {
  [self reset];
  [self evaluatePrintWhenExpressionWithChar:evaluation];
  if ([self isPrintWhenExpressionNull] || [self isPrintWhenTrue]) {
    [self evaluatePropertiesWithChar:evaluation];
    [self evaluateStyleWithChar:evaluation];
    [((OrgOssPdfreporterEngineFillJRFillFrame_JRFillFrameElements *) nil_chk(frameContainer_)) evaluateWithChar:evaluation];
    BOOL repeating = YES;
    IOSObjectArray *elements = (IOSObjectArray *) [self getElements];
    for (int i = 0; repeating && i < (int) [((IOSObjectArray *) nil_chk(elements)) count]; i++) {
      repeating &= [((OrgOssPdfreporterEngineFillJRFillElement *) nil_chk([((IOSObjectArray *) nil_chk(elements)) objectAtIndex:i])) isValueRepeating];
    }
    [self setValueRepeatingWithBOOL:repeating];
  }
  filling_ = NO;
}

- (void)rewind {
  [((OrgOssPdfreporterEngineFillJRFillFrame_JRFillFrameElements *) nil_chk(frameContainer_)) rewind];
  filling_ = NO;
}

- (BOOL)prepareWithInt:(int)availableHeight
              withBOOL:(BOOL)isOverflow {
  [super prepareWithInt:availableHeight withBOOL:isOverflow];
  if (![self isToPrint]) {
    return NO;
  }
  first_ = !isOverflow || !filling_;
  int topPadding = first_ ? [((JavaLangInteger *) nil_chk([((id<OrgOssPdfreporterEngineJRLineBox>) nil_chk([self getLineBox])) getTopPadding])) intValue] : 0;
  int bottomPadding = [((JavaLangInteger *) nil_chk([((id<OrgOssPdfreporterEngineJRLineBox>) nil_chk([self getLineBox])) getBottomPadding])) intValue];
  if (availableHeight < [self getRelativeY] + [self getHeight] - topPadding) {
    [self setToPrintWithBOOL:NO];
    return YES;
  }
  if (!filling_ && ![self isPrintRepeatedValues] && [self isValueRepeating] && (![self isPrintInFirstWholeBand] || ![((OrgOssPdfreporterEngineFillJRFillBand *) nil_chk([self getBand])) isFirstWholeOnPageColumn]) && ([self getPrintWhenGroupChanges] == nil || ![((OrgOssPdfreporterEngineFillJRFillBand *) nil_chk([self getBand])) isNewGroupWithOrgOssPdfreporterEngineJRGroup:[self getPrintWhenGroupChanges]]) && (!isOverflow || ![self isPrintWhenDetailOverflows])) {
    [self setToPrintWithBOOL:NO];
    return NO;
  }
  if (!filling_ && isOverflow && [self isAlreadyPrinted]) {
    if ([self isPrintWhenDetailOverflows]) {
      [self rewind];
      [self setReprintedWithBOOL:YES];
    }
    else {
      [self setToPrintWithBOOL:NO];
      return NO;
    }
  }
  [((OrgOssPdfreporterEngineFillJRFillFrame_JRFillFrameElements *) nil_chk(frameContainer_)) initFill];
  [((OrgOssPdfreporterEngineFillJRFillFrame_JRFillFrameElements *) nil_chk(frameContainer_)) resetElements];
  [((OrgOssPdfreporterEngineFillJRFillFrame_JRFillFrameElements *) nil_chk(frameContainer_)) prepareElementsWithInt:availableHeight - [self getRelativeY] + bottomPadding + [((JavaLangInteger *) nil_chk([((id<OrgOssPdfreporterEngineJRLineBox>) nil_chk([self getLineBox])) getTopPadding])) intValue] - topPadding withBOOL:YES];
  BOOL willOverflow = [((OrgOssPdfreporterEngineFillJRFillFrame_JRFillFrameElements *) nil_chk(frameContainer_)) willOverflow];
  if (willOverflow) {
    fillBottomBorder_ = NO;
    [self setStretchHeightWithInt:availableHeight - [self getRelativeY]];
  }
  else {
    int neededStretch = [((OrgOssPdfreporterEngineFillJRFillFrame_JRFillFrameElements *) nil_chk(frameContainer_)) getStretchHeight] - [((OrgOssPdfreporterEngineFillJRFillFrame_JRFillFrameElements *) nil_chk(frameContainer_)) getFirstY] + topPadding + bottomPadding;
    if (neededStretch <= availableHeight - [self getRelativeY]) {
      fillBottomBorder_ = YES;
      [self setStretchHeightWithInt:neededStretch];
    }
    else {
      fillBottomBorder_ = NO;
      [self setStretchHeightWithInt:availableHeight - [self getRelativeY]];
    }
  }
  filling_ = willOverflow;
  return willOverflow;
}

- (void)setStretchHeightWithInt:(int)stretchHeight {
  [super setStretchHeightWithInt:stretchHeight];
  int topPadding = first_ ? [((JavaLangInteger *) nil_chk([((id<OrgOssPdfreporterEngineJRLineBox>) nil_chk([self getLineBox])) getTopPadding])) intValue] : 0;
  int bottomPadding = fillBottomBorder_ ? [((JavaLangInteger *) nil_chk([((id<OrgOssPdfreporterEngineJRLineBox>) nil_chk([self getLineBox])) getBottomPadding])) intValue] : 0;
  [((OrgOssPdfreporterEngineFillJRFillFrame_JRFillFrameElements *) nil_chk(frameContainer_)) setStretchHeightWithInt:stretchHeight + [((OrgOssPdfreporterEngineFillJRFillFrame_JRFillFrameElements *) nil_chk(frameContainer_)) getFirstY] - topPadding - bottomPadding];
}

- (void)stretchHeightFinal {
  if ([self isToPrint]) {
    [((OrgOssPdfreporterEngineFillJRFillFrame_JRFillFrameElements *) nil_chk(frameContainer_)) stretchElements];
    [((OrgOssPdfreporterEngineFillJRFillFrame_JRFillFrameElements *) nil_chk(frameContainer_)) moveBandBottomElements];
    [((OrgOssPdfreporterEngineFillJRFillFrame_JRFillFrameElements *) nil_chk(frameContainer_)) removeBlankElements];
    int topPadding = first_ ? [((JavaLangInteger *) nil_chk([((id<OrgOssPdfreporterEngineJRLineBox>) nil_chk([self getLineBox])) getTopPadding])) intValue] : 0;
    int bottomPadding = fillBottomBorder_ ? [((JavaLangInteger *) nil_chk([((id<OrgOssPdfreporterEngineJRLineBox>) nil_chk([self getLineBox])) getBottomPadding])) intValue] : 0;
    [super setStretchHeightWithInt:[((OrgOssPdfreporterEngineFillJRFillFrame_JRFillFrameElements *) nil_chk(frameContainer_)) getStretchHeight] - [((OrgOssPdfreporterEngineFillJRFillFrame_JRFillFrameElements *) nil_chk(frameContainer_)) getFirstY] + topPadding + bottomPadding];
  }
}

- (id<OrgOssPdfreporterEngineJRPrintElement>)fill {
  OrgOssPdfreporterEngineFillJRTemplatePrintFrame *printFrame = [[OrgOssPdfreporterEngineFillJRTemplatePrintFrame alloc] initWithOrgOssPdfreporterEngineFillJRTemplateFrame:[self getTemplate] withInt:elementId_];
  [((OrgOssPdfreporterEngineFillJRTemplatePrintFrame *) nil_chk(printFrame)) setUUIDWithOrgOssPdfreporterUsesJavaUtilUUID:[self getUUID]];
  [((OrgOssPdfreporterEngineFillJRTemplatePrintFrame *) nil_chk(printFrame)) setXWithInt:[self getX]];
  [((OrgOssPdfreporterEngineFillJRTemplatePrintFrame *) nil_chk(printFrame)) setYWithInt:[self getRelativeY]];
  [((OrgOssPdfreporterEngineFillJRTemplatePrintFrame *) nil_chk(printFrame)) setWidthWithInt:[self getWidth]];
  [((OrgOssPdfreporterEngineFillJRFillFrame_JRFillFrameElements *) nil_chk(frameContainer_)) fillElementsWithOrgOssPdfreporterEngineJRPrintElementContainer:printFrame];
  [((OrgOssPdfreporterEngineFillJRTemplatePrintFrame *) nil_chk(printFrame)) setHeightWithInt:[self getStretchHeight]];
  [self transferPropertiesWithOrgOssPdfreporterEngineJRPrintElement:printFrame];
  return printFrame;
}

- (OrgOssPdfreporterEngineFillJRTemplateFrame *)getTemplate {
  id<OrgOssPdfreporterEngineJRStyle> style = [self getStyle];
  id<JavaUtilMap> templatesMap;
  if (first_) {
    if (fillBottomBorder_) {
      templatesMap = templates_;
    }
    else {
      templatesMap = bottomTemplateFrames_;
    }
  }
  else {
    if (fillBottomBorder_) {
      templatesMap = topTemplateFrames_;
    }
    else {
      templatesMap = topBottomTemplateFrames_;
    }
  }
  OrgOssPdfreporterEngineFillJRTemplateFrame *boxTemplate = (OrgOssPdfreporterEngineFillJRTemplateFrame *) [((id<JavaUtilMap>) nil_chk(templatesMap)) getWithId:style];
  if (boxTemplate == nil) {
    boxTemplate = [self createFrameTemplate];
    [self transferPropertiesWithOrgOssPdfreporterEngineFillJRTemplateElement:boxTemplate];
    if (first_) {
      if (!fillBottomBorder_) {
        [boxTemplate copyBoxWithOrgOssPdfreporterEngineJRLineBox:[self getLineBox]];
        [OrgOssPdfreporterEngineUtilJRBoxUtil resetWithOrgOssPdfreporterEngineJRLineBox:[boxTemplate getLineBox] withBOOL:NO withBOOL:NO withBOOL:NO withBOOL:YES];
      }
    }
    else {
      if (fillBottomBorder_) {
        [boxTemplate copyBoxWithOrgOssPdfreporterEngineJRLineBox:[self getLineBox]];
        [OrgOssPdfreporterEngineUtilJRBoxUtil resetWithOrgOssPdfreporterEngineJRLineBox:[boxTemplate getLineBox] withBOOL:NO withBOOL:NO withBOOL:YES withBOOL:NO];
      }
      else {
        [boxTemplate copyBoxWithOrgOssPdfreporterEngineJRLineBox:[self getLineBox]];
        [OrgOssPdfreporterEngineUtilJRBoxUtil resetWithOrgOssPdfreporterEngineJRLineBox:[boxTemplate getLineBox] withBOOL:NO withBOOL:NO withBOOL:YES withBOOL:YES];
      }
    }
    boxTemplate = [((OrgOssPdfreporterEngineFillJRFillContext *) nil_chk(((OrgOssPdfreporterEngineFillJRBaseFiller *) nil_chk(filler_)).fillContext)) deduplicateWithId:boxTemplate];
    (void) [((id<JavaUtilMap>) nil_chk(templatesMap)) putWithId:style withId:boxTemplate];
  }
  return boxTemplate;
}

- (OrgOssPdfreporterEngineFillJRTemplateFrame *)createFrameTemplate {
  return [[OrgOssPdfreporterEngineFillJRTemplateFrame alloc] initWithOrgOssPdfreporterEngineJROrigin:[self getElementOrigin] withOrgOssPdfreporterEngineJRDefaultStyleProvider:[((OrgOssPdfreporterEngineJasperPrint *) nil_chk([((OrgOssPdfreporterEngineFillJRBaseFiller *) nil_chk(filler_)) getJasperPrint])) getDefaultStyleProvider] withOrgOssPdfreporterEngineFillJRFillFrame:self];
}

- (OrgOssPdfreporterEngineFillJRTemplateElement *)createElementTemplate {
  return [self createFrameTemplate];
}

- (void)resolveElementWithOrgOssPdfreporterEngineJRPrintElement:(id<OrgOssPdfreporterEngineJRPrintElement>)element
                                                       withChar:(char)evaluation {
}

- (IOSObjectArray *)getElements {
  return [((OrgOssPdfreporterEngineFillJRFillFrame_JRFillFrameElements *) nil_chk(frameContainer_)) getElements];
}

- (id<JavaUtilList>)getChildren {
  return [((OrgOssPdfreporterEngineFillJRFillFrame_JRFillFrameElements *) nil_chk(frameContainer_)) getChildren];
}

- (void)collectExpressionsWithOrgOssPdfreporterEngineJRExpressionCollector:(OrgOssPdfreporterEngineJRExpressionCollector *)collector {
  [((OrgOssPdfreporterEngineJRExpressionCollector *) nil_chk(collector)) collectWithOrgOssPdfreporterEngineJRFrame:self];
}

- (id<OrgOssPdfreporterEngineJRLineBox>)getLineBox {
  return lineBox_;
}

- (void)visitWithOrgOssPdfreporterEngineJRVisitor:(id<OrgOssPdfreporterEngineJRVisitor>)visitor {
  [((id<OrgOssPdfreporterEngineJRVisitor>) nil_chk(visitor)) visitFrameWithOrgOssPdfreporterEngineJRFrame:self];
}

- (id<OrgOssPdfreporterEngineJRElement>)getElementByKeyWithNSString:(NSString *)key {
  return [OrgOssPdfreporterEngineBaseJRBaseElementGroup getElementByKeyWithOrgOssPdfreporterEngineJRElementArray:[self getElements] withNSString:key];
}

- (id<OrgOssPdfreporterEngineFillJRFillCloneable>)createCloneWithOrgOssPdfreporterEngineFillJRFillCloneFactory:(OrgOssPdfreporterEngineFillJRFillCloneFactory *)factory {
  return [[OrgOssPdfreporterEngineFillJRFillFrame alloc] initWithOrgOssPdfreporterEngineFillJRFillFrame:self withOrgOssPdfreporterEngineFillJRFillCloneFactory:factory];
}

- (void)copyAllPropertiesTo:(id)copy {
  [super copyAllPropertiesTo:copy];
  OrgOssPdfreporterEngineFillJRFillFrame *typedCopy = (OrgOssPdfreporterEngineFillJRFillFrame *) copy;
  typedCopy.parentFrame = parentFrame_;
  typedCopy.lineBox = lineBox_;
  typedCopy.frameContainer = frameContainer_;
  typedCopy.bottomTemplateFrames = bottomTemplateFrames_;
  typedCopy.topTemplateFrames = topTemplateFrames_;
  typedCopy.topBottomTemplateFrames = topBottomTemplateFrames_;
  typedCopy.first = first_;
  typedCopy.fillBottomBorder = fillBottomBorder_;
  typedCopy.filling = filling_;
}

@end
@implementation OrgOssPdfreporterEngineFillJRFillFrame_JRFillFrameElements

@synthesize this$0 = this$0_;

- (id)initWithOrgOssPdfreporterEngineFillJRFillFrame:(OrgOssPdfreporterEngineFillJRFillFrame *)outer$
  withOrgOssPdfreporterEngineFillJRFillObjectFactory:(OrgOssPdfreporterEngineFillJRFillObjectFactory *)factory {
  if ((self = [super initWithOrgOssPdfreporterEngineFillJRBaseFiller:outer$.filler withOrgOssPdfreporterEngineJRElementGroup:outer$.parentFrame withOrgOssPdfreporterEngineFillJRFillObjectFactory:factory])) {
    this$0_ = outer$;
    [self initElements];
  }
  return self;
}

- (id)initWithOrgOssPdfreporterEngineFillJRFillFrame:(OrgOssPdfreporterEngineFillJRFillFrame *)outer$
withOrgOssPdfreporterEngineFillJRFillFrame_JRFillFrameElements:(OrgOssPdfreporterEngineFillJRFillFrame_JRFillFrameElements *)frameElements
   withOrgOssPdfreporterEngineFillJRFillCloneFactory:(OrgOssPdfreporterEngineFillJRFillCloneFactory *)factory {
  if ((self = [super initWithOrgOssPdfreporterEngineFillJRFillElementContainer:frameElements withOrgOssPdfreporterEngineFillJRFillCloneFactory:factory])) {
    this$0_ = outer$;
    [self initElements];
  }
  return self;
}

- (int)getContainerHeight {
  return [this$0_ getHeight] - [((JavaLangInteger *) nil_chk([((id<OrgOssPdfreporterEngineJRLineBox>) nil_chk([this$0_ getLineBox])) getTopPadding])) intValue] - [((JavaLangInteger *) nil_chk([((id<OrgOssPdfreporterEngineJRLineBox>) nil_chk([this$0_ getLineBox])) getBottomPadding])) intValue];
}

- (void)copyAllPropertiesTo:(id)copy {
  [super copyAllPropertiesTo:copy];
  OrgOssPdfreporterEngineFillJRFillFrame_JRFillFrameElements *typedCopy = (OrgOssPdfreporterEngineFillJRFillFrame_JRFillFrameElements *) copy;
  typedCopy.this$0 = this$0_;
}

@end
