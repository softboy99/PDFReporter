//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: pdfreporter-core/src/org/oss/pdfreporter/engine/fill/JRFillElement.java
//
//  Created by kendra on 9/27/13.
//

#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "java/lang/Boolean.h"
#include "java/lang/UnsupportedOperationException.h"
#include "java/util/ArrayList.h"
#include "java/util/Collection.h"
#include "java/util/HashMap.h"
#include "java/util/HashSet.h"
#include "java/util/Iterator.h"
#include "java/util/List.h"
#include "java/util/Map.h"
#include "java/util/Set.h"
#include "org/oss/pdfreporter/engine/JRConditionalStyle.h"
#include "org/oss/pdfreporter/engine/JRDefaultStyleProvider.h"
#include "org/oss/pdfreporter/engine/JRElement.h"
#include "org/oss/pdfreporter/engine/JRElementGroup.h"
#include "org/oss/pdfreporter/engine/JRExpression.h"
#include "org/oss/pdfreporter/engine/JRExpressionChunk.h"
#include "org/oss/pdfreporter/engine/JRExpressionCollector.h"
#include "org/oss/pdfreporter/engine/JRGroup.h"
#include "org/oss/pdfreporter/engine/JROrigin.h"
#include "org/oss/pdfreporter/engine/JRPrintElement.h"
#include "org/oss/pdfreporter/engine/JRPropertiesHolder.h"
#include "org/oss/pdfreporter/engine/JRPropertiesMap.h"
#include "org/oss/pdfreporter/engine/JRPropertiesUtil.h"
#include "org/oss/pdfreporter/engine/JRPropertyExpression.h"
#include "org/oss/pdfreporter/engine/JRStyle.h"
#include "org/oss/pdfreporter/engine/JRVisitor.h"
#include "org/oss/pdfreporter/engine/JasperPrint.h"
#include "org/oss/pdfreporter/engine/JasperReport.h"
#include "org/oss/pdfreporter/engine/JasperReportsContext.h"
#include "org/oss/pdfreporter/engine/base/JRBaseStyle.h"
#include "org/oss/pdfreporter/engine/fill/FillContainerContext.h"
#include "org/oss/pdfreporter/engine/fill/FillStyleProviderContext.h"
#include "org/oss/pdfreporter/engine/fill/JRBaseFiller.h"
#include "org/oss/pdfreporter/engine/fill/JREvaluationTime.h"
#include "org/oss/pdfreporter/engine/fill/JRFillBand.h"
#include "org/oss/pdfreporter/engine/fill/JRFillCloneFactory.h"
#include "org/oss/pdfreporter/engine/fill/JRFillCloneable.h"
#include "org/oss/pdfreporter/engine/fill/JRFillContext.h"
#include "org/oss/pdfreporter/engine/fill/JRFillElement.h"
#include "org/oss/pdfreporter/engine/fill/JRFillElementContainer.h"
#include "org/oss/pdfreporter/engine/fill/JRFillElementGroup.h"
#include "org/oss/pdfreporter/engine/fill/JRFillExpressionEvaluator.h"
#include "org/oss/pdfreporter/engine/fill/JRFillField.h"
#include "org/oss/pdfreporter/engine/fill/JRFillGroup.h"
#include "org/oss/pdfreporter/engine/fill/JRFillObjectFactory.h"
#include "org/oss/pdfreporter/engine/fill/JRFillVariable.h"
#include "org/oss/pdfreporter/engine/fill/JROriginProvider.h"
#include "org/oss/pdfreporter/engine/fill/JRRecordedValues.h"
#include "org/oss/pdfreporter/engine/fill/JRRecordedValuesPrintElement.h"
#include "org/oss/pdfreporter/engine/fill/JRTemplateElement.h"
#include "org/oss/pdfreporter/engine/fill/JRTemplatePrintElement.h"
#include "org/oss/pdfreporter/engine/style/StyleProvider.h"
#include "org/oss/pdfreporter/engine/style/StyleProviderFactory.h"
#include "org/oss/pdfreporter/engine/type/CalculationEnum.h"
#include "org/oss/pdfreporter/engine/type/EvaluationTimeEnum.h"
#include "org/oss/pdfreporter/engine/type/ModeEnum.h"
#include "org/oss/pdfreporter/engine/type/PositionTypeEnum.h"
#include "org/oss/pdfreporter/engine/type/ResetTypeEnum.h"
#include "org/oss/pdfreporter/engine/type/StretchTypeEnum.h"
#include "org/oss/pdfreporter/engine/util/JRStyleResolver.h"
#include "org/oss/pdfreporter/geometry/IColor.h"
#include "org/oss/pdfreporter/uses/java/util/UUID.h"

@implementation OrgOssPdfreporterEngineFillJRFillElement

@synthesize parent = parent_;
@synthesize providerStyle = providerStyle_;
@synthesize templates = templates_;
@synthesize styleProviders = styleProviders_;
@synthesize filler = filler_;
@synthesize expressionEvaluator = expressionEvaluator_;
@synthesize defaultStyleProvider = defaultStyleProvider_;
@synthesize printWhenGroupChanges = printWhenGroupChanges_;
@synthesize elementGroup = elementGroup_;
@synthesize band = band_;
@synthesize originProvider = originProvider_;
@synthesize elementId = elementId_;
@synthesize isPrintWhenExpressionNull_ = isPrintWhenExpressionNull__;
@synthesize isPrintWhenTrue_ = isPrintWhenTrue__;
@synthesize isToPrint_ = isToPrint__;
@synthesize isReprinted_ = isReprinted__;
@synthesize isAlreadyPrinted_ = isAlreadyPrinted__;
@synthesize dependantElements = dependantElements_;
@synthesize relativeY = relativeY_;
@synthesize stretchHeight = stretchHeight_;
@synthesize x = x_;
@synthesize y = y_;
@synthesize width = width_;
@synthesize height = height_;
@synthesize isValueRepeating_ = isValueRepeating__;
@synthesize currentEvaluation = currentEvaluation_;
@synthesize delayedEvaluationsMap = delayedEvaluationsMap_;
@synthesize conditionalStylesContainer = conditionalStylesContainer_;
@synthesize fillContainerContext = fillContainerContext_;
@synthesize initStyle = initStyle_;
@synthesize currentStyle = currentStyle_;
@synthesize shrinkable = shrinkable_;
@synthesize staticProperties = staticProperties_;
@synthesize dynamicProperties = dynamicProperties_;
@synthesize mergedProperties = mergedProperties_;

- (id)initWithOrgOssPdfreporterEngineFillJRBaseFiller:(OrgOssPdfreporterEngineFillJRBaseFiller *)filler
                 withOrgOssPdfreporterEngineJRElement:(id<OrgOssPdfreporterEngineJRElement>)element
   withOrgOssPdfreporterEngineFillJRFillObjectFactory:(OrgOssPdfreporterEngineFillJRFillObjectFactory *)factory {
  if ((self = [super init])) {
    templates_ = [[JavaUtilHashMap alloc] init];
    isPrintWhenExpressionNull__ = YES;
    isPrintWhenTrue__ = YES;
    isToPrint__ = YES;
    dependantElements_ = [[JavaUtilArrayList alloc] init];
    [((OrgOssPdfreporterEngineFillJRFillObjectFactory *) nil_chk(factory)) putWithId:element withId:self];
    self.parent = element;
    self.filler = filler;
    self.expressionEvaluator = [((OrgOssPdfreporterEngineFillJRFillObjectFactory *) nil_chk(factory)) getExpressionEvaluator];
    self.defaultStyleProvider = [((OrgOssPdfreporterEngineFillJRFillObjectFactory *) nil_chk(factory)) getDefaultStyleProvider];
    elementId_ = [((OrgOssPdfreporterEngineFillJRBaseFiller *) nil_chk(filler)) assignElementIdWithOrgOssPdfreporterEngineFillJRFillElement:self];
    printWhenGroupChanges_ = [((OrgOssPdfreporterEngineFillJRFillObjectFactory *) nil_chk(factory)) getGroupWithOrgOssPdfreporterEngineJRGroup:[((id<OrgOssPdfreporterEngineJRElement>) nil_chk(element)) getPrintWhenGroupChanges]];
    elementGroup_ = (OrgOssPdfreporterEngineFillJRFillElementGroup *) [((OrgOssPdfreporterEngineFillJRFillObjectFactory *) nil_chk(factory)) getVisitResultWithOrgOssPdfreporterEngineJRVisitable:[((id<OrgOssPdfreporterEngineJRElement>) nil_chk(element)) getElementGroup]];
    x_ = [((id<OrgOssPdfreporterEngineJRElement>) nil_chk(element)) getX];
    y_ = [((id<OrgOssPdfreporterEngineJRElement>) nil_chk(element)) getY];
    width_ = [((id<OrgOssPdfreporterEngineJRElement>) nil_chk(element)) getWidth];
    height_ = [((id<OrgOssPdfreporterEngineJRElement>) nil_chk(element)) getHeight];
    staticProperties_ = [((id<OrgOssPdfreporterEngineJRElement>) nil_chk(element)) hasProperties] ? [((OrgOssPdfreporterEngineJRPropertiesMap *) nil_chk([((id<OrgOssPdfreporterEngineJRElement>) nil_chk(element)) getPropertiesMap])) cloneProperties] : nil;
    mergedProperties_ = staticProperties_;
    [((OrgOssPdfreporterEngineFillJRFillObjectFactory *) nil_chk(factory)) registerDelayedStyleSetterWithOrgOssPdfreporterEngineJRStyleSetter:self withOrgOssPdfreporterEngineJRStyleContainer:parent_];
    [self initStyleProviders];
  }
  return self;
}

- (id)initWithOrgOssPdfreporterEngineFillJRFillElement:(OrgOssPdfreporterEngineFillJRFillElement *)element
     withOrgOssPdfreporterEngineFillJRFillCloneFactory:(OrgOssPdfreporterEngineFillJRFillCloneFactory *)factory {
  if ((self = [super init])) {
    templates_ = [[JavaUtilHashMap alloc] init];
    isPrintWhenExpressionNull__ = YES;
    isPrintWhenTrue__ = YES;
    isToPrint__ = YES;
    dependantElements_ = [[JavaUtilArrayList alloc] init];
    [((OrgOssPdfreporterEngineFillJRFillCloneFactory *) nil_chk(factory)) putWithOrgOssPdfreporterEngineFillJRFillCloneable:element withOrgOssPdfreporterEngineFillJRFillCloneable:self];
    self.parent = ((OrgOssPdfreporterEngineFillJRFillElement *) nil_chk(element)).parent;
    self.filler = ((OrgOssPdfreporterEngineFillJRFillElement *) nil_chk(element)).filler;
    self.expressionEvaluator = ((OrgOssPdfreporterEngineFillJRFillElement *) nil_chk(element)).expressionEvaluator;
    self.defaultStyleProvider = ((OrgOssPdfreporterEngineFillJRFillElement *) nil_chk(element)).defaultStyleProvider;
    self.originProvider = ((OrgOssPdfreporterEngineFillJRFillElement *) nil_chk(element)).originProvider;
    elementId_ = ((OrgOssPdfreporterEngineFillJRFillElement *) nil_chk(element)).elementId;
    printWhenGroupChanges_ = ((OrgOssPdfreporterEngineFillJRFillElement *) nil_chk(element)).printWhenGroupChanges;
    elementGroup_ = (OrgOssPdfreporterEngineFillJRFillElementGroup *) [((OrgOssPdfreporterEngineFillJRFillCloneFactory *) nil_chk(factory)) getCloneWithOrgOssPdfreporterEngineFillJRFillCloneable:(OrgOssPdfreporterEngineFillJRFillElementGroup *) [((OrgOssPdfreporterEngineFillJRFillElement *) nil_chk(element)) getElementGroup]];
    x_ = [((OrgOssPdfreporterEngineFillJRFillElement *) nil_chk(element)) getX];
    y_ = [((OrgOssPdfreporterEngineFillJRFillElement *) nil_chk(element)) getY];
    width_ = [((OrgOssPdfreporterEngineFillJRFillElement *) nil_chk(element)) getWidth];
    height_ = [((OrgOssPdfreporterEngineFillJRFillElement *) nil_chk(element)) getHeight];
    templates_ = ((OrgOssPdfreporterEngineFillJRFillElement *) nil_chk(element)).templates;
    initStyle_ = ((OrgOssPdfreporterEngineFillJRFillElement *) nil_chk(element)).initStyle;
    shrinkable_ = ((OrgOssPdfreporterEngineFillJRFillElement *) nil_chk(element)).shrinkable;
    staticProperties_ = ((OrgOssPdfreporterEngineFillJRFillElement *) nil_chk(element)).staticProperties == nil ? nil : [((OrgOssPdfreporterEngineJRPropertiesMap *) nil_chk(((OrgOssPdfreporterEngineFillJRFillElement *) nil_chk(element)).staticProperties)) cloneProperties];
    mergedProperties_ = staticProperties_;
    styleProviders_ = ((OrgOssPdfreporterEngineFillJRFillElement *) nil_chk(element)).styleProviders;
  }
  return self;
}

- (id<OrgOssPdfreporterEngineJRDefaultStyleProvider>)getDefaultStyleProvider {
  return defaultStyleProvider_;
}

- (OrgOssPdfreporterUsesJavaUtilUUID *)getUUID {
  return [((id<OrgOssPdfreporterEngineJRElement>) nil_chk(parent_)) getUUID];
}

- (NSString *)getKey {
  return [((id<OrgOssPdfreporterEngineJRElement>) nil_chk(parent_)) getKey];
}

- (OrgOssPdfreporterEngineTypePositionTypeEnumEnum *)getPositionTypeValue {
  return [((id<OrgOssPdfreporterEngineJRElement>) nil_chk(parent_)) getPositionTypeValue];
}

- (void)setPositionTypeWithOrgOssPdfreporterEngineTypePositionTypeEnumEnum:(OrgOssPdfreporterEngineTypePositionTypeEnumEnum *)positionType {
  @throw [[JavaLangUnsupportedOperationException alloc] init];
}

- (OrgOssPdfreporterEngineTypeStretchTypeEnumEnum *)getStretchTypeValue {
  return [((id<OrgOssPdfreporterEngineJRElement>) nil_chk(parent_)) getStretchTypeValue];
}

- (void)setStretchTypeWithOrgOssPdfreporterEngineTypeStretchTypeEnumEnum:(OrgOssPdfreporterEngineTypeStretchTypeEnumEnum *)stretchType {
  @throw [[JavaLangUnsupportedOperationException alloc] init];
}

- (BOOL)isPrintRepeatedValues {
  return [((id<OrgOssPdfreporterEngineJRElement>) nil_chk(parent_)) isPrintRepeatedValues];
}

- (void)setPrintRepeatedValuesWithBOOL:(BOOL)isPrintRepeatedValues {
}

- (OrgOssPdfreporterEngineTypeModeEnumEnum *)getModeValue {
  return [OrgOssPdfreporterEngineUtilJRStyleResolver getModeWithOrgOssPdfreporterEngineJRCommonElement:self withOrgOssPdfreporterEngineTypeModeEnumEnum:[OrgOssPdfreporterEngineTypeModeEnumEnum OPAQUE]];
}

- (OrgOssPdfreporterEngineTypeModeEnumEnum *)getOwnModeValue {
  return providerStyle_ == nil || [((id<OrgOssPdfreporterEngineJRStyle>) nil_chk(providerStyle_)) getOwnModeValue] == nil ? [((id<OrgOssPdfreporterEngineJRElement>) nil_chk(parent_)) getOwnModeValue] : [((id<OrgOssPdfreporterEngineJRStyle>) nil_chk(providerStyle_)) getOwnModeValue];
}

- (void)setModeWithOrgOssPdfreporterEngineTypeModeEnumEnum:(OrgOssPdfreporterEngineTypeModeEnumEnum *)modeValue {
}

- (int)getX {
  return x_;
}

- (void)setXWithInt:(int)x {
  self.x = x;
}

- (void)setYWithInt:(int)y {
  self.y = y;
}

- (int)getY {
  return y_;
}

- (int)getWidth {
  return width_;
}

- (void)setWidthWithInt:(int)width {
  self.width = width;
}

- (void)setHeightWithInt:(int)height {
  self.height = height;
}

- (int)getHeight {
  return height_;
}

- (BOOL)isRemoveLineWhenBlank {
  return [((id<OrgOssPdfreporterEngineJRElement>) nil_chk(parent_)) isRemoveLineWhenBlank];
}

- (void)setRemoveLineWhenBlankWithBOOL:(BOOL)isRemoveLine {
}

- (BOOL)isPrintInFirstWholeBand {
  return [((id<OrgOssPdfreporterEngineJRElement>) nil_chk(parent_)) isPrintInFirstWholeBand];
}

- (void)setPrintInFirstWholeBandWithBOOL:(BOOL)isPrint {
}

- (BOOL)isPrintWhenDetailOverflows {
  return [((id<OrgOssPdfreporterEngineJRElement>) nil_chk(parent_)) isPrintWhenDetailOverflows];
}

- (void)setPrintWhenDetailOverflowsWithBOOL:(BOOL)isPrint {
}

- (id<OrgOssPdfreporterGeometryIColor>)getForecolor {
  return [OrgOssPdfreporterEngineUtilJRStyleResolver getForecolorWithOrgOssPdfreporterEngineJRCommonElement:self];
}

- (id<OrgOssPdfreporterGeometryIColor>)getOwnForecolor {
  return providerStyle_ == nil || [((id<OrgOssPdfreporterEngineJRStyle>) nil_chk(providerStyle_)) getOwnForecolor] == nil ? [((id<OrgOssPdfreporterEngineJRElement>) nil_chk(parent_)) getOwnForecolor] : [((id<OrgOssPdfreporterEngineJRStyle>) nil_chk(providerStyle_)) getOwnForecolor];
}

- (void)setForecolorWithOrgOssPdfreporterGeometryIColor:(id<OrgOssPdfreporterGeometryIColor>)forecolor {
}

- (id<OrgOssPdfreporterGeometryIColor>)getBackcolor {
  return [OrgOssPdfreporterEngineUtilJRStyleResolver getBackcolorWithOrgOssPdfreporterEngineJRCommonElement:self];
}

- (id<OrgOssPdfreporterGeometryIColor>)getOwnBackcolor {
  return providerStyle_ == nil || [((id<OrgOssPdfreporterEngineJRStyle>) nil_chk(providerStyle_)) getOwnBackcolor] == nil ? [((id<OrgOssPdfreporterEngineJRElement>) nil_chk(parent_)) getOwnBackcolor] : [((id<OrgOssPdfreporterEngineJRStyle>) nil_chk(providerStyle_)) getOwnBackcolor];
}

- (void)setBackcolorWithOrgOssPdfreporterGeometryIColor:(id<OrgOssPdfreporterGeometryIColor>)backcolor {
}

- (id<OrgOssPdfreporterEngineJRExpression>)getPrintWhenExpression {
  return [((id<OrgOssPdfreporterEngineJRElement>) nil_chk(parent_)) getPrintWhenExpression];
}

- (id<OrgOssPdfreporterEngineJRGroup>)getPrintWhenGroupChanges {
  return printWhenGroupChanges_;
}

- (id<OrgOssPdfreporterEngineJRElementGroup>)getElementGroup {
  return elementGroup_;
}

- (BOOL)isPrintWhenExpressionNull {
  return isPrintWhenExpressionNull__;
}

- (void)setPrintWhenExpressionNullWithBOOL:(BOOL)isPrintWhenExpressionNull {
  self.isPrintWhenExpressionNull_ = isPrintWhenExpressionNull;
}

- (BOOL)isPrintWhenTrue {
  return isPrintWhenTrue__;
}

- (void)setPrintWhenTrueWithBOOL:(BOOL)isPrintWhenTrue {
  self.isPrintWhenTrue_ = isPrintWhenTrue;
}

- (BOOL)isToPrint {
  return isToPrint__;
}

- (void)setToPrintWithBOOL:(BOOL)isToPrint {
  self.isToPrint_ = isToPrint;
}

- (BOOL)isReprinted {
  return isReprinted__;
}

- (void)setReprintedWithBOOL:(BOOL)isReprinted {
  self.isReprinted_ = isReprinted;
}

- (BOOL)isAlreadyPrinted {
  return isAlreadyPrinted__;
}

- (void)setAlreadyPrintedWithBOOL:(BOOL)isAlreadyPrinted {
  self.isAlreadyPrinted_ = isAlreadyPrinted;
}

- (IOSObjectArray *)getGroupElements {
  IOSObjectArray *groupElements = nil;
  if (elementGroup_ != nil) {
    groupElements = [elementGroup_ getElements];
  }
  return groupElements;
}

- (id<JavaUtilCollection>)getDependantElements {
  return dependantElements_;
}

- (void)addDependantElementWithOrgOssPdfreporterEngineJRElement:(id<OrgOssPdfreporterEngineJRElement>)element {
  [((id<JavaUtilCollection>) nil_chk(dependantElements_)) addWithId:element];
}

- (int)getRelativeY {
  return relativeY_;
}

- (void)setRelativeYWithInt:(int)relativeY {
  self.relativeY = relativeY;
}

- (int)getStretchHeight {
  return stretchHeight_;
}

- (void)setStretchHeightWithInt:(int)stretchHeight {
  if (stretchHeight > [self getHeight] || (shrinkable_ && [self isRemoveLineWhenBlank])) {
    self.stretchHeight = stretchHeight;
  }
  else {
    self.stretchHeight = [self getHeight];
  }
}

- (OrgOssPdfreporterEngineFillJRFillBand *)getBand {
  return band_;
}

- (void)setBandWithOrgOssPdfreporterEngineFillJRFillBand:(OrgOssPdfreporterEngineFillJRFillBand *)band {
  self.band = band;
  if (self.originProvider == nil) {
    [self setOriginProviderWithOrgOssPdfreporterEngineFillJROriginProvider:band];
  }
}

- (void)initStyleProviders OBJC_METHOD_FAMILY_NONE {
  id<JavaUtilList> styleProviderFactories = [((id<OrgOssPdfreporterEngineJasperReportsContext>) nil_chk([((OrgOssPdfreporterEngineFillJRBaseFiller *) nil_chk(filler_)) getJasperReportsContext])) getExtensionsWithIOSClass:[IOSClass classWithProtocol:@protocol(OrgOssPdfreporterEngineStyleStyleProviderFactory)]];
  if (styleProviderFactories != nil && [((id<JavaUtilList>) nil_chk(styleProviderFactories)) size] > 0) {
    OrgOssPdfreporterEngineFillFillStyleProviderContext *styleProviderContext = [[OrgOssPdfreporterEngineFillFillStyleProviderContext alloc] initWithOrgOssPdfreporterEngineFillJRFillElement:self];
    {
      id<JavaUtilIterator> iter__ = [((id<JavaUtilList>) nil_chk(styleProviderFactories)) iterator];
      while ([((id<JavaUtilIterator>) nil_chk(iter__)) hasNext]) {
        id<OrgOssPdfreporterEngineStyleStyleProviderFactory> styleProviderFactory = [((id<JavaUtilIterator>) nil_chk(iter__)) next];
        id<OrgOssPdfreporterEngineStyleStyleProvider> styleProvider = [((id<OrgOssPdfreporterEngineStyleStyleProviderFactory>) nil_chk(styleProviderFactory)) getStyleProviderWithOrgOssPdfreporterEngineStyleStyleProviderContext:styleProviderContext withOrgOssPdfreporterEngineJasperReportsContext:[((OrgOssPdfreporterEngineFillJRBaseFiller *) nil_chk(filler_)) getJasperReportsContext]];
        if (styleProvider != nil) {
          if (styleProviders_ == nil) {
            styleProviders_ = [[JavaUtilArrayList alloc] init];
          }
          [((id<JavaUtilList>) nil_chk(styleProviders_)) addWithId:styleProvider];
        }
      }
    }
  }
}

- (void)reset {
  relativeY_ = y_;
  stretchHeight_ = height_;
  if (elementGroup_ != nil) {
    [elementGroup_ reset];
  }
}

- (void)setCurrentEvaluationWithChar:(char)evaluation {
  currentEvaluation_ = evaluation;
}

- (void)evaluateWithChar:(char)evaluation {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
}

- (void)evaluateStyleWithChar:(char)evaluation {
  providerStyle_ = nil;
  if (styleProviders_ != nil && [((id<JavaUtilList>) nil_chk(styleProviders_)) size] > 0) {
    {
      id<JavaUtilIterator> iter__ = [((id<JavaUtilList>) nil_chk(styleProviders_)) iterator];
      while ([((id<JavaUtilIterator>) nil_chk(iter__)) hasNext]) {
        id<OrgOssPdfreporterEngineStyleStyleProvider> styleProvider = [((id<JavaUtilIterator>) nil_chk(iter__)) next];
        id<OrgOssPdfreporterEngineJRStyle> style = [((id<OrgOssPdfreporterEngineStyleStyleProvider>) nil_chk(styleProvider)) getStyleWithChar:evaluation];
        if (style != nil) {
          if (providerStyle_ == nil) {
            providerStyle_ = [[OrgOssPdfreporterEngineBaseJRBaseStyle alloc] init];
          }
          [OrgOssPdfreporterEngineUtilJRStyleResolver appendStyleWithOrgOssPdfreporterEngineJRStyle:providerStyle_ withOrgOssPdfreporterEngineJRStyle:style];
        }
      }
    }
  }
}

- (void)evaluatePrintWhenExpressionWithChar:(char)evaluation {
  BOOL isExprNull = YES;
  BOOL isExprTrue = NO;
  id<OrgOssPdfreporterEngineJRExpression> expression = [self getPrintWhenExpression];
  if (expression != nil) {
    isExprNull = NO;
    JavaLangBoolean *printWhenExpressionValue = (JavaLangBoolean *) [self evaluateExpressionWithOrgOssPdfreporterEngineJRExpression:expression withChar:evaluation];
    if (printWhenExpressionValue == nil) {
      isExprTrue = NO;
    }
    else {
      isExprTrue = [printWhenExpressionValue booleanValue];
    }
  }
  [self setPrintWhenExpressionNullWithBOOL:isExprNull];
  [self setPrintWhenTrueWithBOOL:isExprTrue];
}

- (void)rewind {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
}

- (id<OrgOssPdfreporterEngineJRPrintElement>)fill {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}

- (OrgOssPdfreporterEngineFillJRTemplateElement *)getElementTemplate {
  OrgOssPdfreporterEngineFillJRTemplateElement *template_ = nil;
  id<OrgOssPdfreporterEngineJRStyle> style = nil;
  if (providerStyle_ == nil) {
    style = [self getStyle];
    template_ = [self getTemplateWithOrgOssPdfreporterEngineJRStyle:style];
  }
  if (template_ == nil) {
    template_ = [self createElementTemplate];
    [self transferPropertiesWithOrgOssPdfreporterEngineFillJRTemplateElement:template_];
    template_ = [((OrgOssPdfreporterEngineFillJRFillContext *) nil_chk(((OrgOssPdfreporterEngineFillJRBaseFiller *) nil_chk(filler_)).fillContext)) deduplicateWithId:template_];
    if (providerStyle_ == nil) {
      [self registerTemplateWithOrgOssPdfreporterEngineJRStyle:style withOrgOssPdfreporterEngineFillJRTemplateElement:template_];
    }
  }
  return template_;
}

- (OrgOssPdfreporterEngineFillJRTemplateElement *)createElementTemplate {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}

- (BOOL)prepareWithInt:(int)availableHeight
              withBOOL:(BOOL)isOverflow {
  if ([self isPrintWhenExpressionNull] || (![self isPrintWhenExpressionNull] && [self isPrintWhenTrue])) {
    [self setToPrintWithBOOL:YES];
  }
  else {
    [self setToPrintWithBOOL:NO];
  }
  [self setReprintedWithBOOL:NO];
  return NO;
}

- (void)stretchElementWithInt:(int)bandStretch {
  switch ([[self getStretchTypeValue] ordinal]) {
    case OrgOssPdfreporterEngineTypeStretchTypeEnum_RELATIVE_TO_BAND_HEIGHT:
    {
      [self setStretchHeightWithInt:[self getHeight] + bandStretch];
      break;
    }
    case OrgOssPdfreporterEngineTypeStretchTypeEnum_RELATIVE_TO_TALLEST_OBJECT:
    {
      if (elementGroup_ != nil) {
        [self setStretchHeightWithInt:[self getHeight] + [elementGroup_ getStretchHeightDiff]];
      }
      break;
    }
    case OrgOssPdfreporterEngineTypeStretchTypeEnum_NO_STRETCH:
    default:
    {
      break;
    }
  }
}

- (void)moveDependantElements {
  id<JavaUtilCollection> elements = [self getDependantElements];
  if (elements != nil && [((id<JavaUtilCollection>) nil_chk(elements)) size] > 0) {
    OrgOssPdfreporterEngineFillJRFillElement *element = nil;
    int diffY = 0;
    for (id<JavaUtilIterator> it = [((id<JavaUtilCollection>) nil_chk(elements)) iterator]; [((id<JavaUtilIterator>) nil_chk(it)) hasNext]; ) {
      element = (OrgOssPdfreporterEngineFillJRFillElement *) [((id<JavaUtilIterator>) nil_chk(it)) next];
      diffY = [((OrgOssPdfreporterEngineFillJRFillElement *) nil_chk(element)) getY] - [self getY] - [self getHeight] - ([((OrgOssPdfreporterEngineFillJRFillElement *) nil_chk(element)) getRelativeY] - [self getRelativeY] - [self getStretchHeight]);
      if (diffY < 0) {
        diffY = 0;
      }
      [((OrgOssPdfreporterEngineFillJRFillElement *) nil_chk(element)) setRelativeYWithInt:[((OrgOssPdfreporterEngineFillJRFillElement *) nil_chk(element)) getRelativeY] + diffY];
    }
  }
}

- (void)resolveElementWithOrgOssPdfreporterEngineJRPrintElement:(id<OrgOssPdfreporterEngineJRPrintElement>)element
                                                       withChar:(char)evaluation {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
}

- (void)performDelayedEvaluationWithOrgOssPdfreporterEngineJRPrintElement:(id<OrgOssPdfreporterEngineJRPrintElement>)element
                                                                 withChar:(char)evaluation {
  BOOL updateTemplate = NO;
  if ([self isDelayedStyleEvaluation]) {
    id<OrgOssPdfreporterEngineJRStyle> elementStyle = initStyle_;
    if (elementStyle == nil) {
      elementStyle = [((OrgOssPdfreporterEngineFillJRBaseFiller *) nil_chk(filler_)) getDefaultStyle];
    }
    if (elementStyle != nil) {
      id<OrgOssPdfreporterEngineJRStyle> evaluatedStyle = [((OrgOssPdfreporterEngineFillJRFillElementContainer *) nil_chk(conditionalStylesContainer_)) evaluateConditionalStyleWithOrgOssPdfreporterEngineJRStyle:elementStyle withChar:evaluation];
      if (evaluatedStyle != [((id<OrgOssPdfreporterEngineJRPrintElement>) nil_chk(element)) getStyle]) {
        self.currentStyle = evaluatedStyle;
        updateTemplate = YES;
      }
    }
  }
  [self resolveElementWithOrgOssPdfreporterEngineJRPrintElement:element withChar:evaluation];
  if (updateTemplate || providerStyle_ != nil) {
    OrgOssPdfreporterEngineFillJRTemplateElement *newTemplate = [self getElementTemplate];
    [((OrgOssPdfreporterEngineFillJRTemplatePrintElement *) element) updateElementTemplateWithOrgOssPdfreporterEngineFillJRTemplateElement:newTemplate];
  }
  self.currentStyle = nil;
}

- (id)evaluateExpressionWithOrgOssPdfreporterEngineJRExpression:(id<OrgOssPdfreporterEngineJRExpression>)expression
                                                       withChar:(char)evaluation {
  return [((id<OrgOssPdfreporterEngineFillJRFillExpressionEvaluator>) nil_chk(expressionEvaluator_)) evaluateWithOrgOssPdfreporterEngineJRExpression:expression withChar:evaluation];
}

- (BOOL)isValueRepeating {
  return isValueRepeating__;
}

- (void)setValueRepeatingWithBOOL:(BOOL)isValueRepeating {
  self.isValueRepeating_ = isValueRepeating;
}

- (OrgOssPdfreporterEngineFillJRFillVariable *)getVariableWithNSString:(NSString *)variableName {
  return [((OrgOssPdfreporterEngineFillJRBaseFiller *) nil_chk(filler_)) getVariableWithNSString:variableName];
}

- (OrgOssPdfreporterEngineFillJRFillField *)getFieldWithNSString:(NSString *)fieldName {
  return [((OrgOssPdfreporterEngineFillJRBaseFiller *) nil_chk(filler_)) getFieldWithNSString:fieldName];
}

- (OrgOssPdfreporterEngineTypeEvaluationTimeEnumEnum *)getEvaluationTimeValue {
  return [OrgOssPdfreporterEngineTypeEvaluationTimeEnumEnum NOW];
}

- (void)resolveElementWithOrgOssPdfreporterEngineJRPrintElement:(id<OrgOssPdfreporterEngineJRPrintElement>)element
                                                       withChar:(char)evaluation
                withOrgOssPdfreporterEngineFillJREvaluationTime:(OrgOssPdfreporterEngineFillJREvaluationTime *)evaluationTime {
  OrgOssPdfreporterEngineTypeEvaluationTimeEnumEnum *evaluationTimeType = [self getEvaluationTimeValue];
  switch ([evaluationTimeType ordinal]) {
    case OrgOssPdfreporterEngineTypeEvaluationTimeEnum_NOW:
    break;
    case OrgOssPdfreporterEngineTypeEvaluationTimeEnum_AUTO:
    [self delayedEvaluateWithOrgOssPdfreporterEngineFillJRRecordedValuesPrintElement:(id<OrgOssPdfreporterEngineFillJRRecordedValuesPrintElement>) element withOrgOssPdfreporterEngineFillJREvaluationTime:evaluationTime withChar:evaluation];
    break;
    default:
    [self performDelayedEvaluationWithOrgOssPdfreporterEngineJRPrintElement:element withChar:evaluation];
    break;
  }
}

- (void)initDelayedEvaluations OBJC_METHOD_FAMILY_NONE {
  if ([self getEvaluationTimeValue] == [OrgOssPdfreporterEngineTypeEvaluationTimeEnumEnum AUTO] && delayedEvaluationsMap_ == nil) {
    delayedEvaluationsMap_ = [[JavaUtilHashMap alloc] init];
    [self collectDelayedEvaluations];
  }
}

- (void)collectDelayedEvaluations {
  if ([self isDelayedStyleEvaluation]) {
    [self collectStyleDelayedEvaluations];
    [self collectStyleProviderDelayedEvaluations];
  }
}

- (void)collectStyleDelayedEvaluations {
  id<OrgOssPdfreporterEngineJRStyle> elementStyle = initStyle_;
  if (elementStyle == nil) {
    elementStyle = [((OrgOssPdfreporterEngineFillJRBaseFiller *) nil_chk(filler_)) getDefaultStyle];
  }
  if (elementStyle != nil) {
    id<OrgOssPdfreporterEngineJRStyle> style = elementStyle;
    while (style != nil) {
      [self collectDelayedEvaluationsWithOrgOssPdfreporterEngineJRStyle:style];
      style = [((id<OrgOssPdfreporterEngineJRStyle>) nil_chk(style)) getStyle];
    }
  }
}

- (void)collectDelayedEvaluationsWithOrgOssPdfreporterEngineJRStyle:(id<OrgOssPdfreporterEngineJRStyle>)style {
  IOSObjectArray *conditionalStyles = [((id<OrgOssPdfreporterEngineJRStyle>) nil_chk(style)) getConditionalStyles];
  if (conditionalStyles != nil && (int) [((IOSObjectArray *) nil_chk(conditionalStyles)) count] > 0) {
    for (int i = 0; i < (int) [((IOSObjectArray *) nil_chk(conditionalStyles)) count]; i++) {
      [self collectDelayedEvaluationsWithOrgOssPdfreporterEngineJRExpression:[((id<OrgOssPdfreporterEngineJRConditionalStyle>) nil_chk([((IOSObjectArray *) nil_chk(conditionalStyles)) objectAtIndex:i])) getConditionExpression]];
    }
  }
}

- (void)collectDelayedEvaluationsWithOrgOssPdfreporterEngineJRExpression:(id<OrgOssPdfreporterEngineJRExpression>)expression {
  if (expression != nil) {
    IOSObjectArray *chunks = [expression getChunks];
    if (chunks != nil) {
      for (int i = 0; i < (int) [chunks count]; i++) {
        id<OrgOssPdfreporterEngineJRExpressionChunk> chunk = [chunks objectAtIndex:i];
        switch ([((id<OrgOssPdfreporterEngineJRExpressionChunk>) nil_chk(chunk)) getType]) {
          case OrgOssPdfreporterEngineJRExpressionChunk_TYPE_FIELD:
          {
            OrgOssPdfreporterEngineFillJRFillElement_DelayedEvaluations *delayedEvaluations = [self getDelayedEvaluationsWithOrgOssPdfreporterEngineFillJREvaluationTime:[OrgOssPdfreporterEngineFillJREvaluationTime EVALUATION_TIME_NOW]];
            [((id<JavaUtilSet>) nil_chk(((OrgOssPdfreporterEngineFillJRFillElement_DelayedEvaluations *) nil_chk(delayedEvaluations)).fields)) addWithId:[((id<OrgOssPdfreporterEngineJRExpressionChunk>) nil_chk(chunk)) getText]];
            break;
          }
          case OrgOssPdfreporterEngineJRExpressionChunk_TYPE_VARIABLE:
          {
            OrgOssPdfreporterEngineFillJREvaluationTime *time = [self autogetVariableEvaluationTimeWithNSString:[((id<OrgOssPdfreporterEngineJRExpressionChunk>) nil_chk(chunk)) getText]];
            OrgOssPdfreporterEngineFillJRFillElement_DelayedEvaluations *delayedEvaluations = [self getDelayedEvaluationsWithOrgOssPdfreporterEngineFillJREvaluationTime:time];
            [((id<JavaUtilSet>) nil_chk(((OrgOssPdfreporterEngineFillJRFillElement_DelayedEvaluations *) nil_chk(delayedEvaluations)).variables)) addWithId:[((id<OrgOssPdfreporterEngineJRExpressionChunk>) nil_chk(chunk)) getText]];
            break;
          }
        }
      }
    }
  }
}

- (void)collectStyleProviderDelayedEvaluations {
  if (styleProviders_ != nil && [((id<JavaUtilList>) nil_chk(styleProviders_)) size] > 0) {
    {
      id<JavaUtilIterator> iter__ = [((id<JavaUtilList>) nil_chk(styleProviders_)) iterator];
      while ([((id<JavaUtilIterator>) nil_chk(iter__)) hasNext]) {
        id<OrgOssPdfreporterEngineStyleStyleProvider> styleProvider = [((id<JavaUtilIterator>) nil_chk(iter__)) next];
        IOSObjectArray *fields = [((id<OrgOssPdfreporterEngineStyleStyleProvider>) nil_chk(styleProvider)) getFields];
        if (fields != nil && (int) [((IOSObjectArray *) nil_chk(fields)) count] > 0) {
          OrgOssPdfreporterEngineFillJRFillElement_DelayedEvaluations *delayedEvaluations = [self getDelayedEvaluationsWithOrgOssPdfreporterEngineFillJREvaluationTime:[OrgOssPdfreporterEngineFillJREvaluationTime EVALUATION_TIME_NOW]];
          {
            IOSObjectArray *a__ = fields;
            int n__ = (int) [((IOSObjectArray *) nil_chk(a__)) count];
            for (int i__ = 0; i__ < n__; i__++) {
              NSString *field = [((IOSObjectArray *) nil_chk(a__)) objectAtIndex:i__];
              [((id<JavaUtilSet>) nil_chk(((OrgOssPdfreporterEngineFillJRFillElement_DelayedEvaluations *) nil_chk(delayedEvaluations)).fields)) addWithId:field];
            }
          }
        }
        IOSObjectArray *variables = [((id<OrgOssPdfreporterEngineStyleStyleProvider>) nil_chk(styleProvider)) getVariables];
        if (variables != nil && (int) [((IOSObjectArray *) nil_chk(variables)) count] > 0) {
          {
            IOSObjectArray *a__ = variables;
            int n__ = (int) [((IOSObjectArray *) nil_chk(a__)) count];
            for (int i__ = 0; i__ < n__; i__++) {
              NSString *variable = [((IOSObjectArray *) nil_chk(a__)) objectAtIndex:i__];
              OrgOssPdfreporterEngineFillJREvaluationTime *time = [self autogetVariableEvaluationTimeWithNSString:variable];
              OrgOssPdfreporterEngineFillJRFillElement_DelayedEvaluations *delayedEvaluations = [self getDelayedEvaluationsWithOrgOssPdfreporterEngineFillJREvaluationTime:time];
              [((id<JavaUtilSet>) nil_chk(((OrgOssPdfreporterEngineFillJRFillElement_DelayedEvaluations *) nil_chk(delayedEvaluations)).variables)) addWithId:variable];
            }
          }
        }
      }
    }
  }
}

- (OrgOssPdfreporterEngineFillJRFillElement_DelayedEvaluations *)getDelayedEvaluationsWithOrgOssPdfreporterEngineFillJREvaluationTime:(OrgOssPdfreporterEngineFillJREvaluationTime *)time {
  OrgOssPdfreporterEngineFillJRFillElement_DelayedEvaluations *delayedEvaluations = [((id<JavaUtilMap>) nil_chk(delayedEvaluationsMap_)) getWithId:time];
  if (delayedEvaluations == nil) {
    delayedEvaluations = [[OrgOssPdfreporterEngineFillJRFillElement_DelayedEvaluations alloc] init];
    (void) [((id<JavaUtilMap>) nil_chk(delayedEvaluationsMap_)) putWithId:time withId:delayedEvaluations];
  }
  return delayedEvaluations;
}

- (OrgOssPdfreporterEngineFillJREvaluationTime *)autogetVariableEvaluationTimeWithNSString:(NSString *)variableName {
  OrgOssPdfreporterEngineFillJRFillVariable *variable = [self getVariableWithNSString:variableName];
  OrgOssPdfreporterEngineFillJREvaluationTime *evaluationTime;
  switch ([[((OrgOssPdfreporterEngineFillJRFillVariable *) nil_chk(variable)) getResetTypeValue] ordinal]) {
    case OrgOssPdfreporterEngineTypeResetTypeEnum_REPORT:
    evaluationTime = [OrgOssPdfreporterEngineFillJREvaluationTime EVALUATION_TIME_REPORT];
    break;
    case OrgOssPdfreporterEngineTypeResetTypeEnum_PAGE:
    evaluationTime = [OrgOssPdfreporterEngineFillJREvaluationTime EVALUATION_TIME_PAGE];
    break;
    case OrgOssPdfreporterEngineTypeResetTypeEnum_COLUMN:
    evaluationTime = [OrgOssPdfreporterEngineFillJREvaluationTime EVALUATION_TIME_COLUMN];
    break;
    case OrgOssPdfreporterEngineTypeResetTypeEnum_GROUP:
    evaluationTime = [OrgOssPdfreporterEngineFillJREvaluationTime getGroupEvaluationTimeWithNSString:[((id<OrgOssPdfreporterEngineJRGroup>) nil_chk([((OrgOssPdfreporterEngineFillJRFillVariable *) nil_chk(variable)) getResetGroup])) getName]];
    break;
    default:
    evaluationTime = [OrgOssPdfreporterEngineFillJREvaluationTime EVALUATION_TIME_NOW];
    break;
  }
  if (![((OrgOssPdfreporterEngineFillJREvaluationTime *) nil_chk(evaluationTime)) isEqual:[OrgOssPdfreporterEngineFillJREvaluationTime EVALUATION_TIME_NOW]] && [((OrgOssPdfreporterEngineFillJRFillBand *) nil_chk(band_)) isNowEvaluationTimeWithOrgOssPdfreporterEngineFillJREvaluationTime:evaluationTime]) {
    evaluationTime = [OrgOssPdfreporterEngineFillJREvaluationTime EVALUATION_TIME_NOW];
  }
  if ([((OrgOssPdfreporterEngineFillJRFillVariable *) nil_chk(variable)) getCalculationValue] == [OrgOssPdfreporterEngineTypeCalculationEnumEnum SYSTEM] && [((OrgOssPdfreporterEngineFillJREvaluationTime *) nil_chk(evaluationTime)) isEqual:[OrgOssPdfreporterEngineFillJREvaluationTime EVALUATION_TIME_NOW]] && [((OrgOssPdfreporterEngineFillJRFillBand *) nil_chk(band_)) isVariableUsedInSubreportReturnsWithNSString:variableName]) {
    evaluationTime = [OrgOssPdfreporterEngineFillJREvaluationTime getBandEvaluationTimeWithOrgOssPdfreporterEngineFillJRFillBand:band_];
  }
  return evaluationTime;
}

- (void)initDelayedEvaluationPrintWithOrgOssPdfreporterEngineFillJRRecordedValuesPrintElement:(id<OrgOssPdfreporterEngineFillJRRecordedValuesPrintElement>)printElement OBJC_METHOD_FAMILY_NONE {
  for (id<JavaUtilIterator> it = [((id<JavaUtilSet>) nil_chk([((id<JavaUtilMap>) nil_chk(delayedEvaluationsMap_)) keySet])) iterator]; [((id<JavaUtilIterator>) nil_chk(it)) hasNext]; ) {
    OrgOssPdfreporterEngineFillJREvaluationTime *evaluationTime = [((id<JavaUtilIterator>) nil_chk(it)) next];
    if (![((OrgOssPdfreporterEngineFillJREvaluationTime *) nil_chk(evaluationTime)) isEqual:[OrgOssPdfreporterEngineFillJREvaluationTime EVALUATION_TIME_NOW]]) {
      [((OrgOssPdfreporterEngineFillJRBaseFiller *) nil_chk(filler_)) addBoundElementWithOrgOssPdfreporterEngineFillJRFillElement:self withOrgOssPdfreporterEngineJRPrintElement:printElement withOrgOssPdfreporterEngineFillJREvaluationTime:evaluationTime];
    }
  }
  [((id<OrgOssPdfreporterEngineFillJRRecordedValuesPrintElement>) nil_chk(printElement)) initRecordedValuesWithJavaUtilSet:[((id<JavaUtilMap>) nil_chk(delayedEvaluationsMap_)) keySet]];
  if ([((id<JavaUtilMap>) nil_chk(delayedEvaluationsMap_)) containsKeyWithId:[OrgOssPdfreporterEngineFillJREvaluationTime EVALUATION_TIME_NOW]]) {
    [self delayedEvaluateWithOrgOssPdfreporterEngineFillJRRecordedValuesPrintElement:printElement withOrgOssPdfreporterEngineFillJREvaluationTime:[OrgOssPdfreporterEngineFillJREvaluationTime EVALUATION_TIME_NOW] withChar:currentEvaluation_];
  }
}

- (void)delayedEvaluateWithOrgOssPdfreporterEngineFillJRRecordedValuesPrintElement:(id<OrgOssPdfreporterEngineFillJRRecordedValuesPrintElement>)printElement
                                   withOrgOssPdfreporterEngineFillJREvaluationTime:(OrgOssPdfreporterEngineFillJREvaluationTime *)evaluationTime
                                                                          withChar:(char)evaluation {
  OrgOssPdfreporterEngineFillJRRecordedValues *recordedValues = [((id<OrgOssPdfreporterEngineFillJRRecordedValuesPrintElement>) nil_chk(printElement)) getRecordedValues];
  if (![((OrgOssPdfreporterEngineFillJRRecordedValues *) nil_chk(recordedValues)) lastEvaluationTime]) {
    OrgOssPdfreporterEngineFillJRFillElement_DelayedEvaluations *delayedEvaluations = [((id<JavaUtilMap>) nil_chk(delayedEvaluationsMap_)) getWithId:evaluationTime];
    for (id<JavaUtilIterator> it = [((id<JavaUtilSet>) nil_chk(((OrgOssPdfreporterEngineFillJRFillElement_DelayedEvaluations *) nil_chk(delayedEvaluations)).fields)) iterator]; [((id<JavaUtilIterator>) nil_chk(it)) hasNext]; ) {
      NSString *fieldName = [((id<JavaUtilIterator>) nil_chk(it)) next];
      OrgOssPdfreporterEngineFillJRFillField *field = [self getFieldWithNSString:fieldName];
      [((OrgOssPdfreporterEngineFillJRRecordedValues *) nil_chk(recordedValues)) recordFieldValueWithNSString:fieldName withId:[((OrgOssPdfreporterEngineFillJRFillField *) nil_chk(field)) getValueWithChar:evaluation]];
    }
    for (id<JavaUtilIterator> it = [((id<JavaUtilSet>) nil_chk(((OrgOssPdfreporterEngineFillJRFillElement_DelayedEvaluations *) nil_chk(delayedEvaluations)).variables)) iterator]; [((id<JavaUtilIterator>) nil_chk(it)) hasNext]; ) {
      NSString *variableName = [((id<JavaUtilIterator>) nil_chk(it)) next];
      OrgOssPdfreporterEngineFillJRFillVariable *variable = [self getVariableWithNSString:variableName];
      [((OrgOssPdfreporterEngineFillJRRecordedValues *) nil_chk(recordedValues)) recordVariableValueWithNSString:variableName withId:[((OrgOssPdfreporterEngineFillJRFillVariable *) nil_chk(variable)) getValueWithChar:evaluation]];
    }
  }
  [((OrgOssPdfreporterEngineFillJRRecordedValues *) nil_chk(recordedValues)) doneEvaluationWithOrgOssPdfreporterEngineFillJREvaluationTime:evaluationTime];
  if ([((OrgOssPdfreporterEngineFillJRRecordedValues *) nil_chk(recordedValues)) finishedEvaluations]) {
    [self overwriteWithRecordedValuesWithOrgOssPdfreporterEngineFillJRRecordedValues:recordedValues withChar:evaluation];
    [self performDelayedEvaluationWithOrgOssPdfreporterEngineJRPrintElement:printElement withChar:evaluation];
    [self restoreValuesWithOrgOssPdfreporterEngineFillJRRecordedValues:recordedValues withChar:evaluation];
    [((id<OrgOssPdfreporterEngineFillJRRecordedValuesPrintElement>) nil_chk(printElement)) deleteRecordedValues];
  }
}

- (void)overwriteWithRecordedValuesWithOrgOssPdfreporterEngineFillJRRecordedValues:(OrgOssPdfreporterEngineFillJRRecordedValues *)recordedValues
                                                                          withChar:(char)evaluation {
  id<JavaUtilMap> fieldValues = [((OrgOssPdfreporterEngineFillJRRecordedValues *) nil_chk(recordedValues)) getRecordedFieldValues];
  if (fieldValues != nil) {
    for (id<JavaUtilIterator> it = [((id<JavaUtilSet>) nil_chk([fieldValues entrySet])) iterator]; [((id<JavaUtilIterator>) nil_chk(it)) hasNext]; ) {
      id<JavaUtilMap_Entry> entry = [((id<JavaUtilIterator>) nil_chk(it)) next];
      NSString *fieldName = [((id<JavaUtilMap_Entry>) nil_chk(entry)) getKey];
      id fieldValue = [((id<JavaUtilMap_Entry>) nil_chk(entry)) getValue];
      OrgOssPdfreporterEngineFillJRFillField *field = [self getFieldWithNSString:fieldName];
      [((OrgOssPdfreporterEngineFillJRFillField *) nil_chk(field)) overwriteValueWithId:fieldValue withChar:evaluation];
    }
  }
  id<JavaUtilMap> variableValues = [((OrgOssPdfreporterEngineFillJRRecordedValues *) nil_chk(recordedValues)) getRecordedVariableValues];
  if (variableValues != nil) {
    for (id<JavaUtilIterator> it = [((id<JavaUtilSet>) nil_chk([variableValues entrySet])) iterator]; [((id<JavaUtilIterator>) nil_chk(it)) hasNext]; ) {
      id<JavaUtilMap_Entry> entry = [((id<JavaUtilIterator>) nil_chk(it)) next];
      NSString *variableName = [((id<JavaUtilMap_Entry>) nil_chk(entry)) getKey];
      id variableValue = [((id<JavaUtilMap_Entry>) nil_chk(entry)) getValue];
      OrgOssPdfreporterEngineFillJRFillVariable *variable = [self getVariableWithNSString:variableName];
      [((OrgOssPdfreporterEngineFillJRFillVariable *) nil_chk(variable)) overwriteValueWithId:variableValue withChar:evaluation];
    }
  }
}

- (void)restoreValuesWithOrgOssPdfreporterEngineFillJRRecordedValues:(OrgOssPdfreporterEngineFillJRRecordedValues *)recordedValues
                                                            withChar:(char)evaluation {
  id<JavaUtilMap> fieldValues = [((OrgOssPdfreporterEngineFillJRRecordedValues *) nil_chk(recordedValues)) getRecordedFieldValues];
  if (fieldValues != nil) {
    for (id<JavaUtilIterator> it = [((id<JavaUtilSet>) nil_chk([fieldValues keySet])) iterator]; [((id<JavaUtilIterator>) nil_chk(it)) hasNext]; ) {
      NSString *fieldName = [((id<JavaUtilIterator>) nil_chk(it)) next];
      OrgOssPdfreporterEngineFillJRFillField *field = [self getFieldWithNSString:fieldName];
      [((OrgOssPdfreporterEngineFillJRFillField *) nil_chk(field)) restoreValueWithChar:evaluation];
    }
  }
  id<JavaUtilMap> variableValues = [((OrgOssPdfreporterEngineFillJRRecordedValues *) nil_chk(recordedValues)) getRecordedVariableValues];
  if (variableValues != nil) {
    for (id<JavaUtilIterator> it = [((id<JavaUtilSet>) nil_chk([variableValues keySet])) iterator]; [((id<JavaUtilIterator>) nil_chk(it)) hasNext]; ) {
      NSString *variableName = [((id<JavaUtilIterator>) nil_chk(it)) next];
      OrgOssPdfreporterEngineFillJRFillVariable *variable = [self getVariableWithNSString:variableName];
      [((OrgOssPdfreporterEngineFillJRFillVariable *) nil_chk(variable)) restoreValueWithChar:evaluation];
    }
  }
}

- (void)setConditionalStylesContainerWithOrgOssPdfreporterEngineFillJRFillElementContainer:(OrgOssPdfreporterEngineFillJRFillElementContainer *)conditionalStylesContainer {
  self.conditionalStylesContainer = conditionalStylesContainer;
  if (fillContainerContext_ == nil) {
    fillContainerContext_ = conditionalStylesContainer;
  }
}

- (id<OrgOssPdfreporterEngineJRStyle>)getStyle {
  if (currentStyle_ != nil) {
    return currentStyle_;
  }
  id<OrgOssPdfreporterEngineJRStyle> crtStyle = initStyle_;
  BOOL isUsingDefaultStyle = NO;
  if (crtStyle == nil) {
    crtStyle = [((OrgOssPdfreporterEngineFillJRBaseFiller *) nil_chk(filler_)) getDefaultStyle];
    isUsingDefaultStyle = YES;
  }
  id<OrgOssPdfreporterEngineJRStyle> evalStyle = crtStyle;
  if (conditionalStylesContainer_ != nil) {
    evalStyle = [conditionalStylesContainer_ getEvaluatedConditionalStyleWithOrgOssPdfreporterEngineJRStyle:crtStyle];
  }
  if (isUsingDefaultStyle && evalStyle == crtStyle) {
    evalStyle = nil;
  }
  return evalStyle;
}

- (OrgOssPdfreporterEngineFillJRTemplateElement *)getTemplateWithOrgOssPdfreporterEngineJRStyle:(id<OrgOssPdfreporterEngineJRStyle>)style {
  return [((id<JavaUtilMap>) nil_chk(templates_)) getWithId:style];
}

- (void)registerTemplateWithOrgOssPdfreporterEngineJRStyle:(id<OrgOssPdfreporterEngineJRStyle>)style
          withOrgOssPdfreporterEngineFillJRTemplateElement:(OrgOssPdfreporterEngineFillJRTemplateElement *)template_ {
  (void) [((id<JavaUtilMap>) nil_chk(templates_)) putWithId:style withId:template_];
}

- (void)setShrinkableWithBOOL:(BOOL)shrinkable {
  self.shrinkable = shrinkable;
}

- (void)stretchHeightFinal {
}

- (BOOL)isEvaluateNow {
  BOOL evaluateNow;
  switch ([[self getEvaluationTimeValue] ordinal]) {
    case OrgOssPdfreporterEngineTypeEvaluationTimeEnum_NOW:
    evaluateNow = YES;
    break;
    case OrgOssPdfreporterEngineTypeEvaluationTimeEnum_AUTO:
    evaluateNow = [self isAutoEvaluateNow];
    break;
    default:
    evaluateNow = NO;
    break;
  }
  return evaluateNow;
}

- (BOOL)isAutoEvaluateNow {
  return delayedEvaluationsMap_ == nil || [((id<JavaUtilMap>) nil_chk(delayedEvaluationsMap_)) isEmpty] || ([((id<JavaUtilMap>) nil_chk(delayedEvaluationsMap_)) size] == 1 && [((id<JavaUtilMap>) nil_chk(delayedEvaluationsMap_)) containsKeyWithId:[OrgOssPdfreporterEngineFillJREvaluationTime EVALUATION_TIME_NOW]]);
}

- (BOOL)isEvaluateAuto {
  return [self getEvaluationTimeValue] == [OrgOssPdfreporterEngineTypeEvaluationTimeEnumEnum AUTO] && ![self isAutoEvaluateNow];
}

- (NSString *)getStyleNameReference {
  return nil;
}

- (void)setStyleWithOrgOssPdfreporterEngineJRStyle:(id<OrgOssPdfreporterEngineJRStyle>)style {
  initStyle_ = style;
  [((OrgOssPdfreporterEngineFillJRFillElementContainer *) nil_chk(conditionalStylesContainer_)) collectConditionalStyleWithOrgOssPdfreporterEngineJRStyle:style];
}

- (void)setStyleNameReferenceWithNSString:(NSString *)name {
  @throw [[JavaLangUnsupportedOperationException alloc] initWithNSString:@"Style name references not allowed at fill time"];
}

- (id)clone {
  @throw [[JavaLangUnsupportedOperationException alloc] init];
}

- (id)cloneWithOrgOssPdfreporterEngineJRElementGroup:(id<OrgOssPdfreporterEngineJRElementGroup>)parentGroup {
  @throw [[JavaLangUnsupportedOperationException alloc] init];
}

- (id<OrgOssPdfreporterEngineJRElement>)cloneWithOrgOssPdfreporterEngineJRElementGroup:(id<OrgOssPdfreporterEngineJRElementGroup>)parentGroup
                                                                               withInt:(int)y {
  @throw [[JavaLangUnsupportedOperationException alloc] init];
}

- (BOOL)hasProperties {
  return mergedProperties_ != nil && [((OrgOssPdfreporterEngineJRPropertiesMap *) nil_chk(mergedProperties_)) hasProperties];
}

- (OrgOssPdfreporterEngineJRPropertiesMap *)getPropertiesMap {
  return mergedProperties_;
}

- (id<OrgOssPdfreporterEngineJRPropertiesHolder>)getParentProperties {
  return [((OrgOssPdfreporterEngineFillJRBaseFiller *) nil_chk(filler_)) getJasperReport];
}

- (IOSObjectArray *)getPropertyExpressions {
  return [((id<OrgOssPdfreporterEngineJRElement>) nil_chk(parent_)) getPropertyExpressions];
}

- (void)transferPropertiesWithOrgOssPdfreporterEngineFillJRTemplateElement:(OrgOssPdfreporterEngineFillJRTemplateElement *)template_ {
  [((OrgOssPdfreporterEngineJRPropertiesUtil *) nil_chk([((OrgOssPdfreporterEngineFillJRBaseFiller *) nil_chk(filler_)) getPropertiesUtil])) transferPropertiesWithOrgOssPdfreporterEngineJRPropertiesHolder:parent_ withOrgOssPdfreporterEngineJRPropertiesHolder:template_ withNSString:[OrgOssPdfreporterEngineJasperPrint PROPERTIES_PRINT_TRANSFER_PREFIX]];
}

- (void)transferPropertiesWithOrgOssPdfreporterEngineJRPrintElement:(id<OrgOssPdfreporterEngineJRPrintElement>)element {
  [((OrgOssPdfreporterEngineJRPropertiesUtil *) nil_chk([((OrgOssPdfreporterEngineFillJRBaseFiller *) nil_chk(filler_)) getPropertiesUtil])) transferPropertiesWithOrgOssPdfreporterEngineJRPropertiesMap:dynamicProperties_ withOrgOssPdfreporterEngineJRPropertiesHolder:element withNSString:[OrgOssPdfreporterEngineJasperPrint PROPERTIES_PRINT_TRANSFER_PREFIX]];
}

- (OrgOssPdfreporterEngineJRPropertiesMap *)getEvaluatedProperties {
  return mergedProperties_;
}

- (void)evaluatePropertiesWithChar:(char)evaluation {
  IOSObjectArray *propExprs = [self getPropertyExpressions];
  if (propExprs == nil || (int) [((IOSObjectArray *) nil_chk(propExprs)) count] == 0) {
    dynamicProperties_ = nil;
    mergedProperties_ = staticProperties_;
  }
  else {
    dynamicProperties_ = [[OrgOssPdfreporterEngineJRPropertiesMap alloc] init];
    for (int i = 0; i < (int) [((IOSObjectArray *) nil_chk(propExprs)) count]; i++) {
      id<OrgOssPdfreporterEngineJRPropertyExpression> prop = [((IOSObjectArray *) nil_chk(propExprs)) objectAtIndex:i];
      NSString *value = (NSString *) [self evaluateExpressionWithOrgOssPdfreporterEngineJRExpression:[((id<OrgOssPdfreporterEngineJRPropertyExpression>) nil_chk(prop)) getValueExpression] withChar:evaluation];
      if (value != nil) {
        [((OrgOssPdfreporterEngineJRPropertiesMap *) nil_chk(dynamicProperties_)) setPropertyWithNSString:[((id<OrgOssPdfreporterEngineJRPropertyExpression>) nil_chk(prop)) getName] withNSString:value];
      }
    }
    mergedProperties_ = [((OrgOssPdfreporterEngineJRPropertiesMap *) nil_chk(dynamicProperties_)) cloneProperties];
    [((OrgOssPdfreporterEngineJRPropertiesMap *) nil_chk(mergedProperties_)) setBasePropertiesWithOrgOssPdfreporterEngineJRPropertiesMap:staticProperties_];
  }
}

- (void)setOriginProviderWithOrgOssPdfreporterEngineFillJROriginProvider:(id<OrgOssPdfreporterEngineFillJROriginProvider>)originProvider {
  self.originProvider = originProvider;
}

- (OrgOssPdfreporterEngineJROrigin *)getElementOrigin {
  OrgOssPdfreporterEngineJROrigin *elementOrigin = nil;
  if (originProvider_ != nil) {
    elementOrigin = [originProvider_ getOrigin];
  }
  return elementOrigin;
}

- (BOOL)isDelayedStyleEvaluation {
  return [((OrgOssPdfreporterEngineJRPropertiesUtil *) nil_chk([((OrgOssPdfreporterEngineFillJRBaseFiller *) nil_chk(filler_)) getPropertiesUtil])) getBooleanPropertyWithOrgOssPdfreporterEngineJRPropertiesHolder:self withNSString:[OrgOssPdfreporterEngineJRStyle PROPERTY_EVALUATION_TIME_ENABLED] withBOOL:NO];
}

- (OrgOssPdfreporterEngineFillJRBaseFiller *)getFiller {
  return filler_;
}

- (void)collectExpressionsWithOrgOssPdfreporterEngineJRExpressionCollector:(OrgOssPdfreporterEngineJRExpressionCollector *)param0 {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
}

- (void)visitWithOrgOssPdfreporterEngineJRVisitor:(id<OrgOssPdfreporterEngineJRVisitor>)param0 {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
}

- (id<OrgOssPdfreporterEngineFillJRFillCloneable>)createCloneWithOrgOssPdfreporterEngineFillJRFillCloneFactory:(OrgOssPdfreporterEngineFillJRFillCloneFactory *)param0 {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}

- (id)copyWithZone:(NSZone *)zone {
  return [self clone];
}

- (void)copyAllPropertiesTo:(id)copy {
  [super copyAllPropertiesTo:copy];
  OrgOssPdfreporterEngineFillJRFillElement *typedCopy = (OrgOssPdfreporterEngineFillJRFillElement *) copy;
  typedCopy.parent = parent_;
  typedCopy.providerStyle = providerStyle_;
  typedCopy.templates = templates_;
  typedCopy.styleProviders = styleProviders_;
  typedCopy.filler = filler_;
  typedCopy.expressionEvaluator = expressionEvaluator_;
  typedCopy.defaultStyleProvider = defaultStyleProvider_;
  typedCopy.printWhenGroupChanges = printWhenGroupChanges_;
  typedCopy.elementGroup = elementGroup_;
  typedCopy.band = band_;
  typedCopy.originProvider = originProvider_;
  typedCopy.elementId = elementId_;
  typedCopy.isPrintWhenExpressionNull_ = isPrintWhenExpressionNull__;
  typedCopy.isPrintWhenTrue_ = isPrintWhenTrue__;
  typedCopy.isToPrint_ = isToPrint__;
  typedCopy.isReprinted_ = isReprinted__;
  typedCopy.isAlreadyPrinted_ = isAlreadyPrinted__;
  typedCopy.dependantElements = dependantElements_;
  typedCopy.relativeY = relativeY_;
  typedCopy.stretchHeight = stretchHeight_;
  typedCopy.x = x_;
  typedCopy.y = y_;
  typedCopy.width = width_;
  typedCopy.height = height_;
  typedCopy.isValueRepeating_ = isValueRepeating__;
  typedCopy.currentEvaluation = currentEvaluation_;
  typedCopy.delayedEvaluationsMap = delayedEvaluationsMap_;
  typedCopy.conditionalStylesContainer = conditionalStylesContainer_;
  typedCopy.fillContainerContext = fillContainerContext_;
  typedCopy.initStyle = initStyle_;
  typedCopy.currentStyle = currentStyle_;
  typedCopy.shrinkable = shrinkable_;
  typedCopy.staticProperties = staticProperties_;
  typedCopy.dynamicProperties = dynamicProperties_;
  typedCopy.mergedProperties = mergedProperties_;
}

@end
@implementation OrgOssPdfreporterEngineFillJRFillElement_DelayedEvaluations

@synthesize fields = fields_;
@synthesize variables = variables_;

- (id)init {
  if ((self = [super init])) {
    fields_ = [[JavaUtilHashSet alloc] init];
    variables_ = [[JavaUtilHashSet alloc] init];
  }
  return self;
}

- (void)copyAllPropertiesTo:(id)copy {
  [super copyAllPropertiesTo:copy];
  OrgOssPdfreporterEngineFillJRFillElement_DelayedEvaluations *typedCopy = (OrgOssPdfreporterEngineFillJRFillElement_DelayedEvaluations *) copy;
  typedCopy.fields = fields_;
  typedCopy.variables = variables_;
}

@end
