//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: pdfreporter-core/src/org/oss/pdfreporter/engine/fill/SortedDataSource.java
//
//  Created by kendra on 9/27/13.
//

#include "IOSObjectArray.h"
#include "java/lang/IllegalArgumentException.h"
#include "java/lang/Integer.h"
#include "java/util/HashMap.h"
#include "java/util/List.h"
#include "java/util/Map.h"
#include "org/oss/pdfreporter/engine/JRField.h"
#include "org/oss/pdfreporter/engine/JRRuntimeException.h"
#include "org/oss/pdfreporter/engine/fill/SortedDataSource.h"

@implementation OrgOssPdfreporterEngineFillSortedDataSource

@synthesize records = records_;
@synthesize recordIndexes = recordIndexes_;
@synthesize columnNamesMap = columnNamesMap_;
@synthesize currentIndex = currentIndex_;
@synthesize currentRecord = currentRecord_;

- (id)initWithJavaUtilList:(id<JavaUtilList>)records
  withJavaLangIntegerArray:(IOSObjectArray *)recordIndexes
         withNSStringArray:(IOSObjectArray *)columnNames {
  if ((self = [super init])) {
    columnNamesMap_ = [[JavaUtilHashMap alloc] init];
    if ([((id<JavaUtilList>) nil_chk(records)) size] != (int) [((IOSObjectArray *) nil_chk(recordIndexes)) count]) {
      @throw [[JavaLangIllegalArgumentException alloc] initWithNSString:[NSString stringWithFormat:@"Record count %d doesn't match index count %d", [((id<JavaUtilList>) nil_chk(records)) size], (int) [((IOSObjectArray *) nil_chk(recordIndexes)) count]]];
    }
    self.records = records;
    self.recordIndexes = recordIndexes;
    if (columnNames != nil) {
      for (int i = 0; i < (int) [columnNames count]; i++) {
        (void) [((id<JavaUtilMap>) nil_chk(columnNamesMap_)) putWithId:[columnNames objectAtIndex:i] withId:[JavaLangInteger valueOfWithInt:i]];
      }
    }
    self.currentIndex = 0;
  }
  return self;
}

- (BOOL)next {
  if (currentIndex_ >= (int) [((IOSObjectArray *) nil_chk(recordIndexes_)) count]) {
    return NO;
  }
  int recordIndex = [((JavaLangInteger *) nil_chk([((IOSObjectArray *) nil_chk(recordIndexes_)) objectAtIndex:currentIndex_])) intValue];
  currentRecord_ = [((id<JavaUtilList>) nil_chk(records_)) getWithInt:recordIndex];
  ++currentIndex_;
  return YES;
}

- (void)setRecordFilteredIndexWithInt:(int)index {
  [((OrgOssPdfreporterEngineFillSortedDataSource_SortRecord *) nil_chk(currentRecord_)) markFiltered];
  [((OrgOssPdfreporterEngineFillSortedDataSource_SortRecord *) nil_chk(currentRecord_)) setRecordIndexWithInt:index];
}

- (id)getFieldValueWithOrgOssPdfreporterEngineJRField:(id<OrgOssPdfreporterEngineJRField>)jrField {
  JavaLangInteger *fieldIndex = [((id<JavaUtilMap>) nil_chk(columnNamesMap_)) getWithId:[((id<OrgOssPdfreporterEngineJRField>) nil_chk(jrField)) getName]];
  if (fieldIndex == nil) {
    @throw [[OrgOssPdfreporterEngineJRRuntimeException alloc] initWithNSString:[NSString stringWithFormat:@"Field \"%@\" not found in data source.", [((id<OrgOssPdfreporterEngineJRField>) nil_chk(jrField)) getName]]];
  }
  return [((OrgOssPdfreporterEngineFillSortedDataSource_SortRecord *) nil_chk(currentRecord_)) fieldValueWithInt:[((JavaLangInteger *) nil_chk(fieldIndex)) intValue]];
}

- (void)moveFirst {
  currentIndex_ = 0;
}

- (int)getRecordIndex {
  return [((OrgOssPdfreporterEngineFillSortedDataSource_SortRecord *) nil_chk(currentRecord_)) getRecordIndex];
}

- (id<JavaUtilList>)getRecords {
  return records_;
}

- (void)copyAllPropertiesTo:(id)copy {
  [super copyAllPropertiesTo:copy];
  OrgOssPdfreporterEngineFillSortedDataSource *typedCopy = (OrgOssPdfreporterEngineFillSortedDataSource *) copy;
  typedCopy.records = records_;
  typedCopy.recordIndexes = recordIndexes_;
  typedCopy.columnNamesMap = columnNamesMap_;
  typedCopy.currentIndex = currentIndex_;
  typedCopy.currentRecord = currentRecord_;
}

@end
@implementation OrgOssPdfreporterEngineFillSortedDataSource_SortRecord

@synthesize values = values_;
@synthesize recordIndex = recordIndex_;
@synthesize filtered = filtered_;

- (id)initWithNSObjectArray:(IOSObjectArray *)values
                    withInt:(int)recordIndex {
  if ((self = [super init])) {
    self.values = values;
    self.recordIndex = recordIndex;
    self.filtered = NO;
  }
  return self;
}

- (void)markFiltered {
  filtered_ = YES;
}

- (id)fieldValueWithInt:(int)fieldIdx {
  return [((IOSObjectArray *) nil_chk(values_)) objectAtIndex:fieldIdx];
}

- (IOSObjectArray *)getValues {
  return values_;
}

- (void)setRecordIndexWithInt:(int)recordIndex {
  self.recordIndex = recordIndex;
}

- (int)getRecordIndex {
  return recordIndex_;
}

- (BOOL)isFiltered {
  return filtered_;
}

- (void)copyAllPropertiesTo:(id)copy {
  [super copyAllPropertiesTo:copy];
  OrgOssPdfreporterEngineFillSortedDataSource_SortRecord *typedCopy = (OrgOssPdfreporterEngineFillSortedDataSource_SortRecord *) copy;
  typedCopy.values = values_;
  typedCopy.recordIndex = recordIndex_;
  typedCopy.filtered = filtered_;
}

@end
