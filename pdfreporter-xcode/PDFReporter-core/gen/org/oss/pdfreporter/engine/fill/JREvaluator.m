//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: pdfreporter-core/src/org/oss/pdfreporter/engine/fill/JREvaluator.java
//
//  Created by kendra on 9/27/13.
//

#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "java/lang/Exception.h"
#include "java/lang/NullPointerException.h"
#include "java/lang/Throwable.h"
#include "java/util/Calendar.h"
#include "java/util/Date.h"
#include "java/util/Locale.h"
#include "java/util/Map.h"
#include "java/util/logging/Level.h"
#include "java/util/logging/Logger.h"
#include "org/oss/pdfreporter/engine/JRExpression.h"
#include "org/oss/pdfreporter/engine/JRParameter.h"
#include "org/oss/pdfreporter/engine/JRRuntimeException.h"
#include "org/oss/pdfreporter/engine/fill/IJRFillParameter.h"
#include "org/oss/pdfreporter/engine/fill/JREvaluator.h"
#include "org/oss/pdfreporter/engine/fill/JRExpressionEvalException.h"
#include "org/oss/pdfreporter/engine/type/WhenResourceMissingTypeEnum.h"
#include "org/oss/pdfreporter/registry/ApiRegistry.h"
#include "org/oss/pdfreporter/text/format/IMessageFormat.h"
#include "org/oss/pdfreporter/text/format/factory/IFormatFactory.h"

@implementation OrgOssPdfreporterEngineFillJREvaluator

static JavaUtilLoggingLogger * OrgOssPdfreporterEngineFillJREvaluator_logger_;

@synthesize resourceBundle = resourceBundle_;
@synthesize whenResourceMissingType = whenResourceMissingType_;
@synthesize locale = locale_;

+ (JavaUtilLoggingLogger *)logger {
  return OrgOssPdfreporterEngineFillJREvaluator_logger_;
}

- (id)init {
  return [super init];
}

- (void)init__WithJavaUtilMap:(id<JavaUtilMap>)parametersMap
              withJavaUtilMap:(id<JavaUtilMap>)fieldsMap
              withJavaUtilMap:(id<JavaUtilMap>)variablesMap
withOrgOssPdfreporterEngineTypeWhenResourceMissingTypeEnumEnum:(OrgOssPdfreporterEngineTypeWhenResourceMissingTypeEnumEnum *)resourceMissingType OBJC_METHOD_FAMILY_NONE {
  self.whenResourceMissingType = resourceMissingType;
  self.resourceBundle = [((id<JavaUtilMap>) nil_chk(parametersMap)) getWithId:[OrgOssPdfreporterEngineJRParameter REPORT_RESOURCE_BUNDLE]];
  self.locale = [((id<JavaUtilMap>) nil_chk(parametersMap)) getWithId:[OrgOssPdfreporterEngineJRParameter REPORT_LOCALE]];
  [self customizedInitWithJavaUtilMap:parametersMap withJavaUtilMap:fieldsMap withJavaUtilMap:variablesMap];
}

- (NSString *)msgWithNSString:(NSString *)pattern
                       withId:(id)arg0 {
  return [((id<OrgOssPdfreporterTextFormatIMessageFormat>) nil_chk([self getMessageFormatWithNSString:pattern])) formatWithNSObjectArray:[IOSObjectArray arrayWithObjects:(id[]){ arg0 } count:1 type:[IOSClass classWithClass:[NSObject class]]]];
}

- (NSString *)msgWithNSString:(NSString *)pattern
                       withId:(id)arg0
                       withId:(id)arg1 {
  return [((id<OrgOssPdfreporterTextFormatIMessageFormat>) nil_chk([self getMessageFormatWithNSString:pattern])) formatWithNSObjectArray:[IOSObjectArray arrayWithObjects:(id[]){ arg0, arg1 } count:2 type:[IOSClass classWithClass:[NSObject class]]]];
}

- (NSString *)msgWithNSString:(NSString *)pattern
                       withId:(id)arg0
                       withId:(id)arg1
                       withId:(id)arg2 {
  return [((id<OrgOssPdfreporterTextFormatIMessageFormat>) nil_chk([self getMessageFormatWithNSString:pattern])) formatWithNSObjectArray:[IOSObjectArray arrayWithObjects:(id[]){ arg0, arg1, arg2 } count:3 type:[IOSClass classWithClass:[NSObject class]]]];
}

- (NSString *)msgWithNSString:(NSString *)pattern
            withNSObjectArray:(IOSObjectArray *)args {
  return [((id<OrgOssPdfreporterTextFormatIMessageFormat>) nil_chk([self getMessageFormatWithNSString:pattern])) formatWithNSObjectArray:args];
}

- (NSString *)strWithNSString:(NSString *)key {
  NSString *str = nil;
  return str;
}

- (id)evaluateWithOrgOssPdfreporterEngineJRExpression:(id<OrgOssPdfreporterEngineJRExpression>)expression {
  id value = nil;
  if (expression != nil) {
    @try {
      value = [self evaluateWithInt:[expression getId]];
      if ([((JavaUtilLoggingLogger *) nil_chk(OrgOssPdfreporterEngineFillJREvaluator_logger_)) isLoggableWithJavaUtilLoggingLevel:[JavaUtilLoggingLevel FINEST]]) {
        NSString *msg = [nil_chk(value) description];
        if ([value isKindOfClass:[JavaUtilDate class]]) {
          JavaUtilCalendar *cal = [JavaUtilCalendar getInstance];
          [((JavaUtilCalendar *) nil_chk(cal)) setTimeWithJavaUtilDate:(JavaUtilDate *) value];
          msg = [NSString stringWithFormat:@"%04d-%02d-%02d %02d:%02d:%02d" , [((JavaUtilCalendar *) nil_chk(cal)) getWithInt:JavaUtilCalendar_YEAR], [((JavaUtilCalendar *) nil_chk(cal)) getWithInt:JavaUtilCalendar_MONTH] + 1, [((JavaUtilCalendar *) nil_chk(cal)) getWithInt:JavaUtilCalendar_DAY_OF_MONTH], [((JavaUtilCalendar *) nil_chk(cal)) getWithInt:JavaUtilCalendar_HOUR_OF_DAY], [((JavaUtilCalendar *) nil_chk(cal)) getWithInt:JavaUtilCalendar_MINUTE], [((JavaUtilCalendar *) nil_chk(cal)) getWithInt:JavaUtilCalendar_SECOND], nil];
        }
        [((JavaUtilLoggingLogger *) nil_chk(OrgOssPdfreporterEngineFillJREvaluator_logger_)) finestWithNSString:[NSString stringWithFormat:@"evaluate: %d = %@", [expression getId], msg]];
      }
    }
    @catch (JavaLangNullPointerException *e) {
    }
    @catch (JavaLangThrowable *e) {
      @throw [[OrgOssPdfreporterEngineFillJRExpressionEvalException alloc] initWithOrgOssPdfreporterEngineJRExpression:expression withJavaLangThrowable:e];
    }
  }
  return value;
}

- (id)evaluateOldWithOrgOssPdfreporterEngineJRExpression:(id<OrgOssPdfreporterEngineJRExpression>)expression {
  id value = nil;
  if (expression != nil) {
    @try {
      value = [self evaluateOldWithInt:[expression getId]];
      [((JavaUtilLoggingLogger *) nil_chk(OrgOssPdfreporterEngineFillJREvaluator_logger_)) finestWithNSString:[NSString stringWithFormat:@"evaluateOld: %d = %@", [expression getId], value]];
    }
    @catch (JavaLangNullPointerException *e) {
    }
    @catch (JavaLangThrowable *e) {
      @throw [[OrgOssPdfreporterEngineFillJRExpressionEvalException alloc] initWithOrgOssPdfreporterEngineJRExpression:expression withJavaLangThrowable:e];
    }
  }
  return value;
}

- (id)evaluateEstimatedWithOrgOssPdfreporterEngineJRExpression:(id<OrgOssPdfreporterEngineJRExpression>)expression {
  id value = nil;
  if (expression != nil) {
    @try {
      value = [self evaluateEstimatedWithInt:[expression getId]];
      [((JavaUtilLoggingLogger *) nil_chk(OrgOssPdfreporterEngineFillJREvaluator_logger_)) finestWithNSString:[NSString stringWithFormat:@"evaluateEstimated: %d = %@", [expression getId], value]];
    }
    @catch (JavaLangNullPointerException *e) {
    }
    @catch (JavaLangThrowable *e) {
      @throw [[OrgOssPdfreporterEngineFillJRExpressionEvalException alloc] initWithOrgOssPdfreporterEngineJRExpression:expression withJavaLangThrowable:e];
    }
  }
  return value;
}

- (NSString *)handleMissingResourceWithNSString:(NSString *)key
                          withJavaLangException:(JavaLangException *)e {
  NSString *str;
  switch ([whenResourceMissingType_ ordinal]) {
    case OrgOssPdfreporterEngineTypeWhenResourceMissingTypeEnum_EMPTY:
    {
      str = @"";
      break;
    }
    case OrgOssPdfreporterEngineTypeWhenResourceMissingTypeEnum_KEY:
    {
      str = key;
      break;
    }
    case OrgOssPdfreporterEngineTypeWhenResourceMissingTypeEnum_ERROR:
    {
      @throw [[OrgOssPdfreporterEngineJRRuntimeException alloc] initWithNSString:[NSString stringWithFormat:@"Resource not found for key \"%@\".", key] withJavaLangThrowable:e];
    }
    case OrgOssPdfreporterEngineTypeWhenResourceMissingTypeEnum_NULL:
    default:
    {
      str = nil;
      break;
    }
  }
  return str;
}

- (void)customizedInitWithJavaUtilMap:(id<JavaUtilMap>)parametersMap
                      withJavaUtilMap:(id<JavaUtilMap>)fieldsMap
                      withJavaUtilMap:(id<JavaUtilMap>)variablesMap {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
}

- (id)evaluateWithInt:(int)id_ {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}

- (id)evaluateOldWithInt:(int)id_ {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}

- (id)evaluateEstimatedWithInt:(int)id_ {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}

- (id<OrgOssPdfreporterTextFormatIMessageFormat>)getMessageFormatWithNSString:(NSString *)pattern {
  return [((id<OrgOssPdfreporterTextFormatFactoryIFormatFactory>) nil_chk([OrgOssPdfreporterRegistryApiRegistry getIFormatFactoryWithOrgOssPdfreporterTextFormatFactoryIFormatFactory_FormatTypeEnum:[OrgOssPdfreporterTextFormatFactoryIFormatFactory_FormatTypeEnum DEFAULT]])) newMessageFormatWithNSString:pattern withJavaUtilLocale:(JavaUtilLocale *) [((id<OrgOssPdfreporterEngineFillIJRFillParameter>) nil_chk(locale_)) getValue]];
}

+ (void)initialize {
  if (self == [OrgOssPdfreporterEngineFillJREvaluator class]) {
    OrgOssPdfreporterEngineFillJREvaluator_logger_ = [JavaUtilLoggingLogger getLoggerWithNSString:[[IOSClass classWithClass:[OrgOssPdfreporterEngineFillJREvaluator class]] getName]];
  }
}

- (void)copyAllPropertiesTo:(id)copy {
  [super copyAllPropertiesTo:copy];
  OrgOssPdfreporterEngineFillJREvaluator *typedCopy = (OrgOssPdfreporterEngineFillJREvaluator *) copy;
  typedCopy.resourceBundle = resourceBundle_;
  typedCopy.whenResourceMissingType = whenResourceMissingType_;
  typedCopy.locale = locale_;
}

@end
