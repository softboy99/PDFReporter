//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: pdfreporter-core/src/org/oss/pdfreporter/engine/fill/JRFillSection.java
//
//  Created by kendra on 9/27/13.
//

#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "java/lang/UnsupportedOperationException.h"
#include "org/oss/pdfreporter/engine/JRBand.h"
#include "org/oss/pdfreporter/engine/JRGroup.h"
#include "org/oss/pdfreporter/engine/JROrigin.h"
#include "org/oss/pdfreporter/engine/JRSection.h"
#include "org/oss/pdfreporter/engine/JasperPrint.h"
#include "org/oss/pdfreporter/engine/fill/JRBaseFiller.h"
#include "org/oss/pdfreporter/engine/fill/JREvaluationTime.h"
#include "org/oss/pdfreporter/engine/fill/JRFillBand.h"
#include "org/oss/pdfreporter/engine/fill/JRFillObjectFactory.h"
#include "org/oss/pdfreporter/engine/fill/JRFillSection.h"

@implementation OrgOssPdfreporterEngineFillJRFillSection

@synthesize filler = filler_;
@synthesize bands = bands_;
@synthesize origin = origin_;
@synthesize isEmpty_ = isEmpty__;
@synthesize areAllPrintWhenExprNull = areAllPrintWhenExprNull_;

- (id)initWithOrgOssPdfreporterEngineFillJRBaseFiller:(OrgOssPdfreporterEngineFillJRBaseFiller *)filler
                 withOrgOssPdfreporterEngineJRSection:(id<OrgOssPdfreporterEngineJRSection>)section
   withOrgOssPdfreporterEngineFillJRFillObjectFactory:(OrgOssPdfreporterEngineFillJRFillObjectFactory *)factory {
  if ((self = [super init])) {
    isEmpty__ = YES;
    areAllPrintWhenExprNull_ = YES;
    if (section != nil) {
      [((OrgOssPdfreporterEngineFillJRFillObjectFactory *) nil_chk(factory)) putWithId:section withId:self];
      isEmpty__ = YES;
      areAllPrintWhenExprNull_ = YES;
      IOSObjectArray *jrBands = [section getBands];
      if (jrBands != nil && (int) [((IOSObjectArray *) nil_chk(jrBands)) count] > 0) {
        bands_ = [IOSObjectArray arrayWithLength:(int) [((IOSObjectArray *) nil_chk(jrBands)) count] type:[IOSClass classWithClass:[OrgOssPdfreporterEngineFillJRFillBand class]]];
        for (int i = 0; i < (int) [((IOSObjectArray *) nil_chk(jrBands)) count]; i++) {
          (void) [((IOSObjectArray *) nil_chk(bands_)) replaceObjectAtIndex:i withObject:[((OrgOssPdfreporterEngineFillJRFillObjectFactory *) nil_chk(factory)) getBandWithOrgOssPdfreporterEngineJRBand:[((IOSObjectArray *) nil_chk(jrBands)) objectAtIndex:i]]];
          isEmpty__ = isEmpty__ && [((OrgOssPdfreporterEngineFillJRFillBand *) nil_chk([((IOSObjectArray *) nil_chk(bands_)) objectAtIndex:i])) isEmpty];
          areAllPrintWhenExprNull_ = areAllPrintWhenExprNull_ && [((OrgOssPdfreporterEngineFillJRFillBand *) nil_chk([((IOSObjectArray *) nil_chk(bands_)) objectAtIndex:i])) isPrintWhenExpressionNull];
        }
      }
      else {
        bands_ = [IOSObjectArray arrayWithObjects:(id[]){ ((OrgOssPdfreporterEngineFillJRBaseFiller *) nil_chk(filler)).missingFillBand } count:1 type:[IOSClass classWithClass:[OrgOssPdfreporterEngineFillJRFillBand class]]];
      }
    }
    else {
      bands_ = [IOSObjectArray arrayWithObjects:(id[]){ ((OrgOssPdfreporterEngineFillJRBaseFiller *) nil_chk(filler)).missingFillBand } count:1 type:[IOSClass classWithClass:[OrgOssPdfreporterEngineFillJRFillBand class]]];
    }
    self.filler = filler;
  }
  return self;
}

- (OrgOssPdfreporterEngineJROrigin *)getOrigin {
  return origin_;
}

- (void)setOriginWithOrgOssPdfreporterEngineJROrigin:(OrgOssPdfreporterEngineJROrigin *)origin {
  self.origin = origin;
  if ((int) [((IOSObjectArray *) nil_chk(bands_)) count] > 0) {
    for (int i = 0; i < (int) [((IOSObjectArray *) nil_chk(bands_)) count]; i++) {
      [((OrgOssPdfreporterEngineFillJRFillBand *) nil_chk([((IOSObjectArray *) nil_chk(bands_)) objectAtIndex:i])) setOriginWithOrgOssPdfreporterEngineJROrigin:origin];
    }
  }
  [((OrgOssPdfreporterEngineJasperPrint *) nil_chk([((OrgOssPdfreporterEngineFillJRBaseFiller *) nil_chk(self.filler)) getJasperPrint])) addOriginWithOrgOssPdfreporterEngineJROrigin:origin];
}

- (IOSObjectArray *)getFillBands {
  return bands_;
}

- (IOSObjectArray *)getBands {
  return bands_;
}

- (id)clone {
  @throw [[JavaLangUnsupportedOperationException alloc] init];
}

- (BOOL)isEmpty {
  return isEmpty__;
}

- (BOOL)areAllPrintWhenExpressionsNull {
  return areAllPrintWhenExprNull_;
}

- (void)setNewPageColumnWithBOOL:(BOOL)isNew {
  for (int i = 0; i < (int) [((IOSObjectArray *) nil_chk(bands_)) count]; i++) {
    [((OrgOssPdfreporterEngineFillJRFillBand *) nil_chk([((IOSObjectArray *) nil_chk(bands_)) objectAtIndex:i])) setNewPageColumnWithBOOL:isNew];
  }
}

- (void)setNewGroupWithOrgOssPdfreporterEngineJRGroup:(id<OrgOssPdfreporterEngineJRGroup>)group
                                             withBOOL:(BOOL)isNew {
  for (int i = 0; i < (int) [((IOSObjectArray *) nil_chk(bands_)) count]; i++) {
    [((OrgOssPdfreporterEngineFillJRFillBand *) nil_chk([((IOSObjectArray *) nil_chk(bands_)) objectAtIndex:i])) setNewGroupWithOrgOssPdfreporterEngineJRGroup:group withBOOL:isNew];
  }
}

- (void)addNowEvaluationTimeWithOrgOssPdfreporterEngineFillJREvaluationTime:(OrgOssPdfreporterEngineFillJREvaluationTime *)evaluationTime {
  for (int i = 0; i < (int) [((IOSObjectArray *) nil_chk(bands_)) count]; i++) {
    [((OrgOssPdfreporterEngineFillJRFillBand *) nil_chk([((IOSObjectArray *) nil_chk(bands_)) objectAtIndex:i])) addNowEvaluationTimeWithOrgOssPdfreporterEngineFillJREvaluationTime:evaluationTime];
  }
}

- (id)copyWithZone:(NSZone *)zone {
  return [self clone];
}

- (void)copyAllPropertiesTo:(id)copy {
  [super copyAllPropertiesTo:copy];
  OrgOssPdfreporterEngineFillJRFillSection *typedCopy = (OrgOssPdfreporterEngineFillJRFillSection *) copy;
  typedCopy.filler = filler_;
  typedCopy.bands = bands_;
  typedCopy.origin = origin_;
  typedCopy.isEmpty_ = isEmpty__;
  typedCopy.areAllPrintWhenExprNull = areAllPrintWhenExprNull_;
}

@end
