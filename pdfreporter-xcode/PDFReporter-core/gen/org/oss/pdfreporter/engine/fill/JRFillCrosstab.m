//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: pdfreporter-core/src/org/oss/pdfreporter/engine/fill/JRFillCrosstab.java
//
//  Created by kendra on 9/27/13.
//

#include "IOSBooleanArray.h"
#include "IOSClass.h"
#include "IOSIntArray.h"
#include "IOSObjectArray.h"
#include "java/lang/Boolean.h"
#include "java/lang/Integer.h"
#include "java/lang/UnsupportedOperationException.h"
#include "java/util/ArrayList.h"
#include "java/util/Collections.h"
#include "java/util/Comparator.h"
#include "java/util/HashMap.h"
#include "java/util/HashSet.h"
#include "java/util/Iterator.h"
#include "java/util/List.h"
#include "java/util/Map.h"
#include "java/util/Set.h"
#include "java/util/logging/Logger.h"
#include "org/oss/pdfreporter/commons/arrays/Array2D.h"
#include "org/oss/pdfreporter/commons/arrays/Array2DImpl.h"
#include "org/oss/pdfreporter/crosstabs/JRCellContents.h"
#include "org/oss/pdfreporter/crosstabs/JRCrosstab.h"
#include "org/oss/pdfreporter/crosstabs/JRCrosstabBucket.h"
#include "org/oss/pdfreporter/crosstabs/JRCrosstabCell.h"
#include "org/oss/pdfreporter/crosstabs/JRCrosstabColumnGroup.h"
#include "org/oss/pdfreporter/crosstabs/JRCrosstabDataset.h"
#include "org/oss/pdfreporter/crosstabs/JRCrosstabGroup.h"
#include "org/oss/pdfreporter/crosstabs/JRCrosstabMeasure.h"
#include "org/oss/pdfreporter/crosstabs/JRCrosstabParameter.h"
#include "org/oss/pdfreporter/crosstabs/JRCrosstabRowGroup.h"
#include "org/oss/pdfreporter/crosstabs/base/JRBaseCrosstab.h"
#include "org/oss/pdfreporter/crosstabs/design/JRDesignCrosstab.h"
#include "org/oss/pdfreporter/crosstabs/fill/JRCrosstabExpressionEvaluator.h"
#include "org/oss/pdfreporter/crosstabs/fill/JRFillCrosstabCell.h"
#include "org/oss/pdfreporter/crosstabs/fill/JRFillCrosstabColumnGroup.h"
#include "org/oss/pdfreporter/crosstabs/fill/JRFillCrosstabGroup.h"
#include "org/oss/pdfreporter/crosstabs/fill/JRFillCrosstabMeasure.h"
#include "org/oss/pdfreporter/crosstabs/fill/JRFillCrosstabObjectFactory.h"
#include "org/oss/pdfreporter/crosstabs/fill/JRFillCrosstabParameter.h"
#include "org/oss/pdfreporter/crosstabs/fill/JRFillCrosstabRowGroup.h"
#include "org/oss/pdfreporter/crosstabs/fill/JRPercentageCalculator.h"
#include "org/oss/pdfreporter/crosstabs/fill/calculation/BucketDefinition.h"
#include "org/oss/pdfreporter/crosstabs/fill/calculation/CrosstabBucketingService.h"
#include "org/oss/pdfreporter/crosstabs/fill/calculation/CrosstabCell.h"
#include "org/oss/pdfreporter/crosstabs/fill/calculation/HeaderCell.h"
#include "org/oss/pdfreporter/crosstabs/fill/calculation/MeasureDefinition.h"
#include "org/oss/pdfreporter/crosstabs/type/CrosstabColumnPositionEnum.h"
#include "org/oss/pdfreporter/crosstabs/type/CrosstabPercentageEnum.h"
#include "org/oss/pdfreporter/crosstabs/type/CrosstabRowPositionEnum.h"
#include "org/oss/pdfreporter/crosstabs/type/CrosstabTotalPositionEnum.h"
#include "org/oss/pdfreporter/engine/JRDefaultStyleProvider.h"
#include "org/oss/pdfreporter/engine/JRElement.h"
#include "org/oss/pdfreporter/engine/JRException.h"
#include "org/oss/pdfreporter/engine/JRExpression.h"
#include "org/oss/pdfreporter/engine/JRExpressionChunk.h"
#include "org/oss/pdfreporter/engine/JRExpressionCollector.h"
#include "org/oss/pdfreporter/engine/JRLineBox.h"
#include "org/oss/pdfreporter/engine/JROrigin.h"
#include "org/oss/pdfreporter/engine/JRParameter.h"
#include "org/oss/pdfreporter/engine/JRPrintElement.h"
#include "org/oss/pdfreporter/engine/JRPrintFrame.h"
#include "org/oss/pdfreporter/engine/JRPropertiesMap.h"
#include "org/oss/pdfreporter/engine/JRPropertiesUtil.h"
#include "org/oss/pdfreporter/engine/JRRuntimeException.h"
#include "org/oss/pdfreporter/engine/JRVariable.h"
#include "org/oss/pdfreporter/engine/JRVisitor.h"
#include "org/oss/pdfreporter/engine/JasperCompileManager.h"
#include "org/oss/pdfreporter/engine/JasperPrint.h"
#include "org/oss/pdfreporter/engine/JasperReport.h"
#include "org/oss/pdfreporter/engine/JasperReportsContext.h"
#include "org/oss/pdfreporter/engine/fill/IJRFillParameter.h"
#include "org/oss/pdfreporter/engine/fill/JRBaseFiller.h"
#include "org/oss/pdfreporter/engine/fill/JRCalculator.h"
#include "org/oss/pdfreporter/engine/fill/JREvaluator.h"
#include "org/oss/pdfreporter/engine/fill/JRExtendedIncrementerFactory.h"
#include "org/oss/pdfreporter/engine/fill/JRFillCellContents.h"
#include "org/oss/pdfreporter/engine/fill/JRFillCloneFactory.h"
#include "org/oss/pdfreporter/engine/fill/JRFillCloneable.h"
#include "org/oss/pdfreporter/engine/fill/JRFillCrosstab.h"
#include "org/oss/pdfreporter/engine/fill/JRFillDataset.h"
#include "org/oss/pdfreporter/engine/fill/JRFillElement.h"
#include "org/oss/pdfreporter/engine/fill/JRFillExpressionEvaluator.h"
#include "org/oss/pdfreporter/engine/fill/JRFillObjectFactory.h"
#include "org/oss/pdfreporter/engine/fill/JRFillSubreport.h"
#include "org/oss/pdfreporter/engine/fill/JRFillVariable.h"
#include "org/oss/pdfreporter/engine/fill/JRTemplateElement.h"
#include "org/oss/pdfreporter/engine/fill/JRTemplateFrame.h"
#include "org/oss/pdfreporter/engine/fill/JRTemplatePrintFrame.h"
#include "org/oss/pdfreporter/engine/fill/JRYXComparator.h"
#include "org/oss/pdfreporter/engine/type/CalculationEnum.h"
#include "org/oss/pdfreporter/engine/type/ModeEnum.h"
#include "org/oss/pdfreporter/engine/type/RunDirectionEnum.h"
#include "org/oss/pdfreporter/engine/type/SortOrderEnum.h"
#include "org/oss/pdfreporter/engine/type/WhenResourceMissingTypeEnum.h"
#include "org/oss/pdfreporter/engine/util/JRStyleResolver.h"
#include "org/oss/pdfreporter/geometry/IColor.h"
#include "org/oss/pdfreporter/jfree/Dataset.h"

@implementation OrgOssPdfreporterEngineFillJRFillCrosstab

static JavaUtilLoggingLogger * OrgOssPdfreporterEngineFillJRFillCrosstab_logger_;

@synthesize parentCrosstab = parentCrosstab_;
@synthesize dataset = dataset_;
@synthesize rowGroups = rowGroups_;
@synthesize rowGroupsMap = rowGroupsMap_;
@synthesize columnGroups = columnGroups_;
@synthesize columnGroupsMap = columnGroupsMap_;
@synthesize measures = measures_;
@synthesize bucketingService = bucketingService_;
@synthesize variables = variables_;
@synthesize variablesMap = variablesMap_;
@synthesize totalVariables = totalVariables_;
@synthesize retrieveTotal = retrieveTotal_;
@synthesize parameters = parameters_;
@synthesize parametersMap = parametersMap_;
@synthesize ignoreWidth = ignoreWidth_;
@synthesize crosstabEvaluator = crosstabEvaluator_;
@synthesize crossCells = crossCells_;
@synthesize headerCell = headerCell_;
@synthesize whenNoDataCell = whenNoDataCell_;
@synthesize hasData = hasData_;
@synthesize columnHeadersData = columnHeadersData_;
@synthesize rowHeadersData = rowHeadersData_;
@synthesize cellData = cellData_;
@synthesize grandTotals = grandTotals_;
@synthesize percentage = percentage_;
@synthesize crosstabFiller = crosstabFiller_;
@synthesize overflowStartPage = overflowStartPage_;
@synthesize printFrames = printFrames_;

+ (JavaUtilLoggingLogger *)logger {
  return OrgOssPdfreporterEngineFillJRFillCrosstab_logger_;
}

- (id)initWithOrgOssPdfreporterEngineFillJRBaseFiller:(OrgOssPdfreporterEngineFillJRBaseFiller *)filler
             withOrgOssPdfreporterCrosstabsJRCrosstab:(id<OrgOssPdfreporterCrosstabsJRCrosstab>)crosstab
   withOrgOssPdfreporterEngineFillJRFillObjectFactory:(OrgOssPdfreporterEngineFillJRFillObjectFactory *)factory {
  if ((self = [super initWithOrgOssPdfreporterEngineFillJRBaseFiller:filler withOrgOssPdfreporterEngineJRElement:crosstab withOrgOssPdfreporterEngineFillJRFillObjectFactory:factory])) {
    parentCrosstab_ = crosstab;
    [self loadEvaluatorWithOrgOssPdfreporterEngineJasperReport:[((OrgOssPdfreporterEngineFillJRBaseFiller *) nil_chk(filler)) getJasperReport]];
    OrgOssPdfreporterCrosstabsFillJRFillCrosstabObjectFactory *crosstabFactory = [[OrgOssPdfreporterCrosstabsFillJRFillCrosstabObjectFactory alloc] initWithOrgOssPdfreporterEngineFillJRFillObjectFactory:factory withOrgOssPdfreporterEngineFillJRFillExpressionEvaluator:crosstabEvaluator_];
    [((OrgOssPdfreporterCrosstabsFillJRFillCrosstabObjectFactory *) nil_chk(crosstabFactory)) setParentOriginProviderWithOrgOssPdfreporterEngineFillJROriginProvider:self];
    headerCell_ = [((OrgOssPdfreporterCrosstabsFillJRFillCrosstabObjectFactory *) nil_chk(crosstabFactory)) getCellWithOrgOssPdfreporterCrosstabsJRCellContents:[((id<OrgOssPdfreporterCrosstabsJRCrosstab>) nil_chk(crosstab)) getHeaderCell] withNSString:[OrgOssPdfreporterCrosstabsJRCellContents TYPE_CROSSTAB_HEADER]];
    [self copyRowGroupsWithOrgOssPdfreporterCrosstabsJRCrosstab:crosstab withOrgOssPdfreporterCrosstabsFillJRFillCrosstabObjectFactory:crosstabFactory];
    [self copyColumnGroupsWithOrgOssPdfreporterCrosstabsJRCrosstab:crosstab withOrgOssPdfreporterCrosstabsFillJRFillCrosstabObjectFactory:crosstabFactory];
    [self copyMeasuresWithOrgOssPdfreporterCrosstabsJRCrosstab:crosstab withOrgOssPdfreporterCrosstabsFillJRFillCrosstabObjectFactory:crosstabFactory];
    [self copyCellsWithOrgOssPdfreporterCrosstabsJRCrosstab:crosstab withOrgOssPdfreporterCrosstabsFillJRFillCrosstabObjectFactory:crosstabFactory];
    whenNoDataCell_ = [((OrgOssPdfreporterCrosstabsFillJRFillCrosstabObjectFactory *) nil_chk(crosstabFactory)) getCellWithOrgOssPdfreporterCrosstabsJRCellContents:[((id<OrgOssPdfreporterCrosstabsJRCrosstab>) nil_chk(crosstab)) getWhenNoDataCell] withNSString:[OrgOssPdfreporterCrosstabsJRCellContents TYPE_NO_DATA_CELL]];
    dataset_ = [((OrgOssPdfreporterEngineFillJRFillObjectFactory *) nil_chk(factory)) getCrosstabDatasetWithOrgOssPdfreporterCrosstabsJRCrosstabDataset:[((id<OrgOssPdfreporterCrosstabsJRCrosstab>) nil_chk(crosstab)) getDataset] withOrgOssPdfreporterEngineFillJRFillCrosstab:self];
    [((OrgOssPdfreporterCrosstabsFillJRCrosstabExpressionEvaluator *) nil_chk(crosstabEvaluator_)) setFillDatasetWithOrgOssPdfreporterEngineFillJRFillDataset:[((OrgOssPdfreporterEngineFillJRFillCrosstab_JRFillCrosstabDataset *) nil_chk(dataset_)) getFillDataset]];
    [self copyParametersWithOrgOssPdfreporterCrosstabsJRCrosstab:crosstab withOrgOssPdfreporterEngineFillJRFillObjectFactory:factory];
    [self copyVariablesWithOrgOssPdfreporterCrosstabsJRCrosstab:crosstab withOrgOssPdfreporterEngineFillJRFillObjectFactory:crosstabFactory];
    crosstabFiller_ = [[OrgOssPdfreporterEngineFillJRFillCrosstab_CrosstabFiller alloc] initWithOrgOssPdfreporterEngineFillJRFillCrosstab:self];
  }
  return self;
}

- (BOOL)isIgnoreWidthWithOrgOssPdfreporterEngineFillJRBaseFiller:(OrgOssPdfreporterEngineFillJRBaseFiller *)filler
                        withOrgOssPdfreporterCrosstabsJRCrosstab:(id<OrgOssPdfreporterCrosstabsJRCrosstab>)crosstab {
  JavaLangBoolean *crosstabIgnoreWidth = [((id<OrgOssPdfreporterCrosstabsJRCrosstab>) nil_chk(crosstab)) getIgnoreWidth];
  if (crosstabIgnoreWidth != nil) {
    return [crosstabIgnoreWidth booleanValue];
  }
  NSString *reportProperty = [((OrgOssPdfreporterEngineJRPropertiesMap *) nil_chk([((OrgOssPdfreporterEngineJasperReport *) nil_chk(((OrgOssPdfreporterEngineFillJRBaseFiller *) nil_chk(filler)).jasperReport)) getPropertiesMap])) getPropertyWithNSString:[OrgOssPdfreporterCrosstabsJRCrosstab PROPERTY_IGNORE_WIDTH]];
  if (reportProperty != nil) {
    return [OrgOssPdfreporterEngineJRPropertiesUtil asBooleanWithNSString:reportProperty];
  }
  JavaLangBoolean *ignorePaginationParam = (JavaLangBoolean *) [((OrgOssPdfreporterEngineFillJRBaseFiller *) nil_chk([((OrgOssPdfreporterEngineFillJRBaseFiller *) nil_chk(filler)) getMasterFiller])) getParameterValueWithNSString:[OrgOssPdfreporterEngineJRParameter IS_IGNORE_PAGINATION]];
  if (ignorePaginationParam != nil && [((JavaLangBoolean *) nil_chk(ignorePaginationParam)) booleanValue]) {
    return [((JavaLangBoolean *) nil_chk(ignorePaginationParam)) booleanValue];
  }
  return [((OrgOssPdfreporterEngineJRPropertiesUtil *) nil_chk([((OrgOssPdfreporterEngineFillJRBaseFiller *) nil_chk(filler)) getPropertiesUtil])) getBooleanPropertyWithNSString:[OrgOssPdfreporterCrosstabsJRCrosstab PROPERTY_IGNORE_WIDTH]];
}

- (OrgOssPdfreporterEngineTypeModeEnumEnum *)getModeValue {
  return [OrgOssPdfreporterEngineUtilJRStyleResolver getModeWithOrgOssPdfreporterEngineJRCommonElement:self withOrgOssPdfreporterEngineTypeModeEnumEnum:[OrgOssPdfreporterEngineTypeModeEnumEnum TRANSPARENT]];
}

- (void)copyRowGroupsWithOrgOssPdfreporterCrosstabsJRCrosstab:(id<OrgOssPdfreporterCrosstabsJRCrosstab>)crosstab
withOrgOssPdfreporterCrosstabsFillJRFillCrosstabObjectFactory:(OrgOssPdfreporterCrosstabsFillJRFillCrosstabObjectFactory *)factory OBJC_METHOD_FAMILY_NONE {
  IOSObjectArray *groups = [((id<OrgOssPdfreporterCrosstabsJRCrosstab>) nil_chk(crosstab)) getRowGroups];
  rowGroups_ = [IOSObjectArray arrayWithLength:(int) [((IOSObjectArray *) nil_chk(groups)) count] type:[IOSClass classWithClass:[OrgOssPdfreporterCrosstabsFillJRFillCrosstabRowGroup class]]];
  rowGroupsMap_ = [[JavaUtilHashMap alloc] init];
  for (int i = 0; i < (int) [((IOSObjectArray *) nil_chk(groups)) count]; ++i) {
    OrgOssPdfreporterCrosstabsFillJRFillCrosstabRowGroup *group = [((OrgOssPdfreporterCrosstabsFillJRFillCrosstabObjectFactory *) nil_chk(factory)) getCrosstabRowGroupWithOrgOssPdfreporterCrosstabsJRCrosstabRowGroup:[((IOSObjectArray *) nil_chk(groups)) objectAtIndex:i]];
    [((OrgOssPdfreporterEngineFillJRFillCellContents *) nil_chk([((OrgOssPdfreporterCrosstabsFillJRFillCrosstabRowGroup *) nil_chk(group)) getFillHeader])) setVerticalPositionTypeWithOrgOssPdfreporterCrosstabsTypeCrosstabRowPositionEnumEnum:[((id<OrgOssPdfreporterCrosstabsJRCrosstabRowGroup>) nil_chk([((IOSObjectArray *) nil_chk(groups)) objectAtIndex:i])) getPositionValue]];
    (void) [((IOSObjectArray *) nil_chk(rowGroups_)) replaceObjectAtIndex:i withObject:group];
    (void) [((id<JavaUtilMap>) nil_chk(rowGroupsMap_)) putWithId:[((OrgOssPdfreporterCrosstabsFillJRFillCrosstabRowGroup *) nil_chk(group)) getName] withId:[JavaLangInteger valueOfWithInt:i]];
  }
}

- (void)copyColumnGroupsWithOrgOssPdfreporterCrosstabsJRCrosstab:(id<OrgOssPdfreporterCrosstabsJRCrosstab>)crosstab
   withOrgOssPdfreporterCrosstabsFillJRFillCrosstabObjectFactory:(OrgOssPdfreporterCrosstabsFillJRFillCrosstabObjectFactory *)factory OBJC_METHOD_FAMILY_NONE {
  IOSObjectArray *groups = [((id<OrgOssPdfreporterCrosstabsJRCrosstab>) nil_chk(crosstab)) getColumnGroups];
  columnGroups_ = [IOSObjectArray arrayWithLength:(int) [((IOSObjectArray *) nil_chk(groups)) count] type:[IOSClass classWithClass:[OrgOssPdfreporterCrosstabsFillJRFillCrosstabColumnGroup class]]];
  columnGroupsMap_ = [[JavaUtilHashMap alloc] init];
  for (int i = 0; i < (int) [((IOSObjectArray *) nil_chk(groups)) count]; ++i) {
    OrgOssPdfreporterCrosstabsFillJRFillCrosstabColumnGroup *group = [((OrgOssPdfreporterCrosstabsFillJRFillCrosstabObjectFactory *) nil_chk(factory)) getCrosstabColumnGroupWithOrgOssPdfreporterCrosstabsJRCrosstabColumnGroup:[((IOSObjectArray *) nil_chk(groups)) objectAtIndex:i]];
    (void) [((IOSObjectArray *) nil_chk(columnGroups_)) replaceObjectAtIndex:i withObject:group];
    (void) [((id<JavaUtilMap>) nil_chk(columnGroupsMap_)) putWithId:[((OrgOssPdfreporterCrosstabsFillJRFillCrosstabColumnGroup *) nil_chk(group)) getName] withId:[JavaLangInteger valueOfWithInt:i]];
  }
}

- (void)copyMeasuresWithOrgOssPdfreporterCrosstabsJRCrosstab:(id<OrgOssPdfreporterCrosstabsJRCrosstab>)crosstab
withOrgOssPdfreporterCrosstabsFillJRFillCrosstabObjectFactory:(OrgOssPdfreporterCrosstabsFillJRFillCrosstabObjectFactory *)factory OBJC_METHOD_FAMILY_NONE {
  IOSObjectArray *crossMeasures = [((id<OrgOssPdfreporterCrosstabsJRCrosstab>) nil_chk(crosstab)) getMeasures];
  measures_ = [IOSObjectArray arrayWithLength:(int) [((IOSObjectArray *) nil_chk(crossMeasures)) count] type:[IOSClass classWithClass:[OrgOssPdfreporterCrosstabsFillJRFillCrosstabMeasure class]]];
  for (int i = 0; i < (int) [((IOSObjectArray *) nil_chk(crossMeasures)) count]; i++) {
    (void) [((IOSObjectArray *) nil_chk(measures_)) replaceObjectAtIndex:i withObject:[((OrgOssPdfreporterCrosstabsFillJRFillCrosstabObjectFactory *) nil_chk(factory)) getCrosstabMeasureWithOrgOssPdfreporterCrosstabsJRCrosstabMeasure:[((IOSObjectArray *) nil_chk(crossMeasures)) objectAtIndex:i]]];
  }
}

- (void)copyParametersWithOrgOssPdfreporterCrosstabsJRCrosstab:(id<OrgOssPdfreporterCrosstabsJRCrosstab>)crosstab
            withOrgOssPdfreporterEngineFillJRFillObjectFactory:(OrgOssPdfreporterEngineFillJRFillObjectFactory *)factory OBJC_METHOD_FAMILY_NONE {
  IOSObjectArray *crossParams = [((id<OrgOssPdfreporterCrosstabsJRCrosstab>) nil_chk(crosstab)) getParameters];
  parameters_ = [IOSObjectArray arrayWithLength:(int) [((IOSObjectArray *) nil_chk(crossParams)) count] type:[IOSClass classWithClass:[OrgOssPdfreporterCrosstabsFillJRFillCrosstabParameter class]]];
  parametersMap_ = [[JavaUtilHashMap alloc] init];
  for (int i = 0; i < (int) [((IOSObjectArray *) nil_chk(crossParams)) count]; i++) {
    (void) [((IOSObjectArray *) nil_chk(parameters_)) replaceObjectAtIndex:i withObject:[((OrgOssPdfreporterEngineFillJRFillObjectFactory *) nil_chk(factory)) getCrosstabParameterWithOrgOssPdfreporterCrosstabsJRCrosstabParameter:[((IOSObjectArray *) nil_chk(crossParams)) objectAtIndex:i]]];
    (void) [((id<JavaUtilMap>) nil_chk(parametersMap_)) putWithId:[((OrgOssPdfreporterCrosstabsFillJRFillCrosstabParameter *) nil_chk([((IOSObjectArray *) nil_chk(parameters_)) objectAtIndex:i])) getName] withId:[((IOSObjectArray *) nil_chk(parameters_)) objectAtIndex:i]];
  }
}

- (void)copyCellsWithOrgOssPdfreporterCrosstabsJRCrosstab:(id<OrgOssPdfreporterCrosstabsJRCrosstab>)crosstab
withOrgOssPdfreporterCrosstabsFillJRFillCrosstabObjectFactory:(OrgOssPdfreporterCrosstabsFillJRFillCrosstabObjectFactory *)factory OBJC_METHOD_FAMILY_NONE {
  id<OrgOssPdfreporterCommonsArraysArray2D> crosstabCells = [((id<OrgOssPdfreporterCrosstabsJRCrosstab>) nil_chk(crosstab)) getCells];
  crossCells_ = [[OrgOssPdfreporterCommonsArraysArray2DImpl alloc] initWithInt:(int) [((IOSObjectArray *) nil_chk(rowGroups_)) count] + 1 withInt:(int) [((IOSObjectArray *) nil_chk(columnGroups_)) count] + 1];
  for (int i = 0; i <= (int) [((IOSObjectArray *) nil_chk(rowGroups_)) count]; ++i) {
    for (int j = 0; j <= (int) [((IOSObjectArray *) nil_chk(columnGroups_)) count]; ++j) {
      if ([((id<OrgOssPdfreporterCommonsArraysArray2D>) nil_chk(crosstabCells)) getWithInt:i withInt:j] != nil) {
        [((id<OrgOssPdfreporterCommonsArraysArray2D>) nil_chk(crossCells_)) setWithInt:i withInt:j withId:[((OrgOssPdfreporterCrosstabsFillJRFillCrosstabObjectFactory *) nil_chk(factory)) getCrosstabCellWithOrgOssPdfreporterCrosstabsJRCrosstabCell:[((id<OrgOssPdfreporterCommonsArraysArray2D>) nil_chk(crosstabCells)) getWithInt:i withInt:j]]];
      }
    }
  }
}

- (void)copyVariablesWithOrgOssPdfreporterCrosstabsJRCrosstab:(id<OrgOssPdfreporterCrosstabsJRCrosstab>)crosstab
           withOrgOssPdfreporterEngineFillJRFillObjectFactory:(OrgOssPdfreporterEngineFillJRFillObjectFactory *)factory OBJC_METHOD_FAMILY_NONE {
  IOSObjectArray *vars = [((id<OrgOssPdfreporterCrosstabsJRCrosstab>) nil_chk(crosstab)) getVariables];
  variables_ = [IOSObjectArray arrayWithLength:(int) [((IOSObjectArray *) nil_chk(vars)) count] type:[IOSClass classWithClass:[OrgOssPdfreporterEngineFillJRFillVariable class]]];
  variablesMap_ = [[JavaUtilHashMap alloc] init];
  for (int i = 0; i < (int) [((IOSObjectArray *) nil_chk(variables_)) count]; i++) {
    (void) [((IOSObjectArray *) nil_chk(variables_)) replaceObjectAtIndex:i withObject:[((OrgOssPdfreporterEngineFillJRFillObjectFactory *) nil_chk(factory)) getVariableWithOrgOssPdfreporterEngineJRVariable:[((IOSObjectArray *) nil_chk(vars)) objectAtIndex:i]]];
    (void) [((id<JavaUtilMap>) nil_chk(variablesMap_)) putWithId:[((OrgOssPdfreporterEngineFillJRFillVariable *) nil_chk([((IOSObjectArray *) nil_chk(variables_)) objectAtIndex:i])) getName] withId:[((IOSObjectArray *) nil_chk(variables_)) objectAtIndex:i]];
  }
  id<JavaUtilMap> totalVarPos = [[JavaUtilHashMap alloc] init];
  totalVariables_ = [IOSObjectArray arrayWithDimensions:3 lengths:(int[]){ (int) [((IOSObjectArray *) nil_chk(rowGroups_)) count] + 1, (int) [((IOSObjectArray *) nil_chk(columnGroups_)) count] + 1, (int) [((IOSObjectArray *) nil_chk(measures_)) count] } type:[IOSClass classWithClass:[OrgOssPdfreporterEngineFillJRFillVariable class]]];
  for (int row = 0; row <= (int) [((IOSObjectArray *) nil_chk(rowGroups_)) count]; ++row) {
    id<OrgOssPdfreporterCrosstabsJRCrosstabRowGroup> rowGroup = row == (int) [((IOSObjectArray *) nil_chk(rowGroups_)) count] ? nil : [((IOSObjectArray *) nil_chk(rowGroups_)) objectAtIndex:row];
    for (int col = 0; col <= (int) [((IOSObjectArray *) nil_chk(columnGroups_)) count]; ++col) {
      id<OrgOssPdfreporterCrosstabsJRCrosstabColumnGroup> colGroup = col == (int) [((IOSObjectArray *) nil_chk(columnGroups_)) count] ? nil : [((IOSObjectArray *) nil_chk(columnGroups_)) objectAtIndex:col];
      if (row < (int) [((IOSObjectArray *) nil_chk(rowGroups_)) count] || col < (int) [((IOSObjectArray *) nil_chk(columnGroups_)) count]) {
        for (int m = 0; m < (int) [((IOSObjectArray *) nil_chk(measures_)) count]; m++) {
          NSString *totalVariableName = [OrgOssPdfreporterCrosstabsDesignJRDesignCrosstab getTotalVariableNameWithOrgOssPdfreporterCrosstabsJRCrosstabMeasure:[((IOSObjectArray *) nil_chk(measures_)) objectAtIndex:m] withOrgOssPdfreporterCrosstabsJRCrosstabRowGroup:rowGroup withOrgOssPdfreporterCrosstabsJRCrosstabColumnGroup:colGroup];
          (void) [((IOSObjectArray *) nil_chk([((IOSObjectArray *) nil_chk([((IOSObjectArray *) nil_chk(totalVariables_)) objectAtIndex:row])) objectAtIndex:col])) replaceObjectAtIndex:m withObject:[((id<JavaUtilMap>) nil_chk(variablesMap_)) getWithId:totalVariableName]];
          (void) [((id<JavaUtilMap>) nil_chk(totalVarPos)) putWithId:totalVariableName withId:[IOSIntArray arrayWithInts:(int[]){ row, col } count:2]];
        }
      }
    }
  }
  id<JavaUtilSet> measureVars = [[JavaUtilHashSet alloc] init];
  {
    IOSObjectArray *a__ = measures_;
    int n__ = (int) [((IOSObjectArray *) nil_chk(a__)) count];
    for (int i__ = 0; i__ < n__; i__++) {
      OrgOssPdfreporterCrosstabsFillJRFillCrosstabMeasure *measure = [((IOSObjectArray *) nil_chk(a__)) objectAtIndex:i__];
      [((id<JavaUtilSet>) nil_chk(measureVars)) addWithId:[((OrgOssPdfreporterEngineFillJRFillVariable *) nil_chk([((OrgOssPdfreporterCrosstabsFillJRFillCrosstabMeasure *) nil_chk(measure)) getFillVariable])) getName]];
    }
  }
  retrieveTotal_ = [IOSBooleanArray arrayWithDimensions:2 lengths:(int[]){ (int) [((IOSObjectArray *) nil_chk(rowGroups_)) count] + 1, (int) [((IOSObjectArray *) nil_chk(columnGroups_)) count] + 1 }];
  OrgOssPdfreporterEngineJRExpressionCollector *collector = [OrgOssPdfreporterEngineJRExpressionCollector collectorWithOrgOssPdfreporterEngineJasperReportsContext:[((OrgOssPdfreporterEngineFillJRBaseFiller *) nil_chk(filler_)) getJasperReportsContext] withOrgOssPdfreporterEngineJRReport:[((OrgOssPdfreporterEngineFillJRBaseFiller *) nil_chk(filler_)) getJasperReport] withOrgOssPdfreporterCrosstabsJRCrosstab:crosstab];
  id<JavaUtilList> expressions = [((OrgOssPdfreporterEngineJRExpressionCollector *) nil_chk(collector)) getExpressionsWithOrgOssPdfreporterCrosstabsJRCrosstab:crosstab];
  for (id<JavaUtilIterator> iter = [((id<JavaUtilList>) nil_chk(expressions)) iterator]; [((id<JavaUtilIterator>) nil_chk(iter)) hasNext]; ) {
    id<OrgOssPdfreporterEngineJRExpression> expression = [((id<JavaUtilIterator>) nil_chk(iter)) next];
    id expressionContext = [((OrgOssPdfreporterEngineJRExpressionCollector *) nil_chk(collector)) getExpressionContextWithOrgOssPdfreporterEngineJRExpression:expression];
    BOOL groupHeaderExpression = [expressionContext conformsToProtocol: @protocol(OrgOssPdfreporterCrosstabsJRCrosstabGroup)];
    IOSObjectArray *chunks = [((id<OrgOssPdfreporterEngineJRExpression>) nil_chk(expression)) getChunks];
    if (chunks != nil) {
      for (int i = 0; i < (int) [chunks count]; i++) {
        id<OrgOssPdfreporterEngineJRExpressionChunk> chunk = [chunks objectAtIndex:i];
        if ([((id<OrgOssPdfreporterEngineJRExpressionChunk>) nil_chk(chunk)) getType] == OrgOssPdfreporterEngineJRExpressionChunk_TYPE_VARIABLE) {
          NSString *varName = [((id<OrgOssPdfreporterEngineJRExpressionChunk>) nil_chk(chunk)) getText];
          IOSIntArray *pos = [((id<JavaUtilMap>) nil_chk(totalVarPos)) getWithId:varName];
          if (pos != nil) {
            (*[((IOSBooleanArray *) nil_chk([((IOSObjectArray *) nil_chk(retrieveTotal_)) objectAtIndex:[pos intAtIndex:0]])) booleanRefAtIndex:[pos intAtIndex:1]]) = YES;
          }
          if (groupHeaderExpression && (pos != nil || [((id<JavaUtilSet>) nil_chk(measureVars)) containsWithId:varName])) {
            (*[((IOSBooleanArray *) nil_chk([((IOSObjectArray *) nil_chk(retrieveTotal_)) objectAtIndex:0])) booleanRefAtIndex:0]) = YES;
          }
        }
      }
    }
  }
}

- (OrgOssPdfreporterEngineFillJRBaseFiller *)getFiller {
  return filler_;
}

- (void)loadEvaluatorWithOrgOssPdfreporterEngineJasperReport:(OrgOssPdfreporterEngineJasperReport *)jasperReport {
  @try {
    OrgOssPdfreporterEngineFillJREvaluator *evaluator = (OrgOssPdfreporterEngineFillJREvaluator *) [((OrgOssPdfreporterEngineJasperCompileManager *) nil_chk([OrgOssPdfreporterEngineJasperCompileManager getInstanceWithOrgOssPdfreporterEngineJasperReportsContext:[((OrgOssPdfreporterEngineFillJRBaseFiller *) nil_chk(filler_)) getJasperReportsContext]])) getEvaluatorWithOrgOssPdfreporterEngineJasperReport:jasperReport withOrgOssPdfreporterCrosstabsJRCrosstab:parentCrosstab_];
    crosstabEvaluator_ = [[OrgOssPdfreporterCrosstabsFillJRCrosstabExpressionEvaluator alloc] initWithOrgOssPdfreporterEngineFillJREvaluator:evaluator];
  }
  @catch (OrgOssPdfreporterEngineJRException *e) {
    @throw [[OrgOssPdfreporterEngineJRRuntimeException alloc] initWithNSString:@"Could not load evaluator for crosstab." withJavaLangThrowable:e];
  }
}

- (OrgOssPdfreporterCrosstabsFillCalculationCrosstabBucketingService *)createServiceWithChar:(char)evaluation {
  BOOL hasOrderByExpression = NO;
  id<JavaUtilList> rowBuckets = [[JavaUtilArrayList alloc] initWithInt:(int) [((IOSObjectArray *) nil_chk(rowGroups_)) count]];
  for (int i = 0; i < (int) [((IOSObjectArray *) nil_chk(rowGroups_)) count]; ++i) {
    OrgOssPdfreporterCrosstabsFillJRFillCrosstabRowGroup *group = [((IOSObjectArray *) nil_chk(rowGroups_)) objectAtIndex:i];
    [((id<JavaUtilList>) nil_chk(rowBuckets)) addWithId:[self createServiceBucketWithOrgOssPdfreporterCrosstabsJRCrosstabGroup:group withChar:evaluation]];
    hasOrderByExpression |= [((id<OrgOssPdfreporterCrosstabsJRCrosstabBucket>) nil_chk([((OrgOssPdfreporterCrosstabsFillJRFillCrosstabRowGroup *) nil_chk(group)) getBucket])) getOrderByExpression] != nil;
  }
  id<JavaUtilList> colBuckets = [[JavaUtilArrayList alloc] initWithInt:(int) [((IOSObjectArray *) nil_chk(columnGroups_)) count]];
  for (int i = 0; i < (int) [((IOSObjectArray *) nil_chk(columnGroups_)) count]; ++i) {
    OrgOssPdfreporterCrosstabsFillJRFillCrosstabColumnGroup *group = [((IOSObjectArray *) nil_chk(columnGroups_)) objectAtIndex:i];
    [((id<JavaUtilList>) nil_chk(colBuckets)) addWithId:[self createServiceBucketWithOrgOssPdfreporterCrosstabsJRCrosstabGroup:group withChar:evaluation]];
    hasOrderByExpression |= [((id<OrgOssPdfreporterCrosstabsJRCrosstabBucket>) nil_chk([((OrgOssPdfreporterCrosstabsFillJRFillCrosstabColumnGroup *) nil_chk(group)) getBucket])) getOrderByExpression] != nil;
  }
  percentage_ = NO;
  id<JavaUtilList> measureList = [[JavaUtilArrayList alloc] initWithInt:(int) [((IOSObjectArray *) nil_chk(measures_)) count]];
  for (int i = 0; i < (int) [((IOSObjectArray *) nil_chk(measures_)) count]; ++i) {
    [((id<JavaUtilList>) nil_chk(measureList)) addWithId:[self createServiceMeasureWithOrgOssPdfreporterCrosstabsFillJRFillCrosstabMeasure:[((IOSObjectArray *) nil_chk(measures_)) objectAtIndex:i]]];
    percentage_ |= [((OrgOssPdfreporterCrosstabsFillJRFillCrosstabMeasure *) nil_chk([((IOSObjectArray *) nil_chk(measures_)) objectAtIndex:i])) getPercentageType] == [OrgOssPdfreporterCrosstabsTypeCrosstabPercentageEnumEnum GRAND_TOTAL];
  }
  if (percentage_ || hasOrderByExpression) {
    [((OrgOssPdfreporterCrosstabsFillCalculationBucketDefinition *) nil_chk([((id<JavaUtilList>) nil_chk(rowBuckets)) getWithInt:0])) setComputeTotal];
    [((OrgOssPdfreporterCrosstabsFillCalculationBucketDefinition *) nil_chk([((id<JavaUtilList>) nil_chk(colBuckets)) getWithInt:0])) setComputeTotal];
  }
  return [[OrgOssPdfreporterCrosstabsFillCalculationCrosstabBucketingService alloc] initWithOrgOssPdfreporterCrosstabsFillCalculationBucketingServiceContext:self withJavaUtilList:rowBuckets withJavaUtilList:colBuckets withJavaUtilList:measureList withBOOL:[((OrgOssPdfreporterEngineFillJRFillCrosstab_JRFillCrosstabDataset *) nil_chk(dataset_)) isDataPreSorted] withBooleanArray2:retrieveTotal_];
}

- (OrgOssPdfreporterCrosstabsFillCalculationBucketDefinition *)createServiceBucketWithOrgOssPdfreporterCrosstabsJRCrosstabGroup:(id<OrgOssPdfreporterCrosstabsJRCrosstabGroup>)group
                                                                                                                       withChar:(char)evaluation {
  id<OrgOssPdfreporterCrosstabsJRCrosstabBucket> bucket = [((id<OrgOssPdfreporterCrosstabsJRCrosstabGroup>) nil_chk(group)) getBucket];
  id<JavaUtilComparator> comparator = nil;
  id<OrgOssPdfreporterEngineJRExpression> comparatorExpression = [((id<OrgOssPdfreporterCrosstabsJRCrosstabBucket>) nil_chk(bucket)) getComparatorExpression];
  if (comparatorExpression != nil) {
    comparator = (id<JavaUtilComparator>) [self evaluateExpressionWithOrgOssPdfreporterEngineJRExpression:comparatorExpression withChar:evaluation];
  }
  return [[OrgOssPdfreporterCrosstabsFillCalculationBucketDefinition alloc] initWithIOSClass:[((id<OrgOssPdfreporterCrosstabsJRCrosstabBucket>) nil_chk(bucket)) getValueClass] withOrgOssPdfreporterEngineJRExpression:[((id<OrgOssPdfreporterCrosstabsJRCrosstabBucket>) nil_chk(bucket)) getOrderByExpression] withJavaUtilComparator:comparator withOrgOssPdfreporterEngineTypeSortOrderEnumEnum:[((id<OrgOssPdfreporterCrosstabsJRCrosstabBucket>) nil_chk(bucket)) getOrderValue] withOrgOssPdfreporterCrosstabsTypeCrosstabTotalPositionEnumEnum:[((id<OrgOssPdfreporterCrosstabsJRCrosstabGroup>) nil_chk(group)) getTotalPositionValue]];
}

- (OrgOssPdfreporterCrosstabsFillCalculationMeasureDefinition *)createServiceMeasureWithOrgOssPdfreporterCrosstabsFillJRFillCrosstabMeasure:(OrgOssPdfreporterCrosstabsFillJRFillCrosstabMeasure *)measure {
  return [[OrgOssPdfreporterCrosstabsFillCalculationMeasureDefinition alloc] initWithIOSClass:[((OrgOssPdfreporterCrosstabsFillJRFillCrosstabMeasure *) nil_chk(measure)) getValueClass] withOrgOssPdfreporterEngineTypeCalculationEnumEnum:[((OrgOssPdfreporterCrosstabsFillJRFillCrosstabMeasure *) nil_chk(measure)) getCalculationValue] withOrgOssPdfreporterEngineFillJRExtendedIncrementerFactory:[((OrgOssPdfreporterCrosstabsFillJRFillCrosstabMeasure *) nil_chk(measure)) getIncrementerFactory]];
}

- (id)evaluateMeasuresExpressionWithOrgOssPdfreporterEngineJRExpression:(id<OrgOssPdfreporterEngineJRExpression>)expression
withOrgOssPdfreporterCrosstabsFillCalculationMeasureDefinition_MeasureValueArray:(IOSObjectArray *)measureValues {
  for (int i = 0; i < (int) [((IOSObjectArray *) nil_chk(measures_)) count]; i++) {
    id value = [((OrgOssPdfreporterCrosstabsFillCalculationMeasureDefinition_MeasureValue *) nil_chk([((IOSObjectArray *) nil_chk(measureValues)) objectAtIndex:i])) getValue];
    [((OrgOssPdfreporterEngineFillJRFillVariable *) nil_chk([((OrgOssPdfreporterCrosstabsFillJRFillCrosstabMeasure *) nil_chk([((IOSObjectArray *) nil_chk(measures_)) objectAtIndex:i])) getFillVariable])) setValueWithId:value];
  }
  return [((OrgOssPdfreporterCrosstabsFillJRCrosstabExpressionEvaluator *) nil_chk(crosstabEvaluator_)) evaluateWithOrgOssPdfreporterEngineJRExpression:expression withChar:OrgOssPdfreporterEngineJRExpression_EVALUATION_DEFAULT];
}

- (void)reset {
  [super reset];
  for (int i = 0; i < (int) [((IOSObjectArray *) nil_chk(variables_)) count]; i++) {
    [((OrgOssPdfreporterEngineFillJRFillVariable *) nil_chk([((IOSObjectArray *) nil_chk(variables_)) objectAtIndex:i])) setValueWithId:nil];
    [((OrgOssPdfreporterEngineFillJRFillVariable *) nil_chk([((IOSObjectArray *) nil_chk(variables_)) objectAtIndex:i])) setInitializedWithBOOL:YES];
  }
  printFrames_ = nil;
}

- (void)evaluateWithChar:(char)evaluation {
  [self reset];
  [self evaluatePrintWhenExpressionWithChar:evaluation];
  if ([self isPrintWhenExpressionNull] || [self isPrintWhenTrue]) {
    [self evaluatePropertiesWithChar:evaluation];
    [self evaluateStyleWithChar:evaluation];
    [((OrgOssPdfreporterEngineFillJRFillCrosstab_JRFillCrosstabDataset *) nil_chk(dataset_)) evaluateDatasetRunWithChar:evaluation];
    [self initEvaluatorWithChar:evaluation];
    [((OrgOssPdfreporterCrosstabsFillCalculationCrosstabBucketingService *) nil_chk(bucketingService_)) processData];
    [((OrgOssPdfreporterCrosstabsFillCalculationCrosstabBucketingService *) nil_chk(bucketingService_)) createCrosstab];
    hasData_ = [((OrgOssPdfreporterCrosstabsFillCalculationCrosstabBucketingService *) nil_chk(bucketingService_)) hasData];
    if (hasData_) {
      columnHeadersData_ = [((OrgOssPdfreporterCrosstabsFillCalculationCrosstabBucketingService *) nil_chk(bucketingService_)) getColumnHeaders];
      rowHeadersData_ = [((OrgOssPdfreporterCrosstabsFillCalculationCrosstabBucketingService *) nil_chk(bucketingService_)) getRowHeaders];
      cellData_ = [((OrgOssPdfreporterCrosstabsFillCalculationCrosstabBucketingService *) nil_chk(bucketingService_)) getCrosstabCells];
      if (percentage_) {
        grandTotals_ = [((OrgOssPdfreporterCrosstabsFillCalculationCrosstabBucketingService *) nil_chk(bucketingService_)) getGrandTotals];
      }
      [((OrgOssPdfreporterEngineFillJRFillCrosstab_CrosstabFiller *) nil_chk(crosstabFiller_)) initCrosstab];
    }
    overflowStartPage_ = 0;
    ignoreWidth_ = [self isIgnoreWidthWithOrgOssPdfreporterEngineFillJRBaseFiller:filler_ withOrgOssPdfreporterCrosstabsJRCrosstab:parentCrosstab_];
  }
}

- (void)initEvaluatorWithChar:(char)evaluation OBJC_METHOD_FAMILY_NONE {
  id<JavaUtilMap> parameterValues = [OrgOssPdfreporterEngineFillJRFillSubreport getParameterValuesWithOrgOssPdfreporterEngineFillJRBaseFiller:filler_ withOrgOssPdfreporterEngineJRExpression:[self getParametersMapExpression] withOrgOssPdfreporterEngineJRDatasetParameterArray:[self getParameters] withChar:evaluation withBOOL:YES withBOOL:NO withBOOL:NO];
  (void) [((id<JavaUtilMap>) nil_chk(parameterValues)) putWithId:[OrgOssPdfreporterEngineJRParameter REPORT_PARAMETERS_MAP] withId:parameterValues];
  for (int i = 0; i < (int) [((IOSObjectArray *) nil_chk(parameters_)) count]; i++) {
    id value = [((id<JavaUtilMap>) nil_chk(parameterValues)) getWithId:[((OrgOssPdfreporterCrosstabsFillJRFillCrosstabParameter *) nil_chk([((IOSObjectArray *) nil_chk(parameters_)) objectAtIndex:i])) getName]];
    [((OrgOssPdfreporterCrosstabsFillJRFillCrosstabParameter *) nil_chk([((IOSObjectArray *) nil_chk(parameters_)) objectAtIndex:i])) setValueWithId:value];
  }
  [((OrgOssPdfreporterCrosstabsFillJRCrosstabExpressionEvaluator *) nil_chk(crosstabEvaluator_)) init__WithJavaUtilMap:parametersMap_ withJavaUtilMap:variablesMap_ withOrgOssPdfreporterEngineTypeWhenResourceMissingTypeEnumEnum:[((OrgOssPdfreporterEngineFillJRBaseFiller *) nil_chk(filler_)) getWhenResourceMissingType]];
}

- (void)initBucketingService OBJC_METHOD_FAMILY_NONE {
  if (bucketingService_ == nil) {
    @try {
      bucketingService_ = [self createServiceWithChar:OrgOssPdfreporterEngineJRExpression_EVALUATION_DEFAULT];
    }
    @catch (OrgOssPdfreporterEngineJRException *e) {
      @throw [[OrgOssPdfreporterEngineJRRuntimeException alloc] initWithNSString:@"Could not create bucketing service" withJavaLangThrowable:e];
    }
  }
  else {
    [bucketingService_ clear];
  }
}

- (BOOL)prepareWithInt:(int)availableHeight
              withBOOL:(BOOL)isOverflow {
  [super prepareWithInt:availableHeight withBOOL:isOverflow];
  if (![self isToPrint]) {
    return NO;
  }
  if (availableHeight < [self getRelativeY] + [self getHeight]) {
    [self setToPrintWithBOOL:NO];
    return YES;
  }
  if (isOverflow && [((OrgOssPdfreporterEngineFillJRFillCrosstab_CrosstabFiller *) nil_chk(crosstabFiller_)) ended] && [self isAlreadyPrinted]) {
    if ([self isPrintWhenDetailOverflows]) {
      [self rewind];
      [self setReprintedWithBOOL:YES];
    }
    else {
      [self setStretchHeightWithInt:[self getHeight]];
      [self setToPrintWithBOOL:NO];
      return NO;
    }
  }
  if (isOverflow && [self isPrintWhenDetailOverflows]) {
    [self setReprintedWithBOOL:YES];
  }
  printFrames_ = [[JavaUtilArrayList alloc] init];
  [((OrgOssPdfreporterEngineFillJRFillCrosstab_CrosstabFiller *) nil_chk(crosstabFiller_)) fillWithInt:availableHeight - [self getRelativeY]];
  if (![((id<JavaUtilList>) nil_chk(printFrames_)) isEmpty]) {
    overflowStartPage_ = 0;
  }
  else {
    int pageCount = [((OrgOssPdfreporterEngineFillJRBaseFiller *) nil_chk(filler_)) getCurrentPageCount];
    if (overflowStartPage_ == 0) {
      overflowStartPage_ = pageCount;
    }
    else if (pageCount >= overflowStartPage_ + 2) {
      @throw [[OrgOssPdfreporterEngineJRRuntimeException alloc] initWithNSString:@"Crosstab has not printed anything on 3 consecutive pages, likely infinite loop"];
    }
  }
  BOOL willOverflow = [((OrgOssPdfreporterEngineFillJRFillCrosstab_CrosstabFiller *) nil_chk(crosstabFiller_)) willOverflow];
  if (willOverflow) {
    [self setStretchHeightWithInt:availableHeight - [self getRelativeY]];
  }
  else if (![((id<JavaUtilList>) nil_chk(printFrames_)) isEmpty]) {
    OrgOssPdfreporterEngineFillJRTemplatePrintFrame *lastFrame = [((id<JavaUtilList>) nil_chk(printFrames_)) getWithInt:[((id<JavaUtilList>) nil_chk(printFrames_)) size] - 1];
    int usedHeight = [((OrgOssPdfreporterEngineFillJRTemplatePrintFrame *) nil_chk(lastFrame)) getY] + [((OrgOssPdfreporterEngineFillJRTemplatePrintFrame *) nil_chk(lastFrame)) getHeight];
    [self setStretchHeightWithInt:usedHeight];
  }
  return willOverflow;
}

- (void)addCrosstabChunkWithJavaUtilList:(id<JavaUtilList>)elements
                                 withInt:(int)yOffset {
  OrgOssPdfreporterEngineFillJRTemplatePrintFrame *printFrame = [[OrgOssPdfreporterEngineFillJRTemplatePrintFrame alloc] initWithOrgOssPdfreporterEngineFillJRTemplateFrame:[self getTemplateFrame] withInt:elementId_];
  [((OrgOssPdfreporterEngineFillJRTemplatePrintFrame *) nil_chk(printFrame)) setXWithInt:0];
  [((OrgOssPdfreporterEngineFillJRTemplatePrintFrame *) nil_chk(printFrame)) setYWithInt:yOffset];
  [JavaUtilCollections sortWithJavaUtilList:elements withJavaUtilComparator:[[OrgOssPdfreporterEngineFillJRYXComparator alloc] init]];
  int xLimit = JavaLangInteger_MIN_VALUE;
  int yLimit = JavaLangInteger_MIN_VALUE;
  for (id<JavaUtilIterator> it = [((id<JavaUtilList>) nil_chk(elements)) iterator]; [((id<JavaUtilIterator>) nil_chk(it)) hasNext]; ) {
    id<OrgOssPdfreporterEngineJRPrintElement> element = [((id<JavaUtilIterator>) nil_chk(it)) next];
    if ([((id<OrgOssPdfreporterEngineJRPrintElement>) nil_chk(element)) getX] + [((id<OrgOssPdfreporterEngineJRPrintElement>) nil_chk(element)) getWidth] > xLimit) {
      xLimit = [((id<OrgOssPdfreporterEngineJRPrintElement>) nil_chk(element)) getX] + [((id<OrgOssPdfreporterEngineJRPrintElement>) nil_chk(element)) getWidth];
    }
    if ([((id<OrgOssPdfreporterEngineJRPrintElement>) nil_chk(element)) getY] + [((id<OrgOssPdfreporterEngineJRPrintElement>) nil_chk(element)) getHeight] > yLimit) {
      yLimit = [((id<OrgOssPdfreporterEngineJRPrintElement>) nil_chk(element)) getY] + [((id<OrgOssPdfreporterEngineJRPrintElement>) nil_chk(element)) getHeight];
    }
  }
  id<OrgOssPdfreporterEngineJRLineBox> lineBox = [self getLineBox];
  int width = xLimit + [((JavaLangInteger *) nil_chk([((id<OrgOssPdfreporterEngineJRLineBox>) nil_chk(lineBox)) getLeftPadding])) intValue] + [((JavaLangInteger *) nil_chk([((id<OrgOssPdfreporterEngineJRLineBox>) nil_chk(lineBox)) getRightPadding])) intValue];
  [((OrgOssPdfreporterEngineFillJRTemplatePrintFrame *) nil_chk(printFrame)) setWidthWithInt:width];
  if ([self getRunDirectionValue] == [OrgOssPdfreporterEngineTypeRunDirectionEnumEnum RTL]) {
    [((OrgOssPdfreporterEngineFillJRTemplatePrintFrame *) nil_chk(printFrame)) setXWithInt:[self getWidth] - width];
  }
  int height = yLimit + [((JavaLangInteger *) nil_chk([((id<OrgOssPdfreporterEngineJRLineBox>) nil_chk(lineBox)) getTopPadding])) intValue] + [((JavaLangInteger *) nil_chk([((id<OrgOssPdfreporterEngineJRLineBox>) nil_chk(lineBox)) getBottomPadding])) intValue];
  [((OrgOssPdfreporterEngineFillJRTemplatePrintFrame *) nil_chk(printFrame)) setHeightWithInt:height];
  if ([self getRunDirectionValue] == [OrgOssPdfreporterEngineTypeRunDirectionEnumEnum RTL]) {
    [self mirrorPrintElementsWithJavaUtilList:elements withInt:xLimit];
  }
  [((OrgOssPdfreporterEngineFillJRTemplatePrintFrame *) nil_chk(printFrame)) addElementsWithJavaUtilCollection:elements];
  [((id<JavaUtilList>) nil_chk(printFrames_)) addWithId:printFrame];
}

- (id<OrgOssPdfreporterEngineJRPrintElement>)fill {
  return nil;
}

- (OrgOssPdfreporterEngineFillJRTemplateFrame *)getTemplateFrame {
  return (OrgOssPdfreporterEngineFillJRTemplateFrame *) [self getElementTemplate];
}

- (OrgOssPdfreporterEngineFillJRTemplateElement *)createElementTemplate {
  OrgOssPdfreporterEngineFillJRTemplateFrame *template_ = [[OrgOssPdfreporterEngineFillJRTemplateFrame alloc] initWithOrgOssPdfreporterEngineJROrigin:[self getElementOrigin] withOrgOssPdfreporterEngineJRDefaultStyleProvider:[((OrgOssPdfreporterEngineJasperPrint *) nil_chk([((OrgOssPdfreporterEngineFillJRBaseFiller *) nil_chk(filler_)) getJasperPrint])) getDefaultStyleProvider]];
  [((OrgOssPdfreporterEngineFillJRTemplateFrame *) nil_chk(template_)) setElementWithOrgOssPdfreporterEngineJRElement:self];
  [((OrgOssPdfreporterEngineFillJRTemplateFrame *) nil_chk(template_)) copyBoxWithOrgOssPdfreporterEngineJRLineBox:[self getLineBox]];
  return template_;
}

- (void)rewind {
  [((OrgOssPdfreporterEngineFillJRFillCrosstab_CrosstabFiller *) nil_chk(crosstabFiller_)) initCrosstab];
  overflowStartPage_ = 0;
}

- (id<JavaUtilList>)getPrintElements {
  return printFrames_;
}

- (void)mirrorPrintElementsWithJavaUtilList:(id<JavaUtilList>)printElements
                                    withInt:(int)width {
  for (id<JavaUtilIterator> it = [((id<JavaUtilList>) nil_chk(printElements)) iterator]; [((id<JavaUtilIterator>) nil_chk(it)) hasNext]; ) {
    id<OrgOssPdfreporterEngineJRPrintElement> element = [((id<JavaUtilIterator>) nil_chk(it)) next];
    int mirrorX = width - [((id<OrgOssPdfreporterEngineJRPrintElement>) nil_chk(element)) getX] - [((id<OrgOssPdfreporterEngineJRPrintElement>) nil_chk(element)) getWidth];
    [((id<OrgOssPdfreporterEngineJRPrintElement>) nil_chk(element)) setXWithInt:mirrorX];
  }
}

- (void)resolveElementWithOrgOssPdfreporterEngineJRPrintElement:(id<OrgOssPdfreporterEngineJRPrintElement>)element
                                                       withChar:(char)evaluation {
}

- (void)collectExpressionsWithOrgOssPdfreporterEngineJRExpressionCollector:(OrgOssPdfreporterEngineJRExpressionCollector *)collector {
  [((OrgOssPdfreporterEngineJRExpressionCollector *) nil_chk(collector)) collectWithOrgOssPdfreporterCrosstabsJRCrosstab:self];
}

- (void)visitWithOrgOssPdfreporterEngineJRVisitor:(id<OrgOssPdfreporterEngineJRVisitor>)visitor {
  [((id<OrgOssPdfreporterEngineJRVisitor>) nil_chk(visitor)) visitCrosstabWithOrgOssPdfreporterCrosstabsJRCrosstab:self];
}

- (int)getId {
  return [((id<OrgOssPdfreporterCrosstabsJRCrosstab>) nil_chk(parentCrosstab_)) getId];
}

- (id<OrgOssPdfreporterCrosstabsJRCrosstabDataset>)getDataset {
  return dataset_;
}

- (IOSObjectArray *)getRowGroups {
  return rowGroups_;
}

- (IOSObjectArray *)getColumnGroups {
  return columnGroups_;
}

- (IOSObjectArray *)getMeasures {
  return measures_;
}

- (int)getColumnBreakOffset {
  return [((id<OrgOssPdfreporterCrosstabsJRCrosstab>) nil_chk(parentCrosstab_)) getColumnBreakOffset];
}

- (BOOL)isRepeatColumnHeaders {
  return [((id<OrgOssPdfreporterCrosstabsJRCrosstab>) nil_chk(parentCrosstab_)) isRepeatColumnHeaders];
}

- (BOOL)isRepeatRowHeaders {
  return [((id<OrgOssPdfreporterCrosstabsJRCrosstab>) nil_chk(parentCrosstab_)) isRepeatRowHeaders];
}

- (id<OrgOssPdfreporterCommonsArraysArray2D>)getCells {
  return crossCells_;
}

- (id<OrgOssPdfreporterCrosstabsJRCellContents>)getWhenNoDataCell {
  return whenNoDataCell_;
}

- (IOSObjectArray *)getParameters {
  return parameters_;
}

- (id<OrgOssPdfreporterEngineJRExpression>)getParametersMapExpression {
  return [((id<OrgOssPdfreporterCrosstabsJRCrosstab>) nil_chk(parentCrosstab_)) getParametersMapExpression];
}

- (id<OrgOssPdfreporterEngineJRElement>)getElementByKeyWithNSString:(NSString *)elementKey {
  return [OrgOssPdfreporterCrosstabsBaseJRBaseCrosstab getElementByKeyWithOrgOssPdfreporterCrosstabsJRCrosstab:self withNSString:elementKey];
}

- (id<OrgOssPdfreporterEngineFillJRFillCloneable>)createCloneWithOrgOssPdfreporterEngineFillJRFillCloneFactory:(OrgOssPdfreporterEngineFillJRFillCloneFactory *)factory {
  return nil;
}

- (id<OrgOssPdfreporterCrosstabsJRCellContents>)getHeaderCell {
  return headerCell_;
}

- (IOSObjectArray *)getVariables {
  return variables_;
}

- (OrgOssPdfreporterEngineTypeRunDirectionEnumEnum *)getRunDirectionValue {
  return [((id<OrgOssPdfreporterCrosstabsJRCrosstab>) nil_chk(parentCrosstab_)) getRunDirectionValue];
}

- (void)setRunDirectionWithOrgOssPdfreporterEngineTypeRunDirectionEnumEnum:(OrgOssPdfreporterEngineTypeRunDirectionEnumEnum *)runDirection {
  @throw [[JavaLangUnsupportedOperationException alloc] init];
}

- (OrgOssPdfreporterEngineJROrigin *)getOrigin {
  return [self getElementOrigin];
}

- (JavaLangBoolean *)getIgnoreWidth {
  return [((id<OrgOssPdfreporterCrosstabsJRCrosstab>) nil_chk(parentCrosstab_)) getIgnoreWidth];
}

- (void)setIgnoreWidthWithJavaLangBoolean:(JavaLangBoolean *)ignoreWidth {
  @throw [[JavaLangUnsupportedOperationException alloc] init];
}

- (void)setIgnoreWidthWithBOOL:(BOOL)ignoreWidth {
  @throw [[JavaLangUnsupportedOperationException alloc] init];
}

- (id<OrgOssPdfreporterGeometryIColor>)getDefaultLineColor {
  return [((id<OrgOssPdfreporterCrosstabsJRCrosstab>) nil_chk(parentCrosstab_)) getDefaultLineColor];
}

- (id<OrgOssPdfreporterEngineJRLineBox>)getLineBox {
  return [((id<OrgOssPdfreporterCrosstabsJRCrosstab>) nil_chk(parentCrosstab_)) getLineBox];
}

- (id<OrgOssPdfreporterEngineJasperReportsContext>)getJasperReportsContext {
  return [((OrgOssPdfreporterEngineFillJRBaseFiller *) nil_chk(filler_)) getJasperReportsContext];
}

- (id<OrgOssPdfreporterEngineFillJRFillExpressionEvaluator>)getExpressionEvaluator {
  return expressionEvaluator_;
}

+ (void)initialize {
  if (self == [OrgOssPdfreporterEngineFillJRFillCrosstab class]) {
    OrgOssPdfreporterEngineFillJRFillCrosstab_logger_ = [JavaUtilLoggingLogger getLoggerWithNSString:[[IOSClass classWithClass:[OrgOssPdfreporterEngineFillJRFillCrosstab class]] getName]];
  }
}

- (void)copyAllPropertiesTo:(id)copy {
  [super copyAllPropertiesTo:copy];
  OrgOssPdfreporterEngineFillJRFillCrosstab *typedCopy = (OrgOssPdfreporterEngineFillJRFillCrosstab *) copy;
  typedCopy.parentCrosstab = parentCrosstab_;
  typedCopy.dataset = dataset_;
  typedCopy.rowGroups = rowGroups_;
  typedCopy.rowGroupsMap = rowGroupsMap_;
  typedCopy.columnGroups = columnGroups_;
  typedCopy.columnGroupsMap = columnGroupsMap_;
  typedCopy.measures = measures_;
  typedCopy.bucketingService = bucketingService_;
  typedCopy.variables = variables_;
  typedCopy.variablesMap = variablesMap_;
  typedCopy.totalVariables = totalVariables_;
  typedCopy.retrieveTotal = retrieveTotal_;
  typedCopy.parameters = parameters_;
  typedCopy.parametersMap = parametersMap_;
  typedCopy.ignoreWidth = ignoreWidth_;
  typedCopy.crosstabEvaluator = crosstabEvaluator_;
  typedCopy.crossCells = crossCells_;
  typedCopy.headerCell = headerCell_;
  typedCopy.whenNoDataCell = whenNoDataCell_;
  typedCopy.hasData = hasData_;
  typedCopy.columnHeadersData = columnHeadersData_;
  typedCopy.rowHeadersData = rowHeadersData_;
  typedCopy.cellData = cellData_;
  typedCopy.grandTotals = grandTotals_;
  typedCopy.percentage = percentage_;
  typedCopy.crosstabFiller = crosstabFiller_;
  typedCopy.overflowStartPage = overflowStartPage_;
  typedCopy.printFrames = printFrames_;
}

@end
@implementation OrgOssPdfreporterEngineFillJRFillCrosstab_JRFillCrosstabDataset

@synthesize this$0 = this$0_;
@synthesize bucketValues = bucketValues_;
@synthesize measureValues = measureValues_;

- (id)initWithOrgOssPdfreporterEngineFillJRFillCrosstab:(OrgOssPdfreporterEngineFillJRFillCrosstab *)outer$
        withOrgOssPdfreporterCrosstabsJRCrosstabDataset:(id<OrgOssPdfreporterCrosstabsJRCrosstabDataset>)dataset
     withOrgOssPdfreporterEngineFillJRFillObjectFactory:(OrgOssPdfreporterEngineFillJRFillObjectFactory *)factory {
  if ((self = [super initWithOrgOssPdfreporterEngineJRElementDataset:dataset withOrgOssPdfreporterEngineFillJRFillObjectFactory:factory])) {
    this$0_ = outer$;
    self.bucketValues = [IOSObjectArray arrayWithLength:(int) [((IOSObjectArray *) nil_chk(outer$.rowGroups)) count] + (int) [((IOSObjectArray *) nil_chk(outer$.columnGroups)) count] type:[IOSClass classWithClass:[NSObject class]]];
    self.measureValues = [IOSObjectArray arrayWithLength:(int) [((IOSObjectArray *) nil_chk(outer$.measures)) count] type:[IOSClass classWithClass:[NSObject class]]];
  }
  return self;
}

- (void)customInitialize {
  [this$0_ initBucketingService];
}

- (void)customEvaluateWithOrgOssPdfreporterEngineFillJRCalculator:(OrgOssPdfreporterEngineFillJRCalculator *)calculator {
  for (int i = 0; i < (int) [((IOSObjectArray *) nil_chk(this$0_.rowGroups)) count]; i++) {
    (void) [((IOSObjectArray *) nil_chk(bucketValues_)) replaceObjectAtIndex:i withObject:[((OrgOssPdfreporterEngineFillJRCalculator *) nil_chk(calculator)) evaluateWithOrgOssPdfreporterEngineJRExpression:[((id<OrgOssPdfreporterCrosstabsJRCrosstabBucket>) nil_chk([((OrgOssPdfreporterCrosstabsFillJRFillCrosstabRowGroup *) nil_chk([((IOSObjectArray *) nil_chk(this$0_.rowGroups)) objectAtIndex:i])) getBucket])) getExpression]]];
  }
  for (int i = 0; i < (int) [((IOSObjectArray *) nil_chk(this$0_.columnGroups)) count]; ++i) {
    (void) [((IOSObjectArray *) nil_chk(bucketValues_)) replaceObjectAtIndex:i + (int) [((IOSObjectArray *) nil_chk(this$0_.rowGroups)) count] withObject:[((OrgOssPdfreporterEngineFillJRCalculator *) nil_chk(calculator)) evaluateWithOrgOssPdfreporterEngineJRExpression:[((id<OrgOssPdfreporterCrosstabsJRCrosstabBucket>) nil_chk([((OrgOssPdfreporterCrosstabsFillJRFillCrosstabColumnGroup *) nil_chk([((IOSObjectArray *) nil_chk(this$0_.columnGroups)) objectAtIndex:i])) getBucket])) getExpression]]];
  }
  for (int i = 0; i < (int) [((IOSObjectArray *) nil_chk(this$0_.measures)) count]; i++) {
    (void) [((IOSObjectArray *) nil_chk(measureValues_)) replaceObjectAtIndex:i withObject:[((OrgOssPdfreporterEngineFillJRCalculator *) nil_chk(calculator)) evaluateWithOrgOssPdfreporterEngineJRExpression:[((OrgOssPdfreporterCrosstabsFillJRFillCrosstabMeasure *) nil_chk([((IOSObjectArray *) nil_chk(this$0_.measures)) objectAtIndex:i])) getValueExpression]]];
  }
}

- (void)customIncrement {
  @try {
    [((OrgOssPdfreporterCrosstabsFillCalculationCrosstabBucketingService *) nil_chk(this$0_.bucketingService)) addDataWithNSObjectArray:bucketValues_ withNSObjectArray:measureValues_];
  }
  @catch (OrgOssPdfreporterEngineJRException *e) {
    @throw [[OrgOssPdfreporterEngineJRRuntimeException alloc] initWithNSString:@"Error incrementing crosstab dataset" withJavaLangThrowable:e];
  }
}

- (id<OrgOssPdfreporterJfreeDataset>)getCustomDataset {
  return nil;
}

- (void)collectExpressionsWithOrgOssPdfreporterEngineJRExpressionCollector:(OrgOssPdfreporterEngineJRExpressionCollector *)collector {
}

- (BOOL)isDataPreSorted {
  return [((id<OrgOssPdfreporterCrosstabsJRCrosstabDataset>) parent_) isDataPreSorted];
}

- (void)copyAllPropertiesTo:(id)copy {
  [super copyAllPropertiesTo:copy];
  OrgOssPdfreporterEngineFillJRFillCrosstab_JRFillCrosstabDataset *typedCopy = (OrgOssPdfreporterEngineFillJRFillCrosstab_JRFillCrosstabDataset *) copy;
  typedCopy.this$0 = this$0_;
  typedCopy.bucketValues = bucketValues_;
  typedCopy.measureValues = measureValues_;
}

@end
@implementation OrgOssPdfreporterEngineFillJRFillCrosstab_CrosstabFiller

@synthesize this$0 = this$0_;
@synthesize yOffset = yOffset_;
@synthesize yChunkOffset = yChunkOffset_;
@synthesize willOverflow_ = willOverflow__;
@synthesize rowHeadersXOffsets = rowHeadersXOffsets_;
@synthesize columnBreakable = columnBreakable_;
@synthesize rowBreakable = rowBreakable_;
@synthesize columnCount = columnCount_;
@synthesize rowCount = rowCount_;
@synthesize columnXOffsets = columnXOffsets_;
@synthesize noDataCellPrinted = noDataCellPrinted_;
@synthesize startRowIndex = startRowIndex_;
@synthesize startColumnIndex = startColumnIndex_;
@synthesize lastColumnIndex = lastColumnIndex_;
@synthesize columnHeaders = columnHeaders_;
@synthesize printRows = printRows_;
@synthesize spanHeaders = spanHeaders_;
@synthesize spanHeadersStart = spanHeadersStart_;
@synthesize rowYs = rowYs_;
@synthesize rowIdx = rowIdx_;
@synthesize preparedRow = preparedRow_;
@synthesize preparedRowHeight = preparedRowHeight_;
@synthesize printRowHeaders = printRowHeaders_;
@synthesize printColumnHeaders = printColumnHeaders_;
@synthesize rowCountVar = rowCountVar_;
@synthesize colCountVar = colCountVar_;

- (id)initWithOrgOssPdfreporterEngineFillJRFillCrosstab:(OrgOssPdfreporterEngineFillJRFillCrosstab *)outer$ {
  if ((self = [super init])) {
    this$0_ = outer$;
    rowYs_ = [[JavaUtilArrayList alloc] init];
    preparedRow_ = [[JavaUtilArrayList alloc] init];
    [self setRowHeadersXOffsets];
    printRows_ = [[JavaUtilArrayList alloc] init];
    rowCountVar_ = [((id<JavaUtilMap>) nil_chk(outer$.variablesMap)) getWithId:[OrgOssPdfreporterCrosstabsJRCrosstab VARIABLE_ROW_COUNT]];
    colCountVar_ = [((id<JavaUtilMap>) nil_chk(outer$.variablesMap)) getWithId:[OrgOssPdfreporterCrosstabsJRCrosstab VARIABLE_COLUMN_COUNT]];
  }
  return self;
}

- (void)initCrosstab OBJC_METHOD_FAMILY_NONE {
  columnXOffsets_ = [self computeOffsetsWithOrgOssPdfreporterCrosstabsFillCalculationHeaderCellArray2:this$0_.columnHeadersData withOrgOssPdfreporterCrosstabsFillJRFillCrosstabGroupArray:this$0_.columnGroups withBOOL:YES];
  columnBreakable_ = [self computeBreakableHeadersWithOrgOssPdfreporterCrosstabsFillCalculationHeaderCellArray2:this$0_.columnHeadersData withOrgOssPdfreporterCrosstabsFillJRFillCrosstabGroupArray:this$0_.columnGroups withIntArray:columnXOffsets_ withBOOL:YES withBOOL:YES];
  columnCount_ = [self computeCountsWithOrgOssPdfreporterCrosstabsFillCalculationHeaderCellArray2:this$0_.columnHeadersData];
  IOSIntArray *rowYOffsets = [self computeOffsetsWithOrgOssPdfreporterCrosstabsFillCalculationHeaderCellArray2:this$0_.rowHeadersData withOrgOssPdfreporterCrosstabsFillJRFillCrosstabGroupArray:this$0_.rowGroups withBOOL:NO];
  rowBreakable_ = [self computeBreakableHeadersWithOrgOssPdfreporterCrosstabsFillCalculationHeaderCellArray2:this$0_.rowHeadersData withOrgOssPdfreporterCrosstabsFillJRFillCrosstabGroupArray:this$0_.rowGroups withIntArray:rowYOffsets withBOOL:NO withBOOL:NO];
  rowCount_ = [self computeCountsWithOrgOssPdfreporterCrosstabsFillCalculationHeaderCellArray2:this$0_.rowHeadersData];
  spanHeaders_ = [IOSObjectArray arrayWithLength:(int) [((IOSObjectArray *) nil_chk(this$0_.rowGroups)) count] - 1 type:[IOSClass classWithClass:[OrgOssPdfreporterCrosstabsFillCalculationHeaderCell class]]];
  spanHeadersStart_ = [IOSIntArray arrayWithLength:(int) [((IOSObjectArray *) nil_chk(this$0_.rowGroups)) count] - 1];
  startRowIndex_ = 0;
  startColumnIndex_ = 0;
  lastColumnIndex_ = 0;
  noDataCellPrinted_ = NO;
}

- (void)setRowHeadersXOffsets {
  rowHeadersXOffsets_ = [IOSIntArray arrayWithLength:(int) [((IOSObjectArray *) nil_chk(this$0_.rowGroups)) count] + 1];
  (*[((IOSIntArray *) nil_chk(rowHeadersXOffsets_)) intRefAtIndex:0]) = 0;
  for (int i = 0; i < (int) [((IOSObjectArray *) nil_chk(this$0_.rowGroups)) count]; i++) {
    (*[((IOSIntArray *) nil_chk(rowHeadersXOffsets_)) intRefAtIndex:i + 1]) = [((IOSIntArray *) nil_chk(rowHeadersXOffsets_)) intAtIndex:i] + [((OrgOssPdfreporterCrosstabsFillJRFillCrosstabRowGroup *) nil_chk([((IOSObjectArray *) nil_chk(this$0_.rowGroups)) objectAtIndex:i])) getWidth];
  }
}

- (IOSIntArray *)computeOffsetsWithOrgOssPdfreporterCrosstabsFillCalculationHeaderCellArray2:(IOSObjectArray *)headersData
                                  withOrgOssPdfreporterCrosstabsFillJRFillCrosstabGroupArray:(IOSObjectArray *)groups
                                                                                    withBOOL:(BOOL)width {
  IOSIntArray *offsets = [IOSIntArray arrayWithLength:(int) [((IOSObjectArray *) nil_chk([((IOSObjectArray *) nil_chk(headersData)) objectAtIndex:0])) count] + 1];
  (*[((IOSIntArray *) nil_chk(offsets)) intRefAtIndex:0]) = 0;
  for (int i = 0; i < (int) [((IOSObjectArray *) nil_chk([((IOSObjectArray *) nil_chk(headersData)) objectAtIndex:0])) count]; i++) {
    int size = 0;
    for (int j = (int) [((IOSObjectArray *) nil_chk(groups)) count] - 1; j >= 0; --j) {
      if ([((IOSObjectArray *) nil_chk([((IOSObjectArray *) nil_chk(headersData)) objectAtIndex:j])) objectAtIndex:i] != nil) {
        OrgOssPdfreporterEngineFillJRFillCellContents *cell = [((OrgOssPdfreporterCrosstabsFillCalculationHeaderCell *) nil_chk([((IOSObjectArray *) nil_chk([((IOSObjectArray *) nil_chk(headersData)) objectAtIndex:j])) objectAtIndex:i])) isTotal] ? [((OrgOssPdfreporterCrosstabsFillJRFillCrosstabGroup *) nil_chk([((IOSObjectArray *) nil_chk(groups)) objectAtIndex:j])) getFillTotalHeader] : [((OrgOssPdfreporterCrosstabsFillJRFillCrosstabGroup *) nil_chk([((IOSObjectArray *) nil_chk(groups)) objectAtIndex:j])) getFillHeader];
        size = cell == nil ? 0 : (width ? [((OrgOssPdfreporterEngineFillJRFillCellContents *) nil_chk(cell)) getWidth] : [((OrgOssPdfreporterEngineFillJRFillCellContents *) nil_chk(cell)) getHeight]);
        break;
      }
    }
    (*[((IOSIntArray *) nil_chk(offsets)) intRefAtIndex:i + 1]) = [((IOSIntArray *) nil_chk(offsets)) intAtIndex:i] + size;
  }
  return offsets;
}

- (IOSBooleanArray *)computeBreakableHeadersWithOrgOssPdfreporterCrosstabsFillCalculationHeaderCellArray2:(IOSObjectArray *)headersData
                                               withOrgOssPdfreporterCrosstabsFillJRFillCrosstabGroupArray:(IOSObjectArray *)groups
                                                                                             withIntArray:(IOSIntArray *)offsets
                                                                                                 withBOOL:(BOOL)width
                                                                                                 withBOOL:(BOOL)startHeaders {
  IOSBooleanArray *breakable = [IOSBooleanArray arrayWithLength:(int) [((IOSObjectArray *) nil_chk([((IOSObjectArray *) nil_chk(headersData)) objectAtIndex:0])) count]];
  for (int i = 0; i < (int) [((IOSBooleanArray *) nil_chk(breakable)) count]; i++) {
    (*[((IOSBooleanArray *) nil_chk(breakable)) booleanRefAtIndex:i]) = YES;
  }
  for (int j = 0; j < (int) [((IOSObjectArray *) nil_chk(groups)) count]; ++j) {
    OrgOssPdfreporterEngineFillJRFillCellContents *fillHeader = [((OrgOssPdfreporterCrosstabsFillJRFillCrosstabGroup *) nil_chk([((IOSObjectArray *) nil_chk(groups)) objectAtIndex:j])) getFillHeader];
    if (fillHeader != nil) {
      int size = width ? [fillHeader getWidth] : [fillHeader getHeight];
      for (int i = 0; i < (int) [((IOSObjectArray *) nil_chk([((IOSObjectArray *) nil_chk(headersData)) objectAtIndex:0])) count]; i++) {
        OrgOssPdfreporterCrosstabsFillCalculationHeaderCell *header = [((IOSObjectArray *) nil_chk([((IOSObjectArray *) nil_chk(headersData)) objectAtIndex:j])) objectAtIndex:i];
        if (header != nil && ![((OrgOssPdfreporterCrosstabsFillCalculationHeaderCell *) nil_chk(header)) isTotal] && [((OrgOssPdfreporterCrosstabsFillCalculationHeaderCell *) nil_chk(header)) getLevelSpan] > 1) {
          int span = [((OrgOssPdfreporterCrosstabsFillCalculationHeaderCell *) nil_chk(header)) getLevelSpan];
          if (startHeaders) {
            for (int k = i + 1; k < i + span && [((IOSIntArray *) nil_chk(offsets)) intAtIndex:k] - [((IOSIntArray *) nil_chk(offsets)) intAtIndex:i] < size; ++k) {
              (*[((IOSBooleanArray *) nil_chk(breakable)) booleanRefAtIndex:k]) = NO;
            }
          }
          for (int k = i + span - 1; k > i && [((IOSIntArray *) nil_chk(offsets)) intAtIndex:i + span] - [((IOSIntArray *) nil_chk(offsets)) intAtIndex:k] < size; --k) {
            (*[((IOSBooleanArray *) nil_chk(breakable)) booleanRefAtIndex:k]) = NO;
          }
        }
      }
    }
  }
  return breakable;
}

- (IOSIntArray *)computeCountsWithOrgOssPdfreporterCrosstabsFillCalculationHeaderCellArray2:(IOSObjectArray *)headersData {
  IOSIntArray *counts = [IOSIntArray arrayWithLength:(int) [((IOSObjectArray *) nil_chk([((IOSObjectArray *) nil_chk(headersData)) objectAtIndex:0])) count]];
  IOSObjectArray *lastHeaders = [((IOSObjectArray *) nil_chk(headersData)) objectAtIndex:(int) [((IOSObjectArray *) nil_chk(headersData)) count] - 1];
  for (int i = 0, c = 0; i < (int) [((IOSIntArray *) nil_chk(counts)) count]; ++i) {
    OrgOssPdfreporterCrosstabsFillCalculationHeaderCell *lastHeader = [((IOSObjectArray *) nil_chk(lastHeaders)) objectAtIndex:i];
    if (lastHeader != nil && ![((OrgOssPdfreporterCrosstabsFillCalculationHeaderCell *) nil_chk(lastHeader)) isTotal]) {
      ++c;
    }
    (*[((IOSIntArray *) nil_chk(counts)) intRefAtIndex:i]) = c;
  }
  return counts;
}

- (void)fillWithInt:(int)availableHeight {
  [((id<JavaUtilList>) nil_chk(printRows_)) clear];
  yOffset_ = 0;
  yChunkOffset_ = 0;
  willOverflow__ = NO;
  [self fillVerticalCrosstabWithInt:availableHeight];
}

- (BOOL)willOverflow {
  return willOverflow__;
}

- (BOOL)ended {
  return this$0_.hasData ? (startRowIndex_ >= (int) [((IOSObjectArray *) nil_chk([((IOSObjectArray *) nil_chk(this$0_.rowHeadersData)) objectAtIndex:0])) count] && startColumnIndex_ >= (int) [((IOSObjectArray *) nil_chk([((IOSObjectArray *) nil_chk(this$0_.columnHeadersData)) objectAtIndex:0])) count]) : noDataCellPrinted_;
}

- (void)fillVerticalCrosstabWithInt:(int)availableHeight {
  id<OrgOssPdfreporterEngineJRLineBox> lineBox = [this$0_ getLineBox];
  int padding = [((JavaLangInteger *) nil_chk([((id<OrgOssPdfreporterEngineJRLineBox>) nil_chk(lineBox)) getTopPadding])) intValue] + [((JavaLangInteger *) nil_chk([((id<OrgOssPdfreporterEngineJRLineBox>) nil_chk(lineBox)) getBottomPadding])) intValue];
  int contentsHeight = availableHeight - padding;
  if (contentsHeight < 0) {
    willOverflow__ = YES;
    return;
  }
  if (!this$0_.hasData) {
    [self fillNoDataCellWithInt:contentsHeight];
    if (![((id<JavaUtilList>) nil_chk(printRows_)) isEmpty]) {
      [self addFilledRows];
    }
    return;
  }
  printRowHeaders_ = startColumnIndex_ == 0 || [this$0_ isRepeatRowHeaders];
  int rowHeadersXOffset = printRowHeaders_ ? [((IOSIntArray *) nil_chk(rowHeadersXOffsets_)) intAtIndex:(int) [((IOSObjectArray *) nil_chk(this$0_.rowGroups)) count]] : 0;
  if (startColumnIndex_ == lastColumnIndex_) {
    int availableWidth = [this$0_ getWidth] - [((JavaLangInteger *) nil_chk([((id<OrgOssPdfreporterEngineJRLineBox>) nil_chk(lineBox)) getLeftPadding])) intValue] - [((JavaLangInteger *) nil_chk([((id<OrgOssPdfreporterEngineJRLineBox>) nil_chk(lineBox)) getRightPadding])) intValue];
    columnHeaders_ = [self getGroupHeadersWithInt:availableWidth - rowHeadersXOffset withIntArray:columnXOffsets_ withBooleanArray:columnBreakable_ withInt:startColumnIndex_ withOrgOssPdfreporterCrosstabsFillCalculationHeaderCellArray2:this$0_.columnHeadersData withOrgOssPdfreporterCrosstabsFillJRFillCrosstabGroupArray:this$0_.columnGroups];
    lastColumnIndex_ = startColumnIndex_ + [((id<JavaUtilList>) nil_chk(columnHeaders_)) size];
    if (startColumnIndex_ == lastColumnIndex_) {
      @throw [[OrgOssPdfreporterEngineJRRuntimeException alloc] initWithNSString:@"Not enough space to render the crosstab."];
    }
  }
  printColumnHeaders_ = startRowIndex_ == 0 || [this$0_ isRepeatColumnHeaders];
  id<JavaUtilList> columnHeaderRows = nil;
  if (printColumnHeaders_) {
    columnHeaderRows = [self fillColumnHeadersWithInt:rowHeadersXOffset withInt:contentsHeight - yOffset_];
    if (willOverflow__) {
      return;
    }
  }
  int lastRowIndex = [self fillRowsWithInt:rowHeadersXOffset withInt:contentsHeight - yOffset_];
  if (lastRowIndex == startRowIndex_) {
    willOverflow__ = YES;
    return;
  }
  if (columnHeaderRows != nil) {
    [((id<JavaUtilList>) nil_chk(printRows_)) addAllWithJavaUtilCollection:columnHeaderRows];
  }
  if (![((id<JavaUtilList>) nil_chk(printRows_)) isEmpty]) {
    [self addFilledRows];
  }
  if (lastRowIndex >= (int) [((IOSObjectArray *) nil_chk([((IOSObjectArray *) nil_chk(this$0_.rowHeadersData)) objectAtIndex:0])) count]) {
    startColumnIndex_ = lastColumnIndex_;
    if (startColumnIndex_ < (int) [((IOSObjectArray *) nil_chk([((IOSObjectArray *) nil_chk(this$0_.columnHeadersData)) objectAtIndex:0])) count]) {
      startRowIndex_ = lastRowIndex = 0;
      int yAdvance = yOffset_ + [this$0_ getColumnBreakOffset] + padding;
      yChunkOffset_ += yAdvance;
      int remainingHeight = availableHeight - yAdvance;
      yOffset_ = 0;
      [self fillVerticalCrosstabWithInt:remainingHeight];
      return;
    }
  }
  BOOL fillEnded = lastRowIndex >= (int) [((IOSObjectArray *) nil_chk([((IOSObjectArray *) nil_chk(this$0_.rowHeadersData)) objectAtIndex:0])) count] && lastColumnIndex_ >= (int) [((IOSObjectArray *) nil_chk([((IOSObjectArray *) nil_chk(this$0_.columnHeadersData)) objectAtIndex:0])) count];
  if (fillEnded) {
    [this$0_ setStretchHeightWithInt:yOffset_];
  }
  else {
    [this$0_ setStretchHeightWithInt:availableHeight];
  }
  startRowIndex_ = lastRowIndex;
  willOverflow__ = !fillEnded;
}

- (void)addFilledRows {
  id<JavaUtilList> prints = [[JavaUtilArrayList alloc] init];
  for (id<JavaUtilIterator> it = [((id<JavaUtilList>) nil_chk(printRows_)) iterator]; [((id<JavaUtilIterator>) nil_chk(it)) hasNext]; ) {
    id<JavaUtilList> rowPrints = [((id<JavaUtilIterator>) nil_chk(it)) next];
    [((id<JavaUtilList>) nil_chk(prints)) addAllWithJavaUtilCollection:rowPrints];
  }
  [this$0_ addCrosstabChunkWithJavaUtilList:prints withInt:yChunkOffset_];
  [((id<JavaUtilList>) nil_chk(printRows_)) clear];
}

- (id<JavaUtilList>)getGroupHeadersWithInt:(int)available
                              withIntArray:(IOSIntArray *)offsets
                          withBooleanArray:(IOSBooleanArray *)breakable
                                   withInt:(int)firstIndex
withOrgOssPdfreporterCrosstabsFillCalculationHeaderCellArray2:(IOSObjectArray *)headersData
withOrgOssPdfreporterCrosstabsFillJRFillCrosstabGroupArray:(IOSObjectArray *)groups {
  id<JavaUtilList> headers = [[JavaUtilArrayList alloc] init];
  int maxOffset = available + [((IOSIntArray *) nil_chk(offsets)) intAtIndex:firstIndex];
  int lastIndex;
  for (lastIndex = firstIndex; lastIndex < (int) [((IOSObjectArray *) nil_chk([((IOSObjectArray *) nil_chk(headersData)) objectAtIndex:0])) count] && (this$0_.ignoreWidth || [((IOSIntArray *) nil_chk(offsets)) intAtIndex:lastIndex + 1] <= maxOffset); ++lastIndex) {
    IOSObjectArray *groupHeaders = [IOSObjectArray arrayWithLength:(int) [((IOSObjectArray *) nil_chk(groups)) count] type:[IOSClass classWithClass:[OrgOssPdfreporterCrosstabsFillCalculationHeaderCell class]]];
    for (int j = 0; j < (int) [((IOSObjectArray *) nil_chk(groups)) count]; ++j) {
      (void) [((IOSObjectArray *) nil_chk(groupHeaders)) replaceObjectAtIndex:j withObject:[((IOSObjectArray *) nil_chk([((IOSObjectArray *) nil_chk(headersData)) objectAtIndex:j])) objectAtIndex:lastIndex]];
    }
    [((id<JavaUtilList>) nil_chk(headers)) addWithId:groupHeaders];
  }
  if (lastIndex < (int) [((IOSObjectArray *) nil_chk([((IOSObjectArray *) nil_chk(headersData)) objectAtIndex:0])) count]) {
    while (lastIndex > firstIndex && ![((IOSBooleanArray *) nil_chk(breakable)) booleanAtIndex:lastIndex]) {
      --lastIndex;
      (void) [((id<JavaUtilList>) nil_chk(headers)) removeWithInt:[((id<JavaUtilList>) nil_chk(headers)) size] - 1];
    }
  }
  if (lastIndex > firstIndex) {
    if (firstIndex > 0) {
      IOSObjectArray *firstHeaders = [((id<JavaUtilList>) nil_chk(headers)) getWithInt:0];
      for (int j = 0; j < (int) [((IOSObjectArray *) nil_chk(groups)) count]; ++j) {
        OrgOssPdfreporterCrosstabsFillCalculationHeaderCell *header = [((IOSObjectArray *) nil_chk([((IOSObjectArray *) nil_chk(headersData)) objectAtIndex:j])) objectAtIndex:firstIndex];
        if (header == nil) {
          int spanIndex = [self getSpanIndexWithInt:firstIndex withInt:j withOrgOssPdfreporterCrosstabsFillCalculationHeaderCellArray2:headersData];
          if (spanIndex >= 0) {
            OrgOssPdfreporterCrosstabsFillCalculationHeaderCell *spanCell = [((IOSObjectArray *) nil_chk([((IOSObjectArray *) nil_chk(headersData)) objectAtIndex:j])) objectAtIndex:spanIndex];
            int headerEndIdx = [((OrgOssPdfreporterCrosstabsFillCalculationHeaderCell *) nil_chk(spanCell)) getLevelSpan] + spanIndex;
            if (headerEndIdx > lastIndex) {
              headerEndIdx = lastIndex;
            }
            (void) [((IOSObjectArray *) nil_chk(firstHeaders)) replaceObjectAtIndex:j withObject:[OrgOssPdfreporterCrosstabsFillCalculationHeaderCell createLevelSpanCopyWithOrgOssPdfreporterCrosstabsFillCalculationHeaderCell:spanCell withInt:headerEndIdx - firstIndex]];
          }
        }
      }
    }
    if (lastIndex < (int) [((IOSObjectArray *) nil_chk([((IOSObjectArray *) nil_chk(headersData)) objectAtIndex:0])) count]) {
      for (int j = 0; j < (int) [((IOSObjectArray *) nil_chk(groups)) count]; ++j) {
        OrgOssPdfreporterCrosstabsFillCalculationHeaderCell *header = [((IOSObjectArray *) nil_chk([((IOSObjectArray *) nil_chk(headersData)) objectAtIndex:j])) objectAtIndex:lastIndex];
        if (header == nil) {
          int spanIndex = [self getSpanIndexWithInt:lastIndex withInt:j withOrgOssPdfreporterCrosstabsFillCalculationHeaderCellArray2:headersData];
          if (spanIndex >= firstIndex) {
            OrgOssPdfreporterCrosstabsFillCalculationHeaderCell *spanCell = [((IOSObjectArray *) nil_chk([((IOSObjectArray *) nil_chk(headersData)) objectAtIndex:j])) objectAtIndex:spanIndex];
            IOSObjectArray *headerCells = [((id<JavaUtilList>) nil_chk(headers)) getWithInt:spanIndex - firstIndex];
            (void) [((IOSObjectArray *) nil_chk(headerCells)) replaceObjectAtIndex:j withObject:[OrgOssPdfreporterCrosstabsFillCalculationHeaderCell createLevelSpanCopyWithOrgOssPdfreporterCrosstabsFillCalculationHeaderCell:spanCell withInt:lastIndex - spanIndex]];
          }
        }
      }
    }
  }
  return headers;
}

- (int)getSpanIndexWithInt:(int)i
                   withInt:(int)j
withOrgOssPdfreporterCrosstabsFillCalculationHeaderCellArray2:(IOSObjectArray *)headersData {
  int spanIndex = i - 1;
  while (spanIndex >= 0 && [((IOSObjectArray *) nil_chk([((IOSObjectArray *) nil_chk(headersData)) objectAtIndex:j])) objectAtIndex:spanIndex] == nil) {
    --spanIndex;
  }
  if (spanIndex >= 0) {
    OrgOssPdfreporterCrosstabsFillCalculationHeaderCell *spanCell = [((IOSObjectArray *) nil_chk([((IOSObjectArray *) nil_chk(headersData)) objectAtIndex:j])) objectAtIndex:spanIndex];
    int span = [((OrgOssPdfreporterCrosstabsFillCalculationHeaderCell *) nil_chk(spanCell)) getLevelSpan];
    if (span > i - spanIndex) {
      return spanIndex;
    }
  }
  return -1;
}

- (void)fillNoDataCellWithInt:(int)availableHeight {
  if (this$0_.whenNoDataCell == nil) {
    noDataCellPrinted_ = YES;
  }
  else {
    if (availableHeight < [this$0_.whenNoDataCell getHeight]) {
      willOverflow__ = YES;
    }
    else {
      [this$0_.whenNoDataCell evaluateWithChar:OrgOssPdfreporterEngineJRExpression_EVALUATION_DEFAULT];
      [this$0_.whenNoDataCell prepareWithInt:availableHeight];
      willOverflow__ = [this$0_.whenNoDataCell willOverflow];
      if (!willOverflow__) {
        [this$0_.whenNoDataCell setXWithInt:0];
        [this$0_.whenNoDataCell setYWithInt:0];
        id<OrgOssPdfreporterEngineJRPrintFrame> printCell = [this$0_.whenNoDataCell fill];
        id<JavaUtilList> noDataRow = [[JavaUtilArrayList alloc] initWithInt:1];
        [((id<JavaUtilList>) nil_chk(noDataRow)) addWithId:printCell];
        [self addPrintRowWithJavaUtilList:noDataRow];
        yOffset_ += [this$0_.whenNoDataCell getPrintHeight];
        noDataCellPrinted_ = YES;
      }
    }
  }
}

- (id<JavaUtilList>)fillColumnHeadersWithInt:(int)rowHeadersXOffset
                                     withInt:(int)availableHeight {
  IOSObjectArray *columnHeaderRows = [IOSObjectArray arrayWithDimensions:2 lengths:(int[]){ (int) [((IOSObjectArray *) nil_chk(this$0_.columnGroups)) count], lastColumnIndex_ - startColumnIndex_ + 1 } type:[IOSClass classWithClass:[OrgOssPdfreporterEngineFillJRFillCellContents class]]];
  [((id<JavaUtilList>) nil_chk(rowYs_)) clear];
  [((id<JavaUtilList>) nil_chk(rowYs_)) addWithId:[JavaLangInteger valueOfWithInt:0]];
  if (printRowHeaders_ && this$0_.headerCell != nil) {
    OrgOssPdfreporterEngineFillJRFillCellContents *contents = [self fillHeaderWithInt:availableHeight];
    if (willOverflow__) {
      return nil;
    }
    (void) [((IOSObjectArray *) nil_chk([((IOSObjectArray *) nil_chk(columnHeaderRows)) objectAtIndex:(int) [((IOSObjectArray *) nil_chk(this$0_.columnGroups)) count] - 1])) replaceObjectAtIndex:0 withObject:contents];
  }
  for (rowIdx_ = 0; rowIdx_ < (int) [((IOSObjectArray *) nil_chk(this$0_.columnGroups)) count]; rowIdx_++) {
    for (int columnIdx = startColumnIndex_; columnIdx < lastColumnIndex_; ++columnIdx) {
      IOSObjectArray *headers = [((id<JavaUtilList>) nil_chk(columnHeaders_)) getWithInt:columnIdx - startColumnIndex_];
      OrgOssPdfreporterCrosstabsFillCalculationHeaderCell *cell = [((IOSObjectArray *) nil_chk(headers)) objectAtIndex:rowIdx_];
      if (cell != nil) {
        OrgOssPdfreporterEngineFillJRFillCellContents *contents = [self prepareColumnHeaderWithOrgOssPdfreporterCrosstabsFillCalculationHeaderCell:cell withInt:columnIdx withInt:rowHeadersXOffset withInt:availableHeight];
        (void) [((IOSObjectArray *) nil_chk([((IOSObjectArray *) nil_chk(columnHeaderRows)) objectAtIndex:rowIdx_ + [cell getDepthSpan] - 1])) replaceObjectAtIndex:columnIdx - startColumnIndex_ + 1 withObject:contents];
        if (willOverflow__) {
          goto break_rows;
        }
      }
    }
    int rowStretchHeight = [self stretchColumnHeadersRowWithOrgOssPdfreporterEngineFillJRFillCellContentsArray:[((IOSObjectArray *) nil_chk(columnHeaderRows)) objectAtIndex:rowIdx_]];
    [((id<JavaUtilList>) nil_chk(rowYs_)) addWithId:[JavaLangInteger valueOfWithInt:[((JavaLangInteger *) nil_chk([((id<JavaUtilList>) nil_chk(rowYs_)) getWithInt:rowIdx_])) intValue] + rowStretchHeight]];
  }
  break_rows: ;
  id<JavaUtilList> headerRows;
  if (willOverflow__) {
    headerRows = nil;
    [self releaseColumnHeaderCellsWithOrgOssPdfreporterEngineFillJRFillCellContentsArray2:columnHeaderRows];
  }
  else {
    headerRows = [self fillColumnHeadersWithOrgOssPdfreporterEngineFillJRFillCellContentsArray2:columnHeaderRows];
    yOffset_ += [((JavaLangInteger *) nil_chk([((id<JavaUtilList>) nil_chk(rowYs_)) getWithInt:(int) [((IOSObjectArray *) nil_chk(this$0_.columnGroups)) count]])) intValue];
  }
  [self resetVariables];
  return headerRows;
}

- (void)setCountVarsWithInt:(int)rowIdx
                    withInt:(int)colIdx {
  if (rowIdx == -1) {
    [((OrgOssPdfreporterEngineFillJRFillVariable *) nil_chk(rowCountVar_)) setValueWithId:nil];
  }
  else {
    [((OrgOssPdfreporterEngineFillJRFillVariable *) nil_chk(rowCountVar_)) setValueWithId:[JavaLangInteger valueOfWithInt:[((IOSIntArray *) nil_chk(rowCount_)) intAtIndex:rowIdx]]];
  }
  if (colIdx == -1) {
    [((OrgOssPdfreporterEngineFillJRFillVariable *) nil_chk(colCountVar_)) setValueWithId:nil];
  }
  else {
    [((OrgOssPdfreporterEngineFillJRFillVariable *) nil_chk(colCountVar_)) setValueWithId:[JavaLangInteger valueOfWithInt:[((IOSIntArray *) nil_chk(columnCount_)) intAtIndex:colIdx]]];
  }
}

- (OrgOssPdfreporterEngineFillJRFillCellContents *)fillHeaderWithInt:(int)availableHeight {
  [self setCountVarsWithInt:-1 withInt:-1];
  OrgOssPdfreporterEngineFillJRFillCellContents *contents = [((OrgOssPdfreporterEngineFillJRFillCellContents *) nil_chk(this$0_.headerCell)) getWorkingClone];
  [((OrgOssPdfreporterEngineFillJRFillCellContents *) nil_chk(contents)) evaluateWithChar:OrgOssPdfreporterEngineJRExpression_EVALUATION_DEFAULT];
  [((OrgOssPdfreporterEngineFillJRFillCellContents *) nil_chk(contents)) prepareWithInt:availableHeight];
  willOverflow__ = [((OrgOssPdfreporterEngineFillJRFillCellContents *) nil_chk(contents)) willOverflow];
  if (!willOverflow__) {
    [((OrgOssPdfreporterEngineFillJRFillCellContents *) nil_chk(contents)) setXWithInt:0];
    [((OrgOssPdfreporterEngineFillJRFillCellContents *) nil_chk(contents)) setYWithInt:yOffset_];
    [((OrgOssPdfreporterEngineFillJRFillCellContents *) nil_chk(contents)) setVerticalSpanWithInt:(int) [((IOSObjectArray *) nil_chk(this$0_.columnGroups)) count]];
    [((OrgOssPdfreporterEngineFillJRFillCellContents *) nil_chk(contents)) setHorizontalSpanWithInt:(int) [((IOSObjectArray *) nil_chk(this$0_.rowGroups)) count]];
  }
  return contents;
}

- (OrgOssPdfreporterEngineFillJRFillCellContents *)prepareColumnHeaderWithOrgOssPdfreporterCrosstabsFillCalculationHeaderCell:(OrgOssPdfreporterCrosstabsFillCalculationHeaderCell *)cell
                                                                                                                      withInt:(int)columnIdx
                                                                                                                      withInt:(int)xOffset
                                                                                                                      withInt:(int)availableHeight {
  OrgOssPdfreporterCrosstabsFillJRFillCrosstabColumnGroup *group = [((IOSObjectArray *) nil_chk(this$0_.columnGroups)) objectAtIndex:rowIdx_];
  OrgOssPdfreporterEngineFillJRFillCellContents *contents = [((OrgOssPdfreporterCrosstabsFillCalculationHeaderCell *) nil_chk(cell)) isTotal] ? [((OrgOssPdfreporterCrosstabsFillJRFillCrosstabColumnGroup *) nil_chk(group)) getFillTotalHeader] : [((OrgOssPdfreporterCrosstabsFillJRFillCrosstabColumnGroup *) nil_chk(group)) getFillHeader];
  int width = [((IOSIntArray *) nil_chk(columnXOffsets_)) intAtIndex:columnIdx + [((OrgOssPdfreporterCrosstabsFillCalculationHeaderCell *) nil_chk(cell)) getLevelSpan]] - [((IOSIntArray *) nil_chk(columnXOffsets_)) intAtIndex:columnIdx];
  int height = [((OrgOssPdfreporterEngineFillJRFillCellContents *) nil_chk(contents)) getHeight];
  if (width <= 0 || height <= 0) {
    return nil;
  }
  OrgOssPdfreporterEngineFillJRFillCellContents *preparedContents = nil;
  int rowY = [((JavaLangInteger *) nil_chk([((id<JavaUtilList>) nil_chk(rowYs_)) getWithInt:rowIdx_])) intValue];
  if (availableHeight >= rowY + height) {
    [self setCountVarsWithInt:-1 withInt:columnIdx];
    [self setGroupVariablesWithOrgOssPdfreporterCrosstabsFillJRFillCrosstabGroupArray:this$0_.columnGroups withOrgOssPdfreporterCrosstabsFillCalculationBucketDefinition_BucketArray:[((OrgOssPdfreporterCrosstabsFillCalculationHeaderCell *) nil_chk(cell)) getBucketValues]];
    [self setGroupMeasureVariablesWithOrgOssPdfreporterCrosstabsFillCalculationHeaderCell:cell withBOOL:NO];
    contents = [((OrgOssPdfreporterEngineFillJRFillCellContents *) nil_chk(contents)) getTransformedContentsWithInt:width withInt:height withOrgOssPdfreporterCrosstabsTypeCrosstabColumnPositionEnumEnum:[((OrgOssPdfreporterCrosstabsFillJRFillCrosstabColumnGroup *) nil_chk(group)) getPositionValue] withOrgOssPdfreporterCrosstabsTypeCrosstabRowPositionEnumEnum:[OrgOssPdfreporterCrosstabsTypeCrosstabRowPositionEnumEnum TOP]];
    BOOL firstOnRow = columnIdx == startColumnIndex_ && (!printRowHeaders_ || this$0_.headerCell == nil);
    contents = [((OrgOssPdfreporterEngineFillJRFillCellContents *) nil_chk(contents)) getBoxContentsWithBOOL:firstOnRow && [this$0_ getRunDirectionValue] == [OrgOssPdfreporterEngineTypeRunDirectionEnumEnum LTR] withBOOL:firstOnRow && [this$0_ getRunDirectionValue] == [OrgOssPdfreporterEngineTypeRunDirectionEnumEnum RTL] withBOOL:NO];
    contents = [((OrgOssPdfreporterEngineFillJRFillCellContents *) nil_chk(contents)) getWorkingClone];
    [((OrgOssPdfreporterEngineFillJRFillCellContents *) nil_chk(contents)) evaluateWithChar:OrgOssPdfreporterEngineJRExpression_EVALUATION_DEFAULT];
    [((OrgOssPdfreporterEngineFillJRFillCellContents *) nil_chk(contents)) prepareWithInt:availableHeight - rowY];
    if ([((OrgOssPdfreporterEngineFillJRFillCellContents *) nil_chk(contents)) willOverflow]) {
      willOverflow__ = YES;
    }
    else {
      [((OrgOssPdfreporterEngineFillJRFillCellContents *) nil_chk(contents)) setXWithInt:[((IOSIntArray *) nil_chk(columnXOffsets_)) intAtIndex:columnIdx] - [((IOSIntArray *) nil_chk(columnXOffsets_)) intAtIndex:startColumnIndex_] + xOffset];
      [((OrgOssPdfreporterEngineFillJRFillCellContents *) nil_chk(contents)) setYWithInt:rowY + yOffset_];
      [((OrgOssPdfreporterEngineFillJRFillCellContents *) nil_chk(contents)) setVerticalSpanWithInt:[((OrgOssPdfreporterCrosstabsFillCalculationHeaderCell *) nil_chk(cell)) getDepthSpan]];
      [((OrgOssPdfreporterEngineFillJRFillCellContents *) nil_chk(contents)) setHorizontalSpanWithInt:[((OrgOssPdfreporterCrosstabsFillCalculationHeaderCell *) nil_chk(cell)) getLevelSpan]];
      preparedContents = contents;
    }
  }
  else {
    willOverflow__ = YES;
  }
  return preparedContents;
}

- (int)stretchColumnHeadersRowWithOrgOssPdfreporterEngineFillJRFillCellContentsArray:(IOSObjectArray *)headers {
  int rowY = [((JavaLangInteger *) nil_chk([((id<JavaUtilList>) nil_chk(rowYs_)) getWithInt:rowIdx_])) intValue];
  int rowStretchHeight = 0;
  for (int j = 0; j < (int) [((IOSObjectArray *) nil_chk(headers)) count]; j++) {
    OrgOssPdfreporterEngineFillJRFillCellContents *contents = [((IOSObjectArray *) nil_chk(headers)) objectAtIndex:j];
    if (contents != nil) {
      int startRowY = rowY;
      if ([contents getVerticalSpan] > 1) {
        startRowY = [((JavaLangInteger *) nil_chk([((id<JavaUtilList>) nil_chk(rowYs_)) getWithInt:rowIdx_ - [contents getVerticalSpan] + 1])) intValue];
      }
      int height = [contents getPrintHeight] - rowY + startRowY;
      if (height > rowStretchHeight) {
        rowStretchHeight = height;
      }
    }
  }
  for (int j = 0; j < (int) [((IOSObjectArray *) nil_chk(headers)) count]; j++) {
    OrgOssPdfreporterEngineFillJRFillCellContents *contents = [((IOSObjectArray *) nil_chk(headers)) objectAtIndex:j];
    if (contents != nil) {
      int startRowY = rowY;
      if ([contents getVerticalSpan] > 1) {
        startRowY = [((JavaLangInteger *) nil_chk([((id<JavaUtilList>) nil_chk(rowYs_)) getWithInt:rowIdx_ - [contents getVerticalSpan] + 1])) intValue];
      }
      [contents stretchToWithInt:rowStretchHeight + rowY - startRowY];
    }
  }
  return rowStretchHeight;
}

- (id<JavaUtilList>)fillColumnHeadersWithOrgOssPdfreporterEngineFillJRFillCellContentsArray2:(IOSObjectArray *)columnHeaderRows {
  id<JavaUtilList> headerRows = [[JavaUtilArrayList alloc] initWithInt:(int) [((IOSObjectArray *) nil_chk(this$0_.columnGroups)) count]];
  for (int i = 0; i < (int) [((IOSObjectArray *) nil_chk(columnHeaderRows)) count]; ++i) {
    id<JavaUtilList> headerRow = [[JavaUtilArrayList alloc] initWithInt:lastColumnIndex_ - startColumnIndex_];
    [((id<JavaUtilList>) nil_chk(headerRows)) addWithId:headerRow];
    for (int j = 0; j < (int) [((IOSObjectArray *) nil_chk([((IOSObjectArray *) nil_chk(columnHeaderRows)) objectAtIndex:i])) count]; j++) {
      OrgOssPdfreporterEngineFillJRFillCellContents *contents = [((IOSObjectArray *) nil_chk([((IOSObjectArray *) nil_chk(columnHeaderRows)) objectAtIndex:i])) objectAtIndex:j];
      if (contents != nil) {
        [((id<JavaUtilList>) nil_chk(headerRow)) addWithId:[contents fill]];
        [contents releaseWorkingClone];
      }
    }
  }
  return headerRows;
}

- (void)releaseColumnHeaderCellsWithOrgOssPdfreporterEngineFillJRFillCellContentsArray2:(IOSObjectArray *)columnHeaderRows {
  for (int i = 0; i < (int) [((IOSObjectArray *) nil_chk(columnHeaderRows)) count]; ++i) {
    for (int j = 0; j < (int) [((IOSObjectArray *) nil_chk([((IOSObjectArray *) nil_chk(columnHeaderRows)) objectAtIndex:i])) count]; j++) {
      OrgOssPdfreporterEngineFillJRFillCellContents *contents = [((IOSObjectArray *) nil_chk([((IOSObjectArray *) nil_chk(columnHeaderRows)) objectAtIndex:i])) objectAtIndex:j];
      if (contents != nil) {
        [contents rewind];
        [contents releaseWorkingClone];
      }
    }
  }
}

- (int)fillRowsWithInt:(int)xOffset
               withInt:(int)availableHeight {
  [((id<JavaUtilList>) nil_chk(rowYs_)) clear];
  [((id<JavaUtilList>) nil_chk(rowYs_)) addWithId:[JavaLangInteger valueOfWithInt:0]];
  for (rowIdx_ = 0; rowIdx_ < (int) [((IOSObjectArray *) nil_chk(this$0_.cellData)) count] - startRowIndex_; ++rowIdx_) {
    [self initPreparedRow];
    [self prepareRowWithInt:xOffset withInt:availableHeight];
    if (willOverflow__) {
      break;
    }
    [self fillRow];
    [((id<JavaUtilList>) nil_chk(rowYs_)) addWithId:[JavaLangInteger valueOfWithInt:[((JavaLangInteger *) nil_chk([((id<JavaUtilList>) nil_chk(rowYs_)) getWithInt:rowIdx_])) intValue] + preparedRowHeight_]];
  }
  if (rowIdx_ < (int) [((IOSObjectArray *) nil_chk(this$0_.cellData)) count] - startRowIndex_) {
    [self releasePreparedRow];
    if (printRowHeaders_) {
      [self fillContinuingRowHeadersWithInt:xOffset withInt:availableHeight];
    }
  }
  yOffset_ += [((JavaLangInteger *) nil_chk([((id<JavaUtilList>) nil_chk(rowYs_)) getWithInt:rowIdx_])) intValue];
  return rowIdx_ + startRowIndex_;
}

- (void)initPreparedRow OBJC_METHOD_FAMILY_NONE {
  [((id<JavaUtilList>) nil_chk(preparedRow_)) clear];
  preparedRowHeight_ = 0;
}

- (void)removeFilledRowsWithInt:(int)rowsToRemove {
  if (rowsToRemove > 0) {
    for (int i = 0; i < rowsToRemove; ++i) {
      (void) [((id<JavaUtilList>) nil_chk(printRows_)) removeWithInt:[((id<JavaUtilList>) nil_chk(printRows_)) size] - 1];
      (void) [((id<JavaUtilList>) nil_chk(rowYs_)) removeWithInt:[((id<JavaUtilList>) nil_chk(rowYs_)) size] - 1];
    }
    rowIdx_ -= rowsToRemove;
  }
}

- (void)releasePreparedRow {
  for (id<JavaUtilIterator> it = [((id<JavaUtilList>) nil_chk(preparedRow_)) iterator]; [((id<JavaUtilIterator>) nil_chk(it)) hasNext]; ) {
    OrgOssPdfreporterEngineFillJRFillCellContents *cell = [((id<JavaUtilIterator>) nil_chk(it)) next];
    [((OrgOssPdfreporterEngineFillJRFillCellContents *) nil_chk(cell)) rewind];
    [((OrgOssPdfreporterEngineFillJRFillCellContents *) nil_chk(cell)) releaseWorkingClone];
  }
  [((id<JavaUtilList>) nil_chk(preparedRow_)) clear];
}

- (void)fillRow {
  int rowY = [((JavaLangInteger *) nil_chk([((id<JavaUtilList>) nil_chk(rowYs_)) getWithInt:rowIdx_])) intValue];
  id<JavaUtilList> rowPrints = [[JavaUtilArrayList alloc] initWithInt:[((id<JavaUtilList>) nil_chk(preparedRow_)) size]];
  for (id<JavaUtilIterator> it = [((id<JavaUtilList>) nil_chk(preparedRow_)) iterator]; [((id<JavaUtilIterator>) nil_chk(it)) hasNext]; ) {
    OrgOssPdfreporterEngineFillJRFillCellContents *cell = [((id<JavaUtilIterator>) nil_chk(it)) next];
    int spanHeight = 0;
    if ([((OrgOssPdfreporterEngineFillJRFillCellContents *) nil_chk(cell)) getVerticalSpan] > 1) {
      spanHeight = rowY - [((JavaLangInteger *) nil_chk([((id<JavaUtilList>) nil_chk(rowYs_)) getWithInt:rowIdx_ - [((OrgOssPdfreporterEngineFillJRFillCellContents *) nil_chk(cell)) getVerticalSpan] + 1])) intValue];
    }
    [((OrgOssPdfreporterEngineFillJRFillCellContents *) nil_chk(cell)) stretchToWithInt:preparedRowHeight_ + spanHeight];
    [((id<JavaUtilList>) nil_chk(rowPrints)) addWithId:[((OrgOssPdfreporterEngineFillJRFillCellContents *) nil_chk(cell)) fill]];
    [((OrgOssPdfreporterEngineFillJRFillCellContents *) nil_chk(cell)) releaseWorkingClone];
  }
  [self addPrintRowWithJavaUtilList:rowPrints];
}

- (void)prepareRowWithInt:(int)xOffset
                  withInt:(int)availableHeight {
  for (int col = startColumnIndex_; col < lastColumnIndex_; ++col) {
    OrgOssPdfreporterCrosstabsFillCalculationCrosstabCell *data = [((IOSObjectArray *) nil_chk([((IOSObjectArray *) nil_chk(this$0_.cellData)) objectAtIndex:rowIdx_ + startRowIndex_])) objectAtIndex:col];
    BOOL overflow = [self prepareDataCellWithOrgOssPdfreporterCrosstabsFillCalculationCrosstabCell:data withInt:col withInt:availableHeight withInt:xOffset];
    if (overflow) {
      willOverflow__ = YES;
      return;
    }
  }
  [self resetVariables];
  if (printRowHeaders_) {
    for (int j = 0; j < (int) [((IOSObjectArray *) nil_chk(this$0_.rowGroups)) count]; j++) {
      OrgOssPdfreporterCrosstabsFillCalculationHeaderCell *cell = [((IOSObjectArray *) nil_chk([((IOSObjectArray *) nil_chk(this$0_.rowHeadersData)) objectAtIndex:j])) objectAtIndex:rowIdx_ + startRowIndex_];
      int vSpan = 0;
      if (cell == nil) {
        if ([self toCloseRowHeaderWithInt:j]) {
          cell = [((IOSObjectArray *) nil_chk(spanHeaders_)) objectAtIndex:j];
          vSpan = [cell getLevelSpan];
          if ([((IOSIntArray *) nil_chk(spanHeadersStart_)) intAtIndex:j] < startRowIndex_) {
            vSpan += [((IOSIntArray *) nil_chk(spanHeadersStart_)) intAtIndex:j] - startRowIndex_;
          }
        }
      }
      else {
        if ([cell getLevelSpan] > 1) {
          (void) [((IOSObjectArray *) nil_chk(spanHeaders_)) replaceObjectAtIndex:j withObject:cell];
          (*[((IOSIntArray *) nil_chk(spanHeadersStart_)) intRefAtIndex:j]) = rowIdx_ + startRowIndex_;
          continue;
        }
        vSpan = 1;
      }
      if (cell != nil) {
        BOOL overflow = [self prepareRowHeaderWithInt:j withOrgOssPdfreporterCrosstabsFillCalculationHeaderCell:cell withInt:vSpan withInt:availableHeight];
        if (overflow) {
          willOverflow__ = YES;
          return;
        }
      }
    }
    for (int j = 0; j < (int) [((IOSObjectArray *) nil_chk(this$0_.rowGroups)) count]; j++) {
      if ([((IOSObjectArray *) nil_chk([((IOSObjectArray *) nil_chk(this$0_.rowHeadersData)) objectAtIndex:j])) objectAtIndex:rowIdx_ + startRowIndex_] == nil && [self toCloseRowHeaderWithInt:j]) {
        (void) [((IOSObjectArray *) nil_chk(spanHeaders_)) replaceObjectAtIndex:j withObject:nil];
      }
    }
    [self resetVariables];
  }
}

- (BOOL)prepareDataCellWithOrgOssPdfreporterCrosstabsFillCalculationCrosstabCell:(OrgOssPdfreporterCrosstabsFillCalculationCrosstabCell *)data
                                                                         withInt:(int)column
                                                                         withInt:(int)availableHeight
                                                                         withInt:(int)xOffset {
  int rowY = [((JavaLangInteger *) nil_chk([((id<JavaUtilList>) nil_chk(rowYs_)) getWithInt:rowIdx_])) intValue];
  OrgOssPdfreporterCrosstabsFillJRFillCrosstabCell *cell = [((id<OrgOssPdfreporterCommonsArraysArray2D>) nil_chk(this$0_.crossCells)) getWithInt:[((OrgOssPdfreporterCrosstabsFillCalculationCrosstabCell *) nil_chk(data)) getRowTotalGroupIndex] withInt:[((OrgOssPdfreporterCrosstabsFillCalculationCrosstabCell *) nil_chk(data)) getColumnTotalGroupIndex]];
  OrgOssPdfreporterEngineFillJRFillCellContents *contents = cell == nil ? nil : [((OrgOssPdfreporterCrosstabsFillJRFillCrosstabCell *) nil_chk(cell)) getFillContents];
  if (contents == nil || [((OrgOssPdfreporterEngineFillJRFillCellContents *) nil_chk(contents)) getWidth] <= 0 || [((OrgOssPdfreporterEngineFillJRFillCellContents *) nil_chk(contents)) getHeight] <= 0) {
    return NO;
  }
  BOOL overflow = availableHeight < rowY + [((OrgOssPdfreporterEngineFillJRFillCellContents *) nil_chk(contents)) getHeight];
  if (!overflow) {
    BOOL leftEmpty = startColumnIndex_ != 0 && ![this$0_ isRepeatRowHeaders];
    BOOL topEmpty = startRowIndex_ != 0 && ![this$0_ isRepeatColumnHeaders];
    [self setCountVarsWithInt:rowIdx_ + startRowIndex_ withInt:column];
    [self setGroupVariablesWithOrgOssPdfreporterCrosstabsFillJRFillCrosstabGroupArray:this$0_.rowGroups withOrgOssPdfreporterCrosstabsFillCalculationBucketDefinition_BucketArray:[((OrgOssPdfreporterCrosstabsFillCalculationCrosstabCell *) nil_chk(data)) getRowBucketValues]];
    [self setGroupVariablesWithOrgOssPdfreporterCrosstabsFillJRFillCrosstabGroupArray:this$0_.columnGroups withOrgOssPdfreporterCrosstabsFillCalculationBucketDefinition_BucketArray:[((OrgOssPdfreporterCrosstabsFillCalculationCrosstabCell *) nil_chk(data)) getColumnBucketValues]];
    [self setMeasureVariablesWithOrgOssPdfreporterCrosstabsFillCalculationCrosstabCell:data];
    BOOL firstOnRow = leftEmpty && column == startColumnIndex_;
    contents = [((OrgOssPdfreporterEngineFillJRFillCellContents *) nil_chk(contents)) getBoxContentsWithBOOL:firstOnRow && [this$0_ getRunDirectionValue] == [OrgOssPdfreporterEngineTypeRunDirectionEnumEnum LTR] withBOOL:firstOnRow && [this$0_ getRunDirectionValue] == [OrgOssPdfreporterEngineTypeRunDirectionEnumEnum RTL] withBOOL:topEmpty && rowIdx_ == 0];
    contents = [((OrgOssPdfreporterEngineFillJRFillCellContents *) nil_chk(contents)) getWorkingClone];
    [((OrgOssPdfreporterEngineFillJRFillCellContents *) nil_chk(contents)) evaluateWithChar:OrgOssPdfreporterEngineJRExpression_EVALUATION_DEFAULT];
    [((OrgOssPdfreporterEngineFillJRFillCellContents *) nil_chk(contents)) prepareWithInt:availableHeight - rowY];
    [((id<JavaUtilList>) nil_chk(preparedRow_)) addWithId:contents];
    overflow = [((OrgOssPdfreporterEngineFillJRFillCellContents *) nil_chk(contents)) willOverflow];
    if (!overflow) {
      [((OrgOssPdfreporterEngineFillJRFillCellContents *) nil_chk(contents)) setXWithInt:[((IOSIntArray *) nil_chk(columnXOffsets_)) intAtIndex:column] - [((IOSIntArray *) nil_chk(columnXOffsets_)) intAtIndex:startColumnIndex_] + xOffset];
      [((OrgOssPdfreporterEngineFillJRFillCellContents *) nil_chk(contents)) setYWithInt:rowY + yOffset_];
      int rowCellHeight = [((OrgOssPdfreporterEngineFillJRFillCellContents *) nil_chk(contents)) getPrintHeight];
      if (rowCellHeight > preparedRowHeight_) {
        preparedRowHeight_ = rowCellHeight;
      }
    }
  }
  return overflow;
}

- (BOOL)prepareRowHeaderWithInt:(int)rowGroup
withOrgOssPdfreporterCrosstabsFillCalculationHeaderCell:(OrgOssPdfreporterCrosstabsFillCalculationHeaderCell *)cell
                        withInt:(int)vSpan
                        withInt:(int)availableHeight {
  OrgOssPdfreporterCrosstabsFillJRFillCrosstabRowGroup *group = [((IOSObjectArray *) nil_chk(this$0_.rowGroups)) objectAtIndex:rowGroup];
  OrgOssPdfreporterEngineFillJRFillCellContents *contents = [((OrgOssPdfreporterCrosstabsFillCalculationHeaderCell *) nil_chk(cell)) isTotal] ? [((OrgOssPdfreporterCrosstabsFillJRFillCrosstabRowGroup *) nil_chk(group)) getFillTotalHeader] : [((OrgOssPdfreporterCrosstabsFillJRFillCrosstabRowGroup *) nil_chk(group)) getFillHeader];
  if ([((OrgOssPdfreporterEngineFillJRFillCellContents *) nil_chk(contents)) getWidth] <= 0 || [((OrgOssPdfreporterEngineFillJRFillCellContents *) nil_chk(contents)) getHeight] <= 0) {
    return NO;
  }
  int spanHeight = 0;
  int headerY = [((JavaLangInteger *) nil_chk([((id<JavaUtilList>) nil_chk(rowYs_)) getWithInt:rowIdx_ - vSpan + 1])) intValue];
  if (vSpan > 1) {
    spanHeight += [((JavaLangInteger *) nil_chk([((id<JavaUtilList>) nil_chk(rowYs_)) getWithInt:rowIdx_])) intValue] - headerY;
  }
  int rowHeight = spanHeight + preparedRowHeight_;
  BOOL stretchContents = [((OrgOssPdfreporterCrosstabsFillJRFillCrosstabRowGroup *) nil_chk(group)) getPositionValue] == [OrgOssPdfreporterCrosstabsTypeCrosstabRowPositionEnumEnum STRETCH];
  int contentsHeight = stretchContents ? rowHeight : [((OrgOssPdfreporterEngineFillJRFillCellContents *) nil_chk(contents)) getHeight];
  BOOL headerOverflow = availableHeight < headerY + contentsHeight || rowHeight < [((OrgOssPdfreporterEngineFillJRFillCellContents *) nil_chk(contents)) getHeight];
  if (!headerOverflow) {
    [self setCountVarsWithInt:rowIdx_ + startRowIndex_ - vSpan + 1 withInt:-1];
    [self setGroupVariablesWithOrgOssPdfreporterCrosstabsFillJRFillCrosstabGroupArray:this$0_.rowGroups withOrgOssPdfreporterCrosstabsFillCalculationBucketDefinition_BucketArray:[((OrgOssPdfreporterCrosstabsFillCalculationHeaderCell *) nil_chk(cell)) getBucketValues]];
    [self setGroupMeasureVariablesWithOrgOssPdfreporterCrosstabsFillCalculationHeaderCell:cell withBOOL:YES];
    if (stretchContents) {
      contents = [((OrgOssPdfreporterEngineFillJRFillCellContents *) nil_chk(contents)) getTransformedContentsWithInt:[((OrgOssPdfreporterEngineFillJRFillCellContents *) nil_chk(contents)) getWidth] withInt:rowHeight withOrgOssPdfreporterCrosstabsTypeCrosstabColumnPositionEnumEnum:[OrgOssPdfreporterCrosstabsTypeCrosstabColumnPositionEnumEnum LEFT] withOrgOssPdfreporterCrosstabsTypeCrosstabRowPositionEnumEnum:[OrgOssPdfreporterCrosstabsTypeCrosstabRowPositionEnumEnum STRETCH]];
    }
    contents = [((OrgOssPdfreporterEngineFillJRFillCellContents *) nil_chk(contents)) getBoxContentsWithBOOL:NO withBOOL:NO withBOOL:rowIdx_ + 1 == vSpan && (!printColumnHeaders_ || this$0_.headerCell == nil)];
    (void) [((OrgOssPdfreporterEngineFillJRFillCellContents *) nil_chk(contents)) getWorkingClone];
    [((OrgOssPdfreporterEngineFillJRFillCellContents *) nil_chk(contents)) evaluateWithChar:OrgOssPdfreporterEngineJRExpression_EVALUATION_DEFAULT];
    [((OrgOssPdfreporterEngineFillJRFillCellContents *) nil_chk(contents)) prepareWithInt:availableHeight - headerY];
    [((id<JavaUtilList>) nil_chk(preparedRow_)) addWithId:contents];
    headerOverflow = [((OrgOssPdfreporterEngineFillJRFillCellContents *) nil_chk(contents)) willOverflow];
    if (!headerOverflow) {
      [((OrgOssPdfreporterEngineFillJRFillCellContents *) nil_chk(contents)) setXWithInt:[((IOSIntArray *) nil_chk(rowHeadersXOffsets_)) intAtIndex:rowGroup]];
      [((OrgOssPdfreporterEngineFillJRFillCellContents *) nil_chk(contents)) setYWithInt:headerY + yOffset_];
      [((OrgOssPdfreporterEngineFillJRFillCellContents *) nil_chk(contents)) setVerticalSpanWithInt:vSpan];
      [((OrgOssPdfreporterEngineFillJRFillCellContents *) nil_chk(contents)) setHorizontalSpanWithInt:[((OrgOssPdfreporterCrosstabsFillCalculationHeaderCell *) nil_chk(cell)) getDepthSpan]];
      int rowCellHeight = [((OrgOssPdfreporterEngineFillJRFillCellContents *) nil_chk(contents)) getPrintHeight] - spanHeight;
      if (rowCellHeight > preparedRowHeight_) {
        preparedRowHeight_ = rowCellHeight;
      }
    }
  }
  if (headerOverflow) {
    [self removeFilledRowsWithInt:vSpan - 1];
  }
  return headerOverflow;
}

- (BOOL)toCloseRowHeaderWithInt:(int)rowGroup {
  return rowGroup < (int) [((IOSObjectArray *) nil_chk(this$0_.rowGroups)) count] - 1 && [((IOSObjectArray *) nil_chk(spanHeaders_)) objectAtIndex:rowGroup] != nil && [((OrgOssPdfreporterCrosstabsFillCalculationHeaderCell *) nil_chk([((IOSObjectArray *) nil_chk(spanHeaders_)) objectAtIndex:rowGroup])) getLevelSpan] + [((IOSIntArray *) nil_chk(spanHeadersStart_)) intAtIndex:rowGroup] == rowIdx_ + startRowIndex_ + 1;
}

- (void)removeExceedingSpanHeaders {
  for (int j = (int) [((IOSObjectArray *) nil_chk(this$0_.rowGroups)) count] - 2; j >= 0; --j) {
    if ([((IOSObjectArray *) nil_chk(spanHeaders_)) objectAtIndex:j] != nil && [((IOSIntArray *) nil_chk(spanHeadersStart_)) intAtIndex:j] >= rowIdx_ + startRowIndex_) {
      (void) [((IOSObjectArray *) nil_chk(spanHeaders_)) replaceObjectAtIndex:j withObject:nil];
    }
  }
}

- (void)setBackSpanHeaders {
  for (int j = (int) [((IOSObjectArray *) nil_chk(this$0_.rowGroups)) count] - 2; j >= 0 && [((IOSObjectArray *) nil_chk(spanHeaders_)) objectAtIndex:j] == nil; --j) {
    int spanIndex = [self getSpanIndexWithInt:rowIdx_ + startRowIndex_ withInt:j withOrgOssPdfreporterCrosstabsFillCalculationHeaderCellArray2:this$0_.rowHeadersData];
    if (spanIndex >= 0) {
      (void) [((IOSObjectArray *) nil_chk(spanHeaders_)) replaceObjectAtIndex:j withObject:[((IOSObjectArray *) nil_chk([((IOSObjectArray *) nil_chk(this$0_.rowHeadersData)) objectAtIndex:j])) objectAtIndex:spanIndex]];
      (*[((IOSIntArray *) nil_chk(spanHeadersStart_)) intRefAtIndex:j]) = spanIndex;
    }
  }
}

- (void)fillContinuingRowHeadersWithInt:(int)xOffset
                                withInt:(int)availableHeight {
  BOOL done = NO;
  do {
    [self removeExceedingSpanHeaders];
    if (![((IOSBooleanArray *) nil_chk(rowBreakable_)) booleanAtIndex:rowIdx_ + startRowIndex_]) {
      [self removeFilledRowsWithInt:1];
      [self setBackSpanHeaders];
      continue;
    }
    [self initPreparedRow];
    for (int j = 0; j < (int) [((IOSObjectArray *) nil_chk(this$0_.rowGroups)) count] - 1; ++j) {
      if ([((IOSObjectArray *) nil_chk(spanHeaders_)) objectAtIndex:j] != nil) {
        BOOL headerOverflow = [self prepareContinuingRowHeaderWithInt:j withInt:availableHeight];
        if (headerOverflow) {
          [self releasePreparedRow];
          goto continue_breakCrosstab;
        }
      }
    }
    if (![((id<JavaUtilList>) nil_chk(preparedRow_)) isEmpty]) {
      int lastRowHeight = [((JavaLangInteger *) nil_chk([((id<JavaUtilList>) nil_chk(rowYs_)) getWithInt:rowIdx_])) intValue] - [((JavaLangInteger *) nil_chk([((id<JavaUtilList>) nil_chk(rowYs_)) getWithInt:rowIdx_ - 1])) intValue];
      if (preparedRowHeight_ > lastRowHeight) {
        [self refillLastRowWithInt:xOffset withInt:availableHeight];
      }
      else {
        [self fillContinuingHeadersWithInt:lastRowHeight];
      }
    }
    done = YES;
    continue_breakCrosstab: ;
  }
  while (!done && rowIdx_ > 0);
}

- (void)fillContinuingHeadersWithInt:(int)lastRowHeight {
  int nextToLastHeaderY = [((JavaLangInteger *) nil_chk([((id<JavaUtilList>) nil_chk(rowYs_)) getWithInt:rowIdx_ - 1])) intValue];
  id<JavaUtilList> lastPrintRow = [self getLastPrintRow];
  for (int j = 0; j < [((id<JavaUtilList>) nil_chk(preparedRow_)) size]; ++j) {
    OrgOssPdfreporterEngineFillJRFillCellContents *contents = [((id<JavaUtilList>) nil_chk(preparedRow_)) getWithInt:j];
    int headerY = [((JavaLangInteger *) nil_chk([((id<JavaUtilList>) nil_chk(rowYs_)) getWithInt:rowIdx_ - [((OrgOssPdfreporterEngineFillJRFillCellContents *) nil_chk(contents)) getVerticalSpan]])) intValue];
    [((OrgOssPdfreporterEngineFillJRFillCellContents *) nil_chk(contents)) stretchToWithInt:nextToLastHeaderY - headerY + lastRowHeight];
    [((id<JavaUtilList>) nil_chk(lastPrintRow)) addWithId:[((OrgOssPdfreporterEngineFillJRFillCellContents *) nil_chk(contents)) fill]];
    [((OrgOssPdfreporterEngineFillJRFillCellContents *) nil_chk(contents)) releaseWorkingClone];
  }
}

- (void)refillLastRowWithInt:(int)xOffset
                     withInt:(int)availableHeight {
  [self removeFilledRowsWithInt:1];
  [self setBackSpanHeaders];
  [self prepareRowWithInt:xOffset withInt:availableHeight];
  [self fillRow];
  [((id<JavaUtilList>) nil_chk(rowYs_)) addWithId:[JavaLangInteger valueOfWithInt:[((JavaLangInteger *) nil_chk([((id<JavaUtilList>) nil_chk(rowYs_)) getWithInt:rowIdx_])) intValue] + preparedRowHeight_]];
  ++rowIdx_;
}

- (BOOL)prepareContinuingRowHeaderWithInt:(int)rowGroup
                                  withInt:(int)availableHeight {
  OrgOssPdfreporterCrosstabsFillCalculationHeaderCell *cell = [((IOSObjectArray *) nil_chk(spanHeaders_)) objectAtIndex:rowGroup];
  int vSpan = rowIdx_ + startRowIndex_ - [((IOSIntArray *) nil_chk(spanHeadersStart_)) intAtIndex:rowGroup];
  if ([((IOSIntArray *) nil_chk(spanHeadersStart_)) intAtIndex:rowGroup] < startRowIndex_) {
    vSpan += [((IOSIntArray *) nil_chk(spanHeadersStart_)) intAtIndex:rowGroup] - startRowIndex_;
  }
  int headerY = [((JavaLangInteger *) nil_chk([((id<JavaUtilList>) nil_chk(rowYs_)) getWithInt:rowIdx_ - vSpan])) intValue];
  int lastHeaderY = [((JavaLangInteger *) nil_chk([((id<JavaUtilList>) nil_chk(rowYs_)) getWithInt:rowIdx_])) intValue];
  int headerHeight = lastHeaderY - headerY;
  int nextToLastHeaderY = [((JavaLangInteger *) nil_chk([((id<JavaUtilList>) nil_chk(rowYs_)) getWithInt:rowIdx_ - 1])) intValue];
  int stretchHeight = nextToLastHeaderY - headerY;
  OrgOssPdfreporterCrosstabsFillJRFillCrosstabRowGroup *group = [((IOSObjectArray *) nil_chk(this$0_.rowGroups)) objectAtIndex:rowGroup];
  OrgOssPdfreporterEngineFillJRFillCellContents *contents = [((OrgOssPdfreporterCrosstabsFillCalculationHeaderCell *) nil_chk(cell)) isTotal] ? [((OrgOssPdfreporterCrosstabsFillJRFillCrosstabRowGroup *) nil_chk(group)) getFillTotalHeader] : [((OrgOssPdfreporterCrosstabsFillJRFillCrosstabRowGroup *) nil_chk(group)) getFillHeader];
  BOOL stretchContents = [((OrgOssPdfreporterCrosstabsFillJRFillCrosstabRowGroup *) nil_chk(group)) getPositionValue] == [OrgOssPdfreporterCrosstabsTypeCrosstabRowPositionEnumEnum STRETCH];
  int contentsHeight = stretchContents ? headerHeight : [((OrgOssPdfreporterEngineFillJRFillCellContents *) nil_chk(contents)) getHeight];
  BOOL headerOverflow = availableHeight < headerY + contentsHeight || headerHeight < [((OrgOssPdfreporterEngineFillJRFillCellContents *) nil_chk(contents)) getHeight];
  if (!headerOverflow) {
    [self setCountVarsWithInt:rowIdx_ + startRowIndex_ - vSpan withInt:-1];
    [self setGroupVariablesWithOrgOssPdfreporterCrosstabsFillJRFillCrosstabGroupArray:this$0_.rowGroups withOrgOssPdfreporterCrosstabsFillCalculationBucketDefinition_BucketArray:[((OrgOssPdfreporterCrosstabsFillCalculationHeaderCell *) nil_chk(cell)) getBucketValues]];
    [self setGroupMeasureVariablesWithOrgOssPdfreporterCrosstabsFillCalculationHeaderCell:cell withBOOL:YES];
    if (stretchContents) {
      contents = [((OrgOssPdfreporterEngineFillJRFillCellContents *) nil_chk(contents)) getTransformedContentsWithInt:[((OrgOssPdfreporterEngineFillJRFillCellContents *) nil_chk(contents)) getWidth] withInt:headerHeight withOrgOssPdfreporterCrosstabsTypeCrosstabColumnPositionEnumEnum:[OrgOssPdfreporterCrosstabsTypeCrosstabColumnPositionEnumEnum LEFT] withOrgOssPdfreporterCrosstabsTypeCrosstabRowPositionEnumEnum:[OrgOssPdfreporterCrosstabsTypeCrosstabRowPositionEnumEnum STRETCH]];
    }
    contents = [((OrgOssPdfreporterEngineFillJRFillCellContents *) nil_chk(contents)) getBoxContentsWithBOOL:NO withBOOL:NO withBOOL:rowIdx_ == vSpan && (!printColumnHeaders_ || this$0_.headerCell == nil)];
    (void) [((OrgOssPdfreporterEngineFillJRFillCellContents *) nil_chk(contents)) getWorkingClone];
    [((OrgOssPdfreporterEngineFillJRFillCellContents *) nil_chk(contents)) evaluateWithChar:OrgOssPdfreporterEngineJRExpression_EVALUATION_DEFAULT];
    [((OrgOssPdfreporterEngineFillJRFillCellContents *) nil_chk(contents)) prepareWithInt:availableHeight - headerY];
    [((id<JavaUtilList>) nil_chk(preparedRow_)) addWithId:contents];
    headerOverflow = [((OrgOssPdfreporterEngineFillJRFillCellContents *) nil_chk(contents)) willOverflow];
    if (!headerOverflow) {
      [((OrgOssPdfreporterEngineFillJRFillCellContents *) nil_chk(contents)) setXWithInt:[((IOSIntArray *) nil_chk(rowHeadersXOffsets_)) intAtIndex:rowGroup]];
      [((OrgOssPdfreporterEngineFillJRFillCellContents *) nil_chk(contents)) setYWithInt:headerY + yOffset_];
      [((OrgOssPdfreporterEngineFillJRFillCellContents *) nil_chk(contents)) setVerticalSpanWithInt:vSpan];
      [((OrgOssPdfreporterEngineFillJRFillCellContents *) nil_chk(contents)) setHorizontalSpanWithInt:[((OrgOssPdfreporterCrosstabsFillCalculationHeaderCell *) nil_chk(cell)) getDepthSpan]];
      int rowHeight = [((OrgOssPdfreporterEngineFillJRFillCellContents *) nil_chk(contents)) getPrintHeight] - stretchHeight;
      if (rowHeight > preparedRowHeight_) {
        preparedRowHeight_ = rowHeight;
      }
    }
  }
  if (headerOverflow) {
    [self removeFilledRowsWithInt:vSpan];
  }
  return headerOverflow;
}

- (void)addPrintRowWithJavaUtilList:(id<JavaUtilList>)printRow {
  [((id<JavaUtilList>) nil_chk(printRows_)) addWithId:printRow];
}

- (id<JavaUtilList>)getLastPrintRow {
  return [((id<JavaUtilList>) nil_chk(printRows_)) getWithInt:[((id<JavaUtilList>) nil_chk(printRows_)) size] - 1];
}

- (void)setGroupVariablesWithOrgOssPdfreporterCrosstabsFillJRFillCrosstabGroupArray:(IOSObjectArray *)groups
          withOrgOssPdfreporterCrosstabsFillCalculationBucketDefinition_BucketArray:(IOSObjectArray *)bucketValues {
  for (int i = 0; i < (int) [((IOSObjectArray *) nil_chk(groups)) count]; i++) {
    id value = nil;
    if ([((IOSObjectArray *) nil_chk(bucketValues)) objectAtIndex:i] != nil && ![((OrgOssPdfreporterCrosstabsFillCalculationBucketDefinition_Bucket *) nil_chk([((IOSObjectArray *) nil_chk(bucketValues)) objectAtIndex:i])) isTotal]) {
      value = [((OrgOssPdfreporterCrosstabsFillCalculationBucketDefinition_Bucket *) nil_chk([((IOSObjectArray *) nil_chk(bucketValues)) objectAtIndex:i])) getValue];
    }
    [((OrgOssPdfreporterEngineFillJRFillVariable *) nil_chk([((OrgOssPdfreporterCrosstabsFillJRFillCrosstabGroup *) nil_chk([((IOSObjectArray *) nil_chk(groups)) objectAtIndex:i])) getFillVariable])) setValueWithId:value];
  }
}

- (void)setGroupMeasureVariablesWithOrgOssPdfreporterCrosstabsFillCalculationHeaderCell:(OrgOssPdfreporterCrosstabsFillCalculationHeaderCell *)cell
                                                                               withBOOL:(BOOL)rowGroup {
  IOSObjectArray *totals = [((OrgOssPdfreporterCrosstabsFillCalculationHeaderCell *) nil_chk(cell)) getTotals];
  for (int m = 0; m < (int) [((IOSObjectArray *) nil_chk(this$0_.measures)) count]; m++) {
    for (int row = 0; row <= (int) [((IOSObjectArray *) nil_chk(this$0_.rowGroups)) count]; row++) {
      for (int col = 0; col <= (int) [((IOSObjectArray *) nil_chk(this$0_.columnGroups)) count]; col++) {
        IOSObjectArray *vals = rowGroup ? [((IOSObjectArray *) nil_chk(totals)) objectAtIndex:row] : [((IOSObjectArray *) nil_chk(totals)) objectAtIndex:col];
        if (row == (int) [((IOSObjectArray *) nil_chk(this$0_.rowGroups)) count] && col == (int) [((IOSObjectArray *) nil_chk(this$0_.columnGroups)) count]) {
          id value = [self measureValueWithOrgOssPdfreporterCrosstabsFillCalculationMeasureDefinition_MeasureValueArray:vals withInt:m];
          [((OrgOssPdfreporterEngineFillJRFillVariable *) nil_chk([((OrgOssPdfreporterCrosstabsFillJRFillCrosstabMeasure *) nil_chk([((IOSObjectArray *) nil_chk(this$0_.measures)) objectAtIndex:m])) getFillVariable])) setValueWithId:value];
        }
        else if ([((IOSBooleanArray *) nil_chk([((IOSObjectArray *) nil_chk(this$0_.retrieveTotal)) objectAtIndex:row])) booleanAtIndex:col]) {
          OrgOssPdfreporterEngineFillJRFillVariable *totalVar = [((IOSObjectArray *) nil_chk([((IOSObjectArray *) nil_chk([((IOSObjectArray *) nil_chk(this$0_.totalVariables)) objectAtIndex:row])) objectAtIndex:col])) objectAtIndex:m];
          id value = [self measureValueWithOrgOssPdfreporterCrosstabsFillCalculationMeasureDefinition_MeasureValueArray:vals withInt:m];
          [((OrgOssPdfreporterEngineFillJRFillVariable *) nil_chk(totalVar)) setValueWithId:value];
        }
      }
    }
  }
}

- (void)setMeasureVariablesWithOrgOssPdfreporterCrosstabsFillCalculationCrosstabCell:(OrgOssPdfreporterCrosstabsFillCalculationCrosstabCell *)cell {
  IOSObjectArray *values = [((OrgOssPdfreporterCrosstabsFillCalculationCrosstabCell *) nil_chk(cell)) getMesureValues];
  for (int i = 0; i < (int) [((IOSObjectArray *) nil_chk(this$0_.measures)) count]; i++) {
    id value = [self measureValueWithOrgOssPdfreporterCrosstabsFillCalculationMeasureDefinition_MeasureValueArray:values withInt:i];
    [((OrgOssPdfreporterEngineFillJRFillVariable *) nil_chk([((OrgOssPdfreporterCrosstabsFillJRFillCrosstabMeasure *) nil_chk([((IOSObjectArray *) nil_chk(this$0_.measures)) objectAtIndex:i])) getFillVariable])) setValueWithId:value];
  }
  IOSObjectArray *totals = [((OrgOssPdfreporterCrosstabsFillCalculationCrosstabCell *) nil_chk(cell)) getTotals];
  for (int row = 0; row <= (int) [((IOSObjectArray *) nil_chk(this$0_.rowGroups)) count]; row++) {
    for (int col = 0; col <= (int) [((IOSObjectArray *) nil_chk(this$0_.columnGroups)) count]; col++) {
      IOSObjectArray *vals = [((IOSObjectArray *) nil_chk([((IOSObjectArray *) nil_chk(totals)) objectAtIndex:row])) objectAtIndex:col];
      if ([((IOSBooleanArray *) nil_chk([((IOSObjectArray *) nil_chk(this$0_.retrieveTotal)) objectAtIndex:row])) booleanAtIndex:col]) {
        for (int m = 0; m < (int) [((IOSObjectArray *) nil_chk(this$0_.measures)) count]; m++) {
          OrgOssPdfreporterEngineFillJRFillVariable *totalVar = [((IOSObjectArray *) nil_chk([((IOSObjectArray *) nil_chk([((IOSObjectArray *) nil_chk(this$0_.totalVariables)) objectAtIndex:row])) objectAtIndex:col])) objectAtIndex:m];
          id value = [self measureValueWithOrgOssPdfreporterCrosstabsFillCalculationMeasureDefinition_MeasureValueArray:vals withInt:m];
          [((OrgOssPdfreporterEngineFillJRFillVariable *) nil_chk(totalVar)) setValueWithId:value];
        }
      }
    }
  }
}

- (id)measureValueWithOrgOssPdfreporterCrosstabsFillCalculationMeasureDefinition_MeasureValueArray:(IOSObjectArray *)values
                                                                                           withInt:(int)measureIdx {
  if (values == nil) {
    return nil;
  }
  id value;
  if ([((OrgOssPdfreporterCrosstabsFillJRFillCrosstabMeasure *) nil_chk([((IOSObjectArray *) nil_chk(this$0_.measures)) objectAtIndex:measureIdx])) getPercentageType] == [OrgOssPdfreporterCrosstabsTypeCrosstabPercentageEnumEnum GRAND_TOTAL]) {
    if ([((OrgOssPdfreporterCrosstabsFillCalculationMeasureDefinition_MeasureValue *) nil_chk([((IOSObjectArray *) nil_chk(values)) objectAtIndex:measureIdx])) isInitialized]) {
      value = [((OrgOssPdfreporterCrosstabsFillCalculationMeasureDefinition_MeasureValue *) nil_chk([((IOSObjectArray *) nil_chk(values)) objectAtIndex:measureIdx])) getValue];
    }
    else {
      value = [((id<OrgOssPdfreporterCrosstabsFillJRPercentageCalculator>) nil_chk([((OrgOssPdfreporterCrosstabsFillJRFillCrosstabMeasure *) nil_chk([((IOSObjectArray *) nil_chk(this$0_.measures)) objectAtIndex:measureIdx])) getPercentageCalculator])) calculatePercentageWithOrgOssPdfreporterEngineFillJRCalculable:[((IOSObjectArray *) nil_chk(values)) objectAtIndex:measureIdx] withOrgOssPdfreporterEngineFillJRCalculable:[((IOSObjectArray *) nil_chk(this$0_.grandTotals)) objectAtIndex:measureIdx]];
    }
  }
  else {
    value = [((OrgOssPdfreporterCrosstabsFillCalculationMeasureDefinition_MeasureValue *) nil_chk([((IOSObjectArray *) nil_chk(values)) objectAtIndex:measureIdx])) getValue];
  }
  return value;
}

- (void)resetVariables {
  for (int i = 0; i < (int) [((IOSObjectArray *) nil_chk(this$0_.rowGroups)) count]; i++) {
    [((OrgOssPdfreporterEngineFillJRFillVariable *) nil_chk([((OrgOssPdfreporterCrosstabsFillJRFillCrosstabRowGroup *) nil_chk([((IOSObjectArray *) nil_chk(this$0_.rowGroups)) objectAtIndex:i])) getFillVariable])) setValueWithId:nil];
  }
  for (int i = 0; i < (int) [((IOSObjectArray *) nil_chk(this$0_.columnGroups)) count]; i++) {
    [((OrgOssPdfreporterEngineFillJRFillVariable *) nil_chk([((OrgOssPdfreporterCrosstabsFillJRFillCrosstabColumnGroup *) nil_chk([((IOSObjectArray *) nil_chk(this$0_.columnGroups)) objectAtIndex:i])) getFillVariable])) setValueWithId:nil];
  }
  for (int i = 0; i < (int) [((IOSObjectArray *) nil_chk(this$0_.measures)) count]; i++) {
    [((OrgOssPdfreporterEngineFillJRFillVariable *) nil_chk([((OrgOssPdfreporterCrosstabsFillJRFillCrosstabMeasure *) nil_chk([((IOSObjectArray *) nil_chk(this$0_.measures)) objectAtIndex:i])) getFillVariable])) setValueWithId:nil];
  }
  for (int row = 0; row <= (int) [((IOSObjectArray *) nil_chk(this$0_.rowGroups)) count]; ++row) {
    for (int col = 0; col <= (int) [((IOSObjectArray *) nil_chk(this$0_.columnGroups)) count]; ++col) {
      if ([((IOSBooleanArray *) nil_chk([((IOSObjectArray *) nil_chk(this$0_.retrieveTotal)) objectAtIndex:row])) booleanAtIndex:col]) {
        for (int i = 0; i < (int) [((IOSObjectArray *) nil_chk(this$0_.measures)) count]; i++) {
          [((OrgOssPdfreporterEngineFillJRFillVariable *) nil_chk([((IOSObjectArray *) nil_chk([((IOSObjectArray *) nil_chk([((IOSObjectArray *) nil_chk(this$0_.totalVariables)) objectAtIndex:row])) objectAtIndex:col])) objectAtIndex:i])) setValueWithId:nil];
        }
      }
    }
  }
}

- (void)copyAllPropertiesTo:(id)copy {
  [super copyAllPropertiesTo:copy];
  OrgOssPdfreporterEngineFillJRFillCrosstab_CrosstabFiller *typedCopy = (OrgOssPdfreporterEngineFillJRFillCrosstab_CrosstabFiller *) copy;
  typedCopy.this$0 = this$0_;
  typedCopy.yOffset = yOffset_;
  typedCopy.yChunkOffset = yChunkOffset_;
  typedCopy.willOverflow_ = willOverflow__;
  typedCopy.rowHeadersXOffsets = rowHeadersXOffsets_;
  typedCopy.columnBreakable = columnBreakable_;
  typedCopy.rowBreakable = rowBreakable_;
  typedCopy.columnCount = columnCount_;
  typedCopy.rowCount = rowCount_;
  typedCopy.columnXOffsets = columnXOffsets_;
  typedCopy.noDataCellPrinted = noDataCellPrinted_;
  typedCopy.startRowIndex = startRowIndex_;
  typedCopy.startColumnIndex = startColumnIndex_;
  typedCopy.lastColumnIndex = lastColumnIndex_;
  typedCopy.columnHeaders = columnHeaders_;
  typedCopy.printRows = printRows_;
  typedCopy.spanHeaders = spanHeaders_;
  typedCopy.spanHeadersStart = spanHeadersStart_;
  typedCopy.rowYs = rowYs_;
  typedCopy.rowIdx = rowIdx_;
  typedCopy.preparedRow = preparedRow_;
  typedCopy.preparedRowHeight = preparedRowHeight_;
  typedCopy.printRowHeaders = printRowHeaders_;
  typedCopy.printColumnHeaders = printColumnHeaders_;
  typedCopy.rowCountVar = rowCountVar_;
  typedCopy.colCountVar = colCountVar_;
}

@end
