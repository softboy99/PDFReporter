//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: pdfreporter-core/src/org/oss/pdfreporter/engine/fill/JRFillStaticText.java
//
//  Created by kendra on 9/27/13.
//

#include "org/oss/pdfreporter/engine/JRDefaultStyleProvider.h"
#include "org/oss/pdfreporter/engine/JRExpressionCollector.h"
#include "org/oss/pdfreporter/engine/JRGroup.h"
#include "org/oss/pdfreporter/engine/JROrigin.h"
#include "org/oss/pdfreporter/engine/JRPrintElement.h"
#include "org/oss/pdfreporter/engine/JRStaticText.h"
#include "org/oss/pdfreporter/engine/JRVisitor.h"
#include "org/oss/pdfreporter/engine/JasperPrint.h"
#include "org/oss/pdfreporter/engine/fill/JRBaseFiller.h"
#include "org/oss/pdfreporter/engine/fill/JRFillBand.h"
#include "org/oss/pdfreporter/engine/fill/JRFillCloneFactory.h"
#include "org/oss/pdfreporter/engine/fill/JRFillCloneable.h"
#include "org/oss/pdfreporter/engine/fill/JRFillElement.h"
#include "org/oss/pdfreporter/engine/fill/JRFillObjectFactory.h"
#include "org/oss/pdfreporter/engine/fill/JRFillStaticText.h"
#include "org/oss/pdfreporter/engine/fill/JRFillTextElement.h"
#include "org/oss/pdfreporter/engine/fill/JRTemplateElement.h"
#include "org/oss/pdfreporter/engine/fill/JRTemplatePrintText.h"
#include "org/oss/pdfreporter/engine/fill/JRTemplateText.h"
#include "org/oss/pdfreporter/engine/type/RunDirectionEnum.h"
#include "org/oss/pdfreporter/uses/java/util/UUID.h"

@implementation OrgOssPdfreporterEngineFillJRFillStaticText

- (id)initWithOrgOssPdfreporterEngineFillJRBaseFiller:(OrgOssPdfreporterEngineFillJRBaseFiller *)filler
              withOrgOssPdfreporterEngineJRStaticText:(id<OrgOssPdfreporterEngineJRStaticText>)staticText
   withOrgOssPdfreporterEngineFillJRFillObjectFactory:(OrgOssPdfreporterEngineFillJRFillObjectFactory *)factory {
  if ((self = [super initWithOrgOssPdfreporterEngineFillJRBaseFiller:filler withOrgOssPdfreporterEngineJRTextElement:staticText withOrgOssPdfreporterEngineFillJRFillObjectFactory:factory])) {
    NSString *text = [self processMarkupTextWithNSString:[((id<OrgOssPdfreporterEngineJRStaticText>) nil_chk(staticText)) getText]];
    if (text == nil) {
      text = @"";
    }
    [self setRawTextWithNSString:text];
  }
  return self;
}

- (id)initWithOrgOssPdfreporterEngineFillJRFillStaticText:(OrgOssPdfreporterEngineFillJRFillStaticText *)staticText
        withOrgOssPdfreporterEngineFillJRFillCloneFactory:(OrgOssPdfreporterEngineFillJRFillCloneFactory *)factory {
  if ((self = [super initWithOrgOssPdfreporterEngineFillJRFillTextElement:staticText withOrgOssPdfreporterEngineFillJRFillCloneFactory:factory])) {
    NSString *text = [self processMarkupTextWithNSString:[((OrgOssPdfreporterEngineFillJRFillStaticText *) nil_chk(staticText)) getText]];
    if (text == nil) {
      text = @"";
    }
    [self setRawTextWithNSString:text];
  }
  return self;
}

- (void)setTextWithNSString:(NSString *)text {
}

- (OrgOssPdfreporterEngineFillJRTemplateText *)getJRTemplateText {
  return (OrgOssPdfreporterEngineFillJRTemplateText *) [self getElementTemplate];
}

- (OrgOssPdfreporterEngineFillJRTemplateElement *)createElementTemplate {
  return [[OrgOssPdfreporterEngineFillJRTemplateText alloc] initWithOrgOssPdfreporterEngineJROrigin:[self getElementOrigin] withOrgOssPdfreporterEngineJRDefaultStyleProvider:[((OrgOssPdfreporterEngineJasperPrint *) nil_chk([((OrgOssPdfreporterEngineFillJRBaseFiller *) nil_chk(filler_)) getJasperPrint])) getDefaultStyleProvider] withOrgOssPdfreporterEngineJRStaticText:self];
}

- (void)evaluateWithChar:(char)evaluation {
  [self reset];
  [self evaluatePrintWhenExpressionWithChar:evaluation];
  [self evaluatePropertiesWithChar:evaluation];
  [self evaluateStyleWithChar:evaluation];
  [self resetTextChunk];
  [self setValueRepeatingWithBOOL:YES];
}

- (BOOL)prepareWithInt:(int)availableHeight
              withBOOL:(BOOL)isOverflow {
  BOOL willOverflow = NO;
  [super prepareWithInt:availableHeight withBOOL:isOverflow];
  if (![self isToPrint]) {
    return willOverflow;
  }
  BOOL isToPrint = YES;
  BOOL isReprinted = NO;
  if (isOverflow && [self isAlreadyPrinted] && ![self isPrintWhenDetailOverflows]) {
    isToPrint = NO;
  }
  if (isToPrint && [self isPrintWhenExpressionNull] && ![self isPrintRepeatedValues]) {
    if ((![self isPrintInFirstWholeBand] || ![((OrgOssPdfreporterEngineFillJRFillBand *) nil_chk([self getBand])) isFirstWholeOnPageColumn]) && ([self getPrintWhenGroupChanges] == nil || ![((OrgOssPdfreporterEngineFillJRFillBand *) nil_chk([self getBand])) isNewGroupWithOrgOssPdfreporterEngineJRGroup:[self getPrintWhenGroupChanges]]) && (!isOverflow || ![self isPrintWhenDetailOverflows])) {
      isToPrint = NO;
    }
  }
  if (isToPrint && availableHeight < [self getRelativeY] + [self getHeight]) {
    isToPrint = NO;
    willOverflow = YES;
  }
  if (isToPrint && isOverflow && ([self isPrintWhenDetailOverflows] && ([self isAlreadyPrinted] || (![self isAlreadyPrinted] && ![self isPrintRepeatedValues])))) {
    isReprinted = YES;
  }
  [self resetTextChunk];
  if (isToPrint) {
    [self chopTextElementWithInt:0];
  }
  [self setToPrintWithBOOL:isToPrint];
  [self setReprintedWithBOOL:isReprinted];
  return willOverflow;
}

- (id<OrgOssPdfreporterEngineJRPrintElement>)fill {
  OrgOssPdfreporterEngineFillJRTemplatePrintText *text = [[OrgOssPdfreporterEngineFillJRTemplatePrintText alloc] initWithOrgOssPdfreporterEngineFillJRTemplateText:[self getJRTemplateText] withInt:elementId_];
  [((OrgOssPdfreporterEngineFillJRTemplatePrintText *) nil_chk(text)) setUUIDWithOrgOssPdfreporterUsesJavaUtilUUID:[self getUUID]];
  [((OrgOssPdfreporterEngineFillJRTemplatePrintText *) nil_chk(text)) setXWithInt:[self getX]];
  [((OrgOssPdfreporterEngineFillJRTemplatePrintText *) nil_chk(text)) setYWithInt:[self getRelativeY]];
  [((OrgOssPdfreporterEngineFillJRTemplatePrintText *) nil_chk(text)) setWidthWithInt:[self getWidth]];
  [((OrgOssPdfreporterEngineFillJRTemplatePrintText *) nil_chk(text)) setHeightWithInt:[self getPrintElementHeight]];
  [((OrgOssPdfreporterEngineFillJRTemplatePrintText *) nil_chk(text)) setRunDirectionWithOrgOssPdfreporterEngineTypeRunDirectionEnumEnum:[self getRunDirectionValue]];
  [((OrgOssPdfreporterEngineFillJRTemplatePrintText *) nil_chk(text)) setLineSpacingFactorWithFloat:[self getLineSpacingFactor]];
  [((OrgOssPdfreporterEngineFillJRTemplatePrintText *) nil_chk(text)) setLeadingOffsetWithFloat:[self getLeadingOffset]];
  [((OrgOssPdfreporterEngineFillJRTemplatePrintText *) nil_chk(text)) setTextHeightWithFloat:[self getTextHeight]];
  [self transferPropertiesWithOrgOssPdfreporterEngineJRPrintElement:text];
  [self setPrintTextWithOrgOssPdfreporterEngineJRPrintText:text];
  return text;
}

- (void)collectExpressionsWithOrgOssPdfreporterEngineJRExpressionCollector:(OrgOssPdfreporterEngineJRExpressionCollector *)collector {
  [((OrgOssPdfreporterEngineJRExpressionCollector *) nil_chk(collector)) collectWithOrgOssPdfreporterEngineJRStaticText:self];
}

- (void)visitWithOrgOssPdfreporterEngineJRVisitor:(id<OrgOssPdfreporterEngineJRVisitor>)visitor {
  [((id<OrgOssPdfreporterEngineJRVisitor>) nil_chk(visitor)) visitStaticTextWithOrgOssPdfreporterEngineJRStaticText:self];
}

- (void)resolveElementWithOrgOssPdfreporterEngineJRPrintElement:(id<OrgOssPdfreporterEngineJRPrintElement>)element
                                                       withChar:(char)evaluation {
}

- (id<OrgOssPdfreporterEngineFillJRFillCloneable>)createCloneWithOrgOssPdfreporterEngineFillJRFillCloneFactory:(OrgOssPdfreporterEngineFillJRFillCloneFactory *)factory {
  return [[OrgOssPdfreporterEngineFillJRFillStaticText alloc] initWithOrgOssPdfreporterEngineFillJRFillStaticText:self withOrgOssPdfreporterEngineFillJRFillCloneFactory:factory];
}

- (BOOL)canOverflow {
  return NO;
}

@end
