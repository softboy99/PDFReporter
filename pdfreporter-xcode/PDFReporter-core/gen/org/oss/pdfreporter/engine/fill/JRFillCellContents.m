//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: pdfreporter-core/src/org/oss/pdfreporter/engine/fill/JRFillCellContents.java
//
//  Created by kendra on 9/27/13.
//

#include "IOSObjectArray.h"
#include "java/lang/Float.h"
#include "java/lang/Integer.h"
#include "java/lang/UnsupportedOperationException.h"
#include "java/util/HashMap.h"
#include "java/util/Iterator.h"
#include "java/util/List.h"
#include "java/util/Map.h"
#include "org/oss/pdfreporter/crosstabs/JRCellContents.h"
#include "org/oss/pdfreporter/crosstabs/fill/JRFillCrosstabObjectFactory.h"
#include "org/oss/pdfreporter/crosstabs/type/CrosstabColumnPositionEnum.h"
#include "org/oss/pdfreporter/crosstabs/type/CrosstabRowPositionEnum.h"
#include "org/oss/pdfreporter/engine/JRDefaultStyleProvider.h"
#include "org/oss/pdfreporter/engine/JRElement.h"
#include "org/oss/pdfreporter/engine/JRException.h"
#include "org/oss/pdfreporter/engine/JRFrame.h"
#include "org/oss/pdfreporter/engine/JRLineBox.h"
#include "org/oss/pdfreporter/engine/JROrigin.h"
#include "org/oss/pdfreporter/engine/JRPrintElement.h"
#include "org/oss/pdfreporter/engine/JRPrintFrame.h"
#include "org/oss/pdfreporter/engine/JRPropertiesHolder.h"
#include "org/oss/pdfreporter/engine/JRPropertiesMap.h"
#include "org/oss/pdfreporter/engine/JRStyle.h"
#include "org/oss/pdfreporter/engine/JasperPrint.h"
#include "org/oss/pdfreporter/engine/base/JRBoxPen.h"
#include "org/oss/pdfreporter/engine/fill/JRBaseFiller.h"
#include "org/oss/pdfreporter/engine/fill/JRClonePool.h"
#include "org/oss/pdfreporter/engine/fill/JRFillCellContents.h"
#include "org/oss/pdfreporter/engine/fill/JRFillCloneFactory.h"
#include "org/oss/pdfreporter/engine/fill/JRFillCloneable.h"
#include "org/oss/pdfreporter/engine/fill/JRFillContext.h"
#include "org/oss/pdfreporter/engine/fill/JRFillElement.h"
#include "org/oss/pdfreporter/engine/fill/JRFillElementContainer.h"
#include "org/oss/pdfreporter/engine/fill/JRFillElementGroup.h"
#include "org/oss/pdfreporter/engine/fill/JROriginProvider.h"
#include "org/oss/pdfreporter/engine/fill/JRTemplateFrame.h"
#include "org/oss/pdfreporter/engine/fill/JRTemplatePrintFrame.h"
#include "org/oss/pdfreporter/engine/type/ModeEnum.h"
#include "org/oss/pdfreporter/geometry/IColor.h"
#include "org/oss/pdfreporter/uses/org/apache/commons/collections/ReferenceMap.h"

@implementation OrgOssPdfreporterEngineFillJRFillCellContents

@synthesize transformedContentsCache = transformedContentsCache_;
@synthesize boxContentsCache = boxContentsCache_;
@synthesize clonePool = clonePool_;
@synthesize originProvider = originProvider_;
@synthesize elementId = elementId_;
@synthesize original = original_;
@synthesize parentCell = parentCell_;
@synthesize cellType = cellType_;
@synthesize lineBox = lineBox_;
@synthesize height = height_;
@synthesize width = width_;
@synthesize x = x_;
@synthesize y = y_;
@synthesize verticalSpan = verticalSpan_;
@synthesize verticalPositionType = verticalPositionType_;
@synthesize horizontalSpan = horizontalSpan_;
@synthesize templateFrames = templateFrames_;
@synthesize defaultStyleProvider = defaultStyleProvider_;
@synthesize initStyle = initStyle_;
@synthesize prepareStretchHeight = prepareStretchHeight_;

- (id)initWithOrgOssPdfreporterEngineFillJRBaseFiller:(OrgOssPdfreporterEngineFillJRBaseFiller *)filler
         withOrgOssPdfreporterCrosstabsJRCellContents:(id<OrgOssPdfreporterCrosstabsJRCellContents>)cell
                                         withNSString:(NSString *)cellType
withOrgOssPdfreporterCrosstabsFillJRFillCrosstabObjectFactory:(OrgOssPdfreporterCrosstabsFillJRFillCrosstabObjectFactory *)factory {
  if ((self = [super initWithOrgOssPdfreporterEngineFillJRBaseFiller:filler withOrgOssPdfreporterEngineJRElementGroup:cell withOrgOssPdfreporterEngineFillJRFillObjectFactory:factory])) {
    verticalPositionType_ = [OrgOssPdfreporterCrosstabsTypeCrosstabRowPositionEnumEnum TOP];
    defaultStyleProvider_ = [((OrgOssPdfreporterCrosstabsFillJRFillCrosstabObjectFactory *) nil_chk(factory)) getDefaultStyleProvider];
    parentCell_ = cell;
    self.cellType = cellType;
    elementId_ = [((OrgOssPdfreporterEngineFillJRFillContext *) nil_chk([((OrgOssPdfreporterEngineFillJRBaseFiller *) nil_chk(filler)) getFillContext])) generateFillElementId];
    lineBox_ = [((id<OrgOssPdfreporterEngineJRLineBox>) nil_chk([((id<OrgOssPdfreporterCrosstabsJRCellContents>) nil_chk(cell)) getLineBox])) cloneWithOrgOssPdfreporterEngineJRBoxContainer:self];
    width_ = [((id<OrgOssPdfreporterCrosstabsJRCellContents>) nil_chk(cell)) getWidth];
    height_ = [((id<OrgOssPdfreporterCrosstabsJRCellContents>) nil_chk(cell)) getHeight];
    [((OrgOssPdfreporterCrosstabsFillJRFillCrosstabObjectFactory *) nil_chk(factory)) registerDelayedStyleSetterWithOrgOssPdfreporterEngineJRStyleSetter:self withOrgOssPdfreporterEngineJRStyleContainer:parentCell_];
    [self initElements];
    [self initConditionalStyles];
    [self initTemplatesMap];
    self.originProvider = [((OrgOssPdfreporterCrosstabsFillJRFillCrosstabObjectFactory *) nil_chk(factory)) getParentOriginProvider];
    [self setElementOriginProviderWithOrgOssPdfreporterEngineFillJROriginProvider:self.originProvider];
    transformedContentsCache_ = [[OrgOssPdfreporterUsesOrgApacheCommonsCollectionsReferenceMap alloc] init];
    boxContentsCache_ = [[JavaUtilHashMap alloc] init];
    clonePool_ = [[OrgOssPdfreporterEngineFillJRClonePool alloc] initWithOrgOssPdfreporterEngineFillJRFillCloneable:self withBOOL:YES withBOOL:YES];
  }
  return self;
}

- (void)initTemplatesMap OBJC_METHOD_FAMILY_NONE {
  templateFrames_ = [[JavaUtilHashMap alloc] init];
}

- (id)initWithOrgOssPdfreporterEngineFillJRFillCellContents:(OrgOssPdfreporterEngineFillJRFillCellContents *)cellContents
          withOrgOssPdfreporterEngineFillJRFillCloneFactory:(OrgOssPdfreporterEngineFillJRFillCloneFactory *)factory {
  if ((self = [super initWithOrgOssPdfreporterEngineFillJRFillElementContainer:cellContents withOrgOssPdfreporterEngineFillJRFillCloneFactory:factory])) {
    verticalPositionType_ = [OrgOssPdfreporterCrosstabsTypeCrosstabRowPositionEnumEnum TOP];
    defaultStyleProvider_ = ((OrgOssPdfreporterEngineFillJRFillCellContents *) nil_chk(cellContents)).defaultStyleProvider;
    parentCell_ = ((OrgOssPdfreporterEngineFillJRFillCellContents *) nil_chk(cellContents)).parentCell;
    cellType_ = ((OrgOssPdfreporterEngineFillJRFillCellContents *) nil_chk(cellContents)).cellType;
    elementId_ = ((OrgOssPdfreporterEngineFillJRFillCellContents *) nil_chk(cellContents)).elementId;
    lineBox_ = [((id<OrgOssPdfreporterEngineJRLineBox>) nil_chk([((OrgOssPdfreporterEngineFillJRFillCellContents *) nil_chk(cellContents)) getLineBox])) cloneWithOrgOssPdfreporterEngineJRBoxContainer:self];
    width_ = ((OrgOssPdfreporterEngineFillJRFillCellContents *) nil_chk(cellContents)).width;
    height_ = ((OrgOssPdfreporterEngineFillJRFillCellContents *) nil_chk(cellContents)).height;
    initStyle_ = ((OrgOssPdfreporterEngineFillJRFillCellContents *) nil_chk(cellContents)).initStyle;
    [self initElements];
    [self initConditionalStyles];
    self.templateFrames = ((OrgOssPdfreporterEngineFillJRFillCellContents *) nil_chk(cellContents)).templateFrames;
    self.originProvider = ((OrgOssPdfreporterEngineFillJRFillCellContents *) nil_chk(cellContents)).originProvider;
    transformedContentsCache_ = [[OrgOssPdfreporterUsesOrgApacheCommonsCollectionsReferenceMap alloc] init];
    boxContentsCache_ = [[JavaUtilHashMap alloc] init];
    clonePool_ = [[OrgOssPdfreporterEngineFillJRClonePool alloc] initWithOrgOssPdfreporterEngineFillJRFillCloneable:self withBOOL:YES withBOOL:YES];
    verticalPositionType_ = ((OrgOssPdfreporterEngineFillJRFillCellContents *) nil_chk(cellContents)).verticalPositionType;
  }
  return self;
}

- (id<OrgOssPdfreporterGeometryIColor>)getBackcolor {
  return [((id<OrgOssPdfreporterCrosstabsJRCellContents>) nil_chk(parentCell_)) getBackcolor];
}

- (id<OrgOssPdfreporterEngineJRLineBox>)getLineBox {
  return lineBox_;
}

- (void)setBoxWithOrgOssPdfreporterEngineJRLineBox:(id<OrgOssPdfreporterEngineJRLineBox>)box {
  self.lineBox = box;
  [self initTemplatesMap];
}

- (int)getHeight {
  return height_;
}

- (int)getWidth {
  return width_;
}

- (void)setHeightWithInt:(int)height {
  self.height = height;
}

- (void)setWidthWithInt:(int)width {
  self.width = width;
}

- (OrgOssPdfreporterEngineFillJRFillCellContents *)getBoxContentsWithBOOL:(BOOL)left
                                                                 withBOOL:(BOOL)right
                                                                 withBOOL:(BOOL)top {
  if (lineBox_ == nil) {
    return self;
  }
  BOOL copyLeft = left && [((JavaLangFloat *) nil_chk([((id<OrgOssPdfreporterEngineBaseJRBoxPen>) nil_chk([((id<OrgOssPdfreporterEngineJRLineBox>) nil_chk(lineBox_)) getLeftPen])) getLineWidth])) floatValue] <= 0.0f && [((JavaLangFloat *) nil_chk([((id<OrgOssPdfreporterEngineBaseJRBoxPen>) nil_chk([((id<OrgOssPdfreporterEngineJRLineBox>) nil_chk(lineBox_)) getRightPen])) getLineWidth])) floatValue] > 0.0f;
  BOOL copyRight = right && [((JavaLangFloat *) nil_chk([((id<OrgOssPdfreporterEngineBaseJRBoxPen>) nil_chk([((id<OrgOssPdfreporterEngineJRLineBox>) nil_chk(lineBox_)) getRightPen])) getLineWidth])) floatValue] <= 0.0f && [((JavaLangFloat *) nil_chk([((id<OrgOssPdfreporterEngineBaseJRBoxPen>) nil_chk([((id<OrgOssPdfreporterEngineJRLineBox>) nil_chk(lineBox_)) getLeftPen])) getLineWidth])) floatValue] > 0.0f;
  BOOL copyTop = top && [((JavaLangFloat *) nil_chk([((id<OrgOssPdfreporterEngineBaseJRBoxPen>) nil_chk([((id<OrgOssPdfreporterEngineJRLineBox>) nil_chk(lineBox_)) getTopPen])) getLineWidth])) floatValue] <= 0.0f && [((JavaLangFloat *) nil_chk([((id<OrgOssPdfreporterEngineBaseJRBoxPen>) nil_chk([((id<OrgOssPdfreporterEngineJRLineBox>) nil_chk(lineBox_)) getBottomPen])) getLineWidth])) floatValue] > 0.0f;
  if (!(copyLeft || copyRight || copyTop)) {
    return self;
  }
  id key = [[OrgOssPdfreporterEngineFillJRFillCellContents_BoxContents alloc] initWithBOOL:copyLeft withBOOL:copyRight withBOOL:copyTop];
  OrgOssPdfreporterEngineFillJRFillCellContents *boxContents = [((id<JavaUtilMap>) nil_chk(boxContentsCache_)) getWithId:key];
  if (boxContents == nil) {
    boxContents = (OrgOssPdfreporterEngineFillJRFillCellContents *) [self createClone];
    id<OrgOssPdfreporterEngineJRLineBox> newBox = [((id<OrgOssPdfreporterEngineJRLineBox>) nil_chk(lineBox_)) cloneWithOrgOssPdfreporterEngineJRBoxContainer:self];
    if (copyLeft) {
      [((id<OrgOssPdfreporterEngineJRLineBox>) nil_chk(newBox)) copyLeftPenWithOrgOssPdfreporterEngineBaseJRBoxPen:[((id<OrgOssPdfreporterEngineJRLineBox>) nil_chk(lineBox_)) getRightPen]];
    }
    if (copyRight) {
      [((id<OrgOssPdfreporterEngineJRLineBox>) nil_chk(newBox)) copyRightPenWithOrgOssPdfreporterEngineBaseJRBoxPen:[((id<OrgOssPdfreporterEngineJRLineBox>) nil_chk(lineBox_)) getLeftPen]];
    }
    if (copyTop) {
      [((id<OrgOssPdfreporterEngineJRLineBox>) nil_chk(newBox)) copyTopPenWithOrgOssPdfreporterEngineBaseJRBoxPen:[((id<OrgOssPdfreporterEngineJRLineBox>) nil_chk(lineBox_)) getBottomPen]];
    }
    [boxContents setBoxWithOrgOssPdfreporterEngineJRLineBox:newBox];
    (void) [((id<JavaUtilMap>) nil_chk(boxContentsCache_)) putWithId:(OrgOssPdfreporterEngineFillJRFillCellContents_BoxContents *) key withId:boxContents];
  }
  return boxContents;
}

- (OrgOssPdfreporterEngineFillJRFillCellContents *)getTransformedContentsWithInt:(int)newWidth
                                                                         withInt:(int)newHeight
                withOrgOssPdfreporterCrosstabsTypeCrosstabColumnPositionEnumEnum:(OrgOssPdfreporterCrosstabsTypeCrosstabColumnPositionEnumEnum *)xPosition
                   withOrgOssPdfreporterCrosstabsTypeCrosstabRowPositionEnumEnum:(OrgOssPdfreporterCrosstabsTypeCrosstabRowPositionEnumEnum *)yPosition {
  if (([self getHeight] == newHeight) && ([self getWidth] == newWidth)) {
    return self;
  }
  if (newHeight < [self getHeight] || newWidth < [self getWidth]) {
    @throw [[OrgOssPdfreporterEngineJRException alloc] initWithNSString:@"Cannot shrink cell contents."];
  }
  id key = [[OrgOssPdfreporterEngineFillJRFillCellContents_StretchedContents alloc] initWithInt:newWidth withInt:newHeight withOrgOssPdfreporterCrosstabsTypeCrosstabColumnPositionEnumEnum:xPosition withOrgOssPdfreporterCrosstabsTypeCrosstabRowPositionEnumEnum:yPosition];
  OrgOssPdfreporterEngineFillJRFillCellContents *transformedCell = [((id<JavaUtilMap>) nil_chk(transformedContentsCache_)) getWithId:key];
  if (transformedCell == nil) {
    transformedCell = (OrgOssPdfreporterEngineFillJRFillCellContents *) [self createClone];
    [transformedCell transformWithInt:newWidth withInt:newHeight withOrgOssPdfreporterCrosstabsTypeCrosstabColumnPositionEnumEnum:xPosition withOrgOssPdfreporterCrosstabsTypeCrosstabRowPositionEnumEnum:yPosition];
    (void) [((id<JavaUtilMap>) nil_chk(transformedContentsCache_)) putWithId:(OrgOssPdfreporterEngineFillJRFillCellContents_StretchedContents *) key withId:transformedCell];
  }
  return transformedCell;
}

- (void)transformWithInt:(int)newWidth
                 withInt:(int)newHeight
withOrgOssPdfreporterCrosstabsTypeCrosstabColumnPositionEnumEnum:(OrgOssPdfreporterCrosstabsTypeCrosstabColumnPositionEnumEnum *)xPosition
withOrgOssPdfreporterCrosstabsTypeCrosstabRowPositionEnumEnum:(OrgOssPdfreporterCrosstabsTypeCrosstabRowPositionEnumEnum *)yPosition {
  [self transformElementsWithInt:newWidth withInt:newHeight withOrgOssPdfreporterCrosstabsTypeCrosstabColumnPositionEnumEnum:xPosition withOrgOssPdfreporterCrosstabsTypeCrosstabRowPositionEnumEnum:yPosition];
  width_ = newWidth;
  height_ = newHeight;
}

- (void)transformElementsWithInt:(int)newWidth
                         withInt:(int)newHeight
withOrgOssPdfreporterCrosstabsTypeCrosstabColumnPositionEnumEnum:(OrgOssPdfreporterCrosstabsTypeCrosstabColumnPositionEnumEnum *)xPosition
withOrgOssPdfreporterCrosstabsTypeCrosstabRowPositionEnumEnum:(OrgOssPdfreporterCrosstabsTypeCrosstabRowPositionEnumEnum *)yPosition {
  if ((height_ == newHeight || yPosition == [OrgOssPdfreporterCrosstabsTypeCrosstabRowPositionEnumEnum TOP]) && (width_ == newWidth || xPosition == [OrgOssPdfreporterCrosstabsTypeCrosstabColumnPositionEnumEnum LEFT])) {
    return;
  }
  double scaleX = -1.0;
  int offsetX = 0;
  switch ([xPosition ordinal]) {
    case OrgOssPdfreporterCrosstabsTypeCrosstabColumnPositionEnum_CENTER:
    offsetX = (newWidth - width_) / 2;
    break;
    case OrgOssPdfreporterCrosstabsTypeCrosstabColumnPositionEnum_RIGHT:
    offsetX = newWidth - width_;
    break;
    case OrgOssPdfreporterCrosstabsTypeCrosstabColumnPositionEnum_STRETCH:
    scaleX = ((double) newWidth) / width_;
    break;
  }
  double scaleY = -1.0;
  int offsetY = 0;
  switch ([yPosition ordinal]) {
    case OrgOssPdfreporterCrosstabsTypeCrosstabRowPositionEnum_MIDDLE:
    offsetY = (newHeight - height_) / 2;
    break;
    case OrgOssPdfreporterCrosstabsTypeCrosstabRowPositionEnum_BOTTOM:
    offsetY = newHeight - height_;
    break;
    case OrgOssPdfreporterCrosstabsTypeCrosstabRowPositionEnum_STRETCH:
    scaleY = ((double) newHeight) / height_;
    break;
  }
  [OrgOssPdfreporterEngineFillJRFillCellContents transformElementsWithOrgOssPdfreporterEngineJRElementArray:[self getElements] withDouble:scaleX withInt:offsetX withDouble:scaleY withInt:offsetY];
}

+ (void)transformElementsWithOrgOssPdfreporterEngineJRElementArray:(IOSObjectArray *)elements
                                                        withDouble:(double)scaleX
                                                           withInt:(int)offsetX
                                                        withDouble:(double)scaleY
                                                           withInt:(int)offsetY {
  if (elements != nil) {
    for (int i = 0; i < (int) [elements count]; i++) {
      OrgOssPdfreporterEngineFillJRFillElement *element = (OrgOssPdfreporterEngineFillJRFillElement *) [elements objectAtIndex:i];
      if (scaleX != -1.0) {
        [((OrgOssPdfreporterEngineFillJRFillElement *) nil_chk(element)) setXWithInt:(int) ([((OrgOssPdfreporterEngineFillJRFillElement *) nil_chk(element)) getX] * scaleX)];
        [((OrgOssPdfreporterEngineFillJRFillElement *) nil_chk(element)) setWidthWithInt:(int) ([((OrgOssPdfreporterEngineFillJRFillElement *) nil_chk(element)) getWidth] * scaleX)];
      }
      if (offsetX != 0) {
        [((OrgOssPdfreporterEngineFillJRFillElement *) nil_chk(element)) setXWithInt:[((OrgOssPdfreporterEngineFillJRFillElement *) nil_chk(element)) getX] + offsetX];
      }
      if (scaleY != -1.0) {
        [((OrgOssPdfreporterEngineFillJRFillElement *) nil_chk(element)) setYWithInt:(int) ([((OrgOssPdfreporterEngineFillJRFillElement *) nil_chk(element)) getY] * scaleY)];
        [((OrgOssPdfreporterEngineFillJRFillElement *) nil_chk(element)) setHeightWithInt:(int) ([((OrgOssPdfreporterEngineFillJRFillElement *) nil_chk(element)) getHeight] * scaleY)];
      }
      if (offsetY != 0) {
        [((OrgOssPdfreporterEngineFillJRFillElement *) nil_chk(element)) setYWithInt:[((OrgOssPdfreporterEngineFillJRFillElement *) nil_chk(element)) getY] + offsetY];
      }
      if ([element conformsToProtocol: @protocol(OrgOssPdfreporterEngineJRFrame)]) {
        IOSObjectArray *frameElements = [((id<OrgOssPdfreporterEngineJRFrame>) element) getElements];
        [OrgOssPdfreporterEngineFillJRFillCellContents transformElementsWithOrgOssPdfreporterEngineJRElementArray:frameElements withDouble:scaleX withInt:offsetX withDouble:scaleY withInt:offsetY];
      }
    }
  }
}

- (void)prepareWithInt:(int)availableHeight {
  [self initFill];
  [self resetElements];
  [self prepareElementsWithInt:availableHeight withBOOL:YES];
  prepareStretchHeight_ = [self getStretchHeight];
}

- (id<OrgOssPdfreporterEngineJRPrintFrame>)fill {
  [self stretchElements];
  [self moveBandBottomElements];
  [self removeBlankElements];
  OrgOssPdfreporterEngineFillJRTemplatePrintFrame *printCell = [[OrgOssPdfreporterEngineFillJRTemplatePrintFrame alloc] initWithOrgOssPdfreporterEngineFillJRTemplateFrame:[self getTemplateFrame] withInt:elementId_];
  [((OrgOssPdfreporterEngineFillJRTemplatePrintFrame *) nil_chk(printCell)) setXWithInt:x_];
  [((OrgOssPdfreporterEngineFillJRTemplatePrintFrame *) nil_chk(printCell)) setYWithInt:y_];
  [((OrgOssPdfreporterEngineFillJRTemplatePrintFrame *) nil_chk(printCell)) setWidthWithInt:width_];
  [self fillElementsWithOrgOssPdfreporterEngineJRPrintElementContainer:printCell];
  [self verticallyPositionElementsWithOrgOssPdfreporterEngineFillJRTemplatePrintFrame:printCell];
  [((OrgOssPdfreporterEngineFillJRTemplatePrintFrame *) nil_chk(printCell)) setHeightWithInt:[self getPrintHeight]];
  [self setCellPropertiesWithOrgOssPdfreporterEngineFillJRTemplatePrintFrame:printCell];
  return printCell;
}

- (void)setCellPropertiesWithOrgOssPdfreporterEngineFillJRTemplatePrintFrame:(OrgOssPdfreporterEngineFillJRTemplatePrintFrame *)printCell {
  if (verticalSpan_ > 1) {
    [((OrgOssPdfreporterEngineJRPropertiesMap *) nil_chk([((OrgOssPdfreporterEngineFillJRTemplatePrintFrame *) nil_chk(printCell)) getPropertiesMap])) setPropertyWithNSString:[OrgOssPdfreporterCrosstabsJRCellContents PROPERTY_ROW_SPAN] withNSString:[JavaLangInteger toStringWithInt:verticalSpan_]];
  }
  if (horizontalSpan_ > 1) {
    [((OrgOssPdfreporterEngineJRPropertiesMap *) nil_chk([((OrgOssPdfreporterEngineFillJRTemplatePrintFrame *) nil_chk(printCell)) getPropertiesMap])) setPropertyWithNSString:[OrgOssPdfreporterCrosstabsJRCellContents PROPERTY_COLUMN_SPAN] withNSString:[JavaLangInteger toStringWithInt:horizontalSpan_]];
  }
}

- (OrgOssPdfreporterEngineFillJRTemplateFrame *)getTemplateFrame {
  id<OrgOssPdfreporterEngineJRStyle> style = [self getStyle];
  OrgOssPdfreporterEngineFillJRTemplateFrame *template_ = [((id<JavaUtilMap>) nil_chk(templateFrames_)) getWithId:style];
  if (template_ == nil) {
    template_ = [[OrgOssPdfreporterEngineFillJRTemplateFrame alloc] initWithOrgOssPdfreporterEngineJROrigin:[self getOrigin] withOrgOssPdfreporterEngineJRDefaultStyleProvider:[((OrgOssPdfreporterEngineJasperPrint *) nil_chk([((OrgOssPdfreporterEngineFillJRBaseFiller *) nil_chk(filler_)) getJasperPrint])) getDefaultStyleProvider] withOrgOssPdfreporterEngineFillJRFillCellContents:self];
    [((OrgOssPdfreporterEngineJRPropertiesMap *) nil_chk([template_ getPropertiesMap])) setPropertyWithNSString:[OrgOssPdfreporterCrosstabsJRCellContents PROPERTY_TYPE] withNSString:cellType_];
    template_ = [((OrgOssPdfreporterEngineFillJRFillContext *) nil_chk(((OrgOssPdfreporterEngineFillJRBaseFiller *) nil_chk(filler_)).fillContext)) deduplicateWithId:template_];
    (void) [((id<JavaUtilMap>) nil_chk(templateFrames_)) putWithId:style withId:template_];
  }
  return template_;
}

- (OrgOssPdfreporterEngineJROrigin *)getOrigin {
  return originProvider_ == nil ? nil : [((id<OrgOssPdfreporterEngineFillJROriginProvider>) nil_chk(originProvider_)) getOrigin];
}

- (void)verticallyPositionElementsWithOrgOssPdfreporterEngineFillJRTemplatePrintFrame:(OrgOssPdfreporterEngineFillJRTemplatePrintFrame *)printCell {
  int positionOffset;
  switch ([verticalPositionType_ ordinal]) {
    case OrgOssPdfreporterCrosstabsTypeCrosstabRowPositionEnum_MIDDLE:
    positionOffset = ([self getStretchHeight] - prepareStretchHeight_) / 2;
    break;
    case OrgOssPdfreporterCrosstabsTypeCrosstabRowPositionEnum_BOTTOM:
    positionOffset = [self getStretchHeight] - prepareStretchHeight_;
    break;
    default:
    positionOffset = 0;
    break;
  }
  if (positionOffset != 0) {
    id<JavaUtilList> printElements = [((OrgOssPdfreporterEngineFillJRTemplatePrintFrame *) nil_chk(printCell)) getElements];
    int positionY = [self getStretchHeight] - positionOffset;
    BOOL outside = NO;
    for (id<JavaUtilIterator> it = [((id<JavaUtilList>) nil_chk(printElements)) iterator]; !outside && [((id<JavaUtilIterator>) nil_chk(it)) hasNext]; ) {
      id<OrgOssPdfreporterEngineJRPrintElement> element = [((id<JavaUtilIterator>) nil_chk(it)) next];
      outside = [((id<OrgOssPdfreporterEngineJRPrintElement>) nil_chk(element)) getY] + [((id<OrgOssPdfreporterEngineJRPrintElement>) nil_chk(element)) getHeight] > positionY;
    }
    if (!outside) {
      for (id<JavaUtilIterator> it = [((id<JavaUtilList>) nil_chk(printElements)) iterator]; [((id<JavaUtilIterator>) nil_chk(it)) hasNext]; ) {
        id<OrgOssPdfreporterEngineJRPrintElement> element = [((id<JavaUtilIterator>) nil_chk(it)) next];
        [((id<OrgOssPdfreporterEngineJRPrintElement>) nil_chk(element)) setYWithInt:[((id<OrgOssPdfreporterEngineJRPrintElement>) nil_chk(element)) getY] + positionOffset];
      }
    }
  }
}

- (int)getPrintHeight {
  return [self getStretchHeight] + [self getTopPadding] + [self getBottomPadding];
}

- (void)stretchToWithInt:(int)stretchHeight {
  [self setStretchHeightWithInt:stretchHeight - [self getTopPadding] - [self getBottomPadding]];
}

- (int)getContainerHeight {
  return [self getHeight] - [self getTopPadding] - [self getBottomPadding];
}

- (int)getTopPadding {
  return lineBox_ == nil ? 0 : [((JavaLangInteger *) nil_chk([((id<OrgOssPdfreporterEngineJRLineBox>) nil_chk(lineBox_)) getTopPadding])) intValue];
}

- (int)getBottomPadding {
  return lineBox_ == nil ? 0 : [((JavaLangInteger *) nil_chk([((id<OrgOssPdfreporterEngineJRLineBox>) nil_chk(lineBox_)) getBottomPadding])) intValue];
}

- (id<OrgOssPdfreporterEngineFillJRFillCloneable>)createClone {
  OrgOssPdfreporterEngineFillJRFillCloneFactory *factory = [[OrgOssPdfreporterEngineFillJRFillCloneFactory alloc] init];
  return [self createCloneWithOrgOssPdfreporterEngineFillJRFillCloneFactory:factory];
}

- (id<OrgOssPdfreporterEngineFillJRFillCloneable>)createCloneWithOrgOssPdfreporterEngineFillJRFillCloneFactory:(OrgOssPdfreporterEngineFillJRFillCloneFactory *)factory {
  return [[OrgOssPdfreporterEngineFillJRFillCellContents alloc] initWithOrgOssPdfreporterEngineFillJRFillCellContents:self withOrgOssPdfreporterEngineFillJRFillCloneFactory:factory];
}

- (OrgOssPdfreporterEngineFillJRFillCellContents *)getWorkingClone {
  OrgOssPdfreporterEngineFillJRFillCellContents *clone = (OrgOssPdfreporterEngineFillJRFillCellContents *) [((OrgOssPdfreporterEngineFillJRClonePool *) nil_chk(clonePool_)) getClone];
  ((OrgOssPdfreporterEngineFillJRFillCellContents *) nil_chk(clone)).original = self;
  return clone;
}

- (void)releaseWorkingClone {
  [((OrgOssPdfreporterEngineFillJRClonePool *) nil_chk(((OrgOssPdfreporterEngineFillJRFillCellContents *) nil_chk(original_)).clonePool)) releaseCloneWithId:self];
}

- (void)setXWithInt:(int)x {
  self.x = x;
}

- (void)setYWithInt:(int)y {
  self.y = y;
}

- (int)getVerticalSpan {
  return verticalSpan_;
}

- (void)setVerticalSpanWithInt:(int)span {
  verticalSpan_ = span;
}

- (void)setVerticalPositionTypeWithOrgOssPdfreporterCrosstabsTypeCrosstabRowPositionEnumEnum:(OrgOssPdfreporterCrosstabsTypeCrosstabRowPositionEnumEnum *)positionType {
  self.verticalPositionType = positionType;
}

- (int)getHorizontalSpan {
  return horizontalSpan_;
}

- (void)setHorizontalSpanWithInt:(int)horizontalSpan {
  self.horizontalSpan = horizontalSpan;
}

- (void)evaluateWithChar:(char)evaluation {
  [self evaluateConditionalStylesWithChar:evaluation];
  [super evaluateWithChar:evaluation];
}

- (id<OrgOssPdfreporterEngineJRDefaultStyleProvider>)getDefaultStyleProvider {
  return defaultStyleProvider_;
}

- (id<OrgOssPdfreporterEngineJRStyle>)getStyle {
  id<OrgOssPdfreporterEngineJRStyle> crtStyle = initStyle_;
  BOOL isUsingDefaultStyle = NO;
  if (crtStyle == nil) {
    crtStyle = [((OrgOssPdfreporterEngineFillJRBaseFiller *) nil_chk(filler_)) getDefaultStyle];
    isUsingDefaultStyle = YES;
  }
  id<OrgOssPdfreporterEngineJRStyle> evalStyle = [self getEvaluatedConditionalStyleWithOrgOssPdfreporterEngineJRStyle:crtStyle];
  if (isUsingDefaultStyle && evalStyle == crtStyle) {
    evalStyle = nil;
  }
  return evalStyle;
}

- (void)initConditionalStyles OBJC_METHOD_FAMILY_NONE {
  [super initConditionalStyles];
  [self collectConditionalStyleWithOrgOssPdfreporterEngineJRStyle:initStyle_];
}

- (OrgOssPdfreporterEngineTypeModeEnumEnum *)getModeValue {
  return [((id<OrgOssPdfreporterCrosstabsJRCellContents>) nil_chk(parentCell_)) getModeValue];
}

- (NSString *)getStyleNameReference {
  return nil;
}

- (void)setStyleWithOrgOssPdfreporterEngineJRStyle:(id<OrgOssPdfreporterEngineJRStyle>)style {
  self.initStyle = style;
  [self collectConditionalStyleWithOrgOssPdfreporterEngineJRStyle:style];
}

- (void)setStyleNameReferenceWithNSString:(NSString *)name {
  @throw [[JavaLangUnsupportedOperationException alloc] initWithNSString:@"Style name references not allowed at fill time"];
}

- (id<OrgOssPdfreporterGeometryIColor>)getDefaultLineColor {
  return [((id<OrgOssPdfreporterCrosstabsJRCellContents>) nil_chk(parentCell_)) getDefaultLineColor];
}

- (BOOL)hasProperties {
  return [((id<OrgOssPdfreporterCrosstabsJRCellContents>) nil_chk(parentCell_)) hasProperties];
}

- (OrgOssPdfreporterEngineJRPropertiesMap *)getPropertiesMap {
  return [((id<OrgOssPdfreporterCrosstabsJRCellContents>) nil_chk(parentCell_)) getPropertiesMap];
}

- (id<OrgOssPdfreporterEngineJRPropertiesHolder>)getParentProperties {
  return nil;
}

- (void)copyAllPropertiesTo:(id)copy {
  [super copyAllPropertiesTo:copy];
  OrgOssPdfreporterEngineFillJRFillCellContents *typedCopy = (OrgOssPdfreporterEngineFillJRFillCellContents *) copy;
  typedCopy.transformedContentsCache = transformedContentsCache_;
  typedCopy.boxContentsCache = boxContentsCache_;
  typedCopy.clonePool = clonePool_;
  typedCopy.originProvider = originProvider_;
  typedCopy.elementId = elementId_;
  typedCopy.original = original_;
  typedCopy.parentCell = parentCell_;
  typedCopy.cellType = cellType_;
  typedCopy.lineBox = lineBox_;
  typedCopy.height = height_;
  typedCopy.width = width_;
  typedCopy.x = x_;
  typedCopy.y = y_;
  typedCopy.verticalSpan = verticalSpan_;
  typedCopy.verticalPositionType = verticalPositionType_;
  typedCopy.horizontalSpan = horizontalSpan_;
  typedCopy.templateFrames = templateFrames_;
  typedCopy.defaultStyleProvider = defaultStyleProvider_;
  typedCopy.initStyle = initStyle_;
  typedCopy.prepareStretchHeight = prepareStretchHeight_;
}

@end
@implementation OrgOssPdfreporterEngineFillJRFillCellContents_BoxContents

@synthesize left = left_;
@synthesize right = right_;
@synthesize top = top_;
@synthesize hashCode_ = hashCode__;

- (id)initWithBOOL:(BOOL)left
          withBOOL:(BOOL)right
          withBOOL:(BOOL)top {
  if ((self = [super init])) {
    self.left = left;
    self.right = right;
    self.top = top;
    int hash_ = left ? 1231 : 1237;
    hash_ = 31 * hash_ + (right ? 1231 : 1237);
    hash_ = 31 * hash_ + (top ? 1231 : 1237);
    hashCode__ = hash_;
  }
  return self;
}

- (BOOL)isEqual:(id)obj {
  if (obj == self) {
    return YES;
  }
  OrgOssPdfreporterEngineFillJRFillCellContents_BoxContents *b = (OrgOssPdfreporterEngineFillJRFillCellContents_BoxContents *) obj;
  return ((OrgOssPdfreporterEngineFillJRFillCellContents_BoxContents *) nil_chk(b)).left == left_ && ((OrgOssPdfreporterEngineFillJRFillCellContents_BoxContents *) nil_chk(b)).right == right_ && ((OrgOssPdfreporterEngineFillJRFillCellContents_BoxContents *) nil_chk(b)).top == top_;
}

- (NSUInteger)hash {
  return hashCode__;
}

- (void)copyAllPropertiesTo:(id)copy {
  [super copyAllPropertiesTo:copy];
  OrgOssPdfreporterEngineFillJRFillCellContents_BoxContents *typedCopy = (OrgOssPdfreporterEngineFillJRFillCellContents_BoxContents *) copy;
  typedCopy.left = left_;
  typedCopy.right = right_;
  typedCopy.top = top_;
  typedCopy.hashCode_ = hashCode__;
}

@end
@implementation OrgOssPdfreporterEngineFillJRFillCellContents_StretchedContents

@synthesize newHeight = newHeight_;
@synthesize newWidth = newWidth_;
@synthesize hashCode_ = hashCode__;
@synthesize xPosition = xPosition_;
@synthesize yPosition = yPosition_;

- (id)initWithInt:(int)newWidth
          withInt:(int)newHeight
withOrgOssPdfreporterCrosstabsTypeCrosstabColumnPositionEnumEnum:(OrgOssPdfreporterCrosstabsTypeCrosstabColumnPositionEnumEnum *)xPosition
withOrgOssPdfreporterCrosstabsTypeCrosstabRowPositionEnumEnum:(OrgOssPdfreporterCrosstabsTypeCrosstabRowPositionEnumEnum *)yPosition {
  if ((self = [super init])) {
    self.newHeight = newHeight;
    self.newWidth = newWidth;
    self.xPosition = xPosition;
    self.yPosition = yPosition;
    int hash_ = newHeight;
    hash_ = 31 * hash_ + newWidth;
    hash_ = 31 * hash_ + [((OrgOssPdfreporterCrosstabsTypeCrosstabColumnPositionEnumEnum *) nil_chk(xPosition)) getValue];
    hash_ = 31 * hash_ + [((OrgOssPdfreporterCrosstabsTypeCrosstabRowPositionEnumEnum *) nil_chk(yPosition)) getValue];
    hashCode__ = hash_;
  }
  return self;
}

- (BOOL)isEqual:(id)o {
  if (o == self) {
    return YES;
  }
  OrgOssPdfreporterEngineFillJRFillCellContents_StretchedContents *s = (OrgOssPdfreporterEngineFillJRFillCellContents_StretchedContents *) o;
  return ((OrgOssPdfreporterEngineFillJRFillCellContents_StretchedContents *) nil_chk(s)).newHeight == newHeight_ && ((OrgOssPdfreporterEngineFillJRFillCellContents_StretchedContents *) nil_chk(s)).newWidth == newWidth_ && ((OrgOssPdfreporterEngineFillJRFillCellContents_StretchedContents *) nil_chk(s)).xPosition == xPosition_ && ((OrgOssPdfreporterEngineFillJRFillCellContents_StretchedContents *) nil_chk(s)).yPosition == yPosition_;
}

- (NSUInteger)hash {
  return hashCode__;
}

- (void)copyAllPropertiesTo:(id)copy {
  [super copyAllPropertiesTo:copy];
  OrgOssPdfreporterEngineFillJRFillCellContents_StretchedContents *typedCopy = (OrgOssPdfreporterEngineFillJRFillCellContents_StretchedContents *) copy;
  typedCopy.newHeight = newHeight_;
  typedCopy.newWidth = newWidth_;
  typedCopy.hashCode_ = hashCode__;
  typedCopy.xPosition = xPosition_;
  typedCopy.yPosition = yPosition_;
}

@end
