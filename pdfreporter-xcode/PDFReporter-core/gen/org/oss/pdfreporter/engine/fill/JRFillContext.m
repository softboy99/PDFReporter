//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: pdfreporter-core/src/org/oss/pdfreporter/engine/fill/JRFillContext.java
//
//  Created by kendra on 9/27/13.
//

#include "java/util/ArrayList.h"
#include "java/util/Collection.h"
#include "java/util/HashMap.h"
#include "java/util/Iterator.h"
#include "java/util/List.h"
#include "java/util/Locale.h"
#include "java/util/Map.h"
#include "java/util/TimeZone.h"
#include "java/util/concurrent/atomic/AtomicInteger.h"
#include "org/oss/pdfreporter/data/cache/DataCacheHandler.h"
#include "org/oss/pdfreporter/data/cache/DataRecorder.h"
#include "org/oss/pdfreporter/data/cache/DataSnapshot.h"
#include "org/oss/pdfreporter/engine/Deduplicable.h"
#include "org/oss/pdfreporter/engine/JRPrintImage.h"
#include "org/oss/pdfreporter/engine/JRPrintPage.h"
#include "org/oss/pdfreporter/engine/JRTemplate.h"
#include "org/oss/pdfreporter/engine/JasperReport.h"
#include "org/oss/pdfreporter/engine/JasperReportsContext.h"
#include "org/oss/pdfreporter/engine/ReportContext.h"
#include "org/oss/pdfreporter/engine/fill/FillDatasetPosition.h"
#include "org/oss/pdfreporter/engine/fill/JRBaseFiller.h"
#include "org/oss/pdfreporter/engine/fill/JRFillContext.h"
#include "org/oss/pdfreporter/engine/fill/JRVirtualizationContext.h"
#include "org/oss/pdfreporter/engine/query/JRQueryExecuter.h"
#include "org/oss/pdfreporter/engine/util/DeduplicableRegistry.h"
#include "org/oss/pdfreporter/engine/util/Pair.h"
#include "org/oss/pdfreporter/text/format/factory/IFormatFactory.h"

@implementation OrgOssPdfreporterEngineFillJRFillContext

@synthesize masterFiller = masterFiller_;
@synthesize loadedImages = loadedImages_;
@synthesize loadedSubreports = loadedSubreports_;
@synthesize loadedTemplates = loadedTemplates_;
@synthesize deduplicableRegistry = deduplicableRegistry_;
@synthesize usingVirtualizer = usingVirtualizer_;
@synthesize printPage = printPage_;
@synthesize ignorePagination = ignorePagination_;
@synthesize queryExecuter = queryExecuter_;
@synthesize jasperReportsContext = jasperReportsContext_;
@synthesize reportContext = reportContext_;
@synthesize cacheHandler = cacheHandler_;
@synthesize dataSnapshot = dataSnapshot_;
@synthesize dataRecorder = dataRecorder_;
@synthesize recordedData = recordedData_;
@synthesize virtualizationContext = virtualizationContext_;
@synthesize masterFormatFactory = masterFormatFactory_;
@synthesize masterLocale = masterLocale_;
@synthesize masterTimeZone = masterTimeZone_;
@synthesize canceled = canceled_;
@synthesize fillerIdSeq = fillerIdSeq_;
@synthesize fillElementSeq = fillElementSeq_;
@synthesize fillCaches = fillCaches_;

- (id)initWithOrgOssPdfreporterEngineFillJRBaseFiller:(OrgOssPdfreporterEngineFillJRBaseFiller *)masterFiller {
  if ((self = [super init])) {
    fillerIdSeq_ = [[JavaUtilConcurrentAtomicAtomicInteger alloc] init];
    fillElementSeq_ = [[JavaUtilConcurrentAtomicAtomicInteger alloc] init];
    fillCaches_ = [[JavaUtilHashMap alloc] init];
    self.masterFiller = masterFiller;
    self.jasperReportsContext = [((OrgOssPdfreporterEngineFillJRBaseFiller *) nil_chk(masterFiller)) getJasperReportsContext];
    loadedImages_ = [[JavaUtilHashMap alloc] init];
    loadedSubreports_ = [[JavaUtilHashMap alloc] init];
    loadedTemplates_ = [[JavaUtilHashMap alloc] init];
    deduplicableRegistry_ = [[OrgOssPdfreporterEngineUtilDeduplicableRegistry alloc] init];
  }
  return self;
}

- (OrgOssPdfreporterEngineFillJRBaseFiller *)getMasterFiller {
  return masterFiller_;
}

- (BOOL)hasLoadedImageWithId:(id)source {
  return [((id<JavaUtilMap>) nil_chk(loadedImages_)) containsKeyWithId:source];
}

- (id<OrgOssPdfreporterEngineJRPrintImage>)getLoadedImageWithId:(id)source {
  return [((id<JavaUtilMap>) nil_chk(loadedImages_)) getWithId:source];
}

- (void)registerLoadedImageWithId:(id)source
withOrgOssPdfreporterEngineJRPrintImage:(id<OrgOssPdfreporterEngineJRPrintImage>)image {
  (void) [((id<JavaUtilMap>) nil_chk(loadedImages_)) putWithId:source withId:image];
  if (usingVirtualizer_) {
    [((OrgOssPdfreporterEngineFillJRVirtualizationContext *) nil_chk(virtualizationContext_)) cacheRendererWithOrgOssPdfreporterEngineJRPrintImage:image];
  }
}

- (BOOL)hasLoadedSubreportWithId:(id)source {
  return [((id<JavaUtilMap>) nil_chk(loadedSubreports_)) containsKeyWithId:source];
}

- (OrgOssPdfreporterEngineJasperReport *)getLoadedSubreportWithId:(id)source {
  return [((id<JavaUtilMap>) nil_chk(loadedSubreports_)) getWithId:source];
}

- (void)registerLoadedSubreportWithId:(id)source
withOrgOssPdfreporterEngineJasperReport:(OrgOssPdfreporterEngineJasperReport *)subreport {
  (void) [((id<JavaUtilMap>) nil_chk(loadedSubreports_)) putWithId:source withId:subreport];
}

- (void)setUsingVirtualizerWithBOOL:(BOOL)usingVirtualizer {
  self.usingVirtualizer = usingVirtualizer;
  if (usingVirtualizer && virtualizationContext_ == nil) {
    virtualizationContext_ = [[OrgOssPdfreporterEngineFillJRVirtualizationContext alloc] initWithOrgOssPdfreporterEngineJasperReportsContext:jasperReportsContext_];
  }
}

- (BOOL)isUsingVirtualizer {
  return usingVirtualizer_;
}

- (void)setPrintPageWithOrgOssPdfreporterEngineJRPrintPage:(id<OrgOssPdfreporterEngineJRPrintPage>)page {
  printPage_ = page;
}

- (id<OrgOssPdfreporterEngineJRPrintPage>)getPrintPage {
  return printPage_;
}

- (void)setIgnorePaginationWithBOOL:(BOOL)ignorePagination {
  self.ignorePagination = ignorePagination;
}

- (BOOL)isIgnorePagination {
  return ignorePagination_;
}

- (void)setRunningQueryExecuterWithOrgOssPdfreporterEngineQueryJRQueryExecuter:(id<OrgOssPdfreporterEngineQueryJRQueryExecuter>)queryExecuter {
  @synchronized(self) {
    {
      self.queryExecuter = queryExecuter;
    }
  }
}

- (void)clearRunningQueryExecuter {
  @synchronized(self) {
    {
      self.queryExecuter = nil;
    }
  }
}

- (BOOL)cancelRunningQuery {
  @synchronized(self) {
    {
      if (queryExecuter_ != nil) {
        return [queryExecuter_ cancelQuery];
      }
      return NO;
    }
  }
}

- (void)ensureMasterPageAvailable {
  if (usingVirtualizer_) {
    (void) [((id<OrgOssPdfreporterEngineJRPrintPage>) nil_chk(printPage_)) getElements];
  }
}

- (OrgOssPdfreporterEngineFillJRVirtualizationContext *)getVirtualizationContext {
  return virtualizationContext_;
}

- (id<OrgOssPdfreporterTextFormatFactoryIFormatFactory>)getMasterFormatFactory {
  return masterFormatFactory_;
}

- (void)setMasterFormatFactoryWithOrgOssPdfreporterTextFormatFactoryIFormatFactory:(id<OrgOssPdfreporterTextFormatFactoryIFormatFactory>)masterFormatFactory {
  self.masterFormatFactory = masterFormatFactory;
}

- (JavaUtilLocale *)getMasterLocale {
  return masterLocale_;
}

- (void)setMasterLocaleWithJavaUtilLocale:(JavaUtilLocale *)masterLocale {
  self.masterLocale = masterLocale;
}

- (JavaUtilTimeZone *)getMasterTimeZone {
  return masterTimeZone_;
}

- (void)setMasterTimeZoneWithJavaUtilTimeZone:(JavaUtilTimeZone *)masterTimeZone {
  self.masterTimeZone = masterTimeZone;
}

- (BOOL)hasLoadedTemplateWithId:(id)source {
  return [((id<JavaUtilMap>) nil_chk(loadedTemplates_)) containsKeyWithId:source];
}

- (id<OrgOssPdfreporterEngineJRTemplate>)getLoadedTemplateWithId:(id)source {
  return [((id<JavaUtilMap>) nil_chk(loadedTemplates_)) getWithId:source];
}

- (void)registerLoadedTemplateWithId:(id)source
withOrgOssPdfreporterEngineJRTemplate:(id<OrgOssPdfreporterEngineJRTemplate>)template_ {
  (void) [((id<JavaUtilMap>) nil_chk(loadedTemplates_)) putWithId:source withId:template_];
}

- (id)deduplicateWithId:(id<OrgOssPdfreporterEngineDeduplicable>)object {
  return [((OrgOssPdfreporterEngineUtilDeduplicableRegistry *) nil_chk(deduplicableRegistry_)) deduplicateWithId:object];
}

- (int)generateFillElementId {
  return [((JavaUtilConcurrentAtomicAtomicInteger *) nil_chk(fillElementSeq_)) incrementAndGet];
}

- (int)generatedFillerId {
  return [((JavaUtilConcurrentAtomicAtomicInteger *) nil_chk(fillerIdSeq_)) incrementAndGet];
}

- (id<OrgOssPdfreporterEngineReportContext>)getReportContext {
  return reportContext_;
}

- (void)setReportContextWithOrgOssPdfreporterEngineReportContext:(id<OrgOssPdfreporterEngineReportContext>)reportContext {
  self.reportContext = reportContext;
  self.cacheHandler = (id<OrgOssPdfreporterDataCacheDataCacheHandler>) [self getContextParameterValueWithNSString:[OrgOssPdfreporterDataCacheDataCacheHandler PARAMETER_DATA_CACHE_HANDLER]];
  if (cacheHandler_ != nil) {
    if ([cacheHandler_ isSnapshotPopulated]) {
      dataSnapshot_ = [cacheHandler_ getDataSnapshot];
    }
    else if ([cacheHandler_ isRecordingEnabled]) {
      dataRecorder_ = [cacheHandler_ createDataRecorder];
      recordedData_ = [[JavaUtilArrayList alloc] init];
    }
  }
}

- (id)getContextParameterValueWithNSString:(NSString *)parameterName {
  if (reportContext_ == nil) {
    return nil;
  }
  id value = [((id<OrgOssPdfreporterEngineReportContext>) nil_chk(reportContext_)) getParameterValueWithNSString:parameterName];
  return value;
}

- (id<OrgOssPdfreporterDataCacheDataCacheHandler>)getCacheHandler {
  return cacheHandler_;
}

- (id<OrgOssPdfreporterDataCacheDataSnapshot>)getDataSnapshot {
  return dataSnapshot_;
}

- (BOOL)hasDataSnapshot {
  return dataSnapshot_ != nil;
}

- (id<OrgOssPdfreporterDataCacheDataRecorder>)getDataRecorder {
  return dataRecorder_;
}

- (void)addDataRecordResultWithOrgOssPdfreporterEngineFillFillDatasetPosition:(OrgOssPdfreporterEngineFillFillDatasetPosition *)fillPosition
                                                                       withId:(id)recorded {
  [((id<JavaUtilList>) nil_chk(recordedData_)) addWithId:[[OrgOssPdfreporterEngineUtilPair alloc] initWithId:fillPosition withId:recorded]];
}

- (void)cacheDone {
  if (dataRecorder_ != nil && [((id<OrgOssPdfreporterDataCacheDataRecorder>) nil_chk(dataRecorder_)) isEnabled]) {
    {
      id<JavaUtilIterator> iter__ = [((id<JavaUtilList>) nil_chk(recordedData_)) iterator];
      while ([((id<JavaUtilIterator>) nil_chk(iter__)) hasNext]) {
        OrgOssPdfreporterEngineUtilPair *recorededItem = [((id<JavaUtilIterator>) nil_chk(iter__)) next];
        [((id<OrgOssPdfreporterDataCacheDataRecorder>) nil_chk(dataRecorder_)) addRecordResultWithId:[((OrgOssPdfreporterEngineUtilPair *) nil_chk(recorededItem)) first] withId:[((OrgOssPdfreporterEngineUtilPair *) nil_chk(recorededItem)) second]];
      }
    }
    [((id<OrgOssPdfreporterDataCacheDataRecorder>) nil_chk(dataRecorder_)) setSnapshotPopulated];
  }
}

- (void)markCanceled {
  canceled_ = YES;
}

- (BOOL)isCanceled {
  return canceled_;
}

- (id)getFillCacheWithNSString:(NSString *)key {
  return [((id<JavaUtilMap>) nil_chk(fillCaches_)) getWithId:key];
}

- (void)setFillCacheWithNSString:(NSString *)key
                          withId:(id)value {
  (void) [((id<JavaUtilMap>) nil_chk(fillCaches_)) putWithId:key withId:value];
}

- (void)dispose {
  {
    id<JavaUtilIterator> iter__ = [((id<JavaUtilCollection>) nil_chk([((id<JavaUtilMap>) nil_chk(fillCaches_)) values])) iterator];
    while ([((id<JavaUtilIterator>) nil_chk(iter__)) hasNext]) {
      id cacheObject = [((id<JavaUtilIterator>) nil_chk(iter__)) next];
      if ([cacheObject conformsToProtocol: @protocol(OrgOssPdfreporterEngineFillJRFillContext_FillCacheDisposable)]) {
        [((id<OrgOssPdfreporterEngineFillJRFillContext_FillCacheDisposable>) cacheObject) dispose];
      }
    }
  }
}

- (void)copyAllPropertiesTo:(id)copy {
  [super copyAllPropertiesTo:copy];
  OrgOssPdfreporterEngineFillJRFillContext *typedCopy = (OrgOssPdfreporterEngineFillJRFillContext *) copy;
  typedCopy.masterFiller = masterFiller_;
  typedCopy.loadedImages = loadedImages_;
  typedCopy.loadedSubreports = loadedSubreports_;
  typedCopy.loadedTemplates = loadedTemplates_;
  typedCopy.deduplicableRegistry = deduplicableRegistry_;
  typedCopy.usingVirtualizer = usingVirtualizer_;
  typedCopy.printPage = printPage_;
  typedCopy.ignorePagination = ignorePagination_;
  typedCopy.queryExecuter = queryExecuter_;
  typedCopy.jasperReportsContext = jasperReportsContext_;
  typedCopy.reportContext = reportContext_;
  typedCopy.cacheHandler = cacheHandler_;
  typedCopy.dataSnapshot = dataSnapshot_;
  typedCopy.dataRecorder = dataRecorder_;
  typedCopy.recordedData = recordedData_;
  typedCopy.virtualizationContext = virtualizationContext_;
  typedCopy.masterFormatFactory = masterFormatFactory_;
  typedCopy.masterLocale = masterLocale_;
  typedCopy.masterTimeZone = masterTimeZone_;
  typedCopy.canceled = canceled_;
  typedCopy.fillerIdSeq = fillerIdSeq_;
  typedCopy.fillElementSeq = fillElementSeq_;
  typedCopy.fillCaches = fillCaches_;
}

@end
