//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: pdfreporter-core/src/org/oss/pdfreporter/engine/fill/JRFillObjectFactory.java
//
//  Created by kendra on 9/27/13.
//

#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "java/lang/Integer.h"
#include "java/lang/StringBuffer.h"
#include "java/util/ArrayList.h"
#include "java/util/Collection.h"
#include "java/util/HashMap.h"
#include "java/util/HashSet.h"
#include "java/util/Iterator.h"
#include "java/util/List.h"
#include "java/util/Map.h"
#include "java/util/Set.h"
#include "java/util/logging/Logger.h"
#include "org/oss/pdfreporter/crosstabs/JRCrosstab.h"
#include "org/oss/pdfreporter/crosstabs/JRCrosstabDataset.h"
#include "org/oss/pdfreporter/crosstabs/JRCrosstabParameter.h"
#include "org/oss/pdfreporter/crosstabs/fill/JRFillCrosstabParameter.h"
#include "org/oss/pdfreporter/engine/JRAbstractObjectFactory.h"
#include "org/oss/pdfreporter/engine/JRBand.h"
#include "org/oss/pdfreporter/engine/JRBreak.h"
#include "org/oss/pdfreporter/engine/JRComponentElement.h"
#include "org/oss/pdfreporter/engine/JRConditionalStyle.h"
#include "org/oss/pdfreporter/engine/JRDataset.h"
#include "org/oss/pdfreporter/engine/JRDatasetRun.h"
#include "org/oss/pdfreporter/engine/JRDefaultStyleProvider.h"
#include "org/oss/pdfreporter/engine/JRElementGroup.h"
#include "org/oss/pdfreporter/engine/JREllipse.h"
#include "org/oss/pdfreporter/engine/JRExpression.h"
#include "org/oss/pdfreporter/engine/JRField.h"
#include "org/oss/pdfreporter/engine/JRFrame.h"
#include "org/oss/pdfreporter/engine/JRGenericElement.h"
#include "org/oss/pdfreporter/engine/JRGroup.h"
#include "org/oss/pdfreporter/engine/JRImage.h"
#include "org/oss/pdfreporter/engine/JRLine.h"
#include "org/oss/pdfreporter/engine/JRParameter.h"
#include "org/oss/pdfreporter/engine/JRRectangle.h"
#include "org/oss/pdfreporter/engine/JRReportTemplate.h"
#include "org/oss/pdfreporter/engine/JRRuntimeException.h"
#include "org/oss/pdfreporter/engine/JRSection.h"
#include "org/oss/pdfreporter/engine/JRStaticText.h"
#include "org/oss/pdfreporter/engine/JRStyle.h"
#include "org/oss/pdfreporter/engine/JRStyleContainer.h"
#include "org/oss/pdfreporter/engine/JRStyleSetter.h"
#include "org/oss/pdfreporter/engine/JRSubreport.h"
#include "org/oss/pdfreporter/engine/JRSubreportReturnValue.h"
#include "org/oss/pdfreporter/engine/JRTextField.h"
#include "org/oss/pdfreporter/engine/JRVariable.h"
#include "org/oss/pdfreporter/engine/JasperPrint.h"
#include "org/oss/pdfreporter/engine/base/JRBaseConditionalStyle.h"
#include "org/oss/pdfreporter/engine/base/JRBaseStyle.h"
#include "org/oss/pdfreporter/engine/fill/JRBaseFiller.h"
#include "org/oss/pdfreporter/engine/fill/JRCalculator.h"
#include "org/oss/pdfreporter/engine/fill/JRFillBand.h"
#include "org/oss/pdfreporter/engine/fill/JRFillBreak.h"
#include "org/oss/pdfreporter/engine/fill/JRFillChartDataset.h"
#include "org/oss/pdfreporter/engine/fill/JRFillComponentElement.h"
#include "org/oss/pdfreporter/engine/fill/JRFillContext.h"
#include "org/oss/pdfreporter/engine/fill/JRFillCrosstab.h"
#include "org/oss/pdfreporter/engine/fill/JRFillDataset.h"
#include "org/oss/pdfreporter/engine/fill/JRFillDatasetRun.h"
#include "org/oss/pdfreporter/engine/fill/JRFillElementDataset.h"
#include "org/oss/pdfreporter/engine/fill/JRFillElementGroup.h"
#include "org/oss/pdfreporter/engine/fill/JRFillEllipse.h"
#include "org/oss/pdfreporter/engine/fill/JRFillExpressionEvaluator.h"
#include "org/oss/pdfreporter/engine/fill/JRFillField.h"
#include "org/oss/pdfreporter/engine/fill/JRFillFrame.h"
#include "org/oss/pdfreporter/engine/fill/JRFillGenericElement.h"
#include "org/oss/pdfreporter/engine/fill/JRFillGroup.h"
#include "org/oss/pdfreporter/engine/fill/JRFillImage.h"
#include "org/oss/pdfreporter/engine/fill/JRFillLine.h"
#include "org/oss/pdfreporter/engine/fill/JRFillObjectFactory.h"
#include "org/oss/pdfreporter/engine/fill/JRFillParameter.h"
#include "org/oss/pdfreporter/engine/fill/JRFillRectangle.h"
#include "org/oss/pdfreporter/engine/fill/JRFillReportTemplate.h"
#include "org/oss/pdfreporter/engine/fill/JRFillSection.h"
#include "org/oss/pdfreporter/engine/fill/JRFillStaticText.h"
#include "org/oss/pdfreporter/engine/fill/JRFillSubreport.h"
#include "org/oss/pdfreporter/engine/fill/JRFillSubreportReturnValue.h"
#include "org/oss/pdfreporter/engine/fill/JRFillTextField.h"
#include "org/oss/pdfreporter/engine/fill/JRFillVariable.h"
#include "org/oss/pdfreporter/uses/org/apache/commons/collections/SequencedHashMap.h"

@implementation OrgOssPdfreporterEngineFillJRFillObjectFactory

static JavaUtilLoggingLogger * OrgOssPdfreporterEngineFillJRFillObjectFactory_logger_;

@synthesize filler = filler_;
@synthesize evaluator = evaluator_;
@synthesize parentFiller = parentFiller_;
@synthesize elementDatasets = elementDatasets_;
@synthesize elementDatasetMap = elementDatasetMap_;
@synthesize delayedStyleSettersByName = delayedStyleSettersByName_;
@synthesize originalStyleList = originalStyleList_;
@synthesize stylesMap = stylesMap_;

+ (JavaUtilLoggingLogger *)logger {
  return OrgOssPdfreporterEngineFillJRFillObjectFactory_logger_;
}

- (id)initWithOrgOssPdfreporterEngineFillJRBaseFiller:(OrgOssPdfreporterEngineFillJRBaseFiller *)filler {
  return [self initOrgOssPdfreporterEngineFillJRFillObjectFactoryWithOrgOssPdfreporterEngineFillJRBaseFiller:filler withOrgOssPdfreporterEngineFillJRFillExpressionEvaluator:((OrgOssPdfreporterEngineFillJRBaseFiller *) nil_chk(filler)).calculator];
}

- (id)initOrgOssPdfreporterEngineFillJRFillObjectFactoryWithOrgOssPdfreporterEngineFillJRBaseFiller:(OrgOssPdfreporterEngineFillJRBaseFiller *)filler
                                           withOrgOssPdfreporterEngineFillJRFillExpressionEvaluator:(id<OrgOssPdfreporterEngineFillJRFillExpressionEvaluator>)expressionEvaluator {
  if ((self = [super init])) {
    elementDatasets_ = [[JavaUtilArrayList alloc] init];
    elementDatasetMap_ = [[JavaUtilHashMap alloc] init];
    delayedStyleSettersByName_ = [[JavaUtilHashMap alloc] init];
    stylesMap_ = [[OrgOssPdfreporterEngineFillJRFillObjectFactory_StylesList alloc] init];
    self.filler = filler;
    self.evaluator = expressionEvaluator;
  }
  return self;
}

- (id)initWithOrgOssPdfreporterEngineFillJRBaseFiller:(OrgOssPdfreporterEngineFillJRBaseFiller *)filler
withOrgOssPdfreporterEngineFillJRFillExpressionEvaluator:(id<OrgOssPdfreporterEngineFillJRFillExpressionEvaluator>)expressionEvaluator {
  return [self initOrgOssPdfreporterEngineFillJRFillObjectFactoryWithOrgOssPdfreporterEngineFillJRBaseFiller:filler withOrgOssPdfreporterEngineFillJRFillExpressionEvaluator:expressionEvaluator];
}

- (id)initWithOrgOssPdfreporterEngineFillJRFillObjectFactory:(OrgOssPdfreporterEngineFillJRFillObjectFactory *)parent
    withOrgOssPdfreporterEngineFillJRFillExpressionEvaluator:(id<OrgOssPdfreporterEngineFillJRFillExpressionEvaluator>)expressionEvaluator {
  if ((self = [super init])) {
    elementDatasets_ = [[JavaUtilArrayList alloc] init];
    elementDatasetMap_ = [[JavaUtilHashMap alloc] init];
    delayedStyleSettersByName_ = [[JavaUtilHashMap alloc] init];
    stylesMap_ = [[OrgOssPdfreporterEngineFillJRFillObjectFactory_StylesList alloc] init];
    self.parentFiller = parent;
    self.filler = ((OrgOssPdfreporterEngineFillJRFillObjectFactory *) nil_chk(parent)).filler;
    self.evaluator = expressionEvaluator;
  }
  return self;
}

- (id<OrgOssPdfreporterEngineFillJRFillExpressionEvaluator>)getExpressionEvaluator {
  return evaluator_;
}

- (IOSObjectArray *)getDatasets {
  return [((id<JavaUtilList>) nil_chk(elementDatasets_)) toArrayWithNSObjectArray:[IOSObjectArray arrayWithLength:[((id<JavaUtilList>) nil_chk(elementDatasets_)) size] type:[IOSClass classWithClass:[OrgOssPdfreporterEngineFillJRFillChartDataset class]]]];
}

- (IOSObjectArray *)getElementDatasetsWithOrgOssPdfreporterEngineJRDataset:(id<OrgOssPdfreporterEngineJRDataset>)dataset {
  IOSObjectArray *elementDatasetsArray;
  id<JavaUtilList> elementDatasetsList;
  if ([((id<OrgOssPdfreporterEngineJRDataset>) nil_chk(dataset)) isMainDataset]) {
    elementDatasetsList = elementDatasets_;
  }
  else {
    elementDatasetsList = [((id<JavaUtilMap>) nil_chk(elementDatasetMap_)) getWithId:[((id<OrgOssPdfreporterEngineJRDataset>) nil_chk(dataset)) getName]];
  }
  if (elementDatasetsList == nil || [((id<JavaUtilList>) nil_chk(elementDatasetsList)) size] == 0) {
    elementDatasetsArray = [IOSObjectArray arrayWithLength:0 type:[IOSClass classWithClass:[OrgOssPdfreporterEngineFillJRFillElementDataset class]]];
  }
  else {
    elementDatasetsArray = [IOSObjectArray arrayWithLength:[((id<JavaUtilList>) nil_chk(elementDatasetsList)) size] type:[IOSClass classWithClass:[OrgOssPdfreporterEngineFillJRFillElementDataset class]]];
    (void) [((id<JavaUtilList>) nil_chk(elementDatasetsList)) toArrayWithNSObjectArray:elementDatasetsArray];
  }
  return elementDatasetsArray;
}

- (void)registerDelayedStyleSetterWithOrgOssPdfreporterEngineJRStyleSetter:(id<OrgOssPdfreporterEngineJRStyleSetter>)delayedSetter
                                                              withNSString:(NSString *)styleName {
  if (parentFiller_ == nil) {
    id<JavaUtilList> setters = [((id<JavaUtilMap>) nil_chk(delayedStyleSettersByName_)) getWithId:styleName];
    if (setters == nil) {
      setters = [[JavaUtilArrayList alloc] init];
      (void) [((id<JavaUtilMap>) nil_chk(delayedStyleSettersByName_)) putWithId:styleName withId:setters];
    }
    [((id<JavaUtilList>) nil_chk(setters)) addWithId:delayedSetter];
  }
  else {
    [parentFiller_ registerDelayedStyleSetterWithOrgOssPdfreporterEngineJRStyleSetter:delayedSetter withNSString:styleName];
  }
}

- (void)registerDelayedStyleSetterWithOrgOssPdfreporterEngineJRStyleSetter:(id<OrgOssPdfreporterEngineJRStyleSetter>)delayedSetter
                               withOrgOssPdfreporterEngineJRStyleContainer:(id<OrgOssPdfreporterEngineJRStyleContainer>)styleContainer {
  id<OrgOssPdfreporterEngineJRStyle> style = [((id<OrgOssPdfreporterEngineJRStyleContainer>) nil_chk(styleContainer)) getStyle];
  NSString *nameReference = [((id<OrgOssPdfreporterEngineJRStyleContainer>) nil_chk(styleContainer)) getStyleNameReference];
  if (style != nil) {
    [self registerDelayedStyleSetterWithOrgOssPdfreporterEngineJRStyleSetter:delayedSetter withNSString:[style getName]];
  }
  else if (nameReference != nil) {
    [self registerDelayedStyleSetterWithOrgOssPdfreporterEngineJRStyleSetter:delayedSetter withNSString:nameReference];
  }
}

- (OrgOssPdfreporterEngineBaseJRBaseStyle *)getStyleWithOrgOssPdfreporterEngineJRStyle:(id<OrgOssPdfreporterEngineJRStyle>)style {
  OrgOssPdfreporterEngineBaseJRBaseStyle *fillStyle = nil;
  if (style != nil) {
    fillStyle = (OrgOssPdfreporterEngineBaseJRBaseStyle *) [self getWithId:style];
    if (fillStyle == nil) {
      fillStyle = [[OrgOssPdfreporterEngineBaseJRBaseStyle alloc] initWithOrgOssPdfreporterEngineJRStyle:style withOrgOssPdfreporterEngineJRAbstractObjectFactory:self];
      fillStyle = [((OrgOssPdfreporterEngineFillJRFillContext *) nil_chk(((OrgOssPdfreporterEngineFillJRBaseFiller *) nil_chk(filler_)).fillContext)) deduplicateWithId:fillStyle];
      [self putWithId:style withId:fillStyle];
      if (originalStyleList_ != nil && [((id<JavaUtilSet>) nil_chk(originalStyleList_)) containsWithId:style]) {
        [self renameExistingStyleWithNSString:[((id<OrgOssPdfreporterEngineJRStyle>) nil_chk(style)) getName]];
        [((OrgOssPdfreporterEngineFillJRFillObjectFactory_StylesList *) nil_chk(stylesMap_)) addStyleWithOrgOssPdfreporterEngineJRStyle:style];
      }
    }
  }
  return fillStyle;
}

- (void)renameExistingStyleWithNSString:(NSString *)name {
  id<OrgOssPdfreporterEngineJRStyle> originalStyle = [((OrgOssPdfreporterEngineFillJRFillObjectFactory_StylesList *) nil_chk(stylesMap_)) getStyleWithNSString:name];
  if (originalStyle != nil) {
    OrgOssPdfreporterEngineBaseJRBaseStyle *style = (OrgOssPdfreporterEngineBaseJRBaseStyle *) [self getWithId:originalStyle];
    NSString *newName;
    int suf = 1;
    do {
      newName = [NSString stringWithFormat:@"%@%d", name, suf];
      ++suf;
    }
    while ([((OrgOssPdfreporterEngineFillJRFillObjectFactory_StylesList *) nil_chk(stylesMap_)) containsStyleWithNSString:newName]);
    [((OrgOssPdfreporterEngineBaseJRBaseStyle *) nil_chk(style)) renameWithNSString:newName];
    [((OrgOssPdfreporterEngineFillJRFillObjectFactory_StylesList *) nil_chk(stylesMap_)) renamedWithNSString:name withNSString:newName];
  }
}

- (void)setStyleWithOrgOssPdfreporterEngineJRStyleSetter:(id<OrgOssPdfreporterEngineJRStyleSetter>)setter
             withOrgOssPdfreporterEngineJRStyleContainer:(id<OrgOssPdfreporterEngineJRStyleContainer>)styleContainer {
  id<OrgOssPdfreporterEngineJRStyle> style = [((id<OrgOssPdfreporterEngineJRStyleContainer>) nil_chk(styleContainer)) getStyle];
  NSString *nameReference = [((id<OrgOssPdfreporterEngineJRStyleContainer>) nil_chk(styleContainer)) getStyleNameReference];
  if (style != nil) {
    id<OrgOssPdfreporterEngineJRStyle> newStyle = [self getStyleWithOrgOssPdfreporterEngineJRStyle:style];
    [((id<OrgOssPdfreporterEngineJRStyleSetter>) nil_chk(setter)) setStyleWithOrgOssPdfreporterEngineJRStyle:newStyle];
  }
  else if (nameReference != nil) {
    id<OrgOssPdfreporterEngineJRStyle> originalStyle = [((OrgOssPdfreporterEngineFillJRFillObjectFactory_StylesList *) nil_chk(stylesMap_)) getStyleWithNSString:nameReference];
    if (originalStyle == nil) {
      @throw [[OrgOssPdfreporterEngineJRRuntimeException alloc] initWithNSString:[NSString stringWithFormat:@"Style %@ not found", nameReference]];
    }
    id<OrgOssPdfreporterEngineJRStyle> externalStyle = (id<OrgOssPdfreporterEngineJRStyle>) [self getWithId:originalStyle];
    [((id<OrgOssPdfreporterEngineJRStyleSetter>) nil_chk(setter)) setStyleWithOrgOssPdfreporterEngineJRStyle:externalStyle];
  }
}

- (OrgOssPdfreporterEngineFillJRFillParameter *)getParameterWithOrgOssPdfreporterEngineJRParameter:(id<OrgOssPdfreporterEngineJRParameter>)parameter {
  OrgOssPdfreporterEngineFillJRFillParameter *fillParameter = nil;
  if (parameter != nil) {
    fillParameter = (OrgOssPdfreporterEngineFillJRFillParameter *) [self getWithId:parameter];
    if (fillParameter == nil) {
      fillParameter = [[OrgOssPdfreporterEngineFillJRFillParameter alloc] initWithOrgOssPdfreporterEngineJRParameter:parameter withOrgOssPdfreporterEngineFillJRFillObjectFactory:self];
    }
  }
  return fillParameter;
}

- (OrgOssPdfreporterEngineFillJRFillField *)getFieldWithOrgOssPdfreporterEngineJRField:(id<OrgOssPdfreporterEngineJRField>)field {
  OrgOssPdfreporterEngineFillJRFillField *fillField = nil;
  if (field != nil) {
    fillField = (OrgOssPdfreporterEngineFillJRFillField *) [self getWithId:field];
    if (fillField == nil) {
      fillField = [[OrgOssPdfreporterEngineFillJRFillField alloc] initWithOrgOssPdfreporterEngineJRField:field withOrgOssPdfreporterEngineFillJRAbstractFillObjectFactory:self];
    }
  }
  return fillField;
}

- (OrgOssPdfreporterEngineFillJRFillVariable *)getVariableWithOrgOssPdfreporterEngineJRVariable:(id<OrgOssPdfreporterEngineJRVariable>)variable {
  OrgOssPdfreporterEngineFillJRFillVariable *fillVariable = nil;
  if (variable != nil) {
    fillVariable = (OrgOssPdfreporterEngineFillJRFillVariable *) [self getWithId:variable];
    if (fillVariable == nil) {
      fillVariable = [[OrgOssPdfreporterEngineFillJRFillVariable alloc] initWithOrgOssPdfreporterEngineJRVariable:variable withOrgOssPdfreporterEngineFillJRAbstractFillObjectFactory:self];
    }
  }
  return fillVariable;
}

- (OrgOssPdfreporterEngineFillJRFillGroup *)getGroupWithOrgOssPdfreporterEngineJRGroup:(id<OrgOssPdfreporterEngineJRGroup>)group {
  OrgOssPdfreporterEngineFillJRFillGroup *fillGroup = nil;
  if (group != nil) {
    fillGroup = (OrgOssPdfreporterEngineFillJRFillGroup *) [self getWithId:group];
    if (fillGroup == nil) {
      fillGroup = [[OrgOssPdfreporterEngineFillJRFillGroup alloc] initWithOrgOssPdfreporterEngineJRGroup:group withOrgOssPdfreporterEngineFillJRFillObjectFactory:self];
    }
  }
  return fillGroup;
}

- (OrgOssPdfreporterEngineFillJRFillSection *)getSectionWithOrgOssPdfreporterEngineJRSection:(id<OrgOssPdfreporterEngineJRSection>)section {
  OrgOssPdfreporterEngineFillJRFillSection *fillSection = nil;
  if (section == nil) {
    fillSection = ((OrgOssPdfreporterEngineFillJRBaseFiller *) nil_chk(filler_)).missingFillSection;
  }
  else {
    fillSection = (OrgOssPdfreporterEngineFillJRFillSection *) [self getWithId:section];
    if (fillSection == nil) {
      fillSection = [[OrgOssPdfreporterEngineFillJRFillSection alloc] initWithOrgOssPdfreporterEngineFillJRBaseFiller:filler_ withOrgOssPdfreporterEngineJRSection:section withOrgOssPdfreporterEngineFillJRFillObjectFactory:self];
    }
  }
  return fillSection;
}

- (OrgOssPdfreporterEngineFillJRFillBand *)getBandWithOrgOssPdfreporterEngineJRBand:(id<OrgOssPdfreporterEngineJRBand>)band {
  OrgOssPdfreporterEngineFillJRFillBand *fillBand = nil;
  if (band == nil) {
    fillBand = ((OrgOssPdfreporterEngineFillJRBaseFiller *) nil_chk(filler_)).missingFillBand;
  }
  else {
    fillBand = (OrgOssPdfreporterEngineFillJRFillBand *) [self getWithId:band];
    if (fillBand == nil) {
      fillBand = [[OrgOssPdfreporterEngineFillJRFillBand alloc] initWithOrgOssPdfreporterEngineFillJRBaseFiller:filler_ withOrgOssPdfreporterEngineJRBand:band withOrgOssPdfreporterEngineFillJRFillObjectFactory:self];
    }
  }
  return fillBand;
}

- (void)visitElementGroupWithOrgOssPdfreporterEngineJRElementGroup:(id<OrgOssPdfreporterEngineJRElementGroup>)elementGroup {
  OrgOssPdfreporterEngineFillJRFillElementGroup *fillElementGroup = nil;
  if (elementGroup != nil) {
    fillElementGroup = (OrgOssPdfreporterEngineFillJRFillElementGroup *) [self getWithId:elementGroup];
    if (fillElementGroup == nil) {
      fillElementGroup = [[OrgOssPdfreporterEngineFillJRFillElementGroup alloc] initWithOrgOssPdfreporterEngineJRElementGroup:elementGroup withOrgOssPdfreporterEngineFillJRFillObjectFactory:self];
    }
  }
  [self setVisitResultWithId:fillElementGroup];
}

- (void)visitBreakWithOrgOssPdfreporterEngineJRBreak:(id<OrgOssPdfreporterEngineJRBreak>)breakElement {
  OrgOssPdfreporterEngineFillJRFillBreak *fillBreak = nil;
  if (breakElement != nil) {
    fillBreak = (OrgOssPdfreporterEngineFillJRFillBreak *) [self getWithId:breakElement];
    if (fillBreak == nil) {
      fillBreak = [[OrgOssPdfreporterEngineFillJRFillBreak alloc] initWithOrgOssPdfreporterEngineFillJRBaseFiller:filler_ withOrgOssPdfreporterEngineJRBreak:breakElement withOrgOssPdfreporterEngineFillJRFillObjectFactory:self];
    }
  }
  [self setVisitResultWithId:fillBreak];
}

- (void)visitLineWithOrgOssPdfreporterEngineJRLine:(id<OrgOssPdfreporterEngineJRLine>)line {
  OrgOssPdfreporterEngineFillJRFillLine *fillLine = nil;
  if (line != nil) {
    fillLine = (OrgOssPdfreporterEngineFillJRFillLine *) [self getWithId:line];
    if (fillLine == nil) {
      fillLine = [[OrgOssPdfreporterEngineFillJRFillLine alloc] initWithOrgOssPdfreporterEngineFillJRBaseFiller:filler_ withOrgOssPdfreporterEngineJRLine:line withOrgOssPdfreporterEngineFillJRFillObjectFactory:self];
    }
  }
  [self setVisitResultWithId:fillLine];
}

- (void)visitRectangleWithOrgOssPdfreporterEngineJRRectangle:(id<OrgOssPdfreporterEngineJRRectangle>)rectangle {
  OrgOssPdfreporterEngineFillJRFillRectangle *fillRectangle = nil;
  if (rectangle != nil) {
    fillRectangle = (OrgOssPdfreporterEngineFillJRFillRectangle *) [self getWithId:rectangle];
    if (fillRectangle == nil) {
      fillRectangle = [[OrgOssPdfreporterEngineFillJRFillRectangle alloc] initWithOrgOssPdfreporterEngineFillJRBaseFiller:filler_ withOrgOssPdfreporterEngineJRRectangle:rectangle withOrgOssPdfreporterEngineFillJRFillObjectFactory:self];
    }
  }
  [self setVisitResultWithId:fillRectangle];
}

- (void)visitEllipseWithOrgOssPdfreporterEngineJREllipse:(id<OrgOssPdfreporterEngineJREllipse>)ellipse {
  OrgOssPdfreporterEngineFillJRFillEllipse *fillEllipse = nil;
  if (ellipse != nil) {
    fillEllipse = (OrgOssPdfreporterEngineFillJRFillEllipse *) [self getWithId:ellipse];
    if (fillEllipse == nil) {
      fillEllipse = [[OrgOssPdfreporterEngineFillJRFillEllipse alloc] initWithOrgOssPdfreporterEngineFillJRBaseFiller:filler_ withOrgOssPdfreporterEngineJREllipse:ellipse withOrgOssPdfreporterEngineFillJRFillObjectFactory:self];
    }
  }
  [self setVisitResultWithId:fillEllipse];
}

- (void)visitImageWithOrgOssPdfreporterEngineJRImage:(id<OrgOssPdfreporterEngineJRImage>)image {
  OrgOssPdfreporterEngineFillJRFillImage *fillImage = nil;
  if (image != nil) {
    fillImage = (OrgOssPdfreporterEngineFillJRFillImage *) [self getWithId:image];
    if (fillImage == nil) {
      fillImage = [[OrgOssPdfreporterEngineFillJRFillImage alloc] initWithOrgOssPdfreporterEngineFillJRBaseFiller:filler_ withOrgOssPdfreporterEngineJRImage:image withOrgOssPdfreporterEngineFillJRFillObjectFactory:self];
    }
  }
  [self setVisitResultWithId:fillImage];
}

- (void)visitStaticTextWithOrgOssPdfreporterEngineJRStaticText:(id<OrgOssPdfreporterEngineJRStaticText>)staticText {
  OrgOssPdfreporterEngineFillJRFillStaticText *fillStaticText = nil;
  if (staticText != nil) {
    fillStaticText = (OrgOssPdfreporterEngineFillJRFillStaticText *) [self getWithId:staticText];
    if (fillStaticText == nil) {
      fillStaticText = [[OrgOssPdfreporterEngineFillJRFillStaticText alloc] initWithOrgOssPdfreporterEngineFillJRBaseFiller:filler_ withOrgOssPdfreporterEngineJRStaticText:staticText withOrgOssPdfreporterEngineFillJRFillObjectFactory:self];
    }
  }
  [self setVisitResultWithId:fillStaticText];
}

- (void)visitTextFieldWithOrgOssPdfreporterEngineJRTextField:(id<OrgOssPdfreporterEngineJRTextField>)textField {
  OrgOssPdfreporterEngineFillJRFillTextField *fillTextField = nil;
  if (textField != nil) {
    fillTextField = (OrgOssPdfreporterEngineFillJRFillTextField *) [self getWithId:textField];
    if (fillTextField == nil) {
      fillTextField = [[OrgOssPdfreporterEngineFillJRFillTextField alloc] initWithOrgOssPdfreporterEngineFillJRBaseFiller:filler_ withOrgOssPdfreporterEngineJRTextField:textField withOrgOssPdfreporterEngineFillJRFillObjectFactory:self];
    }
  }
  [self setVisitResultWithId:fillTextField];
}

- (void)visitSubreportWithOrgOssPdfreporterEngineJRSubreport:(id<OrgOssPdfreporterEngineJRSubreport>)subreport {
  OrgOssPdfreporterEngineFillJRFillSubreport *fillSubreport = nil;
  if (subreport != nil) {
    fillSubreport = (OrgOssPdfreporterEngineFillJRFillSubreport *) [self getWithId:subreport];
    if (fillSubreport == nil) {
      fillSubreport = [[OrgOssPdfreporterEngineFillJRFillSubreport alloc] initWithOrgOssPdfreporterEngineFillJRBaseFiller:filler_ withOrgOssPdfreporterEngineJRSubreport:subreport withOrgOssPdfreporterEngineFillJRFillObjectFactory:self];
    }
  }
  [self setVisitResultWithId:fillSubreport];
}

- (OrgOssPdfreporterEngineFillJRFillSubreportReturnValue *)getSubreportReturnValueWithOrgOssPdfreporterEngineJRSubreportReturnValue:(id<OrgOssPdfreporterEngineJRSubreportReturnValue>)returnValue {
  OrgOssPdfreporterEngineFillJRFillSubreportReturnValue *fillReturnValue = nil;
  if (returnValue != nil) {
    fillReturnValue = (OrgOssPdfreporterEngineFillJRFillSubreportReturnValue *) [self getWithId:returnValue];
    if (fillReturnValue == nil) {
      fillReturnValue = [[OrgOssPdfreporterEngineFillJRFillSubreportReturnValue alloc] initWithOrgOssPdfreporterEngineJRSubreportReturnValue:returnValue withOrgOssPdfreporterEngineFillJRFillObjectFactory:self withOrgOssPdfreporterEngineFillJRBaseFiller:filler_];
    }
  }
  return fillReturnValue;
}

- (void)visitCrosstabWithOrgOssPdfreporterCrosstabsJRCrosstab:(id<OrgOssPdfreporterCrosstabsJRCrosstab>)crosstabElement {
  OrgOssPdfreporterEngineFillJRFillCrosstab *fillCrosstab = nil;
  [((JavaUtilLoggingLogger *) nil_chk(OrgOssPdfreporterEngineFillJRFillObjectFactory_logger_)) finestWithNSString:[NSString stringWithFormat:@"Visit Crosstab: %@", crosstabElement]];
  if (crosstabElement != nil) {
    fillCrosstab = (OrgOssPdfreporterEngineFillJRFillCrosstab *) [self getWithId:crosstabElement];
    if (fillCrosstab == nil) {
      fillCrosstab = [[OrgOssPdfreporterEngineFillJRFillCrosstab alloc] initWithOrgOssPdfreporterEngineFillJRBaseFiller:filler_ withOrgOssPdfreporterCrosstabsJRCrosstab:crosstabElement withOrgOssPdfreporterEngineFillJRFillObjectFactory:self];
    }
  }
  [self setVisitResultWithId:fillCrosstab];
}

- (OrgOssPdfreporterEngineFillJRFillCrosstab_JRFillCrosstabDataset *)getCrosstabDatasetWithOrgOssPdfreporterCrosstabsJRCrosstabDataset:(id<OrgOssPdfreporterCrosstabsJRCrosstabDataset>)dataset
                                                                                         withOrgOssPdfreporterEngineFillJRFillCrosstab:(OrgOssPdfreporterEngineFillJRFillCrosstab *)fillCrosstab {
  OrgOssPdfreporterEngineFillJRFillCrosstab_JRFillCrosstabDataset *fillDataset = nil;
  if (dataset != nil) {
    fillDataset = (OrgOssPdfreporterEngineFillJRFillCrosstab_JRFillCrosstabDataset *) [self getWithId:dataset];
    if (fillDataset == nil) {
      fillDataset = [[OrgOssPdfreporterEngineFillJRFillCrosstab_JRFillCrosstabDataset alloc] initWithOrgOssPdfreporterEngineFillJRFillCrosstab:fillCrosstab withOrgOssPdfreporterCrosstabsJRCrosstabDataset:dataset withOrgOssPdfreporterEngineFillJRFillObjectFactory:self];
      [self registerElementDatasetWithOrgOssPdfreporterEngineFillJRFillElementDataset:fillDataset];
    }
  }
  return fillDataset;
}

- (OrgOssPdfreporterEngineFillJRFillDataset *)getDatasetWithOrgOssPdfreporterEngineJRDataset:(id<OrgOssPdfreporterEngineJRDataset>)dataset {
  OrgOssPdfreporterEngineFillJRFillDataset *fillDataset = nil;
  if (dataset != nil) {
    fillDataset = (OrgOssPdfreporterEngineFillJRFillDataset *) [self getWithId:dataset];
    if (fillDataset == nil) {
      fillDataset = [[OrgOssPdfreporterEngineFillJRFillDataset alloc] initWithOrgOssPdfreporterEngineFillJRBaseFiller:filler_ withOrgOssPdfreporterEngineJRDataset:dataset withOrgOssPdfreporterEngineFillJRFillObjectFactory:self];
    }
  }
  return fillDataset;
}

- (void)registerElementDatasetWithOrgOssPdfreporterEngineFillJRFillElementDataset:(OrgOssPdfreporterEngineFillJRFillElementDataset *)elementDataset {
  id<JavaUtilList> elementDatasetsList;
  id<OrgOssPdfreporterEngineJRDatasetRun> datasetRun = [((OrgOssPdfreporterEngineFillJRFillElementDataset *) nil_chk(elementDataset)) getDatasetRun];
  if (datasetRun == nil) {
    elementDatasetsList = elementDatasets_;
  }
  else {
    NSString *datasetName = [datasetRun getDatasetName];
    elementDatasetsList = [((id<JavaUtilMap>) nil_chk(elementDatasetMap_)) getWithId:datasetName];
    if (elementDatasetsList == nil) {
      elementDatasetsList = [[JavaUtilArrayList alloc] init];
      (void) [((id<JavaUtilMap>) nil_chk(elementDatasetMap_)) putWithId:datasetName withId:elementDatasetsList];
    }
  }
  [((id<JavaUtilList>) nil_chk(elementDatasetsList)) addWithId:elementDataset];
}

- (OrgOssPdfreporterEngineFillJRFillDatasetRun *)getDatasetRunWithOrgOssPdfreporterEngineJRDatasetRun:(id<OrgOssPdfreporterEngineJRDatasetRun>)datasetRun {
  OrgOssPdfreporterEngineFillJRFillDatasetRun *fillDatasetRun = nil;
  if (datasetRun != nil) {
    fillDatasetRun = (OrgOssPdfreporterEngineFillJRFillDatasetRun *) [self getWithId:datasetRun];
    if (fillDatasetRun == nil) {
      fillDatasetRun = [[OrgOssPdfreporterEngineFillJRFillDatasetRun alloc] initWithOrgOssPdfreporterEngineFillJRBaseFiller:filler_ withOrgOssPdfreporterEngineJRDatasetRun:datasetRun withOrgOssPdfreporterEngineFillJRFillObjectFactory:self];
    }
  }
  return fillDatasetRun;
}

- (OrgOssPdfreporterCrosstabsFillJRFillCrosstabParameter *)getCrosstabParameterWithOrgOssPdfreporterCrosstabsJRCrosstabParameter:(id<OrgOssPdfreporterCrosstabsJRCrosstabParameter>)parameter {
  OrgOssPdfreporterCrosstabsFillJRFillCrosstabParameter *fillParameter = nil;
  if (parameter != nil) {
    fillParameter = (OrgOssPdfreporterCrosstabsFillJRFillCrosstabParameter *) [self getWithId:parameter];
    if (fillParameter == nil) {
      fillParameter = [[OrgOssPdfreporterCrosstabsFillJRFillCrosstabParameter alloc] initWithOrgOssPdfreporterCrosstabsJRCrosstabParameter:parameter withOrgOssPdfreporterEngineFillJRFillObjectFactory:self];
    }
  }
  return fillParameter;
}

- (void)visitFrameWithOrgOssPdfreporterEngineJRFrame:(id<OrgOssPdfreporterEngineJRFrame>)frame {
  id fillFrame = nil;
  if (frame != nil) {
    fillFrame = [self getWithId:frame];
    if (fillFrame == nil) {
      fillFrame = [[OrgOssPdfreporterEngineFillJRFillFrame alloc] initWithOrgOssPdfreporterEngineFillJRBaseFiller:filler_ withOrgOssPdfreporterEngineJRFrame:frame withOrgOssPdfreporterEngineFillJRFillObjectFactory:self];
    }
  }
  [self setVisitResultWithId:fillFrame];
}

- (OrgOssPdfreporterEngineFillJRBaseFiller *)getFiller {
  return filler_;
}

- (id<OrgOssPdfreporterEngineJRConditionalStyle>)getConditionalStyleWithOrgOssPdfreporterEngineJRConditionalStyle:(id<OrgOssPdfreporterEngineJRConditionalStyle>)conditionalStyle
                                                                               withOrgOssPdfreporterEngineJRStyle:(id<OrgOssPdfreporterEngineJRStyle>)style {
  OrgOssPdfreporterEngineBaseJRBaseConditionalStyle *baseConditionalStyle = nil;
  if (conditionalStyle != nil) {
    baseConditionalStyle = (OrgOssPdfreporterEngineBaseJRBaseConditionalStyle *) [self getWithId:conditionalStyle];
    if (baseConditionalStyle == nil) {
      baseConditionalStyle = [[OrgOssPdfreporterEngineBaseJRBaseConditionalStyle alloc] initWithOrgOssPdfreporterEngineJRConditionalStyle:conditionalStyle withOrgOssPdfreporterEngineJRStyle:style withOrgOssPdfreporterEngineJRAbstractObjectFactory:self];
      [self putWithId:conditionalStyle withId:baseConditionalStyle];
    }
  }
  return baseConditionalStyle;
}

- (id<OrgOssPdfreporterEngineJRExpression>)getExpressionWithOrgOssPdfreporterEngineJRExpression:(id<OrgOssPdfreporterEngineJRExpression>)expression
                                                                                       withBOOL:(BOOL)assignNotUsedId {
  return expression;
}

- (OrgOssPdfreporterEngineFillJRFillReportTemplate *)getReportTemplateWithOrgOssPdfreporterEngineJRReportTemplate:(id<OrgOssPdfreporterEngineJRReportTemplate>)template_ {
  OrgOssPdfreporterEngineFillJRFillReportTemplate *fillTemplate = nil;
  if (template_ != nil) {
    fillTemplate = (OrgOssPdfreporterEngineFillJRFillReportTemplate *) [self getWithId:template_];
    if (fillTemplate == nil) {
      fillTemplate = [[OrgOssPdfreporterEngineFillJRFillReportTemplate alloc] initWithOrgOssPdfreporterEngineJRReportTemplate:template_ withOrgOssPdfreporterEngineFillJRBaseFiller:filler_ withOrgOssPdfreporterEngineFillJRFillObjectFactory:self];
    }
  }
  return fillTemplate;
}

- (id<JavaUtilList>)setStylesWithJavaUtilList:(id<JavaUtilList>)styles {
  originalStyleList_ = [[JavaUtilHashSet alloc] initWithJavaUtilCollection:styles];
  id<JavaUtilSet> requestedStyles = [self collectRequestedStylesWithJavaUtilList:styles];
  id<JavaUtilMap> usedStylesMap = [[OrgOssPdfreporterUsesOrgApacheCommonsCollectionsSequencedHashMap alloc] init];
  id<JavaUtilMap> allStylesMap = [[JavaUtilHashMap alloc] init];
  for (id<JavaUtilIterator> it = [((id<JavaUtilList>) nil_chk(styles)) iterator]; [((id<JavaUtilIterator>) nil_chk(it)) hasNext]; ) {
    id<OrgOssPdfreporterEngineJRStyle> style = [((id<JavaUtilIterator>) nil_chk(it)) next];
    if ([((id<JavaUtilSet>) nil_chk(requestedStyles)) containsWithId:style]) {
      [self collectUsedStylesWithOrgOssPdfreporterEngineJRStyle:style withJavaUtilMap:usedStylesMap withJavaUtilMap:allStylesMap];
    }
    (void) [((id<JavaUtilMap>) nil_chk(allStylesMap)) putWithId:[((id<OrgOssPdfreporterEngineJRStyle>) nil_chk(style)) getName] withId:style];
  }
  id<JavaUtilList> includedStyles = [[JavaUtilArrayList alloc] init];
  for (id<JavaUtilIterator> it = [((id<JavaUtilSet>) nil_chk([((id<JavaUtilMap>) nil_chk(usedStylesMap)) keySet])) iterator]; [((id<JavaUtilIterator>) nil_chk(it)) hasNext]; ) {
    id<OrgOssPdfreporterEngineJRStyle> style = [((id<JavaUtilIterator>) nil_chk(it)) next];
    id<OrgOssPdfreporterEngineJRStyle> newStyle = [self getStyleWithOrgOssPdfreporterEngineJRStyle:style];
    [((id<JavaUtilList>) nil_chk(includedStyles)) addWithId:newStyle];
    if ([((id<JavaUtilSet>) nil_chk(requestedStyles)) containsWithId:style]) {
      [self useDelayedStyleWithOrgOssPdfreporterEngineJRStyle:newStyle];
    }
  }
  [self checkUnresolvedReferences];
  return includedStyles;
}

- (id<JavaUtilSet>)collectRequestedStylesWithJavaUtilList:(id<JavaUtilList>)externalStyles {
  id<JavaUtilMap> requestedStylesMap = [[JavaUtilHashMap alloc] init];
  for (id<JavaUtilIterator> it = [((id<JavaUtilList>) nil_chk(externalStyles)) iterator]; [((id<JavaUtilIterator>) nil_chk(it)) hasNext]; ) {
    id<OrgOssPdfreporterEngineJRStyle> style = [((id<JavaUtilIterator>) nil_chk(it)) next];
    NSString *name = [((id<OrgOssPdfreporterEngineJRStyle>) nil_chk(style)) getName];
    if ([((id<JavaUtilMap>) nil_chk(delayedStyleSettersByName_)) containsKeyWithId:name]) {
      (void) [((id<JavaUtilMap>) nil_chk(requestedStylesMap)) putWithId:name withId:style];
    }
  }
  return [[JavaUtilHashSet alloc] initWithJavaUtilCollection:[((id<JavaUtilMap>) nil_chk(requestedStylesMap)) values]];
}

- (void)collectUsedStylesWithOrgOssPdfreporterEngineJRStyle:(id<OrgOssPdfreporterEngineJRStyle>)style
                                            withJavaUtilMap:(id<JavaUtilMap>)usedStylesMap
                                            withJavaUtilMap:(id<JavaUtilMap>)allStylesMap {
  if (![((id<JavaUtilMap>) nil_chk(usedStylesMap)) containsKeyWithId:style] && [((id<JavaUtilSet>) nil_chk(originalStyleList_)) containsWithId:style]) {
    id<OrgOssPdfreporterEngineJRStyle> parent = [((id<OrgOssPdfreporterEngineJRStyle>) nil_chk(style)) getStyle];
    if (parent == nil) {
      NSString *parentName = [((id<OrgOssPdfreporterEngineJRStyle>) nil_chk(style)) getStyleNameReference];
      if (parentName != nil) {
        parent = [((id<JavaUtilMap>) nil_chk(allStylesMap)) getWithId:parentName];
        if (parent == nil) {
          @throw [[OrgOssPdfreporterEngineJRRuntimeException alloc] initWithNSString:[NSString stringWithFormat:@"Style %@ not found", parentName]];
        }
      }
    }
    if (parent != nil) {
      [self collectUsedStylesWithOrgOssPdfreporterEngineJRStyle:parent withJavaUtilMap:usedStylesMap withJavaUtilMap:allStylesMap];
    }
    (void) [((id<JavaUtilMap>) nil_chk(usedStylesMap)) putWithId:style withId:nil];
  }
}

- (void)useDelayedStyleWithOrgOssPdfreporterEngineJRStyle:(id<OrgOssPdfreporterEngineJRStyle>)style {
  id<JavaUtilList> delayedSetters = [((id<JavaUtilMap>) nil_chk(delayedStyleSettersByName_)) removeWithId:[((id<OrgOssPdfreporterEngineJRStyle>) nil_chk(style)) getName]];
  if (delayedSetters != nil) {
    for (id<JavaUtilIterator> it = [delayedSetters iterator]; [((id<JavaUtilIterator>) nil_chk(it)) hasNext]; ) {
      id<OrgOssPdfreporterEngineJRStyleSetter> setter = [((id<JavaUtilIterator>) nil_chk(it)) next];
      [((id<OrgOssPdfreporterEngineJRStyleSetter>) nil_chk(setter)) setStyleWithOrgOssPdfreporterEngineJRStyle:style];
    }
  }
}

- (void)checkUnresolvedReferences {
  if (![((id<JavaUtilMap>) nil_chk(delayedStyleSettersByName_)) isEmpty]) {
    JavaLangStringBuffer *errorMsg = [[JavaLangStringBuffer alloc] initWithNSString:@"Could not resolve style(s): "];
    for (id<JavaUtilIterator> it = [((id<JavaUtilSet>) nil_chk([((id<JavaUtilMap>) nil_chk(delayedStyleSettersByName_)) keySet])) iterator]; [((id<JavaUtilIterator>) nil_chk(it)) hasNext]; ) {
      NSString *name = [((id<JavaUtilIterator>) nil_chk(it)) next];
      (void) [((JavaLangStringBuffer *) nil_chk(errorMsg)) appendWithNSString:name];
      (void) [((JavaLangStringBuffer *) nil_chk(errorMsg)) appendWithNSString:@", "];
    }
    @throw [[OrgOssPdfreporterEngineJRRuntimeException alloc] initWithNSString:[((JavaLangStringBuffer *) nil_chk(errorMsg)) substringWithInt:0 withInt:[((JavaLangStringBuffer *) nil_chk(errorMsg)) sequenceLength] - 2]];
  }
}

- (id<OrgOssPdfreporterEngineJRDefaultStyleProvider>)getDefaultStyleProvider {
  return [((OrgOssPdfreporterEngineJasperPrint *) nil_chk([((OrgOssPdfreporterEngineFillJRBaseFiller *) nil_chk(filler_)) getJasperPrint])) getDefaultStyleProvider];
}

- (void)visitComponentElementWithOrgOssPdfreporterEngineJRComponentElement:(id<OrgOssPdfreporterEngineJRComponentElement>)componentElement {
  OrgOssPdfreporterEngineFillJRFillComponentElement *fill = nil;
  if (componentElement != nil) {
    fill = (OrgOssPdfreporterEngineFillJRFillComponentElement *) [self getWithId:componentElement];
    if (fill == nil) {
      fill = [[OrgOssPdfreporterEngineFillJRFillComponentElement alloc] initWithOrgOssPdfreporterEngineFillJRBaseFiller:filler_ withOrgOssPdfreporterEngineJRComponentElement:componentElement withOrgOssPdfreporterEngineFillJRFillObjectFactory:self];
    }
  }
  [self setVisitResultWithId:fill];
}

- (void)visitGenericElementWithOrgOssPdfreporterEngineJRGenericElement:(id<OrgOssPdfreporterEngineJRGenericElement>)element {
  OrgOssPdfreporterEngineFillJRFillGenericElement *fill = nil;
  if (element != nil) {
    fill = (OrgOssPdfreporterEngineFillJRFillGenericElement *) [self getWithId:element];
    if (fill == nil) {
      fill = [[OrgOssPdfreporterEngineFillJRFillGenericElement alloc] initWithOrgOssPdfreporterEngineFillJRBaseFiller:filler_ withOrgOssPdfreporterEngineJRGenericElement:element withOrgOssPdfreporterEngineFillJRFillObjectFactory:self];
    }
  }
  [self setVisitResultWithId:fill];
}

+ (void)initialize {
  if (self == [OrgOssPdfreporterEngineFillJRFillObjectFactory class]) {
    OrgOssPdfreporterEngineFillJRFillObjectFactory_logger_ = [JavaUtilLoggingLogger getLoggerWithNSString:[[IOSClass classWithClass:[OrgOssPdfreporterEngineFillJRFillObjectFactory class]] getName]];
  }
}

- (void)copyAllPropertiesTo:(id)copy {
  [super copyAllPropertiesTo:copy];
  OrgOssPdfreporterEngineFillJRFillObjectFactory *typedCopy = (OrgOssPdfreporterEngineFillJRFillObjectFactory *) copy;
  typedCopy.filler = filler_;
  typedCopy.evaluator = evaluator_;
  typedCopy.parentFiller = parentFiller_;
  typedCopy.elementDatasets = elementDatasets_;
  typedCopy.elementDatasetMap = elementDatasetMap_;
  typedCopy.delayedStyleSettersByName = delayedStyleSettersByName_;
  typedCopy.originalStyleList = originalStyleList_;
  typedCopy.stylesMap = stylesMap_;
}

@end
@implementation OrgOssPdfreporterEngineFillJRFillObjectFactory_StylesList

@synthesize styles = styles_;
@synthesize stylesIdx = stylesIdx_;

- (BOOL)containsStyleWithNSString:(NSString *)name {
  return [((id<JavaUtilMap>) nil_chk(stylesIdx_)) containsKeyWithId:name];
}

- (id<OrgOssPdfreporterEngineJRStyle>)getStyleWithNSString:(NSString *)name {
  JavaLangInteger *idx = [((id<JavaUtilMap>) nil_chk(stylesIdx_)) getWithId:name];
  return idx == nil ? nil : [((id<JavaUtilList>) nil_chk(styles_)) getWithInt:[((JavaLangInteger *) nil_chk(idx)) intValue]];
}

- (void)addStyleWithOrgOssPdfreporterEngineJRStyle:(id<OrgOssPdfreporterEngineJRStyle>)style {
  [((id<JavaUtilList>) nil_chk(styles_)) addWithId:style];
  (void) [((id<JavaUtilMap>) nil_chk(stylesIdx_)) putWithId:[((id<OrgOssPdfreporterEngineJRStyle>) nil_chk(style)) getName] withId:[JavaLangInteger valueOfWithInt:[((id<JavaUtilList>) nil_chk(styles_)) size] - 1]];
}

- (void)renamedWithNSString:(NSString *)oldName
               withNSString:(NSString *)newName {
  JavaLangInteger *idx = [((id<JavaUtilMap>) nil_chk(stylesIdx_)) removeWithId:oldName];
  (void) [((id<JavaUtilMap>) nil_chk(stylesIdx_)) putWithId:newName withId:idx];
}

- (id)init {
  if ((self = [super init])) {
    styles_ = [[JavaUtilArrayList alloc] init];
    stylesIdx_ = [[JavaUtilHashMap alloc] init];
  }
  return self;
}

- (void)copyAllPropertiesTo:(id)copy {
  [super copyAllPropertiesTo:copy];
  OrgOssPdfreporterEngineFillJRFillObjectFactory_StylesList *typedCopy = (OrgOssPdfreporterEngineFillJRFillObjectFactory_StylesList *) copy;
  typedCopy.styles = styles_;
  typedCopy.stylesIdx = stylesIdx_;
}

@end
