//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: pdfreporter-core/src/org/oss/pdfreporter/engine/fill/JRIncrementerFactoryCache.java
//
//  Created by kendra on 9/27/13.
//

#include "IOSClass.h"
#include "java/lang/IllegalAccessException.h"
#include "java/lang/InstantiationException.h"
#include "java/util/Map.h"
#include "org/oss/pdfreporter/engine/JRRuntimeException.h"
#include "org/oss/pdfreporter/engine/fill/JRIncrementerFactory.h"
#include "org/oss/pdfreporter/engine/fill/JRIncrementerFactoryCache.h"
#include "org/oss/pdfreporter/uses/org/apache/commons/collections/ReferenceMap.h"

@implementation OrgOssPdfreporterEngineFillJRIncrementerFactoryCache

static id<JavaUtilMap> OrgOssPdfreporterEngineFillJRIncrementerFactoryCache_factoriesMap_;

+ (id<JavaUtilMap>)factoriesMap {
  return OrgOssPdfreporterEngineFillJRIncrementerFactoryCache_factoriesMap_;
}

+ (void)setFactoriesMap:(id<JavaUtilMap>)factoriesMap {
  OrgOssPdfreporterEngineFillJRIncrementerFactoryCache_factoriesMap_ = factoriesMap;
}

+ (id<OrgOssPdfreporterEngineFillJRIncrementerFactory>)getInstanceWithIOSClass:(IOSClass *)factoryClass {
  @synchronized([self class]) {
    {
      id<OrgOssPdfreporterEngineFillJRIncrementerFactory> incrementerFactory = [((id<JavaUtilMap>) nil_chk(OrgOssPdfreporterEngineFillJRIncrementerFactoryCache_factoriesMap_)) getWithId:factoryClass];
      if (incrementerFactory == nil) {
        @try {
          incrementerFactory = (id<OrgOssPdfreporterEngineFillJRIncrementerFactory>) [((IOSClass *) nil_chk(factoryClass)) newInstance];
        }
        @catch (JavaLangInstantiationException *e) {
          @throw [[OrgOssPdfreporterEngineJRRuntimeException alloc] initWithJavaLangThrowable:e];
        }
        @catch (JavaLangIllegalAccessException *e) {
          @throw [[OrgOssPdfreporterEngineJRRuntimeException alloc] initWithJavaLangThrowable:e];
        }
        (void) [((id<JavaUtilMap>) nil_chk(OrgOssPdfreporterEngineFillJRIncrementerFactoryCache_factoriesMap_)) putWithId:factoryClass withId:incrementerFactory];
      }
      return incrementerFactory;
    }
  }
}

- (id)init {
  return [super init];
}

+ (void)initialize {
  if (self == [OrgOssPdfreporterEngineFillJRIncrementerFactoryCache class]) {
    OrgOssPdfreporterEngineFillJRIncrementerFactoryCache_factoriesMap_ = [[OrgOssPdfreporterUsesOrgApacheCommonsCollectionsReferenceMap alloc] initWithInt:OrgOssPdfreporterUsesOrgApacheCommonsCollectionsReferenceMap_WEAK withInt:OrgOssPdfreporterUsesOrgApacheCommonsCollectionsReferenceMap_HARD];
  }
}

@end
