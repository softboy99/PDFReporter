//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: pdfreporter-core/src/org/oss/pdfreporter/engine/fill/JRFillDataset.java
//
//  Created by kendra on 9/27/13.
//

#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "java/lang/Boolean.h"
#include "java/lang/Integer.h"
#include "java/lang/System.h"
#include "java/lang/UnsupportedOperationException.h"
#include "java/util/ArrayList.h"
#include "java/util/HashMap.h"
#include "java/util/HashSet.h"
#include "java/util/Iterator.h"
#include "java/util/List.h"
#include "java/util/Locale.h"
#include "java/util/Map.h"
#include "java/util/Set.h"
#include "java/util/TimeZone.h"
#include "org/oss/pdfreporter/data/cache/CachedDataset.h"
#include "org/oss/pdfreporter/data/cache/DataCacheHandler.h"
#include "org/oss/pdfreporter/data/cache/DataRecorder.h"
#include "org/oss/pdfreporter/data/cache/DataSnapshot.h"
#include "org/oss/pdfreporter/data/cache/DataSnapshotException.h"
#include "org/oss/pdfreporter/data/cache/DatasetRecorder.h"
#include "org/oss/pdfreporter/engine/DatasetFilter.h"
#include "org/oss/pdfreporter/engine/DefaultJasperReportsContext.h"
#include "org/oss/pdfreporter/engine/EvaluationType.h"
#include "org/oss/pdfreporter/engine/JRAbstractScriptlet.h"
#include "org/oss/pdfreporter/engine/JRDataSource.h"
#include "org/oss/pdfreporter/engine/JRDataset.h"
#include "org/oss/pdfreporter/engine/JRDefaultScriptlet.h"
#include "org/oss/pdfreporter/engine/JRExpression.h"
#include "org/oss/pdfreporter/engine/JRField.h"
#include "org/oss/pdfreporter/engine/JRGroup.h"
#include "org/oss/pdfreporter/engine/JRParameter.h"
#include "org/oss/pdfreporter/engine/JRPropertiesHolder.h"
#include "org/oss/pdfreporter/engine/JRPropertiesMap.h"
#include "org/oss/pdfreporter/engine/JRPropertiesUtil.h"
#include "org/oss/pdfreporter/engine/JRQuery.h"
#include "org/oss/pdfreporter/engine/JRRuntimeException.h"
#include "org/oss/pdfreporter/engine/JRVariable.h"
#include "org/oss/pdfreporter/engine/JasperCompileManager.h"
#include "org/oss/pdfreporter/engine/JasperReport.h"
#include "org/oss/pdfreporter/engine/JasperReportsContext.h"
#include "org/oss/pdfreporter/engine/ParameterContributor.h"
#include "org/oss/pdfreporter/engine/ParameterContributorContext.h"
#include "org/oss/pdfreporter/engine/ParameterContributorFactory.h"
#include "org/oss/pdfreporter/engine/data/IndexedDataSource.h"
#include "org/oss/pdfreporter/engine/design/JRDesignVariable.h"
#include "org/oss/pdfreporter/engine/fill/DatasetSortUtil.h"
#include "org/oss/pdfreporter/engine/fill/FillDatasetPosition.h"
#include "org/oss/pdfreporter/engine/fill/IJRFillParameter.h"
#include "org/oss/pdfreporter/engine/fill/JRBaseFiller.h"
#include "org/oss/pdfreporter/engine/fill/JRCalculable.h"
#include "org/oss/pdfreporter/engine/fill/JRCalculator.h"
#include "org/oss/pdfreporter/engine/fill/JRDistinctCountIncrementerFactory.h"
#include "org/oss/pdfreporter/engine/fill/JREvaluator.h"
#include "org/oss/pdfreporter/engine/fill/JRFillContext.h"
#include "org/oss/pdfreporter/engine/fill/JRFillDataset.h"
#include "org/oss/pdfreporter/engine/fill/JRFillDatasetScriptlet.h"
#include "org/oss/pdfreporter/engine/fill/JRFillElementDataset.h"
#include "org/oss/pdfreporter/engine/fill/JRFillField.h"
#include "org/oss/pdfreporter/engine/fill/JRFillGroup.h"
#include "org/oss/pdfreporter/engine/fill/JRFillObjectFactory.h"
#include "org/oss/pdfreporter/engine/fill/JRFillParameter.h"
#include "org/oss/pdfreporter/engine/fill/JRFillVariable.h"
#include "org/oss/pdfreporter/engine/fill/SortedDataSource.h"
#include "org/oss/pdfreporter/engine/query/JRQueryExecuter.h"
#include "org/oss/pdfreporter/engine/query/QueryExecuterFactory.h"
#include "org/oss/pdfreporter/engine/scriptlets/ScriptletFactory.h"
#include "org/oss/pdfreporter/engine/scriptlets/ScriptletFactoryContext.h"
#include "org/oss/pdfreporter/engine/type/CalculationEnum.h"
#include "org/oss/pdfreporter/engine/type/IncrementTypeEnum.h"
#include "org/oss/pdfreporter/engine/type/ResetTypeEnum.h"
#include "org/oss/pdfreporter/engine/type/WhenResourceMissingTypeEnum.h"
#include "org/oss/pdfreporter/engine/util/DigestUtils.h"
#include "org/oss/pdfreporter/engine/util/JRQueryExecuterUtils.h"
#include "org/oss/pdfreporter/engine/util/MD5Digest.h"
#include "org/oss/pdfreporter/sql/IConnection.h"
#include "org/oss/pdfreporter/uses/java/util/UUID.h"

@implementation OrgOssPdfreporterEngineFillJRFillDataset

@synthesize filler = filler_;
@synthesize jasperReportsContext = jasperReportsContext_;
@synthesize parent = parent_;
@synthesize isMain = isMain_;
@synthesize query = query_;
@synthesize useDatasourceParamValue = useDatasourceParamValue_;
@synthesize useConnectionParamValue = useConnectionParamValue_;
@synthesize parameters = parameters_;
@synthesize parametersMap = parametersMap_;
@synthesize fields = fields_;
@synthesize fieldsMap = fieldsMap_;
@synthesize variables = variables_;
@synthesize variablesMap = variablesMap_;
@synthesize variableCalculationReqs = variableCalculationReqs_;
@synthesize elementDatasets = elementDatasets_;
@synthesize origElementDatasets = origElementDatasets_;
@synthesize groups = groups_;
@synthesize resourceBundleBaseName = resourceBundleBaseName_;
@synthesize whenResourceMissingType = whenResourceMissingType_;
@synthesize scriptletClassName = scriptletClassName_;
@synthesize scriptlets = scriptlets_;
@synthesize delegateScriptlet = delegateScriptlet_;
@synthesize dataSource = dataSource_;
@synthesize locale = locale_;
@synthesize timeZone = timeZone_;
@synthesize reportCount = reportCount_;
@synthesize calculator = calculator_;
@synthesize reportMaxCount = reportMaxCount_;
@synthesize queryExecuter = queryExecuter_;
@synthesize parameterContributors = parameterContributors_;
@synthesize filter = filter_;
@synthesize fillPosition = fillPosition_;
@synthesize dataRecorder = dataRecorder_;
@synthesize cacheRecordIndexCallbacks = cacheRecordIndexCallbacks_;
@synthesize cacheSkipped = cacheSkipped_;
@synthesize cachedDataset = cachedDataset_;
@synthesize sortedDataSource = sortedDataSource_;
@synthesize ended = ended_;
@synthesize cacheRecordCount = cacheRecordCount_;
@synthesize previousCacheRecordIndex = previousCacheRecordIndex_;
@synthesize currentCacheRecordIndex = currentCacheRecordIndex_;

- (id)initWithOrgOssPdfreporterEngineFillJRBaseFiller:(OrgOssPdfreporterEngineFillJRBaseFiller *)filler
                 withOrgOssPdfreporterEngineJRDataset:(id<OrgOssPdfreporterEngineJRDataset>)dataset
   withOrgOssPdfreporterEngineFillJRFillObjectFactory:(OrgOssPdfreporterEngineFillJRFillObjectFactory *)factory {
  if ((self = [super init])) {
    delegateScriptlet_ = [[OrgOssPdfreporterEngineFillJRFillDatasetScriptlet alloc] initWithOrgOssPdfreporterEngineFillJRFillDataset:self];
    [((OrgOssPdfreporterEngineFillJRFillObjectFactory *) nil_chk(factory)) putWithId:dataset withId:self];
    self.filler = filler;
    self.parent = dataset;
    self.isMain = [((id<OrgOssPdfreporterEngineJRDataset>) nil_chk(dataset)) isMainDataset];
    scriptletClassName_ = [((id<OrgOssPdfreporterEngineJRDataset>) nil_chk(dataset)) getScriptletClass];
    resourceBundleBaseName_ = [((id<OrgOssPdfreporterEngineJRDataset>) nil_chk(dataset)) getResourceBundle];
    whenResourceMissingType_ = [((id<OrgOssPdfreporterEngineJRDataset>) nil_chk(dataset)) getWhenResourceMissingTypeValue];
    query_ = [((id<OrgOssPdfreporterEngineJRDataset>) nil_chk(dataset)) getQuery];
    [self setParametersWithOrgOssPdfreporterEngineJRDataset:dataset withOrgOssPdfreporterEngineFillJRFillObjectFactory:factory];
    [self setFieldsWithOrgOssPdfreporterEngineJRDataset:dataset withOrgOssPdfreporterEngineFillJRFillObjectFactory:factory];
    [self setVariablesWithOrgOssPdfreporterEngineJRDataset:dataset withOrgOssPdfreporterEngineFillJRFillObjectFactory:factory];
    [self setGroupsWithOrgOssPdfreporterEngineJRDataset:dataset withOrgOssPdfreporterEngineFillJRFillObjectFactory:factory];
  }
  return self;
}

- (void)setParametersWithOrgOssPdfreporterEngineJRDataset:(id<OrgOssPdfreporterEngineJRDataset>)dataset
       withOrgOssPdfreporterEngineFillJRFillObjectFactory:(OrgOssPdfreporterEngineFillJRFillObjectFactory *)factory {
  IOSObjectArray *jrParameters = [((id<OrgOssPdfreporterEngineJRDataset>) nil_chk(dataset)) getParameters];
  if (jrParameters != nil && (int) [((IOSObjectArray *) nil_chk(jrParameters)) count] > 0) {
    parameters_ = [IOSObjectArray arrayWithLength:(int) [((IOSObjectArray *) nil_chk(jrParameters)) count] type:[IOSClass classWithClass:[OrgOssPdfreporterEngineFillJRFillParameter class]]];
    parametersMap_ = [[JavaUtilHashMap alloc] init];
    for (int i = 0; i < (int) [((IOSObjectArray *) nil_chk(parameters_)) count]; i++) {
      (void) [((IOSObjectArray *) nil_chk(parameters_)) replaceObjectAtIndex:i withObject:[((OrgOssPdfreporterEngineFillJRFillObjectFactory *) nil_chk(factory)) getParameterWithOrgOssPdfreporterEngineJRParameter:[((IOSObjectArray *) nil_chk(jrParameters)) objectAtIndex:i]]];
      (void) [((id<JavaUtilMap>) nil_chk(parametersMap_)) putWithId:[((OrgOssPdfreporterEngineFillJRFillParameter *) nil_chk([((IOSObjectArray *) nil_chk(parameters_)) objectAtIndex:i])) getName] withId:[((IOSObjectArray *) nil_chk(parameters_)) objectAtIndex:i]];
    }
  }
}

- (void)setGroupsWithOrgOssPdfreporterEngineJRDataset:(id<OrgOssPdfreporterEngineJRDataset>)dataset
   withOrgOssPdfreporterEngineFillJRFillObjectFactory:(OrgOssPdfreporterEngineFillJRFillObjectFactory *)factory {
  IOSObjectArray *jrGroups = [((id<OrgOssPdfreporterEngineJRDataset>) nil_chk(dataset)) getGroups];
  if (jrGroups != nil && (int) [((IOSObjectArray *) nil_chk(jrGroups)) count] > 0) {
    groups_ = [IOSObjectArray arrayWithLength:(int) [((IOSObjectArray *) nil_chk(jrGroups)) count] type:[IOSClass classWithClass:[OrgOssPdfreporterEngineFillJRFillGroup class]]];
    for (int i = 0; i < (int) [((IOSObjectArray *) nil_chk(groups_)) count]; i++) {
      (void) [((IOSObjectArray *) nil_chk(groups_)) replaceObjectAtIndex:i withObject:[((OrgOssPdfreporterEngineFillJRFillObjectFactory *) nil_chk(factory)) getGroupWithOrgOssPdfreporterEngineJRGroup:[((IOSObjectArray *) nil_chk(jrGroups)) objectAtIndex:i]]];
    }
  }
}

- (void)setVariablesWithOrgOssPdfreporterEngineJRDataset:(id<OrgOssPdfreporterEngineJRDataset>)dataset
      withOrgOssPdfreporterEngineFillJRFillObjectFactory:(OrgOssPdfreporterEngineFillJRFillObjectFactory *)factory {
  IOSObjectArray *jrVariables = [((id<OrgOssPdfreporterEngineJRDataset>) nil_chk(dataset)) getVariables];
  if (jrVariables != nil && (int) [((IOSObjectArray *) nil_chk(jrVariables)) count] > 0) {
    id<JavaUtilList> variableList = [[JavaUtilArrayList alloc] initWithInt:(int) [((IOSObjectArray *) nil_chk(jrVariables)) count] * 3];
    variablesMap_ = [[JavaUtilHashMap alloc] init];
    for (int i = 0; i < (int) [((IOSObjectArray *) nil_chk(jrVariables)) count]; i++) {
      (void) [self addVariableWithOrgOssPdfreporterEngineJRVariable:[((IOSObjectArray *) nil_chk(jrVariables)) objectAtIndex:i] withJavaUtilList:variableList withOrgOssPdfreporterEngineFillJRFillObjectFactory:factory];
    }
    [self setVariablesWithJavaUtilList:variableList];
  }
}

- (OrgOssPdfreporterEngineFillJRFillVariable *)addVariableWithOrgOssPdfreporterEngineJRVariable:(id<OrgOssPdfreporterEngineJRVariable>)parentVariable
                                                                               withJavaUtilList:(id<JavaUtilList>)variableList
                                             withOrgOssPdfreporterEngineFillJRFillObjectFactory:(OrgOssPdfreporterEngineFillJRFillObjectFactory *)factory {
  OrgOssPdfreporterEngineFillJRFillVariable *variable = [((OrgOssPdfreporterEngineFillJRFillObjectFactory *) nil_chk(factory)) getVariableWithOrgOssPdfreporterEngineJRVariable:parentVariable];
  OrgOssPdfreporterEngineTypeCalculationEnumEnum *calculation = [((OrgOssPdfreporterEngineFillJRFillVariable *) nil_chk(variable)) getCalculationValue];
  switch ([calculation ordinal]) {
    case OrgOssPdfreporterEngineTypeCalculationEnum_AVERAGE:
    case OrgOssPdfreporterEngineTypeCalculationEnum_VARIANCE:
    {
      id<OrgOssPdfreporterEngineJRVariable> countVar = [self createHelperVariableWithOrgOssPdfreporterEngineJRVariable:parentVariable withNSString:@"_COUNT" withOrgOssPdfreporterEngineTypeCalculationEnumEnum:[OrgOssPdfreporterEngineTypeCalculationEnumEnum COUNT]];
      OrgOssPdfreporterEngineFillJRFillVariable *fillCountVar = [self addVariableWithOrgOssPdfreporterEngineJRVariable:countVar withJavaUtilList:variableList withOrgOssPdfreporterEngineFillJRFillObjectFactory:factory];
      (void) [((OrgOssPdfreporterEngineFillJRFillVariable *) nil_chk(variable)) setHelperVariableWithOrgOssPdfreporterEngineFillJRFillVariable:fillCountVar withChar:OrgOssPdfreporterEngineFillJRCalculable_HELPER_COUNT];
      id<OrgOssPdfreporterEngineJRVariable> sumVar = [self createHelperVariableWithOrgOssPdfreporterEngineJRVariable:parentVariable withNSString:@"_SUM" withOrgOssPdfreporterEngineTypeCalculationEnumEnum:[OrgOssPdfreporterEngineTypeCalculationEnumEnum SUM]];
      OrgOssPdfreporterEngineFillJRFillVariable *fillSumVar = [self addVariableWithOrgOssPdfreporterEngineJRVariable:sumVar withJavaUtilList:variableList withOrgOssPdfreporterEngineFillJRFillObjectFactory:factory];
      (void) [((OrgOssPdfreporterEngineFillJRFillVariable *) nil_chk(variable)) setHelperVariableWithOrgOssPdfreporterEngineFillJRFillVariable:fillSumVar withChar:OrgOssPdfreporterEngineFillJRCalculable_HELPER_SUM];
      break;
    }
    case OrgOssPdfreporterEngineTypeCalculationEnum_STANDARD_DEVIATION:
    {
      id<OrgOssPdfreporterEngineJRVariable> varianceVar = [self createHelperVariableWithOrgOssPdfreporterEngineJRVariable:parentVariable withNSString:@"_VARIANCE" withOrgOssPdfreporterEngineTypeCalculationEnumEnum:[OrgOssPdfreporterEngineTypeCalculationEnumEnum VARIANCE]];
      OrgOssPdfreporterEngineFillJRFillVariable *fillVarianceVar = [self addVariableWithOrgOssPdfreporterEngineJRVariable:varianceVar withJavaUtilList:variableList withOrgOssPdfreporterEngineFillJRFillObjectFactory:factory];
      (void) [((OrgOssPdfreporterEngineFillJRFillVariable *) nil_chk(variable)) setHelperVariableWithOrgOssPdfreporterEngineFillJRFillVariable:fillVarianceVar withChar:OrgOssPdfreporterEngineFillJRCalculable_HELPER_VARIANCE];
      break;
    }
    case OrgOssPdfreporterEngineTypeCalculationEnum_DISTINCT_COUNT:
    {
      id<OrgOssPdfreporterEngineJRVariable> countVar = [self createDistinctCountHelperVariableWithOrgOssPdfreporterEngineJRVariable:parentVariable];
      OrgOssPdfreporterEngineFillJRFillVariable *fillCountVar = [self addVariableWithOrgOssPdfreporterEngineJRVariable:countVar withJavaUtilList:variableList withOrgOssPdfreporterEngineFillJRFillObjectFactory:factory];
      (void) [((OrgOssPdfreporterEngineFillJRFillVariable *) nil_chk(variable)) setHelperVariableWithOrgOssPdfreporterEngineFillJRFillVariable:fillCountVar withChar:OrgOssPdfreporterEngineFillJRCalculable_HELPER_COUNT];
      break;
    }
  }
  [((id<JavaUtilList>) nil_chk(variableList)) addWithId:variable];
  return variable;
}

- (id<OrgOssPdfreporterEngineJRVariable>)createHelperVariableWithOrgOssPdfreporterEngineJRVariable:(id<OrgOssPdfreporterEngineJRVariable>)variable
                                                                                      withNSString:(NSString *)nameSuffix
                                                withOrgOssPdfreporterEngineTypeCalculationEnumEnum:(OrgOssPdfreporterEngineTypeCalculationEnumEnum *)calculation {
  OrgOssPdfreporterEngineDesignJRDesignVariable *helper = [[OrgOssPdfreporterEngineDesignJRDesignVariable alloc] init];
  [((OrgOssPdfreporterEngineDesignJRDesignVariable *) nil_chk(helper)) setNameWithNSString:[NSString stringWithFormat:@"%@%@", [((id<OrgOssPdfreporterEngineJRVariable>) nil_chk(variable)) getName], nameSuffix]];
  [((OrgOssPdfreporterEngineDesignJRDesignVariable *) nil_chk(helper)) setValueClassNameWithNSString:[((id<OrgOssPdfreporterEngineJRVariable>) nil_chk(variable)) getValueClassName]];
  [((OrgOssPdfreporterEngineDesignJRDesignVariable *) nil_chk(helper)) setIncrementerFactoryClassNameWithNSString:[((id<OrgOssPdfreporterEngineJRVariable>) nil_chk(variable)) getIncrementerFactoryClassName]];
  [((OrgOssPdfreporterEngineDesignJRDesignVariable *) nil_chk(helper)) setResetTypeWithOrgOssPdfreporterEngineTypeResetTypeEnumEnum:[((id<OrgOssPdfreporterEngineJRVariable>) nil_chk(variable)) getResetTypeValue]];
  [((OrgOssPdfreporterEngineDesignJRDesignVariable *) nil_chk(helper)) setResetGroupWithOrgOssPdfreporterEngineJRGroup:[((id<OrgOssPdfreporterEngineJRVariable>) nil_chk(variable)) getResetGroup]];
  [((OrgOssPdfreporterEngineDesignJRDesignVariable *) nil_chk(helper)) setIncrementTypeWithOrgOssPdfreporterEngineTypeIncrementTypeEnumEnum:[((id<OrgOssPdfreporterEngineJRVariable>) nil_chk(variable)) getIncrementTypeValue]];
  [((OrgOssPdfreporterEngineDesignJRDesignVariable *) nil_chk(helper)) setIncrementGroupWithOrgOssPdfreporterEngineJRGroup:[((id<OrgOssPdfreporterEngineJRVariable>) nil_chk(variable)) getIncrementGroup]];
  [((OrgOssPdfreporterEngineDesignJRDesignVariable *) nil_chk(helper)) setCalculationWithOrgOssPdfreporterEngineTypeCalculationEnumEnum:calculation];
  [((OrgOssPdfreporterEngineDesignJRDesignVariable *) nil_chk(helper)) setSystemDefinedWithBOOL:YES];
  [((OrgOssPdfreporterEngineDesignJRDesignVariable *) nil_chk(helper)) setExpressionWithOrgOssPdfreporterEngineJRExpression:[((id<OrgOssPdfreporterEngineJRVariable>) nil_chk(variable)) getExpression]];
  return helper;
}

- (id<OrgOssPdfreporterEngineJRVariable>)createDistinctCountHelperVariableWithOrgOssPdfreporterEngineJRVariable:(id<OrgOssPdfreporterEngineJRVariable>)variable {
  OrgOssPdfreporterEngineDesignJRDesignVariable *helper = [[OrgOssPdfreporterEngineDesignJRDesignVariable alloc] init];
  [((OrgOssPdfreporterEngineDesignJRDesignVariable *) nil_chk(helper)) setNameWithNSString:[NSString stringWithFormat:@"%@_DISTINCT_COUNT", [((id<OrgOssPdfreporterEngineJRVariable>) nil_chk(variable)) getName]]];
  [((OrgOssPdfreporterEngineDesignJRDesignVariable *) nil_chk(helper)) setValueClassNameWithNSString:[((id<OrgOssPdfreporterEngineJRVariable>) nil_chk(variable)) getValueClassName]];
  [((OrgOssPdfreporterEngineDesignJRDesignVariable *) nil_chk(helper)) setIncrementerFactoryClassNameWithNSString:[[IOSClass classWithClass:[OrgOssPdfreporterEngineFillJRDistinctCountIncrementerFactory class]] getName]];
  [((OrgOssPdfreporterEngineDesignJRDesignVariable *) nil_chk(helper)) setResetTypeWithOrgOssPdfreporterEngineTypeResetTypeEnumEnum:[OrgOssPdfreporterEngineTypeResetTypeEnumEnum REPORT]];
  if ([((id<OrgOssPdfreporterEngineJRVariable>) nil_chk(variable)) getIncrementTypeValue] != [OrgOssPdfreporterEngineTypeIncrementTypeEnumEnum NONE]) {
    [((OrgOssPdfreporterEngineDesignJRDesignVariable *) nil_chk(helper)) setResetTypeWithOrgOssPdfreporterEngineTypeResetTypeEnumEnum:[OrgOssPdfreporterEngineTypeResetTypeEnumEnum getByValueWithChar:[((OrgOssPdfreporterEngineTypeIncrementTypeEnumEnum *) nil_chk([((id<OrgOssPdfreporterEngineJRVariable>) nil_chk(variable)) getIncrementTypeValue])) getValue]]];
  }
  [((OrgOssPdfreporterEngineDesignJRDesignVariable *) nil_chk(helper)) setResetGroupWithOrgOssPdfreporterEngineJRGroup:[((id<OrgOssPdfreporterEngineJRVariable>) nil_chk(variable)) getIncrementGroup]];
  [((OrgOssPdfreporterEngineDesignJRDesignVariable *) nil_chk(helper)) setCalculationWithOrgOssPdfreporterEngineTypeCalculationEnumEnum:[OrgOssPdfreporterEngineTypeCalculationEnumEnum NOTHING]];
  [((OrgOssPdfreporterEngineDesignJRDesignVariable *) nil_chk(helper)) setSystemDefinedWithBOOL:YES];
  [((OrgOssPdfreporterEngineDesignJRDesignVariable *) nil_chk(helper)) setExpressionWithOrgOssPdfreporterEngineJRExpression:[((id<OrgOssPdfreporterEngineJRVariable>) nil_chk(variable)) getExpression]];
  return helper;
}

- (void)setVariablesWithJavaUtilList:(id<JavaUtilList>)variableList {
  variables_ = [IOSObjectArray arrayWithLength:[((id<JavaUtilList>) nil_chk(variableList)) size] type:[IOSClass classWithClass:[OrgOssPdfreporterEngineFillJRFillVariable class]]];
  variables_ = [((id<JavaUtilList>) nil_chk(variableList)) toArrayWithNSObjectArray:variables_];
  for (int i = 0; i < (int) [((IOSObjectArray *) nil_chk(variables_)) count]; i++) {
    (void) [((id<JavaUtilMap>) nil_chk(variablesMap_)) putWithId:[((OrgOssPdfreporterEngineFillJRFillVariable *) nil_chk([((IOSObjectArray *) nil_chk(variables_)) objectAtIndex:i])) getName] withId:[((IOSObjectArray *) nil_chk(variables_)) objectAtIndex:i]];
  }
}

- (void)setFieldsWithOrgOssPdfreporterEngineJRDataset:(id<OrgOssPdfreporterEngineJRDataset>)dataset
   withOrgOssPdfreporterEngineFillJRFillObjectFactory:(OrgOssPdfreporterEngineFillJRFillObjectFactory *)factory {
  IOSObjectArray *jrFields = [((id<OrgOssPdfreporterEngineJRDataset>) nil_chk(dataset)) getFields];
  if (jrFields != nil && (int) [((IOSObjectArray *) nil_chk(jrFields)) count] > 0) {
    fields_ = [IOSObjectArray arrayWithLength:(int) [((IOSObjectArray *) nil_chk(jrFields)) count] type:[IOSClass classWithClass:[OrgOssPdfreporterEngineFillJRFillField class]]];
    fieldsMap_ = [[JavaUtilHashMap alloc] init];
    for (int i = 0; i < (int) [((IOSObjectArray *) nil_chk(fields_)) count]; i++) {
      (void) [((IOSObjectArray *) nil_chk(fields_)) replaceObjectAtIndex:i withObject:[((OrgOssPdfreporterEngineFillJRFillObjectFactory *) nil_chk(factory)) getFieldWithOrgOssPdfreporterEngineJRField:[((IOSObjectArray *) nil_chk(jrFields)) objectAtIndex:i]]];
      (void) [((id<JavaUtilMap>) nil_chk(fieldsMap_)) putWithId:[((OrgOssPdfreporterEngineFillJRFillField *) nil_chk([((IOSObjectArray *) nil_chk(fields_)) objectAtIndex:i])) getName] withId:[((IOSObjectArray *) nil_chk(fields_)) objectAtIndex:i]];
    }
  }
}

- (void)createCalculatorWithOrgOssPdfreporterEngineJasperReport:(OrgOssPdfreporterEngineJasperReport *)jasperReport {
  [self setCalculatorWithOrgOssPdfreporterEngineFillJRCalculator:[OrgOssPdfreporterEngineFillJRFillDataset createCalculatorWithOrgOssPdfreporterEngineJasperReportsContext:[self getJasperReportsContext] withOrgOssPdfreporterEngineJasperReport:jasperReport withOrgOssPdfreporterEngineJRDataset:self]];
}

- (void)setCalculatorWithOrgOssPdfreporterEngineFillJRCalculator:(OrgOssPdfreporterEngineFillJRCalculator *)calculator {
  self.calculator = calculator;
}

+ (OrgOssPdfreporterEngineFillJRCalculator *)createCalculatorWithOrgOssPdfreporterEngineJasperReportsContext:(id<OrgOssPdfreporterEngineJasperReportsContext>)jasperReportsContext
                                                                     withOrgOssPdfreporterEngineJasperReport:(OrgOssPdfreporterEngineJasperReport *)jasperReport
                                                                        withOrgOssPdfreporterEngineJRDataset:(id<OrgOssPdfreporterEngineJRDataset>)dataset {
  OrgOssPdfreporterEngineFillJREvaluator *evaluator = (OrgOssPdfreporterEngineFillJREvaluator *) [((OrgOssPdfreporterEngineJasperCompileManager *) nil_chk([OrgOssPdfreporterEngineJasperCompileManager getInstanceWithOrgOssPdfreporterEngineJasperReportsContext:jasperReportsContext])) getEvaluatorWithOrgOssPdfreporterEngineJasperReport:jasperReport withOrgOssPdfreporterEngineJRDataset:dataset];
  return [[OrgOssPdfreporterEngineFillJRCalculator alloc] initWithOrgOssPdfreporterEngineFillJREvaluator:evaluator];
}

- (void)initCalculator OBJC_METHOD_FAMILY_NONE {
  [((OrgOssPdfreporterEngineFillJRCalculator *) nil_chk(calculator_)) init__WithOrgOssPdfreporterEngineFillJRFillDataset:self];
}

- (void)inheritFromMain {
  if (resourceBundleBaseName_ == nil && !isMain_) {
    resourceBundleBaseName_ = ((OrgOssPdfreporterEngineFillJRFillDataset *) nil_chk(((OrgOssPdfreporterEngineFillJRBaseFiller *) nil_chk(filler_)).mainDataset)).resourceBundleBaseName;
    whenResourceMissingType_ = ((OrgOssPdfreporterEngineFillJRFillDataset *) nil_chk(((OrgOssPdfreporterEngineFillJRBaseFiller *) nil_chk(filler_)).mainDataset)).whenResourceMissingType;
  }
}

- (id<JavaUtilList>)createScriptletsWithJavaUtilMap:(id<JavaUtilMap>)parameterValues {
  OrgOssPdfreporterEngineScriptletsScriptletFactoryContext *context = [[OrgOssPdfreporterEngineScriptletsScriptletFactoryContext alloc] initWithOrgOssPdfreporterEngineJasperReportsContext:[self getJasperReportsContext] withOrgOssPdfreporterEngineJRDataset:self withJavaUtilMap:parameterValues];
  scriptlets_ = [[JavaUtilArrayList alloc] init];
  id<JavaUtilList> factories = [((id<OrgOssPdfreporterEngineJasperReportsContext>) nil_chk([self getJasperReportsContext])) getExtensionsWithIOSClass:[IOSClass classWithProtocol:@protocol(OrgOssPdfreporterEngineScriptletsScriptletFactory)]];
  for (id<JavaUtilIterator> it = [((id<JavaUtilList>) nil_chk(factories)) iterator]; [((id<JavaUtilIterator>) nil_chk(it)) hasNext]; ) {
    id<OrgOssPdfreporterEngineScriptletsScriptletFactory> factory = [((id<JavaUtilIterator>) nil_chk(it)) next];
    id<JavaUtilList> tmpScriptlets = [((id<OrgOssPdfreporterEngineScriptletsScriptletFactory>) nil_chk(factory)) getScripletsWithOrgOssPdfreporterEngineScriptletsScriptletFactoryContext:context];
    if (tmpScriptlets != nil) {
      [((id<JavaUtilList>) nil_chk(scriptlets_)) addAllWithJavaUtilCollection:tmpScriptlets];
    }
  }
  if ([((id<JavaUtilList>) nil_chk(scriptlets_)) size] == 0) {
    [((id<JavaUtilList>) nil_chk(scriptlets_)) addWithInt:0 withId:[[OrgOssPdfreporterEngineJRDefaultScriptlet alloc] init]];
  }
  return scriptlets_;
}

- (void)initElementDatasetsWithOrgOssPdfreporterEngineFillJRFillObjectFactory:(OrgOssPdfreporterEngineFillJRFillObjectFactory *)factory OBJC_METHOD_FAMILY_NONE {
  elementDatasets_ = [((OrgOssPdfreporterEngineFillJRFillObjectFactory *) nil_chk(factory)) getElementDatasetsWithOrgOssPdfreporterEngineJRDataset:self];
}

- (void)filterElementDatasetsWithOrgOssPdfreporterEngineFillJRFillElementDataset:(OrgOssPdfreporterEngineFillJRFillElementDataset *)elementDataset {
  origElementDatasets_ = elementDatasets_;
  elementDatasets_ = [IOSObjectArray arrayWithObjects:(id[]){ elementDataset } count:1 type:[IOSClass classWithClass:[OrgOssPdfreporterEngineFillJRFillElementDataset class]]];
}

- (void)restoreElementDatasets {
  if (origElementDatasets_ != nil) {
    elementDatasets_ = origElementDatasets_;
    origElementDatasets_ = nil;
  }
}

- (void)setParameterValuesWithJavaUtilMap:(id<JavaUtilMap>)parameterValues {
  (void) [((id<JavaUtilMap>) nil_chk(parameterValues)) putWithId:[OrgOssPdfreporterEngineJRParameter REPORT_PARAMETERS_MAP] withId:parameterValues];
  if (filler_ != nil) {
    (void) [((id<JavaUtilMap>) nil_chk(parameterValues)) putWithId:[OrgOssPdfreporterEngineJRParameter JASPER_REPORT] withId:[filler_ getJasperReport]];
  }
  reportMaxCount_ = (JavaLangInteger *) [((id<JavaUtilMap>) nil_chk(parameterValues)) getWithId:[OrgOssPdfreporterEngineJRParameter REPORT_MAX_COUNT]];
  locale_ = (JavaUtilLocale *) [((id<JavaUtilMap>) nil_chk(parameterValues)) getWithId:[OrgOssPdfreporterEngineJRParameter REPORT_LOCALE]];
  if (locale_ == nil) {
    locale_ = [JavaUtilLocale getDefault];
    (void) [((id<JavaUtilMap>) nil_chk(parameterValues)) putWithId:[OrgOssPdfreporterEngineJRParameter REPORT_LOCALE] withId:locale_];
  }
  timeZone_ = (JavaUtilTimeZone *) [((id<JavaUtilMap>) nil_chk(parameterValues)) getWithId:[OrgOssPdfreporterEngineJRParameter REPORT_TIME_ZONE]];
  if (timeZone_ == nil) {
    timeZone_ = [JavaUtilTimeZone getDefault];
    (void) [((id<JavaUtilMap>) nil_chk(parameterValues)) putWithId:[OrgOssPdfreporterEngineJRParameter REPORT_TIME_ZONE] withId:timeZone_];
  }
  scriptlets_ = [self createScriptletsWithJavaUtilMap:parameterValues];
  [((OrgOssPdfreporterEngineJRAbstractScriptlet *) nil_chk(delegateScriptlet_)) setDataWithJavaUtilMap:parametersMap_ withJavaUtilMap:fieldsMap_ withJavaUtilMap:variablesMap_ withOrgOssPdfreporterEngineFillJRFillGroupArray:groups_];
  [self contributeParametersWithJavaUtilMap:parameterValues];
  filter_ = (id<OrgOssPdfreporterEngineDatasetFilter>) [((id<JavaUtilMap>) nil_chk(parameterValues)) getWithId:[OrgOssPdfreporterEngineJRParameter FILTER]];
  [self cacheInit];
  [self setFillParameterValuesWithJavaUtilMap:parameterValues];
  [self cacheInitRecording];
  if (filter_ != nil) {
    [filter_ init__WithOrgOssPdfreporterEngineFillDatasetFillContext:self];
  }
}

- (void)initDatasource OBJC_METHOD_FAMILY_NONE {
  queryExecuter_ = nil;
  dataSource_ = nil;
  if (cachedDataset_ != nil) {
    dataSource_ = [cachedDataset_ getDataSource];
  }
  if (dataSource_ == nil) {
    dataSource_ = (id<OrgOssPdfreporterEngineJRDataSource>) [self getParameterValueWithNSString:[OrgOssPdfreporterEngineJRParameter REPORT_DATA_SOURCE]];
    if (!useDatasourceParamValue_ && (useConnectionParamValue_ || dataSource_ == nil)) {
      dataSource_ = [self createQueryDatasource];
      [self setParameterWithNSString:[OrgOssPdfreporterEngineJRParameter REPORT_DATA_SOURCE] withId:dataSource_];
    }
  }
  if ([OrgOssPdfreporterEngineFillDatasetSortUtil needSortingWithOrgOssPdfreporterEngineFillJRFillDataset:self]) {
    dataSource_ = [OrgOssPdfreporterEngineFillDatasetSortUtil getSortedDataSourceWithOrgOssPdfreporterEngineFillJRBaseFiller:filler_ withOrgOssPdfreporterEngineFillJRFillDataset:self withJavaUtilLocale:locale_];
    [self setParameterWithNSString:[OrgOssPdfreporterEngineJRParameter REPORT_DATA_SOURCE] withId:dataSource_];
    sortedDataSource_ = YES;
  }
}

- (void)setFillPositionWithOrgOssPdfreporterEngineFillFillDatasetPosition:(OrgOssPdfreporterEngineFillFillDatasetPosition *)fillPosition {
  if (fillPosition != nil) {
    [fillPosition addAttributeWithNSString:@"datasetUUID" withId:[self getUUID]];
    if (query_ != nil) {
      OrgOssPdfreporterEngineUtilMD5Digest *queryMD5 = [((OrgOssPdfreporterEngineUtilDigestUtils *) nil_chk([OrgOssPdfreporterEngineUtilDigestUtils instance])) md5WithNSString:[query_ getText]];
      [((OrgOssPdfreporterEngineFillFillDatasetPosition *) nil_chk(fillPosition)) addAttributeWithNSString:@"queryMD5" withId:queryMD5];
    }
  }
  self.fillPosition = fillPosition;
}

- (void)setCacheSkippedWithBOOL:(BOOL)cacheSkipped {
  self.cacheSkipped = cacheSkipped;
}

- (void)cacheInit {
  cachedDataset_ = nil;
  dataRecorder_ = nil;
  if (fillPosition_ == nil) {
    return;
  }
  if (filler_ != nil) {
    [self cacheInitSnapshot];
  }
}

- (void)cacheInitSnapshot {
  if (cacheSkipped_) {
    return;
  }
  id<OrgOssPdfreporterDataCacheDataSnapshot> dataSnapshot = [((OrgOssPdfreporterEngineFillJRFillContext *) nil_chk(((OrgOssPdfreporterEngineFillJRBaseFiller *) nil_chk(filler_)).fillContext)) getDataSnapshot];
  if (dataSnapshot != nil) {
    cachedDataset_ = [dataSnapshot getCachedDataWithId:fillPosition_];
    if (cachedDataset_ == nil) {
      @throw [[OrgOssPdfreporterDataCacheDataSnapshotException alloc] initWithNSString:[NSString stringWithFormat:@"No snapshot data found for position %@", fillPosition_]];
    }
  }
}

- (void)cacheInitRecording {
  if (cacheSkipped_) {
    return;
  }
  if (cachedDataset_ != nil) {
    return;
  }
  if (filler_ == nil) {
    return;
  }
  id<OrgOssPdfreporterDataCacheDataRecorder> cacheRecorder = [((OrgOssPdfreporterEngineFillJRFillContext *) nil_chk(((OrgOssPdfreporterEngineFillJRBaseFiller *) nil_chk(filler_)).fillContext)) getDataRecorder];
  if (cacheRecorder != nil && [((id<OrgOssPdfreporterDataCacheDataRecorder>) nil_chk(cacheRecorder)) isEnabled]) {
    BOOL dataRecorable = [((OrgOssPdfreporterEngineJRPropertiesUtil *) nil_chk([OrgOssPdfreporterEngineJRPropertiesUtil getInstanceWithOrgOssPdfreporterEngineJasperReportsContext:[self getJasperReportsContext]])) getBooleanPropertyWithOrgOssPdfreporterEngineJRPropertiesHolder:self withNSString:[OrgOssPdfreporterDataCacheDataCacheHandler PROPERTY_DATA_RECORDABLE] withBOOL:YES];
    if (dataRecorable) {
      BOOL dataPersistable = [((OrgOssPdfreporterEngineJRPropertiesUtil *) nil_chk([OrgOssPdfreporterEngineJRPropertiesUtil getInstanceWithOrgOssPdfreporterEngineJasperReportsContext:[self getJasperReportsContext]])) getBooleanPropertyWithOrgOssPdfreporterEngineJRPropertiesHolder:self withNSString:[OrgOssPdfreporterDataCacheDataCacheHandler PROPERTY_DATA_PERSISTABLE] withBOOL:YES];
      if (!dataPersistable) {
        [((id<OrgOssPdfreporterDataCacheDataRecorder>) nil_chk(cacheRecorder)) disablePersistence];
      }
      dataRecorder_ = [((id<OrgOssPdfreporterDataCacheDataRecorder>) nil_chk(cacheRecorder)) createRecorder];
      [((id<OrgOssPdfreporterDataCacheDatasetRecorder>) nil_chk(dataRecorder_)) startWithOrgOssPdfreporterEngineJRFieldArray:[((id<OrgOssPdfreporterEngineJRDataset>) nil_chk(parent_)) getFields]];
      {
        IOSObjectArray *a__ = parameters_;
        int n__ = (int) [((IOSObjectArray *) nil_chk(a__)) count];
        for (int i__ = 0; i__ < n__; i__++) {
          OrgOssPdfreporterEngineFillJRFillParameter *parameter = [((IOSObjectArray *) nil_chk(a__)) objectAtIndex:i__];
          if ([((OrgOssPdfreporterEngineFillJRFillParameter *) nil_chk(parameter)) hasProperties]) {
            BOOL includedInCache = [self isIncludedInDataCacheWithOrgOssPdfreporterEngineFillJRFillParameter:parameter];
            if (includedInCache) {
              id value = [((OrgOssPdfreporterEngineFillJRFillParameter *) nil_chk(parameter)) getValue];
              [((id<OrgOssPdfreporterDataCacheDatasetRecorder>) nil_chk(dataRecorder_)) addParameterWithNSString:[((OrgOssPdfreporterEngineFillJRFillParameter *) nil_chk(parameter)) getName] withId:value];
            }
          }
        }
      }
      cacheRecordIndexCallbacks_ = [[JavaUtilHashMap alloc] init];
    }
    else {
      [((id<OrgOssPdfreporterDataCacheDataRecorder>) nil_chk(cacheRecorder)) disableRecording];
    }
  }
}

- (BOOL)isIncludedInDataCacheWithOrgOssPdfreporterEngineFillJRFillParameter:(OrgOssPdfreporterEngineFillJRFillParameter *)parameter {
  NSString *includedProp = [OrgOssPdfreporterEngineJRPropertiesUtil getOwnPropertyWithOrgOssPdfreporterEngineJRPropertiesHolder:parameter withNSString:[OrgOssPdfreporterDataCacheDataCacheHandler PROPERTY_INCLUDED]];
  return [OrgOssPdfreporterEngineJRPropertiesUtil asBooleanWithNSString:includedProp];
}

- (void)cacheRecord {
  if (dataRecorder_ != nil && ![((id<OrgOssPdfreporterDataCacheDatasetRecorder>) nil_chk(dataRecorder_)) hasEnded]) {
    IOSObjectArray *values;
    if (fields_ == nil) {
      values = [IOSObjectArray arrayWithLength:0 type:[IOSClass classWithClass:[NSObject class]]];
    }
    else {
      values = [IOSObjectArray arrayWithLength:(int) [fields_ count] type:[IOSClass classWithClass:[NSObject class]]];
      for (int i = 0; i < (int) [fields_ count]; i++) {
        (void) [((IOSObjectArray *) nil_chk(values)) replaceObjectAtIndex:i withObject:[((OrgOssPdfreporterEngineFillJRFillField *) nil_chk([fields_ objectAtIndex:i])) getValue]];
      }
    }
    [((id<OrgOssPdfreporterDataCacheDatasetRecorder>) nil_chk(dataRecorder_)) addRecordWithNSObjectArray:values];
  }
}

- (void)cacheEnd {
  if (dataRecorder_ != nil && ![((id<OrgOssPdfreporterDataCacheDatasetRecorder>) nil_chk(dataRecorder_)) hasEnded]) {
    if (sortedDataSource_) {
      int recordIndex = 0;
      id<JavaUtilList> sortRecords = [((OrgOssPdfreporterEngineFillSortedDataSource *) dataSource_) getRecords];
      {
        id<JavaUtilIterator> iter__ = [((id<JavaUtilList>) nil_chk(sortRecords)) iterator];
        while ([((id<JavaUtilIterator>) nil_chk(iter__)) hasNext]) {
          OrgOssPdfreporterEngineFillSortedDataSource_SortRecord *sortRecord = [((id<JavaUtilIterator>) nil_chk(iter__)) next];
          if ([((OrgOssPdfreporterEngineFillSortedDataSource_SortRecord *) nil_chk(sortRecord)) isFiltered]) {
            IOSObjectArray *recordValues = [((OrgOssPdfreporterEngineFillSortedDataSource_SortRecord *) nil_chk(sortRecord)) getValues];
            IOSObjectArray *fieldValues;
            if ((int) [((IOSObjectArray *) nil_chk(fields_)) count] == (int) [((IOSObjectArray *) nil_chk(recordValues)) count]) {
              fieldValues = recordValues;
            }
            else {
              fieldValues = [IOSObjectArray arrayWithLength:(int) [((IOSObjectArray *) nil_chk(fields_)) count] type:[IOSClass classWithClass:[NSObject class]]];
              [JavaLangSystem arraycopyWithId:recordValues withInt:0 withId:fieldValues withInt:0 withInt:(int) [((IOSObjectArray *) nil_chk(fields_)) count]];
            }
            [((id<OrgOssPdfreporterDataCacheDatasetRecorder>) nil_chk(dataRecorder_)) addRecordWithNSObjectArray:fieldValues];
            ++recordIndex;
            int originalIndex = [((OrgOssPdfreporterEngineFillSortedDataSource_SortRecord *) nil_chk(sortRecord)) getRecordIndex] + 1;
            id<OrgOssPdfreporterEngineFillJRFillDataset_CacheRecordIndexCallback> recordIndexCallback = [((id<JavaUtilMap>) nil_chk(cacheRecordIndexCallbacks_)) getWithId:[JavaLangInteger valueOfWithInt:originalIndex]];
            if (recordIndexCallback != nil) {
              [recordIndexCallback cacheRecordIndexAvailableWithJavaLangInteger:[JavaLangInteger valueOfWithInt:recordIndex]];
            }
          }
        }
      }
    }
    id recorded = [((id<OrgOssPdfreporterDataCacheDatasetRecorder>) nil_chk(dataRecorder_)) end];
    if (recorded != nil) {
      [((OrgOssPdfreporterEngineFillJRFillContext *) nil_chk(((OrgOssPdfreporterEngineFillJRBaseFiller *) nil_chk(filler_)).fillContext)) addDataRecordResultWithOrgOssPdfreporterEngineFillFillDatasetPosition:fillPosition_ withId:recorded];
    }
  }
}

- (void)setFillParameterValuesWithJavaUtilMap:(id<JavaUtilMap>)parameterValues {
  if (parameters_ != nil && (int) [((IOSObjectArray *) nil_chk(parameters_)) count] > 0) {
    for (int i = 0; i < (int) [((IOSObjectArray *) nil_chk(parameters_)) count]; i++) {
      OrgOssPdfreporterEngineFillJRFillParameter *parameter = [((IOSObjectArray *) nil_chk(parameters_)) objectAtIndex:i];
      NSString *paramName = [((OrgOssPdfreporterEngineFillJRFillParameter *) nil_chk(parameter)) getName];
      id value = nil;
      if ([((id<JavaUtilMap>) nil_chk(parameterValues)) containsKeyWithId:paramName]) {
        value = [((id<JavaUtilMap>) nil_chk(parameterValues)) getWithId:paramName];
      }
      else if (![((OrgOssPdfreporterEngineFillJRFillParameter *) nil_chk(parameter)) isSystemDefined]) {
        if ([self isIncludedInDataCacheWithOrgOssPdfreporterEngineFillJRFillParameter:parameter] && cachedDataset_ != nil) {
          if (![((id<OrgOssPdfreporterDataCacheCachedDataset>) nil_chk(cachedDataset_)) hasParameterWithNSString:paramName]) {
            @throw [[OrgOssPdfreporterDataCacheDataSnapshotException alloc] initWithNSString:[NSString stringWithFormat:@"A value for parameter %@ was not found in the data snapshot", paramName]];
          }
          value = [((id<OrgOssPdfreporterDataCacheCachedDataset>) nil_chk(cachedDataset_)) getParameterValueWithNSString:paramName];
        }
        else {
          value = [((OrgOssPdfreporterEngineFillJRCalculator *) nil_chk(calculator_)) evaluateWithOrgOssPdfreporterEngineJRExpression:[((OrgOssPdfreporterEngineFillJRFillParameter *) nil_chk(parameter)) getDefaultValueExpression] withChar:OrgOssPdfreporterEngineJRExpression_EVALUATION_DEFAULT];
          if (value != nil) {
            (void) [((id<JavaUtilMap>) nil_chk(parameterValues)) putWithId:paramName withId:value];
          }
        }
      }
      [self setParameterWithOrgOssPdfreporterEngineFillIJRFillParameter:parameter withId:value];
    }
  }
}

- (void)contributeParametersWithJavaUtilMap:(id<JavaUtilMap>)parameterValues {
  parameterContributors_ = [self getParameterContributorsWithOrgOssPdfreporterEngineParameterContributorContext:[[OrgOssPdfreporterEngineParameterContributorContext alloc] initWithOrgOssPdfreporterEngineJasperReportsContext:[self getJasperReportsContext] withOrgOssPdfreporterEngineJRDataset:self withJavaUtilMap:parameterValues]];
  if (parameterContributors_ != nil) {
    {
      id<JavaUtilIterator> iter__ = [parameterContributors_ iterator];
      while ([((id<JavaUtilIterator>) nil_chk(iter__)) hasNext]) {
        id<OrgOssPdfreporterEngineParameterContributor> contributor = [((id<JavaUtilIterator>) nil_chk(iter__)) next];
        [((id<OrgOssPdfreporterEngineParameterContributor>) nil_chk(contributor)) contributeParametersWithJavaUtilMap:parameterValues];
      }
    }
  }
}

- (void)setJasperReportsContextWithOrgOssPdfreporterEngineJasperReportsContext:(id<OrgOssPdfreporterEngineJasperReportsContext>)jasperReportsContext {
  self.jasperReportsContext = jasperReportsContext;
}

- (id<OrgOssPdfreporterEngineJasperReportsContext>)getJasperReportsContext {
  return filler_ == nil ? (jasperReportsContext_ == nil ? [OrgOssPdfreporterEngineDefaultJasperReportsContext getInstance] : ((id) jasperReportsContext_)) : [((OrgOssPdfreporterEngineFillJRBaseFiller *) nil_chk(filler_)) getJasperReportsContext];
}

- (void)disposeParameterContributors {
  if (parameterContributors_ != nil) {
    {
      id<JavaUtilIterator> iter__ = [parameterContributors_ iterator];
      while ([((id<JavaUtilIterator>) nil_chk(iter__)) hasNext]) {
        id<OrgOssPdfreporterEngineParameterContributor> contributor = [((id<JavaUtilIterator>) nil_chk(iter__)) next];
        [((id<OrgOssPdfreporterEngineParameterContributor>) nil_chk(contributor)) dispose];
      }
    }
  }
}

- (id<JavaUtilList>)getParameterContributorsWithOrgOssPdfreporterEngineParameterContributorContext:(OrgOssPdfreporterEngineParameterContributorContext *)context {
  id<JavaUtilList> allContributors = nil;
  id<JavaUtilList> factories = [((id<OrgOssPdfreporterEngineJasperReportsContext>) nil_chk([self getJasperReportsContext])) getExtensionsWithIOSClass:[IOSClass classWithProtocol:@protocol(OrgOssPdfreporterEngineParameterContributorFactory)]];
  if (factories != nil && [((id<JavaUtilList>) nil_chk(factories)) size] > 0) {
    allContributors = [[JavaUtilArrayList alloc] init];
    for (id<JavaUtilIterator> it = [((id<JavaUtilList>) nil_chk(factories)) iterator]; [((id<JavaUtilIterator>) nil_chk(it)) hasNext]; ) {
      id<OrgOssPdfreporterEngineParameterContributorFactory> factory = (id<OrgOssPdfreporterEngineParameterContributorFactory>) [((id<JavaUtilIterator>) nil_chk(it)) next];
      id<JavaUtilList> contributors = [((id<OrgOssPdfreporterEngineParameterContributorFactory>) nil_chk(factory)) getContributorsWithOrgOssPdfreporterEngineParameterContributorContext:context];
      if (contributors != nil) {
        [((id<JavaUtilList>) nil_chk(allContributors)) addAllWithJavaUtilCollection:contributors];
      }
    }
  }
  return allContributors;
}

- (id<JavaUtilMap>)getParameterValuesMap {
  id<OrgOssPdfreporterEngineFillIJRFillParameter> paramValuesParameter = [((id<JavaUtilMap>) nil_chk(parametersMap_)) getWithId:[OrgOssPdfreporterEngineJRParameter REPORT_PARAMETERS_MAP]];
  return (id<JavaUtilMap>) [((id<OrgOssPdfreporterEngineFillIJRFillParameter>) nil_chk(paramValuesParameter)) getValue];
}

- (id<OrgOssPdfreporterEngineJRDataSource>)createQueryDatasource {
  if (query_ == nil) {
    return nil;
  }
  @try {
    id<OrgOssPdfreporterEngineQueryQueryExecuterFactory> queryExecuterFactory = [((OrgOssPdfreporterEngineUtilJRQueryExecuterUtils *) nil_chk([OrgOssPdfreporterEngineUtilJRQueryExecuterUtils getInstanceWithOrgOssPdfreporterEngineJasperReportsContext:[self getJasperReportsContext]])) getExecuterFactoryWithNSString:[((id<OrgOssPdfreporterEngineJRQuery>) nil_chk(query_)) getLanguage]];
    queryExecuter_ = [((id<OrgOssPdfreporterEngineQueryQueryExecuterFactory>) nil_chk(queryExecuterFactory)) createQueryExecuterWithOrgOssPdfreporterEngineJasperReportsContext:[self getJasperReportsContext] withOrgOssPdfreporterEngineJRDataset:parent_ withJavaUtilMap:parametersMap_];
    [((OrgOssPdfreporterEngineFillJRFillContext *) nil_chk(((OrgOssPdfreporterEngineFillJRBaseFiller *) nil_chk(filler_)).fillContext)) setRunningQueryExecuterWithOrgOssPdfreporterEngineQueryJRQueryExecuter:queryExecuter_];
    return [((id<OrgOssPdfreporterEngineQueryJRQueryExecuter>) nil_chk(queryExecuter_)) createDatasource];
  }
  @finally {
    [((OrgOssPdfreporterEngineFillJRFillContext *) nil_chk(((OrgOssPdfreporterEngineFillJRBaseFiller *) nil_chk(filler_)).fillContext)) clearRunningQueryExecuter];
  }
}

- (void)reset {
  useDatasourceParamValue_ = NO;
  useConnectionParamValue_ = NO;
}

- (void)setDatasourceParameterValueWithJavaUtilMap:(id<JavaUtilMap>)parameterValues
           withOrgOssPdfreporterEngineJRDataSource:(id<OrgOssPdfreporterEngineJRDataSource>)ds {
  useDatasourceParamValue_ = YES;
  if (ds != nil) {
    (void) [((id<JavaUtilMap>) nil_chk(parameterValues)) putWithId:[OrgOssPdfreporterEngineJRParameter REPORT_DATA_SOURCE] withId:ds];
  }
}

- (void)setConnectionParameterValueWithJavaUtilMap:(id<JavaUtilMap>)parameterValues
               withOrgOssPdfreporterSqlIConnection:(id<OrgOssPdfreporterSqlIConnection>)conn {
  useConnectionParamValue_ = YES;
  if (conn != nil) {
    (void) [((id<JavaUtilMap>) nil_chk(parameterValues)) putWithId:[OrgOssPdfreporterEngineJRParameter REPORT_CONNECTION] withId:conn];
  }
}

- (void)closeDatasource {
  [self closeQueryExecuter];
  [self reset];
  if (ended_) {
    [self cacheEnd];
  }
}

- (void)closeQueryExecuter {
  if (queryExecuter_ != nil) {
    [queryExecuter_ close];
    queryExecuter_ = nil;
  }
}

- (void)start {
  [self resetVariables];
  reportCount_ = [JavaLangInteger valueOfWithInt:0];
  ended_ = NO;
  cacheRecordCount_ = [JavaLangInteger valueOfWithInt:0];
  previousCacheRecordIndex_ = [JavaLangInteger valueOfWithInt:0];
  currentCacheRecordIndex_ = [JavaLangInteger valueOfWithInt:0];
}

- (void)resetVariables {
  if (variables_ != nil) {
    {
      IOSObjectArray *a__ = variables_;
      int n__ = (int) [((IOSObjectArray *) nil_chk(a__)) count];
      for (int i__ = 0; i__ < n__; i__++) {
        OrgOssPdfreporterEngineFillJRFillVariable *variable = [((IOSObjectArray *) nil_chk(a__)) objectAtIndex:i__];
        [((OrgOssPdfreporterEngineFillJRFillVariable *) nil_chk(variable)) reset];
      }
    }
  }
}

- (BOOL)next {
  return [self nextWithBOOL:NO];
}

- (BOOL)nextWithBOOL:(BOOL)sorting {
  BOOL hasNext = NO;
  if (dataSource_ != nil) {
    BOOL includeRow = YES;
    do {
      hasNext = [self advanceDataSourceWithBOOL:!sorting];
      if (hasNext) {
        [self setOldValues];
        [((OrgOssPdfreporterEngineFillJRCalculator *) nil_chk(calculator_)) estimateVariables];
        if (!sorting) {
          includeRow = YES;
          id<OrgOssPdfreporterEngineJRExpression> filterExpression = [self getFilterExpression];
          if (filterExpression != nil) {
            JavaLangBoolean *filterExprResult = (JavaLangBoolean *) [((OrgOssPdfreporterEngineFillJRCalculator *) nil_chk(calculator_)) evaluateWithOrgOssPdfreporterEngineJRExpression:filterExpression withChar:OrgOssPdfreporterEngineJRExpression_EVALUATION_ESTIMATED];
            includeRow = filterExprResult != nil && [((JavaLangBoolean *) nil_chk(filterExprResult)) booleanValue];
          }
          if (includeRow) {
            [self advanceCacheRecordIndexes];
            if (sortedDataSource_) {
              [((OrgOssPdfreporterEngineFillSortedDataSource *) dataSource_) setRecordFilteredIndexWithInt:[((JavaLangInteger *) nil_chk(cacheRecordCount_)) intValue] - 1];
            }
            else {
              [self cacheRecord];
            }
            if (filter_ != nil) {
              includeRow = [filter_ matchesWithOrgOssPdfreporterEngineEvaluationTypeEnum:[OrgOssPdfreporterEngineEvaluationTypeEnum ESTIMATED]];
            }
          }
        }
        if (!includeRow) {
          [self revertToOldValues];
        }
      }
    }
    while (hasNext && !includeRow);
    if (hasNext) {
      reportCount_ = [JavaLangInteger valueOfWithInt:[((JavaLangInteger *) nil_chk(reportCount_)) intValue] + 1];
    }
  }
  if (!hasNext) {
    ended_ = YES;
  }
  return hasNext;
}

- (void)advanceCacheRecordIndexes {
  cacheRecordCount_ = [JavaLangInteger valueOfWithInt:[((JavaLangInteger *) nil_chk(cacheRecordCount_)) intValue] + 1];
  previousCacheRecordIndex_ = currentCacheRecordIndex_;
  if (cachedDataset_ != nil) {
    int dataSourceIndex = [((id<OrgOssPdfreporterEngineDataIndexedDataSource>) dataSource_) getRecordIndex];
    currentCacheRecordIndex_ = [JavaLangInteger valueOfWithInt:dataSourceIndex + 1];
  }
  else {
    currentCacheRecordIndex_ = cacheRecordCount_;
  }
}

- (void)setOldValues {
  if (fields_ != nil && (int) [((IOSObjectArray *) nil_chk(fields_)) count] > 0) {
    for (int i = 0; i < (int) [((IOSObjectArray *) nil_chk(fields_)) count]; i++) {
      OrgOssPdfreporterEngineFillJRFillField *field = [((IOSObjectArray *) nil_chk(fields_)) objectAtIndex:i];
      [((OrgOssPdfreporterEngineFillJRFillField *) nil_chk(field)) setPreviousOldValueWithId:[((OrgOssPdfreporterEngineFillJRFillField *) nil_chk(field)) getOldValue]];
      [((OrgOssPdfreporterEngineFillJRFillField *) nil_chk(field)) setOldValueWithId:[((OrgOssPdfreporterEngineFillJRFillField *) nil_chk(field)) getValue]];
      [((OrgOssPdfreporterEngineFillJRFillField *) nil_chk(field)) setValueWithId:[((id<OrgOssPdfreporterEngineJRDataSource>) nil_chk(dataSource_)) getFieldValueWithOrgOssPdfreporterEngineJRField:field]];
    }
  }
  if (variables_ != nil && (int) [((IOSObjectArray *) nil_chk(variables_)) count] > 0) {
    for (int i = 0; i < (int) [((IOSObjectArray *) nil_chk(variables_)) count]; i++) {
      OrgOssPdfreporterEngineFillJRFillVariable *variable = [((IOSObjectArray *) nil_chk(variables_)) objectAtIndex:i];
      [((OrgOssPdfreporterEngineFillJRFillVariable *) nil_chk(variable)) setPreviousOldValueWithId:[((OrgOssPdfreporterEngineFillJRFillVariable *) nil_chk(variable)) getOldValue]];
      [((OrgOssPdfreporterEngineFillJRFillVariable *) nil_chk(variable)) setOldValueWithId:[((OrgOssPdfreporterEngineFillJRFillVariable *) nil_chk(variable)) getValue]];
    }
  }
}

- (void)revertToOldValues {
  if (fields_ != nil && (int) [((IOSObjectArray *) nil_chk(fields_)) count] > 0) {
    for (int i = 0; i < (int) [((IOSObjectArray *) nil_chk(fields_)) count]; i++) {
      OrgOssPdfreporterEngineFillJRFillField *field = [((IOSObjectArray *) nil_chk(fields_)) objectAtIndex:i];
      [((OrgOssPdfreporterEngineFillJRFillField *) nil_chk(field)) setValueWithId:[((OrgOssPdfreporterEngineFillJRFillField *) nil_chk(field)) getOldValue]];
      [((OrgOssPdfreporterEngineFillJRFillField *) nil_chk(field)) setOldValueWithId:[((OrgOssPdfreporterEngineFillJRFillField *) nil_chk(field)) getPreviousOldValue]];
    }
  }
  if (variables_ != nil && (int) [((IOSObjectArray *) nil_chk(variables_)) count] > 0) {
    for (int i = 0; i < (int) [((IOSObjectArray *) nil_chk(variables_)) count]; i++) {
      OrgOssPdfreporterEngineFillJRFillVariable *variable = [((IOSObjectArray *) nil_chk(variables_)) objectAtIndex:i];
      [((OrgOssPdfreporterEngineFillJRFillVariable *) nil_chk(variable)) setValueWithId:[((OrgOssPdfreporterEngineFillJRFillVariable *) nil_chk(variable)) getOldValue]];
      [((OrgOssPdfreporterEngineFillJRFillVariable *) nil_chk(variable)) setOldValueWithId:[((OrgOssPdfreporterEngineFillJRFillVariable *) nil_chk(variable)) getPreviousOldValue]];
    }
  }
}

- (BOOL)advanceDataSourceWithBOOL:(BOOL)limit {
  BOOL hasNext;
  if (limit && reportMaxCount_ != nil && [((JavaLangInteger *) nil_chk(reportCount_)) intValue] >= [((JavaLangInteger *) nil_chk(reportMaxCount_)) intValue]) {
    hasNext = NO;
  }
  else {
    hasNext = [((id<OrgOssPdfreporterEngineJRDataSource>) nil_chk(dataSource_)) next];
  }
  return hasNext;
}

- (void)setParameterWithNSString:(NSString *)parameterName
                          withId:(id)value {
  id<OrgOssPdfreporterEngineFillIJRFillParameter> parameter = [((id<JavaUtilMap>) nil_chk(parametersMap_)) getWithId:parameterName];
  if (parameter != nil) {
    [self setParameterWithOrgOssPdfreporterEngineFillIJRFillParameter:parameter withId:value];
  }
}

- (void)setParameterWithOrgOssPdfreporterEngineFillIJRFillParameter:(id<OrgOssPdfreporterEngineFillIJRFillParameter>)parameter
                                                             withId:(id)value {
  [((id<OrgOssPdfreporterEngineFillIJRFillParameter>) nil_chk(parameter)) setValueWithId:value];
}

- (id)getVariableValueWithNSString:(NSString *)variableName {
  return [self getVariableValueWithNSString:variableName withOrgOssPdfreporterEngineEvaluationTypeEnum:[OrgOssPdfreporterEngineEvaluationTypeEnum DEFAULT]];
}

- (id)getVariableValueWithNSString:(NSString *)variableName
withOrgOssPdfreporterEngineEvaluationTypeEnum:(OrgOssPdfreporterEngineEvaluationTypeEnum *)evaluation {
  OrgOssPdfreporterEngineFillJRFillVariable *var = [((id<JavaUtilMap>) nil_chk(variablesMap_)) getWithId:variableName];
  if (var == nil) {
    @throw [[OrgOssPdfreporterEngineJRRuntimeException alloc] initWithNSString:[NSString stringWithFormat:@"No such variable %@", variableName]];
  }
  return [((OrgOssPdfreporterEngineFillJRFillVariable *) nil_chk(var)) getValueWithChar:[((OrgOssPdfreporterEngineEvaluationTypeEnum *) nil_chk(evaluation)) getType]];
}

- (OrgOssPdfreporterEngineFillJRFillVariable *)getFillVariableWithNSString:(NSString *)variableName {
  return [((id<JavaUtilMap>) nil_chk(variablesMap_)) getWithId:variableName];
}

- (id)getParameterValueWithNSString:(NSString *)parameterName {
  return [self getParameterValueWithNSString:parameterName withBOOL:NO];
}

- (id)getParameterValueWithNSString:(NSString *)parameterName
                           withBOOL:(BOOL)ignoreMissing {
  id<OrgOssPdfreporterEngineFillIJRFillParameter> param = [((id<JavaUtilMap>) nil_chk(parametersMap_)) getWithId:parameterName];
  id value;
  if (param == nil) {
    if (!ignoreMissing) {
      @throw [[OrgOssPdfreporterEngineJRRuntimeException alloc] initWithNSString:[NSString stringWithFormat:@"No such parameter %@", parameterName]];
    }
    id<JavaUtilMap> valuesMap = [self getParameterValuesMap];
    value = valuesMap == nil ? nil : [((id<JavaUtilMap>) nil_chk(valuesMap)) getWithId:parameterName];
  }
  else {
    value = [param getValue];
  }
  return value;
}

- (id)getFieldValueWithNSString:(NSString *)fieldName {
  return [self getFieldValueWithNSString:fieldName withOrgOssPdfreporterEngineEvaluationTypeEnum:[OrgOssPdfreporterEngineEvaluationTypeEnum DEFAULT]];
}

- (id)getFieldValueWithNSString:(NSString *)fieldName
withOrgOssPdfreporterEngineEvaluationTypeEnum:(OrgOssPdfreporterEngineEvaluationTypeEnum *)evaluation {
  OrgOssPdfreporterEngineFillJRFillField *field = [((id<JavaUtilMap>) nil_chk(fieldsMap_)) getWithId:fieldName];
  if (field == nil) {
    @throw [[OrgOssPdfreporterEngineJRRuntimeException alloc] initWithNSString:[NSString stringWithFormat:@"No such field %@", fieldName]];
  }
  return [((OrgOssPdfreporterEngineFillJRFillField *) nil_chk(field)) getValueWithChar:[((OrgOssPdfreporterEngineEvaluationTypeEnum *) nil_chk(evaluation)) getType]];
}

- (OrgOssPdfreporterEngineFillJRFillField *)getFillFieldWithNSString:(NSString *)fieldName {
  return [((id<JavaUtilMap>) nil_chk(fieldsMap_)) getWithId:fieldName];
}

- (void)addVariableCalculationReqWithNSString:(NSString *)variableName
withOrgOssPdfreporterEngineTypeCalculationEnumEnum:(OrgOssPdfreporterEngineTypeCalculationEnumEnum *)calculation {
  if (variableCalculationReqs_ == nil) {
    variableCalculationReqs_ = [[JavaUtilHashSet alloc] init];
  }
  [((id<JavaUtilSet>) nil_chk(variableCalculationReqs_)) addWithId:[[OrgOssPdfreporterEngineFillJRFillDataset_VariableCalculationReq alloc] initWithNSString:variableName withOrgOssPdfreporterEngineTypeCalculationEnumEnum:calculation]];
}

- (void)checkVariableCalculationReqsWithOrgOssPdfreporterEngineFillJRFillObjectFactory:(OrgOssPdfreporterEngineFillJRFillObjectFactory *)factory {
  if (variableCalculationReqs_ != nil && ![((id<JavaUtilSet>) nil_chk(variableCalculationReqs_)) isEmpty]) {
    id<JavaUtilList> variableList = [[JavaUtilArrayList alloc] initWithInt:(int) [((IOSObjectArray *) nil_chk(variables_)) count] * 2];
    for (int i = 0; i < (int) [((IOSObjectArray *) nil_chk(variables_)) count]; i++) {
      OrgOssPdfreporterEngineFillJRFillVariable *variable = [((IOSObjectArray *) nil_chk(variables_)) objectAtIndex:i];
      [self checkVariableCalculationReqWithOrgOssPdfreporterEngineFillJRFillVariable:variable withJavaUtilList:variableList withOrgOssPdfreporterEngineFillJRFillObjectFactory:factory];
    }
    [self setVariablesWithJavaUtilList:variableList];
  }
}

- (void)checkVariableCalculationReqWithOrgOssPdfreporterEngineFillJRFillVariable:(OrgOssPdfreporterEngineFillJRFillVariable *)variable
                                                                withJavaUtilList:(id<JavaUtilList>)variableList
                              withOrgOssPdfreporterEngineFillJRFillObjectFactory:(OrgOssPdfreporterEngineFillJRFillObjectFactory *)factory {
  if ([self hasVariableCalculationReqWithOrgOssPdfreporterEngineJRVariable:variable withOrgOssPdfreporterEngineTypeCalculationEnumEnum:[OrgOssPdfreporterEngineTypeCalculationEnumEnum AVERAGE]] || [self hasVariableCalculationReqWithOrgOssPdfreporterEngineJRVariable:variable withOrgOssPdfreporterEngineTypeCalculationEnumEnum:[OrgOssPdfreporterEngineTypeCalculationEnumEnum VARIANCE]]) {
    if ([((OrgOssPdfreporterEngineFillJRFillVariable *) nil_chk(variable)) getHelperVariableWithChar:OrgOssPdfreporterEngineFillJRCalculable_HELPER_COUNT] == nil) {
      id<OrgOssPdfreporterEngineJRVariable> countVar = [self createHelperVariableWithOrgOssPdfreporterEngineJRVariable:variable withNSString:@"_COUNT" withOrgOssPdfreporterEngineTypeCalculationEnumEnum:[OrgOssPdfreporterEngineTypeCalculationEnumEnum COUNT]];
      OrgOssPdfreporterEngineFillJRFillVariable *fillCountVar = [((OrgOssPdfreporterEngineFillJRFillObjectFactory *) nil_chk(factory)) getVariableWithOrgOssPdfreporterEngineJRVariable:countVar];
      [self checkVariableCalculationReqWithOrgOssPdfreporterEngineFillJRFillVariable:fillCountVar withJavaUtilList:variableList withOrgOssPdfreporterEngineFillJRFillObjectFactory:factory];
      (void) [((OrgOssPdfreporterEngineFillJRFillVariable *) nil_chk(variable)) setHelperVariableWithOrgOssPdfreporterEngineFillJRFillVariable:fillCountVar withChar:OrgOssPdfreporterEngineFillJRCalculable_HELPER_COUNT];
    }
    if ([((OrgOssPdfreporterEngineFillJRFillVariable *) nil_chk(variable)) getHelperVariableWithChar:OrgOssPdfreporterEngineFillJRCalculable_HELPER_SUM] == nil) {
      id<OrgOssPdfreporterEngineJRVariable> sumVar = [self createHelperVariableWithOrgOssPdfreporterEngineJRVariable:variable withNSString:@"_SUM" withOrgOssPdfreporterEngineTypeCalculationEnumEnum:[OrgOssPdfreporterEngineTypeCalculationEnumEnum SUM]];
      OrgOssPdfreporterEngineFillJRFillVariable *fillSumVar = [((OrgOssPdfreporterEngineFillJRFillObjectFactory *) nil_chk(factory)) getVariableWithOrgOssPdfreporterEngineJRVariable:sumVar];
      [self checkVariableCalculationReqWithOrgOssPdfreporterEngineFillJRFillVariable:fillSumVar withJavaUtilList:variableList withOrgOssPdfreporterEngineFillJRFillObjectFactory:factory];
      (void) [((OrgOssPdfreporterEngineFillJRFillVariable *) nil_chk(variable)) setHelperVariableWithOrgOssPdfreporterEngineFillJRFillVariable:fillSumVar withChar:OrgOssPdfreporterEngineFillJRCalculable_HELPER_SUM];
    }
  }
  if ([self hasVariableCalculationReqWithOrgOssPdfreporterEngineJRVariable:variable withOrgOssPdfreporterEngineTypeCalculationEnumEnum:[OrgOssPdfreporterEngineTypeCalculationEnumEnum STANDARD_DEVIATION]]) {
    if ([((OrgOssPdfreporterEngineFillJRFillVariable *) nil_chk(variable)) getHelperVariableWithChar:OrgOssPdfreporterEngineFillJRCalculable_HELPER_VARIANCE] == nil) {
      id<OrgOssPdfreporterEngineJRVariable> varianceVar = [self createHelperVariableWithOrgOssPdfreporterEngineJRVariable:variable withNSString:@"_VARIANCE" withOrgOssPdfreporterEngineTypeCalculationEnumEnum:[OrgOssPdfreporterEngineTypeCalculationEnumEnum VARIANCE]];
      OrgOssPdfreporterEngineFillJRFillVariable *fillVarianceVar = [((OrgOssPdfreporterEngineFillJRFillObjectFactory *) nil_chk(factory)) getVariableWithOrgOssPdfreporterEngineJRVariable:varianceVar];
      [self checkVariableCalculationReqWithOrgOssPdfreporterEngineFillJRFillVariable:fillVarianceVar withJavaUtilList:variableList withOrgOssPdfreporterEngineFillJRFillObjectFactory:factory];
      (void) [((OrgOssPdfreporterEngineFillJRFillVariable *) nil_chk(variable)) setHelperVariableWithOrgOssPdfreporterEngineFillJRFillVariable:fillVarianceVar withChar:OrgOssPdfreporterEngineFillJRCalculable_HELPER_VARIANCE];
    }
  }
  if ([self hasVariableCalculationReqWithOrgOssPdfreporterEngineJRVariable:variable withOrgOssPdfreporterEngineTypeCalculationEnumEnum:[OrgOssPdfreporterEngineTypeCalculationEnumEnum DISTINCT_COUNT]]) {
    if ([((OrgOssPdfreporterEngineFillJRFillVariable *) nil_chk(variable)) getHelperVariableWithChar:OrgOssPdfreporterEngineFillJRCalculable_HELPER_COUNT] == nil) {
      id<OrgOssPdfreporterEngineJRVariable> countVar = [self createDistinctCountHelperVariableWithOrgOssPdfreporterEngineJRVariable:variable];
      OrgOssPdfreporterEngineFillJRFillVariable *fillCountVar = [((OrgOssPdfreporterEngineFillJRFillObjectFactory *) nil_chk(factory)) getVariableWithOrgOssPdfreporterEngineJRVariable:countVar];
      [self checkVariableCalculationReqWithOrgOssPdfreporterEngineFillJRFillVariable:fillCountVar withJavaUtilList:variableList withOrgOssPdfreporterEngineFillJRFillObjectFactory:factory];
      (void) [((OrgOssPdfreporterEngineFillJRFillVariable *) nil_chk(variable)) setHelperVariableWithOrgOssPdfreporterEngineFillJRFillVariable:fillCountVar withChar:OrgOssPdfreporterEngineFillJRCalculable_HELPER_COUNT];
    }
  }
  [((id<JavaUtilList>) nil_chk(variableList)) addWithId:variable];
}

- (BOOL)hasVariableCalculationReqWithOrgOssPdfreporterEngineJRVariable:(id<OrgOssPdfreporterEngineJRVariable>)var
                    withOrgOssPdfreporterEngineTypeCalculationEnumEnum:(OrgOssPdfreporterEngineTypeCalculationEnumEnum *)calculation {
  return [((id<JavaUtilSet>) nil_chk(variableCalculationReqs_)) containsWithId:[[OrgOssPdfreporterEngineFillJRFillDataset_VariableCalculationReq alloc] initWithNSString:[((id<OrgOssPdfreporterEngineJRVariable>) nil_chk(var)) getName] withOrgOssPdfreporterEngineTypeCalculationEnumEnum:calculation]];
}

- (OrgOssPdfreporterUsesJavaUtilUUID *)getUUID {
  return [((id<OrgOssPdfreporterEngineJRDataset>) nil_chk(parent_)) getUUID];
}

- (NSString *)getName {
  return [((id<OrgOssPdfreporterEngineJRDataset>) nil_chk(parent_)) getName];
}

- (NSString *)getScriptletClass {
  return [((id<OrgOssPdfreporterEngineJRDataset>) nil_chk(parent_)) getScriptletClass];
}

- (IOSObjectArray *)getScriptlets {
  return [((id<OrgOssPdfreporterEngineJRDataset>) nil_chk(parent_)) getScriptlets];
}

- (IOSObjectArray *)getParameters {
  return parameters_;
}

- (id<JavaUtilMap>)getParametersMap {
  return parametersMap_;
}

- (id<OrgOssPdfreporterEngineJRQuery>)getQuery {
  return query_;
}

- (IOSObjectArray *)getFields {
  return fields_;
}

- (IOSObjectArray *)getSortFields {
  return [((id<OrgOssPdfreporterEngineJRDataset>) nil_chk(parent_)) getSortFields];
}

- (IOSObjectArray *)getVariables {
  return variables_;
}

- (IOSObjectArray *)getGroups {
  return groups_;
}

- (BOOL)isMainDataset {
  return isMain_;
}

- (NSString *)getResourceBundle {
  return [((id<OrgOssPdfreporterEngineJRDataset>) nil_chk(parent_)) getResourceBundle];
}

- (OrgOssPdfreporterEngineTypeWhenResourceMissingTypeEnumEnum *)getWhenResourceMissingTypeValue {
  return whenResourceMissingType_;
}

- (void)setWhenResourceMissingTypeWithOrgOssPdfreporterEngineTypeWhenResourceMissingTypeEnumEnum:(OrgOssPdfreporterEngineTypeWhenResourceMissingTypeEnumEnum *)whenResourceMissingType {
  self.whenResourceMissingType = whenResourceMissingType;
}

- (BOOL)hasProperties {
  return [((id<OrgOssPdfreporterEngineJRDataset>) nil_chk(parent_)) hasProperties];
}

- (OrgOssPdfreporterEngineJRPropertiesMap *)getPropertiesMap {
  return [((id<OrgOssPdfreporterEngineJRDataset>) nil_chk(parent_)) getPropertiesMap];
}

- (id<OrgOssPdfreporterEngineJRPropertiesHolder>)getParentProperties {
  return isMain_ ? nil : [((OrgOssPdfreporterEngineFillJRBaseFiller *) nil_chk(filler_)) getJasperReport];
}

- (id<OrgOssPdfreporterEngineJRExpression>)getFilterExpression {
  return [((id<OrgOssPdfreporterEngineJRDataset>) nil_chk(parent_)) getFilterExpression];
}

- (id)clone {
  @throw [[JavaLangUnsupportedOperationException alloc] init];
}

- (id)evaluateExpressionWithOrgOssPdfreporterEngineJRExpression:(id<OrgOssPdfreporterEngineJRExpression>)expression
                                                       withChar:(char)evaluation {
  return [((OrgOssPdfreporterEngineFillJRCalculator *) nil_chk(calculator_)) evaluateWithOrgOssPdfreporterEngineJRExpression:expression withChar:evaluation];
}

- (JavaUtilLocale *)getLocale {
  return locale_;
}

- (OrgOssPdfreporterEngineFillFillDatasetPosition *)getDatasetPosition {
  return fillPosition_;
}

- (void)addCacheRecordIndexCallbackWithInt:(int)recordIndex
withOrgOssPdfreporterEngineFillJRFillDataset_CacheRecordIndexCallback:(id<OrgOssPdfreporterEngineFillJRFillDataset_CacheRecordIndexCallback>)callback {
  id<OrgOssPdfreporterEngineFillJRFillDataset_CacheRecordIndexCallback> existingCallback = [((id<JavaUtilMap>) nil_chk(cacheRecordIndexCallbacks_)) getWithId:[JavaLangInteger valueOfWithInt:recordIndex]];
  if (existingCallback == nil) {
    (void) [((id<JavaUtilMap>) nil_chk(cacheRecordIndexCallbacks_)) putWithId:[JavaLangInteger valueOfWithInt:recordIndex] withId:callback];
  }
  else {
    OrgOssPdfreporterEngineFillJRFillDataset_CacheRecordIndexChainedCallback *chainedCallback = [[OrgOssPdfreporterEngineFillJRFillDataset_CacheRecordIndexChainedCallback alloc] initWithOrgOssPdfreporterEngineFillJRFillDataset_CacheRecordIndexCallback:existingCallback withOrgOssPdfreporterEngineFillJRFillDataset_CacheRecordIndexCallback:callback];
    (void) [((id<JavaUtilMap>) nil_chk(cacheRecordIndexCallbacks_)) putWithId:[JavaLangInteger valueOfWithInt:recordIndex] withId:chainedCallback];
  }
}

- (void)setCacheRecordIndexWithOrgOssPdfreporterEngineFillFillDatasetPosition:(OrgOssPdfreporterEngineFillFillDatasetPosition *)position
                                                                     withChar:(char)evaluationType {
  int recordIndex;
  switch (evaluationType) {
    case OrgOssPdfreporterEngineJRExpression_EVALUATION_OLD:
    recordIndex = [((JavaLangInteger *) nil_chk(previousCacheRecordIndex_)) intValue];
    break;
    default:
    recordIndex = [((JavaLangInteger *) nil_chk(currentCacheRecordIndex_)) intValue];
    break;
  }
  if (sortedDataSource_ && dataRecorder_ != nil) {
    OrgOssPdfreporterEngineFillJRFillDataset_FillDatasetPositionRecordIndexCallback *callback = [[OrgOssPdfreporterEngineFillJRFillDataset_FillDatasetPositionRecordIndexCallback alloc] initWithOrgOssPdfreporterEngineFillFillDatasetPosition:position];
    [self addCacheRecordIndexCallbackWithInt:recordIndex withOrgOssPdfreporterEngineFillJRFillDataset_CacheRecordIndexCallback:callback];
  }
  else {
    [OrgOssPdfreporterEngineFillJRFillDataset_FillDatasetPositionRecordIndexCallback setRecordIndexWithOrgOssPdfreporterEngineFillFillDatasetPosition:position withJavaLangInteger:[JavaLangInteger valueOfWithInt:recordIndex]];
  }
}

- (id)copyWithZone:(NSZone *)zone {
  return [self clone];
}

- (void)copyAllPropertiesTo:(id)copy {
  [super copyAllPropertiesTo:copy];
  OrgOssPdfreporterEngineFillJRFillDataset *typedCopy = (OrgOssPdfreporterEngineFillJRFillDataset *) copy;
  typedCopy.filler = filler_;
  typedCopy.jasperReportsContext = jasperReportsContext_;
  typedCopy.parent = parent_;
  typedCopy.isMain = isMain_;
  typedCopy.query = query_;
  typedCopy.useDatasourceParamValue = useDatasourceParamValue_;
  typedCopy.useConnectionParamValue = useConnectionParamValue_;
  typedCopy.parameters = parameters_;
  typedCopy.parametersMap = parametersMap_;
  typedCopy.fields = fields_;
  typedCopy.fieldsMap = fieldsMap_;
  typedCopy.variables = variables_;
  typedCopy.variablesMap = variablesMap_;
  typedCopy.variableCalculationReqs = variableCalculationReqs_;
  typedCopy.elementDatasets = elementDatasets_;
  typedCopy.origElementDatasets = origElementDatasets_;
  typedCopy.groups = groups_;
  typedCopy.resourceBundleBaseName = resourceBundleBaseName_;
  typedCopy.whenResourceMissingType = whenResourceMissingType_;
  typedCopy.scriptletClassName = scriptletClassName_;
  typedCopy.scriptlets = scriptlets_;
  typedCopy.delegateScriptlet = delegateScriptlet_;
  typedCopy.dataSource = dataSource_;
  typedCopy.locale = locale_;
  typedCopy.timeZone = timeZone_;
  typedCopy.reportCount = reportCount_;
  typedCopy.calculator = calculator_;
  typedCopy.reportMaxCount = reportMaxCount_;
  typedCopy.queryExecuter = queryExecuter_;
  typedCopy.parameterContributors = parameterContributors_;
  typedCopy.filter = filter_;
  typedCopy.fillPosition = fillPosition_;
  typedCopy.dataRecorder = dataRecorder_;
  typedCopy.cacheRecordIndexCallbacks = cacheRecordIndexCallbacks_;
  typedCopy.cacheSkipped = cacheSkipped_;
  typedCopy.cachedDataset = cachedDataset_;
  typedCopy.sortedDataSource = sortedDataSource_;
  typedCopy.ended = ended_;
  typedCopy.cacheRecordCount = cacheRecordCount_;
  typedCopy.previousCacheRecordIndex = previousCacheRecordIndex_;
  typedCopy.currentCacheRecordIndex = currentCacheRecordIndex_;
}

@end
@implementation OrgOssPdfreporterEngineFillJRFillDataset_VariableCalculationReq

@synthesize variableName = variableName_;
@synthesize calculation = calculation_;

- (id)initWithNSString:(NSString *)variableName
withOrgOssPdfreporterEngineTypeCalculationEnumEnum:(OrgOssPdfreporterEngineTypeCalculationEnumEnum *)calculation {
  if ((self = [super init])) {
    self.variableName = variableName;
    self.calculation = calculation;
  }
  return self;
}

- (BOOL)isEqual:(id)o {
  if (o == nil || !([o isKindOfClass:[OrgOssPdfreporterEngineFillJRFillDataset_VariableCalculationReq class]])) {
    return NO;
  }
  OrgOssPdfreporterEngineFillJRFillDataset_VariableCalculationReq *r = (OrgOssPdfreporterEngineFillJRFillDataset_VariableCalculationReq *) o;
  return [((NSString *) nil_chk(variableName_)) isEqual:((OrgOssPdfreporterEngineFillJRFillDataset_VariableCalculationReq *) nil_chk(r)).variableName] && calculation_ == ((OrgOssPdfreporterEngineFillJRFillDataset_VariableCalculationReq *) nil_chk(r)).calculation;
}

- (NSUInteger)hash {
  return 31 * [((OrgOssPdfreporterEngineTypeCalculationEnumEnum *) nil_chk(calculation_)) getValue] + [((NSString *) nil_chk(variableName_)) hash];
}

- (void)copyAllPropertiesTo:(id)copy {
  [super copyAllPropertiesTo:copy];
  OrgOssPdfreporterEngineFillJRFillDataset_VariableCalculationReq *typedCopy = (OrgOssPdfreporterEngineFillJRFillDataset_VariableCalculationReq *) copy;
  typedCopy.variableName = variableName_;
  typedCopy.calculation = calculation_;
}

@end
@implementation OrgOssPdfreporterEngineFillJRFillDataset_FillDatasetPositionRecordIndexCallback

@synthesize position = position_;

+ (void)setRecordIndexWithOrgOssPdfreporterEngineFillFillDatasetPosition:(OrgOssPdfreporterEngineFillFillDatasetPosition *)position
                                                     withJavaLangInteger:(JavaLangInteger *)recordIndex {
  [((OrgOssPdfreporterEngineFillFillDatasetPosition *) nil_chk(position)) addAttributeWithNSString:@"rowIndex" withId:recordIndex];
}

- (id)initWithOrgOssPdfreporterEngineFillFillDatasetPosition:(OrgOssPdfreporterEngineFillFillDatasetPosition *)position {
  if ((self = [super init])) {
    self.position = position;
  }
  return self;
}

- (void)cacheRecordIndexAvailableWithJavaLangInteger:(JavaLangInteger *)recordIndex {
  [OrgOssPdfreporterEngineFillJRFillDataset_FillDatasetPositionRecordIndexCallback setRecordIndexWithOrgOssPdfreporterEngineFillFillDatasetPosition:position_ withJavaLangInteger:recordIndex];
}

- (void)copyAllPropertiesTo:(id)copy {
  [super copyAllPropertiesTo:copy];
  OrgOssPdfreporterEngineFillJRFillDataset_FillDatasetPositionRecordIndexCallback *typedCopy = (OrgOssPdfreporterEngineFillJRFillDataset_FillDatasetPositionRecordIndexCallback *) copy;
  typedCopy.position = position_;
}

@end
@implementation OrgOssPdfreporterEngineFillJRFillDataset_CacheRecordIndexChainedCallback

@synthesize first = first_;
@synthesize second = second_;

- (id)initWithOrgOssPdfreporterEngineFillJRFillDataset_CacheRecordIndexCallback:(id<OrgOssPdfreporterEngineFillJRFillDataset_CacheRecordIndexCallback>)first
          withOrgOssPdfreporterEngineFillJRFillDataset_CacheRecordIndexCallback:(id<OrgOssPdfreporterEngineFillJRFillDataset_CacheRecordIndexCallback>)second {
  if ((self = [super init])) {
    self.first = first;
    self.second = second;
  }
  return self;
}

- (void)cacheRecordIndexAvailableWithJavaLangInteger:(JavaLangInteger *)recordIndex {
  [((id<OrgOssPdfreporterEngineFillJRFillDataset_CacheRecordIndexCallback>) nil_chk(first_)) cacheRecordIndexAvailableWithJavaLangInteger:recordIndex];
  [((id<OrgOssPdfreporterEngineFillJRFillDataset_CacheRecordIndexCallback>) nil_chk(second_)) cacheRecordIndexAvailableWithJavaLangInteger:recordIndex];
}

- (void)copyAllPropertiesTo:(id)copy {
  [super copyAllPropertiesTo:copy];
  OrgOssPdfreporterEngineFillJRFillDataset_CacheRecordIndexChainedCallback *typedCopy = (OrgOssPdfreporterEngineFillJRFillDataset_CacheRecordIndexChainedCallback *) copy;
  typedCopy.first = first_;
  typedCopy.second = second_;
}

@end
