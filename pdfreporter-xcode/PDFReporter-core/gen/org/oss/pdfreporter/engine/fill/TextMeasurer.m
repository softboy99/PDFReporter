//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: pdfreporter-core/src/org/oss/pdfreporter/engine/fill/TextMeasurer.java
//
//  Created by kendra on 9/27/13.
//

#include "IOSBooleanArray.h"
#include "IOSClass.h"
#include "IOSIntArray.h"
#include "IOSObjectArray.h"
#include "IOSShortArray.h"
#include "java/lang/CloneNotSupportedException.h"
#include "java/lang/Integer.h"
#include "java/lang/Math.h"
#include "java/lang/Short.h"
#include "java/util/ArrayList.h"
#include "java/util/List.h"
#include "java/util/StringTokenizer.h"
#include "java/util/logging/Logger.h"
#include "org/oss/pdfreporter/engine/DefaultJasperReportsContext.h"
#include "org/oss/pdfreporter/engine/JRCommonText.h"
#include "org/oss/pdfreporter/engine/JRDefaultStyleProvider.h"
#include "org/oss/pdfreporter/engine/JRLineBox.h"
#include "org/oss/pdfreporter/engine/JRParagraph.h"
#include "org/oss/pdfreporter/engine/JRPrintText.h"
#include "org/oss/pdfreporter/engine/JRPropertiesHolder.h"
#include "org/oss/pdfreporter/engine/JRPropertiesUtil.h"
#include "org/oss/pdfreporter/engine/JRRuntimeException.h"
#include "org/oss/pdfreporter/engine/JRTextElement.h"
#include "org/oss/pdfreporter/engine/JasperReportsContext.h"
#include "org/oss/pdfreporter/engine/TabStop.h"
#include "org/oss/pdfreporter/engine/fill/ComplexTextLineWrapper.h"
#include "org/oss/pdfreporter/engine/fill/JRMeasuredText.h"
#include "org/oss/pdfreporter/engine/fill/LineHeightCalculator.h"
#include "org/oss/pdfreporter/engine/fill/TextLine.h"
#include "org/oss/pdfreporter/engine/fill/TextLineWrapper.h"
#include "org/oss/pdfreporter/engine/fill/TextMeasurer.h"
#include "org/oss/pdfreporter/engine/type/RotationEnum.h"
#include "org/oss/pdfreporter/engine/util/DelegatePropertiesHolder.h"
#include "org/oss/pdfreporter/engine/util/JRStringUtil.h"
#include "org/oss/pdfreporter/engine/util/JRStyledText.h"
#include "org/oss/pdfreporter/engine/util/ParagraphUtil.h"

@implementation OrgOssPdfreporterEngineFillTextMeasurer

static JavaUtilLoggingLogger * OrgOssPdfreporterEngineFillTextMeasurer_logger_;
static NSString * OrgOssPdfreporterEngineFillTextMeasurer_PROPERTY_MEASURE_SIMPLE_TEXTS_ = @"net.sf.jasperreports.measure.simple.text";

@synthesize jasperReportsContext = jasperReportsContext_;
@synthesize textElement = textElement_;
@synthesize propertiesHolder = propertiesHolder_;
@synthesize complextLineWrapper = complextLineWrapper_;
@synthesize width = width_;
@synthesize height = height_;
@synthesize topPadding = topPadding_;
@synthesize leftPadding = leftPadding_;
@synthesize bottomPadding = bottomPadding_;
@synthesize rightPadding = rightPadding_;
@synthesize jrParagraph = jrParagraph_;
@synthesize formatWidth = formatWidth_;
@synthesize maxHeight = maxHeight_;
@synthesize canOverflow = canOverflow_;
@synthesize ignoreMissingFont = ignoreMissingFont_;
@synthesize measuredState = measuredState_;
@synthesize prevMeasuredState = prevMeasuredState_;

+ (JavaUtilLoggingLogger *)logger {
  return OrgOssPdfreporterEngineFillTextMeasurer_logger_;
}

+ (NSString *)PROPERTY_MEASURE_SIMPLE_TEXTS {
  return OrgOssPdfreporterEngineFillTextMeasurer_PROPERTY_MEASURE_SIMPLE_TEXTS_;
}

- (id)initOrgOssPdfreporterEngineFillTextMeasurerWithOrgOssPdfreporterEngineJasperReportsContext:(id<OrgOssPdfreporterEngineJasperReportsContext>)jasperReportsContext
                                                         withOrgOssPdfreporterEngineJRCommonText:(id<OrgOssPdfreporterEngineJRCommonText>)textElement {
  if ((self = [super init])) {
    self.jasperReportsContext = jasperReportsContext;
    self.textElement = textElement;
    self.propertiesHolder = [(id) textElement conformsToProtocol: @protocol(OrgOssPdfreporterEngineJRPropertiesHolder)] ? (id<OrgOssPdfreporterEngineJRPropertiesHolder>) textElement : nil;
    if ([(id) [((id<OrgOssPdfreporterEngineJRCommonText>) nil_chk(textElement)) getDefaultStyleProvider] conformsToProtocol: @protocol(OrgOssPdfreporterEngineJRPropertiesHolder)]) {
      self.propertiesHolder = [[OrgOssPdfreporterEngineUtilDelegatePropertiesHolder alloc] initWithOrgOssPdfreporterEngineJRPropertiesHolder:propertiesHolder_ withOrgOssPdfreporterEngineJRPropertiesHolder:(id<OrgOssPdfreporterEngineJRPropertiesHolder>) [((id<OrgOssPdfreporterEngineJRCommonText>) nil_chk(textElement)) getDefaultStyleProvider]];
    }
    OrgOssPdfreporterEngineFillTextMeasurer_Context *measureContext = [[OrgOssPdfreporterEngineFillTextMeasurer_Context alloc] initWithOrgOssPdfreporterEngineFillTextMeasurer:self];
    complextLineWrapper_ = [[OrgOssPdfreporterEngineFillComplexTextLineWrapper alloc] init];
    [((OrgOssPdfreporterEngineFillComplexTextLineWrapper *) nil_chk(complextLineWrapper_)) init__WithOrgOssPdfreporterEngineFillTextMeasureContext:measureContext];
  }
  return self;
}

- (id)initWithOrgOssPdfreporterEngineJasperReportsContext:(id<OrgOssPdfreporterEngineJasperReportsContext>)jasperReportsContext
                  withOrgOssPdfreporterEngineJRCommonText:(id<OrgOssPdfreporterEngineJRCommonText>)textElement {
  return [self initOrgOssPdfreporterEngineFillTextMeasurerWithOrgOssPdfreporterEngineJasperReportsContext:jasperReportsContext withOrgOssPdfreporterEngineJRCommonText:textElement];
}

- (id)initWithOrgOssPdfreporterEngineJRCommonText:(id<OrgOssPdfreporterEngineJRCommonText>)textElement {
  return [self initOrgOssPdfreporterEngineFillTextMeasurerWithOrgOssPdfreporterEngineJasperReportsContext:[OrgOssPdfreporterEngineDefaultJasperReportsContext getInstance] withOrgOssPdfreporterEngineJRCommonText:textElement];
}

- (void)initialize__WithOrgOssPdfreporterEngineUtilJRStyledText:(OrgOssPdfreporterEngineUtilJRStyledText *)styledText
                                                        withInt:(int)remainingTextStart
                                                        withInt:(int)availableStretchHeight
                                                       withBOOL:(BOOL)canOverflow OBJC_METHOD_FAMILY_NONE {
  width_ = [((id<OrgOssPdfreporterEngineJRCommonText>) nil_chk(textElement_)) getWidth];
  height_ = [((id<OrgOssPdfreporterEngineJRCommonText>) nil_chk(textElement_)) getHeight];
  topPadding_ = [((JavaLangInteger *) nil_chk([((id<OrgOssPdfreporterEngineJRLineBox>) nil_chk([((id<OrgOssPdfreporterEngineJRCommonText>) nil_chk(textElement_)) getLineBox])) getTopPadding])) intValue];
  leftPadding_ = [((JavaLangInteger *) nil_chk([((id<OrgOssPdfreporterEngineJRLineBox>) nil_chk([((id<OrgOssPdfreporterEngineJRCommonText>) nil_chk(textElement_)) getLineBox])) getLeftPadding])) intValue];
  bottomPadding_ = [((JavaLangInteger *) nil_chk([((id<OrgOssPdfreporterEngineJRLineBox>) nil_chk([((id<OrgOssPdfreporterEngineJRCommonText>) nil_chk(textElement_)) getLineBox])) getBottomPadding])) intValue];
  rightPadding_ = [((JavaLangInteger *) nil_chk([((id<OrgOssPdfreporterEngineJRLineBox>) nil_chk([((id<OrgOssPdfreporterEngineJRCommonText>) nil_chk(textElement_)) getLineBox])) getRightPadding])) intValue];
  jrParagraph_ = [((id<OrgOssPdfreporterEngineJRCommonText>) nil_chk(textElement_)) getParagraph];
  switch ([[((id<OrgOssPdfreporterEngineJRCommonText>) nil_chk(textElement_)) getRotationValue] ordinal]) {
    case OrgOssPdfreporterEngineTypeRotationEnum_LEFT:
    {
      width_ = [((id<OrgOssPdfreporterEngineJRCommonText>) nil_chk(textElement_)) getHeight];
      height_ = [((id<OrgOssPdfreporterEngineJRCommonText>) nil_chk(textElement_)) getWidth];
      int tmpPadding = topPadding_;
      topPadding_ = leftPadding_;
      leftPadding_ = bottomPadding_;
      bottomPadding_ = rightPadding_;
      rightPadding_ = tmpPadding;
      break;
    }
    case OrgOssPdfreporterEngineTypeRotationEnum_RIGHT:
    {
      width_ = [((id<OrgOssPdfreporterEngineJRCommonText>) nil_chk(textElement_)) getHeight];
      height_ = [((id<OrgOssPdfreporterEngineJRCommonText>) nil_chk(textElement_)) getWidth];
      int tmpPadding = topPadding_;
      topPadding_ = rightPadding_;
      rightPadding_ = bottomPadding_;
      bottomPadding_ = leftPadding_;
      leftPadding_ = tmpPadding;
      break;
    }
    case OrgOssPdfreporterEngineTypeRotationEnum_UPSIDE_DOWN:
    {
      int tmpPadding = topPadding_;
      topPadding_ = bottomPadding_;
      bottomPadding_ = tmpPadding;
      tmpPadding = leftPadding_;
      leftPadding_ = rightPadding_;
      rightPadding_ = tmpPadding;
      break;
    }
    case OrgOssPdfreporterEngineTypeRotationEnum_NONE:
    default:
    {
    }
  }
  formatWidth_ = width_ - leftPadding_ - rightPadding_;
  formatWidth_ = formatWidth_ < 0 ? 0 : formatWidth_;
  maxHeight_ = height_ + availableStretchHeight - topPadding_ - bottomPadding_;
  maxHeight_ = maxHeight_ < 0 ? 0 : maxHeight_;
  self.canOverflow = canOverflow;
  ignoreMissingFont_ = [((OrgOssPdfreporterEngineJRPropertiesUtil *) nil_chk([OrgOssPdfreporterEngineJRPropertiesUtil getInstanceWithOrgOssPdfreporterEngineJasperReportsContext:jasperReportsContext_])) getBooleanPropertyWithOrgOssPdfreporterEngineJRPropertiesHolder:propertiesHolder_ withNSString:[OrgOssPdfreporterEngineUtilJRStyledText PROPERTY_AWT_IGNORE_MISSING_FONT] withBOOL:NO];
  BOOL saveLineBreakOffsets = [((OrgOssPdfreporterEngineJRPropertiesUtil *) nil_chk([OrgOssPdfreporterEngineJRPropertiesUtil getInstanceWithOrgOssPdfreporterEngineJasperReportsContext:jasperReportsContext_])) getBooleanPropertyWithOrgOssPdfreporterEngineJRPropertiesHolder:propertiesHolder_ withNSString:[OrgOssPdfreporterEngineJRTextElement PROPERTY_SAVE_LINE_BREAKS] withBOOL:NO];
  measuredState_ = [[OrgOssPdfreporterEngineFillTextMeasurer_TextMeasuredState alloc] initWithBOOL:saveLineBreakOffsets];
  ((OrgOssPdfreporterEngineFillTextMeasurer_TextMeasuredState *) nil_chk(measuredState_)).lastOffset = remainingTextStart;
  prevMeasuredState_ = nil;
}

- (id<OrgOssPdfreporterEngineFillJRMeasuredText>)measureWithOrgOssPdfreporterEngineUtilJRStyledText:(OrgOssPdfreporterEngineUtilJRStyledText *)styledText
                                                                                            withInt:(int)remainingTextStart
                                                                                            withInt:(int)availableStretchHeight
                                                                                           withBOOL:(BOOL)canOverflow {
  [self initialize__WithOrgOssPdfreporterEngineUtilJRStyledText:styledText withInt:remainingTextStart withInt:availableStretchHeight withBOOL:canOverflow];
  id<OrgOssPdfreporterEngineFillTextLineWrapper> lineWrapper = complextLineWrapper_;
  [((id<OrgOssPdfreporterEngineFillTextLineWrapper>) nil_chk(lineWrapper)) startWithOrgOssPdfreporterEngineUtilJRStyledText:styledText];
  int tokenPosition = remainingTextStart;
  int lastParagraphStart = remainingTextStart;
  NSString *lastParagraphText = nil;
  NSString *remainingText = [((NSString *) nil_chk([((OrgOssPdfreporterEngineUtilJRStyledText *) nil_chk(styledText)) getText])) substring:remainingTextStart];
  JavaUtilStringTokenizer *tkzer = [[JavaUtilStringTokenizer alloc] initWithNSString:remainingText withNSString:@"\n" withBOOL:YES];
  BOOL rendered = YES;
  while ([((JavaUtilStringTokenizer *) nil_chk(tkzer)) hasMoreTokens] && rendered) {
    NSString *token = [((JavaUtilStringTokenizer *) nil_chk(tkzer)) nextToken];
    if ([@"\n" isEqual:token]) {
      rendered = [self renderParagraphWithOrgOssPdfreporterEngineFillTextLineWrapper:lineWrapper withInt:lastParagraphStart withNSString:lastParagraphText];
      lastParagraphStart = tokenPosition + ([((JavaUtilStringTokenizer *) nil_chk(tkzer)) hasMoreTokens] || tokenPosition == 0 ? 1 : 0);
      lastParagraphText = nil;
    }
    else {
      lastParagraphStart = tokenPosition;
      lastParagraphText = token;
    }
    tokenPosition += [((NSString *) nil_chk(token)) length];
  }
  if (rendered && lastParagraphStart < remainingTextStart + [((NSString *) nil_chk(remainingText)) length]) {
    [self renderParagraphWithOrgOssPdfreporterEngineFillTextLineWrapper:lineWrapper withInt:lastParagraphStart withNSString:lastParagraphText];
  }
  return measuredState_;
}

- (BOOL)hasParagraphIndents {
  JavaLangInteger *firstLineIndent = [((id<OrgOssPdfreporterEngineJRParagraph>) nil_chk(jrParagraph_)) getFirstLineIndent];
  if (firstLineIndent != nil && [((JavaLangInteger *) nil_chk(firstLineIndent)) intValue] > 0) {
    return YES;
  }
  JavaLangInteger *leftIndent = [((id<OrgOssPdfreporterEngineJRParagraph>) nil_chk(jrParagraph_)) getLeftIndent];
  if (leftIndent != nil && [((JavaLangInteger *) nil_chk(leftIndent)) intValue] > 0) {
    return YES;
  }
  JavaLangInteger *rightIndent = [((id<OrgOssPdfreporterEngineJRParagraph>) nil_chk(jrParagraph_)) getRightIndent];
  return rightIndent != nil && [((JavaLangInteger *) nil_chk(rightIndent)) intValue] > 0;
}

- (BOOL)renderParagraphWithOrgOssPdfreporterEngineFillTextLineWrapper:(id<OrgOssPdfreporterEngineFillTextLineWrapper>)lineWrapper
                                                              withInt:(int)lastParagraphStart
                                                         withNSString:(NSString *)lastParagraphText {
  if (lastParagraphText == nil) {
    [((id<OrgOssPdfreporterEngineFillTextLineWrapper>) nil_chk(lineWrapper)) startEmptyParagraphWithInt:lastParagraphStart];
  }
  else {
    [((id<OrgOssPdfreporterEngineFillTextLineWrapper>) nil_chk(lineWrapper)) startParagraphWithInt:lastParagraphStart withInt:lastParagraphStart + [lastParagraphText length] withBOOL:NO];
  }
  id<JavaUtilList> tabIndexes = [OrgOssPdfreporterEngineUtilJRStringUtil getTabIndexesWithNSString:lastParagraphText];
  IOSIntArray *currentTabHolder = [IOSIntArray arrayWithInts:(int[]){ 0 } count:1];
  IOSObjectArray *nextTabStopHolder = [IOSObjectArray arrayWithObjects:(id[]){ nil } count:1 type:[IOSClass classWithClass:[OrgOssPdfreporterEngineTabStop class]]];
  IOSBooleanArray *requireNextWordHolder = [IOSBooleanArray arrayWithBooleans:(BOOL[]){ NO } count:1];
  ((OrgOssPdfreporterEngineFillTextMeasurer_TextMeasuredState *) nil_chk(measuredState_)).paragraphStartLine = ((OrgOssPdfreporterEngineFillTextMeasurer_TextMeasuredState *) nil_chk(measuredState_)).lines;
  ((OrgOssPdfreporterEngineFillTextMeasurer_TextMeasuredState *) nil_chk(measuredState_)).textOffset = lastParagraphStart;
  BOOL rendered = YES;
  BOOL renderedLine = NO;
  while ([((id<OrgOssPdfreporterEngineFillTextLineWrapper>) nil_chk(lineWrapper)) paragraphPosition] < [((id<OrgOssPdfreporterEngineFillTextLineWrapper>) nil_chk(lineWrapper)) paragraphEnd] && rendered) {
    rendered = [self renderNextLineWithOrgOssPdfreporterEngineFillTextLineWrapper:lineWrapper withJavaUtilList:tabIndexes withIntArray:currentTabHolder withOrgOssPdfreporterEngineTabStopArray:nextTabStopHolder withBooleanArray:requireNextWordHolder];
    renderedLine = renderedLine || rendered;
  }
  if (!rendered && prevMeasuredState_ != nil && !canOverflow_) {
    [((JavaUtilLoggingLogger *) nil_chk(OrgOssPdfreporterEngineFillTextMeasurer_logger_)) warningWithNSString:@"Truncating last line with overflow is not yet handled correctly."];
  }
  return rendered;
}

- (BOOL)renderNextLineWithOrgOssPdfreporterEngineFillTextLineWrapper:(id<OrgOssPdfreporterEngineFillTextLineWrapper>)lineWrapper
                                                    withJavaUtilList:(id<JavaUtilList>)tabIndexes
                                                        withIntArray:(IOSIntArray *)currentTabHolder
                             withOrgOssPdfreporterEngineTabStopArray:(IOSObjectArray *)nextTabStopHolder
                                                    withBooleanArray:(IOSBooleanArray *)requireNextWordHolder {
  BOOL lineComplete = NO;
  int lineStartPosition = [((id<OrgOssPdfreporterEngineFillTextLineWrapper>) nil_chk(lineWrapper)) paragraphPosition];
  float maxAscent = 0;
  float maxDescent = 0;
  float maxLeading = 0;
  int characterCount = 0;
  BOOL isLeftToRight = YES;
  id<JavaUtilList> segments = [[JavaUtilArrayList alloc] initWithInt:1];
  OrgOssPdfreporterEngineFillTabSegment *oldSegment = nil;
  OrgOssPdfreporterEngineFillTabSegment *crtSegment = nil;
  while (!lineComplete) {
    int tabIndexOrEndIndex = (tabIndexes == nil || [((IOSIntArray *) nil_chk(currentTabHolder)) intAtIndex:0] >= [((id<JavaUtilList>) nil_chk(tabIndexes)) size] ? [((id<OrgOssPdfreporterEngineFillTextLineWrapper>) nil_chk(lineWrapper)) paragraphEnd] : [((JavaLangInteger *) nil_chk([((id<JavaUtilList>) nil_chk(tabIndexes)) getWithInt:[((IOSIntArray *) nil_chk(currentTabHolder)) intAtIndex:0]])) intValue] + 1);
    float startX = ([((id<OrgOssPdfreporterEngineFillTextLineWrapper>) nil_chk(lineWrapper)) paragraphPosition] == 0 ? [((JavaLangInteger *) nil_chk([((id<OrgOssPdfreporterEngineJRParagraph>) nil_chk([((id<OrgOssPdfreporterEngineJRCommonText>) nil_chk(textElement_)) getParagraph])) getFirstLineIndent])) intValue] : 0) + leftPadding_;
    float endX = width_ - [((JavaLangInteger *) nil_chk([((id<OrgOssPdfreporterEngineJRParagraph>) nil_chk([((id<OrgOssPdfreporterEngineJRCommonText>) nil_chk(textElement_)) getParagraph])) getRightIndent])) intValue] - rightPadding_;
    endX = endX < startX ? startX : endX;
    int startIndex = [((id<OrgOssPdfreporterEngineFillTextLineWrapper>) nil_chk(lineWrapper)) paragraphPosition];
    float rightX = 0;
    if ([((id<JavaUtilList>) nil_chk(segments)) size] == 0) {
      rightX = startX;
    }
    else {
      rightX = ((OrgOssPdfreporterEngineFillTabSegment *) nil_chk(oldSegment)).rightX;
      (void) [((IOSObjectArray *) nil_chk(nextTabStopHolder)) replaceObjectAtIndex:0 withObject:[OrgOssPdfreporterEngineUtilParagraphUtil getNextTabStopWithOrgOssPdfreporterEngineJRParagraph:jrParagraph_ withFloat:endX withFloat:rightX]];
    }
    float availableWidth = endX - [((JavaLangInteger *) nil_chk([((id<OrgOssPdfreporterEngineJRParagraph>) nil_chk([((id<OrgOssPdfreporterEngineJRCommonText>) nil_chk(textElement_)) getParagraph])) getLeftIndent])) intValue] - [OrgOssPdfreporterEngineUtilParagraphUtil getSegmentOffsetWithOrgOssPdfreporterEngineTabStop:[((IOSObjectArray *) nil_chk(nextTabStopHolder)) objectAtIndex:0] withFloat:rightX];
    id<OrgOssPdfreporterEngineFillTextLine> textLine = [((id<OrgOssPdfreporterEngineFillTextLineWrapper>) nil_chk(lineWrapper)) nextLineWithFloat:availableWidth withInt:tabIndexOrEndIndex withBOOL:[((IOSBooleanArray *) nil_chk(requireNextWordHolder)) booleanAtIndex:0]];
    if (textLine != nil) {
      maxAscent = [JavaLangMath maxWithFloat:maxAscent withFloat:[textLine getAscent]];
      maxDescent = [JavaLangMath maxWithFloat:maxDescent withFloat:[textLine getDescent]];
      maxLeading = [JavaLangMath maxWithFloat:maxLeading withFloat:[textLine getLeading]];
      characterCount += [textLine getCharacterCount];
      isLeftToRight = isLeftToRight && [textLine isLeftToRight];
      crtSegment = [[OrgOssPdfreporterEngineFillTabSegment alloc] init];
      ((OrgOssPdfreporterEngineFillTabSegment *) nil_chk(crtSegment)).textLine = textLine;
      float leftX = [OrgOssPdfreporterEngineUtilParagraphUtil getLeftXWithOrgOssPdfreporterEngineTabStop:[((IOSObjectArray *) nil_chk(nextTabStopHolder)) objectAtIndex:0] withFloat:[textLine getAdvance]];
      if (rightX > leftX) {
        ((OrgOssPdfreporterEngineFillTabSegment *) nil_chk(crtSegment)).leftX = rightX;
        ((OrgOssPdfreporterEngineFillTabSegment *) nil_chk(crtSegment)).rightX = rightX + [textLine getAdvance];
      }
      else {
        ((OrgOssPdfreporterEngineFillTabSegment *) nil_chk(crtSegment)).leftX = leftX;
        ((OrgOssPdfreporterEngineFillTabSegment *) nil_chk(crtSegment)).rightX = [OrgOssPdfreporterEngineUtilParagraphUtil getRightXWithOrgOssPdfreporterEngineTabStop:[((IOSObjectArray *) nil_chk(nextTabStopHolder)) objectAtIndex:0] withFloat:[textLine getAdvance]];
      }
      [((id<JavaUtilList>) nil_chk(segments)) addWithId:crtSegment];
    }
    (*[((IOSBooleanArray *) nil_chk(requireNextWordHolder)) booleanRefAtIndex:0]) = YES;
    if ([((id<OrgOssPdfreporterEngineFillTextLineWrapper>) nil_chk(lineWrapper)) paragraphPosition] == tabIndexOrEndIndex) {
      (*[((IOSIntArray *) nil_chk(currentTabHolder)) intRefAtIndex:0]) = [((IOSIntArray *) nil_chk(currentTabHolder)) intAtIndex:0] + 1;
    }
    if ([((id<OrgOssPdfreporterEngineFillTextLineWrapper>) nil_chk(lineWrapper)) paragraphPosition] == [((id<OrgOssPdfreporterEngineFillTextLineWrapper>) nil_chk(lineWrapper)) paragraphEnd]) {
      lineComplete = YES;
      (void) [((IOSObjectArray *) nil_chk(nextTabStopHolder)) replaceObjectAtIndex:0 withObject:nil];
    }
    else {
      if ([((id<OrgOssPdfreporterEngineFillTextLineWrapper>) nil_chk(lineWrapper)) paragraphPosition] == tabIndexOrEndIndex) {
        if (((OrgOssPdfreporterEngineFillTabSegment *) nil_chk(crtSegment)).rightX >= [((OrgOssPdfreporterEngineTabStop *) nil_chk([OrgOssPdfreporterEngineUtilParagraphUtil getLastTabStopWithOrgOssPdfreporterEngineJRParagraph:jrParagraph_ withFloat:endX])) getPosition]) {
          lineComplete = YES;
          (void) [((IOSObjectArray *) nil_chk(nextTabStopHolder)) replaceObjectAtIndex:0 withObject:[OrgOssPdfreporterEngineUtilParagraphUtil getFirstTabStopWithOrgOssPdfreporterEngineJRParagraph:jrParagraph_ withFloat:endX]];
        }
      }
      else {
        lineComplete = YES;
        if (textLine == nil) {
          if ([((OrgOssPdfreporterEngineTabStop *) nil_chk([((IOSObjectArray *) nil_chk(nextTabStopHolder)) objectAtIndex:0])) getPosition] == [((OrgOssPdfreporterEngineTabStop *) nil_chk([OrgOssPdfreporterEngineUtilParagraphUtil getFirstTabStopWithOrgOssPdfreporterEngineJRParagraph:jrParagraph_ withFloat:endX])) getPosition]) {
            (void) [((IOSObjectArray *) nil_chk(nextTabStopHolder)) replaceObjectAtIndex:0 withObject:nil];
            (*[((IOSBooleanArray *) nil_chk(requireNextWordHolder)) booleanRefAtIndex:0]) = NO;
            id<OrgOssPdfreporterEngineFillTextLine> baseLine = [((id<OrgOssPdfreporterEngineFillTextLineWrapper>) nil_chk(lineWrapper)) baseTextLineWithInt:startIndex];
            maxAscent = [((id<OrgOssPdfreporterEngineFillTextLine>) nil_chk(baseLine)) getAscent];
            maxDescent = [((id<OrgOssPdfreporterEngineFillTextLine>) nil_chk(baseLine)) getDescent];
            maxLeading = [((id<OrgOssPdfreporterEngineFillTextLine>) nil_chk(baseLine)) getLeading];
          }
          else {
            (void) [((IOSObjectArray *) nil_chk(nextTabStopHolder)) replaceObjectAtIndex:0 withObject:[OrgOssPdfreporterEngineUtilParagraphUtil getFirstTabStopWithOrgOssPdfreporterEngineJRParagraph:jrParagraph_ withFloat:endX]];
          }
        }
        else {
          (void) [((IOSObjectArray *) nil_chk(nextTabStopHolder)) replaceObjectAtIndex:0 withObject:nil];
          (*[((IOSBooleanArray *) nil_chk(requireNextWordHolder)) booleanRefAtIndex:0]) = NO;
        }
      }
    }
    oldSegment = crtSegment;
  }
  float lineHeight = [OrgOssPdfreporterEngineFillLineHeightCalculator getLineHeightWithBOOL:((OrgOssPdfreporterEngineFillTextMeasurer_TextMeasuredState *) nil_chk(measuredState_)).lines == 0 withOrgOssPdfreporterEngineJRParagraph:jrParagraph_ withFloat:maxLeading withFloat:maxAscent];
  if (((OrgOssPdfreporterEngineFillTextMeasurer_TextMeasuredState *) nil_chk(measuredState_)).lines == 0) {
    lineHeight += [((JavaLangInteger *) nil_chk([((id<OrgOssPdfreporterEngineJRParagraph>) nil_chk(jrParagraph_)) getSpacingBefore])) intValue];
  }
  float newTextHeight = ((OrgOssPdfreporterEngineFillTextMeasurer_TextMeasuredState *) nil_chk(measuredState_)).textHeight + lineHeight;
  BOOL fits = newTextHeight + maxDescent <= maxHeight_;
  if (fits) {
    prevMeasuredState_ = [((OrgOssPdfreporterEngineFillTextMeasurer_TextMeasuredState *) nil_chk(measuredState_)) cloneState];
    ((OrgOssPdfreporterEngineFillTextMeasurer_TextMeasuredState *) nil_chk(measuredState_)).isLeftToRight_ = isLeftToRight;
    ((OrgOssPdfreporterEngineFillTextMeasurer_TextMeasuredState *) nil_chk(measuredState_)).textHeight = newTextHeight;
    ((OrgOssPdfreporterEngineFillTextMeasurer_TextMeasuredState *) nil_chk(measuredState_)).lines++;
    if ((tabIndexes == nil || [((id<JavaUtilList>) nil_chk(tabIndexes)) size] == 0) && ![self hasParagraphIndents]) {
      ((OrgOssPdfreporterEngineFillTextMeasurer_TextMeasuredState *) nil_chk(measuredState_)).fontSizeSum += [((id<OrgOssPdfreporterEngineFillTextLineWrapper>) nil_chk(lineWrapper)) maxFontSizeWithInt:lineStartPosition withInt:lineStartPosition + characterCount];
      if (((OrgOssPdfreporterEngineFillTextMeasurer_TextMeasuredState *) nil_chk(measuredState_)).lines == 1) {
        ((OrgOssPdfreporterEngineFillTextMeasurer_TextMeasuredState *) nil_chk(measuredState_)).firstLineLeading = ((OrgOssPdfreporterEngineFillTextMeasurer_TextMeasuredState *) nil_chk(measuredState_)).textHeight;
        ((OrgOssPdfreporterEngineFillTextMeasurer_TextMeasuredState *) nil_chk(measuredState_)).firstLineMaxFontSize = ((OrgOssPdfreporterEngineFillTextMeasurer_TextMeasuredState *) nil_chk(measuredState_)).fontSizeSum;
      }
    }
    ((OrgOssPdfreporterEngineFillTextMeasurer_TextMeasuredState *) nil_chk(measuredState_)).textHeight += maxDescent;
    ((OrgOssPdfreporterEngineFillTextMeasurer_TextMeasuredState *) nil_chk(measuredState_)).textOffset += [((id<OrgOssPdfreporterEngineFillTextLineWrapper>) nil_chk(lineWrapper)) paragraphPosition] - lineStartPosition;
    if ([((id<OrgOssPdfreporterEngineFillTextLineWrapper>) nil_chk(lineWrapper)) paragraphPosition] < [((id<OrgOssPdfreporterEngineFillTextLineWrapper>) nil_chk(lineWrapper)) paragraphEnd]) {
      [((OrgOssPdfreporterEngineFillTextMeasurer_TextMeasuredState *) nil_chk(measuredState_)) addLineBreak];
    }
  }
  return fits;
}

- (id<OrgOssPdfreporterEngineJRPropertiesHolder>)getTextPropertiesHolder {
  return propertiesHolder_;
}

+ (void)initialize {
  if (self == [OrgOssPdfreporterEngineFillTextMeasurer class]) {
    OrgOssPdfreporterEngineFillTextMeasurer_logger_ = [JavaUtilLoggingLogger getLoggerWithNSString:[[IOSClass classWithClass:[OrgOssPdfreporterEngineFillTextMeasurer class]] getName]];
  }
}

- (void)copyAllPropertiesTo:(id)copy {
  [super copyAllPropertiesTo:copy];
  OrgOssPdfreporterEngineFillTextMeasurer *typedCopy = (OrgOssPdfreporterEngineFillTextMeasurer *) copy;
  typedCopy.jasperReportsContext = jasperReportsContext_;
  typedCopy.textElement = textElement_;
  typedCopy.propertiesHolder = propertiesHolder_;
  typedCopy.complextLineWrapper = complextLineWrapper_;
  typedCopy.width = width_;
  typedCopy.height = height_;
  typedCopy.topPadding = topPadding_;
  typedCopy.leftPadding = leftPadding_;
  typedCopy.bottomPadding = bottomPadding_;
  typedCopy.rightPadding = rightPadding_;
  typedCopy.jrParagraph = jrParagraph_;
  typedCopy.formatWidth = formatWidth_;
  typedCopy.maxHeight = maxHeight_;
  typedCopy.canOverflow = canOverflow_;
  typedCopy.ignoreMissingFont = ignoreMissingFont_;
  typedCopy.measuredState = measuredState_;
  typedCopy.prevMeasuredState = prevMeasuredState_;
}

@end
@implementation OrgOssPdfreporterEngineFillTabSegment

@synthesize textLine = textLine_;
@synthesize leftX = leftX_;
@synthesize rightX = rightX_;

- (id)init {
  return [super init];
}

- (void)copyAllPropertiesTo:(id)copy {
  [super copyAllPropertiesTo:copy];
  OrgOssPdfreporterEngineFillTabSegment *typedCopy = (OrgOssPdfreporterEngineFillTabSegment *) copy;
  typedCopy.textLine = textLine_;
  typedCopy.leftX = leftX_;
  typedCopy.rightX = rightX_;
}

@end
@implementation OrgOssPdfreporterEngineFillTextMeasurer_TextMeasuredState

@synthesize saveLineBreakOffsets = saveLineBreakOffsets_;
@synthesize textOffset = textOffset_;
@synthesize lines = lines_;
@synthesize fontSizeSum = fontSizeSum_;
@synthesize firstLineMaxFontSize = firstLineMaxFontSize_;
@synthesize paragraphStartLine = paragraphStartLine_;
@synthesize textHeight = textHeight_;
@synthesize firstLineLeading = firstLineLeading_;
@synthesize isLeftToRight_ = isLeftToRight__;
@synthesize textSuffix = textSuffix_;
@synthesize lastOffset = lastOffset_;
@synthesize lineBreakOffsets = lineBreakOffsets_;

- (id)initWithBOOL:(BOOL)saveLineBreakOffsets {
  if ((self = [super init])) {
    isLeftToRight__ = YES;
    self.saveLineBreakOffsets = saveLineBreakOffsets;
  }
  return self;
}

- (BOOL)isLeftToRight {
  return isLeftToRight__;
}

- (int)getTextOffset {
  return textOffset_;
}

- (float)getTextHeight {
  return textHeight_;
}

- (float)getLineSpacingFactor {
  if (lines_ > 0 && fontSizeSum_ > 0) {
    return textHeight_ / fontSizeSum_;
  }
  return 0;
}

- (float)getLeadingOffset {
  return firstLineLeading_ - firstLineMaxFontSize_ * [self getLineSpacingFactor];
}

- (NSString *)getTextSuffix {
  return textSuffix_;
}

- (OrgOssPdfreporterEngineFillTextMeasurer_TextMeasuredState *)cloneState {
  @try {
    OrgOssPdfreporterEngineFillTextMeasurer_TextMeasuredState *clone = (OrgOssPdfreporterEngineFillTextMeasurer_TextMeasuredState *) [super clone];
    if (lineBreakOffsets_ != nil) {
      ((OrgOssPdfreporterEngineFillTextMeasurer_TextMeasuredState *) nil_chk(clone)).lineBreakOffsets = (JavaUtilArrayList *) [lineBreakOffsets_ clone];
    }
    return clone;
  }
  @catch (JavaLangCloneNotSupportedException *e) {
    @throw [[OrgOssPdfreporterEngineJRRuntimeException alloc] initWithJavaLangThrowable:e];
  }
}

- (void)addLineBreak {
  if (saveLineBreakOffsets_) {
    if (lineBreakOffsets_ == nil) {
      lineBreakOffsets_ = [[JavaUtilArrayList alloc] init];
    }
    int breakOffset = textOffset_ - lastOffset_;
    [((JavaUtilArrayList *) nil_chk(lineBreakOffsets_)) addWithId:[JavaLangInteger valueOfWithInt:breakOffset]];
    lastOffset_ = textOffset_;
  }
}

- (IOSShortArray *)getLineBreakOffsets {
  if (!saveLineBreakOffsets_) {
    return nil;
  }
  int exclude = lastOffset_ == textOffset_ ? 1 : 0;
  if (lineBreakOffsets_ == nil || [((JavaUtilArrayList *) nil_chk(lineBreakOffsets_)) size] <= exclude) {
    return [OrgOssPdfreporterEngineJRPrintText ZERO_LINE_BREAK_OFFSETS];
  }
  IOSShortArray *offsets = [IOSShortArray arrayWithLength:[((JavaUtilArrayList *) nil_chk(lineBreakOffsets_)) size] - exclude];
  BOOL overflow = NO;
  for (int i = 0; i < (int) [((IOSShortArray *) nil_chk(offsets)) count]; i++) {
    int offset = [((JavaLangInteger *) nil_chk([((JavaUtilArrayList *) nil_chk(lineBreakOffsets_)) getWithInt:i])) intValue];
    if (offset > JavaLangShort_MAX_VALUE) {
      overflow = YES;
      break;
    }
    (*[((IOSShortArray *) nil_chk(offsets)) shortRefAtIndex:i]) = (short int) offset;
  }
  if (overflow) {
    return nil;
  }
  return offsets;
}

- (id)copyWithZone:(NSZone *)zone {
  return [self clone];
}

- (void)copyAllPropertiesTo:(id)copy {
  [super copyAllPropertiesTo:copy];
  OrgOssPdfreporterEngineFillTextMeasurer_TextMeasuredState *typedCopy = (OrgOssPdfreporterEngineFillTextMeasurer_TextMeasuredState *) copy;
  typedCopy.saveLineBreakOffsets = saveLineBreakOffsets_;
  typedCopy.textOffset = textOffset_;
  typedCopy.lines = lines_;
  typedCopy.fontSizeSum = fontSizeSum_;
  typedCopy.firstLineMaxFontSize = firstLineMaxFontSize_;
  typedCopy.paragraphStartLine = paragraphStartLine_;
  typedCopy.textHeight = textHeight_;
  typedCopy.firstLineLeading = firstLineLeading_;
  typedCopy.isLeftToRight_ = isLeftToRight__;
  typedCopy.textSuffix = textSuffix_;
  typedCopy.lastOffset = lastOffset_;
  typedCopy.lineBreakOffsets = lineBreakOffsets_;
}

@end
@implementation OrgOssPdfreporterEngineFillTextMeasurer_Context

@synthesize this$0 = this$0_;

- (id<OrgOssPdfreporterEngineJasperReportsContext>)getJasperReportsContext {
  return this$0_.jasperReportsContext;
}

- (id<OrgOssPdfreporterEngineJRCommonText>)getElement {
  return this$0_.textElement;
}

- (id<OrgOssPdfreporterEngineJRPropertiesHolder>)getPropertiesHolder {
  return this$0_.propertiesHolder;
}

- (BOOL)isIgnoreMissingFont {
  return this$0_.ignoreMissingFont;
}

- (id)initWithOrgOssPdfreporterEngineFillTextMeasurer:(OrgOssPdfreporterEngineFillTextMeasurer *)outer$ {
  if ((self = [super init])) {
    this$0_ = outer$;
  }
  return self;
}

- (void)copyAllPropertiesTo:(id)copy {
  [super copyAllPropertiesTo:copy];
  OrgOssPdfreporterEngineFillTextMeasurer_Context *typedCopy = (OrgOssPdfreporterEngineFillTextMeasurer_Context *) copy;
  typedCopy.this$0 = this$0_;
}

@end
