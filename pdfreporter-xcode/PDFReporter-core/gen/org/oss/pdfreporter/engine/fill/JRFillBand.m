//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: pdfreporter-core/src/org/oss/pdfreporter/engine/fill/JRFillBand.java
//
//  Created by kendra on 9/27/13.
//

#include "IOSObjectArray.h"
#include "java/lang/Boolean.h"
#include "java/lang/System.h"
#include "java/lang/UnsupportedOperationException.h"
#include "java/util/HashMap.h"
#include "java/util/HashSet.h"
#include "java/util/Iterator.h"
#include "java/util/Map.h"
#include "java/util/Set.h"
#include "org/oss/pdfreporter/engine/JRBand.h"
#include "org/oss/pdfreporter/engine/JRElement.h"
#include "org/oss/pdfreporter/engine/JRExpression.h"
#include "org/oss/pdfreporter/engine/JRGroup.h"
#include "org/oss/pdfreporter/engine/JROrigin.h"
#include "org/oss/pdfreporter/engine/JRPropertiesHolder.h"
#include "org/oss/pdfreporter/engine/JRPropertiesMap.h"
#include "org/oss/pdfreporter/engine/JRPropertiesUtil.h"
#include "org/oss/pdfreporter/engine/JasperPrint.h"
#include "org/oss/pdfreporter/engine/JasperReport.h"
#include "org/oss/pdfreporter/engine/fill/JRBaseFiller.h"
#include "org/oss/pdfreporter/engine/fill/JREvaluationTime.h"
#include "org/oss/pdfreporter/engine/fill/JRFillBand.h"
#include "org/oss/pdfreporter/engine/fill/JRFillContext.h"
#include "org/oss/pdfreporter/engine/fill/JRFillElement.h"
#include "org/oss/pdfreporter/engine/fill/JRFillElementContainer.h"
#include "org/oss/pdfreporter/engine/fill/JRFillElementGroup.h"
#include "org/oss/pdfreporter/engine/fill/JRFillObjectFactory.h"
#include "org/oss/pdfreporter/engine/fill/JRFillSubreport.h"
#include "org/oss/pdfreporter/engine/fill/JRFillVariable.h"
#include "org/oss/pdfreporter/engine/fill/JRPrintBand.h"
#include "org/oss/pdfreporter/engine/type/SplitTypeEnum.h"

@implementation OrgOssPdfreporterEngineFillJRFillBand

@synthesize parent = parent_;
@synthesize isPrintWhenTrue_ = isPrintWhenTrue__;
@synthesize isNewPageColumn_ = isNewPageColumn__;
@synthesize isFirstWholeOnPageColumn_ = isFirstWholeOnPageColumn__;
@synthesize isNewGroupMap = isNewGroupMap_;
@synthesize nowEvaluationTimes = nowEvaluationTimes_;
@synthesize savedVariableValues = savedVariableValues_;
@synthesize origin = origin_;
@synthesize splitType = splitType_;
@synthesize breakHeight = breakHeight_;

- (id)initWithOrgOssPdfreporterEngineFillJRBaseFiller:(OrgOssPdfreporterEngineFillJRBaseFiller *)filler
                    withOrgOssPdfreporterEngineJRBand:(id<OrgOssPdfreporterEngineJRBand>)band
   withOrgOssPdfreporterEngineFillJRFillObjectFactory:(OrgOssPdfreporterEngineFillJRFillObjectFactory *)factory {
  if ((self = [super initWithOrgOssPdfreporterEngineFillJRBaseFiller:filler withOrgOssPdfreporterEngineJRElementGroup:band withOrgOssPdfreporterEngineFillJRFillObjectFactory:factory])) {
    isPrintWhenTrue__ = YES;
    isNewGroupMap_ = [[JavaUtilHashMap alloc] init];
    savedVariableValues_ = [[JavaUtilHashMap alloc] init];
    parent_ = band;
    if ((int) [((IOSObjectArray *) nil_chk(deepElements_)) count] > 0) {
      for (int i = 0; i < (int) [((IOSObjectArray *) nil_chk(deepElements_)) count]; i++) {
        [((OrgOssPdfreporterEngineFillJRFillElement *) nil_chk([((IOSObjectArray *) nil_chk(deepElements_)) objectAtIndex:i])) setBandWithOrgOssPdfreporterEngineFillJRFillBand:self];
      }
    }
    splitType_ = (parent_ == nil ? nil : [((id<OrgOssPdfreporterEngineJRBand>) nil_chk(parent_)) getSplitTypeValue]);
    if (splitType_ == nil) {
      splitType_ = [OrgOssPdfreporterEngineTypeSplitTypeEnumEnum getByNameWithNSString:[((OrgOssPdfreporterEngineJRPropertiesUtil *) nil_chk([((OrgOssPdfreporterEngineFillJRBaseFiller *) nil_chk(filler)) getPropertiesUtil])) getPropertyWithOrgOssPdfreporterEngineJRPropertiesHolder:[((OrgOssPdfreporterEngineFillJRBaseFiller *) nil_chk(filler)) getJasperReport] withNSString:[OrgOssPdfreporterEngineJRBand PROPERTY_SPLIT_TYPE]]];
    }
    breakHeight_ = [self getHeight];
    if ([OrgOssPdfreporterEngineTypeSplitTypeEnumEnum IMMEDIATE] == [self getSplitTypeValue] && elements_ != nil && (int) [((IOSObjectArray *) nil_chk(elements_)) count] > 0) {
      for (int i = 0; i < (int) [((IOSObjectArray *) nil_chk(elements_)) count]; i++) {
        id<OrgOssPdfreporterEngineJRElement> element = [((IOSObjectArray *) nil_chk(elements_)) objectAtIndex:i];
        int bottom = [((id<OrgOssPdfreporterEngineJRElement>) nil_chk(element)) getY] + [((id<OrgOssPdfreporterEngineJRElement>) nil_chk(element)) getHeight];
        breakHeight_ = bottom < breakHeight_ ? bottom : breakHeight_;
      }
    }
    [self initElements];
    [self initConditionalStyles];
    nowEvaluationTimes_ = [[JavaUtilHashSet alloc] init];
  }
  return self;
}

- (OrgOssPdfreporterEngineJROrigin *)getOrigin {
  return origin_;
}

- (void)setOriginWithOrgOssPdfreporterEngineJROrigin:(OrgOssPdfreporterEngineJROrigin *)origin {
  self.origin = origin;
  [((OrgOssPdfreporterEngineJasperPrint *) nil_chk([((OrgOssPdfreporterEngineFillJRBaseFiller *) nil_chk(self.filler)) getJasperPrint])) addOriginWithOrgOssPdfreporterEngineJROrigin:origin];
}

- (void)setNewPageColumnWithBOOL:(BOOL)isNew {
  self.isNewPageColumn_ = isNew;
}

- (BOOL)isNewPageColumn {
  return isNewPageColumn__;
}

- (BOOL)isFirstWholeOnPageColumn {
  return isFirstWholeOnPageColumn__;
}

- (void)setNewGroupWithOrgOssPdfreporterEngineJRGroup:(id<OrgOssPdfreporterEngineJRGroup>)group
                                             withBOOL:(BOOL)isNew {
  (void) [((id<JavaUtilMap>) nil_chk(isNewGroupMap_)) putWithId:group withId:isNew ? [JavaLangBoolean getTRUE] : [JavaLangBoolean getFALSE]];
}

- (BOOL)isNewGroupWithOrgOssPdfreporterEngineJRGroup:(id<OrgOssPdfreporterEngineJRGroup>)group {
  JavaLangBoolean *value = [((id<JavaUtilMap>) nil_chk(isNewGroupMap_)) getWithId:group];
  if (value == nil) {
    value = [JavaLangBoolean getFALSE];
  }
  return [((JavaLangBoolean *) nil_chk(value)) booleanValue];
}

- (int)getHeight {
  return (parent_ == nil ? 0 : [((id<OrgOssPdfreporterEngineJRBand>) nil_chk(parent_)) getHeight]);
}

- (int)getBreakHeight {
  return breakHeight_;
}

- (OrgOssPdfreporterEngineTypeSplitTypeEnumEnum *)getSplitTypeValue {
  return splitType_;
}

- (void)setSplitTypeWithOrgOssPdfreporterEngineTypeSplitTypeEnumEnum:(OrgOssPdfreporterEngineTypeSplitTypeEnumEnum *)splitType {
  @throw [[JavaLangUnsupportedOperationException alloc] init];
}

- (id<OrgOssPdfreporterEngineJRExpression>)getPrintWhenExpression {
  return (parent_ == nil ? nil : [((id<OrgOssPdfreporterEngineJRBand>) nil_chk(parent_)) getPrintWhenExpression]);
}

- (BOOL)isSplitPrevented {
  return [OrgOssPdfreporterEngineTypeSplitTypeEnumEnum PREVENT] == [self getSplitTypeValue];
}

- (BOOL)isPrintWhenExpressionNull {
  return ([self getPrintWhenExpression] == nil);
}

- (BOOL)isPrintWhenTrue {
  return isPrintWhenTrue__;
}

- (void)setPrintWhenTrueWithBOOL:(BOOL)isPrintWhenTrue {
  self.isPrintWhenTrue_ = isPrintWhenTrue;
}

- (BOOL)isToPrint {
  return ([self isPrintWhenExpressionNull] || (![self isPrintWhenExpressionNull] && [self isPrintWhenTrue]));
}

- (void)evaluatePrintWhenExpressionWithChar:(char)evaluation {
  BOOL isPrintTrue = NO;
  id<OrgOssPdfreporterEngineJRExpression> expression = [self getPrintWhenExpression];
  if (expression != nil) {
    JavaLangBoolean *printWhenExpressionValue = (JavaLangBoolean *) [((OrgOssPdfreporterEngineFillJRBaseFiller *) nil_chk(filler_)) evaluateExpressionWithOrgOssPdfreporterEngineJRExpression:expression withChar:evaluation];
    if (printWhenExpressionValue == nil) {
      isPrintTrue = NO;
    }
    else {
      isPrintTrue = [printWhenExpressionValue booleanValue];
    }
  }
  [self setPrintWhenTrueWithBOOL:isPrintTrue];
}

- (OrgOssPdfreporterEngineFillJRPrintBand *)refillWithInt:(int)availableHeight {
  [self rewind];
  [self restoreSavedVariables];
  return [self fillWithInt:availableHeight];
}

- (OrgOssPdfreporterEngineFillJRPrintBand *)fill {
  return [self fillWithInt:[self getHeight] withBOOL:NO];
}

- (OrgOssPdfreporterEngineFillJRPrintBand *)fillWithInt:(int)availableHeight {
  return [self fillWithInt:availableHeight withBOOL:YES];
}

- (OrgOssPdfreporterEngineFillJRPrintBand *)fillWithInt:(int)availableHeight
                                               withBOOL:(BOOL)isOverflowAllowed {
  [((OrgOssPdfreporterEngineFillJRBaseFiller *) nil_chk(filler_)) checkInterrupted];
  [((OrgOssPdfreporterEngineFillJRFillContext *) nil_chk(((OrgOssPdfreporterEngineFillJRBaseFiller *) nil_chk(filler_)).fillContext)) ensureMasterPageAvailable];
  [((OrgOssPdfreporterEngineFillJRBaseFiller *) nil_chk(filler_)) setBandOverFlowAllowedWithBOOL:isOverflowAllowed];
  [self initFill];
  if (isNewPageColumn__ && !isOverflow_) {
    isFirstWholeOnPageColumn__ = YES;
  }
  [self resetElements];
  [self prepareElementsWithInt:availableHeight withBOOL:isOverflowAllowed];
  [self stretchElements];
  [self moveBandBottomElements];
  [self removeBlankElements];
  isFirstWholeOnPageColumn__ = isNewPageColumn__ && isOverflow_;
  isNewPageColumn__ = NO;
  isNewGroupMap_ = [[JavaUtilHashMap alloc] init];
  OrgOssPdfreporterEngineFillJRPrintBand *printBand = [[OrgOssPdfreporterEngineFillJRPrintBand alloc] init];
  [self fillElementsWithOrgOssPdfreporterEngineJRPrintElementContainer:printBand];
  return printBand;
}

- (int)getContainerHeight {
  return [self getHeight];
}

- (BOOL)isVariableUsedInSubreportReturnsWithNSString:(NSString *)variableName {
  BOOL used = NO;
  if (deepElements_ != nil) {
    for (int i = 0; i < (int) [deepElements_ count]; i++) {
      OrgOssPdfreporterEngineFillJRFillElement *element = [deepElements_ objectAtIndex:i];
      if ([element isKindOfClass:[OrgOssPdfreporterEngineFillJRFillSubreport class]]) {
        OrgOssPdfreporterEngineFillJRFillSubreport *subreport = (OrgOssPdfreporterEngineFillJRFillSubreport *) element;
        if ([((OrgOssPdfreporterEngineFillJRFillSubreport *) nil_chk(subreport)) usesForReturnValueWithNSString:variableName]) {
          used = YES;
          break;
        }
      }
    }
  }
  return used;
}

- (void)addNowEvaluationTimeWithOrgOssPdfreporterEngineFillJREvaluationTime:(OrgOssPdfreporterEngineFillJREvaluationTime *)evaluationTime {
  [((id<JavaUtilSet>) nil_chk(nowEvaluationTimes_)) addWithId:evaluationTime];
}

- (void)addNowEvaluationTimesWithOrgOssPdfreporterEngineFillJREvaluationTimeArray:(IOSObjectArray *)evaluationTimes {
  for (int i = 0; i < (int) [((IOSObjectArray *) nil_chk(evaluationTimes)) count]; i++) {
    [((id<JavaUtilSet>) nil_chk(nowEvaluationTimes_)) addWithId:[((IOSObjectArray *) nil_chk(evaluationTimes)) objectAtIndex:i]];
  }
}

- (BOOL)isNowEvaluationTimeWithOrgOssPdfreporterEngineFillJREvaluationTime:(OrgOssPdfreporterEngineFillJREvaluationTime *)evaluationTime {
  return [((id<JavaUtilSet>) nil_chk(nowEvaluationTimes_)) containsWithId:evaluationTime];
}

- (int)getId {
  return [JavaLangSystem identityHashCodeWithId:self];
}

- (void)evaluateWithChar:(char)evaluation {
  [self resetSavedVariables];
  [self evaluateConditionalStylesWithChar:evaluation];
  [super evaluateWithChar:evaluation];
}

- (void)resetSavedVariables {
  [((id<JavaUtilMap>) nil_chk(savedVariableValues_)) clear];
}

- (void)saveVariableWithNSString:(NSString *)variableName {
  if (![((id<JavaUtilMap>) nil_chk(savedVariableValues_)) containsKeyWithId:variableName]) {
    id value = [((OrgOssPdfreporterEngineFillJRBaseFiller *) nil_chk(filler_)) getVariableValueWithNSString:variableName];
    (void) [((id<JavaUtilMap>) nil_chk(savedVariableValues_)) putWithId:variableName withId:value];
  }
}

- (void)restoreSavedVariables {
  for (id<JavaUtilIterator> it = [((id<JavaUtilSet>) nil_chk([((id<JavaUtilMap>) nil_chk(savedVariableValues_)) entrySet])) iterator]; [((id<JavaUtilIterator>) nil_chk(it)) hasNext]; ) {
    id<JavaUtilMap_Entry> entry = [((id<JavaUtilIterator>) nil_chk(it)) next];
    NSString *variableName = [((id<JavaUtilMap_Entry>) nil_chk(entry)) getKey];
    id value = [((id<JavaUtilMap_Entry>) nil_chk(entry)) getValue];
    OrgOssPdfreporterEngineFillJRFillVariable *variable = [((OrgOssPdfreporterEngineFillJRBaseFiller *) nil_chk(filler_)) getVariableWithNSString:variableName];
    [((OrgOssPdfreporterEngineFillJRFillVariable *) nil_chk(variable)) setOldValueWithId:value];
    [((OrgOssPdfreporterEngineFillJRFillVariable *) nil_chk(variable)) setValueWithId:value];
    [((OrgOssPdfreporterEngineFillJRFillVariable *) nil_chk(variable)) setIncrementedValueWithId:value];
  }
}

- (BOOL)isEmpty {
  return self == ((OrgOssPdfreporterEngineFillJRBaseFiller *) nil_chk(filler_)).missingFillBand || ([self getHeight] == 0 && ([self getElements] == nil || (int) [((IOSObjectArray *) nil_chk([self getElements])) count] == 0) && [self getPrintWhenExpression] == nil);
}

- (BOOL)isPageBreakInhibited {
  BOOL isPageBreakInhibited = ((OrgOssPdfreporterEngineFillJRBaseFiller *) nil_chk(filler_)).isFirstPageBand && firstYElement_ == nil;
  if (isPageBreakInhibited && [((OrgOssPdfreporterEngineFillJRBaseFiller *) nil_chk(filler_)) isSubreport]) {
    isPageBreakInhibited = [((OrgOssPdfreporterEngineFillJRFillBand *) nil_chk([((OrgOssPdfreporterEngineFillJRFillSubreport *) nil_chk(((OrgOssPdfreporterEngineFillJRBaseFiller *) nil_chk(filler_)).parentElement)) getBand])) isPageBreakInhibited];
  }
  return isPageBreakInhibited;
}

- (BOOL)hasProperties {
  return [((id<OrgOssPdfreporterEngineJRBand>) nil_chk(parent_)) hasProperties];
}

- (OrgOssPdfreporterEngineJRPropertiesMap *)getPropertiesMap {
  return [((id<OrgOssPdfreporterEngineJRBand>) nil_chk(parent_)) getPropertiesMap];
}

- (id<OrgOssPdfreporterEngineJRPropertiesHolder>)getParentProperties {
  return nil;
}

- (void)copyAllPropertiesTo:(id)copy {
  [super copyAllPropertiesTo:copy];
  OrgOssPdfreporterEngineFillJRFillBand *typedCopy = (OrgOssPdfreporterEngineFillJRFillBand *) copy;
  typedCopy.parent = parent_;
  typedCopy.isPrintWhenTrue_ = isPrintWhenTrue__;
  typedCopy.isNewPageColumn_ = isNewPageColumn__;
  typedCopy.isFirstWholeOnPageColumn_ = isFirstWholeOnPageColumn__;
  typedCopy.isNewGroupMap = isNewGroupMap_;
  typedCopy.nowEvaluationTimes = nowEvaluationTimes_;
  typedCopy.savedVariableValues = savedVariableValues_;
  typedCopy.origin = origin_;
  typedCopy.splitType = splitType_;
  typedCopy.breakHeight = breakHeight_;
}

@end
