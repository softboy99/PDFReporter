//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: pdfreporter-core/src/org/oss/pdfreporter/engine/fill/JRPrintBand.java
//
//  Created by kendra on 9/27/13.
//

#include "java/lang/IllegalStateException.h"
#include "java/lang/UnsupportedOperationException.h"
#include "java/util/ArrayList.h"
#include "java/util/Collection.h"
#include "java/util/Iterator.h"
#include "java/util/List.h"
#include "org/oss/pdfreporter/engine/JRPrintElement.h"
#include "org/oss/pdfreporter/engine/fill/JRPrintBand.h"

@implementation OrgOssPdfreporterEngineFillJRPrintBand

@synthesize height = height_;
@synthesize elements = elements_;
@synthesize iterated = iterated_;

- (int)getHeight {
  return self.height;
}

- (void)setHeightWithInt:(int)height {
  self.height = height;
}

- (id<JavaUtilList>)getElements {
  @throw [[JavaLangUnsupportedOperationException alloc] init];
}

- (id<JavaUtilIterator>)iterateElements {
  if (iterated_) {
    @throw [[JavaLangIllegalStateException alloc] initWithNSString:@"Elements already iterated"];
  }
  iterated_ = YES;
  return [[OrgOssPdfreporterEngineFillJRPrintBand_ElementsIterator alloc] initWithJavaUtilList:elements_];
}

- (void)addElementWithOrgOssPdfreporterEngineJRPrintElement:(id<OrgOssPdfreporterEngineJRPrintElement>)element {
  [((id<JavaUtilList>) nil_chk(self.elements)) addWithId:element];
}

- (void)addOffsetElementsWithJavaUtilCollection:(id<JavaUtilCollection>)elements
                                        withInt:(int)offsetX
                                        withInt:(int)offsetY {
  if (elements == nil || [((id<JavaUtilCollection>) nil_chk(elements)) isEmpty]) {
    return;
  }
  OrgOssPdfreporterEngineFillJRPrintBand_OffsetElements *offsetElements = [[OrgOssPdfreporterEngineFillJRPrintBand_OffsetElements alloc] initWithJavaUtilCollection:elements withInt:offsetX withInt:offsetY];
  [((id<JavaUtilList>) nil_chk(self.elements)) addWithId:offsetElements];
}

- (id)init {
  if ((self = [super init])) {
    elements_ = [[JavaUtilArrayList alloc] init];
    iterated_ = NO;
  }
  return self;
}

- (void)copyAllPropertiesTo:(id)copy {
  [super copyAllPropertiesTo:copy];
  OrgOssPdfreporterEngineFillJRPrintBand *typedCopy = (OrgOssPdfreporterEngineFillJRPrintBand *) copy;
  typedCopy.height = height_;
  typedCopy.elements = elements_;
  typedCopy.iterated = iterated_;
}

@end
@implementation OrgOssPdfreporterEngineFillJRPrintBand_OffsetElements

@synthesize elements = elements_;
@synthesize offsetX = offsetX_;
@synthesize offsetY = offsetY_;

- (id)initWithJavaUtilCollection:(id<JavaUtilCollection>)elements
                         withInt:(int)offsetX
                         withInt:(int)offsetY {
  if ((self = [super init])) {
    self.elements = elements;
    self.offsetX = offsetX;
    self.offsetY = offsetY;
  }
  return self;
}

- (void)copyAllPropertiesTo:(id)copy {
  [super copyAllPropertiesTo:copy];
  OrgOssPdfreporterEngineFillJRPrintBand_OffsetElements *typedCopy = (OrgOssPdfreporterEngineFillJRPrintBand_OffsetElements *) copy;
  typedCopy.elements = elements_;
  typedCopy.offsetX = offsetX_;
  typedCopy.offsetY = offsetY_;
}

@end
@implementation OrgOssPdfreporterEngineFillJRPrintBand_ElementsIterator

@synthesize iterator = iterator_;
@synthesize subElements = subElements_;
@synthesize subIterator = subIterator_;

- (id)initWithJavaUtilList:(id<JavaUtilList>)elements {
  if ((self = [super init])) {
    self.iterator = [((id<JavaUtilList>) nil_chk(elements)) iterator];
  }
  return self;
}

- (BOOL)hasNext {
  return (subIterator_ != nil && [((id<JavaUtilIterator>) nil_chk(subIterator_)) hasNext]) || [((id<JavaUtilIterator>) nil_chk(iterator_)) hasNext];
}

- (id<OrgOssPdfreporterEngineJRPrintElement>)next {
  id<OrgOssPdfreporterEngineJRPrintElement> element = nil;
  if (subIterator_ != nil) {
    if ([subIterator_ hasNext]) {
      element = [subIterator_ next];
      [subIterator_ remove];
      [self setSubOffsetsWithOrgOssPdfreporterEngineJRPrintElement:element];
    }
    else {
      subIterator_ = nil;
      subElements_ = nil;
    }
  }
  if (element == nil) {
    id next = [((id<JavaUtilIterator>) nil_chk(iterator_)) next];
    if ([next conformsToProtocol: @protocol(OrgOssPdfreporterEngineJRPrintElement)]) {
      element = (id<OrgOssPdfreporterEngineJRPrintElement>) next;
    }
    else {
      subElements_ = (OrgOssPdfreporterEngineFillJRPrintBand_OffsetElements *) next;
      subIterator_ = [((id<JavaUtilCollection>) nil_chk(((OrgOssPdfreporterEngineFillJRPrintBand_OffsetElements *) nil_chk(subElements_)).elements)) iterator];
      element = [((id<JavaUtilIterator>) nil_chk(subIterator_)) next];
      [((id<JavaUtilIterator>) nil_chk(subIterator_)) remove];
      [self setSubOffsetsWithOrgOssPdfreporterEngineJRPrintElement:element];
    }
  }
  return element;
}

- (void)setSubOffsetsWithOrgOssPdfreporterEngineJRPrintElement:(id<OrgOssPdfreporterEngineJRPrintElement>)element {
  [((id<OrgOssPdfreporterEngineJRPrintElement>) nil_chk(element)) setXWithInt:((OrgOssPdfreporterEngineFillJRPrintBand_OffsetElements *) nil_chk(subElements_)).offsetX + [((id<OrgOssPdfreporterEngineJRPrintElement>) nil_chk(element)) getX]];
  [((id<OrgOssPdfreporterEngineJRPrintElement>) nil_chk(element)) setYWithInt:((OrgOssPdfreporterEngineFillJRPrintBand_OffsetElements *) nil_chk(subElements_)).offsetY + [((id<OrgOssPdfreporterEngineJRPrintElement>) nil_chk(element)) getY]];
}

- (void)remove {
  @throw [[JavaLangUnsupportedOperationException alloc] init];
}

- (void)copyAllPropertiesTo:(id)copy {
  [super copyAllPropertiesTo:copy];
  OrgOssPdfreporterEngineFillJRPrintBand_ElementsIterator *typedCopy = (OrgOssPdfreporterEngineFillJRPrintBand_ElementsIterator *) copy;
  typedCopy.iterator = iterator_;
  typedCopy.subElements = subElements_;
  typedCopy.subIterator = subIterator_;
}

@end
