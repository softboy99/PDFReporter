//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: pdfreporter-core/src/org/oss/pdfreporter/engine/fill/JRFillDatasetRun.java
//
//  Created by kendra on 9/27/13.
//

#include "IOSObjectArray.h"
#include "java/lang/UnsupportedOperationException.h"
#include "java/util/Map.h"
#include "org/oss/pdfreporter/data/cache/DataCacheHandler.h"
#include "org/oss/pdfreporter/engine/JRDataSource.h"
#include "org/oss/pdfreporter/engine/JRDatasetRun.h"
#include "org/oss/pdfreporter/engine/JRExpression.h"
#include "org/oss/pdfreporter/engine/JRParameter.h"
#include "org/oss/pdfreporter/engine/JRPropertiesHolder.h"
#include "org/oss/pdfreporter/engine/JRPropertiesMap.h"
#include "org/oss/pdfreporter/engine/JRPropertiesUtil.h"
#include "org/oss/pdfreporter/engine/JRQuery.h"
#include "org/oss/pdfreporter/engine/fill/FillDatasetPosition.h"
#include "org/oss/pdfreporter/engine/fill/IJRFillParameter.h"
#include "org/oss/pdfreporter/engine/fill/JRBaseFiller.h"
#include "org/oss/pdfreporter/engine/fill/JRCalculator.h"
#include "org/oss/pdfreporter/engine/fill/JRFillContext.h"
#include "org/oss/pdfreporter/engine/fill/JRFillDataset.h"
#include "org/oss/pdfreporter/engine/fill/JRFillDatasetRun.h"
#include "org/oss/pdfreporter/engine/fill/JRFillElementDataset.h"
#include "org/oss/pdfreporter/engine/fill/JRFillObjectFactory.h"
#include "org/oss/pdfreporter/engine/fill/JRFillSubreport.h"
#include "org/oss/pdfreporter/engine/type/IncrementTypeEnum.h"
#include "org/oss/pdfreporter/engine/type/ResetTypeEnum.h"
#include "org/oss/pdfreporter/sql/IConnection.h"
#include "org/oss/pdfreporter/uses/java/util/UUID.h"

@implementation OrgOssPdfreporterEngineFillJRFillDatasetRun

@synthesize filler = filler_;
@synthesize parentDatasetRun = parentDatasetRun_;
@synthesize dataset = dataset_;
@synthesize parametersMapExpression = parametersMapExpression_;
@synthesize parameters = parameters_;
@synthesize connectionExpression = connectionExpression_;
@synthesize dataSourceExpression = dataSourceExpression_;

- (id)initWithOrgOssPdfreporterEngineFillJRBaseFiller:(OrgOssPdfreporterEngineFillJRBaseFiller *)filler
              withOrgOssPdfreporterEngineJRDatasetRun:(id<OrgOssPdfreporterEngineJRDatasetRun>)datasetRun
   withOrgOssPdfreporterEngineFillJRFillObjectFactory:(OrgOssPdfreporterEngineFillJRFillObjectFactory *)factory {
  if ((self = [self initOrgOssPdfreporterEngineFillJRFillDatasetRunWithOrgOssPdfreporterEngineFillJRBaseFiller:filler withOrgOssPdfreporterEngineJRDatasetRun:datasetRun withOrgOssPdfreporterEngineFillJRFillDataset:[((id<JavaUtilMap>) nil_chk(((OrgOssPdfreporterEngineFillJRBaseFiller *) nil_chk(filler)).datasetMap)) getWithId:[((id<OrgOssPdfreporterEngineJRDatasetRun>) nil_chk(datasetRun)) getDatasetName]]])) {
    [((OrgOssPdfreporterEngineFillJRFillObjectFactory *) nil_chk(factory)) putWithId:datasetRun withId:self];
  }
  return self;
}

- (id)initOrgOssPdfreporterEngineFillJRFillDatasetRunWithOrgOssPdfreporterEngineFillJRBaseFiller:(OrgOssPdfreporterEngineFillJRBaseFiller *)filler
                                                         withOrgOssPdfreporterEngineJRDatasetRun:(id<OrgOssPdfreporterEngineJRDatasetRun>)datasetRun
                                                    withOrgOssPdfreporterEngineFillJRFillDataset:(OrgOssPdfreporterEngineFillJRFillDataset *)dataset {
  if ((self = [super init])) {
    self.filler = filler;
    self.dataset = dataset;
    self.parentDatasetRun = datasetRun;
    parametersMapExpression_ = [((id<OrgOssPdfreporterEngineJRDatasetRun>) nil_chk(datasetRun)) getParametersMapExpression];
    parameters_ = [((id<OrgOssPdfreporterEngineJRDatasetRun>) nil_chk(datasetRun)) getParameters];
    connectionExpression_ = [((id<OrgOssPdfreporterEngineJRDatasetRun>) nil_chk(datasetRun)) getConnectionExpression];
    dataSourceExpression_ = [((id<OrgOssPdfreporterEngineJRDatasetRun>) nil_chk(datasetRun)) getDataSourceExpression];
  }
  return self;
}

- (id)initWithOrgOssPdfreporterEngineFillJRBaseFiller:(OrgOssPdfreporterEngineFillJRBaseFiller *)filler
              withOrgOssPdfreporterEngineJRDatasetRun:(id<OrgOssPdfreporterEngineJRDatasetRun>)datasetRun
         withOrgOssPdfreporterEngineFillJRFillDataset:(OrgOssPdfreporterEngineFillJRFillDataset *)dataset {
  return [self initOrgOssPdfreporterEngineFillJRFillDatasetRunWithOrgOssPdfreporterEngineFillJRBaseFiller:filler withOrgOssPdfreporterEngineJRDatasetRun:datasetRun withOrgOssPdfreporterEngineFillJRFillDataset:dataset];
}

- (void)evaluateWithOrgOssPdfreporterEngineFillJRFillElementDataset:(OrgOssPdfreporterEngineFillJRFillElementDataset *)elementDataset
                                                           withChar:(char)evaluation {
  id<JavaUtilMap> parameterValues = [OrgOssPdfreporterEngineFillJRFillSubreport getParameterValuesWithOrgOssPdfreporterEngineFillJRBaseFiller:filler_ withOrgOssPdfreporterEngineJRExpression:parametersMapExpression_ withOrgOssPdfreporterEngineJRDatasetParameterArray:parameters_ withChar:evaluation withBOOL:NO withBOOL:[((OrgOssPdfreporterEngineFillJRFillDataset *) nil_chk(dataset_)) getResourceBundle] != nil withBOOL:NO];
  @try {
    OrgOssPdfreporterEngineFillFillDatasetPosition *datasetPosition = [[OrgOssPdfreporterEngineFillFillDatasetPosition alloc] initWithOrgOssPdfreporterEngineFillFillDatasetPosition:((OrgOssPdfreporterEngineFillJRFillDataset *) nil_chk(((OrgOssPdfreporterEngineFillJRBaseFiller *) nil_chk(filler_)).mainDataset)).fillPosition];
    [((OrgOssPdfreporterEngineFillFillDatasetPosition *) nil_chk(datasetPosition)) addAttributeWithNSString:@"datasetRunUUID" withId:[self getUUID]];
    [((OrgOssPdfreporterEngineFillJRFillDataset *) nil_chk(((OrgOssPdfreporterEngineFillJRBaseFiller *) nil_chk(filler_)).mainDataset)) setCacheRecordIndexWithOrgOssPdfreporterEngineFillFillDatasetPosition:datasetPosition withChar:evaluation];
    [((OrgOssPdfreporterEngineFillJRFillDataset *) nil_chk(dataset_)) setFillPositionWithOrgOssPdfreporterEngineFillFillDatasetPosition:datasetPosition];
    NSString *cacheIncludedProp = [OrgOssPdfreporterEngineJRPropertiesUtil getOwnPropertyWithOrgOssPdfreporterEngineJRPropertiesHolder:self withNSString:[OrgOssPdfreporterDataCacheDataCacheHandler PROPERTY_INCLUDED]];
    BOOL cacheIncluded = [OrgOssPdfreporterEngineJRPropertiesUtil asBooleanWithNSString:cacheIncludedProp withBOOL:YES];
    [((OrgOssPdfreporterEngineFillJRFillDataset *) nil_chk(dataset_)) setCacheSkippedWithBOOL:!cacheIncluded];
    if (dataSourceExpression_ != nil) {
      if (!([((OrgOssPdfreporterEngineFillJRFillContext *) nil_chk(((OrgOssPdfreporterEngineFillJRBaseFiller *) nil_chk(filler_)).fillContext)) hasDataSnapshot] && cacheIncluded)) {
        id<OrgOssPdfreporterEngineJRDataSource> dataSource = (id<OrgOssPdfreporterEngineJRDataSource>) [((OrgOssPdfreporterEngineFillJRBaseFiller *) nil_chk(filler_)) evaluateExpressionWithOrgOssPdfreporterEngineJRExpression:dataSourceExpression_ withChar:evaluation];
        [((OrgOssPdfreporterEngineFillJRFillDataset *) nil_chk(dataset_)) setDatasourceParameterValueWithJavaUtilMap:parameterValues withOrgOssPdfreporterEngineJRDataSource:dataSource];
      }
    }
    else if (connectionExpression_ != nil) {
      id<OrgOssPdfreporterSqlIConnection> connection = (id<OrgOssPdfreporterSqlIConnection>) [((OrgOssPdfreporterEngineFillJRBaseFiller *) nil_chk(filler_)) evaluateExpressionWithOrgOssPdfreporterEngineJRExpression:connectionExpression_ withChar:evaluation];
      [((OrgOssPdfreporterEngineFillJRFillDataset *) nil_chk(dataset_)) setConnectionParameterValueWithJavaUtilMap:parameterValues withOrgOssPdfreporterSqlIConnection:connection];
    }
    [self copyConnectionParameterWithJavaUtilMap:parameterValues];
    [((OrgOssPdfreporterEngineFillJRFillDataset *) nil_chk(dataset_)) initCalculator];
    [((OrgOssPdfreporterEngineFillJRFillDataset *) nil_chk(dataset_)) setParameterValuesWithJavaUtilMap:parameterValues];
    [((OrgOssPdfreporterEngineFillJRFillDataset *) nil_chk(dataset_)) initDatasource];
    [((OrgOssPdfreporterEngineFillJRFillDataset *) nil_chk(dataset_)) filterElementDatasetsWithOrgOssPdfreporterEngineFillJRFillElementDataset:elementDataset];
    [self iterate];
  }
  @finally {
    [((OrgOssPdfreporterEngineFillJRFillDataset *) nil_chk(dataset_)) closeDatasource];
    [((OrgOssPdfreporterEngineFillJRFillDataset *) nil_chk(dataset_)) disposeParameterContributors];
    [((OrgOssPdfreporterEngineFillJRFillDataset *) nil_chk(dataset_)) restoreElementDatasets];
  }
}

- (void)copyConnectionParameterWithJavaUtilMap:(id<JavaUtilMap>)parameterValues OBJC_METHOD_FAMILY_NONE {
  id<OrgOssPdfreporterEngineJRQuery> query = [((OrgOssPdfreporterEngineFillJRFillDataset *) nil_chk(dataset_)) getQuery];
  if (query != nil) {
    NSString *language = [query getLanguage];
    if (connectionExpression_ == nil && ([((NSString *) nil_chk(language)) isEqual:@"sql"] || [((NSString *) nil_chk(language)) isEqual:@"SQL"]) && ![((id<JavaUtilMap>) nil_chk(parameterValues)) containsKeyWithId:[OrgOssPdfreporterEngineJRParameter REPORT_CONNECTION]]) {
      id<OrgOssPdfreporterEngineFillIJRFillParameter> connParam = [((id<JavaUtilMap>) nil_chk([((OrgOssPdfreporterEngineFillJRBaseFiller *) nil_chk(filler_)) getParametersMap])) getWithId:[OrgOssPdfreporterEngineJRParameter REPORT_CONNECTION]];
      id<OrgOssPdfreporterSqlIConnection> connection = (id<OrgOssPdfreporterSqlIConnection>) [((id<OrgOssPdfreporterEngineFillIJRFillParameter>) nil_chk(connParam)) getValue];
      (void) [((id<JavaUtilMap>) nil_chk(parameterValues)) putWithId:[OrgOssPdfreporterEngineJRParameter REPORT_CONNECTION] withId:connection];
    }
  }
}

- (void)iterate {
  [((OrgOssPdfreporterEngineFillJRFillDataset *) nil_chk(dataset_)) start];
  [self init__];
  if ([self advanceDataset]) {
    [self detail];
    while ([self advanceDataset]) {
      [self checkInterrupted];
      [self group];
      [self detail];
    }
  }
}

- (BOOL)advanceDataset {
  return [((OrgOssPdfreporterEngineFillJRFillDataset *) nil_chk(dataset_)) next];
}

- (void)checkInterrupted {
  [((OrgOssPdfreporterEngineFillJRBaseFiller *) nil_chk(filler_)) checkInterrupted];
}

- (void)group {
  [((OrgOssPdfreporterEngineFillJRCalculator *) nil_chk(((OrgOssPdfreporterEngineFillJRFillDataset *) nil_chk(dataset_)).calculator)) estimateGroupRuptures];
  [((OrgOssPdfreporterEngineFillJRCalculator *) nil_chk(((OrgOssPdfreporterEngineFillJRFillDataset *) nil_chk(dataset_)).calculator)) initializeVariablesWithOrgOssPdfreporterEngineTypeResetTypeEnumEnum:[OrgOssPdfreporterEngineTypeResetTypeEnumEnum GROUP] withOrgOssPdfreporterEngineTypeIncrementTypeEnumEnum:[OrgOssPdfreporterEngineTypeIncrementTypeEnumEnum GROUP]];
}

- (void)init__ OBJC_METHOD_FAMILY_NONE {
  [((OrgOssPdfreporterEngineFillJRCalculator *) nil_chk(((OrgOssPdfreporterEngineFillJRFillDataset *) nil_chk(dataset_)).calculator)) initializeVariablesWithOrgOssPdfreporterEngineTypeResetTypeEnumEnum:[OrgOssPdfreporterEngineTypeResetTypeEnumEnum REPORT] withOrgOssPdfreporterEngineTypeIncrementTypeEnumEnum:[OrgOssPdfreporterEngineTypeIncrementTypeEnumEnum REPORT]];
}

- (void)detail {
  [((OrgOssPdfreporterEngineFillJRCalculator *) nil_chk(((OrgOssPdfreporterEngineFillJRFillDataset *) nil_chk(dataset_)).calculator)) calculateVariables];
}

- (NSString *)getDatasetName {
  return [((OrgOssPdfreporterEngineFillJRFillDataset *) nil_chk(dataset_)) getName];
}

- (id<OrgOssPdfreporterEngineJRExpression>)getParametersMapExpression {
  return parametersMapExpression_;
}

- (IOSObjectArray *)getParameters {
  return parameters_;
}

- (id<OrgOssPdfreporterEngineJRExpression>)getConnectionExpression {
  return connectionExpression_;
}

- (id<OrgOssPdfreporterEngineJRExpression>)getDataSourceExpression {
  return dataSourceExpression_;
}

- (OrgOssPdfreporterEngineFillJRFillDataset *)getDataset {
  return dataset_;
}

- (OrgOssPdfreporterUsesJavaUtilUUID *)getUUID {
  return [((id<OrgOssPdfreporterEngineJRDatasetRun>) nil_chk(parentDatasetRun_)) getUUID];
}

- (id)clone {
  @throw [[JavaLangUnsupportedOperationException alloc] init];
}

- (BOOL)hasProperties {
  return [((id<OrgOssPdfreporterEngineJRDatasetRun>) nil_chk(parentDatasetRun_)) hasProperties];
}

- (OrgOssPdfreporterEngineJRPropertiesMap *)getPropertiesMap {
  return [((id<OrgOssPdfreporterEngineJRDatasetRun>) nil_chk(parentDatasetRun_)) getPropertiesMap];
}

- (id<OrgOssPdfreporterEngineJRPropertiesHolder>)getParentProperties {
  return nil;
}

- (id)copyWithZone:(NSZone *)zone {
  return [self clone];
}

- (void)copyAllPropertiesTo:(id)copy {
  [super copyAllPropertiesTo:copy];
  OrgOssPdfreporterEngineFillJRFillDatasetRun *typedCopy = (OrgOssPdfreporterEngineFillJRFillDatasetRun *) copy;
  typedCopy.filler = filler_;
  typedCopy.parentDatasetRun = parentDatasetRun_;
  typedCopy.dataset = dataset_;
  typedCopy.parametersMapExpression = parametersMapExpression_;
  typedCopy.parameters = parameters_;
  typedCopy.connectionExpression = connectionExpression_;
  typedCopy.dataSourceExpression = dataSourceExpression_;
}

@end
