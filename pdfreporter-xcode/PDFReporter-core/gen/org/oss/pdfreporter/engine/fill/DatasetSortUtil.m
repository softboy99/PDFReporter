//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: pdfreporter-core/src/org/oss/pdfreporter/engine/fill/DatasetSortUtil.java
//
//  Created by kendra on 9/27/13.
//

#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "java/lang/Comparable.h"
#include "java/lang/Integer.h"
#include "java/util/ArrayList.h"
#include "java/util/Arrays.h"
#include "java/util/HashMap.h"
#include "java/util/List.h"
#include "java/util/Locale.h"
#include "java/util/Map.h"
#include "java/util/logging/Logger.h"
#include "org/oss/pdfreporter/engine/JRField.h"
#include "org/oss/pdfreporter/engine/JRParameter.h"
#include "org/oss/pdfreporter/engine/JRRuntimeException.h"
#include "org/oss/pdfreporter/engine/JRSortField.h"
#include "org/oss/pdfreporter/engine/JRVariable.h"
#include "org/oss/pdfreporter/engine/design/JRDesignDatasetRun.h"
#include "org/oss/pdfreporter/engine/fill/DatasetSortUtil.h"
#include "org/oss/pdfreporter/engine/fill/JRBaseFiller.h"
#include "org/oss/pdfreporter/engine/fill/JRFillDataset.h"
#include "org/oss/pdfreporter/engine/fill/JRFillDatasetRun.h"
#include "org/oss/pdfreporter/engine/fill/SortedDataSource.h"
#include "org/oss/pdfreporter/engine/type/SortFieldTypeEnum.h"
#include "org/oss/pdfreporter/engine/type/SortOrderEnum.h"

@implementation OrgOssPdfreporterEngineFillDatasetSortUtil

+ (IOSObjectArray *)getAllSortFieldsWithOrgOssPdfreporterEngineFillJRFillDataset:(OrgOssPdfreporterEngineFillJRFillDataset *)dataset {
  id<JavaUtilList> allSortFields = [[JavaUtilArrayList alloc] init];
  IOSObjectArray *staticSortFields = [((OrgOssPdfreporterEngineFillJRFillDataset *) nil_chk(dataset)) getSortFields];
  if (staticSortFields != nil) {
    [((id<JavaUtilList>) nil_chk(allSortFields)) addAllWithJavaUtilCollection:[JavaUtilArrays asListWithNSObjectArray:staticSortFields]];
  }
  id<JavaUtilList> dynamicSortFields = (id<JavaUtilList>) [((OrgOssPdfreporterEngineFillJRFillDataset *) nil_chk(dataset)) getParameterValueWithNSString:[OrgOssPdfreporterEngineJRParameter SORT_FIELDS] withBOOL:YES];
  if (dynamicSortFields != nil) {
    [((id<JavaUtilList>) nil_chk(allSortFields)) addAllWithJavaUtilCollection:dynamicSortFields];
  }
  return [((id<JavaUtilList>) nil_chk(allSortFields)) toArrayWithNSObjectArray:[IOSObjectArray arrayWithLength:[((id<JavaUtilList>) nil_chk(allSortFields)) size] type:[IOSClass classWithProtocol:@protocol(OrgOssPdfreporterEngineJRSortField)]]];
}

+ (BOOL)needSortingWithOrgOssPdfreporterEngineFillJRFillDataset:(OrgOssPdfreporterEngineFillJRFillDataset *)dataset {
  IOSObjectArray *staticSortFields = [((OrgOssPdfreporterEngineFillJRFillDataset *) nil_chk(dataset)) getSortFields];
  id<JavaUtilList> dynamicSortFields = (id<JavaUtilList>) [((OrgOssPdfreporterEngineFillJRFillDataset *) nil_chk(dataset)) getParameterValueWithNSString:[OrgOssPdfreporterEngineJRParameter SORT_FIELDS] withBOOL:YES];
  return (staticSortFields != nil && (int) [((IOSObjectArray *) nil_chk(staticSortFields)) count] > 0) || (dynamicSortFields != nil && [((id<JavaUtilList>) nil_chk(dynamicSortFields)) size] > 0);
}

+ (OrgOssPdfreporterEngineFillSortedDataSource *)getSortedDataSourceWithOrgOssPdfreporterEngineFillJRBaseFiller:(OrgOssPdfreporterEngineFillJRBaseFiller *)filler
                                                                   withOrgOssPdfreporterEngineFillJRFillDataset:(OrgOssPdfreporterEngineFillJRFillDataset *)dataset
                                                                                             withJavaUtilLocale:(JavaUtilLocale *)locale {
  OrgOssPdfreporterEngineFillSortInfo *sortInfo = [OrgOssPdfreporterEngineFillDatasetSortUtil createSortInfoWithOrgOssPdfreporterEngineFillJRFillDataset:dataset];
  OrgOssPdfreporterEngineFillSortFillDatasetRun *sortDatasetRun = [[OrgOssPdfreporterEngineFillSortFillDatasetRun alloc] initWithOrgOssPdfreporterEngineFillJRBaseFiller:filler withOrgOssPdfreporterEngineFillJRFillDataset:dataset withOrgOssPdfreporterEngineFillSortInfo:sortInfo];
  id<JavaUtilList> records = [((OrgOssPdfreporterEngineFillSortFillDatasetRun *) nil_chk(sortDatasetRun)) sort];
  int recordCount = [((id<JavaUtilList>) nil_chk(records)) size];
  IOSObjectArray *indexes = [IOSObjectArray arrayWithLength:recordCount type:[IOSClass classWithClass:[JavaLangInteger class]]];
  for (int i = 0; i < recordCount; i++) {
    (void) [((IOSObjectArray *) nil_chk(indexes)) replaceObjectAtIndex:i withObject:[JavaLangInteger valueOfWithInt:i]];
  }
  [JavaUtilArrays sortWithNSObjectArray:indexes withJavaUtilComparator:[[OrgOssPdfreporterEngineFillDataSourceComparator alloc] initWithOrgOssPdfreporterEngineFillSortFieldInfoArray:((OrgOssPdfreporterEngineFillSortInfo *) nil_chk(sortInfo)).sortFieldInfo withJavaUtilLocale:locale withJavaUtilList:records]];
  return [[OrgOssPdfreporterEngineFillSortedDataSource alloc] initWithJavaUtilList:records withJavaLangIntegerArray:indexes withNSStringArray:[((id<JavaUtilList>) nil_chk(((OrgOssPdfreporterEngineFillSortInfo *) nil_chk(sortInfo)).fieldNames)) toArrayWithNSObjectArray:[IOSObjectArray arrayWithLength:[((id<JavaUtilList>) nil_chk(((OrgOssPdfreporterEngineFillSortInfo *) nil_chk(sortInfo)).fieldNames)) size] type:[IOSClass classWithClass:[NSString class]]]]];
}

+ (OrgOssPdfreporterEngineFillSortInfo *)createSortInfoWithOrgOssPdfreporterEngineFillJRFillDataset:(OrgOssPdfreporterEngineFillJRFillDataset *)dataset {
  OrgOssPdfreporterEngineFillSortInfo *sortInfo = [[OrgOssPdfreporterEngineFillSortInfo alloc] init];
  id<JavaUtilMap> fieldsMap = [[JavaUtilHashMap alloc] init];
  id<JavaUtilMap> fieldIndexMap = [[JavaUtilHashMap alloc] init];
  IOSObjectArray *fields = [((OrgOssPdfreporterEngineFillJRFillDataset *) nil_chk(dataset)) getFields];
  if (fields != nil) {
    for (int i = 0; i < (int) [fields count]; i++) {
      id<OrgOssPdfreporterEngineJRField> field = [fields objectAtIndex:i];
      (void) [((id<JavaUtilMap>) nil_chk(fieldsMap)) putWithId:[((id<OrgOssPdfreporterEngineJRField>) nil_chk(field)) getName] withId:field];
      (void) [((id<JavaUtilMap>) nil_chk(fieldIndexMap)) putWithId:[((id<OrgOssPdfreporterEngineJRField>) nil_chk(field)) getName] withId:[JavaLangInteger valueOfWithInt:i]];
      [((id<JavaUtilList>) nil_chk(((OrgOssPdfreporterEngineFillSortInfo *) nil_chk(sortInfo)).fieldNames)) addWithId:[((id<OrgOssPdfreporterEngineJRField>) nil_chk(field)) getName]];
    }
  }
  id<JavaUtilMap> variablesMap = [[JavaUtilHashMap alloc] init];
  IOSObjectArray *variables = [((OrgOssPdfreporterEngineFillJRFillDataset *) nil_chk(dataset)) getVariables];
  if (variables != nil) {
    for (int i = 0; i < (int) [variables count]; i++) {
      (void) [((id<JavaUtilMap>) nil_chk(variablesMap)) putWithId:[((id<OrgOssPdfreporterEngineJRVariable>) nil_chk([variables objectAtIndex:i])) getName] withId:[variables objectAtIndex:i]];
    }
  }
  IOSObjectArray *sortFields = [OrgOssPdfreporterEngineFillDatasetSortUtil getAllSortFieldsWithOrgOssPdfreporterEngineFillJRFillDataset:dataset];
  if (sortFields != nil) {
    ((OrgOssPdfreporterEngineFillSortInfo *) nil_chk(sortInfo)).sortFieldInfo = [IOSObjectArray arrayWithLength:(int) [sortFields count] type:[IOSClass classWithClass:[OrgOssPdfreporterEngineFillSortFieldInfo class]]];
    for (int i = 0; i < (int) [sortFields count]; i++) {
      id<OrgOssPdfreporterEngineJRSortField> sortField = [sortFields objectAtIndex:i];
      NSString *sortFieldName = [((id<OrgOssPdfreporterEngineJRSortField>) nil_chk(sortField)) getName];
      OrgOssPdfreporterEngineFillSortFieldInfo *info = [[OrgOssPdfreporterEngineFillSortFieldInfo alloc] init];
      ((OrgOssPdfreporterEngineFillSortFieldInfo *) nil_chk(info)).name = sortFieldName;
      ((OrgOssPdfreporterEngineFillSortFieldInfo *) nil_chk(info)).isVariable = [((id<OrgOssPdfreporterEngineJRSortField>) nil_chk(sortField)) getType] == [OrgOssPdfreporterEngineTypeSortFieldTypeEnumEnum VARIABLE];
      ((OrgOssPdfreporterEngineFillSortFieldInfo *) nil_chk(info)).order = ([OrgOssPdfreporterEngineTypeSortOrderEnumEnum ASCENDING] == [((id<OrgOssPdfreporterEngineJRSortField>) nil_chk(sortField)) getOrderValue] ? 1 : -1);
      JavaLangInteger *index;
      if (((OrgOssPdfreporterEngineFillSortFieldInfo *) nil_chk(info)).isVariable) {
        id<OrgOssPdfreporterEngineJRVariable> variable = [((id<JavaUtilMap>) nil_chk(variablesMap)) getWithId:sortFieldName];
        if (variable == nil) {
          @throw [[OrgOssPdfreporterEngineJRRuntimeException alloc] initWithNSString:[NSString stringWithFormat:@"Sort variable \"%@\" not found in dataset.", sortFieldName]];
        }
        index = [[JavaLangInteger alloc] initWithInt:[((id<JavaUtilList>) nil_chk(((OrgOssPdfreporterEngineFillSortInfo *) nil_chk(sortInfo)).fieldNames)) size]];
        ((OrgOssPdfreporterEngineFillSortFieldInfo *) nil_chk(info)).collatorFlag = [((NSString *) nil_chk([[IOSClass classWithClass:[NSString class]] getName])) isEqual:[((id<OrgOssPdfreporterEngineJRVariable>) nil_chk(variable)) getValueClassName]];
        [((id<JavaUtilList>) nil_chk(((OrgOssPdfreporterEngineFillSortInfo *) nil_chk(sortInfo)).fieldNames)) addWithId:[((id<OrgOssPdfreporterEngineJRVariable>) nil_chk(variable)) getName]];
      }
      else {
        id<OrgOssPdfreporterEngineJRField> field = [((id<JavaUtilMap>) nil_chk(fieldsMap)) getWithId:sortFieldName];
        if (field == nil) {
          @throw [[OrgOssPdfreporterEngineJRRuntimeException alloc] initWithNSString:[NSString stringWithFormat:@"Sort field \"%@\" not found in dataset.", sortFieldName]];
        }
        index = [((id<JavaUtilMap>) nil_chk(fieldIndexMap)) getWithId:[((id<OrgOssPdfreporterEngineJRSortField>) nil_chk(sortField)) getName]];
        ((OrgOssPdfreporterEngineFillSortFieldInfo *) nil_chk(info)).collatorFlag = [((NSString *) nil_chk([[IOSClass classWithClass:[NSString class]] getName])) isEqual:[((id<OrgOssPdfreporterEngineJRField>) nil_chk(field)) getValueClassName]];
      }
      ((OrgOssPdfreporterEngineFillSortFieldInfo *) nil_chk(info)).index = [((JavaLangInteger *) nil_chk(index)) intValue];
      (void) [((IOSObjectArray *) nil_chk(((OrgOssPdfreporterEngineFillSortInfo *) nil_chk(sortInfo)).sortFieldInfo)) replaceObjectAtIndex:i withObject:info];
    }
  }
  return sortInfo;
}

- (id)init {
  return [super init];
}

@end
@implementation OrgOssPdfreporterEngineFillDataSourceComparator

static JavaUtilLoggingLogger * OrgOssPdfreporterEngineFillDataSourceComparator_logger_;

@synthesize sortFieldInfo = sortFieldInfo_;
@synthesize records = records_;

+ (JavaUtilLoggingLogger *)logger {
  return OrgOssPdfreporterEngineFillDataSourceComparator_logger_;
}

- (id)initWithOrgOssPdfreporterEngineFillSortFieldInfoArray:(IOSObjectArray *)sortFieldInfo
                                         withJavaUtilLocale:(JavaUtilLocale *)locale
                                           withJavaUtilList:(id<JavaUtilList>)records {
  if ((self = [super init])) {
    {
      IOSObjectArray *a__ = sortFieldInfo;
      int n__ = (int) [((IOSObjectArray *) nil_chk(a__)) count];
      for (int i__ = 0; i__ < n__; i__++) {
        OrgOssPdfreporterEngineFillSortFieldInfo *sfi = [((IOSObjectArray *) nil_chk(a__)) objectAtIndex:i__];
        if (((OrgOssPdfreporterEngineFillSortFieldInfo *) nil_chk(sfi)).collatorFlag) {
          [((JavaUtilLoggingLogger *) nil_chk(OrgOssPdfreporterEngineFillDataSourceComparator_logger_)) warningWithNSString:@"Locale based sorting not supported in current version, fallback to regular sort."];
          break;
        }
      }
    }
    self.sortFieldInfo = sortFieldInfo;
    self.records = records;
  }
  return self;
}

- (int)compareWithId:(JavaLangInteger *)idx1
              withId:(JavaLangInteger *)idx2 {
  IOSObjectArray *record1 = [((OrgOssPdfreporterEngineFillSortedDataSource_SortRecord *) nil_chk([((id<JavaUtilList>) nil_chk(records_)) getWithInt:[((JavaLangInteger *) nil_chk(idx1)) intValue]])) getValues];
  IOSObjectArray *record2 = [((OrgOssPdfreporterEngineFillSortedDataSource_SortRecord *) nil_chk([((id<JavaUtilList>) nil_chk(records_)) getWithInt:[((JavaLangInteger *) nil_chk(idx2)) intValue]])) getValues];
  int ret = 0;
  for (int i = 0; i < (int) [((IOSObjectArray *) nil_chk(sortFieldInfo_)) count]; i++) {
    OrgOssPdfreporterEngineFillSortFieldInfo *info = [((IOSObjectArray *) nil_chk(sortFieldInfo_)) objectAtIndex:i];
    id<JavaLangComparable> field1 = (id<JavaLangComparable>) [((IOSObjectArray *) nil_chk(record1)) objectAtIndex:((OrgOssPdfreporterEngineFillSortFieldInfo *) nil_chk(info)).index];
    id<JavaLangComparable> field2 = (id<JavaLangComparable>) [((IOSObjectArray *) nil_chk(record2)) objectAtIndex:((OrgOssPdfreporterEngineFillSortFieldInfo *) nil_chk(info)).index];
    if (field1 == nil) {
      ret = (field2 == nil) ? 0 : -1;
    }
    else if (field2 == nil) {
      ret = 1;
    }
    else {
      {
        ret = [((id<JavaLangComparable>) nil_chk(field1)) compareToWithId:field2];
      }
    }
    ret = ret * ((OrgOssPdfreporterEngineFillSortFieldInfo *) nil_chk(info)).order;
    if (ret != 0) {
      return ret;
    }
  }
  return ret;
}

+ (void)initialize {
  if (self == [OrgOssPdfreporterEngineFillDataSourceComparator class]) {
    OrgOssPdfreporterEngineFillDataSourceComparator_logger_ = [JavaUtilLoggingLogger getLoggerWithNSString:[[IOSClass classWithClass:[OrgOssPdfreporterEngineFillDataSourceComparator class]] getName]];
  }
}

- (void)copyAllPropertiesTo:(id)copy {
  [super copyAllPropertiesTo:copy];
  OrgOssPdfreporterEngineFillDataSourceComparator *typedCopy = (OrgOssPdfreporterEngineFillDataSourceComparator *) copy;
  typedCopy.sortFieldInfo = sortFieldInfo_;
  typedCopy.records = records_;
}

@end
@implementation OrgOssPdfreporterEngineFillSortInfo

@synthesize fieldNames = fieldNames_;
@synthesize sortFieldInfo = sortFieldInfo_;

- (id)init {
  if ((self = [super init])) {
    fieldNames_ = [[JavaUtilArrayList alloc] init];
  }
  return self;
}

- (void)copyAllPropertiesTo:(id)copy {
  [super copyAllPropertiesTo:copy];
  OrgOssPdfreporterEngineFillSortInfo *typedCopy = (OrgOssPdfreporterEngineFillSortInfo *) copy;
  typedCopy.fieldNames = fieldNames_;
  typedCopy.sortFieldInfo = sortFieldInfo_;
}

@end
@implementation OrgOssPdfreporterEngineFillSortFieldInfo

@synthesize name = name_;
@synthesize isVariable = isVariable_;
@synthesize order = order_;
@synthesize index = index_;
@synthesize collatorFlag = collatorFlag_;

- (id)init {
  return [super init];
}

- (void)copyAllPropertiesTo:(id)copy {
  [super copyAllPropertiesTo:copy];
  OrgOssPdfreporterEngineFillSortFieldInfo *typedCopy = (OrgOssPdfreporterEngineFillSortFieldInfo *) copy;
  typedCopy.name = name_;
  typedCopy.isVariable = isVariable_;
  typedCopy.order = order_;
  typedCopy.index = index_;
  typedCopy.collatorFlag = collatorFlag_;
}

@end
@implementation OrgOssPdfreporterEngineFillSortFillDatasetRun

@synthesize allSortFields = allSortFields_;
@synthesize sortInfo = sortInfo_;
@synthesize recordIndex = recordIndex_;
@synthesize records = records_;

- (id)initWithOrgOssPdfreporterEngineFillJRBaseFiller:(OrgOssPdfreporterEngineFillJRBaseFiller *)filler
         withOrgOssPdfreporterEngineFillJRFillDataset:(OrgOssPdfreporterEngineFillJRFillDataset *)dataset
              withOrgOssPdfreporterEngineFillSortInfo:(OrgOssPdfreporterEngineFillSortInfo *)sortInfo {
  if ((self = [super initWithOrgOssPdfreporterEngineFillJRBaseFiller:filler withOrgOssPdfreporterEngineJRDatasetRun:[[OrgOssPdfreporterEngineDesignJRDesignDatasetRun alloc] init] withOrgOssPdfreporterEngineFillJRFillDataset:dataset])) {
    allSortFields_ = [OrgOssPdfreporterEngineFillDatasetSortUtil getAllSortFieldsWithOrgOssPdfreporterEngineFillJRFillDataset:dataset];
    self.sortInfo = sortInfo;
  }
  return self;
}

- (id<JavaUtilList>)sort {
  recordIndex_ = 0;
  records_ = [[JavaUtilArrayList alloc] init];
  @try {
    [self iterate];
  }
  @finally {
    [((OrgOssPdfreporterEngineFillJRFillDataset *) nil_chk(dataset_)) closeQueryExecuter];
    [((OrgOssPdfreporterEngineFillJRFillDataset *) nil_chk(dataset_)) reset];
  }
  return records_;
}

- (void)detail {
  [super detail];
  int fieldCount = [((id<JavaUtilList>) nil_chk(((OrgOssPdfreporterEngineFillSortInfo *) nil_chk(sortInfo_)).fieldNames)) size];
  IOSObjectArray *fields = [((OrgOssPdfreporterEngineFillJRFillDataset *) nil_chk(dataset_)) getFields];
  IOSObjectArray *record = [IOSObjectArray arrayWithLength:fieldCount type:[IOSClass classWithClass:[NSObject class]]];
  if (fields != nil) {
    for (int i = 0; i < (int) [fields count]; i++) {
      (void) [((IOSObjectArray *) nil_chk(record)) replaceObjectAtIndex:i withObject:[((OrgOssPdfreporterEngineFillJRFillDataset *) nil_chk(dataset_)) getFieldValueWithNSString:[((id<OrgOssPdfreporterEngineJRField>) nil_chk([fields objectAtIndex:i])) getName]]];
    }
  }
  for (int i = 0; i < (int) [((IOSObjectArray *) nil_chk(allSortFields_)) count]; i++) {
    id<OrgOssPdfreporterEngineJRSortField> sortField = [((IOSObjectArray *) nil_chk(allSortFields_)) objectAtIndex:i];
    if ([((id<OrgOssPdfreporterEngineJRSortField>) nil_chk(sortField)) getType] == [OrgOssPdfreporterEngineTypeSortFieldTypeEnumEnum VARIABLE]) {
      (void) [((IOSObjectArray *) nil_chk(record)) replaceObjectAtIndex:((OrgOssPdfreporterEngineFillSortFieldInfo *) nil_chk([((IOSObjectArray *) nil_chk(((OrgOssPdfreporterEngineFillSortInfo *) nil_chk(sortInfo_)).sortFieldInfo)) objectAtIndex:i])).index withObject:[((OrgOssPdfreporterEngineFillJRFillDataset *) nil_chk(dataset_)) getVariableValueWithNSString:[((id<OrgOssPdfreporterEngineJRSortField>) nil_chk(sortField)) getName]]];
    }
  }
  OrgOssPdfreporterEngineFillSortedDataSource_SortRecord *sortRecord = [[OrgOssPdfreporterEngineFillSortedDataSource_SortRecord alloc] initWithNSObjectArray:record withInt:recordIndex_];
  ++recordIndex_;
  [((id<JavaUtilList>) nil_chk(records_)) addWithId:sortRecord];
}

- (BOOL)advanceDataset {
  return [((OrgOssPdfreporterEngineFillJRFillDataset *) nil_chk(dataset_)) nextWithBOOL:YES];
}

- (void)copyAllPropertiesTo:(id)copy {
  [super copyAllPropertiesTo:copy];
  OrgOssPdfreporterEngineFillSortFillDatasetRun *typedCopy = (OrgOssPdfreporterEngineFillSortFillDatasetRun *) copy;
  typedCopy.allSortFields = allSortFields_;
  typedCopy.sortInfo = sortInfo_;
  typedCopy.recordIndex = recordIndex_;
  typedCopy.records = records_;
}

@end
