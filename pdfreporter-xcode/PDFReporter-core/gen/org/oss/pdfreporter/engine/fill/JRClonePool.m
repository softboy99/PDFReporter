//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: pdfreporter-core/src/org/oss/pdfreporter/engine/fill/JRClonePool.java
//
//  Created by kendra on 9/27/13.
//

#include "java/util/HashSet.h"
#include "java/util/LinkedList.h"
#include "java/util/Set.h"
#include "org/oss/pdfreporter/engine/JRRuntimeException.h"
#include "org/oss/pdfreporter/engine/fill/JRClonePool.h"
#include "org/oss/pdfreporter/engine/fill/JRFillCloneFactory.h"
#include "org/oss/pdfreporter/engine/fill/JRFillCloneable.h"

@implementation OrgOssPdfreporterEngineFillJRClonePool

@synthesize original = original_;
@synthesize availableClones = availableClones_;
@synthesize trackLockedClones = trackLockedClones_;
@synthesize lockedClones = lockedClones_;

- (id)initWithOrgOssPdfreporterEngineFillJRFillCloneable:(id<OrgOssPdfreporterEngineFillJRFillCloneable>)original
                                                withBOOL:(BOOL)trackLockedClones
                                                withBOOL:(BOOL)useOriginal {
  if ((self = [super init])) {
    self.original = original;
    availableClones_ = [[JavaUtilLinkedList alloc] init];
    self.trackLockedClones = trackLockedClones;
    if (trackLockedClones) {
      lockedClones_ = [[JavaUtilHashSet alloc] init];
    }
    else {
      lockedClones_ = nil;
    }
    if (useOriginal) {
      [((JavaUtilLinkedList *) nil_chk(availableClones_)) addWithId:original];
    }
  }
  return self;
}

- (id)getClone {
  id<OrgOssPdfreporterEngineFillJRFillCloneable> clone;
  if ([((JavaUtilLinkedList *) nil_chk(availableClones_)) isEmpty]) {
    OrgOssPdfreporterEngineFillJRFillCloneFactory *factory = [[OrgOssPdfreporterEngineFillJRFillCloneFactory alloc] init];
    clone = [((id<OrgOssPdfreporterEngineFillJRFillCloneable>) nil_chk(original_)) createCloneWithOrgOssPdfreporterEngineFillJRFillCloneFactory:factory];
  }
  else {
    clone = [((JavaUtilLinkedList *) nil_chk(availableClones_)) removeFirst];
  }
  if (trackLockedClones_) {
    [((id<JavaUtilSet>) nil_chk(lockedClones_)) addWithId:clone];
  }
  return clone;
}

- (void)releaseCloneWithId:(id)clone {
  if (trackLockedClones_) {
    if (![((id<JavaUtilSet>) nil_chk(lockedClones_)) removeWithId:clone]) {
      @throw [[OrgOssPdfreporterEngineJRRuntimeException alloc] initWithNSString:@"Cannot release clone."];
    }
  }
  [((JavaUtilLinkedList *) nil_chk(availableClones_)) addLastWithId:(id<OrgOssPdfreporterEngineFillJRFillCloneable>) clone];
}

- (void)copyAllPropertiesTo:(id)copy {
  [super copyAllPropertiesTo:copy];
  OrgOssPdfreporterEngineFillJRClonePool *typedCopy = (OrgOssPdfreporterEngineFillJRClonePool *) copy;
  typedCopy.original = original_;
  typedCopy.availableClones = availableClones_;
  typedCopy.trackLockedClones = trackLockedClones_;
  typedCopy.lockedClones = lockedClones_;
}

@end
