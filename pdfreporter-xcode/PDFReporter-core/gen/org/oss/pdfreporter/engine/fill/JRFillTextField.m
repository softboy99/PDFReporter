//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: pdfreporter-core/src/org/oss/pdfreporter/engine/fill/JRFillTextField.java
//
//  Created by kendra on 9/27/13.
//

#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "java/lang/Boolean.h"
#include "java/lang/Integer.h"
#include "java/util/Date.h"
#include "java/util/Locale.h"
#include "java/util/TimeZone.h"
#include "java/util/logging/Logger.h"
#include "org/oss/pdfreporter/engine/JRDefaultStyleProvider.h"
#include "org/oss/pdfreporter/engine/JRElement.h"
#include "org/oss/pdfreporter/engine/JRExpression.h"
#include "org/oss/pdfreporter/engine/JRExpressionCollector.h"
#include "org/oss/pdfreporter/engine/JRGroup.h"
#include "org/oss/pdfreporter/engine/JROrigin.h"
#include "org/oss/pdfreporter/engine/JRPrintElement.h"
#include "org/oss/pdfreporter/engine/JRPrintHyperlinkParameters.h"
#include "org/oss/pdfreporter/engine/JRPrintText.h"
#include "org/oss/pdfreporter/engine/JRPropertiesMap.h"
#include "org/oss/pdfreporter/engine/JRStyle.h"
#include "org/oss/pdfreporter/engine/JRTextField.h"
#include "org/oss/pdfreporter/engine/JRVisitor.h"
#include "org/oss/pdfreporter/engine/JasperPrint.h"
#include "org/oss/pdfreporter/engine/fill/JRBaseFiller.h"
#include "org/oss/pdfreporter/engine/fill/JRFillBand.h"
#include "org/oss/pdfreporter/engine/fill/JRFillCloneFactory.h"
#include "org/oss/pdfreporter/engine/fill/JRFillCloneable.h"
#include "org/oss/pdfreporter/engine/fill/JRFillContext.h"
#include "org/oss/pdfreporter/engine/fill/JRFillElement.h"
#include "org/oss/pdfreporter/engine/fill/JRFillGroup.h"
#include "org/oss/pdfreporter/engine/fill/JRFillHyperlinkHelper.h"
#include "org/oss/pdfreporter/engine/fill/JRFillObjectFactory.h"
#include "org/oss/pdfreporter/engine/fill/JRFillTextElement.h"
#include "org/oss/pdfreporter/engine/fill/JRFillTextField.h"
#include "org/oss/pdfreporter/engine/fill/JRRecordedValuesPrintText.h"
#include "org/oss/pdfreporter/engine/fill/JRTemplateElement.h"
#include "org/oss/pdfreporter/engine/fill/JRTemplatePrintText.h"
#include "org/oss/pdfreporter/engine/fill/JRTemplateText.h"
#include "org/oss/pdfreporter/engine/fill/SimpleTextFormat.h"
#include "org/oss/pdfreporter/engine/fill/TextFormat.h"
#include "org/oss/pdfreporter/engine/type/EvaluationTimeEnum.h"
#include "org/oss/pdfreporter/engine/type/HyperlinkTypeEnum.h"
#include "org/oss/pdfreporter/engine/type/PositionTypeEnum.h"
#include "org/oss/pdfreporter/engine/type/RotationEnum.h"
#include "org/oss/pdfreporter/engine/type/RunDirectionEnum.h"
#include "org/oss/pdfreporter/engine/util/JRDataUtils.h"
#include "org/oss/pdfreporter/engine/util/JRStyleResolver.h"
#include "org/oss/pdfreporter/text/format/IFormat.h"
#include "org/oss/pdfreporter/text/format/factory/IFormatFactory.h"
#include "org/oss/pdfreporter/uses/java/util/UUID.h"

@implementation OrgOssPdfreporterEngineFillJRFillTextField

static JavaUtilLoggingLogger * OrgOssPdfreporterEngineFillJRFillTextField_logger_;

@synthesize evaluationGroup = evaluationGroup_;
@synthesize value = value_;
@synthesize textFormat = textFormat_;
@synthesize pattern = pattern_;
@synthesize anchorName = anchorName_;
@synthesize hyperlinkReference = hyperlinkReference_;
@synthesize hyperlinkAnchor = hyperlinkAnchor_;
@synthesize hyperlinkPage = hyperlinkPage_;
@synthesize hyperlinkTooltip = hyperlinkTooltip_;
@synthesize hyperlinkParameters = hyperlinkParameters_;

+ (JavaUtilLoggingLogger *)logger {
  return OrgOssPdfreporterEngineFillJRFillTextField_logger_;
}

- (id)initWithOrgOssPdfreporterEngineFillJRBaseFiller:(OrgOssPdfreporterEngineFillJRBaseFiller *)filler
               withOrgOssPdfreporterEngineJRTextField:(id<OrgOssPdfreporterEngineJRTextField>)textField
   withOrgOssPdfreporterEngineFillJRFillObjectFactory:(OrgOssPdfreporterEngineFillJRFillObjectFactory *)factory {
  if ((self = [super initWithOrgOssPdfreporterEngineFillJRBaseFiller:filler withOrgOssPdfreporterEngineJRTextElement:textField withOrgOssPdfreporterEngineFillJRFillObjectFactory:factory])) {
    [((JavaUtilLoggingLogger *) nil_chk(OrgOssPdfreporterEngineFillJRFillTextField_logger_)) finestWithNSString:[NSString stringWithFormat:@"Expression: %d", [((id<OrgOssPdfreporterEngineJRExpression>) nil_chk([self getExpression])) getId]]];
    evaluationGroup_ = [((OrgOssPdfreporterEngineFillJRFillObjectFactory *) nil_chk(factory)) getGroupWithOrgOssPdfreporterEngineJRGroup:[((id<OrgOssPdfreporterEngineJRTextField>) nil_chk(textField)) getEvaluationGroup]];
  }
  return self;
}

- (id)initWithOrgOssPdfreporterEngineFillJRFillTextField:(OrgOssPdfreporterEngineFillJRFillTextField *)textField
       withOrgOssPdfreporterEngineFillJRFillCloneFactory:(OrgOssPdfreporterEngineFillJRFillCloneFactory *)factory {
  if ((self = [super initWithOrgOssPdfreporterEngineFillJRFillTextElement:textField withOrgOssPdfreporterEngineFillJRFillCloneFactory:factory])) {
    [((JavaUtilLoggingLogger *) nil_chk(OrgOssPdfreporterEngineFillJRFillTextField_logger_)) finestWithNSString:[NSString stringWithFormat:@"Expression: %d", [((id<OrgOssPdfreporterEngineJRExpression>) nil_chk([self getExpression])) getId]]];
    self.evaluationGroup = ((OrgOssPdfreporterEngineFillJRFillTextField *) nil_chk(textField)).evaluationGroup;
  }
  return self;
}

- (BOOL)isStretchWithOverflow {
  return [((id<OrgOssPdfreporterEngineJRTextField>) parent_) isStretchWithOverflow];
}

- (void)setStretchWithOverflowWithBOOL:(BOOL)isStretchWithOverflow {
}

- (OrgOssPdfreporterEngineTypeEvaluationTimeEnumEnum *)getEvaluationTimeValue {
  return [((id<OrgOssPdfreporterEngineJRTextField>) parent_) getEvaluationTimeValue];
}

- (id<OrgOssPdfreporterEngineFillTextFormat>)getTextFormat {
  return textFormat_;
}

- (NSString *)getPattern {
  if ([self getPatternExpression] == nil) {
    return [OrgOssPdfreporterEngineUtilJRStyleResolver getPatternWithOrgOssPdfreporterEngineJRTextField:self];
  }
  return pattern_;
}

- (NSString *)getOwnPattern {
  return providerStyle_ == nil || [((id<OrgOssPdfreporterEngineJRStyle>) nil_chk(providerStyle_)) getOwnPattern] == nil ? [((id<OrgOssPdfreporterEngineJRTextField>) self.parent) getOwnPattern] : [((id<OrgOssPdfreporterEngineJRStyle>) nil_chk(providerStyle_)) getOwnPattern];
}

- (void)setPatternWithNSString:(NSString *)pattern {
}

- (BOOL)isBlankWhenNull {
  return [OrgOssPdfreporterEngineUtilJRStyleResolver isBlankWhenNullWithOrgOssPdfreporterEngineJRTextField:self];
}

- (JavaLangBoolean *)isOwnBlankWhenNull {
  return providerStyle_ == nil || [((id<OrgOssPdfreporterEngineJRStyle>) nil_chk(providerStyle_)) isOwnBlankWhenNull] == nil ? [((id<OrgOssPdfreporterEngineJRTextField>) self.parent) isOwnBlankWhenNull] : [((id<OrgOssPdfreporterEngineJRStyle>) nil_chk(providerStyle_)) isOwnBlankWhenNull];
}

- (void)setBlankWhenNullWithBOOL:(BOOL)isBlank {
}

- (void)setBlankWhenNullWithJavaLangBoolean:(JavaLangBoolean *)isBlank {
}

- (char)getHyperlinkType {
  return [((OrgOssPdfreporterEngineTypeHyperlinkTypeEnumEnum *) nil_chk([self getHyperlinkTypeValue])) getValue];
}

- (OrgOssPdfreporterEngineTypeHyperlinkTypeEnumEnum *)getHyperlinkTypeValue {
  return [((id<OrgOssPdfreporterEngineJRTextField>) parent_) getHyperlinkTypeValue];
}

- (char)getHyperlinkTarget {
  return [((id<OrgOssPdfreporterEngineJRTextField>) parent_) getHyperlinkTarget];
}

- (NSString *)getLinkTarget {
  return [((id<OrgOssPdfreporterEngineJRTextField>) parent_) getLinkTarget];
}

- (id<OrgOssPdfreporterEngineJRGroup>)getEvaluationGroup {
  return evaluationGroup_;
}

- (id<OrgOssPdfreporterEngineJRExpression>)getExpression {
  return [((id<OrgOssPdfreporterEngineJRTextField>) parent_) getExpression];
}

- (id<OrgOssPdfreporterEngineJRExpression>)getPatternExpression {
  return [((id<OrgOssPdfreporterEngineJRTextField>) parent_) getPatternExpression];
}

- (id<OrgOssPdfreporterEngineJRExpression>)getAnchorNameExpression {
  return [((id<OrgOssPdfreporterEngineJRTextField>) parent_) getAnchorNameExpression];
}

- (id<OrgOssPdfreporterEngineJRExpression>)getHyperlinkReferenceExpression {
  return [((id<OrgOssPdfreporterEngineJRTextField>) parent_) getHyperlinkReferenceExpression];
}

- (id<OrgOssPdfreporterEngineJRExpression>)getHyperlinkAnchorExpression {
  return [((id<OrgOssPdfreporterEngineJRTextField>) parent_) getHyperlinkAnchorExpression];
}

- (id<OrgOssPdfreporterEngineJRExpression>)getHyperlinkPageExpression {
  return [((id<OrgOssPdfreporterEngineJRTextField>) parent_) getHyperlinkPageExpression];
}

- (id)getValue {
  return value_;
}

- (NSString *)getAnchorName {
  return anchorName_;
}

- (NSString *)getHyperlinkReference {
  return hyperlinkReference_;
}

- (NSString *)getHyperlinkAnchor {
  return hyperlinkAnchor_;
}

- (JavaLangInteger *)getHyperlinkPage {
  return hyperlinkPage_;
}

- (NSString *)getHyperlinkTooltip {
  return hyperlinkTooltip_;
}

- (OrgOssPdfreporterEngineFillJRTemplateText *)getJRTemplateText {
  return (OrgOssPdfreporterEngineFillJRTemplateText *) [self getElementTemplate];
}

- (OrgOssPdfreporterEngineFillJRTemplateElement *)createElementTemplate {
  OrgOssPdfreporterEngineFillJRTemplateText *template_ = [[OrgOssPdfreporterEngineFillJRTemplateText alloc] initWithOrgOssPdfreporterEngineJROrigin:[self getElementOrigin] withOrgOssPdfreporterEngineJRDefaultStyleProvider:[((OrgOssPdfreporterEngineJasperPrint *) nil_chk([((OrgOssPdfreporterEngineFillJRBaseFiller *) nil_chk(filler_)) getJasperPrint])) getDefaultStyleProvider] withOrgOssPdfreporterEngineJRTextField:self];
  return template_;
}

- (void)evaluateTextFormatWithOrgOssPdfreporterTextFormatIFormat:(id<OrgOssPdfreporterTextFormatIFormat>)format
                                                          withId:(id)value
                                            withJavaUtilTimeZone:(JavaUtilTimeZone *)ownTimeZone {
  if (value != nil) {
    if (!([value isKindOfClass:[NSString class]])) {
      OrgOssPdfreporterEngineFillSimpleTextFormat *simpleTextFormat = [[OrgOssPdfreporterEngineFillSimpleTextFormat alloc] init];
      [((OrgOssPdfreporterEngineFillSimpleTextFormat *) nil_chk(simpleTextFormat)) setValueClassNameWithNSString:[[value getClass] getName]];
      NSString *pattern = [self getTemplatePatternWithOrgOssPdfreporterTextFormatIFormat:format withId:value];
      if (pattern != nil) {
        [((OrgOssPdfreporterEngineFillSimpleTextFormat *) nil_chk(simpleTextFormat)) setPatternWithNSString:pattern];
      }
      if (![((OrgOssPdfreporterEngineFillJRBaseFiller *) nil_chk(filler_)) hasMasterFormatFactory]) {
        [((OrgOssPdfreporterEngineFillSimpleTextFormat *) nil_chk(simpleTextFormat)) setFormatFactoryClassWithNSString:[[((id<OrgOssPdfreporterTextFormatFactoryIFormatFactory>) nil_chk([((OrgOssPdfreporterEngineFillJRBaseFiller *) nil_chk(filler_)) getFormatFactory])) getClass] getName]];
      }
      if (![((OrgOssPdfreporterEngineFillJRBaseFiller *) nil_chk(filler_)) hasMasterLocale]) {
        [((OrgOssPdfreporterEngineFillSimpleTextFormat *) nil_chk(simpleTextFormat)) setLocaleCodeWithNSString:[OrgOssPdfreporterEngineUtilJRDataUtils getLocaleCodeWithJavaUtilLocale:[((OrgOssPdfreporterEngineFillJRBaseFiller *) nil_chk(filler_)) getLocale]]];
      }
      if ([value isKindOfClass:[JavaUtilDate class]]) {
        JavaUtilTimeZone *formatTimeZone = ownTimeZone == nil ? [((OrgOssPdfreporterEngineFillJRBaseFiller *) nil_chk(filler_)) getTimeZone] : ownTimeZone;
        if (![((JavaUtilTimeZone *) nil_chk(formatTimeZone)) isEqual:[((OrgOssPdfreporterEngineFillJRFillContext *) nil_chk(((OrgOssPdfreporterEngineFillJRBaseFiller *) nil_chk(filler_)).fillContext)) getMasterTimeZone]]) {
          [((OrgOssPdfreporterEngineFillSimpleTextFormat *) nil_chk(simpleTextFormat)) setTimeZoneIdWithNSString:[OrgOssPdfreporterEngineUtilJRDataUtils getTimeZoneIdWithJavaUtilTimeZone:formatTimeZone]];
        }
      }
      textFormat_ = simpleTextFormat;
    }
  }
}

- (JavaUtilTimeZone *)toFormatTimeZoneWithNSString:(NSString *)timezoneId {
  if (timezoneId == nil || [((NSString *) nil_chk(timezoneId)) isEmpty]) {
    return nil;
  }
  if ([((NSString *) nil_chk(timezoneId)) isEqual:[OrgOssPdfreporterEngineJRTextField FORMAT_TIMEZONE_SYSTEM]]) {
    return [JavaUtilTimeZone getDefault];
  }
  return [JavaUtilTimeZone getTimeZoneWithNSString:timezoneId];
}

- (void)evaluateWithChar:(char)evaluation {
  [self initDelayedEvaluations];
  [self reset];
  [self evaluatePrintWhenExpressionWithChar:evaluation];
  if ([self isPrintWhenExpressionNull] || [self isPrintWhenTrue]) {
    if ([self isEvaluateNow]) {
      [self evaluateTextWithChar:evaluation];
    }
  }
}

- (void)evaluateTextWithChar:(char)evaluation {
  [self evaluatePropertiesWithChar:evaluation];
  [self evaluateStyleWithChar:evaluation];
  value_ = [self evaluateExpressionWithOrgOssPdfreporterEngineJRExpression:[self getExpression] withChar:evaluation];
  NSString *strValue = nil;
  pattern_ = (NSString *) [self evaluateExpressionWithOrgOssPdfreporterEngineJRExpression:[self getPatternExpression] withChar:evaluation];
  if (value_ == nil) {
    if ([self isBlankWhenNull]) {
      strValue = @"";
    }
    else {
      strValue = nil;
    }
  }
  else {
    JavaUtilTimeZone *ownTimeZone = nil;
    if ([value_ isKindOfClass:[JavaUtilDate class]]) {
      NSString *ownTimezoneId = [self hasProperties] ? [((OrgOssPdfreporterEngineJRPropertiesMap *) nil_chk([self getPropertiesMap])) getPropertyWithNSString:[OrgOssPdfreporterEngineJRTextField PROPERTY_FORMAT_TIMEZONE]] : nil;
      ownTimeZone = [self toFormatTimeZoneWithNSString:ownTimezoneId];
    }
    id<OrgOssPdfreporterTextFormatIFormat> format = [self getFormatWithId:value_ withJavaUtilTimeZone:ownTimeZone];
    [self evaluateTextFormatWithOrgOssPdfreporterTextFormatIFormat:format withId:value_ withJavaUtilTimeZone:ownTimeZone];
    if (format == nil) {
      strValue = [nil_chk(value_) description];
    }
    else {
      strValue = [format formatWithId:value_];
    }
  }
  NSString *oldRawText = [self getRawText];
  NSString *newRawText = [self processMarkupTextWithNSString:[NSString valueOf:strValue]];
  [self setRawTextWithNSString:newRawText];
  [self resetTextChunk];
  [self setValueRepeatingWithBOOL:(oldRawText == nil && newRawText == nil) || (oldRawText != nil && [((NSString *) nil_chk(oldRawText)) isEqual:newRawText])];
  anchorName_ = (NSString *) [self evaluateExpressionWithOrgOssPdfreporterEngineJRExpression:[self getAnchorNameExpression] withChar:evaluation];
  hyperlinkReference_ = (NSString *) [self evaluateExpressionWithOrgOssPdfreporterEngineJRExpression:[self getHyperlinkReferenceExpression] withChar:evaluation];
  hyperlinkAnchor_ = (NSString *) [self evaluateExpressionWithOrgOssPdfreporterEngineJRExpression:[self getHyperlinkAnchorExpression] withChar:evaluation];
  hyperlinkPage_ = (JavaLangInteger *) [self evaluateExpressionWithOrgOssPdfreporterEngineJRExpression:[self getHyperlinkPageExpression] withChar:evaluation];
  hyperlinkTooltip_ = (NSString *) [self evaluateExpressionWithOrgOssPdfreporterEngineJRExpression:[self getHyperlinkTooltipExpression] withChar:evaluation];
  hyperlinkParameters_ = [OrgOssPdfreporterEngineFillJRFillHyperlinkHelper evaluateHyperlinkParametersWithOrgOssPdfreporterEngineJRHyperlink:self withOrgOssPdfreporterEngineFillJRFillExpressionEvaluator:expressionEvaluator_ withChar:evaluation];
}

- (BOOL)prepareWithInt:(int)availableHeight
              withBOOL:(BOOL)isOverflow {
  BOOL willOverflow = NO;
  [super prepareWithInt:availableHeight withBOOL:isOverflow];
  if (![self isToPrint]) {
    return willOverflow;
  }
  BOOL isToPrint = YES;
  BOOL isReprinted = NO;
  if ([self isEvaluateNow]) {
    if (isOverflow) {
      if ([self getPositionTypeValue] == [OrgOssPdfreporterEngineTypePositionTypeEnumEnum FIX_RELATIVE_TO_BOTTOM]) {
        [self resetTextChunk];
      }
      if ([self getTextEnd] >= [((NSString *) nil_chk([self getText])) length] || ![self isStretchWithOverflow] || ![((OrgOssPdfreporterEngineTypeRotationEnumEnum *) nil_chk([self getRotationValue])) isEqual:[OrgOssPdfreporterEngineTypeRotationEnumEnum NONE]]) {
        if ([self isAlreadyPrinted]) {
          if ([self isPrintWhenDetailOverflows]) {
            [self resetTextChunk];
            isReprinted = YES;
          }
          else {
            isToPrint = NO;
          }
        }
      }
      if (isToPrint && [self isPrintWhenExpressionNull] && ![self isPrintRepeatedValues] && [self isValueRepeating]) {
        isToPrint = NO;
      }
    }
    else {
      if ([self isPrintWhenExpressionNull] && ![self isPrintRepeatedValues] && [self isValueRepeating]) {
        if ((![self isPrintInFirstWholeBand] || ![((OrgOssPdfreporterEngineFillJRFillBand *) nil_chk([self getBand])) isFirstWholeOnPageColumn]) && ([self getPrintWhenGroupChanges] == nil || ![((OrgOssPdfreporterEngineFillJRFillBand *) nil_chk([self getBand])) isNewGroupWithOrgOssPdfreporterEngineJRGroup:[self getPrintWhenGroupChanges]])) {
          isToPrint = NO;
        }
      }
    }
    if (isToPrint) {
      if (availableHeight >= [self getRelativeY] + [self getHeight]) {
        if ([self getTextEnd] < [((NSString *) nil_chk([self getText])) length] || [self getTextEnd] == 0) {
          if ([self isStretchWithOverflow] && [((OrgOssPdfreporterEngineTypeRotationEnumEnum *) nil_chk([self getRotationValue])) isEqual:[OrgOssPdfreporterEngineTypeRotationEnumEnum NONE]]) {
            [self chopTextElementWithInt:availableHeight - [self getRelativeY] - [self getHeight]];
            if ([self getTextEnd] < [((NSString *) nil_chk([self getText])) length]) {
              willOverflow = YES;
            }
          }
          else {
            [self chopTextElementWithInt:0];
          }
        }
        else {
          isToPrint = NO;
        }
      }
      else {
        isToPrint = NO;
        willOverflow = YES;
      }
    }
    if (isToPrint && [self isRemoveLineWhenBlank] && [((NSString *) nil_chk([((NSString *) nil_chk([((NSString *) nil_chk([self getText])) substring:[self getTextStart] endIndex:[self getTextEnd]])) trim])) length] == 0) {
      isToPrint = NO;
    }
  }
  else {
    if (isOverflow && [self isAlreadyPrinted]) {
      if ([self isPrintWhenDetailOverflows]) {
        isReprinted = YES;
      }
      else {
        isToPrint = NO;
      }
    }
    if (isToPrint && availableHeight < [self getRelativeY] + [self getHeight]) {
      isToPrint = NO;
      willOverflow = YES;
    }
  }
  [self setToPrintWithBOOL:isToPrint];
  [self setReprintedWithBOOL:isReprinted];
  return willOverflow;
}

- (id<OrgOssPdfreporterEngineJRPrintElement>)fill {
  OrgOssPdfreporterEngineTypeEvaluationTimeEnumEnum *evaluationTime = [self getEvaluationTimeValue];
  OrgOssPdfreporterEngineFillJRTemplatePrintText *text;
  OrgOssPdfreporterEngineFillJRRecordedValuesPrintText *recordedValuesText;
  if ([self isEvaluateAuto]) {
    text = recordedValuesText = [[OrgOssPdfreporterEngineFillJRRecordedValuesPrintText alloc] initWithOrgOssPdfreporterEngineFillJRTemplateText:[self getJRTemplateText] withInt:elementId_];
  }
  else {
    text = [[OrgOssPdfreporterEngineFillJRTemplatePrintText alloc] initWithOrgOssPdfreporterEngineFillJRTemplateText:[self getJRTemplateText] withInt:elementId_];
    recordedValuesText = nil;
  }
  [((OrgOssPdfreporterEngineFillJRTemplatePrintText *) nil_chk(text)) setUUIDWithOrgOssPdfreporterUsesJavaUtilUUID:[self getUUID]];
  [((OrgOssPdfreporterEngineFillJRTemplatePrintText *) nil_chk(text)) setXWithInt:[self getX]];
  [((OrgOssPdfreporterEngineFillJRTemplatePrintText *) nil_chk(text)) setYWithInt:[self getRelativeY]];
  [((OrgOssPdfreporterEngineFillJRTemplatePrintText *) nil_chk(text)) setWidthWithInt:[self getWidth]];
  [((OrgOssPdfreporterEngineFillJRTemplatePrintText *) nil_chk(text)) setHeightWithInt:[self getPrintElementHeight]];
  [((OrgOssPdfreporterEngineFillJRTemplatePrintText *) nil_chk(text)) setRunDirectionWithOrgOssPdfreporterEngineTypeRunDirectionEnumEnum:[self getRunDirectionValue]];
  if ([self isEvaluateNow]) {
    [self copy__WithOrgOssPdfreporterEngineJRPrintText:text];
  }
  else if ([self isEvaluateAuto]) {
    [self initDelayedEvaluationPrintWithOrgOssPdfreporterEngineFillJRRecordedValuesPrintElement:recordedValuesText];
  }
  else {
    [((OrgOssPdfreporterEngineFillJRBaseFiller *) nil_chk(filler_)) addBoundElementWithOrgOssPdfreporterEngineFillJRFillElement:self withOrgOssPdfreporterEngineJRPrintElement:text withOrgOssPdfreporterEngineTypeEvaluationTimeEnumEnum:evaluationTime withOrgOssPdfreporterEngineJRGroup:[self getEvaluationGroup] withOrgOssPdfreporterEngineFillJRFillBand:band_];
  }
  return text;
}

- (void)copy__WithOrgOssPdfreporterEngineJRPrintText:(id<OrgOssPdfreporterEngineJRPrintText>)text OBJC_METHOD_FAMILY_NONE {
  [((id<OrgOssPdfreporterEngineJRPrintText>) nil_chk(text)) setLineSpacingFactorWithFloat:[self getLineSpacingFactor]];
  [((id<OrgOssPdfreporterEngineJRPrintText>) nil_chk(text)) setLeadingOffsetWithFloat:[self getLeadingOffset]];
  [((id<OrgOssPdfreporterEngineJRPrintText>) nil_chk(text)) setTextHeightWithFloat:[self getTextHeight]];
  [((id<OrgOssPdfreporterEngineJRPrintText>) nil_chk(text)) setValueWithId:[self getValue]];
  [self setPrintTextWithOrgOssPdfreporterEngineJRPrintText:text];
  [((id<OrgOssPdfreporterEngineJRPrintText>) nil_chk(text)) setTextFormatWithOrgOssPdfreporterEngineFillTextFormat:[self getTextFormat]];
  [((id<OrgOssPdfreporterEngineJRPrintText>) nil_chk(text)) setAnchorNameWithNSString:[self getAnchorName]];
  [((id<OrgOssPdfreporterEngineJRPrintText>) nil_chk(text)) setHyperlinkReferenceWithNSString:[self getHyperlinkReference]];
  [((id<OrgOssPdfreporterEngineJRPrintText>) nil_chk(text)) setHyperlinkAnchorWithNSString:[self getHyperlinkAnchor]];
  [((id<OrgOssPdfreporterEngineJRPrintText>) nil_chk(text)) setHyperlinkPageWithJavaLangInteger:[self getHyperlinkPage]];
  [((id<OrgOssPdfreporterEngineJRPrintText>) nil_chk(text)) setHyperlinkTooltipWithNSString:[self getHyperlinkTooltip]];
  [((id<OrgOssPdfreporterEngineJRPrintText>) nil_chk(text)) setBookmarkLevelWithInt:[self getBookmarkLevel]];
  [((id<OrgOssPdfreporterEngineJRPrintText>) nil_chk(text)) setHyperlinkParametersWithOrgOssPdfreporterEngineJRPrintHyperlinkParameters:hyperlinkParameters_];
  [self transferPropertiesWithOrgOssPdfreporterEngineJRPrintElement:text];
}

- (id<OrgOssPdfreporterTextFormatIFormat>)getFormatWithId:(id)value
                                     withJavaUtilTimeZone:(JavaUtilTimeZone *)ownTimeZone {
  id<OrgOssPdfreporterTextFormatIFormat> format = nil;
  if ([value isKindOfClass:[JavaUtilDate class]]) {
    format = [((OrgOssPdfreporterEngineFillJRBaseFiller *) nil_chk(filler_)) getDateFormatWithNSString:[self getPattern] withJavaUtilTimeZone:ownTimeZone];
  }
  else if ([value isKindOfClass:[NSNumber class]]) {
    format = [((OrgOssPdfreporterEngineFillJRBaseFiller *) nil_chk(filler_)) getNumberFormatWithNSString:[self getPattern]];
  }
  return format;
}

- (NSString *)getTemplatePatternWithOrgOssPdfreporterTextFormatIFormat:(id<OrgOssPdfreporterTextFormatIFormat>)format
                                                                withId:(id)value {
  NSString *pattern = nil;
  NSString *originalPattern = [self getPattern];
  if (pattern == nil) {
    pattern = originalPattern;
  }
  return pattern;
}

- (void)collectExpressionsWithOrgOssPdfreporterEngineJRExpressionCollector:(OrgOssPdfreporterEngineJRExpressionCollector *)collector {
  [((OrgOssPdfreporterEngineJRExpressionCollector *) nil_chk(collector)) collectWithOrgOssPdfreporterEngineJRTextField:self];
}

- (void)visitWithOrgOssPdfreporterEngineJRVisitor:(id<OrgOssPdfreporterEngineJRVisitor>)visitor {
  [((id<OrgOssPdfreporterEngineJRVisitor>) nil_chk(visitor)) visitTextFieldWithOrgOssPdfreporterEngineJRTextField:self];
}

- (void)resolveElementWithOrgOssPdfreporterEngineJRPrintElement:(id<OrgOssPdfreporterEngineJRPrintElement>)element
                                                       withChar:(char)evaluation {
  [self evaluateTextWithChar:evaluation];
  [self chopTextElementWithInt:0];
  [self copy__WithOrgOssPdfreporterEngineJRPrintText:(id<OrgOssPdfreporterEngineJRPrintText>) element];
}

- (int)getBookmarkLevel {
  return [((id<OrgOssPdfreporterEngineJRTextField>) parent_) getBookmarkLevel];
}

- (id<OrgOssPdfreporterEngineFillJRFillCloneable>)createCloneWithOrgOssPdfreporterEngineFillJRFillCloneFactory:(OrgOssPdfreporterEngineFillJRFillCloneFactory *)factory {
  return [[OrgOssPdfreporterEngineFillJRFillTextField alloc] initWithOrgOssPdfreporterEngineFillJRFillTextField:self withOrgOssPdfreporterEngineFillJRFillCloneFactory:factory];
}

- (void)collectDelayedEvaluations {
  [super collectDelayedEvaluations];
  [self collectDelayedEvaluationsWithOrgOssPdfreporterEngineJRExpression:[self getExpression]];
  [self collectDelayedEvaluationsWithOrgOssPdfreporterEngineJRExpression:[self getPatternExpression]];
  [self collectDelayedEvaluationsWithOrgOssPdfreporterEngineJRExpression:[self getAnchorNameExpression]];
  [self collectDelayedEvaluationsWithOrgOssPdfreporterEngineJRExpression:[self getHyperlinkReferenceExpression]];
  [self collectDelayedEvaluationsWithOrgOssPdfreporterEngineJRExpression:[self getHyperlinkAnchorExpression]];
  [self collectDelayedEvaluationsWithOrgOssPdfreporterEngineJRExpression:[self getHyperlinkPageExpression]];
}

- (IOSObjectArray *)getHyperlinkParameters {
  return [((id<OrgOssPdfreporterEngineJRTextField>) parent_) getHyperlinkParameters];
}

- (NSString *)getLinkType {
  return [((id<OrgOssPdfreporterEngineJRTextField>) parent_) getLinkType];
}

- (id<OrgOssPdfreporterEngineJRExpression>)getHyperlinkTooltipExpression {
  return [((id<OrgOssPdfreporterEngineJRTextField>) parent_) getHyperlinkTooltipExpression];
}

- (BOOL)canOverflow {
  return [self isStretchWithOverflow] && [((OrgOssPdfreporterEngineTypeRotationEnumEnum *) nil_chk([self getRotationValue])) isEqual:[OrgOssPdfreporterEngineTypeRotationEnumEnum NONE]] && [self isEvaluateNow] && [((OrgOssPdfreporterEngineFillJRBaseFiller *) nil_chk(filler_)) isBandOverFlowAllowed];
}

+ (void)initialize {
  if (self == [OrgOssPdfreporterEngineFillJRFillTextField class]) {
    OrgOssPdfreporterEngineFillJRFillTextField_logger_ = [JavaUtilLoggingLogger getLoggerWithNSString:[[IOSClass classWithClass:[OrgOssPdfreporterEngineFillJRFillTextField class]] getName]];
  }
}

- (void)copyAllPropertiesTo:(id)copy {
  [super copyAllPropertiesTo:copy];
  OrgOssPdfreporterEngineFillJRFillTextField *typedCopy = (OrgOssPdfreporterEngineFillJRFillTextField *) copy;
  typedCopy.evaluationGroup = evaluationGroup_;
  typedCopy.value = value_;
  typedCopy.textFormat = textFormat_;
  typedCopy.pattern = pattern_;
  typedCopy.anchorName = anchorName_;
  typedCopy.hyperlinkReference = hyperlinkReference_;
  typedCopy.hyperlinkAnchor = hyperlinkAnchor_;
  typedCopy.hyperlinkPage = hyperlinkPage_;
  typedCopy.hyperlinkTooltip = hyperlinkTooltip_;
  typedCopy.hyperlinkParameters = hyperlinkParameters_;
}

@end
