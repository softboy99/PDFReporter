//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: pdfreporter-core/src/org/oss/pdfreporter/engine/fill/JRBaseFiller.java
//
//  Created by kendra on 9/27/13.
//

#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "java/lang/Boolean.h"
#include "java/lang/Integer.h"
#include "java/lang/System.h"
#include "java/lang/Thread.h"
#include "java/lang/Void.h"
#include "java/util/ArrayList.h"
#include "java/util/Arrays.h"
#include "java/util/Collection.h"
#include "java/util/HashMap.h"
#include "java/util/HashSet.h"
#include "java/util/Iterator.h"
#include "java/util/LinkedHashMap.h"
#include "java/util/List.h"
#include "java/util/Locale.h"
#include "java/util/Map.h"
#include "java/util/Set.h"
#include "java/util/TimeZone.h"
#include "java/util/logging/Level.h"
#include "java/util/logging/Logger.h"
#include "org/oss/pdfreporter/engine/JRAbstractScriptlet.h"
#include "org/oss/pdfreporter/engine/JRBand.h"
#include "org/oss/pdfreporter/engine/JRDataSource.h"
#include "org/oss/pdfreporter/engine/JRDataset.h"
#include "org/oss/pdfreporter/engine/JRExpression.h"
#include "org/oss/pdfreporter/engine/JRGroup.h"
#include "org/oss/pdfreporter/engine/JROrigin.h"
#include "org/oss/pdfreporter/engine/JRParameter.h"
#include "org/oss/pdfreporter/engine/JRPrintElement.h"
#include "org/oss/pdfreporter/engine/JRPrintPage.h"
#include "org/oss/pdfreporter/engine/JRPropertiesMap.h"
#include "org/oss/pdfreporter/engine/JRPropertiesUtil.h"
#include "org/oss/pdfreporter/engine/JRReportTemplate.h"
#include "org/oss/pdfreporter/engine/JRRuntimeException.h"
#include "org/oss/pdfreporter/engine/JRSection.h"
#include "org/oss/pdfreporter/engine/JRStyle.h"
#include "org/oss/pdfreporter/engine/JRStyleSetter.h"
#include "org/oss/pdfreporter/engine/JRTemplate.h"
#include "org/oss/pdfreporter/engine/JRTemplateReference.h"
#include "org/oss/pdfreporter/engine/JRVirtualizable.h"
#include "org/oss/pdfreporter/engine/JRVirtualizer.h"
#include "org/oss/pdfreporter/engine/JasperPrint.h"
#include "org/oss/pdfreporter/engine/JasperReport.h"
#include "org/oss/pdfreporter/engine/JasperReportsContext.h"
#include "org/oss/pdfreporter/engine/PrintElementVisitor.h"
#include "org/oss/pdfreporter/engine/ReportContext.h"
#include "org/oss/pdfreporter/engine/base/JRBasePrintPage.h"
#include "org/oss/pdfreporter/engine/base/JRBaseStyle.h"
#include "org/oss/pdfreporter/engine/base/JRVirtualPrintPage.h"
#include "org/oss/pdfreporter/engine/base/VirtualElementsData.h"
#include "org/oss/pdfreporter/engine/base/VirtualizablePageElements.h"
#include "org/oss/pdfreporter/engine/fill/CompositeFillListener.h"
#include "org/oss/pdfreporter/engine/fill/DatasetExpressionEvaluator.h"
#include "org/oss/pdfreporter/engine/fill/EvaluationBoundAction.h"
#include "org/oss/pdfreporter/engine/fill/FillDatasetPosition.h"
#include "org/oss/pdfreporter/engine/fill/FillListener.h"
#include "org/oss/pdfreporter/engine/fill/JRBaseFiller.h"
#include "org/oss/pdfreporter/engine/fill/JRCalculator.h"
#include "org/oss/pdfreporter/engine/fill/JREvaluationTime.h"
#include "org/oss/pdfreporter/engine/fill/JREvaluator.h"
#include "org/oss/pdfreporter/engine/fill/JRFillBand.h"
#include "org/oss/pdfreporter/engine/fill/JRFillContext.h"
#include "org/oss/pdfreporter/engine/fill/JRFillDataset.h"
#include "org/oss/pdfreporter/engine/fill/JRFillElement.h"
#include "org/oss/pdfreporter/engine/fill/JRFillExpressionEvaluator.h"
#include "org/oss/pdfreporter/engine/fill/JRFillField.h"
#include "org/oss/pdfreporter/engine/fill/JRFillGroup.h"
#include "org/oss/pdfreporter/engine/fill/JRFillInterruptedException.h"
#include "org/oss/pdfreporter/engine/fill/JRFillObjectFactory.h"
#include "org/oss/pdfreporter/engine/fill/JRFillParameter.h"
#include "org/oss/pdfreporter/engine/fill/JRFillReportTemplate.h"
#include "org/oss/pdfreporter/engine/fill/JRFillSection.h"
#include "org/oss/pdfreporter/engine/fill/JRFillSubreport.h"
#include "org/oss/pdfreporter/engine/fill/JRFillVariable.h"
#include "org/oss/pdfreporter/engine/fill/JRSubreportRunner.h"
#include "org/oss/pdfreporter/engine/fill/JRVirtualizationContext.h"
#include "org/oss/pdfreporter/engine/fill/SavePoint.h"
#include "org/oss/pdfreporter/engine/type/BandTypeEnum.h"
#include "org/oss/pdfreporter/engine/type/CalculationEnum.h"
#include "org/oss/pdfreporter/engine/type/EvaluationTimeEnum.h"
#include "org/oss/pdfreporter/engine/type/OrientationEnum.h"
#include "org/oss/pdfreporter/engine/type/PrintOrderEnum.h"
#include "org/oss/pdfreporter/engine/type/RunDirectionEnum.h"
#include "org/oss/pdfreporter/engine/type/WhenNoDataTypeEnum.h"
#include "org/oss/pdfreporter/engine/type/WhenResourceMissingTypeEnum.h"
#include "org/oss/pdfreporter/engine/util/JRDataUtils.h"
#include "org/oss/pdfreporter/engine/util/JRGraphEnvInitializer.h"
#include "org/oss/pdfreporter/engine/util/JRStyledTextParser.h"
#include "org/oss/pdfreporter/engine/util/LinkedMap.h"
#include "org/oss/pdfreporter/engine/util/LocalJasperReportsContext.h"
#include "org/oss/pdfreporter/registry/ApiRegistry.h"
#include "org/oss/pdfreporter/sql/IConnection.h"
#include "org/oss/pdfreporter/text/format/IDateFormat.h"
#include "org/oss/pdfreporter/text/format/IFormat.h"
#include "org/oss/pdfreporter/text/format/INumberFormat.h"
#include "org/oss/pdfreporter/text/format/factory/IFormatFactory.h"

@implementation OrgOssPdfreporterEngineFillJRBaseFiller

static JavaUtilLoggingLogger * OrgOssPdfreporterEngineFillJRBaseFiller_logger_;
static id<OrgOssPdfreporterEngineJRStyleSetter> OrgOssPdfreporterEngineFillJRBaseFiller_DUMMY_STYLE_SETTER_;

@synthesize time = time_;
@synthesize fillElements = fillElements_;
@synthesize fillerId = fillerId_;
@synthesize parentFiller = parentFiller_;
@synthesize parentElement = parentElement_;
@synthesize factory = factory_;
@synthesize styledTextParser = styledTextParser_;
@synthesize fillListener = fillListener_;
@synthesize isInterrupted_ = isInterrupted__;
@synthesize name = name_;
@synthesize columnCount = columnCount_;
@synthesize printOrder = printOrder_;
@synthesize columnDirection = columnDirection_;
@synthesize pageWidth = pageWidth_;
@synthesize pageHeight = pageHeight_;
@synthesize orientation = orientation_;
@synthesize whenNoDataType = whenNoDataType_;
@synthesize columnWidth = columnWidth_;
@synthesize columnSpacing = columnSpacing_;
@synthesize leftMargin = leftMargin_;
@synthesize rightMargin = rightMargin_;
@synthesize topMargin = topMargin_;
@synthesize bottomMargin = bottomMargin_;
@synthesize isTitleNewPage = isTitleNewPage_;
@synthesize isSummaryNewPage = isSummaryNewPage_;
@synthesize isSummaryWithPageHeaderAndFooter = isSummaryWithPageHeaderAndFooter_;
@synthesize isFloatColumnFooter = isFloatColumnFooter_;
@synthesize whenResourceMissingType = whenResourceMissingType_;
@synthesize reportTemplates = reportTemplates_;
@synthesize templates = templates_;
@synthesize defaultStyle = defaultStyle_;
@synthesize styles = styles_;
@synthesize mainDataset = mainDataset_;
@synthesize groups = groups_;
@synthesize missingFillSection = missingFillSection_;
@synthesize missingFillBand = missingFillBand_;
@synthesize background = background_;
@synthesize title = title_;
@synthesize pageHeader = pageHeader_;
@synthesize columnHeader = columnHeader_;
@synthesize detailSection = detailSection_;
@synthesize columnFooter = columnFooter_;
@synthesize pageFooter = pageFooter_;
@synthesize lastPageFooter = lastPageFooter_;
@synthesize summary = summary_;
@synthesize noData = noData_;
@synthesize virtualizationContext = virtualizationContext_;
@synthesize virtualizationListener = virtualizationListener_;
@synthesize formatFactory = formatFactory_;
@synthesize fillContext = fillContext_;
@synthesize boundElements = boundElements_;
@synthesize jasperPrint = jasperPrint_;
@synthesize printPage = printPage_;
@synthesize printPageStretchHeight = printPageStretchHeight_;
@synthesize bands = bands_;
@synthesize subfillers = subfillers_;
@synthesize fillingThread = fillingThread_;
@synthesize calculator = calculator_;
@synthesize scriptlet = scriptlet_;
@synthesize datasetMap = datasetMap_;
@synthesize jasperReportsContext = jasperReportsContext_;
@synthesize propertiesUtil = propertiesUtil_;
@synthesize jasperReport = jasperReport_;
@synthesize bandOverFlowAllowed = bandOverFlowAllowed_;
@synthesize dateFormatCache = dateFormatCache_;
@synthesize numberFormatCache = numberFormatCache_;
@synthesize subreportRunner = subreportRunner_;
@synthesize keepTogetherSavePoint = keepTogetherSavePoint_;
@synthesize isCreatingNewPage = isCreatingNewPage_;
@synthesize isNewPage = isNewPage_;
@synthesize isNewColumn = isNewColumn_;
@synthesize isNewGroup = isNewGroup_;
@synthesize isFirstPageBand = isFirstPageBand_;
@synthesize isFirstColumnBand = isFirstColumnBand_;
@synthesize columnIndex = columnIndex_;
@synthesize offsetX = offsetX_;
@synthesize offsetY = offsetY_;
@synthesize columnHeaderOffsetY = columnHeaderOffsetY_;
@synthesize columnFooterOffsetY = columnFooterOffsetY_;
@synthesize lastPageColumnFooterOffsetY = lastPageColumnFooterOffsetY_;
@synthesize isLastPageFooter = isLastPageFooter_;
@synthesize defaultStyleListeners = defaultStyleListeners_;

+ (JavaUtilLoggingLogger *)logger {
  return OrgOssPdfreporterEngineFillJRBaseFiller_logger_;
}

+ (id<OrgOssPdfreporterEngineJRStyleSetter>)DUMMY_STYLE_SETTER {
  return OrgOssPdfreporterEngineFillJRBaseFiller_DUMMY_STYLE_SETTER_;
}

- (id)initWithOrgOssPdfreporterEngineJasperReportsContext:(id<OrgOssPdfreporterEngineJasperReportsContext>)jasperReportsContext
                  withOrgOssPdfreporterEngineJasperReport:(OrgOssPdfreporterEngineJasperReport *)jasperReport
               withOrgOssPdfreporterEngineFillJREvaluator:(OrgOssPdfreporterEngineFillJREvaluator *)initEvaluator
           withOrgOssPdfreporterEngineFillJRFillSubreport:(OrgOssPdfreporterEngineFillJRFillSubreport *)parentElement {
  return [self initOrgOssPdfreporterEngineFillJRBaseFillerWithOrgOssPdfreporterEngineJasperReportsContext:jasperReportsContext withOrgOssPdfreporterEngineJasperReport:jasperReport withOrgOssPdfreporterEngineFillDatasetExpressionEvaluator:(id<OrgOssPdfreporterEngineFillDatasetExpressionEvaluator>) initEvaluator withOrgOssPdfreporterEngineFillJRFillSubreport:parentElement];
}

- (id)initOrgOssPdfreporterEngineFillJRBaseFillerWithOrgOssPdfreporterEngineJasperReportsContext:(id<OrgOssPdfreporterEngineJasperReportsContext>)jasperReportsContext
                                                         withOrgOssPdfreporterEngineJasperReport:(OrgOssPdfreporterEngineJasperReport *)jasperReport
                                       withOrgOssPdfreporterEngineFillDatasetExpressionEvaluator:(id<OrgOssPdfreporterEngineFillDatasetExpressionEvaluator>)initEvaluator
                                                  withOrgOssPdfreporterEngineFillJRFillSubreport:(OrgOssPdfreporterEngineFillJRFillSubreport *)parentElement {
  if ((self = [super init])) {
    time_ = [JavaLangSystem currentTimeMillis];
    fillElements_ = [[JavaUtilHashMap alloc] init];
    styledTextParser_ = [OrgOssPdfreporterEngineUtilJRStyledTextParser getInstance];
    columnCount_ = 1;
    printOrder_ = [OrgOssPdfreporterEngineTypePrintOrderEnumEnum VERTICAL];
    columnDirection_ = [OrgOssPdfreporterEngineTypeRunDirectionEnumEnum LTR];
    orientation_ = [OrgOssPdfreporterEngineTypeOrientationEnumEnum PORTRAIT];
    whenNoDataType_ = [OrgOssPdfreporterEngineTypeWhenNoDataTypeEnumEnum NO_PAGES];
    whenResourceMissingType_ = [OrgOssPdfreporterEngineTypeWhenResourceMissingTypeEnumEnum NULL_];
    dateFormatCache_ = [[JavaUtilHashMap alloc] init];
    numberFormatCache_ = [[JavaUtilHashMap alloc] init];
    isNewGroup_ = YES;
    defaultStyleListeners_ = [[JavaUtilArrayList alloc] init];
    [OrgOssPdfreporterEngineUtilJRGraphEnvInitializer initializeGraphEnv];
    [self setJasperReportsContextWithOrgOssPdfreporterEngineJasperReportsContext:jasperReportsContext];
    self.jasperReport = jasperReport;
    self.parentElement = parentElement;
    if (parentElement != nil) {
      self.parentFiller = parentElement.filler;
    }
    if (parentFiller_ == nil) {
      fillContext_ = [[OrgOssPdfreporterEngineFillJRFillContext alloc] initWithOrgOssPdfreporterEngineFillJRBaseFiller:self];
    }
    else {
      fillContext_ = parentFiller_.fillContext;
    }
    self.fillerId = [((OrgOssPdfreporterEngineFillJRFillContext *) nil_chk(fillContext_)) generatedFillerId];
    name_ = [((OrgOssPdfreporterEngineJasperReport *) nil_chk(jasperReport)) getName];
    columnCount_ = [((OrgOssPdfreporterEngineJasperReport *) nil_chk(jasperReport)) getColumnCount];
    printOrder_ = [((OrgOssPdfreporterEngineJasperReport *) nil_chk(jasperReport)) getPrintOrderValue];
    columnDirection_ = [((OrgOssPdfreporterEngineJasperReport *) nil_chk(jasperReport)) getColumnDirection];
    pageWidth_ = [((OrgOssPdfreporterEngineJasperReport *) nil_chk(jasperReport)) getPageWidth];
    pageHeight_ = [((OrgOssPdfreporterEngineJasperReport *) nil_chk(jasperReport)) getPageHeight];
    orientation_ = [((OrgOssPdfreporterEngineJasperReport *) nil_chk(jasperReport)) getOrientationValue];
    whenNoDataType_ = [((OrgOssPdfreporterEngineJasperReport *) nil_chk(jasperReport)) getWhenNoDataTypeValue];
    columnWidth_ = [((OrgOssPdfreporterEngineJasperReport *) nil_chk(jasperReport)) getColumnWidth];
    columnSpacing_ = [((OrgOssPdfreporterEngineJasperReport *) nil_chk(jasperReport)) getColumnSpacing];
    leftMargin_ = [((OrgOssPdfreporterEngineJasperReport *) nil_chk(jasperReport)) getLeftMargin];
    rightMargin_ = [((OrgOssPdfreporterEngineJasperReport *) nil_chk(jasperReport)) getRightMargin];
    topMargin_ = [((OrgOssPdfreporterEngineJasperReport *) nil_chk(jasperReport)) getTopMargin];
    bottomMargin_ = [((OrgOssPdfreporterEngineJasperReport *) nil_chk(jasperReport)) getBottomMargin];
    isTitleNewPage_ = [((OrgOssPdfreporterEngineJasperReport *) nil_chk(jasperReport)) isTitleNewPage];
    isSummaryNewPage_ = [((OrgOssPdfreporterEngineJasperReport *) nil_chk(jasperReport)) isSummaryNewPage];
    isSummaryWithPageHeaderAndFooter_ = [((OrgOssPdfreporterEngineJasperReport *) nil_chk(jasperReport)) isSummaryWithPageHeaderAndFooter];
    isFloatColumnFooter_ = [((OrgOssPdfreporterEngineJasperReport *) nil_chk(jasperReport)) isFloatColumnFooter];
    whenResourceMissingType_ = [((OrgOssPdfreporterEngineJasperReport *) nil_chk(jasperReport)) getWhenResourceMissingTypeValue];
    jasperPrint_ = [[OrgOssPdfreporterEngineJasperPrint alloc] init];
    [((OrgOssPdfreporterEngineJRPropertiesUtil *) nil_chk([self getPropertiesUtil])) transferPropertiesWithOrgOssPdfreporterEngineJRPropertiesHolder:jasperReport withOrgOssPdfreporterEngineJRPropertiesHolder:jasperPrint_ withNSString:[OrgOssPdfreporterEngineJasperPrint PROPERTIES_PRINT_TRANSFER_PREFIX]];
    if (initEvaluator == nil) {
      calculator_ = [OrgOssPdfreporterEngineFillJRFillDataset createCalculatorWithOrgOssPdfreporterEngineJasperReportsContext:jasperReportsContext withOrgOssPdfreporterEngineJasperReport:jasperReport withOrgOssPdfreporterEngineJRDataset:[((OrgOssPdfreporterEngineJasperReport *) nil_chk(jasperReport)) getMainDataset]];
    }
    else {
      calculator_ = [[OrgOssPdfreporterEngineFillJRCalculator alloc] initWithOrgOssPdfreporterEngineFillDatasetExpressionEvaluator:initEvaluator];
    }
    factory_ = [[OrgOssPdfreporterEngineFillJRFillObjectFactory alloc] initWithOrgOssPdfreporterEngineFillJRBaseFiller:self];
    missingFillBand_ = [[OrgOssPdfreporterEngineFillJRFillBand alloc] initWithOrgOssPdfreporterEngineFillJRBaseFiller:self withOrgOssPdfreporterEngineJRBand:nil withOrgOssPdfreporterEngineFillJRFillObjectFactory:factory_];
    missingFillSection_ = [[OrgOssPdfreporterEngineFillJRFillSection alloc] initWithOrgOssPdfreporterEngineFillJRBaseFiller:self withOrgOssPdfreporterEngineJRSection:nil withOrgOssPdfreporterEngineFillJRFillObjectFactory:factory_];
    [self createDatasets];
    mainDataset_ = [((OrgOssPdfreporterEngineFillJRFillObjectFactory *) nil_chk(factory_)) getDatasetWithOrgOssPdfreporterEngineJRDataset:[((OrgOssPdfreporterEngineJasperReport *) nil_chk(jasperReport)) getMainDataset]];
    if (parentFiller_ == nil) {
      OrgOssPdfreporterEngineFillFillDatasetPosition *masterFillPosition = [[OrgOssPdfreporterEngineFillFillDatasetPosition alloc] initWithOrgOssPdfreporterEngineFillFillDatasetPosition:nil];
      [((OrgOssPdfreporterEngineFillJRFillDataset *) nil_chk(mainDataset_)) setFillPositionWithOrgOssPdfreporterEngineFillFillDatasetPosition:masterFillPosition];
    }
    groups_ = ((OrgOssPdfreporterEngineFillJRFillDataset *) nil_chk(mainDataset_)).groups;
    [self createReportTemplatesWithOrgOssPdfreporterEngineFillJRFillObjectFactory:factory_];
    NSString *reportName = [((OrgOssPdfreporterEngineFillJRBaseFiller *) nil_chk([((OrgOssPdfreporterEngineFillJRFillObjectFactory *) nil_chk(factory_)) getFiller])) isSubreport] ? [((OrgOssPdfreporterEngineJasperReport *) nil_chk([((OrgOssPdfreporterEngineFillJRBaseFiller *) nil_chk([((OrgOssPdfreporterEngineFillJRFillObjectFactory *) nil_chk(factory_)) getFiller])) getJasperReport])) getName] : nil;
    background_ = [((OrgOssPdfreporterEngineFillJRFillObjectFactory *) nil_chk(factory_)) getBandWithOrgOssPdfreporterEngineJRBand:[((OrgOssPdfreporterEngineJasperReport *) nil_chk(jasperReport)) getBackground]];
    if (background_ != missingFillBand_) {
      [((OrgOssPdfreporterEngineFillJRFillBand *) nil_chk(background_)) setOriginWithOrgOssPdfreporterEngineJROrigin:[[OrgOssPdfreporterEngineJROrigin alloc] initWithNSString:reportName withOrgOssPdfreporterEngineTypeBandTypeEnumEnum:[OrgOssPdfreporterEngineTypeBandTypeEnumEnum BACKGROUND]]];
    }
    title_ = [((OrgOssPdfreporterEngineFillJRFillObjectFactory *) nil_chk(factory_)) getBandWithOrgOssPdfreporterEngineJRBand:[((OrgOssPdfreporterEngineJasperReport *) nil_chk(jasperReport)) getTitle]];
    if (title_ != missingFillBand_) {
      [((OrgOssPdfreporterEngineFillJRFillBand *) nil_chk(title_)) setOriginWithOrgOssPdfreporterEngineJROrigin:[[OrgOssPdfreporterEngineJROrigin alloc] initWithNSString:reportName withOrgOssPdfreporterEngineTypeBandTypeEnumEnum:[OrgOssPdfreporterEngineTypeBandTypeEnumEnum TITLE]]];
    }
    pageHeader_ = [((OrgOssPdfreporterEngineFillJRFillObjectFactory *) nil_chk(factory_)) getBandWithOrgOssPdfreporterEngineJRBand:[((OrgOssPdfreporterEngineJasperReport *) nil_chk(jasperReport)) getPageHeader]];
    if (pageHeader_ != missingFillBand_) {
      [((OrgOssPdfreporterEngineFillJRFillBand *) nil_chk(pageHeader_)) setOriginWithOrgOssPdfreporterEngineJROrigin:[[OrgOssPdfreporterEngineJROrigin alloc] initWithNSString:reportName withOrgOssPdfreporterEngineTypeBandTypeEnumEnum:[OrgOssPdfreporterEngineTypeBandTypeEnumEnum PAGE_HEADER]]];
    }
    columnHeader_ = [((OrgOssPdfreporterEngineFillJRFillObjectFactory *) nil_chk(factory_)) getBandWithOrgOssPdfreporterEngineJRBand:[((OrgOssPdfreporterEngineJasperReport *) nil_chk(jasperReport)) getColumnHeader]];
    if (columnHeader_ != missingFillBand_) {
      [((OrgOssPdfreporterEngineFillJRFillBand *) nil_chk(columnHeader_)) setOriginWithOrgOssPdfreporterEngineJROrigin:[[OrgOssPdfreporterEngineJROrigin alloc] initWithNSString:reportName withOrgOssPdfreporterEngineTypeBandTypeEnumEnum:[OrgOssPdfreporterEngineTypeBandTypeEnumEnum COLUMN_HEADER]]];
    }
    detailSection_ = [((OrgOssPdfreporterEngineFillJRFillObjectFactory *) nil_chk(factory_)) getSectionWithOrgOssPdfreporterEngineJRSection:[((OrgOssPdfreporterEngineJasperReport *) nil_chk(jasperReport)) getDetailSection]];
    if (detailSection_ != missingFillSection_) {
      [((OrgOssPdfreporterEngineFillJRFillSection *) nil_chk(detailSection_)) setOriginWithOrgOssPdfreporterEngineJROrigin:[[OrgOssPdfreporterEngineJROrigin alloc] initWithNSString:reportName withOrgOssPdfreporterEngineTypeBandTypeEnumEnum:[OrgOssPdfreporterEngineTypeBandTypeEnumEnum DETAIL]]];
    }
    columnFooter_ = [((OrgOssPdfreporterEngineFillJRFillObjectFactory *) nil_chk(factory_)) getBandWithOrgOssPdfreporterEngineJRBand:[((OrgOssPdfreporterEngineJasperReport *) nil_chk(jasperReport)) getColumnFooter]];
    if (columnFooter_ != missingFillBand_) {
      [((OrgOssPdfreporterEngineFillJRFillBand *) nil_chk(columnFooter_)) setOriginWithOrgOssPdfreporterEngineJROrigin:[[OrgOssPdfreporterEngineJROrigin alloc] initWithNSString:reportName withOrgOssPdfreporterEngineTypeBandTypeEnumEnum:[OrgOssPdfreporterEngineTypeBandTypeEnumEnum COLUMN_FOOTER]]];
    }
    pageFooter_ = [((OrgOssPdfreporterEngineFillJRFillObjectFactory *) nil_chk(factory_)) getBandWithOrgOssPdfreporterEngineJRBand:[((OrgOssPdfreporterEngineJasperReport *) nil_chk(jasperReport)) getPageFooter]];
    if (pageFooter_ != missingFillBand_) {
      [((OrgOssPdfreporterEngineFillJRFillBand *) nil_chk(pageFooter_)) setOriginWithOrgOssPdfreporterEngineJROrigin:[[OrgOssPdfreporterEngineJROrigin alloc] initWithNSString:reportName withOrgOssPdfreporterEngineTypeBandTypeEnumEnum:[OrgOssPdfreporterEngineTypeBandTypeEnumEnum PAGE_FOOTER]]];
    }
    lastPageFooter_ = [((OrgOssPdfreporterEngineFillJRFillObjectFactory *) nil_chk(factory_)) getBandWithOrgOssPdfreporterEngineJRBand:[((OrgOssPdfreporterEngineJasperReport *) nil_chk(jasperReport)) getLastPageFooter]];
    if (lastPageFooter_ != missingFillBand_) {
      [((OrgOssPdfreporterEngineFillJRFillBand *) nil_chk(lastPageFooter_)) setOriginWithOrgOssPdfreporterEngineJROrigin:[[OrgOssPdfreporterEngineJROrigin alloc] initWithNSString:reportName withOrgOssPdfreporterEngineTypeBandTypeEnumEnum:[OrgOssPdfreporterEngineTypeBandTypeEnumEnum LAST_PAGE_FOOTER]]];
    }
    summary_ = [((OrgOssPdfreporterEngineFillJRFillObjectFactory *) nil_chk(factory_)) getBandWithOrgOssPdfreporterEngineJRBand:[((OrgOssPdfreporterEngineJasperReport *) nil_chk(jasperReport)) getSummary]];
    if (summary_ != missingFillBand_ && [((OrgOssPdfreporterEngineFillJRFillBand *) nil_chk(summary_)) isEmpty]) {
      summary_ = missingFillBand_;
    }
    if (summary_ != missingFillBand_) {
      [((OrgOssPdfreporterEngineFillJRFillBand *) nil_chk(summary_)) setOriginWithOrgOssPdfreporterEngineJROrigin:[[OrgOssPdfreporterEngineJROrigin alloc] initWithNSString:reportName withOrgOssPdfreporterEngineTypeBandTypeEnumEnum:[OrgOssPdfreporterEngineTypeBandTypeEnumEnum SUMMARY]]];
    }
    noData_ = [((OrgOssPdfreporterEngineFillJRFillObjectFactory *) nil_chk(factory_)) getBandWithOrgOssPdfreporterEngineJRBand:[((OrgOssPdfreporterEngineJasperReport *) nil_chk(jasperReport)) getNoData]];
    if (noData_ != missingFillBand_) {
      [((OrgOssPdfreporterEngineFillJRFillBand *) nil_chk(noData_)) setOriginWithOrgOssPdfreporterEngineJROrigin:[[OrgOssPdfreporterEngineJROrigin alloc] initWithNSString:reportName withOrgOssPdfreporterEngineTypeBandTypeEnumEnum:[OrgOssPdfreporterEngineTypeBandTypeEnumEnum NO_DATA]]];
    }
    [((OrgOssPdfreporterEngineFillJRFillDataset *) nil_chk(mainDataset_)) initElementDatasetsWithOrgOssPdfreporterEngineFillJRFillObjectFactory:factory_];
    [self initDatasetsWithOrgOssPdfreporterEngineFillJRFillObjectFactory:factory_];
    [((OrgOssPdfreporterEngineFillJRFillDataset *) nil_chk(mainDataset_)) checkVariableCalculationReqsWithOrgOssPdfreporterEngineFillJRFillObjectFactory:factory_];
    [((OrgOssPdfreporterEngineFillJRFillDataset *) nil_chk(mainDataset_)) setCalculatorWithOrgOssPdfreporterEngineFillJRCalculator:calculator_];
    [((OrgOssPdfreporterEngineFillJRFillDataset *) nil_chk(mainDataset_)) initCalculator];
    [self initBands];
  }
  return self;
}

- (id)initWithOrgOssPdfreporterEngineJasperReportsContext:(id<OrgOssPdfreporterEngineJasperReportsContext>)jasperReportsContext
                  withOrgOssPdfreporterEngineJasperReport:(OrgOssPdfreporterEngineJasperReport *)jasperReport
withOrgOssPdfreporterEngineFillDatasetExpressionEvaluator:(id<OrgOssPdfreporterEngineFillDatasetExpressionEvaluator>)initEvaluator
           withOrgOssPdfreporterEngineFillJRFillSubreport:(OrgOssPdfreporterEngineFillJRFillSubreport *)parentElement {
  return [self initOrgOssPdfreporterEngineFillJRBaseFillerWithOrgOssPdfreporterEngineJasperReportsContext:jasperReportsContext withOrgOssPdfreporterEngineJasperReport:jasperReport withOrgOssPdfreporterEngineFillDatasetExpressionEvaluator:initEvaluator withOrgOssPdfreporterEngineFillJRFillSubreport:parentElement];
}

- (id<JavaUtilMap>)getParametersMap {
  return ((OrgOssPdfreporterEngineFillJRFillDataset *) nil_chk(mainDataset_)).parametersMap;
}

- (id<JavaUtilMap>)getParameterValuesMap {
  return [((OrgOssPdfreporterEngineFillJRFillDataset *) nil_chk(mainDataset_)) getParameterValuesMap];
}

- (id<JavaUtilMap>)getFieldsMap {
  return ((OrgOssPdfreporterEngineFillJRFillDataset *) nil_chk(mainDataset_)).fieldsMap;
}

- (id<JavaUtilMap>)getVariablesMap {
  return ((OrgOssPdfreporterEngineFillJRFillDataset *) nil_chk(mainDataset_)).variablesMap;
}

- (OrgOssPdfreporterEngineFillJRFillVariable *)getVariableWithNSString:(NSString *)variableName {
  return [((id<JavaUtilMap>) nil_chk(((OrgOssPdfreporterEngineFillJRFillDataset *) nil_chk(mainDataset_)).variablesMap)) getWithId:variableName];
}

- (OrgOssPdfreporterEngineFillJRFillField *)getFieldWithNSString:(NSString *)fieldName {
  return [((OrgOssPdfreporterEngineFillJRFillDataset *) nil_chk(mainDataset_)) getFillFieldWithNSString:fieldName];
}

- (void)initBands OBJC_METHOD_FAMILY_NONE {
  bands_ = [[JavaUtilArrayList alloc] initWithInt:8 + (groups_ == nil ? 0 : (2 * (int) [((IOSObjectArray *) nil_chk(groups_)) count]))];
  [((id<JavaUtilList>) nil_chk(bands_)) addWithId:title_];
  [((id<JavaUtilList>) nil_chk(bands_)) addWithId:summary_];
  [((id<JavaUtilList>) nil_chk(bands_)) addWithId:pageHeader_];
  [((id<JavaUtilList>) nil_chk(bands_)) addWithId:pageFooter_];
  [((id<JavaUtilList>) nil_chk(bands_)) addWithId:lastPageFooter_];
  [((id<JavaUtilList>) nil_chk(bands_)) addWithId:columnHeader_];
  [((id<JavaUtilList>) nil_chk(bands_)) addWithId:columnFooter_];
  if ([((OrgOssPdfreporterEngineFillJRFillSection *) nil_chk(detailSection_)) getBands] != nil) {
    [((id<JavaUtilList>) nil_chk(bands_)) addAllWithJavaUtilCollection:[JavaUtilArrays asListWithNSObjectArray:[((OrgOssPdfreporterEngineFillJRFillSection *) nil_chk(detailSection_)) getBands]]];
  }
  [((id<JavaUtilList>) nil_chk(bands_)) addWithId:noData_];
  if (groups_ != nil && (int) [((IOSObjectArray *) nil_chk(groups_)) count] > 0) {
    for (int i = 0; i < (int) [((IOSObjectArray *) nil_chk(groups_)) count]; i++) {
      OrgOssPdfreporterEngineFillJRFillGroup *group = [((IOSObjectArray *) nil_chk(groups_)) objectAtIndex:i];
      if ([((id<OrgOssPdfreporterEngineJRSection>) nil_chk([((OrgOssPdfreporterEngineFillJRFillGroup *) nil_chk(group)) getGroupHeaderSection])) getBands] != nil) {
        [((id<JavaUtilList>) nil_chk(bands_)) addAllWithJavaUtilCollection:[JavaUtilArrays asListWithNSObjectArray:[((id<OrgOssPdfreporterEngineJRSection>) nil_chk([((OrgOssPdfreporterEngineFillJRFillGroup *) nil_chk(group)) getGroupHeaderSection])) getBands]]];
      }
      if ([((id<OrgOssPdfreporterEngineJRSection>) nil_chk([((OrgOssPdfreporterEngineFillJRFillGroup *) nil_chk(group)) getGroupFooterSection])) getBands] != nil) {
        [((id<JavaUtilList>) nil_chk(bands_)) addAllWithJavaUtilCollection:[JavaUtilArrays asListWithNSObjectArray:[((id<OrgOssPdfreporterEngineJRSection>) nil_chk([((OrgOssPdfreporterEngineFillJRFillGroup *) nil_chk(group)) getGroupFooterSection])) getBands]]];
      }
    }
  }
  [self initBandsNowEvaluationTimes];
}

- (void)initBandsNowEvaluationTimes OBJC_METHOD_FAMILY_NONE {
  IOSObjectArray *groupEvaluationTimes;
  if (groups_ == nil) {
    groupEvaluationTimes = [IOSObjectArray arrayWithLength:0 type:[IOSClass classWithClass:[OrgOssPdfreporterEngineFillJREvaluationTime class]]];
  }
  else {
    groupEvaluationTimes = [IOSObjectArray arrayWithLength:(int) [groups_ count] type:[IOSClass classWithClass:[OrgOssPdfreporterEngineFillJREvaluationTime class]]];
    for (int i = 0; i < (int) [groups_ count]; i++) {
      (void) [((IOSObjectArray *) nil_chk(groupEvaluationTimes)) replaceObjectAtIndex:i withObject:[OrgOssPdfreporterEngineFillJREvaluationTime getGroupEvaluationTimeWithNSString:[((OrgOssPdfreporterEngineFillJRFillGroup *) nil_chk([groups_ objectAtIndex:i])) getName]]];
    }
    for (int i = 0; i < (int) [groups_ count]; i++) {
      id<OrgOssPdfreporterEngineJRGroup> group = [groups_ objectAtIndex:i];
      OrgOssPdfreporterEngineFillJRFillSection *footer = (OrgOssPdfreporterEngineFillJRFillSection *) [((id<OrgOssPdfreporterEngineJRGroup>) nil_chk(group)) getGroupFooterSection];
      for (int j = i; j < (int) [((IOSObjectArray *) nil_chk(groupEvaluationTimes)) count]; ++j) {
        [((OrgOssPdfreporterEngineFillJRFillSection *) nil_chk(footer)) addNowEvaluationTimeWithOrgOssPdfreporterEngineFillJREvaluationTime:[((IOSObjectArray *) nil_chk(groupEvaluationTimes)) objectAtIndex:j]];
      }
    }
  }
  [((OrgOssPdfreporterEngineFillJRFillBand *) nil_chk(columnFooter_)) addNowEvaluationTimeWithOrgOssPdfreporterEngineFillJREvaluationTime:[OrgOssPdfreporterEngineFillJREvaluationTime EVALUATION_TIME_COLUMN]];
  [((OrgOssPdfreporterEngineFillJRFillBand *) nil_chk(pageFooter_)) addNowEvaluationTimeWithOrgOssPdfreporterEngineFillJREvaluationTime:[OrgOssPdfreporterEngineFillJREvaluationTime EVALUATION_TIME_COLUMN]];
  [((OrgOssPdfreporterEngineFillJRFillBand *) nil_chk(pageFooter_)) addNowEvaluationTimeWithOrgOssPdfreporterEngineFillJREvaluationTime:[OrgOssPdfreporterEngineFillJREvaluationTime EVALUATION_TIME_PAGE]];
  [((OrgOssPdfreporterEngineFillJRFillBand *) nil_chk(summary_)) addNowEvaluationTimesWithOrgOssPdfreporterEngineFillJREvaluationTimeArray:groupEvaluationTimes];
  [((OrgOssPdfreporterEngineFillJRFillBand *) nil_chk(noData_)) addNowEvaluationTimesWithOrgOssPdfreporterEngineFillJREvaluationTimeArray:groupEvaluationTimes];
}

- (id<OrgOssPdfreporterEngineJasperReportsContext>)getJasperReportsContext {
  return jasperReportsContext_;
}

- (void)setJasperReportsContextWithOrgOssPdfreporterEngineJasperReportsContext:(id<OrgOssPdfreporterEngineJasperReportsContext>)jasperReportsContext {
  self.jasperReportsContext = jasperReportsContext;
  self.propertiesUtil = [OrgOssPdfreporterEngineJRPropertiesUtil getInstanceWithOrgOssPdfreporterEngineJasperReportsContext:jasperReportsContext];
}

- (OrgOssPdfreporterEngineJRPropertiesUtil *)getPropertiesUtil {
  return propertiesUtil_;
}

- (OrgOssPdfreporterEngineUtilJRStyledTextParser *)getStyledTextParser {
  return styledTextParser_;
}

- (OrgOssPdfreporterEngineJasperPrint *)getJasperPrint {
  return jasperPrint_;
}

- (int)getCurrentPageCount {
  return [((id<JavaUtilList>) nil_chk([((OrgOssPdfreporterEngineJasperPrint *) nil_chk(((OrgOssPdfreporterEngineFillJRBaseFiller *) nil_chk([self getMasterFiller])).jasperPrint)) getPages])) size];
}

- (id<OrgOssPdfreporterEngineJRStyle>)getDefaultStyle {
  return defaultStyle_;
}

- (BOOL)isSubreport {
  return (parentFiller_ != nil);
}

- (BOOL)isSubreportRunToBottom {
  return parentElement_ != nil && [((OrgOssPdfreporterEngineFillJRFillSubreport *) nil_chk(parentElement_)) isRunToBottom] != nil && [((JavaLangBoolean *) nil_chk([((OrgOssPdfreporterEngineFillJRFillSubreport *) nil_chk(parentElement_)) isRunToBottom])) booleanValue];
}

- (BOOL)isInterrupted {
  return (isInterrupted__ || (parentFiller_ != nil && [((OrgOssPdfreporterEngineFillJRBaseFiller *) nil_chk(parentFiller_)) isInterrupted]));
}

- (void)setInterruptedWithBOOL:(BOOL)isInterrupted {
  self.isInterrupted_ = isInterrupted;
}

- (void)checkInterrupted {
  if ([JavaLangThread interrupted]) {
    [self setInterruptedWithBOOL:YES];
  }
  if ([self isInterrupted]) {
    @throw [[OrgOssPdfreporterEngineFillJRFillInterruptedException alloc] init];
  }
}

- (id<OrgOssPdfreporterEngineJRPrintPage>)getCurrentPage {
  return printPage_;
}

- (int)getCurrentPageStretchHeight {
  return printPageStretchHeight_;
}

- (void)setPageHeightWithInt:(int)pageHeight {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
}

- (void)addFillListenerWithOrgOssPdfreporterEngineFillFillListener:(id<OrgOssPdfreporterEngineFillFillListener>)fillListener {
  self.fillListener = [OrgOssPdfreporterEngineFillCompositeFillListener addListenerWithOrgOssPdfreporterEngineFillFillListener:self.fillListener withOrgOssPdfreporterEngineFillFillListener:fillListener];
}

- (OrgOssPdfreporterEngineJasperPrint *)fillWithJavaUtilMap:(id<JavaUtilMap>)parameterValues
                        withOrgOssPdfreporterSqlIConnection:(id<OrgOssPdfreporterSqlIConnection>)conn {
  if (parameterValues == nil) {
    parameterValues = [[JavaUtilHashMap alloc] init];
  }
  [self setConnectionParameterValueWithJavaUtilMap:parameterValues withOrgOssPdfreporterSqlIConnection:conn];
  return [self fillWithJavaUtilMap:parameterValues];
}

- (void)setConnectionParameterValueWithJavaUtilMap:(id<JavaUtilMap>)parameterValues
               withOrgOssPdfreporterSqlIConnection:(id<OrgOssPdfreporterSqlIConnection>)conn {
  [((OrgOssPdfreporterEngineFillJRFillDataset *) nil_chk(mainDataset_)) setConnectionParameterValueWithJavaUtilMap:parameterValues withOrgOssPdfreporterSqlIConnection:conn];
}

- (OrgOssPdfreporterEngineJasperPrint *)fillWithJavaUtilMap:(id<JavaUtilMap>)parameterValues
                    withOrgOssPdfreporterEngineJRDataSource:(id<OrgOssPdfreporterEngineJRDataSource>)ds {
  if (parameterValues == nil) {
    parameterValues = [[JavaUtilHashMap alloc] init];
  }
  [self setDatasourceParameterValueWithJavaUtilMap:parameterValues withOrgOssPdfreporterEngineJRDataSource:ds];
  return [self fillWithJavaUtilMap:parameterValues];
}

- (void)setDatasourceParameterValueWithJavaUtilMap:(id<JavaUtilMap>)parameterValues
           withOrgOssPdfreporterEngineJRDataSource:(id<OrgOssPdfreporterEngineJRDataSource>)ds {
  [((OrgOssPdfreporterEngineFillJRFillDataset *) nil_chk(mainDataset_)) setDatasourceParameterValueWithJavaUtilMap:parameterValues withOrgOssPdfreporterEngineJRDataSource:ds];
}

- (OrgOssPdfreporterEngineJasperPrint *)fillWithJavaUtilMap:(id<JavaUtilMap>)parameterValues {
  [self setParametersToContextWithJavaUtilMap:parameterValues];
  if (parameterValues == nil) {
    parameterValues = [[JavaUtilHashMap alloc] init];
  }
  fillingThread_ = [JavaLangThread currentThread];
  BOOL success = NO;
  @try {
    [self createBoundElemementMaps];
    if (parentFiller_ != nil) {
      [parentFiller_ registerSubfillerWithOrgOssPdfreporterEngineFillJRBaseFiller:self];
    }
    [self setParametersWithJavaUtilMap:parameterValues];
    [self loadStyles];
    [((OrgOssPdfreporterEngineJasperPrint *) nil_chk(jasperPrint_)) setNameWithNSString:name_];
    [((OrgOssPdfreporterEngineJasperPrint *) nil_chk(jasperPrint_)) setPageWidthWithInt:pageWidth_];
    [((OrgOssPdfreporterEngineJasperPrint *) nil_chk(jasperPrint_)) setPageHeightWithInt:pageHeight_];
    [((OrgOssPdfreporterEngineJasperPrint *) nil_chk(jasperPrint_)) setTopMarginWithJavaLangInteger:[JavaLangInteger valueOfWithInt:topMargin_]];
    [((OrgOssPdfreporterEngineJasperPrint *) nil_chk(jasperPrint_)) setLeftMarginWithJavaLangInteger:[JavaLangInteger valueOfWithInt:leftMargin_]];
    [((OrgOssPdfreporterEngineJasperPrint *) nil_chk(jasperPrint_)) setBottomMarginWithJavaLangInteger:[JavaLangInteger valueOfWithInt:bottomMargin_]];
    [((OrgOssPdfreporterEngineJasperPrint *) nil_chk(jasperPrint_)) setRightMarginWithJavaLangInteger:[JavaLangInteger valueOfWithInt:rightMargin_]];
    [((OrgOssPdfreporterEngineJasperPrint *) nil_chk(jasperPrint_)) setOrientationWithOrgOssPdfreporterEngineTypeOrientationEnumEnum:orientation_];
    [((OrgOssPdfreporterEngineJasperPrint *) nil_chk(jasperPrint_)) setFormatFactoryClassWithNSString:[((OrgOssPdfreporterEngineJasperReport *) nil_chk(jasperReport_)) getFormatFactoryClass]];
    [((OrgOssPdfreporterEngineJasperPrint *) nil_chk(jasperPrint_)) setLocaleCodeWithNSString:[OrgOssPdfreporterEngineUtilJRDataUtils getLocaleCodeWithJavaUtilLocale:[self getLocale]]];
    [((OrgOssPdfreporterEngineJasperPrint *) nil_chk(jasperPrint_)) setTimeZoneIdWithNSString:[OrgOssPdfreporterEngineUtilJRDataUtils getTimeZoneIdWithJavaUtilTimeZone:[self getTimeZone]]];
    [((OrgOssPdfreporterEngineJasperPrint *) nil_chk(jasperPrint_)) setDefaultStyleWithOrgOssPdfreporterEngineJRStyle:defaultStyle_];
    if (styles_ != nil && (int) [((IOSObjectArray *) nil_chk(styles_)) count] > 0) {
      for (int i = 0; i < (int) [((IOSObjectArray *) nil_chk(styles_)) count]; i++) {
        [self addPrintStyleWithOrgOssPdfreporterEngineJRStyle:[((IOSObjectArray *) nil_chk(styles_)) objectAtIndex:i]];
      }
    }
    [((OrgOssPdfreporterEngineFillJRFillDataset *) nil_chk(mainDataset_)) start];
    [self fillReport];
    success = YES;
    return jasperPrint_;
  }
  @finally {
    [((OrgOssPdfreporterEngineFillJRFillDataset *) nil_chk(mainDataset_)) closeDatasource];
    [((OrgOssPdfreporterEngineFillJRFillDataset *) nil_chk(mainDataset_)) disposeParameterContributors];
    if (success && parentFiller_ == nil) {
      [((OrgOssPdfreporterEngineFillJRFillContext *) nil_chk(fillContext_)) cacheDone];
    }
    if (parentFiller_ != nil) {
      [parentFiller_ unregisterSubfillerWithOrgOssPdfreporterEngineFillJRBaseFiller:self];
    }
    if ([((OrgOssPdfreporterEngineFillJRFillContext *) nil_chk(fillContext_)) isUsingVirtualizer]) {
      [((OrgOssPdfreporterEngineFillJRVirtualizationContext *) nil_chk(virtualizationContext_)) removeListenerWithOrgOssPdfreporterEngineFillVirtualizationListener:virtualizationListener_];
    }
    fillingThread_ = nil;
    [self killSubfillerThreads];
    if (parentFiller_ == nil) {
      [((OrgOssPdfreporterEngineFillJRFillContext *) nil_chk(fillContext_)) dispose];
    }
  }
}

- (void)setParametersToContextWithJavaUtilMap:(id<JavaUtilMap>)parameterValues {
  id<OrgOssPdfreporterEngineJasperReportsContext> localContext = [OrgOssPdfreporterEngineUtilLocalJasperReportsContext getLocalContextWithOrgOssPdfreporterEngineJasperReportsContext:jasperReportsContext_ withJavaUtilMap:parameterValues];
  if (localContext != jasperReportsContext_) {
    [self setJasperReportsContextWithOrgOssPdfreporterEngineJasperReportsContext:localContext];
  }
}

- (void)addPrintStyleWithOrgOssPdfreporterEngineJRStyle:(id<OrgOssPdfreporterEngineJRStyle>)style {
  [((OrgOssPdfreporterEngineJasperPrint *) nil_chk(jasperPrint_)) addStyleWithOrgOssPdfreporterEngineJRStyle:style withBOOL:YES];
}

- (void)addDefaultStyleListenerWithOrgOssPdfreporterEngineFillJRBaseFiller_DefaultStyleListener:(id<OrgOssPdfreporterEngineFillJRBaseFiller_DefaultStyleListener>)listener {
  [((id<JavaUtilList>) nil_chk(defaultStyleListeners_)) addWithId:listener];
}

- (void)setDefaultStyleWithOrgOssPdfreporterEngineJRStyle:(id<OrgOssPdfreporterEngineJRStyle>)style {
  defaultStyle_ = style;
  for (id<JavaUtilIterator> it = [((id<JavaUtilList>) nil_chk(defaultStyleListeners_)) iterator]; [((id<JavaUtilIterator>) nil_chk(it)) hasNext]; ) {
    id<OrgOssPdfreporterEngineFillJRBaseFiller_DefaultStyleListener> listener = [((id<JavaUtilIterator>) nil_chk(it)) next];
    [((id<OrgOssPdfreporterEngineFillJRBaseFiller_DefaultStyleListener>) nil_chk(listener)) defaultStyleSetWithOrgOssPdfreporterEngineJRStyle:style];
  }
}

- (void)loadStyles {
  id<JavaUtilList> styleList = [self collectStyles];
  id<OrgOssPdfreporterEngineJRStyle> reportDefaultStyle = [((OrgOssPdfreporterEngineJasperReport *) nil_chk(jasperReport_)) getDefaultStyle];
  if (reportDefaultStyle == nil) {
    [self lookupExternalDefaultStyleWithJavaUtilCollection:styleList];
  }
  id<JavaUtilList> includedStyles = [((OrgOssPdfreporterEngineFillJRFillObjectFactory *) nil_chk(factory_)) setStylesWithJavaUtilList:styleList];
  styles_ = [((id<JavaUtilList>) nil_chk(includedStyles)) toArrayWithNSObjectArray:[IOSObjectArray arrayWithLength:[((id<JavaUtilList>) nil_chk(includedStyles)) size] type:[IOSClass classWithProtocol:@protocol(OrgOssPdfreporterEngineJRStyle)]]];
  if (reportDefaultStyle != nil) {
    [self setDefaultStyleWithOrgOssPdfreporterEngineJRStyle:[((OrgOssPdfreporterEngineFillJRFillObjectFactory *) nil_chk(factory_)) getStyleWithOrgOssPdfreporterEngineJRStyle:reportDefaultStyle]];
  }
}

- (id<JavaUtilList>)collectStyles {
  id<JavaUtilList> styleList = [self collectTemplateStyles];
  IOSObjectArray *reportStyles = [((OrgOssPdfreporterEngineJasperReport *) nil_chk(jasperReport_)) getStyles];
  if (reportStyles != nil) {
    styles_ = [IOSObjectArray arrayWithLength:(int) [reportStyles count] type:[IOSClass classWithProtocol:@protocol(OrgOssPdfreporterEngineJRStyle)]];
    for (int i = 0; i < (int) [reportStyles count]; i++) {
      id<OrgOssPdfreporterEngineJRStyle> style = [reportStyles objectAtIndex:i];
      [((id<JavaUtilList>) nil_chk(styleList)) addWithId:style];
      [((OrgOssPdfreporterEngineFillJRFillObjectFactory *) nil_chk(factory_)) registerDelayedStyleSetterWithOrgOssPdfreporterEngineJRStyleSetter:OrgOssPdfreporterEngineFillJRBaseFiller_DUMMY_STYLE_SETTER_ withNSString:[((id<OrgOssPdfreporterEngineJRStyle>) nil_chk(style)) getName]];
    }
  }
  return styleList;
}

- (void)collectTemplates {
  templates_ = [[JavaUtilArrayList alloc] init];
  if (reportTemplates_ != nil) {
    {
      IOSObjectArray *a__ = reportTemplates_;
      int n__ = (int) [((IOSObjectArray *) nil_chk(a__)) count];
      for (int i__ = 0; i__ < n__; i__++) {
        OrgOssPdfreporterEngineFillJRFillReportTemplate *reportTemplate = [((IOSObjectArray *) nil_chk(a__)) objectAtIndex:i__];
        id<OrgOssPdfreporterEngineJRTemplate> template_ = [((OrgOssPdfreporterEngineFillJRFillReportTemplate *) nil_chk(reportTemplate)) evaluate];
        if (template_ != nil) {
          [((id<JavaUtilList>) nil_chk(templates_)) addWithId:template_];
        }
      }
    }
  }
  id<JavaUtilCollection> paramTemplates = (id<JavaUtilCollection>) [((OrgOssPdfreporterEngineFillJRFillDataset *) nil_chk(mainDataset_)) getParameterValueWithNSString:[OrgOssPdfreporterEngineJRParameter REPORT_TEMPLATES] withBOOL:YES];
  if (paramTemplates != nil) {
    [((id<JavaUtilList>) nil_chk(templates_)) addAllWithJavaUtilCollection:paramTemplates];
  }
}

- (id<JavaUtilList>)getTemplates {
  return templates_;
}

- (id<JavaUtilList>)collectTemplateStyles {
  [self collectTemplates];
  id<JavaUtilList> externalStyles = [[JavaUtilArrayList alloc] init];
  JavaUtilHashSet *loadedLocations = [[JavaUtilHashSet alloc] init];
  {
    id<JavaUtilIterator> iter__ = [((id<JavaUtilList>) nil_chk(templates_)) iterator];
    while ([((id<JavaUtilIterator>) nil_chk(iter__)) hasNext]) {
      id<OrgOssPdfreporterEngineJRTemplate> template_ = [((id<JavaUtilIterator>) nil_chk(iter__)) next];
      [self collectStylesWithOrgOssPdfreporterEngineJRTemplate:template_ withJavaUtilList:externalStyles withJavaUtilSet:loadedLocations];
    }
  }
  return externalStyles;
}

- (void)collectStylesWithOrgOssPdfreporterEngineJRTemplate:(id<OrgOssPdfreporterEngineJRTemplate>)template_
                                          withJavaUtilList:(id<JavaUtilList>)externalStyles
                                           withJavaUtilSet:(id<JavaUtilSet>)loadedLocations {
  JavaUtilHashSet *parentLocations = [[JavaUtilHashSet alloc] init];
  [self collectStylesWithOrgOssPdfreporterEngineJRTemplate:template_ withJavaUtilList:externalStyles withJavaUtilSet:loadedLocations withJavaUtilSet:parentLocations];
}

- (void)collectStylesWithOrgOssPdfreporterEngineJRTemplate:(id<OrgOssPdfreporterEngineJRTemplate>)template_
                                          withJavaUtilList:(id<JavaUtilList>)externalStyles
                                           withJavaUtilSet:(id<JavaUtilSet>)loadedLocations
                                           withJavaUtilSet:(id<JavaUtilSet>)templateParentLocations {
  [self collectIncludedTemplatesWithOrgOssPdfreporterEngineJRTemplate:template_ withJavaUtilList:externalStyles withJavaUtilSet:loadedLocations withJavaUtilSet:templateParentLocations];
  IOSObjectArray *templateStyles = [((id<OrgOssPdfreporterEngineJRTemplate>) nil_chk(template_)) getStyles];
  if (templateStyles != nil) {
    for (int i = 0; i < (int) [templateStyles count]; i++) {
      id<OrgOssPdfreporterEngineJRStyle> style = [templateStyles objectAtIndex:i];
      NSString *styleName = [((id<OrgOssPdfreporterEngineJRStyle>) nil_chk(style)) getName];
      if (styleName == nil) {
        @throw [[OrgOssPdfreporterEngineJRRuntimeException alloc] initWithNSString:@"External style name not set."];
      }
      [((id<JavaUtilList>) nil_chk(externalStyles)) addWithId:style];
    }
  }
}

- (void)collectIncludedTemplatesWithOrgOssPdfreporterEngineJRTemplate:(id<OrgOssPdfreporterEngineJRTemplate>)template_
                                                     withJavaUtilList:(id<JavaUtilList>)externalStyles
                                                      withJavaUtilSet:(id<JavaUtilSet>)loadedLocations
                                                      withJavaUtilSet:(id<JavaUtilSet>)templateParentLocations {
  IOSObjectArray *includedTemplates = [((id<OrgOssPdfreporterEngineJRTemplate>) nil_chk(template_)) getIncludedTemplates];
  if (includedTemplates != nil) {
    for (int i = 0; i < (int) [includedTemplates count]; i++) {
      OrgOssPdfreporterEngineJRTemplateReference *reference = [includedTemplates objectAtIndex:i];
      NSString *location = [((OrgOssPdfreporterEngineJRTemplateReference *) nil_chk(reference)) getLocation];
      if (![((id<JavaUtilSet>) nil_chk(templateParentLocations)) addWithId:location]) {
        @throw [[OrgOssPdfreporterEngineJRRuntimeException alloc] initWithNSString:[NSString stringWithFormat:@"Circular dependency found for template at location %@", location]];
      }
      if ([((id<JavaUtilSet>) nil_chk(loadedLocations)) addWithId:location]) {
        id<OrgOssPdfreporterEngineJRTemplate> includedTemplate = [OrgOssPdfreporterEngineFillJRFillReportTemplate loadTemplateWithId:location withOrgOssPdfreporterEngineFillJRBaseFiller:self];
        [self collectStylesWithOrgOssPdfreporterEngineJRTemplate:includedTemplate withJavaUtilList:externalStyles withJavaUtilSet:loadedLocations withJavaUtilSet:templateParentLocations];
      }
    }
  }
}

- (void)lookupExternalDefaultStyleWithJavaUtilCollection:(id<JavaUtilCollection>)styleList {
  id<OrgOssPdfreporterEngineJRStyle> defStyle = nil;
  for (id<JavaUtilIterator> it = [((id<JavaUtilCollection>) nil_chk(styleList)) iterator]; [((id<JavaUtilIterator>) nil_chk(it)) hasNext]; ) {
    id<OrgOssPdfreporterEngineJRStyle> style = [((id<JavaUtilIterator>) nil_chk(it)) next];
    if ([((id<OrgOssPdfreporterEngineJRStyle>) nil_chk(style)) isDefault]) {
      defStyle = style;
    }
  }
  if (defStyle != nil) {
    [((OrgOssPdfreporterEngineFillJRFillObjectFactory *) nil_chk(factory_)) registerDelayedStyleSetterWithOrgOssPdfreporterEngineJRStyleSetter:[[OrgOssPdfreporterEngineFillJRBaseFiller_$2 alloc] initWithOrgOssPdfreporterEngineFillJRBaseFiller:self] withNSString:[defStyle getName]];
  }
}

- (void)createBoundElemementMaps {
  boundElements_ = [[JavaUtilHashMap alloc] init];
  [self createBoundElementMapsWithOrgOssPdfreporterEngineFillJREvaluationTime:[OrgOssPdfreporterEngineFillJREvaluationTime EVALUATION_TIME_REPORT]];
  [self createBoundElementMapsWithOrgOssPdfreporterEngineFillJREvaluationTime:[OrgOssPdfreporterEngineFillJREvaluationTime EVALUATION_TIME_PAGE]];
  [self createBoundElementMapsWithOrgOssPdfreporterEngineFillJREvaluationTime:[OrgOssPdfreporterEngineFillJREvaluationTime EVALUATION_TIME_COLUMN]];
  if (groups_ != nil) {
    for (int i = 0; i < (int) [groups_ count]; i++) {
      [self createBoundElementMapsWithOrgOssPdfreporterEngineFillJREvaluationTime:[OrgOssPdfreporterEngineFillJREvaluationTime getGroupEvaluationTimeWithNSString:[((OrgOssPdfreporterEngineFillJRFillGroup *) nil_chk([groups_ objectAtIndex:i])) getName]]];
    }
  }
  for (id<JavaUtilIterator> i = [((id<JavaUtilList>) nil_chk(bands_)) iterator]; [((id<JavaUtilIterator>) nil_chk(i)) hasNext]; ) {
    OrgOssPdfreporterEngineFillJRFillBand *band = (OrgOssPdfreporterEngineFillJRFillBand *) [((id<JavaUtilIterator>) nil_chk(i)) next];
    [self createBoundElementMapsWithOrgOssPdfreporterEngineFillJREvaluationTime:[OrgOssPdfreporterEngineFillJREvaluationTime getBandEvaluationTimeWithOrgOssPdfreporterEngineFillJRFillBand:band]];
  }
}

- (void)createBoundElementMapsWithOrgOssPdfreporterEngineFillJREvaluationTime:(OrgOssPdfreporterEngineFillJREvaluationTime *)evaluationTime {
  JavaUtilLinkedHashMap *boundElementsMap = [[JavaUtilLinkedHashMap alloc] init];
  (void) [((JavaUtilHashMap *) nil_chk(boundElements_)) putWithId:evaluationTime withId:boundElementsMap];
}

- (void)killSubfillerThreads {
  if (subfillers_ != nil && ![((id<JavaUtilMap>) nil_chk(subfillers_)) isEmpty]) {
    {
      id<JavaUtilIterator> iter__ = [((id<JavaUtilCollection>) nil_chk([((id<JavaUtilMap>) nil_chk(subfillers_)) values])) iterator];
      while ([((id<JavaUtilIterator>) nil_chk(iter__)) hasNext]) {
        OrgOssPdfreporterEngineFillJRBaseFiller *subfiller = [((id<JavaUtilIterator>) nil_chk(iter__)) next];
        if (((OrgOssPdfreporterEngineFillJRBaseFiller *) nil_chk(subfiller)).fillingThread != nil) {
          [((OrgOssPdfreporterEngineFillJRBaseFiller *) nil_chk(subfiller)).fillingThread interrupt];
        }
      }
    }
  }
}

- (void)fillReport {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
}

- (void)setParametersWithJavaUtilMap:(id<JavaUtilMap>)parameterValues {
  [self initVirtualizationContextWithJavaUtilMap:parameterValues];
  [self setFormatFactoryWithJavaUtilMap:parameterValues];
  [self setIgnorePaginationWithJavaUtilMap:parameterValues];
  if (parentFiller_ == nil) {
    id<OrgOssPdfreporterEngineReportContext> reportContext = (id<OrgOssPdfreporterEngineReportContext>) [((id<JavaUtilMap>) nil_chk(parameterValues)) getWithId:[OrgOssPdfreporterEngineJRParameter REPORT_CONTEXT]];
    [((OrgOssPdfreporterEngineFillJRFillContext *) nil_chk(fillContext_)) setReportContextWithOrgOssPdfreporterEngineReportContext:reportContext];
  }
  [((OrgOssPdfreporterEngineFillJRFillDataset *) nil_chk(mainDataset_)) setParameterValuesWithJavaUtilMap:parameterValues];
  [((OrgOssPdfreporterEngineFillJRFillDataset *) nil_chk(mainDataset_)) initDatasource];
  self.scriptlet = ((OrgOssPdfreporterEngineFillJRFillDataset *) nil_chk(mainDataset_)).delegateScriptlet;
  if (![self isSubreport]) {
    [((OrgOssPdfreporterEngineFillJRFillContext *) nil_chk(fillContext_)) setMasterFormatFactoryWithOrgOssPdfreporterTextFormatFactoryIFormatFactory:[self getFormatFactory]];
    [((OrgOssPdfreporterEngineFillJRFillContext *) nil_chk(fillContext_)) setMasterLocaleWithJavaUtilLocale:[self getLocale]];
    [((OrgOssPdfreporterEngineFillJRFillContext *) nil_chk(fillContext_)) setMasterTimeZoneWithJavaUtilTimeZone:[self getTimeZone]];
  }
}

- (void)initVirtualizationContextWithJavaUtilMap:(id<JavaUtilMap>)parameterValues OBJC_METHOD_FAMILY_NONE {
  if ([self isSubreport]) {
    if ([((OrgOssPdfreporterEngineFillJRFillContext *) nil_chk(fillContext_)) isUsingVirtualizer]) {
      virtualizationContext_ = [[OrgOssPdfreporterEngineFillJRVirtualizationContext alloc] initWithOrgOssPdfreporterEngineFillJRVirtualizationContext:[((OrgOssPdfreporterEngineFillJRFillContext *) nil_chk(fillContext_)) getVirtualizationContext]];
      [self setVirtualPageSizeWithJavaUtilMap:parameterValues];
      virtualizationListener_ = [[OrgOssPdfreporterEngineFillElementEvaluationVirtualizationListener alloc] initWithOrgOssPdfreporterEngineFillJRBaseFiller:self];
      [((OrgOssPdfreporterEngineFillJRVirtualizationContext *) nil_chk(virtualizationContext_)) addListenerWithOrgOssPdfreporterEngineFillVirtualizationListener:virtualizationListener_];
    }
  }
  else {
    id<OrgOssPdfreporterEngineJRVirtualizer> virtualizer = (id<OrgOssPdfreporterEngineJRVirtualizer>) [((id<JavaUtilMap>) nil_chk(parameterValues)) getWithId:[OrgOssPdfreporterEngineJRParameter REPORT_VIRTUALIZER]];
    if (virtualizer == nil) {
      return;
    }
    [((OrgOssPdfreporterEngineFillJRFillContext *) nil_chk(fillContext_)) setUsingVirtualizerWithBOOL:YES];
    virtualizationContext_ = [((OrgOssPdfreporterEngineFillJRFillContext *) nil_chk(fillContext_)) getVirtualizationContext];
    [((OrgOssPdfreporterEngineFillJRVirtualizationContext *) nil_chk(virtualizationContext_)) setVirtualizerWithOrgOssPdfreporterEngineJRVirtualizer:virtualizer];
    [self setVirtualPageSizeWithJavaUtilMap:parameterValues];
    virtualizationListener_ = [[OrgOssPdfreporterEngineFillElementEvaluationVirtualizationListener alloc] initWithOrgOssPdfreporterEngineFillJRBaseFiller:self];
    [((OrgOssPdfreporterEngineFillJRVirtualizationContext *) nil_chk(virtualizationContext_)) addListenerWithOrgOssPdfreporterEngineFillVirtualizationListener:virtualizationListener_];
    [OrgOssPdfreporterEngineFillJRVirtualizationContext register__WithOrgOssPdfreporterEngineFillJRVirtualizationContext:virtualizationContext_ withOrgOssPdfreporterEngineJasperPrint:jasperPrint_];
  }
}

- (void)lockVirtualizationContext {
  if (virtualizationContext_ != nil) {
    [virtualizationContext_ lock];
  }
}

- (void)unlockVirtualizationContext {
  if (virtualizationContext_ != nil) {
    [virtualizationContext_ unlock];
  }
}

- (void)setVirtualPageSizeWithJavaUtilMap:(id<JavaUtilMap>)parameterValues {
  JavaLangInteger *virtualPageSize = (JavaLangInteger *) [((id<JavaUtilMap>) nil_chk(parameterValues)) getWithId:[OrgOssPdfreporterEngineBaseJRVirtualPrintPage PROPERTY_VIRTUAL_PAGE_ELEMENT_SIZE]];
  if (virtualPageSize == nil) {
    NSString *pageSizeProp = [((OrgOssPdfreporterEngineJRPropertiesMap *) nil_chk([((OrgOssPdfreporterEngineJasperReport *) nil_chk(jasperReport_)) getPropertiesMap])) getPropertyWithNSString:[OrgOssPdfreporterEngineBaseJRVirtualPrintPage PROPERTY_VIRTUAL_PAGE_ELEMENT_SIZE]];
    if (pageSizeProp != nil) {
      virtualPageSize = [JavaLangInteger valueOfWithInt:[OrgOssPdfreporterEngineJRPropertiesUtil asIntegerWithNSString:pageSizeProp]];
    }
  }
  if (virtualPageSize != nil) {
    [((OrgOssPdfreporterEngineFillJRVirtualizationContext *) nil_chk(virtualizationContext_)) setPageElementSizeWithInt:[virtualPageSize intValue]];
  }
}

- (void)setFormatFactoryWithJavaUtilMap:(id<JavaUtilMap>)parameterValues {
  formatFactory_ = (id<OrgOssPdfreporterTextFormatFactoryIFormatFactory>) [((id<JavaUtilMap>) nil_chk(parameterValues)) getWithId:[OrgOssPdfreporterEngineJRParameter REPORT_FORMAT_FACTORY]];
  if (formatFactory_ == nil) {
    formatFactory_ = [OrgOssPdfreporterRegistryApiRegistry getIFormatFactoryWithOrgOssPdfreporterTextFormatFactoryIFormatFactory_FormatTypeEnum:[OrgOssPdfreporterTextFormatFactoryIFormatFactory_FormatTypeEnum DEFAULT]];
    if (formatFactory_ == nil) {
      [((JavaUtilLoggingLogger *) nil_chk(OrgOssPdfreporterEngineFillJRBaseFiller_logger_)) warningWithNSString:@"Fallbck to Simple Format Factory."];
      formatFactory_ = [OrgOssPdfreporterRegistryApiRegistry getIFormatFactoryWithOrgOssPdfreporterTextFormatFactoryIFormatFactory_FormatTypeEnum:[OrgOssPdfreporterTextFormatFactoryIFormatFactory_FormatTypeEnum SIMPLE]];
    }
    (void) [((id<JavaUtilMap>) nil_chk(parameterValues)) putWithId:[OrgOssPdfreporterEngineJRParameter REPORT_FORMAT_FACTORY] withId:formatFactory_];
  }
}

- (void)setIgnorePaginationWithJavaUtilMap:(id<JavaUtilMap>)parameterValues {
  if (parentFiller_ == nil) {
    JavaLangBoolean *isIgnorePaginationParam = (JavaLangBoolean *) [((id<JavaUtilMap>) nil_chk(parameterValues)) getWithId:[OrgOssPdfreporterEngineJRParameter IS_IGNORE_PAGINATION]];
    if (isIgnorePaginationParam != nil) {
      [((OrgOssPdfreporterEngineFillJRFillContext *) nil_chk(fillContext_)) setIgnorePaginationWithBOOL:[isIgnorePaginationParam booleanValue]];
    }
    else {
      BOOL ignorePagination = [((OrgOssPdfreporterEngineJasperReport *) nil_chk(jasperReport_)) isIgnorePagination];
      [((OrgOssPdfreporterEngineFillJRFillContext *) nil_chk(fillContext_)) setIgnorePaginationWithBOOL:ignorePagination];
      (void) [((id<JavaUtilMap>) nil_chk(parameterValues)) putWithId:[OrgOssPdfreporterEngineJRParameter IS_IGNORE_PAGINATION] withId:ignorePagination ? [JavaLangBoolean getTRUE] : [JavaLangBoolean getFALSE]];
    }
  }
  else {
    BOOL ignorePagination = [((OrgOssPdfreporterEngineFillJRFillContext *) nil_chk(fillContext_)) isIgnorePagination];
    (void) [((id<JavaUtilMap>) nil_chk(parameterValues)) putWithId:[OrgOssPdfreporterEngineJRParameter IS_IGNORE_PAGINATION] withId:ignorePagination ? [JavaLangBoolean getTRUE] : [JavaLangBoolean getFALSE]];
  }
  if ([((OrgOssPdfreporterEngineFillJRFillContext *) nil_chk(fillContext_)) isIgnorePagination]) {
    isTitleNewPage_ = NO;
    isSummaryNewPage_ = NO;
    if (groups_ != nil) {
      for (int i = 0; i < (int) [groups_ count]; i++) {
        [((OrgOssPdfreporterEngineFillJRFillGroup *) nil_chk([groups_ objectAtIndex:i])) setStartNewPageWithBOOL:NO];
        [((OrgOssPdfreporterEngineFillJRFillGroup *) nil_chk([groups_ objectAtIndex:i])) setResetPageNumberWithBOOL:NO];
        [((OrgOssPdfreporterEngineFillJRFillGroup *) nil_chk([groups_ objectAtIndex:i])) setStartNewColumnWithBOOL:NO];
      }
    }
    [self setPageHeightWithInt:JavaLangInteger_MAX_VALUE];
  }
}

- (JavaUtilLocale *)getLocale {
  return [((OrgOssPdfreporterEngineFillJRFillDataset *) nil_chk(mainDataset_)) getLocale];
}

- (JavaUtilTimeZone *)getTimeZone {
  return ((OrgOssPdfreporterEngineFillJRFillDataset *) nil_chk(mainDataset_)).timeZone;
}

- (id<OrgOssPdfreporterTextFormatFactoryIFormatFactory>)getFormatFactory {
  return formatFactory_;
}

- (id<OrgOssPdfreporterTextFormatIFormat>)getDateFormatWithNSString:(NSString *)pattern {
  return [self getDateFormatWithNSString:pattern withJavaUtilTimeZone:nil];
}

- (id<OrgOssPdfreporterTextFormatIFormat>)getDateFormatWithNSString:(NSString *)pattern
                                               withJavaUtilTimeZone:(JavaUtilTimeZone *)timeZone {
  JavaUtilLocale *lc = [self getLocale];
  JavaUtilTimeZone *tz = timeZone == nil ? [self getTimeZone] : timeZone;
  NSString *key = [NSString stringWithFormat:@"%@|%@|%@", pattern, [OrgOssPdfreporterEngineUtilJRDataUtils getLocaleCodeWithJavaUtilLocale:lc], [OrgOssPdfreporterEngineUtilJRDataUtils getTimeZoneIdWithJavaUtilTimeZone:tz]];
  id<OrgOssPdfreporterTextFormatIFormat> format = [((id<JavaUtilMap>) nil_chk(dateFormatCache_)) getWithId:key];
  if (format == nil) {
    format = [((id<OrgOssPdfreporterTextFormatFactoryIFormatFactory>) nil_chk([self getFormatFactory])) newDateFormatWithNSString:pattern withJavaUtilLocale:lc withJavaUtilTimeZone:tz];
    if (format != nil) {
      (void) [((id<JavaUtilMap>) nil_chk(dateFormatCache_)) putWithId:key withId:format];
    }
  }
  return format;
}

- (id<OrgOssPdfreporterTextFormatIFormat>)getNumberFormatWithNSString:(NSString *)pattern {
  JavaUtilLocale *lc = [self getLocale];
  NSString *key = [NSString stringWithFormat:@"%@|%@", pattern, [OrgOssPdfreporterEngineUtilJRDataUtils getLocaleCodeWithJavaUtilLocale:lc]];
  id<OrgOssPdfreporterTextFormatIFormat> format = [((id<JavaUtilMap>) nil_chk(numberFormatCache_)) getWithId:key];
  if (format == nil) {
    format = [((id<OrgOssPdfreporterTextFormatFactoryIFormatFactory>) nil_chk([self getFormatFactory])) newNumberFormatWithNSString:pattern withJavaUtilLocale:lc];
    if (format != nil) {
      (void) [((id<JavaUtilMap>) nil_chk(numberFormatCache_)) putWithId:key withId:format];
    }
  }
  return format;
}

- (BOOL)hasMasterFormatFactory {
  return ![self isSubreport] || [((NSString *) nil_chk([[((id<OrgOssPdfreporterTextFormatFactoryIFormatFactory>) nil_chk([self getFormatFactory])) getClass] getName])) isEqual:[[((id<OrgOssPdfreporterTextFormatFactoryIFormatFactory>) nil_chk([((OrgOssPdfreporterEngineFillJRFillContext *) nil_chk(fillContext_)) getMasterFormatFactory])) getClass] getName]];
}

- (BOOL)hasMasterLocale {
  return ![self isSubreport] || [((JavaUtilLocale *) nil_chk([self getLocale])) isEqual:[((OrgOssPdfreporterEngineFillJRFillContext *) nil_chk(fillContext_)) getMasterLocale]];
}

- (BOOL)hasMasterTimeZone {
  return ![self isSubreport] || [((JavaUtilTimeZone *) nil_chk([self getTimeZone])) isEqual:[((OrgOssPdfreporterEngineFillJRFillContext *) nil_chk(fillContext_)) getMasterTimeZone]];
}

- (void)setParameterWithNSString:(NSString *)parameterName
                          withId:(id)value {
  [((OrgOssPdfreporterEngineFillJRFillDataset *) nil_chk(mainDataset_)) setParameterWithNSString:parameterName withId:value];
}

- (void)setParameterWithOrgOssPdfreporterEngineFillJRFillParameter:(OrgOssPdfreporterEngineFillJRFillParameter *)parameter
                                                            withId:(id)value {
  [((OrgOssPdfreporterEngineFillJRFillDataset *) nil_chk(mainDataset_)) setParameterWithOrgOssPdfreporterEngineFillIJRFillParameter:parameter withId:value];
}

- (BOOL)next {
  if ([((JavaUtilLoggingLogger *) nil_chk(OrgOssPdfreporterEngineFillJRBaseFiller_logger_)) isLoggableWithJavaUtilLoggingLevel:[JavaUtilLoggingLevel FINEST]]) {
    long long int now = [JavaLangSystem currentTimeMillis];
    if (now - time_ > 100) {
      [((JavaUtilLoggingLogger *) nil_chk(OrgOssPdfreporterEngineFillJRBaseFiller_logger_)) finestWithNSString:[NSString stringWithFormat:@"Time fill Progress: %@", [NSString stringWithFormat:@"%1$TM:%1$T@.%1$TL" , now - time_, nil]]];
      time_ = now;
    }
  }
  return [((OrgOssPdfreporterEngineFillJRFillDataset *) nil_chk(mainDataset_)) next];
}

- (void)resolveBoundElementsWithOrgOssPdfreporterEngineFillJREvaluationTime:(OrgOssPdfreporterEngineFillJREvaluationTime *)evaluationTime
                                                                   withChar:(char)evaluation {
  JavaUtilLinkedHashMap *pagesMap = [((JavaUtilHashMap *) nil_chk(boundElements_)) getWithId:evaluationTime];
  BOOL hasEntry;
  do {
    [self checkInterrupted];
    [self lockVirtualizationContext];
    @try {
      @synchronized (pagesMap) {
        id<JavaUtilIterator> pagesIt = [((id<JavaUtilSet>) nil_chk([((JavaUtilLinkedHashMap *) nil_chk(pagesMap)) entrySet])) iterator];
        hasEntry = [((id<JavaUtilIterator>) nil_chk(pagesIt)) hasNext];
        if (hasEntry) {
          id<JavaUtilMap_Entry> pageEntry = [((id<JavaUtilIterator>) nil_chk(pagesIt)) next];
          int pageIdx = ((OrgOssPdfreporterEngineFillPageKey *) nil_chk([((id<JavaUtilMap_Entry>) nil_chk(pageEntry)) getKey])).index;
          OrgOssPdfreporterEngineUtilLinkedMap *boundElementsMap = [((id<JavaUtilMap_Entry>) nil_chk(pageEntry)) getValue];
          while (![((OrgOssPdfreporterEngineUtilLinkedMap *) nil_chk(boundElementsMap)) isEmpty]) {
            id<OrgOssPdfreporterEngineFillEvaluationBoundAction> action = [((OrgOssPdfreporterEngineUtilLinkedMap *) nil_chk(boundElementsMap)) pop];
            [((id<OrgOssPdfreporterEngineFillEvaluationBoundAction>) nil_chk(action)) executeWithChar:evaluation withOrgOssPdfreporterEngineFillJREvaluationTime:evaluationTime];
          }
          [((id<JavaUtilIterator>) nil_chk(pagesIt)) remove];
          if (fillListener_ != nil) {
            [fillListener_ pageUpdatedWithOrgOssPdfreporterEngineJasperPrint:jasperPrint_ withInt:pageIdx];
          }
        }
      }
    }
    @finally {
      [self unlockVirtualizationContext];
    }
  }
  while (hasEntry);
}

- (void)resolveReportBoundElements {
  [self resolveBoundElementsWithOrgOssPdfreporterEngineFillJREvaluationTime:[OrgOssPdfreporterEngineFillJREvaluationTime EVALUATION_TIME_REPORT] withChar:OrgOssPdfreporterEngineJRExpression_EVALUATION_DEFAULT];
}

- (void)resolvePageBoundElementsWithChar:(char)evaluation {
  [self resolveBoundElementsWithOrgOssPdfreporterEngineFillJREvaluationTime:[OrgOssPdfreporterEngineFillJREvaluationTime EVALUATION_TIME_PAGE] withChar:evaluation];
}

- (void)resolveColumnBoundElementsWithChar:(char)evaluation {
  [self resolveBoundElementsWithOrgOssPdfreporterEngineFillJREvaluationTime:[OrgOssPdfreporterEngineFillJREvaluationTime EVALUATION_TIME_COLUMN] withChar:evaluation];
}

- (void)resolveGroupBoundElementsWithChar:(char)evaluation
                                 withBOOL:(BOOL)isFinal {
  if (groups_ != nil && (int) [((IOSObjectArray *) nil_chk(groups_)) count] > 0) {
    for (int i = 0; i < (int) [((IOSObjectArray *) nil_chk(groups_)) count]; i++) {
      OrgOssPdfreporterEngineFillJRFillGroup *group = [((IOSObjectArray *) nil_chk(groups_)) objectAtIndex:i];
      if (([((OrgOssPdfreporterEngineFillJRFillGroup *) nil_chk(group)) hasChanged] && [((OrgOssPdfreporterEngineFillJRFillGroup *) nil_chk(group)) isFooterPrinted]) || isFinal) {
        NSString *groupName = [((OrgOssPdfreporterEngineFillJRFillGroup *) nil_chk(group)) getName];
        [self resolveBoundElementsWithOrgOssPdfreporterEngineFillJREvaluationTime:[OrgOssPdfreporterEngineFillJREvaluationTime getGroupEvaluationTimeWithNSString:groupName] withChar:evaluation];
      }
    }
  }
}

- (id<OrgOssPdfreporterEngineJRPrintPage>)newPage OBJC_METHOD_FAMILY_NONE {
  id<OrgOssPdfreporterEngineJRPrintPage> page;
  if ([((OrgOssPdfreporterEngineFillJRFillContext *) nil_chk(fillContext_)) isUsingVirtualizer]) {
    OrgOssPdfreporterEngineBaseJRVirtualPrintPage *virtualPage = [[OrgOssPdfreporterEngineBaseJRVirtualPrintPage alloc] initWithOrgOssPdfreporterEngineJasperPrint:jasperPrint_ withOrgOssPdfreporterEngineFillJRVirtualizationContext:virtualizationContext_];
    page = virtualPage;
  }
  else {
    page = [[OrgOssPdfreporterEngineBaseJRBasePrintPage alloc] init];
  }
  return page;
}

- (id)getVariableValueWithNSString:(NSString *)variableName {
  return [((OrgOssPdfreporterEngineFillJRFillDataset *) nil_chk(mainDataset_)) getVariableValueWithNSString:variableName];
}

- (id)getParameterValueWithNSString:(NSString *)parameterName {
  return [((OrgOssPdfreporterEngineFillJRFillDataset *) nil_chk(mainDataset_)) getParameterValueWithNSString:parameterName];
}

- (void)resolveBandBoundElementsWithOrgOssPdfreporterEngineFillJRFillBand:(OrgOssPdfreporterEngineFillJRFillBand *)band
                                                                 withChar:(char)evaluation {
  [self resolveBoundElementsWithOrgOssPdfreporterEngineFillJREvaluationTime:[OrgOssPdfreporterEngineFillJREvaluationTime getBandEvaluationTimeWithOrgOssPdfreporterEngineFillJRFillBand:band] withChar:evaluation];
}

- (void)addVariableCalculationReqWithNSString:(NSString *)variableName
withOrgOssPdfreporterEngineTypeCalculationEnumEnum:(OrgOssPdfreporterEngineTypeCalculationEnumEnum *)calculation {
  [((OrgOssPdfreporterEngineFillJRFillDataset *) nil_chk(mainDataset_)) addVariableCalculationReqWithNSString:variableName withOrgOssPdfreporterEngineTypeCalculationEnumEnum:calculation];
}

- (void)cancelFill {
  [((OrgOssPdfreporterEngineFillJRFillContext *) nil_chk(fillContext_)) markCanceled];
  if ([((OrgOssPdfreporterEngineFillJRFillContext *) nil_chk(fillContext_)) cancelRunningQuery]) {
  }
  else {
    JavaLangThread *t = fillingThread_;
    if (t != nil) {
      [t interrupt];
    }
  }
}

- (void)registerSubfillerWithOrgOssPdfreporterEngineFillJRBaseFiller:(OrgOssPdfreporterEngineFillJRBaseFiller *)subfiller {
  if (subfillers_ == nil) {
    subfillers_ = [[JavaUtilHashMap alloc] init];
  }
  (void) [((id<JavaUtilMap>) nil_chk(subfillers_)) putWithId:[JavaLangInteger valueOfWithInt:((OrgOssPdfreporterEngineFillJRBaseFiller *) nil_chk(subfiller)).fillerId] withId:subfiller];
}

- (void)unregisterSubfillerWithOrgOssPdfreporterEngineFillJRBaseFiller:(OrgOssPdfreporterEngineFillJRBaseFiller *)subfiller {
  if (subfillers_ != nil) {
    (void) [subfillers_ removeWithId:[JavaLangInteger valueOfWithInt:((OrgOssPdfreporterEngineFillJRBaseFiller *) nil_chk(subfiller)).fillerId]];
  }
}

- (void)addPageWithOrgOssPdfreporterEngineJRPrintPage:(id<OrgOssPdfreporterEngineJRPrintPage>)page {
  if (![self isSubreport]) {
    int pageCount = [((id<JavaUtilList>) nil_chk([((OrgOssPdfreporterEngineJasperPrint *) nil_chk(jasperPrint_)) getPages])) size];
    if (pageCount > 0 && fillListener_ != nil) {
      [((id<OrgOssPdfreporterEngineFillFillListener>) nil_chk(fillListener_)) pageGeneratedWithOrgOssPdfreporterEngineJasperPrint:jasperPrint_ withInt:pageCount - 1];
    }
    [((OrgOssPdfreporterEngineJasperPrint *) nil_chk(jasperPrint_)) addPageWithOrgOssPdfreporterEngineJRPrintPage:page];
    [((OrgOssPdfreporterEngineFillJRFillContext *) nil_chk(fillContext_)) setPrintPageWithOrgOssPdfreporterEngineJRPrintPage:page];
  }
}

- (id)evaluateExpressionWithOrgOssPdfreporterEngineJRExpression:(id<OrgOssPdfreporterEngineJRExpression>)expression
                                                       withChar:(char)evaluation {
  return [((OrgOssPdfreporterEngineFillJRFillDataset *) nil_chk(mainDataset_)) evaluateExpressionWithOrgOssPdfreporterEngineJRExpression:expression withChar:evaluation];
}

- (id<OrgOssPdfreporterEngineFillJRFillExpressionEvaluator>)getExpressionEvaluator {
  return calculator_;
}

- (void)createDatasets {
  datasetMap_ = [[JavaUtilHashMap alloc] init];
  IOSObjectArray *datasets = [((OrgOssPdfreporterEngineJasperReport *) nil_chk(jasperReport_)) getDatasets];
  if (datasets != nil && (int) [((IOSObjectArray *) nil_chk(datasets)) count] > 0) {
    for (int i = 0; i < (int) [((IOSObjectArray *) nil_chk(datasets)) count]; i++) {
      OrgOssPdfreporterEngineFillJRFillDataset *fillDataset = [((OrgOssPdfreporterEngineFillJRFillObjectFactory *) nil_chk(factory_)) getDatasetWithOrgOssPdfreporterEngineJRDataset:[((IOSObjectArray *) nil_chk(datasets)) objectAtIndex:i]];
      [((OrgOssPdfreporterEngineFillJRFillDataset *) nil_chk(fillDataset)) createCalculatorWithOrgOssPdfreporterEngineJasperReport:jasperReport_];
      (void) [((id<JavaUtilMap>) nil_chk(datasetMap_)) putWithId:[((id<OrgOssPdfreporterEngineJRDataset>) nil_chk([((IOSObjectArray *) nil_chk(datasets)) objectAtIndex:i])) getName] withId:fillDataset];
    }
  }
}

- (void)initDatasetsWithOrgOssPdfreporterEngineFillJRFillObjectFactory:(OrgOssPdfreporterEngineFillJRFillObjectFactory *)factory OBJC_METHOD_FAMILY_NONE {
  for (id<JavaUtilIterator> it = [((id<JavaUtilCollection>) nil_chk([((id<JavaUtilMap>) nil_chk(datasetMap_)) values])) iterator]; [((id<JavaUtilIterator>) nil_chk(it)) hasNext]; ) {
    OrgOssPdfreporterEngineFillJRFillDataset *dataset = [((id<JavaUtilIterator>) nil_chk(it)) next];
    [((OrgOssPdfreporterEngineFillJRFillDataset *) nil_chk(dataset)) inheritFromMain];
    [((OrgOssPdfreporterEngineFillJRFillDataset *) nil_chk(dataset)) initElementDatasetsWithOrgOssPdfreporterEngineFillJRFillObjectFactory:factory];
  }
}

- (OrgOssPdfreporterEngineTypeWhenResourceMissingTypeEnumEnum *)getWhenResourceMissingType {
  return ((OrgOssPdfreporterEngineFillJRFillDataset *) nil_chk(mainDataset_)).whenResourceMissingType;
}

- (OrgOssPdfreporterEngineJasperReport *)getJasperReport {
  return jasperReport_;
}

- (BOOL)isBandOverFlowAllowed {
  return bandOverFlowAllowed_;
}

- (void)setBandOverFlowAllowedWithBOOL:(BOOL)splittableBand {
  self.bandOverFlowAllowed = splittableBand;
}

- (int)getMasterColumnCount {
  OrgOssPdfreporterEngineFillJRBaseFiller *filler = parentFiller_;
  int colCount = 1;
  while (filler != nil) {
    colCount *= ((OrgOssPdfreporterEngineFillJRBaseFiller *) nil_chk(filler)).columnCount;
    filler = ((OrgOssPdfreporterEngineFillJRBaseFiller *) nil_chk(filler)).parentFiller;
  }
  return colCount;
}

- (OrgOssPdfreporterEngineFillJRBaseFiller *)getMasterFiller {
  OrgOssPdfreporterEngineFillJRBaseFiller *filler = self;
  while (((OrgOssPdfreporterEngineFillJRBaseFiller *) nil_chk(filler)).parentFiller != nil) {
    filler = ((OrgOssPdfreporterEngineFillJRBaseFiller *) nil_chk(filler)).parentFiller;
  }
  return filler;
}

- (OrgOssPdfreporterEngineFillJRFillDataset *)getMainDataset {
  return mainDataset_;
}

- (void)addBoundElementWithOrgOssPdfreporterEngineFillJRFillElement:(OrgOssPdfreporterEngineFillJRFillElement *)element
                          withOrgOssPdfreporterEngineJRPrintElement:(id<OrgOssPdfreporterEngineJRPrintElement>)printElement
              withOrgOssPdfreporterEngineTypeEvaluationTimeEnumEnum:(OrgOssPdfreporterEngineTypeEvaluationTimeEnumEnum *)evaluationType
                                                       withNSString:(NSString *)groupName
                          withOrgOssPdfreporterEngineFillJRFillBand:(OrgOssPdfreporterEngineFillJRFillBand *)band {
  OrgOssPdfreporterEngineFillJRFillGroup *group = groupName == nil ? nil : [self getGroupWithNSString:groupName];
  [self addBoundElementWithOrgOssPdfreporterEngineFillJRFillElement:element withOrgOssPdfreporterEngineJRPrintElement:printElement withOrgOssPdfreporterEngineTypeEvaluationTimeEnumEnum:evaluationType withOrgOssPdfreporterEngineJRGroup:group withOrgOssPdfreporterEngineFillJRFillBand:band];
}

- (void)addBoundElementWithOrgOssPdfreporterEngineFillJRFillElement:(OrgOssPdfreporterEngineFillJRFillElement *)element
                          withOrgOssPdfreporterEngineJRPrintElement:(id<OrgOssPdfreporterEngineJRPrintElement>)printElement
              withOrgOssPdfreporterEngineTypeEvaluationTimeEnumEnum:(OrgOssPdfreporterEngineTypeEvaluationTimeEnumEnum *)evaluationType
                                 withOrgOssPdfreporterEngineJRGroup:(id<OrgOssPdfreporterEngineJRGroup>)group
                          withOrgOssPdfreporterEngineFillJRFillBand:(OrgOssPdfreporterEngineFillJRFillBand *)band {
  OrgOssPdfreporterEngineFillJREvaluationTime *evaluationTime = [OrgOssPdfreporterEngineFillJREvaluationTime getEvaluationTimeWithOrgOssPdfreporterEngineTypeEvaluationTimeEnumEnum:evaluationType withOrgOssPdfreporterEngineJRGroup:group withOrgOssPdfreporterEngineFillJRFillBand:band];
  [self addBoundElementWithOrgOssPdfreporterEngineFillJRFillElement:element withOrgOssPdfreporterEngineJRPrintElement:printElement withOrgOssPdfreporterEngineFillJREvaluationTime:evaluationTime];
}

- (void)addBoundElementWithOrgOssPdfreporterEngineFillJRFillElement:(OrgOssPdfreporterEngineFillJRFillElement *)element
                          withOrgOssPdfreporterEngineJRPrintElement:(id<OrgOssPdfreporterEngineJRPrintElement>)printElement
                    withOrgOssPdfreporterEngineFillJREvaluationTime:(OrgOssPdfreporterEngineFillJREvaluationTime *)evaluationTime {
  JavaUtilLinkedHashMap *pagesMap = [((JavaUtilHashMap *) nil_chk(boundElements_)) getWithId:evaluationTime];
  [self lockVirtualizationContext];
  @try {
    @synchronized (pagesMap) {
      OrgOssPdfreporterEngineFillPageKey *pageKey = [[OrgOssPdfreporterEngineFillPageKey alloc] initWithOrgOssPdfreporterEngineJRPrintPage:printPage_ withInt:[((id<JavaUtilList>) nil_chk([((OrgOssPdfreporterEngineJasperPrint *) nil_chk(jasperPrint_)) getPages])) size] - 1];
      OrgOssPdfreporterEngineUtilLinkedMap *boundElementsMap = [((JavaUtilLinkedHashMap *) nil_chk(pagesMap)) getWithId:pageKey];
      if (boundElementsMap == nil) {
        boundElementsMap = [[OrgOssPdfreporterEngineUtilLinkedMap alloc] init];
        (void) [((JavaUtilLinkedHashMap *) nil_chk(pagesMap)) putWithId:pageKey withId:boundElementsMap];
      }
      [((OrgOssPdfreporterEngineUtilLinkedMap *) nil_chk(boundElementsMap)) addWithId:printElement withId:[[OrgOssPdfreporterEngineFillElementEvaluationAction alloc] initWithOrgOssPdfreporterEngineFillJRFillElement:element withOrgOssPdfreporterEngineJRPrintElement:printElement]];
    }
  }
  @finally {
    [self unlockVirtualizationContext];
  }
}

- (void)subreportPageFilledWithOrgOssPdfreporterEngineJRPrintPage:(id<OrgOssPdfreporterEngineJRPrintPage>)subreportPage {
  OrgOssPdfreporterEngineFillPageKey *subreportKey = [[OrgOssPdfreporterEngineFillPageKey alloc] initWithOrgOssPdfreporterEngineJRPrintPage:subreportPage];
  OrgOssPdfreporterEngineFillPageKey *parentKey = [[OrgOssPdfreporterEngineFillPageKey alloc] initWithOrgOssPdfreporterEngineJRPrintPage:((OrgOssPdfreporterEngineFillJRBaseFiller *) nil_chk(parentFiller_)).printPage];
  [self moveBoundActionsWithOrgOssPdfreporterEngineFillPageKey:subreportKey withOrgOssPdfreporterEngineFillPageKey:parentKey];
}

- (void)moveBoundActionsWithOrgOssPdfreporterEngineFillPageKey:(OrgOssPdfreporterEngineFillPageKey *)subreportKey
                        withOrgOssPdfreporterEngineFillPageKey:(OrgOssPdfreporterEngineFillPageKey *)parentKey {
  {
    id<JavaUtilIterator> iter__ = [((id<JavaUtilCollection>) nil_chk([((JavaUtilHashMap *) nil_chk(boundElements_)) values])) iterator];
    while ([((id<JavaUtilIterator>) nil_chk(iter__)) hasNext]) {
      JavaUtilLinkedHashMap *map = [((id<JavaUtilIterator>) nil_chk(iter__)) next];
      [self lockVirtualizationContext];
      @try {
        @synchronized (map) {
          OrgOssPdfreporterEngineUtilLinkedMap *subreportMap = [((JavaUtilLinkedHashMap *) nil_chk(map)) removeWithId:subreportKey];
          if (subreportMap != nil && ![((OrgOssPdfreporterEngineUtilLinkedMap *) nil_chk(subreportMap)) isEmpty]) {
            OrgOssPdfreporterEngineUtilLinkedMap *masterMap = [((JavaUtilLinkedHashMap *) nil_chk(map)) getWithId:parentKey];
            if (masterMap == nil) {
              masterMap = [[OrgOssPdfreporterEngineUtilLinkedMap alloc] init];
              (void) [((JavaUtilLinkedHashMap *) nil_chk(map)) putWithId:parentKey withId:masterMap];
            }
            [((OrgOssPdfreporterEngineUtilLinkedMap *) nil_chk(masterMap)) addAllWithOrgOssPdfreporterEngineUtilLinkedMap:subreportMap];
          }
        }
      }
      @finally {
        [self unlockVirtualizationContext];
      }
    }
  }
  if (subfillers_ != nil) {
    {
      id<JavaUtilIterator> iter__ = [((id<JavaUtilCollection>) nil_chk([subfillers_ values])) iterator];
      while ([((id<JavaUtilIterator>) nil_chk(iter__)) hasNext]) {
        OrgOssPdfreporterEngineFillJRBaseFiller *subfiller = [((id<JavaUtilIterator>) nil_chk(iter__)) next];
        [((OrgOssPdfreporterEngineFillJRBaseFiller *) nil_chk(subfiller)) moveBoundActionsWithOrgOssPdfreporterEngineFillPageKey:subreportKey withOrgOssPdfreporterEngineFillPageKey:parentKey];
      }
    }
  }
}

- (BOOL)isPageFinalWithInt:(int)pageIdx {
  id<OrgOssPdfreporterEngineJRPrintPage> page = [((id<JavaUtilList>) nil_chk([((OrgOssPdfreporterEngineJasperPrint *) nil_chk(jasperPrint_)) getPages])) getWithInt:pageIdx];
  return ![self hasBoundActionsWithOrgOssPdfreporterEngineJRPrintPage:page];
}

- (BOOL)hasBoundActionsWithOrgOssPdfreporterEngineJRPrintPage:(id<OrgOssPdfreporterEngineJRPrintPage>)page {
  {
    id<JavaUtilIterator> iter__ = [((id<JavaUtilCollection>) nil_chk([((JavaUtilHashMap *) nil_chk(boundElements_)) values])) iterator];
    while ([((id<JavaUtilIterator>) nil_chk(iter__)) hasNext]) {
      JavaUtilLinkedHashMap *map = [((id<JavaUtilIterator>) nil_chk(iter__)) next];
      [self lockVirtualizationContext];
      @try {
        @synchronized (map) {
          OrgOssPdfreporterEngineUtilLinkedMap *boundMap = [((JavaUtilLinkedHashMap *) nil_chk(map)) getWithId:[[OrgOssPdfreporterEngineFillPageKey alloc] initWithOrgOssPdfreporterEngineJRPrintPage:page]];
          if (boundMap != nil && ![((OrgOssPdfreporterEngineUtilLinkedMap *) nil_chk(boundMap)) isEmpty]) {
            return YES;
          }
        }
      }
      @finally {
        [self unlockVirtualizationContext];
      }
    }
  }
  if (subfillers_ != nil) {
    {
      id<JavaUtilIterator> iter__ = [((id<JavaUtilCollection>) nil_chk([subfillers_ values])) iterator];
      while ([((id<JavaUtilIterator>) nil_chk(iter__)) hasNext]) {
        OrgOssPdfreporterEngineFillJRBaseFiller *subfiller = [((id<JavaUtilIterator>) nil_chk(iter__)) next];
        if ([((OrgOssPdfreporterEngineFillJRBaseFiller *) nil_chk(subfiller)) hasBoundActionsWithOrgOssPdfreporterEngineJRPrintPage:page]) {
          return YES;
        }
      }
    }
  }
  return NO;
}

- (OrgOssPdfreporterEngineFillJRFillGroup *)getGroupWithNSString:(NSString *)groupName {
  OrgOssPdfreporterEngineFillJRFillGroup *group = nil;
  if (groups_ != nil) {
    for (int i = 0; i < (int) [groups_ count]; i++) {
      if ([((NSString *) nil_chk([((OrgOssPdfreporterEngineFillJRFillGroup *) nil_chk([groups_ objectAtIndex:i])) getName])) isEqual:groupName]) {
        group = [groups_ objectAtIndex:i];
        break;
      }
    }
  }
  if (group == nil) {
    @throw [[OrgOssPdfreporterEngineJRRuntimeException alloc] initWithNSString:[NSString stringWithFormat:@"No such group %@", groupName]];
  }
  return group;
}

- (void)setSubreportRunnerWithOrgOssPdfreporterEngineFillJRSubreportRunner:(id<OrgOssPdfreporterEngineFillJRSubreportRunner>)runner {
  self.subreportRunner = runner;
}

- (void)suspendSubreportRunner {
  if (subreportRunner_ == nil) {
    @throw [[OrgOssPdfreporterEngineJRRuntimeException alloc] initWithNSString:@"No subreport runner set."];
  }
  [((id<OrgOssPdfreporterEngineFillJRSubreportRunner>) nil_chk(subreportRunner_)) suspend];
}

- (void)createReportTemplatesWithOrgOssPdfreporterEngineFillJRFillObjectFactory:(OrgOssPdfreporterEngineFillJRFillObjectFactory *)factory {
  IOSObjectArray *templates = [((OrgOssPdfreporterEngineJasperReport *) nil_chk(jasperReport_)) getTemplates];
  if (templates != nil) {
    reportTemplates_ = [IOSObjectArray arrayWithLength:(int) [templates count] type:[IOSClass classWithClass:[OrgOssPdfreporterEngineFillJRFillReportTemplate class]]];
    for (int i = 0; i < (int) [templates count]; i++) {
      id<OrgOssPdfreporterEngineJRReportTemplate> template_ = [templates objectAtIndex:i];
      (void) [((IOSObjectArray *) nil_chk(reportTemplates_)) replaceObjectAtIndex:i withObject:[((OrgOssPdfreporterEngineFillJRFillObjectFactory *) nil_chk(factory)) getReportTemplateWithOrgOssPdfreporterEngineJRReportTemplate:template_]];
    }
  }
}

- (OrgOssPdfreporterEngineFillSavePoint *)advanceSavePointWithOrgOssPdfreporterEngineFillSavePoint:(OrgOssPdfreporterEngineFillSavePoint *)savePoint
                                                          withOrgOssPdfreporterEngineFillSavePoint:(OrgOssPdfreporterEngineFillSavePoint *)newSavePoint {
  if (savePoint == nil) {
    savePoint = newSavePoint;
  }
  else if (newSavePoint != nil) {
    if (((OrgOssPdfreporterEngineFillSavePoint *) nil_chk(savePoint)).page == newSavePoint.page && ((OrgOssPdfreporterEngineFillSavePoint *) nil_chk(savePoint)).columnIndex == newSavePoint.columnIndex) {
      [((OrgOssPdfreporterEngineFillSavePoint *) nil_chk(savePoint)) saveHeightOffsetWithInt:newSavePoint.heightOffset];
    }
    else {
      [((OrgOssPdfreporterEngineFillSavePoint *) nil_chk(savePoint)) moveSavePointContent];
      savePoint = newSavePoint;
    }
  }
  return savePoint;
}

- (BOOL)moveKeepTogetherSavePointContent {
  BOOL moved = NO;
  if (keepTogetherSavePoint_ != nil) {
    if (keepTogetherSavePoint_.page == [self getCurrentPage]) {
      if (!keepTogetherSavePoint_.isNewColumn) {
        [keepTogetherSavePoint_ addContentWithOrgOssPdfreporterEngineJRPrintPage:printPage_ withInt:columnSpacing_ + columnWidth_ withInt:offsetY_ - keepTogetherSavePoint_.startOffsetY];
        offsetY_ = offsetY_ + keepTogetherSavePoint_.endOffsetY - keepTogetherSavePoint_.startOffsetY;
        moved = YES;
      }
    }
    else {
      if (!keepTogetherSavePoint_.isNewPage) {
        [keepTogetherSavePoint_ addContentWithOrgOssPdfreporterEngineJRPrintPage:printPage_ withInt:(columnIndex_ - keepTogetherSavePoint_.columnIndex) * (columnSpacing_ + columnWidth_) withInt:offsetY_ - keepTogetherSavePoint_.startOffsetY];
        offsetY_ = offsetY_ + keepTogetherSavePoint_.endOffsetY - keepTogetherSavePoint_.startOffsetY;
        moved = YES;
      }
    }
    keepTogetherSavePoint_ = nil;
  }
  return moved;
}

- (OrgOssPdfreporterEngineFillJRFillContext *)getFillContext {
  return fillContext_;
}

- (int)getFillerId {
  return fillerId_;
}

- (int)assignElementIdWithOrgOssPdfreporterEngineFillJRFillElement:(OrgOssPdfreporterEngineFillJRFillElement *)fillElement {
  int id_ = [((OrgOssPdfreporterEngineFillJRFillContext *) nil_chk([self getFillContext])) generateFillElementId];
  (void) [((id<JavaUtilMap>) nil_chk(fillElements_)) putWithId:[JavaLangInteger valueOfWithInt:id_] withId:fillElement];
  return id_;
}

+ (void)initialize {
  if (self == [OrgOssPdfreporterEngineFillJRBaseFiller class]) {
    OrgOssPdfreporterEngineFillJRBaseFiller_logger_ = [JavaUtilLoggingLogger getLoggerWithNSString:[[IOSClass classWithClass:[OrgOssPdfreporterEngineFillJRBaseFiller class]] getName]];
    OrgOssPdfreporterEngineFillJRBaseFiller_DUMMY_STYLE_SETTER_ = [[OrgOssPdfreporterEngineFillJRBaseFiller_$1 alloc] init];
  }
}

- (void)copyAllPropertiesTo:(id)copy {
  [super copyAllPropertiesTo:copy];
  OrgOssPdfreporterEngineFillJRBaseFiller *typedCopy = (OrgOssPdfreporterEngineFillJRBaseFiller *) copy;
  typedCopy.time = time_;
  typedCopy.fillElements = fillElements_;
  typedCopy.fillerId = fillerId_;
  typedCopy.parentFiller = parentFiller_;
  typedCopy.parentElement = parentElement_;
  typedCopy.factory = factory_;
  typedCopy.styledTextParser = styledTextParser_;
  typedCopy.fillListener = fillListener_;
  typedCopy.isInterrupted_ = isInterrupted__;
  typedCopy.name = name_;
  typedCopy.columnCount = columnCount_;
  typedCopy.printOrder = printOrder_;
  typedCopy.columnDirection = columnDirection_;
  typedCopy.pageWidth = pageWidth_;
  typedCopy.pageHeight = pageHeight_;
  typedCopy.orientation = orientation_;
  typedCopy.whenNoDataType = whenNoDataType_;
  typedCopy.columnWidth = columnWidth_;
  typedCopy.columnSpacing = columnSpacing_;
  typedCopy.leftMargin = leftMargin_;
  typedCopy.rightMargin = rightMargin_;
  typedCopy.topMargin = topMargin_;
  typedCopy.bottomMargin = bottomMargin_;
  typedCopy.isTitleNewPage = isTitleNewPage_;
  typedCopy.isSummaryNewPage = isSummaryNewPage_;
  typedCopy.isSummaryWithPageHeaderAndFooter = isSummaryWithPageHeaderAndFooter_;
  typedCopy.isFloatColumnFooter = isFloatColumnFooter_;
  typedCopy.whenResourceMissingType = whenResourceMissingType_;
  typedCopy.reportTemplates = reportTemplates_;
  typedCopy.templates = templates_;
  typedCopy.defaultStyle = defaultStyle_;
  typedCopy.styles = styles_;
  typedCopy.mainDataset = mainDataset_;
  typedCopy.groups = groups_;
  typedCopy.missingFillSection = missingFillSection_;
  typedCopy.missingFillBand = missingFillBand_;
  typedCopy.background = background_;
  typedCopy.title = title_;
  typedCopy.pageHeader = pageHeader_;
  typedCopy.columnHeader = columnHeader_;
  typedCopy.detailSection = detailSection_;
  typedCopy.columnFooter = columnFooter_;
  typedCopy.pageFooter = pageFooter_;
  typedCopy.lastPageFooter = lastPageFooter_;
  typedCopy.summary = summary_;
  typedCopy.noData = noData_;
  typedCopy.virtualizationContext = virtualizationContext_;
  typedCopy.virtualizationListener = virtualizationListener_;
  typedCopy.formatFactory = formatFactory_;
  typedCopy.fillContext = fillContext_;
  typedCopy.boundElements = boundElements_;
  typedCopy.jasperPrint = jasperPrint_;
  typedCopy.printPage = printPage_;
  typedCopy.printPageStretchHeight = printPageStretchHeight_;
  typedCopy.bands = bands_;
  typedCopy.subfillers = subfillers_;
  typedCopy.fillingThread = fillingThread_;
  typedCopy.calculator = calculator_;
  typedCopy.scriptlet = scriptlet_;
  typedCopy.datasetMap = datasetMap_;
  typedCopy.jasperReportsContext = jasperReportsContext_;
  typedCopy.propertiesUtil = propertiesUtil_;
  typedCopy.jasperReport = jasperReport_;
  typedCopy.bandOverFlowAllowed = bandOverFlowAllowed_;
  typedCopy.dateFormatCache = dateFormatCache_;
  typedCopy.numberFormatCache = numberFormatCache_;
  typedCopy.subreportRunner = subreportRunner_;
  typedCopy.keepTogetherSavePoint = keepTogetherSavePoint_;
  typedCopy.isCreatingNewPage = isCreatingNewPage_;
  typedCopy.isNewPage = isNewPage_;
  typedCopy.isNewColumn = isNewColumn_;
  typedCopy.isNewGroup = isNewGroup_;
  typedCopy.isFirstPageBand = isFirstPageBand_;
  typedCopy.isFirstColumnBand = isFirstColumnBand_;
  typedCopy.columnIndex = columnIndex_;
  typedCopy.offsetX = offsetX_;
  typedCopy.offsetY = offsetY_;
  typedCopy.columnHeaderOffsetY = columnHeaderOffsetY_;
  typedCopy.columnFooterOffsetY = columnFooterOffsetY_;
  typedCopy.lastPageColumnFooterOffsetY = lastPageColumnFooterOffsetY_;
  typedCopy.isLastPageFooter = isLastPageFooter_;
  typedCopy.defaultStyleListeners = defaultStyleListeners_;
}

@end
@implementation OrgOssPdfreporterEngineFillPageKey

@synthesize page = page_;
@synthesize index = index_;

- (id)initOrgOssPdfreporterEngineFillPageKeyWithOrgOssPdfreporterEngineJRPrintPage:(id<OrgOssPdfreporterEngineJRPrintPage>)page
                                                                           withInt:(int)index {
  if ((self = [super init])) {
    self.page = page;
    self.index = index;
  }
  return self;
}

- (id)initWithOrgOssPdfreporterEngineJRPrintPage:(id<OrgOssPdfreporterEngineJRPrintPage>)page
                                         withInt:(int)index {
  return [self initOrgOssPdfreporterEngineFillPageKeyWithOrgOssPdfreporterEngineJRPrintPage:page withInt:index];
}

- (id)initWithOrgOssPdfreporterEngineJRPrintPage:(id<OrgOssPdfreporterEngineJRPrintPage>)page {
  return [self initOrgOssPdfreporterEngineFillPageKeyWithOrgOssPdfreporterEngineJRPrintPage:page withInt:0];
}

- (NSUInteger)hash {
  return [((id<OrgOssPdfreporterEngineJRPrintPage>) nil_chk(page_)) hash];
}

- (BOOL)isEqual:(id)obj {
  if (!([obj isKindOfClass:[OrgOssPdfreporterEngineFillPageKey class]])) {
    return NO;
  }
  return [((id<OrgOssPdfreporterEngineJRPrintPage>) nil_chk(page_)) isEqual:((OrgOssPdfreporterEngineFillPageKey *) obj).page];
}

- (void)copyAllPropertiesTo:(id)copy {
  [super copyAllPropertiesTo:copy];
  OrgOssPdfreporterEngineFillPageKey *typedCopy = (OrgOssPdfreporterEngineFillPageKey *) copy;
  typedCopy.page = page_;
  typedCopy.index = index_;
}

@end
@implementation OrgOssPdfreporterEngineFillElementEvaluationAction

@synthesize element = element_;
@synthesize printElement = printElement_;

- (id)initWithOrgOssPdfreporterEngineFillJRFillElement:(OrgOssPdfreporterEngineFillJRFillElement *)element
             withOrgOssPdfreporterEngineJRPrintElement:(id<OrgOssPdfreporterEngineJRPrintElement>)printElement {
  if ((self = [super init])) {
    self.element = element;
    self.printElement = printElement;
  }
  return self;
}

- (void)executeWithChar:(char)evaluation
withOrgOssPdfreporterEngineFillJREvaluationTime:(OrgOssPdfreporterEngineFillJREvaluationTime *)evaluationTime {
  [((OrgOssPdfreporterEngineFillJRFillElement *) nil_chk(element_)) resolveElementWithOrgOssPdfreporterEngineJRPrintElement:printElement_ withChar:evaluation withOrgOssPdfreporterEngineFillJREvaluationTime:evaluationTime];
}

- (NSString *)description {
  return [NSString stringWithFormat:@"delayed evaluation {element: %@, printElement: %@}", element_, printElement_];
}

- (void)copyAllPropertiesTo:(id)copy {
  [super copyAllPropertiesTo:copy];
  OrgOssPdfreporterEngineFillElementEvaluationAction *typedCopy = (OrgOssPdfreporterEngineFillElementEvaluationAction *) copy;
  typedCopy.element = element_;
  typedCopy.printElement = printElement_;
}

@end
@implementation OrgOssPdfreporterEngineFillElementEvaluationVirtualizationListener

@synthesize mainFiller = mainFiller_;

- (id)initWithOrgOssPdfreporterEngineFillJRBaseFiller:(OrgOssPdfreporterEngineFillJRBaseFiller *)filler {
  if ((self = [super init])) {
    self.mainFiller = filler;
  }
  return self;
}

- (void)beforeExternalizationWithOrgOssPdfreporterEngineJRVirtualizable:(id<OrgOssPdfreporterEngineJRVirtualizable>)object {
  OrgOssPdfreporterEngineFillJRVirtualizationContext *virtualizationContext = [((id<OrgOssPdfreporterEngineJRVirtualizable>) nil_chk(object)) getContext];
  [((OrgOssPdfreporterEngineFillJRVirtualizationContext *) nil_chk(virtualizationContext)) lock];
  @try {
    [self setElementEvaluationsToPageWithOrgOssPdfreporterEngineFillJRBaseFiller:mainFiller_ withOrgOssPdfreporterEngineJRVirtualizable:object];
  }
  @finally {
    [((OrgOssPdfreporterEngineFillJRVirtualizationContext *) nil_chk(virtualizationContext)) unlock];
  }
}

- (void)setElementEvaluationsToPageWithOrgOssPdfreporterEngineFillJRBaseFiller:(OrgOssPdfreporterEngineFillJRBaseFiller *)filler
                                    withOrgOssPdfreporterEngineJRVirtualizable:(id<OrgOssPdfreporterEngineJRVirtualizable>)object {
  OrgOssPdfreporterEngineBaseJRVirtualPrintPage *page = [((id<OrgOssPdfreporterEngineBaseVirtualizablePageElements>) object) getPage];
  OrgOssPdfreporterEngineFillPageKey *pageKey = [[OrgOssPdfreporterEngineFillPageKey alloc] initWithOrgOssPdfreporterEngineJRPrintPage:page];
  OrgOssPdfreporterEngineBaseVirtualElementsData *virtualData = [((id<OrgOssPdfreporterEngineJRVirtualizable>) nil_chk(object)) getVirtualData];
  {
    id<JavaUtilIterator> iter__ = [((id<JavaUtilSet>) nil_chk([((JavaUtilHashMap *) nil_chk(((OrgOssPdfreporterEngineFillJRBaseFiller *) nil_chk(filler)).boundElements)) entrySet])) iterator];
    while ([((id<JavaUtilIterator>) nil_chk(iter__)) hasNext]) {
      id<JavaUtilMap_Entry> boundMapEntry = [((id<JavaUtilIterator>) nil_chk(iter__)) next];
      OrgOssPdfreporterEngineFillJREvaluationTime *evaluationTime = [((id<JavaUtilMap_Entry>) nil_chk(boundMapEntry)) getKey];
      JavaUtilLinkedHashMap *map = [((id<JavaUtilMap_Entry>) nil_chk(boundMapEntry)) getValue];
      @synchronized (map) {
        OrgOssPdfreporterEngineUtilLinkedMap *actionsMap = [((JavaUtilLinkedHashMap *) nil_chk(map)) getWithId:pageKey];
        if (actionsMap != nil && ![((OrgOssPdfreporterEngineUtilLinkedMap *) nil_chk(actionsMap)) isEmpty]) {
          id<JavaUtilMap> elementEvaluations = [[JavaUtilLinkedHashMap alloc] init];
          id<OrgOssPdfreporterEnginePrintElementVisitor> visitor = [[OrgOssPdfreporterEngineFillElementEvaluationVirtualizationListener_$1 alloc] initWithBOOL:YES withOrgOssPdfreporterEngineUtilLinkedMap:actionsMap withJavaUtilMap:elementEvaluations];
          {
            id<JavaUtilIterator> iter__ = [((id<JavaUtilList>) nil_chk([((OrgOssPdfreporterEngineBaseVirtualElementsData *) nil_chk(virtualData)) getElements])) iterator];
            while ([((id<JavaUtilIterator>) nil_chk(iter__)) hasNext]) {
              id<OrgOssPdfreporterEngineJRPrintElement> element = [((id<JavaUtilIterator>) nil_chk(iter__)) next];
              [((id<OrgOssPdfreporterEngineJRPrintElement>) nil_chk(element)) acceptWithOrgOssPdfreporterEnginePrintElementVisitor:visitor withId:nil];
            }
          }
          if (![((id<JavaUtilMap>) nil_chk(elementEvaluations)) isEmpty]) {
            [((OrgOssPdfreporterEngineBaseVirtualElementsData *) nil_chk(virtualData)) setElementEvaluationsWithInt:((OrgOssPdfreporterEngineFillJRBaseFiller *) nil_chk(filler)).fillerId withOrgOssPdfreporterEngineFillJREvaluationTime:evaluationTime withJavaUtilMap:elementEvaluations];
            [((OrgOssPdfreporterEngineUtilLinkedMap *) nil_chk(actionsMap)) addWithId:nil withId:[[OrgOssPdfreporterEngineFillVirtualizedPageEvaluationAction alloc] initWithOrgOssPdfreporterEngineJRVirtualizable:object]];
          }
        }
      }
    }
  }
  if (((OrgOssPdfreporterEngineFillJRBaseFiller *) nil_chk(filler)).subfillers != nil) {
    {
      id<JavaUtilIterator> iter__ = [((id<JavaUtilCollection>) nil_chk([((OrgOssPdfreporterEngineFillJRBaseFiller *) nil_chk(filler)).subfillers values])) iterator];
      while ([((id<JavaUtilIterator>) nil_chk(iter__)) hasNext]) {
        OrgOssPdfreporterEngineFillJRBaseFiller *subfiller = [((id<JavaUtilIterator>) nil_chk(iter__)) next];
        [self setElementEvaluationsToPageWithOrgOssPdfreporterEngineFillJRBaseFiller:subfiller withOrgOssPdfreporterEngineJRVirtualizable:object];
      }
    }
  }
}

- (void)afterInternalizationWithOrgOssPdfreporterEngineJRVirtualizable:(id<OrgOssPdfreporterEngineJRVirtualizable>)object {
  OrgOssPdfreporterEngineFillJRVirtualizationContext *virtualizationContext = [((id<OrgOssPdfreporterEngineJRVirtualizable>) nil_chk(object)) getContext];
  [((OrgOssPdfreporterEngineFillJRVirtualizationContext *) nil_chk(virtualizationContext)) lock];
  @try {
    [self getElementEvaluationsFromPageWithOrgOssPdfreporterEngineFillJRBaseFiller:mainFiller_ withOrgOssPdfreporterEngineJRVirtualizable:object];
  }
  @finally {
    [((OrgOssPdfreporterEngineFillJRVirtualizationContext *) nil_chk(virtualizationContext)) unlock];
  }
}

- (void)getElementEvaluationsFromPageWithOrgOssPdfreporterEngineFillJRBaseFiller:(OrgOssPdfreporterEngineFillJRBaseFiller *)filler
                                      withOrgOssPdfreporterEngineJRVirtualizable:(id<OrgOssPdfreporterEngineJRVirtualizable>)object {
  OrgOssPdfreporterEngineBaseJRVirtualPrintPage *page = [((id<OrgOssPdfreporterEngineBaseVirtualizablePageElements>) object) getPage];
  OrgOssPdfreporterEngineFillPageKey *pageKey = [[OrgOssPdfreporterEngineFillPageKey alloc] initWithOrgOssPdfreporterEngineJRPrintPage:page];
  OrgOssPdfreporterEngineBaseVirtualElementsData *elementsData = [((id<OrgOssPdfreporterEngineJRVirtualizable>) nil_chk(object)) getVirtualData];
  {
    id<JavaUtilIterator> iter__ = [((id<JavaUtilSet>) nil_chk([((JavaUtilHashMap *) nil_chk(((OrgOssPdfreporterEngineFillJRBaseFiller *) nil_chk(filler)).boundElements)) entrySet])) iterator];
    while ([((id<JavaUtilIterator>) nil_chk(iter__)) hasNext]) {
      id<JavaUtilMap_Entry> boundMapEntry = [((id<JavaUtilIterator>) nil_chk(iter__)) next];
      OrgOssPdfreporterEngineFillJREvaluationTime *evaluationTime = [((id<JavaUtilMap_Entry>) nil_chk(boundMapEntry)) getKey];
      JavaUtilLinkedHashMap *map = [((id<JavaUtilMap_Entry>) nil_chk(boundMapEntry)) getValue];
      @synchronized (map) {
        OrgOssPdfreporterEngineUtilLinkedMap *actionsMap = [((JavaUtilLinkedHashMap *) nil_chk(map)) getWithId:pageKey];
        id<JavaUtilMap> elementEvaluations = [((OrgOssPdfreporterEngineBaseVirtualElementsData *) nil_chk(elementsData)) getElementEvaluationsWithInt:((OrgOssPdfreporterEngineFillJRBaseFiller *) nil_chk(filler)).fillerId withOrgOssPdfreporterEngineFillJREvaluationTime:evaluationTime];
        if (elementEvaluations != nil) {
          {
            id<JavaUtilIterator> iter__ = [((id<JavaUtilSet>) nil_chk([elementEvaluations entrySet])) iterator];
            while ([((id<JavaUtilIterator>) nil_chk(iter__)) hasNext]) {
              id<JavaUtilMap_Entry> entry = [((id<JavaUtilIterator>) nil_chk(iter__)) next];
              id<OrgOssPdfreporterEngineJRPrintElement> element = [((id<JavaUtilMap_Entry>) nil_chk(entry)) getKey];
              int fillElementId = [((JavaLangInteger *) nil_chk([((id<JavaUtilMap_Entry>) nil_chk(entry)) getValue])) intValue];
              OrgOssPdfreporterEngineFillJRFillElement *fillElement = [((id<JavaUtilMap>) nil_chk(((OrgOssPdfreporterEngineFillJRBaseFiller *) nil_chk(filler)).fillElements)) getWithId:[JavaLangInteger valueOfWithInt:fillElementId]];
              if (fillElement == nil) {
                @throw [[OrgOssPdfreporterEngineJRRuntimeException alloc] initWithNSString:[NSString stringWithFormat:@"Fill element with id %d not found", fillElementId]];
              }
              [((OrgOssPdfreporterEngineUtilLinkedMap *) nil_chk(actionsMap)) addFirstWithId:element withId:[[OrgOssPdfreporterEngineFillElementEvaluationAction alloc] initWithOrgOssPdfreporterEngineFillJRFillElement:fillElement withOrgOssPdfreporterEngineJRPrintElement:element]];
            }
          }
        }
      }
    }
  }
  if (((OrgOssPdfreporterEngineFillJRBaseFiller *) nil_chk(filler)).subfillers != nil) {
    {
      id<JavaUtilIterator> iter__ = [((id<JavaUtilCollection>) nil_chk([((OrgOssPdfreporterEngineFillJRBaseFiller *) nil_chk(filler)).subfillers values])) iterator];
      while ([((id<JavaUtilIterator>) nil_chk(iter__)) hasNext]) {
        OrgOssPdfreporterEngineFillJRBaseFiller *subfiller = [((id<JavaUtilIterator>) nil_chk(iter__)) next];
        [self getElementEvaluationsFromPageWithOrgOssPdfreporterEngineFillJRBaseFiller:subfiller withOrgOssPdfreporterEngineJRVirtualizable:object];
      }
    }
  }
}

- (void)copyAllPropertiesTo:(id)copy {
  [super copyAllPropertiesTo:copy];
  OrgOssPdfreporterEngineFillElementEvaluationVirtualizationListener *typedCopy = (OrgOssPdfreporterEngineFillElementEvaluationVirtualizationListener *) copy;
  typedCopy.mainFiller = mainFiller_;
}

@end
@implementation OrgOssPdfreporterEngineFillVirtualizedPageEvaluationAction

@synthesize object = object_;

- (id)initWithOrgOssPdfreporterEngineJRVirtualizable:(id<OrgOssPdfreporterEngineJRVirtualizable>)object {
  if ((self = [super init])) {
    self.object = object;
  }
  return self;
}

- (void)executeWithChar:(char)evaluation
withOrgOssPdfreporterEngineFillJREvaluationTime:(OrgOssPdfreporterEngineFillJREvaluationTime *)evaluationTime {
  [((id<OrgOssPdfreporterEngineJRVirtualizable>) nil_chk(object_)) ensureVirtualData];
}

- (void)copyAllPropertiesTo:(id)copy {
  [super copyAllPropertiesTo:copy];
  OrgOssPdfreporterEngineFillVirtualizedPageEvaluationAction *typedCopy = (OrgOssPdfreporterEngineFillVirtualizedPageEvaluationAction *) copy;
  typedCopy.object = object_;
}

@end
@implementation OrgOssPdfreporterEngineFillJRBaseFiller_$1

- (void)setStyleWithOrgOssPdfreporterEngineJRStyle:(id<OrgOssPdfreporterEngineJRStyle>)style {
}

- (void)setStyleNameReferenceWithNSString:(NSString *)name {
}

- (id)init {
  return [super init];
}

@end
@implementation OrgOssPdfreporterEngineFillJRBaseFiller_$2

@synthesize this$0 = this$0_;

- (void)setStyleWithOrgOssPdfreporterEngineJRStyle:(id<OrgOssPdfreporterEngineJRStyle>)style {
  if ([((id<OrgOssPdfreporterEngineJRStyle>) nil_chk(style)) isDefault]) {
    [this$0_ setDefaultStyleWithOrgOssPdfreporterEngineJRStyle:style];
  }
}

- (void)setStyleNameReferenceWithNSString:(NSString *)name {
}

- (id)initWithOrgOssPdfreporterEngineFillJRBaseFiller:(OrgOssPdfreporterEngineFillJRBaseFiller *)outer$ {
  if ((self = [super init])) {
    this$0_ = outer$;
  }
  return self;
}

- (void)copyAllPropertiesTo:(id)copy {
  [super copyAllPropertiesTo:copy];
  OrgOssPdfreporterEngineFillJRBaseFiller_$2 *typedCopy = (OrgOssPdfreporterEngineFillJRBaseFiller_$2 *) copy;
  typedCopy.this$0 = this$0_;
}

@end
@implementation OrgOssPdfreporterEngineFillElementEvaluationVirtualizationListener_$1

@synthesize val$actionsMap = val$actionsMap_;
@synthesize val$elementEvaluations = val$elementEvaluations_;

- (void)visitElementWithOrgOssPdfreporterEngineJRPrintElement:(id<OrgOssPdfreporterEngineJRPrintElement>)element
                                                       withId:(id)arg {
  OrgOssPdfreporterEngineFillElementEvaluationAction *action = (OrgOssPdfreporterEngineFillElementEvaluationAction *) [((OrgOssPdfreporterEngineUtilLinkedMap *) nil_chk(val$actionsMap_)) removeWithId:element];
  if (action != nil) {
    (void) [((id<JavaUtilMap>) nil_chk(val$elementEvaluations_)) putWithId:element withId:[JavaLangInteger valueOfWithInt:((OrgOssPdfreporterEngineFillJRFillElement *) nil_chk(action.element)).elementId]];
  }
}

- (id)initWithBOOL:(BOOL)arg$0
withOrgOssPdfreporterEngineUtilLinkedMap:(OrgOssPdfreporterEngineUtilLinkedMap *)capture$0
   withJavaUtilMap:(id<JavaUtilMap>)capture$1 {
  if ((self = [super initWithBOOL:arg$0])) {
    val$actionsMap_ = capture$0;
    val$elementEvaluations_ = capture$1;
  }
  return self;
}

- (void)copyAllPropertiesTo:(id)copy {
  [super copyAllPropertiesTo:copy];
  OrgOssPdfreporterEngineFillElementEvaluationVirtualizationListener_$1 *typedCopy = (OrgOssPdfreporterEngineFillElementEvaluationVirtualizationListener_$1 *) copy;
  typedCopy.val$actionsMap = val$actionsMap_;
  typedCopy.val$elementEvaluations = val$elementEvaluations_;
}

@end
