//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: pdfreporter-core/src/org/oss/pdfreporter/engine/fill/JRFillTextElement.java
//
//  Created by kendra on 9/27/13.
//

#include "IOSClass.h"
#include "IOSShortArray.h"
#include "java/lang/Boolean.h"
#include "java/lang/Integer.h"
#include "java/lang/UnsupportedOperationException.h"
#include "java/util/HashMap.h"
#include "java/util/Locale.h"
#include "java/util/Map.h"
#include "org/oss/pdfreporter/engine/JRCommonText.h"
#include "org/oss/pdfreporter/engine/JRElement.h"
#include "org/oss/pdfreporter/engine/JRException.h"
#include "org/oss/pdfreporter/engine/JRExpressionCollector.h"
#include "org/oss/pdfreporter/engine/JRFont.h"
#include "org/oss/pdfreporter/engine/JRLineBox.h"
#include "org/oss/pdfreporter/engine/JRParagraph.h"
#include "org/oss/pdfreporter/engine/JRPrintText.h"
#include "org/oss/pdfreporter/engine/JRPropertiesUtil.h"
#include "org/oss/pdfreporter/engine/JRRuntimeException.h"
#include "org/oss/pdfreporter/engine/JRStyle.h"
#include "org/oss/pdfreporter/engine/JRTextElement.h"
#include "org/oss/pdfreporter/engine/JRVisitor.h"
#include "org/oss/pdfreporter/engine/JasperReportsContext.h"
#include "org/oss/pdfreporter/engine/fill/JRBaseFiller.h"
#include "org/oss/pdfreporter/engine/fill/JRFillCloneFactory.h"
#include "org/oss/pdfreporter/engine/fill/JRFillElement.h"
#include "org/oss/pdfreporter/engine/fill/JRFillObjectFactory.h"
#include "org/oss/pdfreporter/engine/fill/JRFillTextElement.h"
#include "org/oss/pdfreporter/engine/fill/JRMeasuredText.h"
#include "org/oss/pdfreporter/engine/fill/JRTextMeasurer.h"
#include "org/oss/pdfreporter/engine/fonts/FontUtil.h"
#include "org/oss/pdfreporter/engine/type/HorizontalAlignEnum.h"
#include "org/oss/pdfreporter/engine/type/LineSpacingEnum.h"
#include "org/oss/pdfreporter/engine/type/ModeEnum.h"
#include "org/oss/pdfreporter/engine/type/RotationEnum.h"
#include "org/oss/pdfreporter/engine/type/RunDirectionEnum.h"
#include "org/oss/pdfreporter/engine/type/VerticalAlignEnum.h"
#include "org/oss/pdfreporter/engine/util/JRSingletonCache.h"
#include "org/oss/pdfreporter/engine/util/JRStringUtil.h"
#include "org/oss/pdfreporter/engine/util/JRStyleResolver.h"
#include "org/oss/pdfreporter/engine/util/JRStyledText.h"
#include "org/oss/pdfreporter/engine/util/JRStyledTextParser.h"
#include "org/oss/pdfreporter/engine/util/JRTextMeasurerUtil.h"
#include "org/oss/pdfreporter/engine/util/MarkupProcessor.h"
#include "org/oss/pdfreporter/engine/util/MarkupProcessorFactory.h"
#include "org/oss/pdfreporter/font/text/TextAttribute.h"
#include "org/oss/pdfreporter/geometry/IColor.h"

@implementation OrgOssPdfreporterEngineFillJRFillTextElement

static NSString * OrgOssPdfreporterEngineFillJRFillTextElement_PROPERTY_CONSUME_SPACE_ON_OVERFLOW_ = @"net.sf.jasperreports.consume.space.on.overflow";
static OrgOssPdfreporterEngineUtilJRSingletonCache * OrgOssPdfreporterEngineFillJRFillTextElement_markupProcessorFactoryCache_;
static id<JavaUtilMap> OrgOssPdfreporterEngineFillJRFillTextElement_markupProcessors_;

@synthesize isLeftToRight = isLeftToRight_;
@synthesize textMeasurer = textMeasurer_;
@synthesize lineSpacingFactor = lineSpacingFactor_;
@synthesize leadingOffset = leadingOffset_;
@synthesize textHeight = textHeight_;
@synthesize elementStretchHeightDelta = elementStretchHeightDelta_;
@synthesize textStart = textStart_;
@synthesize textEnd = textEnd_;
@synthesize lineBreakOffsets = lineBreakOffsets_;
@synthesize textTruncateSuffix = textTruncateSuffix_;
@synthesize rawText = rawText_;
@synthesize styledText = styledText_;
@synthesize styledTextAttributesMap = styledTextAttributesMap_;
@synthesize initLineBox = initLineBox_;
@synthesize initParagraph = initParagraph_;
@synthesize consumeSpaceOnOverflow = consumeSpaceOnOverflow_;
@synthesize lineBox = lineBox_;
@synthesize paragraph = paragraph_;

+ (NSString *)PROPERTY_CONSUME_SPACE_ON_OVERFLOW {
  return OrgOssPdfreporterEngineFillJRFillTextElement_PROPERTY_CONSUME_SPACE_ON_OVERFLOW_;
}

+ (OrgOssPdfreporterEngineUtilJRSingletonCache *)markupProcessorFactoryCache {
  return OrgOssPdfreporterEngineFillJRFillTextElement_markupProcessorFactoryCache_;
}

+ (id<JavaUtilMap>)markupProcessors {
  return OrgOssPdfreporterEngineFillJRFillTextElement_markupProcessors_;
}

- (id)initWithOrgOssPdfreporterEngineFillJRBaseFiller:(OrgOssPdfreporterEngineFillJRBaseFiller *)filler
             withOrgOssPdfreporterEngineJRTextElement:(id<OrgOssPdfreporterEngineJRTextElement>)textElement
   withOrgOssPdfreporterEngineFillJRFillObjectFactory:(OrgOssPdfreporterEngineFillJRFillObjectFactory *)factory {
  if ((self = [super initWithOrgOssPdfreporterEngineFillJRBaseFiller:filler withOrgOssPdfreporterEngineJRElement:textElement withOrgOssPdfreporterEngineFillJRFillObjectFactory:factory])) {
    isLeftToRight_ = YES;
    styledTextAttributesMap_ = [[JavaUtilHashMap alloc] init];
    initLineBox_ = [((id<OrgOssPdfreporterEngineJRLineBox>) nil_chk([((id<OrgOssPdfreporterEngineJRTextElement>) nil_chk(textElement)) getLineBox])) cloneWithOrgOssPdfreporterEngineJRBoxContainer:self];
    initParagraph_ = [((id<OrgOssPdfreporterEngineJRParagraph>) nil_chk([((id<OrgOssPdfreporterEngineJRTextElement>) nil_chk(textElement)) getParagraph])) cloneWithOrgOssPdfreporterEngineJRParagraphContainer:self];
    self.consumeSpaceOnOverflow = [((OrgOssPdfreporterEngineJRPropertiesUtil *) nil_chk([OrgOssPdfreporterEngineJRPropertiesUtil getInstanceWithOrgOssPdfreporterEngineJasperReportsContext:[((OrgOssPdfreporterEngineFillJRBaseFiller *) nil_chk(filler)) getJasperReportsContext]])) getBooleanPropertyWithOrgOssPdfreporterEngineJRPropertiesHolder:textElement withNSString:OrgOssPdfreporterEngineFillJRFillTextElement_PROPERTY_CONSUME_SPACE_ON_OVERFLOW_ withBOOL:YES];
  }
  return self;
}

- (id)initWithOrgOssPdfreporterEngineFillJRFillTextElement:(OrgOssPdfreporterEngineFillJRFillTextElement *)textElement
         withOrgOssPdfreporterEngineFillJRFillCloneFactory:(OrgOssPdfreporterEngineFillJRFillCloneFactory *)factory {
  if ((self = [super initWithOrgOssPdfreporterEngineFillJRFillElement:textElement withOrgOssPdfreporterEngineFillJRFillCloneFactory:factory])) {
    isLeftToRight_ = YES;
    styledTextAttributesMap_ = [[JavaUtilHashMap alloc] init];
    initLineBox_ = [((id<OrgOssPdfreporterEngineJRLineBox>) nil_chk([((OrgOssPdfreporterEngineFillJRFillTextElement *) nil_chk(textElement)) getLineBox])) cloneWithOrgOssPdfreporterEngineJRBoxContainer:self];
    initParagraph_ = [((id<OrgOssPdfreporterEngineJRParagraph>) nil_chk([((OrgOssPdfreporterEngineFillJRFillTextElement *) nil_chk(textElement)) getParagraph])) cloneWithOrgOssPdfreporterEngineJRParagraphContainer:self];
    self.consumeSpaceOnOverflow = ((OrgOssPdfreporterEngineFillJRFillTextElement *) nil_chk(textElement)).consumeSpaceOnOverflow;
  }
  return self;
}

- (void)createTextMeasurer {
  textMeasurer_ = [((OrgOssPdfreporterEngineUtilJRTextMeasurerUtil *) nil_chk([OrgOssPdfreporterEngineUtilJRTextMeasurerUtil getInstanceWithOrgOssPdfreporterEngineJasperReportsContext:[((OrgOssPdfreporterEngineFillJRBaseFiller *) nil_chk(filler_)) getJasperReportsContext]])) createTextMeasurerWithOrgOssPdfreporterEngineJRCommonText:self];
}

- (void)ensureTextMeasurer {
  if (textMeasurer_ == nil) {
    [self createTextMeasurer];
  }
}

- (void)evaluateStyleWithChar:(char)evaluation {
  [super evaluateStyleWithChar:evaluation];
  lineBox_ = nil;
  paragraph_ = nil;
  if (providerStyle_ != nil) {
    lineBox_ = [((id<OrgOssPdfreporterEngineJRLineBox>) nil_chk(initLineBox_)) cloneWithOrgOssPdfreporterEngineJRBoxContainer:self];
    paragraph_ = [((id<OrgOssPdfreporterEngineJRParagraph>) nil_chk(initParagraph_)) cloneWithOrgOssPdfreporterEngineJRParagraphContainer:self];
    [OrgOssPdfreporterEngineUtilJRStyleResolver appendBoxWithOrgOssPdfreporterEngineJRLineBox:lineBox_ withOrgOssPdfreporterEngineJRLineBox:[providerStyle_ getLineBox]];
    [OrgOssPdfreporterEngineUtilJRStyleResolver appendParagraphWithOrgOssPdfreporterEngineJRParagraph:paragraph_ withOrgOssPdfreporterEngineJRParagraph:[providerStyle_ getParagraph]];
  }
}

- (OrgOssPdfreporterEngineTypeModeEnumEnum *)getModeValue {
  return [OrgOssPdfreporterEngineUtilJRStyleResolver getModeWithOrgOssPdfreporterEngineJRCommonElement:self withOrgOssPdfreporterEngineTypeModeEnumEnum:[OrgOssPdfreporterEngineTypeModeEnumEnum TRANSPARENT]];
}

- (OrgOssPdfreporterEngineTypeHorizontalAlignEnumEnum *)getHorizontalAlignmentValue {
  return [OrgOssPdfreporterEngineUtilJRStyleResolver getHorizontalAlignmentValueWithOrgOssPdfreporterEngineJRAlignment:self];
}

- (OrgOssPdfreporterEngineTypeHorizontalAlignEnumEnum *)getOwnHorizontalAlignmentValue {
  return providerStyle_ == nil || [((id<OrgOssPdfreporterEngineJRStyle>) nil_chk(providerStyle_)) getOwnHorizontalAlignmentValue] == nil ? [((id<OrgOssPdfreporterEngineJRTextElement>) self.parent) getOwnHorizontalAlignmentValue] : [((id<OrgOssPdfreporterEngineJRStyle>) nil_chk(providerStyle_)) getOwnHorizontalAlignmentValue];
}

- (void)setHorizontalAlignmentWithOrgOssPdfreporterEngineTypeHorizontalAlignEnumEnum:(OrgOssPdfreporterEngineTypeHorizontalAlignEnumEnum *)horizontalAlignment {
  @throw [[JavaLangUnsupportedOperationException alloc] init];
}

- (OrgOssPdfreporterEngineTypeVerticalAlignEnumEnum *)getVerticalAlignmentValue {
  return [OrgOssPdfreporterEngineUtilJRStyleResolver getVerticalAlignmentValueWithOrgOssPdfreporterEngineJRAlignment:self];
}

- (OrgOssPdfreporterEngineTypeVerticalAlignEnumEnum *)getOwnVerticalAlignmentValue {
  return providerStyle_ == nil || [((id<OrgOssPdfreporterEngineJRStyle>) nil_chk(providerStyle_)) getOwnVerticalAlignmentValue] == nil ? [((id<OrgOssPdfreporterEngineJRTextElement>) self.parent) getOwnVerticalAlignmentValue] : [((id<OrgOssPdfreporterEngineJRStyle>) nil_chk(providerStyle_)) getOwnVerticalAlignmentValue];
}

- (void)setVerticalAlignmentWithOrgOssPdfreporterEngineTypeVerticalAlignEnumEnum:(OrgOssPdfreporterEngineTypeVerticalAlignEnumEnum *)verticalAlignment {
  @throw [[JavaLangUnsupportedOperationException alloc] init];
}

- (OrgOssPdfreporterEngineTypeRotationEnumEnum *)getRotationValue {
  return [OrgOssPdfreporterEngineUtilJRStyleResolver getRotationValueWithOrgOssPdfreporterEngineJRCommonText:self];
}

- (OrgOssPdfreporterEngineTypeRotationEnumEnum *)getOwnRotationValue {
  return providerStyle_ == nil || [((id<OrgOssPdfreporterEngineJRStyle>) nil_chk(providerStyle_)) getOwnRotationValue] == nil ? [((id<OrgOssPdfreporterEngineJRTextElement>) self.parent) getOwnRotationValue] : [((id<OrgOssPdfreporterEngineJRStyle>) nil_chk(providerStyle_)) getOwnRotationValue];
}

- (void)setRotationWithOrgOssPdfreporterEngineTypeRotationEnumEnum:(OrgOssPdfreporterEngineTypeRotationEnumEnum *)rotation {
  @throw [[JavaLangUnsupportedOperationException alloc] init];
}

- (OrgOssPdfreporterEngineTypeLineSpacingEnumEnum *)getLineSpacingValue {
  return [((id<OrgOssPdfreporterEngineJRParagraph>) nil_chk([self getParagraph])) getLineSpacing];
}

- (OrgOssPdfreporterEngineTypeLineSpacingEnumEnum *)getOwnLineSpacingValue {
  return [((id<OrgOssPdfreporterEngineJRParagraph>) nil_chk([self getParagraph])) getOwnLineSpacing];
}

- (void)setLineSpacingWithOrgOssPdfreporterEngineTypeLineSpacingEnumEnum:(OrgOssPdfreporterEngineTypeLineSpacingEnumEnum *)lineSpacing {
  @throw [[JavaLangUnsupportedOperationException alloc] init];
}

- (NSString *)getMarkup {
  return [OrgOssPdfreporterEngineUtilJRStyleResolver getMarkupWithOrgOssPdfreporterEngineJRCommonText:self];
}

- (NSString *)getOwnMarkup {
  return providerStyle_ == nil || [((id<OrgOssPdfreporterEngineJRStyle>) nil_chk(providerStyle_)) getOwnMarkup] == nil ? [((id<OrgOssPdfreporterEngineJRTextElement>) parent_) getOwnMarkup] : [((id<OrgOssPdfreporterEngineJRStyle>) nil_chk(providerStyle_)) getOwnMarkup];
}

- (void)setMarkupWithNSString:(NSString *)markup {
  @throw [[JavaLangUnsupportedOperationException alloc] init];
}

- (id<OrgOssPdfreporterEngineJRLineBox>)getLineBox {
  return lineBox_ == nil ? initLineBox_ : lineBox_;
}

- (id<OrgOssPdfreporterEngineJRParagraph>)getParagraph {
  return paragraph_ == nil ? initParagraph_ : paragraph_;
}

- (id<OrgOssPdfreporterEngineJRFont>)getFont {
  return self;
}

- (id<JavaUtilMap>)getStyledTextAttributes {
  id<OrgOssPdfreporterEngineJRStyle> style = [self getStyle];
  id<JavaUtilMap> styledTextAttributes = [((id<JavaUtilMap>) nil_chk(styledTextAttributesMap_)) getWithId:style];
  if (styledTextAttributes == nil) {
    styledTextAttributes = [[JavaUtilHashMap alloc] init];
    (void) [((OrgOssPdfreporterEngineFontsFontUtil *) nil_chk([OrgOssPdfreporterEngineFontsFontUtil getInstanceWithOrgOssPdfreporterEngineJasperReportsContext:[((OrgOssPdfreporterEngineFillJRBaseFiller *) nil_chk(filler_)) getJasperReportsContext]])) getAttributesWithoutAwtFontWithJavaUtilMap:styledTextAttributes withOrgOssPdfreporterEngineJRFont:self];
    (void) [styledTextAttributes putWithId:[OrgOssPdfreporterFontTextTextAttribute FOREGROUND] withId:[self getForecolor]];
    if ([self getModeValue] == [OrgOssPdfreporterEngineTypeModeEnumEnum OPAQUE]) {
      (void) [styledTextAttributes putWithId:[OrgOssPdfreporterFontTextTextAttribute BACKGROUND] withId:[self getBackcolor]];
    }
    (void) [((id<JavaUtilMap>) nil_chk(styledTextAttributesMap_)) putWithId:style withId:styledTextAttributes];
  }
  return styledTextAttributes;
}

- (float)getLineSpacingFactor {
  return lineSpacingFactor_;
}

- (void)setLineSpacingFactorWithFloat:(float)lineSpacingFactor {
  self.lineSpacingFactor = lineSpacingFactor;
}

- (float)getLeadingOffset {
  return leadingOffset_;
}

- (void)setLeadingOffsetWithFloat:(float)leadingOffset {
  self.leadingOffset = leadingOffset;
}

- (OrgOssPdfreporterEngineTypeRunDirectionEnumEnum *)getRunDirectionValue {
  return isLeftToRight_ ? [OrgOssPdfreporterEngineTypeRunDirectionEnumEnum LTR] : [OrgOssPdfreporterEngineTypeRunDirectionEnumEnum RTL];
}

- (float)getTextHeight {
  return textHeight_;
}

- (void)setTextHeightWithFloat:(float)textHeight {
  self.textHeight = textHeight;
}

- (int)getTextStart {
  return textStart_;
}

- (void)setTextStartWithInt:(int)textStart {
  self.textStart = textStart;
}

- (int)getTextEnd {
  return textEnd_;
}

- (void)setTextEndWithInt:(int)textEnd {
  self.textEnd = textEnd;
}

- (IOSShortArray *)getLineBreakOffsets {
  return lineBreakOffsets_;
}

- (void)setLineBreakOffsetsWithShortArray:(IOSShortArray *)lineBreakOffsets {
  self.lineBreakOffsets = lineBreakOffsets;
}

- (void)resetTextChunk {
  textStart_ = 0;
  textEnd_ = 0;
  textTruncateSuffix_ = nil;
  lineBreakOffsets_ = nil;
  elementStretchHeightDelta_ = 0;
}

- (NSString *)getRawText {
  return rawText_;
}

- (void)setRawTextWithNSString:(NSString *)rawText {
  self.rawText = rawText;
  styledText_ = nil;
}

- (void)reset {
  [super reset];
  isLeftToRight_ = YES;
  lineSpacingFactor_ = 0;
  leadingOffset_ = 0;
  textHeight_ = 0;
  elementStretchHeightDelta_ = 0;
}

- (void)rewind {
  [self resetTextChunk];
}

- (OrgOssPdfreporterEngineUtilJRStyledText *)getStyledText {
  if (styledText_ == nil) {
    NSString *text = [self getRawText];
    if (text != nil) {
      styledText_ = [((OrgOssPdfreporterEngineUtilJRStyledTextParser *) nil_chk([((OrgOssPdfreporterEngineFillJRBaseFiller *) nil_chk(filler_)) getStyledTextParser])) getStyledTextWithJavaUtilMap:[self getStyledTextAttributes] withNSString:text withBOOL:![((NSString *) nil_chk([OrgOssPdfreporterEngineJRCommonText MARKUP_NONE])) isEqual:[self getMarkup]] withJavaUtilLocale:[((OrgOssPdfreporterEngineFillJRBaseFiller *) nil_chk(filler_)) getLocale]];
    }
  }
  return styledText_;
}

- (NSString *)getText {
  OrgOssPdfreporterEngineUtilJRStyledText *tmpStyledText = [self getStyledText];
  if (tmpStyledText == nil) {
    return nil;
  }
  return [((OrgOssPdfreporterEngineUtilJRStyledText *) nil_chk(tmpStyledText)) getText];
}

- (void)chopTextElementWithInt:(int)availableStretchHeight {
  [self ensureTextMeasurer];
  OrgOssPdfreporterEngineUtilJRStyledText *tmpStyledText = [self getStyledText];
  if (tmpStyledText == nil) {
    return;
  }
  if ([self getTextEnd] == [((NSString *) nil_chk([((OrgOssPdfreporterEngineUtilJRStyledText *) nil_chk(tmpStyledText)) getText])) length]) {
    return;
  }
  BOOL canOverflow = [self canOverflow];
  id<OrgOssPdfreporterEngineFillJRMeasuredText> measuredText = [((id<OrgOssPdfreporterEngineFillJRTextMeasurer>) nil_chk(textMeasurer_)) measureWithOrgOssPdfreporterEngineUtilJRStyledText:tmpStyledText withInt:[self getTextEnd] withInt:availableStretchHeight withBOOL:canOverflow];
  isLeftToRight_ = [((id<OrgOssPdfreporterEngineFillJRMeasuredText>) nil_chk(measuredText)) isLeftToRight];
  [self setTextHeightWithFloat:[((id<OrgOssPdfreporterEngineFillJRMeasuredText>) nil_chk(measuredText)) getTextHeight]];
  elementStretchHeightDelta_ = 0;
  if ([((OrgOssPdfreporterEngineTypeRotationEnumEnum *) nil_chk([self getRotationValue])) isEqual:[OrgOssPdfreporterEngineTypeRotationEnumEnum NONE]]) {
    int elementTextHeight = (int) [self getTextHeight] + [((JavaLangInteger *) nil_chk([((id<OrgOssPdfreporterEngineJRLineBox>) nil_chk([self getLineBox])) getTopPadding])) intValue] + [((JavaLangInteger *) nil_chk([((id<OrgOssPdfreporterEngineJRLineBox>) nil_chk([self getLineBox])) getBottomPadding])) intValue];
    BOOL textEnded = [((id<OrgOssPdfreporterEngineFillJRMeasuredText>) nil_chk(measuredText)) getTextOffset] >= [((NSString *) nil_chk([((OrgOssPdfreporterEngineUtilJRStyledText *) nil_chk(tmpStyledText)) getText])) length];
    if (textEnded || !canOverflow || !consumeSpaceOnOverflow_) {
      [self setStretchHeightWithInt:elementTextHeight];
    }
    else {
      int stretchHeight = [self getHeight] + availableStretchHeight;
      [self setStretchHeightWithInt:stretchHeight];
      int textStretchHeight = elementTextHeight > [self getHeight] ? elementTextHeight : [self getHeight];
      elementStretchHeightDelta_ = [self getStretchHeight] - textStretchHeight;
    }
  }
  else {
    [self setStretchHeightWithInt:[self getHeight]];
  }
  [self setTextStartWithInt:[self getTextEnd]];
  [self setTextEndWithInt:[((id<OrgOssPdfreporterEngineFillJRMeasuredText>) nil_chk(measuredText)) getTextOffset]];
  [self setLineBreakOffsetsWithShortArray:[((id<OrgOssPdfreporterEngineFillJRMeasuredText>) nil_chk(measuredText)) getLineBreakOffsets]];
  [self setTextTruncateSuffixWithNSString:[((id<OrgOssPdfreporterEngineFillJRMeasuredText>) nil_chk(measuredText)) getTextSuffix]];
  [self setLineSpacingFactorWithFloat:[((id<OrgOssPdfreporterEngineFillJRMeasuredText>) nil_chk(measuredText)) getLineSpacingFactor]];
  [self setLeadingOffsetWithFloat:[((id<OrgOssPdfreporterEngineFillJRMeasuredText>) nil_chk(measuredText)) getLeadingOffset]];
}

- (int)getPrintElementHeight {
  return [self getStretchHeight] - elementStretchHeightDelta_;
}

- (BOOL)canOverflow {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}

- (NSString *)getFontName {
  return [OrgOssPdfreporterEngineUtilJRStyleResolver getFontNameWithOrgOssPdfreporterEngineJRFont:self];
}

- (NSString *)getOwnFontName {
  return providerStyle_ == nil || [((id<OrgOssPdfreporterEngineJRStyle>) nil_chk(providerStyle_)) getOwnFontName] == nil ? [((id<OrgOssPdfreporterEngineJRFont>) parent_) getOwnFontName] : [((id<OrgOssPdfreporterEngineJRStyle>) nil_chk(providerStyle_)) getOwnFontName];
}

- (void)setFontNameWithNSString:(NSString *)fontName {
  @throw [[JavaLangUnsupportedOperationException alloc] init];
}

- (BOOL)isBold {
  return [OrgOssPdfreporterEngineUtilJRStyleResolver isBoldWithOrgOssPdfreporterEngineJRFont:self];
}

- (JavaLangBoolean *)isOwnBold {
  return providerStyle_ == nil || [((id<OrgOssPdfreporterEngineJRStyle>) nil_chk(providerStyle_)) isOwnBold] == nil ? [((id<OrgOssPdfreporterEngineJRFont>) parent_) isOwnBold] : [((id<OrgOssPdfreporterEngineJRStyle>) nil_chk(providerStyle_)) isOwnBold];
}

- (void)setBoldWithBOOL:(BOOL)isBold {
  @throw [[JavaLangUnsupportedOperationException alloc] init];
}

- (void)setBoldWithJavaLangBoolean:(JavaLangBoolean *)isBold {
  @throw [[JavaLangUnsupportedOperationException alloc] init];
}

- (BOOL)isItalic {
  return [OrgOssPdfreporterEngineUtilJRStyleResolver isItalicWithOrgOssPdfreporterEngineJRFont:self];
}

- (JavaLangBoolean *)isOwnItalic {
  return providerStyle_ == nil || [((id<OrgOssPdfreporterEngineJRStyle>) nil_chk(providerStyle_)) isOwnItalic] == nil ? [((id<OrgOssPdfreporterEngineJRFont>) parent_) isOwnItalic] : [((id<OrgOssPdfreporterEngineJRStyle>) nil_chk(providerStyle_)) isOwnItalic];
}

- (void)setItalicWithBOOL:(BOOL)isItalic {
  @throw [[JavaLangUnsupportedOperationException alloc] init];
}

- (void)setItalicWithJavaLangBoolean:(JavaLangBoolean *)isItalic {
  @throw [[JavaLangUnsupportedOperationException alloc] init];
}

- (BOOL)isUnderline {
  return [OrgOssPdfreporterEngineUtilJRStyleResolver isUnderlineWithOrgOssPdfreporterEngineJRFont:self];
}

- (JavaLangBoolean *)isOwnUnderline {
  return providerStyle_ == nil || [((id<OrgOssPdfreporterEngineJRStyle>) nil_chk(providerStyle_)) isOwnUnderline] == nil ? [((id<OrgOssPdfreporterEngineJRFont>) parent_) isOwnUnderline] : [((id<OrgOssPdfreporterEngineJRStyle>) nil_chk(providerStyle_)) isOwnUnderline];
}

- (void)setUnderlineWithBOOL:(BOOL)isUnderline {
  @throw [[JavaLangUnsupportedOperationException alloc] init];
}

- (void)setUnderlineWithJavaLangBoolean:(JavaLangBoolean *)isUnderline {
  @throw [[JavaLangUnsupportedOperationException alloc] init];
}

- (BOOL)isStrikeThrough {
  return [OrgOssPdfreporterEngineUtilJRStyleResolver isStrikeThroughWithOrgOssPdfreporterEngineJRFont:self];
}

- (JavaLangBoolean *)isOwnStrikeThrough {
  return providerStyle_ == nil || [((id<OrgOssPdfreporterEngineJRStyle>) nil_chk(providerStyle_)) isOwnStrikeThrough] == nil ? [((id<OrgOssPdfreporterEngineJRFont>) parent_) isOwnStrikeThrough] : [((id<OrgOssPdfreporterEngineJRStyle>) nil_chk(providerStyle_)) isOwnStrikeThrough];
}

- (void)setStrikeThroughWithBOOL:(BOOL)isStrikeThrough {
  @throw [[JavaLangUnsupportedOperationException alloc] init];
}

- (void)setStrikeThroughWithJavaLangBoolean:(JavaLangBoolean *)isStrikeThrough {
  @throw [[JavaLangUnsupportedOperationException alloc] init];
}

- (int)getFontSize {
  return [OrgOssPdfreporterEngineUtilJRStyleResolver getFontSizeWithOrgOssPdfreporterEngineJRFont:self];
}

- (JavaLangInteger *)getOwnFontSize {
  return providerStyle_ == nil || [((id<OrgOssPdfreporterEngineJRStyle>) nil_chk(providerStyle_)) getOwnFontSize] == nil ? [((id<OrgOssPdfreporterEngineJRFont>) parent_) getOwnFontSize] : [((id<OrgOssPdfreporterEngineJRStyle>) nil_chk(providerStyle_)) getOwnFontSize];
}

- (void)setFontSizeWithInt:(int)size {
  @throw [[JavaLangUnsupportedOperationException alloc] init];
}

- (void)setFontSizeWithJavaLangInteger:(JavaLangInteger *)size {
  @throw [[JavaLangUnsupportedOperationException alloc] init];
}

- (NSString *)getPdfFontName {
  return [OrgOssPdfreporterEngineUtilJRStyleResolver getPdfFontNameWithOrgOssPdfreporterEngineJRFont:self];
}

- (NSString *)getOwnPdfFontName {
  return providerStyle_ == nil || [((id<OrgOssPdfreporterEngineJRStyle>) nil_chk(providerStyle_)) getOwnPdfFontName] == nil ? [((id<OrgOssPdfreporterEngineJRFont>) parent_) getOwnPdfFontName] : [((id<OrgOssPdfreporterEngineJRStyle>) nil_chk(providerStyle_)) getOwnPdfFontName];
}

- (void)setPdfFontNameWithNSString:(NSString *)pdfFontName {
  @throw [[JavaLangUnsupportedOperationException alloc] init];
}

- (NSString *)getPdfEncoding {
  return [OrgOssPdfreporterEngineUtilJRStyleResolver getPdfEncodingWithOrgOssPdfreporterEngineJRFont:self];
}

- (NSString *)getOwnPdfEncoding {
  return providerStyle_ == nil || [((id<OrgOssPdfreporterEngineJRStyle>) nil_chk(providerStyle_)) getOwnPdfEncoding] == nil ? [((id<OrgOssPdfreporterEngineJRFont>) parent_) getOwnPdfEncoding] : [((id<OrgOssPdfreporterEngineJRStyle>) nil_chk(providerStyle_)) getOwnPdfEncoding];
}

- (void)setPdfEncodingWithNSString:(NSString *)pdfEncoding {
  @throw [[JavaLangUnsupportedOperationException alloc] init];
}

- (BOOL)isPdfEmbedded {
  return [OrgOssPdfreporterEngineUtilJRStyleResolver isPdfEmbeddedWithOrgOssPdfreporterEngineJRFont:self];
}

- (JavaLangBoolean *)isOwnPdfEmbedded {
  return providerStyle_ == nil || [((id<OrgOssPdfreporterEngineJRStyle>) nil_chk(providerStyle_)) isOwnPdfEmbedded] == nil ? [((id<OrgOssPdfreporterEngineJRFont>) parent_) isOwnPdfEmbedded] : [((id<OrgOssPdfreporterEngineJRStyle>) nil_chk(providerStyle_)) isOwnPdfEmbedded];
}

- (void)setPdfEmbeddedWithBOOL:(BOOL)isPdfEmbedded {
  @throw [[JavaLangUnsupportedOperationException alloc] init];
}

- (void)setPdfEmbeddedWithJavaLangBoolean:(JavaLangBoolean *)isPdfEmbedded {
  @throw [[JavaLangUnsupportedOperationException alloc] init];
}

- (id<OrgOssPdfreporterGeometryIColor>)getDefaultLineColor {
  return [self getForecolor];
}

- (void)setHeightWithInt:(int)height {
  [super setHeightWithInt:height];
  [self createTextMeasurer];
}

- (void)setWidthWithInt:(int)width {
  [super setWidthWithInt:width];
  [self createTextMeasurer];
}

- (NSString *)processMarkupTextWithNSString:(NSString *)text {
  text = [OrgOssPdfreporterEngineUtilJRStringUtil replaceCRwithLFWithNSString:text];
  if (text != nil) {
    NSString *markup = [self getMarkup];
    if (![((NSString *) nil_chk([OrgOssPdfreporterEngineJRCommonText MARKUP_NONE])) isEqual:markup] && ![((NSString *) nil_chk([OrgOssPdfreporterEngineJRCommonText MARKUP_STYLED_TEXT])) isEqual:markup]) {
      text = [((id<OrgOssPdfreporterEngineUtilMarkupProcessor>) nil_chk([self getMarkupProcessorWithNSString:markup])) convertWithNSString:text];
    }
  }
  return text;
}

- (id<OrgOssPdfreporterEngineUtilMarkupProcessor>)getMarkupProcessorWithNSString:(NSString *)markup {
  id<OrgOssPdfreporterEngineUtilMarkupProcessor> markupProcessor = [((id<JavaUtilMap>) nil_chk(OrgOssPdfreporterEngineFillJRFillTextElement_markupProcessors_)) getWithId:markup];
  if (markupProcessor == nil) {
    NSString *factoryClass = [((OrgOssPdfreporterEngineJRPropertiesUtil *) nil_chk([((OrgOssPdfreporterEngineFillJRBaseFiller *) nil_chk(filler_)) getPropertiesUtil])) getPropertyWithNSString:[NSString stringWithFormat:@"net.sf.jasperreports.markup.processor.factory.%@", markup]];
    if (factoryClass == nil) {
      @throw [[OrgOssPdfreporterEngineJRRuntimeException alloc] initWithNSString:[NSString stringWithFormat:@"No markup processor factory specifyed for '%@' markup.", markup]];
    }
    id<OrgOssPdfreporterEngineUtilMarkupProcessorFactory> factory = nil;
    @try {
      factory = [((OrgOssPdfreporterEngineUtilJRSingletonCache *) nil_chk(OrgOssPdfreporterEngineFillJRFillTextElement_markupProcessorFactoryCache_)) getCachedInstanceWithNSString:factoryClass];
    }
    @catch (OrgOssPdfreporterEngineJRException *e) {
      @throw [[OrgOssPdfreporterEngineJRRuntimeException alloc] initWithJavaLangThrowable:e];
    }
    markupProcessor = [((id<OrgOssPdfreporterEngineUtilMarkupProcessorFactory>) nil_chk(factory)) createMarkupProcessor];
    (void) [((id<JavaUtilMap>) nil_chk(OrgOssPdfreporterEngineFillJRFillTextElement_markupProcessors_)) putWithId:markup withId:markupProcessor];
  }
  return markupProcessor;
}

- (void)setPrintTextWithOrgOssPdfreporterEngineJRPrintText:(id<OrgOssPdfreporterEngineJRPrintText>)printText {
  int startIndex = [self getTextStart];
  int endIndex = [self getTextEnd];
  OrgOssPdfreporterEngineUtilJRStyledText *fullStyledText = [self getStyledText];
  NSString *fullText = [((OrgOssPdfreporterEngineUtilJRStyledText *) nil_chk(fullStyledText)) getText];
  BOOL keepAllText = ![self canOverflow] && [((OrgOssPdfreporterEngineJRPropertiesUtil *) nil_chk([((OrgOssPdfreporterEngineFillJRBaseFiller *) nil_chk(filler_)) getPropertiesUtil])) getBooleanPropertyWithOrgOssPdfreporterEngineJRPropertiesHolder:self withNSString:[OrgOssPdfreporterEngineJRTextElement PROPERTY_PRINT_KEEP_FULL_TEXT] withBOOL:NO];
  if (keepAllText) {
    if (startIndex != 0) {
      @throw [[OrgOssPdfreporterEngineJRRuntimeException alloc] initWithNSString:@"Text start index != 0 on keep all text."];
    }
    if (![((NSString *) nil_chk([OrgOssPdfreporterEngineJRCommonText MARKUP_NONE])) isEqual:[self getMarkup]]) {
      NSString *styledText = [((OrgOssPdfreporterEngineUtilJRStyledTextParser *) nil_chk([((OrgOssPdfreporterEngineFillJRBaseFiller *) nil_chk(filler_)) getStyledTextParser])) writeWithOrgOssPdfreporterEngineUtilJRStyledText:fullStyledText];
      [((id<OrgOssPdfreporterEngineJRPrintText>) nil_chk(printText)) setTextWithNSString:styledText];
    }
    else {
      [((id<OrgOssPdfreporterEngineJRPrintText>) nil_chk(printText)) setTextWithNSString:fullText];
    }
    if (endIndex < [((NSString *) nil_chk(fullText)) length]) {
      [((id<OrgOssPdfreporterEngineJRPrintText>) nil_chk(printText)) setTextTruncateIndexWithJavaLangInteger:[JavaLangInteger valueOfWithInt:endIndex]];
    }
  }
  else {
    NSString *printedText;
    if (![((NSString *) nil_chk([OrgOssPdfreporterEngineJRCommonText MARKUP_NONE])) isEqual:[self getMarkup]]) {
      printedText = [((OrgOssPdfreporterEngineUtilJRStyledTextParser *) nil_chk([((OrgOssPdfreporterEngineFillJRBaseFiller *) nil_chk(filler_)) getStyledTextParser])) writeWithOrgOssPdfreporterEngineUtilJRStyledText:fullStyledText withInt:startIndex withInt:endIndex];
    }
    else {
      printedText = [((NSString *) nil_chk(fullText)) substring:startIndex endIndex:endIndex];
    }
    [((id<OrgOssPdfreporterEngineJRPrintText>) nil_chk(printText)) setTextWithNSString:printedText];
  }
  [((id<OrgOssPdfreporterEngineJRPrintText>) nil_chk(printText)) setTextTruncateSuffixWithNSString:[self getTextTruncateSuffix]];
  [((id<OrgOssPdfreporterEngineJRPrintText>) nil_chk(printText)) setLineBreakOffsetsWithShortArray:[self getLineBreakOffsets]];
}

- (NSString *)getTextTruncateSuffix {
  return textTruncateSuffix_;
}

- (void)setTextTruncateSuffixWithNSString:(NSString *)textTruncateSuffix {
  self.textTruncateSuffix = textTruncateSuffix;
}

- (void)collectExpressionsWithOrgOssPdfreporterEngineJRExpressionCollector:(OrgOssPdfreporterEngineJRExpressionCollector *)param0 {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
}

- (void)visitWithOrgOssPdfreporterEngineJRVisitor:(id<OrgOssPdfreporterEngineJRVisitor>)param0 {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
}

+ (void)initialize {
  if (self == [OrgOssPdfreporterEngineFillJRFillTextElement class]) {
    OrgOssPdfreporterEngineFillJRFillTextElement_markupProcessorFactoryCache_ = [[OrgOssPdfreporterEngineUtilJRSingletonCache alloc] initWithIOSClass:[IOSClass classWithProtocol:@protocol(OrgOssPdfreporterEngineUtilMarkupProcessorFactory)]];
    OrgOssPdfreporterEngineFillJRFillTextElement_markupProcessors_ = [[JavaUtilHashMap alloc] init];
  }
}

- (void)copyAllPropertiesTo:(id)copy {
  [super copyAllPropertiesTo:copy];
  OrgOssPdfreporterEngineFillJRFillTextElement *typedCopy = (OrgOssPdfreporterEngineFillJRFillTextElement *) copy;
  typedCopy.isLeftToRight = isLeftToRight_;
  typedCopy.textMeasurer = textMeasurer_;
  typedCopy.lineSpacingFactor = lineSpacingFactor_;
  typedCopy.leadingOffset = leadingOffset_;
  typedCopy.textHeight = textHeight_;
  typedCopy.elementStretchHeightDelta = elementStretchHeightDelta_;
  typedCopy.textStart = textStart_;
  typedCopy.textEnd = textEnd_;
  typedCopy.lineBreakOffsets = lineBreakOffsets_;
  typedCopy.textTruncateSuffix = textTruncateSuffix_;
  typedCopy.rawText = rawText_;
  typedCopy.styledText = styledText_;
  typedCopy.styledTextAttributesMap = styledTextAttributesMap_;
  typedCopy.initLineBox = initLineBox_;
  typedCopy.initParagraph = initParagraph_;
  typedCopy.consumeSpaceOnOverflow = consumeSpaceOnOverflow_;
  typedCopy.lineBox = lineBox_;
  typedCopy.paragraph = paragraph_;
}

@end
