//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: pdfreporter-core/src/org/oss/pdfreporter/engine/fill/JRFillBreak.java
//
//  Created by kendra on 9/27/13.
//

#include "java/lang/UnsupportedOperationException.h"
#include "org/oss/pdfreporter/engine/JRBreak.h"
#include "org/oss/pdfreporter/engine/JRExpressionCollector.h"
#include "org/oss/pdfreporter/engine/JRPrintElement.h"
#include "org/oss/pdfreporter/engine/JRVisitor.h"
#include "org/oss/pdfreporter/engine/fill/JRBaseFiller.h"
#include "org/oss/pdfreporter/engine/fill/JRFillBand.h"
#include "org/oss/pdfreporter/engine/fill/JRFillBreak.h"
#include "org/oss/pdfreporter/engine/fill/JRFillCloneFactory.h"
#include "org/oss/pdfreporter/engine/fill/JRFillCloneable.h"
#include "org/oss/pdfreporter/engine/fill/JRFillContext.h"
#include "org/oss/pdfreporter/engine/fill/JRFillElement.h"
#include "org/oss/pdfreporter/engine/fill/JRFillObjectFactory.h"
#include "org/oss/pdfreporter/engine/fill/JRTemplateElement.h"
#include "org/oss/pdfreporter/engine/type/BreakTypeEnum.h"

@implementation OrgOssPdfreporterEngineFillJRFillBreak

- (id)initWithOrgOssPdfreporterEngineFillJRBaseFiller:(OrgOssPdfreporterEngineFillJRBaseFiller *)filler
                   withOrgOssPdfreporterEngineJRBreak:(id<OrgOssPdfreporterEngineJRBreak>)breakElement
   withOrgOssPdfreporterEngineFillJRFillObjectFactory:(OrgOssPdfreporterEngineFillJRFillObjectFactory *)factory {
  return [super initWithOrgOssPdfreporterEngineFillJRBaseFiller:filler withOrgOssPdfreporterEngineJRElement:breakElement withOrgOssPdfreporterEngineFillJRFillObjectFactory:factory];
}

- (id)initWithOrgOssPdfreporterEngineFillJRFillBreak:(OrgOssPdfreporterEngineFillJRFillBreak *)breakElement
   withOrgOssPdfreporterEngineFillJRFillCloneFactory:(OrgOssPdfreporterEngineFillJRFillCloneFactory *)factory {
  return [super initWithOrgOssPdfreporterEngineFillJRFillElement:breakElement withOrgOssPdfreporterEngineFillJRFillCloneFactory:factory];
}

- (int)getWidth {
  int width;
  switch ([[self getTypeValue] ordinal]) {
    case OrgOssPdfreporterEngineTypeBreakTypeEnum_PAGE:
    width = ((OrgOssPdfreporterEngineFillJRBaseFiller *) nil_chk(filler_)).pageWidth - ((OrgOssPdfreporterEngineFillJRBaseFiller *) nil_chk(filler_)).leftMargin - ((OrgOssPdfreporterEngineFillJRBaseFiller *) nil_chk(filler_)).rightMargin;
    break;
    default:
    width = ((OrgOssPdfreporterEngineFillJRBaseFiller *) nil_chk(filler_)).columnWidth;
    break;
  }
  return width;
}

- (OrgOssPdfreporterEngineTypeBreakTypeEnumEnum *)getTypeValue {
  return [((id<OrgOssPdfreporterEngineJRBreak>) parent_) getTypeValue];
}

- (void)setTypeWithOrgOssPdfreporterEngineTypeBreakTypeEnumEnum:(OrgOssPdfreporterEngineTypeBreakTypeEnumEnum *)type {
  @throw [[JavaLangUnsupportedOperationException alloc] init];
}

- (void)evaluateWithChar:(char)evaluation {
  [self reset];
  [self evaluatePrintWhenExpressionWithChar:evaluation];
  [self evaluatePropertiesWithChar:evaluation];
  [self evaluateStyleWithChar:evaluation];
  [self setValueRepeatingWithBOOL:YES];
}

- (id<OrgOssPdfreporterEngineJRPrintElement>)fill {
  return nil;
}

- (OrgOssPdfreporterEngineFillJRTemplateElement *)createElementTemplate {
  return nil;
}

- (void)collectExpressionsWithOrgOssPdfreporterEngineJRExpressionCollector:(OrgOssPdfreporterEngineJRExpressionCollector *)collector {
  [((OrgOssPdfreporterEngineJRExpressionCollector *) nil_chk(collector)) collectWithOrgOssPdfreporterEngineJRBreak:self];
}

- (void)visitWithOrgOssPdfreporterEngineJRVisitor:(id<OrgOssPdfreporterEngineJRVisitor>)visitor {
  [((id<OrgOssPdfreporterEngineJRVisitor>) nil_chk(visitor)) visitBreakWithOrgOssPdfreporterEngineJRBreak:self];
}

- (void)resolveElementWithOrgOssPdfreporterEngineJRPrintElement:(id<OrgOssPdfreporterEngineJRPrintElement>)element
                                                       withChar:(char)evaluation {
}

- (id<OrgOssPdfreporterEngineFillJRFillCloneable>)createCloneWithOrgOssPdfreporterEngineFillJRFillCloneFactory:(OrgOssPdfreporterEngineFillJRFillCloneFactory *)factory {
  return [[OrgOssPdfreporterEngineFillJRFillBreak alloc] initWithOrgOssPdfreporterEngineFillJRFillBreak:self withOrgOssPdfreporterEngineFillJRFillCloneFactory:factory];
}

- (void)rewind {
}

- (BOOL)prepareWithInt:(int)availableHeight
              withBOOL:(BOOL)isOverflow {
  [super prepareWithInt:availableHeight withBOOL:isOverflow];
  if (![self isToPrint]) {
    return NO;
  }
  BOOL isToPrint = YES;
  if (isOverflow && [self isAlreadyPrinted]) {
    isToPrint = NO;
  }
  if (isToPrint && availableHeight < [self getRelativeY] + [self getHeight]) {
    isToPrint = NO;
  }
  if (isToPrint) {
    if ([((OrgOssPdfreporterEngineFillJRFillContext *) nil_chk([((OrgOssPdfreporterEngineFillJRBaseFiller *) nil_chk(filler_)) getFillContext])) isIgnorePagination]) {
    }
    else if ([self getTypeValue] == [OrgOssPdfreporterEngineTypeBreakTypeEnumEnum COLUMN]) {
      if (!((OrgOssPdfreporterEngineFillJRBaseFiller *) nil_chk(filler_)).isFirstColumnBand || ((OrgOssPdfreporterEngineFillJRFillBand *) nil_chk(band_)).firstYElement != nil) {
        [self setStretchHeightWithInt:availableHeight - [self getRelativeY]];
      }
    }
    else {
      if (![((OrgOssPdfreporterEngineFillJRFillBand *) nil_chk(band_)) isPageBreakInhibited]) {
        [self setStretchHeightWithInt:availableHeight - [self getRelativeY]];
        ((OrgOssPdfreporterEngineFillJRBaseFiller *) nil_chk(filler_)).columnIndex = ((OrgOssPdfreporterEngineFillJRBaseFiller *) nil_chk(filler_)).columnCount - 1;
      }
    }
  }
  [self setToPrintWithBOOL:isToPrint];
  [self setReprintedWithBOOL:NO];
  return NO;
}

@end
