//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: pdfreporter-core/src/org/oss/pdfreporter/engine/fill/JRFillElementContainer.java
//
//  Created by kendra on 9/27/13.
//

#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "java/lang/Boolean.h"
#include "java/lang/Math.h"
#include "java/lang/StringBuffer.h"
#include "java/util/ArrayList.h"
#include "java/util/Collection.h"
#include "java/util/Collections.h"
#include "java/util/HashMap.h"
#include "java/util/HashSet.h"
#include "java/util/Iterator.h"
#include "java/util/List.h"
#include "java/util/Map.h"
#include "java/util/Set.h"
#include "org/oss/pdfreporter/engine/JRConditionalStyle.h"
#include "org/oss/pdfreporter/engine/JRElement.h"
#include "org/oss/pdfreporter/engine/JRElementGroup.h"
#include "org/oss/pdfreporter/engine/JRExpression.h"
#include "org/oss/pdfreporter/engine/JRFrame.h"
#include "org/oss/pdfreporter/engine/JROrigin.h"
#include "org/oss/pdfreporter/engine/JRPrintElement.h"
#include "org/oss/pdfreporter/engine/JRPrintElementContainer.h"
#include "org/oss/pdfreporter/engine/JRStyle.h"
#include "org/oss/pdfreporter/engine/JasperPrint.h"
#include "org/oss/pdfreporter/engine/base/JRBaseStyle.h"
#include "org/oss/pdfreporter/engine/fill/JRBaseFiller.h"
#include "org/oss/pdfreporter/engine/fill/JRFillBreak.h"
#include "org/oss/pdfreporter/engine/fill/JRFillCloneFactory.h"
#include "org/oss/pdfreporter/engine/fill/JRFillContext.h"
#include "org/oss/pdfreporter/engine/fill/JRFillCrosstab.h"
#include "org/oss/pdfreporter/engine/fill/JRFillElement.h"
#include "org/oss/pdfreporter/engine/fill/JRFillElementContainer.h"
#include "org/oss/pdfreporter/engine/fill/JRFillElementGroup.h"
#include "org/oss/pdfreporter/engine/fill/JRFillExpressionEvaluator.h"
#include "org/oss/pdfreporter/engine/fill/JRFillFrame.h"
#include "org/oss/pdfreporter/engine/fill/JRFillObjectFactory.h"
#include "org/oss/pdfreporter/engine/fill/JRFillSubreport.h"
#include "org/oss/pdfreporter/engine/fill/JROriginProvider.h"
#include "org/oss/pdfreporter/engine/fill/JRPrintBand.h"
#include "org/oss/pdfreporter/engine/fill/JRYComparator.h"
#include "org/oss/pdfreporter/engine/type/PositionTypeEnum.h"
#include "org/oss/pdfreporter/engine/type/StretchTypeEnum.h"
#include "org/oss/pdfreporter/engine/util/JRStyleResolver.h"

@implementation OrgOssPdfreporterEngineFillJRFillElementContainer

@synthesize filler = filler_;
@synthesize ySortedElements = ySortedElements_;
@synthesize stretchElements_ = stretchElements__;
@synthesize bandBottomElements = bandBottomElements_;
@synthesize removableElements = removableElements_;
@synthesize willOverflow_ = willOverflow__;
@synthesize isOverflow = isOverflow_;
@synthesize currentOverflow = currentOverflow_;
@synthesize currentOverflowAllowed = currentOverflowAllowed_;
@synthesize stretchHeight = stretchHeight_;
@synthesize firstY = firstY_;
@synthesize firstYElement = firstYElement_;
@synthesize expressionEvaluator = expressionEvaluator_;
@synthesize deepElements = deepElements_;
@synthesize stylesToEvaluate = stylesToEvaluate_;
@synthesize evaluatedStyles = evaluatedStyles_;
@synthesize hasPrintWhenOverflowElement = hasPrintWhenOverflowElement_;

- (id)initWithOrgOssPdfreporterEngineFillJRBaseFiller:(OrgOssPdfreporterEngineFillJRBaseFiller *)filler
            withOrgOssPdfreporterEngineJRElementGroup:(id<OrgOssPdfreporterEngineJRElementGroup>)container
   withOrgOssPdfreporterEngineFillJRFillObjectFactory:(OrgOssPdfreporterEngineFillJRFillObjectFactory *)factory {
  if ((self = [super initWithOrgOssPdfreporterEngineJRElementGroup:container withOrgOssPdfreporterEngineFillJRFillObjectFactory:factory])) {
    stylesToEvaluate_ = [[JavaUtilHashSet alloc] init];
    evaluatedStyles_ = [[JavaUtilHashMap alloc] init];
    expressionEvaluator_ = [((OrgOssPdfreporterEngineFillJRFillObjectFactory *) nil_chk(factory)) getExpressionEvaluator];
    [self initDeepElements];
    self.filler = filler;
  }
  return self;
}

- (id)initWithOrgOssPdfreporterEngineFillJRFillElementContainer:(OrgOssPdfreporterEngineFillJRFillElementContainer *)container
              withOrgOssPdfreporterEngineFillJRFillCloneFactory:(OrgOssPdfreporterEngineFillJRFillCloneFactory *)factory {
  if ((self = [super initWithOrgOssPdfreporterEngineFillJRFillElementGroup:container withOrgOssPdfreporterEngineFillJRFillCloneFactory:factory])) {
    stylesToEvaluate_ = [[JavaUtilHashSet alloc] init];
    evaluatedStyles_ = [[JavaUtilHashMap alloc] init];
    expressionEvaluator_ = ((OrgOssPdfreporterEngineFillJRFillElementContainer *) nil_chk(container)).expressionEvaluator;
    [self initDeepElements];
    self.filler = ((OrgOssPdfreporterEngineFillJRFillElementContainer *) nil_chk(container)).filler;
  }
  return self;
}

- (void)initDeepElements OBJC_METHOD_FAMILY_NONE {
  if (elements_ == nil) {
    deepElements_ = [IOSObjectArray arrayWithLength:0 type:[IOSClass classWithClass:[OrgOssPdfreporterEngineFillJRFillElement class]]];
  }
  else {
    id<JavaUtilList> deepElementsList = [[JavaUtilArrayList alloc] initWithInt:(int) [elements_ count]];
    [OrgOssPdfreporterEngineFillJRFillElementContainer collectDeepElementsWithOrgOssPdfreporterEngineJRElementArray:elements_ withJavaUtilList:deepElementsList];
    deepElements_ = [IOSObjectArray arrayWithLength:[((id<JavaUtilList>) nil_chk(deepElementsList)) size] type:[IOSClass classWithClass:[OrgOssPdfreporterEngineFillJRFillElement class]]];
    (void) [((id<JavaUtilList>) nil_chk(deepElementsList)) toArrayWithNSObjectArray:deepElements_];
  }
}

+ (void)collectDeepElementsWithOrgOssPdfreporterEngineJRElementArray:(IOSObjectArray *)elements
                                                    withJavaUtilList:(id<JavaUtilList>)deepElementsList {
  for (int i = 0; i < (int) [((IOSObjectArray *) nil_chk(elements)) count]; i++) {
    id<OrgOssPdfreporterEngineJRElement> element = [((IOSObjectArray *) nil_chk(elements)) objectAtIndex:i];
    [((id<JavaUtilList>) nil_chk(deepElementsList)) addWithId:(OrgOssPdfreporterEngineFillJRFillElement *) element];
    if ([(id) element isKindOfClass:[OrgOssPdfreporterEngineFillJRFillFrame class]]) {
      id<OrgOssPdfreporterEngineJRFrame> frame = (id<OrgOssPdfreporterEngineJRFrame>) element;
      [OrgOssPdfreporterEngineFillJRFillElementContainer collectDeepElementsWithOrgOssPdfreporterEngineJRElementArray:[((id<OrgOssPdfreporterEngineJRFrame>) nil_chk(frame)) getElements] withJavaUtilList:deepElementsList];
    }
  }
}

- (void)initElements OBJC_METHOD_FAMILY_NONE {
  hasPrintWhenOverflowElement_ = NO;
  if (elements_ != nil && (int) [((IOSObjectArray *) nil_chk(elements_)) count] > 0) {
    id<JavaUtilList> sortedElemsList = [[JavaUtilArrayList alloc] init];
    id<JavaUtilList> stretchElemsList = [[JavaUtilArrayList alloc] init];
    id<JavaUtilList> bandBottomElemsList = [[JavaUtilArrayList alloc] init];
    id<JavaUtilList> removableElemsList = [[JavaUtilArrayList alloc] init];
    for (int i = 0; i < (int) [((IOSObjectArray *) nil_chk(elements_)) count]; i++) {
      OrgOssPdfreporterEngineFillJRFillElement *element = [((IOSObjectArray *) nil_chk(elements_)) objectAtIndex:i];
      [((id<JavaUtilList>) nil_chk(sortedElemsList)) addWithId:element];
      if ([((OrgOssPdfreporterEngineFillJRFillElement *) nil_chk(element)) getPositionTypeValue] == [OrgOssPdfreporterEngineTypePositionTypeEnumEnum FIX_RELATIVE_TO_BOTTOM]) {
        [((id<JavaUtilList>) nil_chk(bandBottomElemsList)) addWithId:element];
      }
      if ([((OrgOssPdfreporterEngineFillJRFillElement *) nil_chk(element)) getStretchTypeValue] != [OrgOssPdfreporterEngineTypeStretchTypeEnumEnum NO_STRETCH]) {
        [((id<JavaUtilList>) nil_chk(stretchElemsList)) addWithId:element];
      }
      if ([((OrgOssPdfreporterEngineFillJRFillElement *) nil_chk(element)) isRemoveLineWhenBlank]) {
        [((id<JavaUtilList>) nil_chk(removableElemsList)) addWithId:element];
      }
      if ([((OrgOssPdfreporterEngineFillJRFillElement *) nil_chk(element)) isPrintWhenDetailOverflows]) {
        hasPrintWhenOverflowElement_ = YES;
      }
    }
    [JavaUtilCollections sortWithJavaUtilList:sortedElemsList withJavaUtilComparator:[[OrgOssPdfreporterEngineFillJRYComparator alloc] init]];
    ySortedElements_ = [IOSObjectArray arrayWithLength:(int) [((IOSObjectArray *) nil_chk(elements_)) count] type:[IOSClass classWithClass:[OrgOssPdfreporterEngineFillJRFillElement class]]];
    (void) [((id<JavaUtilList>) nil_chk(sortedElemsList)) toArrayWithNSObjectArray:ySortedElements_];
    stretchElements__ = [IOSObjectArray arrayWithLength:[((id<JavaUtilList>) nil_chk(stretchElemsList)) size] type:[IOSClass classWithClass:[OrgOssPdfreporterEngineFillJRFillElement class]]];
    (void) [((id<JavaUtilList>) nil_chk(stretchElemsList)) toArrayWithNSObjectArray:stretchElements__];
    bandBottomElements_ = [IOSObjectArray arrayWithLength:[((id<JavaUtilList>) nil_chk(bandBottomElemsList)) size] type:[IOSClass classWithClass:[OrgOssPdfreporterEngineFillJRFillElement class]]];
    (void) [((id<JavaUtilList>) nil_chk(bandBottomElemsList)) toArrayWithNSObjectArray:bandBottomElements_];
    removableElements_ = [IOSObjectArray arrayWithLength:[((id<JavaUtilList>) nil_chk(removableElemsList)) size] type:[IOSClass classWithClass:[OrgOssPdfreporterEngineFillJRFillElement class]]];
    (void) [((id<JavaUtilList>) nil_chk(removableElemsList)) toArrayWithNSObjectArray:removableElements_];
  }
  [self setDependentElements];
}

- (void)setDependentElements {
  if (ySortedElements_ != nil && (int) [((IOSObjectArray *) nil_chk(ySortedElements_)) count] > 0) {
    for (int i = 0; i < (int) [((IOSObjectArray *) nil_chk(ySortedElements_)) count] - 1; i++) {
      OrgOssPdfreporterEngineFillJRFillElement *iElem = [((IOSObjectArray *) nil_chk(ySortedElements_)) objectAtIndex:i];
      BOOL isBreakElem = [iElem isKindOfClass:[OrgOssPdfreporterEngineFillJRFillBreak class]];
      for (int j = i + 1; j < (int) [((IOSObjectArray *) nil_chk(ySortedElements_)) count]; j++) {
        OrgOssPdfreporterEngineFillJRFillElement *jElem = [((IOSObjectArray *) nil_chk(ySortedElements_)) objectAtIndex:j];
        int left = [JavaLangMath minWithInt:[((OrgOssPdfreporterEngineFillJRFillElement *) nil_chk(iElem)) getX] withInt:[((OrgOssPdfreporterEngineFillJRFillElement *) nil_chk(jElem)) getX]];
        int right = [JavaLangMath maxWithInt:[((OrgOssPdfreporterEngineFillJRFillElement *) nil_chk(iElem)) getX] + [((OrgOssPdfreporterEngineFillJRFillElement *) nil_chk(iElem)) getWidth] withInt:[((OrgOssPdfreporterEngineFillJRFillElement *) nil_chk(jElem)) getX] + [((OrgOssPdfreporterEngineFillJRFillElement *) nil_chk(jElem)) getWidth]];
        if (((isBreakElem && [((OrgOssPdfreporterEngineFillJRFillElement *) nil_chk(jElem)) getPositionTypeValue] == [OrgOssPdfreporterEngineTypePositionTypeEnumEnum FIX_RELATIVE_TO_TOP]) || [((OrgOssPdfreporterEngineFillJRFillElement *) nil_chk(jElem)) getPositionTypeValue] == [OrgOssPdfreporterEngineTypePositionTypeEnumEnum FLOAT]) && [((OrgOssPdfreporterEngineFillJRFillElement *) nil_chk(iElem)) getY] + [((OrgOssPdfreporterEngineFillJRFillElement *) nil_chk(iElem)) getHeight] <= [((OrgOssPdfreporterEngineFillJRFillElement *) nil_chk(jElem)) getY] && [((OrgOssPdfreporterEngineFillJRFillElement *) nil_chk(iElem)) getWidth] + [((OrgOssPdfreporterEngineFillJRFillElement *) nil_chk(jElem)) getWidth] > right - left) {
          [((OrgOssPdfreporterEngineFillJRFillElement *) nil_chk(iElem)) addDependantElementWithOrgOssPdfreporterEngineJRElement:jElem];
        }
      }
    }
  }
}

- (void)evaluateWithChar:(char)evaluation {
  IOSObjectArray *allElements = [self getElements];
  if (allElements != nil && (int) [((IOSObjectArray *) nil_chk(allElements)) count] > 0) {
    for (int i = 0; i < (int) [((IOSObjectArray *) nil_chk(allElements)) count]; i++) {
      OrgOssPdfreporterEngineFillJRFillElement *element = (OrgOssPdfreporterEngineFillJRFillElement *) [((IOSObjectArray *) nil_chk(allElements)) objectAtIndex:i];
      [((OrgOssPdfreporterEngineFillJRFillElement *) nil_chk(element)) setCurrentEvaluationWithChar:evaluation];
      [((OrgOssPdfreporterEngineFillJRFillElement *) nil_chk(element)) evaluateWithChar:evaluation];
    }
  }
}

- (void)resetElements {
  if (ySortedElements_ != nil && (int) [((IOSObjectArray *) nil_chk(ySortedElements_)) count] > 0) {
    for (int i = 0; i < (int) [((IOSObjectArray *) nil_chk(ySortedElements_)) count]; i++) {
      OrgOssPdfreporterEngineFillJRFillElement *element = [((IOSObjectArray *) nil_chk(ySortedElements_)) objectAtIndex:i];
      [((OrgOssPdfreporterEngineFillJRFillElement *) nil_chk(element)) reset];
      if (!isOverflow_) {
        [((OrgOssPdfreporterEngineFillJRFillElement *) nil_chk(element)) setAlreadyPrintedWithBOOL:NO];
      }
    }
  }
}

- (BOOL)willOverflow {
  return willOverflow__;
}

- (void)initFill OBJC_METHOD_FAMILY_NONE {
  isOverflow_ = willOverflow__;
  firstY_ = 0;
  firstYElement_ = nil;
}

- (void)prepareElementsWithInt:(int)availableHeight
                      withBOOL:(BOOL)isOverflowAllowed {
  currentOverflow_ = NO;
  currentOverflowAllowed_ = isOverflowAllowed;
  int maxBandStretch = 0;
  int bandStretch = 0;
  firstY_ = isOverflow_ ? [self getContainerHeight] : 0;
  firstYElement_ = nil;
  BOOL isFirstYFound = NO;
  if (ySortedElements_ != nil && (int) [((IOSObjectArray *) nil_chk(ySortedElements_)) count] > 0) {
    for (int i = 0; i < (int) [((IOSObjectArray *) nil_chk(ySortedElements_)) count]; i++) {
      OrgOssPdfreporterEngineFillJRFillElement *element = [((IOSObjectArray *) nil_chk(ySortedElements_)) objectAtIndex:i];
      currentOverflow_ = [((OrgOssPdfreporterEngineFillJRFillElement *) nil_chk(element)) prepareWithInt:availableHeight + [self getElementFirstYWithOrgOssPdfreporterEngineFillJRFillElement:element] withBOOL:isOverflow_] || currentOverflow_;
      [((OrgOssPdfreporterEngineFillJRFillElement *) nil_chk(element)) moveDependantElements];
      if ([((OrgOssPdfreporterEngineFillJRFillElement *) nil_chk(element)) isToPrint]) {
        if (isOverflow_) {
          if ([((OrgOssPdfreporterEngineFillJRFillElement *) nil_chk(element)) isReprinted]) {
            firstY_ = 0;
          }
          else if (!isFirstYFound) {
            firstY_ = [((OrgOssPdfreporterEngineFillJRFillElement *) nil_chk(element)) getY];
          }
          isFirstYFound = YES;
        }
        firstYElement_ = element;
        bandStretch = [((OrgOssPdfreporterEngineFillJRFillElement *) nil_chk(element)) getRelativeY] + [((OrgOssPdfreporterEngineFillJRFillElement *) nil_chk(element)) getStretchHeight] - [((OrgOssPdfreporterEngineFillJRFillElement *) nil_chk(element)) getY] - [((OrgOssPdfreporterEngineFillJRFillElement *) nil_chk(element)) getHeight];
        if (bandStretch > maxBandStretch) {
          maxBandStretch = bandStretch;
        }
      }
    }
  }
  if (maxBandStretch > availableHeight - [self getContainerHeight] + firstY_) {
    currentOverflow_ = YES;
  }
  if (currentOverflow_) {
    stretchHeight_ = availableHeight + firstY_;
  }
  else {
    stretchHeight_ = [self getContainerHeight] + maxBandStretch;
  }
  willOverflow__ = currentOverflow_ && isOverflowAllowed;
}

- (BOOL)isCurrentOverflow {
  return currentOverflow_;
}

- (BOOL)isCurrentOverflowAllowed {
  return currentOverflowAllowed_;
}

- (int)getElementFirstYWithOrgOssPdfreporterEngineFillJRFillElement:(OrgOssPdfreporterEngineFillJRFillElement *)element {
  int elemFirstY;
  if (!isOverflow_ || hasPrintWhenOverflowElement_) {
    elemFirstY = 0;
  }
  else if ([((OrgOssPdfreporterEngineFillJRFillElement *) nil_chk(element)) getY] >= firstY_) {
    elemFirstY = firstY_;
  }
  else {
    elemFirstY = [((OrgOssPdfreporterEngineFillJRFillElement *) nil_chk(element)) getY];
  }
  return elemFirstY;
}

- (void)setStretchHeightWithInt:(int)stretchHeight {
  if (stretchHeight > self.stretchHeight) {
    self.stretchHeight = stretchHeight;
  }
}

- (void)stretchElements {
  if (stretchElements__ != nil && (int) [((IOSObjectArray *) nil_chk(stretchElements__)) count] > 0) {
    for (int i = 0; i < (int) [((IOSObjectArray *) nil_chk(stretchElements__)) count]; i++) {
      OrgOssPdfreporterEngineFillJRFillElement *element = [((IOSObjectArray *) nil_chk(stretchElements__)) objectAtIndex:i];
      [((OrgOssPdfreporterEngineFillJRFillElement *) nil_chk(element)) stretchElementWithInt:stretchHeight_ - [self getContainerHeight]];
      [((OrgOssPdfreporterEngineFillJRFillElement *) nil_chk(element)) moveDependantElements];
    }
  }
  if (ySortedElements_ != nil && (int) [((IOSObjectArray *) nil_chk(ySortedElements_)) count] > 0) {
    for (int i = 0; i < (int) [((IOSObjectArray *) nil_chk(ySortedElements_)) count]; i++) {
      OrgOssPdfreporterEngineFillJRFillElement *element = [((IOSObjectArray *) nil_chk(ySortedElements_)) objectAtIndex:i];
      [((OrgOssPdfreporterEngineFillJRFillElement *) nil_chk(element)) stretchHeightFinal];
    }
  }
}

- (int)getStretchHeight {
  return stretchHeight_;
}

- (void)moveBandBottomElements {
  if (bandBottomElements_ != nil && (int) [((IOSObjectArray *) nil_chk(bandBottomElements_)) count] > 0) {
    for (int i = 0; i < (int) [((IOSObjectArray *) nil_chk(bandBottomElements_)) count]; i++) {
      OrgOssPdfreporterEngineFillJRFillElement *element = [((IOSObjectArray *) nil_chk(bandBottomElements_)) objectAtIndex:i];
      [((OrgOssPdfreporterEngineFillJRFillElement *) nil_chk(element)) setRelativeYWithInt:[((OrgOssPdfreporterEngineFillJRFillElement *) nil_chk(element)) getY] + stretchHeight_ - [self getContainerHeight]];
      [((OrgOssPdfreporterEngineFillJRFillElement *) nil_chk(element)) setToPrintWithBOOL:[((OrgOssPdfreporterEngineFillJRFillElement *) nil_chk(element)) isToPrint] && !willOverflow__];
    }
  }
}

- (void)removeBlankElements {
  IOSObjectArray *remElems = removableElements_;
  if (remElems != nil && (int) [((IOSObjectArray *) nil_chk(remElems)) count] > 0) {
    IOSObjectArray *elems = ySortedElements_;
    for (int i = 0; i < (int) [((IOSObjectArray *) nil_chk(remElems)) count]; i++) {
      OrgOssPdfreporterEngineFillJRFillElement *iElem = (OrgOssPdfreporterEngineFillJRFillElement *) [((IOSObjectArray *) nil_chk(remElems)) objectAtIndex:i];
      int blankHeight;
      if ([((OrgOssPdfreporterEngineFillJRFillElement *) nil_chk(iElem)) isToPrint]) {
        blankHeight = [((OrgOssPdfreporterEngineFillJRFillElement *) nil_chk(iElem)) getHeight] - [((OrgOssPdfreporterEngineFillJRFillElement *) nil_chk(iElem)) getStretchHeight];
      }
      else {
        blankHeight = [((OrgOssPdfreporterEngineFillJRFillElement *) nil_chk(iElem)) getHeight];
      }
      if (blankHeight > 0 && [((OrgOssPdfreporterEngineFillJRFillElement *) nil_chk(iElem)) getRelativeY] + [((OrgOssPdfreporterEngineFillJRFillElement *) nil_chk(iElem)) getStretchHeight] <= stretchHeight_ && [((OrgOssPdfreporterEngineFillJRFillElement *) nil_chk(iElem)) getRelativeY] >= firstY_) {
        int blankY = [((OrgOssPdfreporterEngineFillJRFillElement *) nil_chk(iElem)) getRelativeY] + [((OrgOssPdfreporterEngineFillJRFillElement *) nil_chk(iElem)) getHeight] - blankHeight;
        BOOL isToRemove = YES;
        for (int j = 0; j < (int) [((IOSObjectArray *) nil_chk(elems)) count]; j++) {
          OrgOssPdfreporterEngineFillJRFillElement *jElem = (OrgOssPdfreporterEngineFillJRFillElement *) [((IOSObjectArray *) nil_chk(elems)) objectAtIndex:j];
          if (iElem != jElem && [((OrgOssPdfreporterEngineFillJRFillElement *) nil_chk(jElem)) isToPrint]) {
            int top = [JavaLangMath minWithInt:blankY withInt:[((OrgOssPdfreporterEngineFillJRFillElement *) nil_chk(jElem)) getRelativeY]];
            int bottom = [JavaLangMath maxWithInt:blankY + blankHeight withInt:[((OrgOssPdfreporterEngineFillJRFillElement *) nil_chk(jElem)) getRelativeY] + [((OrgOssPdfreporterEngineFillJRFillElement *) nil_chk(jElem)) getStretchHeight]];
            if (blankHeight + [((OrgOssPdfreporterEngineFillJRFillElement *) nil_chk(jElem)) getStretchHeight] > bottom - top) {
              isToRemove = NO;
              break;
            }
          }
        }
        if (isToRemove) {
          for (int j = 0; j < (int) [((IOSObjectArray *) nil_chk(elems)) count]; j++) {
            OrgOssPdfreporterEngineFillJRFillElement *jElem = (OrgOssPdfreporterEngineFillJRFillElement *) [((IOSObjectArray *) nil_chk(elems)) objectAtIndex:j];
            if ([((OrgOssPdfreporterEngineFillJRFillElement *) nil_chk(jElem)) getRelativeY] >= blankY + blankHeight) {
              [((OrgOssPdfreporterEngineFillJRFillElement *) nil_chk(jElem)) setRelativeYWithInt:[((OrgOssPdfreporterEngineFillJRFillElement *) nil_chk(jElem)) getRelativeY] - blankHeight];
            }
          }
          stretchHeight_ = stretchHeight_ - blankHeight;
        }
      }
    }
  }
}

- (void)fillElementsWithOrgOssPdfreporterEngineJRPrintElementContainer:(id<OrgOssPdfreporterEngineJRPrintElementContainer>)printContainer {
  IOSObjectArray *allElements = [self getElements];
  if (allElements != nil && (int) [((IOSObjectArray *) nil_chk(allElements)) count] > 0) {
    for (int i = 0; i < (int) [((IOSObjectArray *) nil_chk(allElements)) count]; i++) {
      OrgOssPdfreporterEngineFillJRFillElement *element = (OrgOssPdfreporterEngineFillJRFillElement *) [((IOSObjectArray *) nil_chk(allElements)) objectAtIndex:i];
      [((OrgOssPdfreporterEngineFillJRFillElement *) nil_chk(element)) setRelativeYWithInt:[((OrgOssPdfreporterEngineFillJRFillElement *) nil_chk(element)) getRelativeY] - firstY_];
      if ([((OrgOssPdfreporterEngineFillJRFillElement *) nil_chk(element)) getRelativeY] + [((OrgOssPdfreporterEngineFillJRFillElement *) nil_chk(element)) getStretchHeight] > stretchHeight_ - firstY_) {
        [((OrgOssPdfreporterEngineFillJRFillElement *) nil_chk(element)) setToPrintWithBOOL:NO];
      }
      [((OrgOssPdfreporterEngineFillJRFillElement *) nil_chk(element)) setAlreadyPrintedWithBOOL:[((OrgOssPdfreporterEngineFillJRFillElement *) nil_chk(element)) isToPrint] || [((OrgOssPdfreporterEngineFillJRFillElement *) nil_chk(element)) isAlreadyPrinted]];
      if ([((OrgOssPdfreporterEngineFillJRFillElement *) nil_chk(element)) isToPrint]) {
        id<OrgOssPdfreporterEngineJRPrintElement> printElement = [((OrgOssPdfreporterEngineFillJRFillElement *) nil_chk(element)) fill];
        if (printElement != nil) {
          [((id<OrgOssPdfreporterEngineJRPrintElementContainer>) nil_chk(printContainer)) addElementWithOrgOssPdfreporterEngineJRPrintElement:printElement];
          if ([element isKindOfClass:[OrgOssPdfreporterEngineFillJRFillSubreport class]]) {
            OrgOssPdfreporterEngineFillJRFillSubreport *subreport = (OrgOssPdfreporterEngineFillJRFillSubreport *) element;
            id<JavaUtilList> styles = [((OrgOssPdfreporterEngineJasperPrint *) nil_chk([((OrgOssPdfreporterEngineFillJRBaseFiller *) nil_chk(((OrgOssPdfreporterEngineFillJRFillSubreport *) nil_chk(subreport)).subreportFiller)) getJasperPrint])) getStylesList];
            for (int j = 0; j < [((id<JavaUtilList>) nil_chk(styles)) size]; j++) {
              [((OrgOssPdfreporterEngineFillJRBaseFiller *) nil_chk(filler_)) addPrintStyleWithOrgOssPdfreporterEngineJRStyle:[((id<JavaUtilList>) nil_chk(styles)) getWithInt:j]];
            }
            id<JavaUtilList> origins = [((OrgOssPdfreporterEngineJasperPrint *) nil_chk([((OrgOssPdfreporterEngineFillJRBaseFiller *) nil_chk(((OrgOssPdfreporterEngineFillJRFillSubreport *) nil_chk(subreport)).subreportFiller)) getJasperPrint])) getOriginsList];
            for (int j = 0; j < [((id<JavaUtilList>) nil_chk(origins)) size]; j++) {
              [((OrgOssPdfreporterEngineJasperPrint *) nil_chk([((OrgOssPdfreporterEngineFillJRBaseFiller *) nil_chk(filler_)) getJasperPrint])) addOriginWithOrgOssPdfreporterEngineJROrigin:[((id<JavaUtilList>) nil_chk(origins)) getWithInt:j]];
            }
            id<JavaUtilCollection> printElements = [((OrgOssPdfreporterEngineFillJRFillSubreport *) nil_chk(subreport)) getPrintElements];
            [self addSubElementsWithOrgOssPdfreporterEngineJRPrintElementContainer:printContainer withOrgOssPdfreporterEngineFillJRFillElement:element withJavaUtilCollection:printElements];
            [((OrgOssPdfreporterEngineFillJRFillSubreport *) nil_chk(subreport)) subreportPageFilled];
          }
        }
        else if ([element isKindOfClass:[OrgOssPdfreporterEngineFillJRFillCrosstab class]]) {
          id<JavaUtilList> printElements = [((OrgOssPdfreporterEngineFillJRFillCrosstab *) element) getPrintElements];
          [self addSubElementsWithOrgOssPdfreporterEngineJRPrintElementContainer:printContainer withOrgOssPdfreporterEngineFillJRFillElement:element withJavaUtilCollection:printElements];
        }
      }
    }
  }
  [((id<OrgOssPdfreporterEngineJRPrintElementContainer>) nil_chk(printContainer)) setHeightWithInt:stretchHeight_ - firstY_];
}

- (void)addSubElementsWithOrgOssPdfreporterEngineJRPrintElementContainer:(id<OrgOssPdfreporterEngineJRPrintElementContainer>)printContainer
                            withOrgOssPdfreporterEngineFillJRFillElement:(OrgOssPdfreporterEngineFillJRFillElement *)element
                                                  withJavaUtilCollection:(id<JavaUtilCollection>)printElements {
  if ([(id) printContainer isKindOfClass:[OrgOssPdfreporterEngineFillJRPrintBand class]]) {
    [((OrgOssPdfreporterEngineFillJRPrintBand *) printContainer) addOffsetElementsWithJavaUtilCollection:printElements withInt:[((OrgOssPdfreporterEngineFillJRFillElement *) nil_chk(element)) getX] withInt:[((OrgOssPdfreporterEngineFillJRFillElement *) nil_chk(element)) getRelativeY]];
  }
  else {
    if (printElements != nil && [((id<JavaUtilCollection>) nil_chk(printElements)) size] > 0) {
      for (id<JavaUtilIterator> it = [((id<JavaUtilCollection>) nil_chk(printElements)) iterator]; [((id<JavaUtilIterator>) nil_chk(it)) hasNext]; ) {
        id<OrgOssPdfreporterEngineJRPrintElement> printElement = [((id<JavaUtilIterator>) nil_chk(it)) next];
        [((id<OrgOssPdfreporterEngineJRPrintElement>) nil_chk(printElement)) setXWithInt:[((OrgOssPdfreporterEngineFillJRFillElement *) nil_chk(element)) getX] + [((id<OrgOssPdfreporterEngineJRPrintElement>) nil_chk(printElement)) getX]];
        [((id<OrgOssPdfreporterEngineJRPrintElement>) nil_chk(printElement)) setYWithInt:[((OrgOssPdfreporterEngineFillJRFillElement *) nil_chk(element)) getRelativeY] + [((id<OrgOssPdfreporterEngineJRPrintElement>) nil_chk(printElement)) getY]];
        [((id<OrgOssPdfreporterEngineJRPrintElementContainer>) nil_chk(printContainer)) addElementWithOrgOssPdfreporterEngineJRPrintElement:printElement];
      }
    }
  }
}

- (void)rewind {
  if (ySortedElements_ != nil && (int) [((IOSObjectArray *) nil_chk(ySortedElements_)) count] > 0) {
    for (int i = 0; i < (int) [((IOSObjectArray *) nil_chk(ySortedElements_)) count]; i++) {
      OrgOssPdfreporterEngineFillJRFillElement *element = [((IOSObjectArray *) nil_chk(ySortedElements_)) objectAtIndex:i];
      [((OrgOssPdfreporterEngineFillJRFillElement *) nil_chk(element)) rewind];
      [((OrgOssPdfreporterEngineFillJRFillElement *) nil_chk(element)) setAlreadyPrintedWithBOOL:NO];
    }
  }
  willOverflow__ = NO;
}

- (int)getFirstY {
  return firstY_;
}

- (int)getContainerHeight {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}

- (void)initConditionalStyles OBJC_METHOD_FAMILY_NONE {
  [((OrgOssPdfreporterEngineFillJRBaseFiller *) nil_chk(filler_)) addDefaultStyleListenerWithOrgOssPdfreporterEngineFillJRBaseFiller_DefaultStyleListener:[[OrgOssPdfreporterEngineFillJRFillElementContainer_$1 alloc] initWithOrgOssPdfreporterEngineFillJRFillElementContainer:self]];
  for (int i = 0; i < (int) [((IOSObjectArray *) nil_chk(deepElements_)) count]; i++) {
    id<OrgOssPdfreporterEngineJRStyle> style = ((OrgOssPdfreporterEngineFillJRFillElement *) nil_chk([((IOSObjectArray *) nil_chk(deepElements_)) objectAtIndex:i])).initStyle;
    [self collectConditionalStyleWithOrgOssPdfreporterEngineJRStyle:style];
  }
  if ((int) [((IOSObjectArray *) nil_chk(deepElements_)) count] > 0) {
    for (int i = 0; i < (int) [((IOSObjectArray *) nil_chk(deepElements_)) count]; i++) {
      [((OrgOssPdfreporterEngineFillJRFillElement *) nil_chk([((IOSObjectArray *) nil_chk(deepElements_)) objectAtIndex:i])) setConditionalStylesContainerWithOrgOssPdfreporterEngineFillJRFillElementContainer:self];
    }
  }
}

- (void)collectConditionalStyleWithOrgOssPdfreporterEngineJRStyle:(id<OrgOssPdfreporterEngineJRStyle>)style {
  if (style != nil) {
    [((id<JavaUtilSet>) nil_chk(stylesToEvaluate_)) addWithId:style];
  }
}

- (void)evaluateConditionalStylesWithChar:(char)evaluation {
  for (id<JavaUtilIterator> it = [((id<JavaUtilSet>) nil_chk(stylesToEvaluate_)) iterator]; [((id<JavaUtilIterator>) nil_chk(it)) hasNext]; ) {
    (void) [self evaluateConditionalStyleWithOrgOssPdfreporterEngineJRStyle:[((id<JavaUtilIterator>) nil_chk(it)) next] withChar:evaluation];
  }
}

- (id<OrgOssPdfreporterEngineJRStyle>)evaluateConditionalStyleWithOrgOssPdfreporterEngineJRStyle:(id<OrgOssPdfreporterEngineJRStyle>)initialStyle
                                                                                        withChar:(char)evaluation {
  id<OrgOssPdfreporterEngineJRStyle> consolidatedStyle = initialStyle;
  JavaLangStringBuffer *code = [[JavaLangStringBuffer alloc] init];
  id<JavaUtilList> condStylesToApply = [[JavaUtilArrayList alloc] init];
  BOOL anyTrue = [self buildConsolidatedStyleWithOrgOssPdfreporterEngineJRStyle:initialStyle withChar:evaluation withJavaLangStringBuffer:code withJavaUtilList:condStylesToApply];
  if (anyTrue) {
    NSString *consolidatedStyleName = [NSString stringWithFormat:@"%@|%@", [((id<OrgOssPdfreporterEngineJRStyle>) nil_chk(initialStyle)) getName], [((JavaLangStringBuffer *) nil_chk(code)) description]];
    consolidatedStyle = [((id<JavaUtilMap>) nil_chk([((OrgOssPdfreporterEngineJasperPrint *) nil_chk([((OrgOssPdfreporterEngineFillJRBaseFiller *) nil_chk(filler_)) getJasperPrint])) getStylesMap])) getWithId:consolidatedStyleName];
    if (consolidatedStyle == nil) {
      OrgOssPdfreporterEngineBaseJRBaseStyle *style = [[OrgOssPdfreporterEngineBaseJRBaseStyle alloc] initWithNSString:consolidatedStyleName];
      for (int j = [((id<JavaUtilList>) nil_chk(condStylesToApply)) size] - 1; j >= 0; j--) {
        [OrgOssPdfreporterEngineUtilJRStyleResolver appendStyleWithOrgOssPdfreporterEngineJRStyle:style withOrgOssPdfreporterEngineJRStyle:[((id<JavaUtilList>) nil_chk(condStylesToApply)) getWithInt:j]];
      }
      style = [((OrgOssPdfreporterEngineFillJRFillContext *) nil_chk(((OrgOssPdfreporterEngineFillJRBaseFiller *) nil_chk(filler_)).fillContext)) deduplicateWithId:style];
      [((OrgOssPdfreporterEngineFillJRBaseFiller *) nil_chk(filler_)) addPrintStyleWithOrgOssPdfreporterEngineJRStyle:style];
      consolidatedStyle = style;
    }
  }
  (void) [((id<JavaUtilMap>) nil_chk(evaluatedStyles_)) putWithId:initialStyle withId:consolidatedStyle];
  return consolidatedStyle;
}

- (BOOL)buildConsolidatedStyleWithOrgOssPdfreporterEngineJRStyle:(id<OrgOssPdfreporterEngineJRStyle>)style
                                                        withChar:(char)evaluation
                                        withJavaLangStringBuffer:(JavaLangStringBuffer *)code
                                                withJavaUtilList:(id<JavaUtilList>)condStylesToApply {
  BOOL anyTrue = NO;
  IOSObjectArray *conditionalStyles = [((id<OrgOssPdfreporterEngineJRStyle>) nil_chk(style)) getConditionalStyles];
  if (conditionalStyles != nil && (int) [((IOSObjectArray *) nil_chk(conditionalStyles)) count] > 0) {
    for (int j = 0; j < (int) [((IOSObjectArray *) nil_chk(conditionalStyles)) count]; j++) {
      id<OrgOssPdfreporterEngineJRConditionalStyle> conditionalStyle = [((IOSObjectArray *) nil_chk(conditionalStyles)) objectAtIndex:j];
      JavaLangBoolean *expressionValue = (JavaLangBoolean *) [((id<OrgOssPdfreporterEngineFillJRFillExpressionEvaluator>) nil_chk(expressionEvaluator_)) evaluateWithOrgOssPdfreporterEngineJRExpression:[((id<OrgOssPdfreporterEngineJRConditionalStyle>) nil_chk(conditionalStyle)) getConditionExpression] withChar:evaluation];
      BOOL condition;
      if (expressionValue == nil) {
        condition = NO;
      }
      else {
        condition = [expressionValue booleanValue];
      }
      (void) [((JavaLangStringBuffer *) nil_chk(code)) appendWithUnichar:condition ? '1' : '0'];
      anyTrue = anyTrue | condition;
      if (condition) {
        [((id<JavaUtilList>) nil_chk(condStylesToApply)) addWithId:conditionalStyle];
      }
    }
  }
  [((id<JavaUtilList>) nil_chk(condStylesToApply)) addWithId:style];
  if ([((id<OrgOssPdfreporterEngineJRStyle>) nil_chk(style)) getStyle] != nil) {
    anyTrue = anyTrue | [self buildConsolidatedStyleWithOrgOssPdfreporterEngineJRStyle:[((id<OrgOssPdfreporterEngineJRStyle>) nil_chk(style)) getStyle] withChar:evaluation withJavaLangStringBuffer:code withJavaUtilList:condStylesToApply];
  }
  return anyTrue;
}

- (id<OrgOssPdfreporterEngineJRStyle>)getEvaluatedConditionalStyleWithOrgOssPdfreporterEngineJRStyle:(id<OrgOssPdfreporterEngineJRStyle>)parentStyle {
  return [((id<JavaUtilMap>) nil_chk(evaluatedStyles_)) getWithId:parentStyle];
}

- (void)setElementOriginProviderWithOrgOssPdfreporterEngineFillJROriginProvider:(id<OrgOssPdfreporterEngineFillJROriginProvider>)originProvider {
  if (originProvider != nil) {
    for (int i = 0; i < (int) [((IOSObjectArray *) nil_chk(deepElements_)) count]; i++) {
      [((OrgOssPdfreporterEngineFillJRFillElement *) nil_chk([((IOSObjectArray *) nil_chk(deepElements_)) objectAtIndex:i])) setOriginProviderWithOrgOssPdfreporterEngineFillJROriginProvider:originProvider];
    }
  }
}

- (void)copyAllPropertiesTo:(id)copy {
  [super copyAllPropertiesTo:copy];
  OrgOssPdfreporterEngineFillJRFillElementContainer *typedCopy = (OrgOssPdfreporterEngineFillJRFillElementContainer *) copy;
  typedCopy.filler = filler_;
  typedCopy.ySortedElements = ySortedElements_;
  typedCopy.stretchElements_ = stretchElements__;
  typedCopy.bandBottomElements = bandBottomElements_;
  typedCopy.removableElements = removableElements_;
  typedCopy.willOverflow_ = willOverflow__;
  typedCopy.isOverflow = isOverflow_;
  typedCopy.currentOverflow = currentOverflow_;
  typedCopy.currentOverflowAllowed = currentOverflowAllowed_;
  typedCopy.stretchHeight = stretchHeight_;
  typedCopy.firstY = firstY_;
  typedCopy.firstYElement = firstYElement_;
  typedCopy.expressionEvaluator = expressionEvaluator_;
  typedCopy.deepElements = deepElements_;
  typedCopy.stylesToEvaluate = stylesToEvaluate_;
  typedCopy.evaluatedStyles = evaluatedStyles_;
  typedCopy.hasPrintWhenOverflowElement = hasPrintWhenOverflowElement_;
}

@end
@implementation OrgOssPdfreporterEngineFillJRFillElementContainer_$1

@synthesize this$0 = this$0_;

- (void)defaultStyleSetWithOrgOssPdfreporterEngineJRStyle:(id<OrgOssPdfreporterEngineJRStyle>)style {
  [this$0_ collectConditionalStyleWithOrgOssPdfreporterEngineJRStyle:style];
}

- (id)initWithOrgOssPdfreporterEngineFillJRFillElementContainer:(OrgOssPdfreporterEngineFillJRFillElementContainer *)outer$ {
  if ((self = [super init])) {
    this$0_ = outer$;
  }
  return self;
}

- (void)copyAllPropertiesTo:(id)copy {
  [super copyAllPropertiesTo:copy];
  OrgOssPdfreporterEngineFillJRFillElementContainer_$1 *typedCopy = (OrgOssPdfreporterEngineFillJRFillElementContainer_$1 *) copy;
  typedCopy.this$0 = this$0_;
}

@end
