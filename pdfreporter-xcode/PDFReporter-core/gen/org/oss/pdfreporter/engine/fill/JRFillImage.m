//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: pdfreporter-core/src/org/oss/pdfreporter/engine/fill/JRFillImage.java
//
//  Created by kendra on 9/27/13.
//

#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "java/io/File.h"
#include "java/io/InputStream.h"
#include "java/lang/Boolean.h"
#include "java/lang/Integer.h"
#include "java/lang/UnsupportedOperationException.h"
#include "java/util/logging/Logger.h"
#include "org/oss/pdfreporter/engine/JRDefaultStyleProvider.h"
#include "org/oss/pdfreporter/engine/JRElement.h"
#include "org/oss/pdfreporter/engine/JRExpression.h"
#include "org/oss/pdfreporter/engine/JRExpressionCollector.h"
#include "org/oss/pdfreporter/engine/JRGroup.h"
#include "org/oss/pdfreporter/engine/JRImage.h"
#include "org/oss/pdfreporter/engine/JRImageRenderer.h"
#include "org/oss/pdfreporter/engine/JRLineBox.h"
#include "org/oss/pdfreporter/engine/JROrigin.h"
#include "org/oss/pdfreporter/engine/JRPrintElement.h"
#include "org/oss/pdfreporter/engine/JRPrintHyperlinkParameters.h"
#include "org/oss/pdfreporter/engine/JRPrintImage.h"
#include "org/oss/pdfreporter/engine/JRRenderable.h"
#include "org/oss/pdfreporter/engine/JRStyle.h"
#include "org/oss/pdfreporter/engine/JRVisitor.h"
#include "org/oss/pdfreporter/engine/JasperPrint.h"
#include "org/oss/pdfreporter/engine/JasperReportsContext.h"
#include "org/oss/pdfreporter/engine/Renderable.h"
#include "org/oss/pdfreporter/engine/fill/JRBaseFiller.h"
#include "org/oss/pdfreporter/engine/fill/JRFillBand.h"
#include "org/oss/pdfreporter/engine/fill/JRFillCloneFactory.h"
#include "org/oss/pdfreporter/engine/fill/JRFillCloneable.h"
#include "org/oss/pdfreporter/engine/fill/JRFillContext.h"
#include "org/oss/pdfreporter/engine/fill/JRFillElement.h"
#include "org/oss/pdfreporter/engine/fill/JRFillGroup.h"
#include "org/oss/pdfreporter/engine/fill/JRFillHyperlinkHelper.h"
#include "org/oss/pdfreporter/engine/fill/JRFillImage.h"
#include "org/oss/pdfreporter/engine/fill/JRFillObjectFactory.h"
#include "org/oss/pdfreporter/engine/fill/JRRecordedValuesPrintImage.h"
#include "org/oss/pdfreporter/engine/fill/JRTemplateElement.h"
#include "org/oss/pdfreporter/engine/fill/JRTemplateImage.h"
#include "org/oss/pdfreporter/engine/fill/JRTemplatePrintImage.h"
#include "org/oss/pdfreporter/engine/type/EvaluationTimeEnum.h"
#include "org/oss/pdfreporter/engine/type/HorizontalAlignEnum.h"
#include "org/oss/pdfreporter/engine/type/HyperlinkTypeEnum.h"
#include "org/oss/pdfreporter/engine/type/ModeEnum.h"
#include "org/oss/pdfreporter/engine/type/OnErrorTypeEnum.h"
#include "org/oss/pdfreporter/engine/type/ScaleImageEnum.h"
#include "org/oss/pdfreporter/engine/type/VerticalAlignEnum.h"
#include "org/oss/pdfreporter/engine/util/JRStyleResolver.h"
#include "org/oss/pdfreporter/geometry/IDimension.h"
#include "org/oss/pdfreporter/image/IImage.h"
#include "org/oss/pdfreporter/net/IURL.h"
#include "org/oss/pdfreporter/uses/java/util/UUID.h"

@implementation OrgOssPdfreporterEngineFillJRFillImage

static JavaUtilLoggingLogger * OrgOssPdfreporterEngineFillJRFillImage_logger_;

@synthesize evaluationGroup = evaluationGroup_;
@synthesize renderer = renderer_;
@synthesize hasOverflowed = hasOverflowed_;
@synthesize imageHeight = imageHeight_;
@synthesize imageWidth = imageWidth_;
@synthesize imageX = imageX_;
@synthesize anchorName = anchorName_;
@synthesize hyperlinkReference = hyperlinkReference_;
@synthesize hyperlinkAnchor = hyperlinkAnchor_;
@synthesize hyperlinkPage = hyperlinkPage_;
@synthesize hyperlinkTooltip = hyperlinkTooltip_;
@synthesize hyperlinkParameters = hyperlinkParameters_;
@synthesize initLineBox = initLineBox_;
@synthesize lineBox = lineBox_;

+ (JavaUtilLoggingLogger *)logger {
  return OrgOssPdfreporterEngineFillJRFillImage_logger_;
}

- (id)initWithOrgOssPdfreporterEngineFillJRBaseFiller:(OrgOssPdfreporterEngineFillJRBaseFiller *)filler
                   withOrgOssPdfreporterEngineJRImage:(id<OrgOssPdfreporterEngineJRImage>)image
   withOrgOssPdfreporterEngineFillJRFillObjectFactory:(OrgOssPdfreporterEngineFillJRFillObjectFactory *)factory {
  if ((self = [super initWithOrgOssPdfreporterEngineFillJRBaseFiller:filler withOrgOssPdfreporterEngineJRGraphicElement:image withOrgOssPdfreporterEngineFillJRFillObjectFactory:factory])) {
    initLineBox_ = [((id<OrgOssPdfreporterEngineJRLineBox>) nil_chk([((id<OrgOssPdfreporterEngineJRImage>) nil_chk(image)) getLineBox])) cloneWithOrgOssPdfreporterEngineJRBoxContainer:self];
    evaluationGroup_ = [((OrgOssPdfreporterEngineFillJRFillObjectFactory *) nil_chk(factory)) getGroupWithOrgOssPdfreporterEngineJRGroup:[((id<OrgOssPdfreporterEngineJRImage>) nil_chk(image)) getEvaluationGroup]];
  }
  return self;
}

- (id)initWithOrgOssPdfreporterEngineFillJRFillImage:(OrgOssPdfreporterEngineFillJRFillImage *)image
   withOrgOssPdfreporterEngineFillJRFillCloneFactory:(OrgOssPdfreporterEngineFillJRFillCloneFactory *)factory {
  if ((self = [super initWithOrgOssPdfreporterEngineFillJRFillGraphicElement:image withOrgOssPdfreporterEngineFillJRFillCloneFactory:factory])) {
    initLineBox_ = [((id<OrgOssPdfreporterEngineJRLineBox>) nil_chk([((OrgOssPdfreporterEngineFillJRFillImage *) nil_chk(image)) getLineBox])) cloneWithOrgOssPdfreporterEngineJRBoxContainer:self];
    evaluationGroup_ = ((OrgOssPdfreporterEngineFillJRFillImage *) nil_chk(image)).evaluationGroup;
  }
  return self;
}

- (void)evaluateStyleWithChar:(char)evaluation {
  [super evaluateStyleWithChar:evaluation];
  lineBox_ = nil;
  if (providerStyle_ != nil) {
    lineBox_ = [((id<OrgOssPdfreporterEngineJRLineBox>) nil_chk(initLineBox_)) cloneWithOrgOssPdfreporterEngineJRBoxContainer:self];
    [OrgOssPdfreporterEngineUtilJRStyleResolver appendBoxWithOrgOssPdfreporterEngineJRLineBox:lineBox_ withOrgOssPdfreporterEngineJRLineBox:[providerStyle_ getLineBox]];
  }
}

- (OrgOssPdfreporterEngineTypeModeEnumEnum *)getModeValue {
  return [OrgOssPdfreporterEngineUtilJRStyleResolver getModeWithOrgOssPdfreporterEngineJRCommonElement:self withOrgOssPdfreporterEngineTypeModeEnumEnum:[OrgOssPdfreporterEngineTypeModeEnumEnum TRANSPARENT]];
}

- (OrgOssPdfreporterEngineTypeScaleImageEnumEnum *)getScaleImageValue {
  return [OrgOssPdfreporterEngineUtilJRStyleResolver getScaleImageValueWithOrgOssPdfreporterEngineJRCommonImage:self];
}

- (OrgOssPdfreporterEngineTypeScaleImageEnumEnum *)getOwnScaleImageValue {
  return providerStyle_ == nil || [((id<OrgOssPdfreporterEngineJRStyle>) nil_chk(providerStyle_)) getOwnScaleImageValue] == nil ? [((id<OrgOssPdfreporterEngineJRImage>) self.parent) getOwnScaleImageValue] : [((id<OrgOssPdfreporterEngineJRStyle>) nil_chk(providerStyle_)) getOwnScaleImageValue];
}

- (void)setScaleImageWithOrgOssPdfreporterEngineTypeScaleImageEnumEnum:(OrgOssPdfreporterEngineTypeScaleImageEnumEnum *)scaleImage {
  @throw [[JavaLangUnsupportedOperationException alloc] init];
}

- (OrgOssPdfreporterEngineTypeHorizontalAlignEnumEnum *)getHorizontalAlignmentValue {
  return [OrgOssPdfreporterEngineUtilJRStyleResolver getHorizontalAlignmentValueWithOrgOssPdfreporterEngineJRAlignment:self];
}

- (OrgOssPdfreporterEngineTypeHorizontalAlignEnumEnum *)getOwnHorizontalAlignmentValue {
  return providerStyle_ == nil || [((id<OrgOssPdfreporterEngineJRStyle>) nil_chk(providerStyle_)) getOwnHorizontalAlignmentValue] == nil ? [((id<OrgOssPdfreporterEngineJRImage>) self.parent) getOwnHorizontalAlignmentValue] : [((id<OrgOssPdfreporterEngineJRStyle>) nil_chk(providerStyle_)) getOwnHorizontalAlignmentValue];
}

- (void)setHorizontalAlignmentWithOrgOssPdfreporterEngineTypeHorizontalAlignEnumEnum:(OrgOssPdfreporterEngineTypeHorizontalAlignEnumEnum *)horizontalAlignment {
  @throw [[JavaLangUnsupportedOperationException alloc] init];
}

- (OrgOssPdfreporterEngineTypeVerticalAlignEnumEnum *)getVerticalAlignmentValue {
  return [OrgOssPdfreporterEngineUtilJRStyleResolver getVerticalAlignmentValueWithOrgOssPdfreporterEngineJRAlignment:self];
}

- (OrgOssPdfreporterEngineTypeVerticalAlignEnumEnum *)getOwnVerticalAlignmentValue {
  return providerStyle_ == nil || [((id<OrgOssPdfreporterEngineJRStyle>) nil_chk(providerStyle_)) getOwnVerticalAlignmentValue] == nil ? [((id<OrgOssPdfreporterEngineJRImage>) self.parent) getOwnVerticalAlignmentValue] : [((id<OrgOssPdfreporterEngineJRStyle>) nil_chk(providerStyle_)) getOwnVerticalAlignmentValue];
}

- (void)setVerticalAlignmentWithOrgOssPdfreporterEngineTypeVerticalAlignEnumEnum:(OrgOssPdfreporterEngineTypeVerticalAlignEnumEnum *)verticalAlignment {
  @throw [[JavaLangUnsupportedOperationException alloc] init];
}

- (BOOL)isUsingCache {
  return [((id<OrgOssPdfreporterEngineJRImage>) self.parent) isUsingCache];
}

- (JavaLangBoolean *)isOwnUsingCache {
  return [((id<OrgOssPdfreporterEngineJRImage>) self.parent) isOwnUsingCache];
}

- (JavaLangBoolean *)getUsingCache {
  return [((id<OrgOssPdfreporterEngineJRImage>) self.parent) getUsingCache];
}

- (void)setUsingCacheWithBOOL:(BOOL)isUsingCache {
}

- (void)setUsingCacheWithJavaLangBoolean:(JavaLangBoolean *)isUsingCache {
}

- (BOOL)isLazy {
  return [((id<OrgOssPdfreporterEngineJRImage>) self.parent) isLazy];
}

- (void)setLazyWithBOOL:(BOOL)isLazy {
}

- (OrgOssPdfreporterEngineTypeOnErrorTypeEnumEnum *)getOnErrorTypeValue {
  return [((id<OrgOssPdfreporterEngineJRImage>) self.parent) getOnErrorTypeValue];
}

- (void)setOnErrorTypeWithOrgOssPdfreporterEngineTypeOnErrorTypeEnumEnum:(OrgOssPdfreporterEngineTypeOnErrorTypeEnumEnum *)onErrorType {
  @throw [[JavaLangUnsupportedOperationException alloc] init];
}

- (OrgOssPdfreporterEngineTypeEvaluationTimeEnumEnum *)getEvaluationTimeValue {
  return [((id<OrgOssPdfreporterEngineJRImage>) self.parent) getEvaluationTimeValue];
}

- (id<OrgOssPdfreporterEngineJRGroup>)getEvaluationGroup {
  return self.evaluationGroup;
}

- (id<OrgOssPdfreporterEngineJRLineBox>)getLineBox {
  return lineBox_ == nil ? initLineBox_ : lineBox_;
}

- (char)getHyperlinkType {
  return [((OrgOssPdfreporterEngineTypeHyperlinkTypeEnumEnum *) nil_chk([self getHyperlinkTypeValue])) getValue];
}

- (OrgOssPdfreporterEngineTypeHyperlinkTypeEnumEnum *)getHyperlinkTypeValue {
  return [((id<OrgOssPdfreporterEngineJRImage>) parent_) getHyperlinkTypeValue];
}

- (char)getHyperlinkTarget {
  return [((id<OrgOssPdfreporterEngineJRImage>) self.parent) getHyperlinkTarget];
}

- (NSString *)getLinkTarget {
  return [((id<OrgOssPdfreporterEngineJRImage>) self.parent) getLinkTarget];
}

- (id<OrgOssPdfreporterEngineJRExpression>)getExpression {
  return [((id<OrgOssPdfreporterEngineJRImage>) self.parent) getExpression];
}

- (id<OrgOssPdfreporterEngineJRExpression>)getAnchorNameExpression {
  return [((id<OrgOssPdfreporterEngineJRImage>) self.parent) getAnchorNameExpression];
}

- (id<OrgOssPdfreporterEngineJRExpression>)getHyperlinkReferenceExpression {
  return [((id<OrgOssPdfreporterEngineJRImage>) self.parent) getHyperlinkReferenceExpression];
}

- (id<OrgOssPdfreporterEngineJRExpression>)getHyperlinkAnchorExpression {
  return [((id<OrgOssPdfreporterEngineJRImage>) self.parent) getHyperlinkAnchorExpression];
}

- (id<OrgOssPdfreporterEngineJRExpression>)getHyperlinkPageExpression {
  return [((id<OrgOssPdfreporterEngineJRImage>) self.parent) getHyperlinkPageExpression];
}

- (id<OrgOssPdfreporterEngineRenderable>)getRenderable {
  return self.renderer;
}

- (NSString *)getAnchorName {
  return self.anchorName;
}

- (NSString *)getHyperlinkReference {
  return self.hyperlinkReference;
}

- (NSString *)getHyperlinkAnchor {
  return self.hyperlinkAnchor;
}

- (JavaLangInteger *)getHyperlinkPage {
  return self.hyperlinkPage;
}

- (NSString *)getHyperlinkTooltip {
  return self.hyperlinkTooltip;
}

- (OrgOssPdfreporterEngineFillJRTemplateImage *)getJRTemplateImage {
  return (OrgOssPdfreporterEngineFillJRTemplateImage *) [self getElementTemplate];
}

- (OrgOssPdfreporterEngineFillJRTemplateElement *)createElementTemplate {
  OrgOssPdfreporterEngineFillJRTemplateImage *template_ = [[OrgOssPdfreporterEngineFillJRTemplateImage alloc] initWithOrgOssPdfreporterEngineJROrigin:[self getElementOrigin] withOrgOssPdfreporterEngineJRDefaultStyleProvider:[((OrgOssPdfreporterEngineJasperPrint *) nil_chk([((OrgOssPdfreporterEngineFillJRBaseFiller *) nil_chk(filler_)) getJasperPrint])) getDefaultStyleProvider] withOrgOssPdfreporterEngineJRImage:self];
  if ([self getScaleImageValue] == [OrgOssPdfreporterEngineTypeScaleImageEnumEnum REAL_HEIGHT] || [self getScaleImageValue] == [OrgOssPdfreporterEngineTypeScaleImageEnumEnum REAL_SIZE]) {
    [((OrgOssPdfreporterEngineFillJRTemplateImage *) nil_chk(template_)) setScaleImageWithOrgOssPdfreporterEngineTypeScaleImageEnumEnum:[OrgOssPdfreporterEngineTypeScaleImageEnumEnum RETAIN_SHAPE]];
  }
  return template_;
}

- (void)evaluateWithChar:(char)evaluation {
  [self initDelayedEvaluations];
  [self reset];
  [self evaluatePrintWhenExpressionWithChar:evaluation];
  if ([self isPrintWhenExpressionNull] || [self isPrintWhenTrue]) {
    if ([self isEvaluateNow]) {
      hasOverflowed_ = NO;
      [self evaluateImageWithChar:evaluation];
    }
  }
}

- (void)evaluateImageWithChar:(char)evaluation {
  [self evaluatePropertiesWithChar:evaluation];
  [self evaluateStyleWithChar:evaluation];
  id<OrgOssPdfreporterEngineJRExpression> expression = [self getExpression];
  id<OrgOssPdfreporterEngineRenderable> newRenderer = nil;
  id source = [self evaluateExpressionWithOrgOssPdfreporterEngineJRExpression:expression withChar:evaluation];
  if (source != nil) {
    JavaLangBoolean *isUsingCache = [self getUsingCache];
    if (isUsingCache == nil) {
      isUsingCache = [JavaLangBoolean valueOfWithBOOL:[source isKindOfClass:[NSString class]]];
    }
    if ([((JavaLangBoolean *) nil_chk(isUsingCache)) booleanValue] && [((OrgOssPdfreporterEngineFillJRFillContext *) nil_chk(((OrgOssPdfreporterEngineFillJRBaseFiller *) nil_chk(filler_)).fillContext)) hasLoadedImageWithId:source]) {
      newRenderer = [((id<OrgOssPdfreporterEngineJRPrintImage>) nil_chk([((OrgOssPdfreporterEngineFillJRFillContext *) nil_chk(((OrgOssPdfreporterEngineFillJRBaseFiller *) nil_chk(filler_)).fillContext)) getLoadedImageWithId:source])) getRenderable];
    }
    else {
      id<OrgOssPdfreporterEngineJRRenderable> deprecatedRenderable = [source conformsToProtocol: @protocol(OrgOssPdfreporterEngineJRRenderable)] ? (id<OrgOssPdfreporterEngineJRRenderable>) source : nil;
      if ([source conformsToProtocol: @protocol(OrgOssPdfreporterImageIImage)]) {
        id<OrgOssPdfreporterImageIImage> img = (id<OrgOssPdfreporterImageIImage>) source;
        newRenderer = [OrgOssPdfreporterEngineJRImageRenderer getInstanceWithOrgOssPdfreporterImageIImage:img];
      }
      else if ([source isKindOfClass:[JavaIoInputStream class]]) {
        JavaIoInputStream *is = (JavaIoInputStream *) source;
        [((JavaUtilLoggingLogger *) nil_chk(OrgOssPdfreporterEngineFillJRFillImage_logger_)) warningWithNSString:@"Image from input stream is not supported."];
      }
      else if ([source conformsToProtocol: @protocol(OrgOssPdfreporterNetIURL)]) {
        id<OrgOssPdfreporterNetIURL> url = (id<OrgOssPdfreporterNetIURL>) source;
        [((JavaUtilLoggingLogger *) nil_chk(OrgOssPdfreporterEngineFillJRFillImage_logger_)) warningWithNSString:[NSString stringWithFormat:@"Image from url is not supported. URL: %@", [((id<OrgOssPdfreporterNetIURL>) nil_chk(url)) getPath]]];
      }
      else if ([source isKindOfClass:[JavaIoFile class]]) {
        JavaIoFile *file = (JavaIoFile *) source;
        [((JavaUtilLoggingLogger *) nil_chk(OrgOssPdfreporterEngineFillJRFillImage_logger_)) warningWithNSString:[NSString stringWithFormat:@"Image from file is not supported. File: %@", [((JavaIoFile *) nil_chk(file)) getAbsolutePath]]];
      }
      else if ([source isKindOfClass:[NSString class]]) {
        NSString *location = (NSString *) source;
        newRenderer = [OrgOssPdfreporterEngineJRImageRenderer getInstanceWithNSString:location];
      }
      else if ([source conformsToProtocol: @protocol(OrgOssPdfreporterEngineRenderable)]) {
        newRenderer = (id<OrgOssPdfreporterEngineRenderable>) source;
      }
      else if (deprecatedRenderable != nil) {
        [((JavaUtilLoggingLogger *) nil_chk(OrgOssPdfreporterEngineFillJRFillImage_logger_)) warningWithNSString:[NSString stringWithFormat:@"Image from deprecatedRenderable is not supported. Source: %@", deprecatedRenderable]];
      }
      else {
        [((JavaUtilLoggingLogger *) nil_chk(OrgOssPdfreporterEngineFillJRFillImage_logger_)) warningWithNSString:[NSString stringWithFormat:@"Image from unknown source is not supported. Source: %@", (source == nil ? @"null" : [[nil_chk(source) getClass] getName])]];
      }
      if ([((JavaLangBoolean *) nil_chk(isUsingCache)) booleanValue]) {
        id<OrgOssPdfreporterEngineJRPrintImage> img = [[OrgOssPdfreporterEngineFillJRTemplatePrintImage alloc] initWithOrgOssPdfreporterEngineFillJRTemplateImage:[self getJRTemplateImage] withInt:elementId_];
        [((id<OrgOssPdfreporterEngineJRPrintImage>) nil_chk(img)) setRenderableWithOrgOssPdfreporterEngineRenderable:newRenderer];
        [((OrgOssPdfreporterEngineFillJRFillContext *) nil_chk(((OrgOssPdfreporterEngineFillJRBaseFiller *) nil_chk(filler_)).fillContext)) registerLoadedImageWithId:source withOrgOssPdfreporterEngineJRPrintImage:img];
      }
    }
  }
  [self setValueRepeatingWithBOOL:self.renderer == newRenderer];
  self.renderer = newRenderer;
  self.anchorName = (NSString *) [self evaluateExpressionWithOrgOssPdfreporterEngineJRExpression:[self getAnchorNameExpression] withChar:evaluation];
  self.hyperlinkReference = (NSString *) [self evaluateExpressionWithOrgOssPdfreporterEngineJRExpression:[self getHyperlinkReferenceExpression] withChar:evaluation];
  self.hyperlinkAnchor = (NSString *) [self evaluateExpressionWithOrgOssPdfreporterEngineJRExpression:[self getHyperlinkAnchorExpression] withChar:evaluation];
  self.hyperlinkPage = (JavaLangInteger *) [self evaluateExpressionWithOrgOssPdfreporterEngineJRExpression:[self getHyperlinkPageExpression] withChar:evaluation];
  self.hyperlinkTooltip = (NSString *) [self evaluateExpressionWithOrgOssPdfreporterEngineJRExpression:[self getHyperlinkTooltipExpression] withChar:evaluation];
  hyperlinkParameters_ = [OrgOssPdfreporterEngineFillJRFillHyperlinkHelper evaluateHyperlinkParametersWithOrgOssPdfreporterEngineJRHyperlink:self withOrgOssPdfreporterEngineFillJRFillExpressionEvaluator:expressionEvaluator_ withChar:evaluation];
}

- (BOOL)prepareWithInt:(int)availableHeight
              withBOOL:(BOOL)isOverflow {
  BOOL willOverflow = NO;
  if ([self isPrintWhenExpressionNull] || (![self isPrintWhenExpressionNull] && [self isPrintWhenTrue])) {
    [self setToPrintWithBOOL:YES];
  }
  else {
    [self setToPrintWithBOOL:NO];
  }
  if (![self isToPrint]) {
    return willOverflow;
  }
  BOOL isToPrint = YES;
  BOOL isReprinted = NO;
  if ([self isEvaluateNow]) {
    if (isOverflow && [self isAlreadyPrinted] && ![self isPrintWhenDetailOverflows]) {
      isToPrint = NO;
    }
    if (isToPrint && [self isPrintWhenExpressionNull] && ![self isPrintRepeatedValues] && [self isValueRepeating]) {
      if ((![self isPrintInFirstWholeBand] || ![((OrgOssPdfreporterEngineFillJRFillBand *) nil_chk([self getBand])) isFirstWholeOnPageColumn]) && ([self getPrintWhenGroupChanges] == nil || ![((OrgOssPdfreporterEngineFillJRFillBand *) nil_chk([self getBand])) isNewGroupWithOrgOssPdfreporterEngineJRGroup:[self getPrintWhenGroupChanges]]) && (!isOverflow || ![self isPrintWhenDetailOverflows])) {
        isToPrint = NO;
      }
    }
    if (isToPrint && [self isRemoveLineWhenBlank] && [self getRenderable] == nil) {
      isToPrint = NO;
    }
    if (isToPrint) {
      if (availableHeight < [self getRelativeY] + [self getHeight]) {
        isToPrint = NO;
        willOverflow = YES;
      }
      else if (![self isLazy] && ([self getScaleImageValue] == [OrgOssPdfreporterEngineTypeScaleImageEnumEnum REAL_HEIGHT] || [self getScaleImageValue] == [OrgOssPdfreporterEngineTypeScaleImageEnumEnum REAL_SIZE])) {
        int padding = [((JavaLangInteger *) nil_chk([((id<OrgOssPdfreporterEngineJRLineBox>) nil_chk([self getLineBox])) getBottomPadding])) intValue] + [((JavaLangInteger *) nil_chk([((id<OrgOssPdfreporterEngineJRLineBox>) nil_chk([self getLineBox])) getTopPadding])) intValue];
        BOOL reprinted = isOverflow && ([self isPrintWhenDetailOverflows] && ([self isAlreadyPrinted] || (![self isAlreadyPrinted] && ![self isPrintRepeatedValues])));
        BOOL imageOverflowAllowed = [((OrgOssPdfreporterEngineFillJRBaseFiller *) nil_chk(filler_)) isBandOverFlowAllowed] && !reprinted && !hasOverflowed_;
        BOOL fits = [self fitImageWithInt:availableHeight - [self getRelativeY] - padding withBOOL:imageOverflowAllowed withOrgOssPdfreporterEngineTypeHorizontalAlignEnumEnum:[self getHorizontalAlignmentValue]];
        if (fits) {
          if (imageHeight_ != nil) {
            [self setStretchHeightWithInt:[imageHeight_ intValue] + padding];
          }
        }
        else {
          hasOverflowed_ = YES;
          isToPrint = NO;
          willOverflow = YES;
          [self setStretchHeightWithInt:availableHeight - [self getRelativeY] - padding];
        }
      }
    }
    if (isToPrint && isOverflow && ([self isPrintWhenDetailOverflows] && ([self isAlreadyPrinted] || (![self isAlreadyPrinted] && ![self isPrintRepeatedValues])))) {
      isReprinted = YES;
    }
  }
  else {
    if (isOverflow && [self isAlreadyPrinted] && ![self isPrintWhenDetailOverflows]) {
      isToPrint = NO;
    }
    if (isToPrint && availableHeight < [self getRelativeY] + [self getHeight]) {
      isToPrint = NO;
      willOverflow = YES;
    }
    if (isToPrint && isOverflow && ([self isPrintWhenDetailOverflows] && ([self isAlreadyPrinted] || (![self isAlreadyPrinted] && ![self isPrintRepeatedValues])))) {
      isReprinted = YES;
    }
  }
  [self setToPrintWithBOOL:isToPrint];
  [self setReprintedWithBOOL:isReprinted];
  return willOverflow;
}

- (void)reset {
  imageHeight_ = nil;
  imageWidth_ = nil;
  imageX_ = nil;
  [super reset];
}

- (BOOL)fitImageWithInt:(int)availableHeight
               withBOOL:(BOOL)overflowAllowed
withOrgOssPdfreporterEngineTypeHorizontalAlignEnumEnum:(OrgOssPdfreporterEngineTypeHorizontalAlignEnumEnum *)hAlign {
  imageHeight_ = nil;
  imageWidth_ = nil;
  imageX_ = nil;
  id<OrgOssPdfreporterGeometryIDimension> imageSize = renderer_ == nil ? nil : [((id<OrgOssPdfreporterEngineRenderable>) nil_chk(renderer_)) getDimensionWithOrgOssPdfreporterEngineJasperReportsContext:[((OrgOssPdfreporterEngineFillJRBaseFiller *) nil_chk(filler_)) getJasperReportsContext]];
  if (imageSize == nil) {
    return YES;
  }
  int realHeight = (int) [((id<OrgOssPdfreporterGeometryIDimension>) nil_chk(imageSize)) getHeight];
  int realWidth = (int) [((id<OrgOssPdfreporterGeometryIDimension>) nil_chk(imageSize)) getWidth];
  BOOL fitted;
  int reducedHeight = realHeight;
  int reducedWidth = realWidth;
  if (realWidth > [self getWidth]) {
    double wRatio = ((double) [self getWidth]) / realWidth;
    reducedHeight = (int) (wRatio * realHeight);
    reducedWidth = [self getWidth];
  }
  if (reducedHeight <= availableHeight) {
    imageHeight_ = [JavaLangInteger valueOfWithInt:reducedHeight];
    if ([self getScaleImageValue] == [OrgOssPdfreporterEngineTypeScaleImageEnumEnum REAL_SIZE]) {
      imageWidth_ = [JavaLangInteger valueOfWithInt:reducedWidth];
    }
    fitted = YES;
  }
  else if (overflowAllowed) {
    fitted = NO;
  }
  else {
    imageHeight_ = [JavaLangInteger valueOfWithInt:availableHeight];
    if ([self getScaleImageValue] == [OrgOssPdfreporterEngineTypeScaleImageEnumEnum REAL_SIZE]) {
      double hRatio = ((double) availableHeight) / realHeight;
      imageWidth_ = [JavaLangInteger valueOfWithInt:(int) (hRatio * realWidth)];
    }
    fitted = YES;
  }
  if (imageWidth_ != nil && [((JavaLangInteger *) nil_chk(imageWidth_)) intValue] != [self getWidth]) {
    switch ([hAlign ordinal]) {
      case OrgOssPdfreporterEngineTypeHorizontalAlignEnum_RIGHT:
      imageX_ = [JavaLangInteger valueOfWithInt:[self getX] + [self getWidth] - [((JavaLangInteger *) nil_chk(imageWidth_)) intValue]];
      break;
      case OrgOssPdfreporterEngineTypeHorizontalAlignEnum_CENTER:
      imageX_ = [JavaLangInteger valueOfWithInt:[self getX] + ([self getWidth] - [((JavaLangInteger *) nil_chk(imageWidth_)) intValue]) / 2];
      break;
      default:
      break;
    }
  }
  return fitted;
}

- (id<OrgOssPdfreporterEngineJRPrintElement>)fill {
  OrgOssPdfreporterEngineTypeEvaluationTimeEnumEnum *evaluationTime = [self getEvaluationTimeValue];
  OrgOssPdfreporterEngineFillJRTemplatePrintImage *printImage;
  OrgOssPdfreporterEngineFillJRRecordedValuesPrintImage *recordedValuesImage;
  if ([self isEvaluateAuto]) {
    printImage = recordedValuesImage = [[OrgOssPdfreporterEngineFillJRRecordedValuesPrintImage alloc] initWithOrgOssPdfreporterEngineFillJRTemplateImage:[self getJRTemplateImage] withInt:elementId_];
  }
  else {
    printImage = [[OrgOssPdfreporterEngineFillJRTemplatePrintImage alloc] initWithOrgOssPdfreporterEngineFillJRTemplateImage:[self getJRTemplateImage] withInt:elementId_];
    recordedValuesImage = nil;
  }
  [((OrgOssPdfreporterEngineFillJRTemplatePrintImage *) nil_chk(printImage)) setUUIDWithOrgOssPdfreporterUsesJavaUtilUUID:[self getUUID]];
  [((OrgOssPdfreporterEngineFillJRTemplatePrintImage *) nil_chk(printImage)) setXWithInt:[self getX]];
  [((OrgOssPdfreporterEngineFillJRTemplatePrintImage *) nil_chk(printImage)) setYWithInt:[self getRelativeY]];
  [((OrgOssPdfreporterEngineFillJRTemplatePrintImage *) nil_chk(printImage)) setWidthWithInt:[self getWidth]];
  [((OrgOssPdfreporterEngineFillJRTemplatePrintImage *) nil_chk(printImage)) setHeightWithInt:[self getStretchHeight]];
  if ([self isEvaluateNow]) {
    [self copy__WithOrgOssPdfreporterEngineJRPrintImage:printImage];
  }
  else if ([self isEvaluateAuto]) {
    [self initDelayedEvaluationPrintWithOrgOssPdfreporterEngineFillJRRecordedValuesPrintElement:recordedValuesImage];
  }
  else {
    [((OrgOssPdfreporterEngineFillJRBaseFiller *) nil_chk(filler_)) addBoundElementWithOrgOssPdfreporterEngineFillJRFillElement:self withOrgOssPdfreporterEngineJRPrintElement:printImage withOrgOssPdfreporterEngineTypeEvaluationTimeEnumEnum:evaluationTime withOrgOssPdfreporterEngineJRGroup:[self getEvaluationGroup] withOrgOssPdfreporterEngineFillJRFillBand:band_];
  }
  return printImage;
}

- (void)copy__WithOrgOssPdfreporterEngineJRPrintImage:(id<OrgOssPdfreporterEngineJRPrintImage>)printImage OBJC_METHOD_FAMILY_NONE {
  [((id<OrgOssPdfreporterEngineJRPrintImage>) nil_chk(printImage)) setUUIDWithOrgOssPdfreporterUsesJavaUtilUUID:[self getUUID]];
  if (imageX_ != nil) {
    [((id<OrgOssPdfreporterEngineJRPrintImage>) nil_chk(printImage)) setXWithInt:[imageX_ intValue]];
  }
  if (imageWidth_ != nil) {
    [((id<OrgOssPdfreporterEngineJRPrintImage>) nil_chk(printImage)) setWidthWithInt:[imageWidth_ intValue]];
  }
  [((id<OrgOssPdfreporterEngineJRPrintImage>) nil_chk(printImage)) setRenderableWithOrgOssPdfreporterEngineRenderable:[self getRenderable]];
  [((id<OrgOssPdfreporterEngineJRPrintImage>) nil_chk(printImage)) setAnchorNameWithNSString:[self getAnchorName]];
  [((id<OrgOssPdfreporterEngineJRPrintImage>) nil_chk(printImage)) setHyperlinkReferenceWithNSString:[self getHyperlinkReference]];
  [((id<OrgOssPdfreporterEngineJRPrintImage>) nil_chk(printImage)) setHyperlinkAnchorWithNSString:[self getHyperlinkAnchor]];
  [((id<OrgOssPdfreporterEngineJRPrintImage>) nil_chk(printImage)) setHyperlinkPageWithJavaLangInteger:[self getHyperlinkPage]];
  [((id<OrgOssPdfreporterEngineJRPrintImage>) nil_chk(printImage)) setHyperlinkTooltipWithNSString:[self getHyperlinkTooltip]];
  [((id<OrgOssPdfreporterEngineJRPrintImage>) nil_chk(printImage)) setBookmarkLevelWithInt:[self getBookmarkLevel]];
  [((id<OrgOssPdfreporterEngineJRPrintImage>) nil_chk(printImage)) setHyperlinkParametersWithOrgOssPdfreporterEngineJRPrintHyperlinkParameters:hyperlinkParameters_];
  [self transferPropertiesWithOrgOssPdfreporterEngineJRPrintElement:printImage];
}

- (void)collectExpressionsWithOrgOssPdfreporterEngineJRExpressionCollector:(OrgOssPdfreporterEngineJRExpressionCollector *)collector {
  [((OrgOssPdfreporterEngineJRExpressionCollector *) nil_chk(collector)) collectWithOrgOssPdfreporterEngineJRImage:self];
}

- (void)visitWithOrgOssPdfreporterEngineJRVisitor:(id<OrgOssPdfreporterEngineJRVisitor>)visitor {
  [((id<OrgOssPdfreporterEngineJRVisitor>) nil_chk(visitor)) visitImageWithOrgOssPdfreporterEngineJRImage:self];
}

- (void)resolveElementWithOrgOssPdfreporterEngineJRPrintElement:(id<OrgOssPdfreporterEngineJRPrintElement>)element
                                                       withChar:(char)evaluation {
  [self evaluateImageWithChar:evaluation];
  id<OrgOssPdfreporterEngineJRPrintImage> printImage = (id<OrgOssPdfreporterEngineJRPrintImage>) element;
  if ([self getScaleImageValue] == [OrgOssPdfreporterEngineTypeScaleImageEnumEnum REAL_SIZE]) {
    int padding = [((JavaLangInteger *) nil_chk([((id<OrgOssPdfreporterEngineJRLineBox>) nil_chk([((id<OrgOssPdfreporterEngineJRPrintImage>) nil_chk(printImage)) getLineBox])) getBottomPadding])) intValue] + [((JavaLangInteger *) nil_chk([((id<OrgOssPdfreporterEngineJRLineBox>) nil_chk([((id<OrgOssPdfreporterEngineJRPrintImage>) nil_chk(printImage)) getLineBox])) getTopPadding])) intValue];
    [self fitImageWithInt:[self getHeight] - padding withBOOL:NO withOrgOssPdfreporterEngineTypeHorizontalAlignEnumEnum:[((id<OrgOssPdfreporterEngineJRPrintImage>) nil_chk(printImage)) getHorizontalAlignmentValue]];
  }
  [self copy__WithOrgOssPdfreporterEngineJRPrintImage:printImage];
}

- (int)getBookmarkLevel {
  return [((id<OrgOssPdfreporterEngineJRImage>) self.parent) getBookmarkLevel];
}

- (id<OrgOssPdfreporterEngineFillJRFillCloneable>)createCloneWithOrgOssPdfreporterEngineFillJRFillCloneFactory:(OrgOssPdfreporterEngineFillJRFillCloneFactory *)factory {
  return [[OrgOssPdfreporterEngineFillJRFillImage alloc] initWithOrgOssPdfreporterEngineFillJRFillImage:self withOrgOssPdfreporterEngineFillJRFillCloneFactory:factory];
}

- (void)collectDelayedEvaluations {
  [super collectDelayedEvaluations];
  [self collectDelayedEvaluationsWithOrgOssPdfreporterEngineJRExpression:[self getExpression]];
  [self collectDelayedEvaluationsWithOrgOssPdfreporterEngineJRExpression:[self getAnchorNameExpression]];
  [self collectDelayedEvaluationsWithOrgOssPdfreporterEngineJRExpression:[self getHyperlinkReferenceExpression]];
  [self collectDelayedEvaluationsWithOrgOssPdfreporterEngineJRExpression:[self getHyperlinkAnchorExpression]];
  [self collectDelayedEvaluationsWithOrgOssPdfreporterEngineJRExpression:[self getHyperlinkPageExpression]];
}

- (IOSObjectArray *)getHyperlinkParameters {
  return [((id<OrgOssPdfreporterEngineJRImage>) parent_) getHyperlinkParameters];
}

- (NSString *)getLinkType {
  return [((id<OrgOssPdfreporterEngineJRImage>) parent_) getLinkType];
}

- (id<OrgOssPdfreporterEngineJRExpression>)getHyperlinkTooltipExpression {
  return [((id<OrgOssPdfreporterEngineJRImage>) parent_) getHyperlinkTooltipExpression];
}

+ (void)initialize {
  if (self == [OrgOssPdfreporterEngineFillJRFillImage class]) {
    OrgOssPdfreporterEngineFillJRFillImage_logger_ = [JavaUtilLoggingLogger getLoggerWithNSString:[[IOSClass classWithClass:[OrgOssPdfreporterEngineFillJRFillImage class]] getName]];
  }
}

- (void)copyAllPropertiesTo:(id)copy {
  [super copyAllPropertiesTo:copy];
  OrgOssPdfreporterEngineFillJRFillImage *typedCopy = (OrgOssPdfreporterEngineFillJRFillImage *) copy;
  typedCopy.evaluationGroup = evaluationGroup_;
  typedCopy.renderer = renderer_;
  typedCopy.hasOverflowed = hasOverflowed_;
  typedCopy.imageHeight = imageHeight_;
  typedCopy.imageWidth = imageWidth_;
  typedCopy.imageX = imageX_;
  typedCopy.anchorName = anchorName_;
  typedCopy.hyperlinkReference = hyperlinkReference_;
  typedCopy.hyperlinkAnchor = hyperlinkAnchor_;
  typedCopy.hyperlinkPage = hyperlinkPage_;
  typedCopy.hyperlinkTooltip = hyperlinkTooltip_;
  typedCopy.hyperlinkParameters = hyperlinkParameters_;
  typedCopy.initLineBox = initLineBox_;
  typedCopy.lineBox = lineBox_;
}

@end
