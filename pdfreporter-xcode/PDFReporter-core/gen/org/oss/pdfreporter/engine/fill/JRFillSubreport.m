//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: pdfreporter-core/src/org/oss/pdfreporter/engine/fill/JRFillSubreport.java
//
//  Created by kendra on 9/27/13.
//

#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "java/io/File.h"
#include "java/io/InputStream.h"
#include "java/lang/Boolean.h"
#include "java/lang/RuntimeException.h"
#include "java/lang/Throwable.h"
#include "java/lang/UnsupportedOperationException.h"
#include "java/util/ArrayList.h"
#include "java/util/Collection.h"
#include "java/util/HashMap.h"
#include "java/util/HashSet.h"
#include "java/util/List.h"
#include "java/util/Locale.h"
#include "java/util/Map.h"
#include "java/util/Set.h"
#include "java/util/TimeZone.h"
#include "org/oss/pdfreporter/data/cache/DataCacheHandler.h"
#include "org/oss/pdfreporter/engine/JRDataSource.h"
#include "org/oss/pdfreporter/engine/JRDatasetParameter.h"
#include "org/oss/pdfreporter/engine/JRDefaultStyleProvider.h"
#include "org/oss/pdfreporter/engine/JRException.h"
#include "org/oss/pdfreporter/engine/JRExpression.h"
#include "org/oss/pdfreporter/engine/JRExpressionCollector.h"
#include "org/oss/pdfreporter/engine/JROrigin.h"
#include "org/oss/pdfreporter/engine/JRParameter.h"
#include "org/oss/pdfreporter/engine/JRPrintElement.h"
#include "org/oss/pdfreporter/engine/JRPrintPage.h"
#include "org/oss/pdfreporter/engine/JRPrintRectangle.h"
#include "org/oss/pdfreporter/engine/JRPropertiesUtil.h"
#include "org/oss/pdfreporter/engine/JRRewindableDataSource.h"
#include "org/oss/pdfreporter/engine/JRRuntimeException.h"
#include "org/oss/pdfreporter/engine/JRScriptlet.h"
#include "org/oss/pdfreporter/engine/JRSubreport.h"
#include "org/oss/pdfreporter/engine/JRSubreportReturnValue.h"
#include "org/oss/pdfreporter/engine/JRVariable.h"
#include "org/oss/pdfreporter/engine/JRVisitor.h"
#include "org/oss/pdfreporter/engine/JasperCompileManager.h"
#include "org/oss/pdfreporter/engine/JasperPrint.h"
#include "org/oss/pdfreporter/engine/JasperReport.h"
#include "org/oss/pdfreporter/engine/JasperReportsContext.h"
#include "org/oss/pdfreporter/engine/ReportContext.h"
#include "org/oss/pdfreporter/engine/base/JRVirtualPrintPage.h"
#include "org/oss/pdfreporter/engine/design/JRDesignSubreportReturnValue.h"
#include "org/oss/pdfreporter/engine/design/JRValidationException.h"
#include "org/oss/pdfreporter/engine/design/JRVerifier.h"
#include "org/oss/pdfreporter/engine/fill/AbstractValueProvider.h"
#include "org/oss/pdfreporter/engine/fill/DatasetExpressionEvaluator.h"
#include "org/oss/pdfreporter/engine/fill/FillContainerContext.h"
#include "org/oss/pdfreporter/engine/fill/FillDatasetPosition.h"
#include "org/oss/pdfreporter/engine/fill/JRBaseFiller.h"
#include "org/oss/pdfreporter/engine/fill/JREvaluator.h"
#include "org/oss/pdfreporter/engine/fill/JRFillBand.h"
#include "org/oss/pdfreporter/engine/fill/JRFillCloneFactory.h"
#include "org/oss/pdfreporter/engine/fill/JRFillCloneable.h"
#include "org/oss/pdfreporter/engine/fill/JRFillContext.h"
#include "org/oss/pdfreporter/engine/fill/JRFillDataset.h"
#include "org/oss/pdfreporter/engine/fill/JRFillElement.h"
#include "org/oss/pdfreporter/engine/fill/JRFillExpressionEvaluator.h"
#include "org/oss/pdfreporter/engine/fill/JRFillObjectFactory.h"
#include "org/oss/pdfreporter/engine/fill/JRFillSubreport.h"
#include "org/oss/pdfreporter/engine/fill/JRFillSubreportReturnValue.h"
#include "org/oss/pdfreporter/engine/fill/JRFillVariable.h"
#include "org/oss/pdfreporter/engine/fill/JRHorizontalFiller.h"
#include "org/oss/pdfreporter/engine/fill/JRIncrementer.h"
#include "org/oss/pdfreporter/engine/fill/JRSubreportRunResult.h"
#include "org/oss/pdfreporter/engine/fill/JRSubreportRunner.h"
#include "org/oss/pdfreporter/engine/fill/JRSubreportRunnerFactory.h"
#include "org/oss/pdfreporter/engine/fill/JRTemplateElement.h"
#include "org/oss/pdfreporter/engine/fill/JRTemplatePrintRectangle.h"
#include "org/oss/pdfreporter/engine/fill/JRTemplateRectangle.h"
#include "org/oss/pdfreporter/engine/fill/JRVerticalFiller.h"
#include "org/oss/pdfreporter/engine/type/CalculationEnum.h"
#include "org/oss/pdfreporter/engine/type/ModeEnum.h"
#include "org/oss/pdfreporter/engine/type/PrintOrderEnum.h"
#include "org/oss/pdfreporter/engine/util/JRLoader.h"
#include "org/oss/pdfreporter/engine/util/JRSingletonCache.h"
#include "org/oss/pdfreporter/engine/util/JRStyleResolver.h"
#include "org/oss/pdfreporter/net/IURL.h"
#include "org/oss/pdfreporter/repo/SubreportUtil.h"
#include "org/oss/pdfreporter/sql/IConnection.h"
#include "org/oss/pdfreporter/text/format/factory/IFormatFactory.h"
#include "org/oss/pdfreporter/uses/java/util/UUID.h"

@implementation OrgOssPdfreporterEngineFillJRFillSubreport

static OrgOssPdfreporterEngineUtilJRSingletonCache * OrgOssPdfreporterEngineFillJRFillSubreport_runnerFactoryCache_;

@synthesize parameterValues = parameterValues_;
@synthesize parameters = parameters_;
@synthesize datasetPosition = datasetPosition_;
@synthesize cacheIncluded = cacheIncluded_;
@synthesize connection = connection_;
@synthesize dataSource = dataSource_;
@synthesize jasperReport = jasperReport_;
@synthesize source = source_;
@synthesize loadedEvaluators = loadedEvaluators_;
@synthesize returnValues = returnValues_;
@synthesize subreportFiller = subreportFiller_;
@synthesize printPage = printPage_;
@synthesize runner = runner_;
@synthesize checkedReports = checkedReports_;

+ (OrgOssPdfreporterEngineUtilJRSingletonCache *)runnerFactoryCache {
  return OrgOssPdfreporterEngineFillJRFillSubreport_runnerFactoryCache_;
}

- (id)initWithOrgOssPdfreporterEngineFillJRBaseFiller:(OrgOssPdfreporterEngineFillJRBaseFiller *)filler
               withOrgOssPdfreporterEngineJRSubreport:(id<OrgOssPdfreporterEngineJRSubreport>)subreport
   withOrgOssPdfreporterEngineFillJRFillObjectFactory:(OrgOssPdfreporterEngineFillJRFillObjectFactory *)factory {
  if ((self = [super initWithOrgOssPdfreporterEngineFillJRBaseFiller:filler withOrgOssPdfreporterEngineJRElement:subreport withOrgOssPdfreporterEngineFillJRFillObjectFactory:factory])) {
    parameters_ = [((id<OrgOssPdfreporterEngineJRSubreport>) nil_chk(subreport)) getParameters];
    IOSObjectArray *subrepReturnValues = [((id<OrgOssPdfreporterEngineJRSubreport>) nil_chk(subreport)) getReturnValues];
    if (subrepReturnValues != nil) {
      id<JavaUtilList> returnValuesList = [[JavaUtilArrayList alloc] initWithInt:(int) [subrepReturnValues count] * 2];
      returnValues_ = [IOSObjectArray arrayWithLength:(int) [subrepReturnValues count] type:[IOSClass classWithClass:[OrgOssPdfreporterEngineFillJRFillSubreportReturnValue class]]];
      for (int i = 0; i < (int) [subrepReturnValues count]; i++) {
        (void) [self addReturnValueWithOrgOssPdfreporterEngineJRSubreportReturnValue:[subrepReturnValues objectAtIndex:i] withJavaUtilList:returnValuesList withOrgOssPdfreporterEngineFillJRFillObjectFactory:factory];
      }
      returnValues_ = [IOSObjectArray arrayWithLength:[((id<JavaUtilList>) nil_chk(returnValuesList)) size] type:[IOSClass classWithClass:[OrgOssPdfreporterEngineFillJRFillSubreportReturnValue class]]];
      (void) [((id<JavaUtilList>) nil_chk(returnValuesList)) toArrayWithNSObjectArray:returnValues_];
    }
    loadedEvaluators_ = [[JavaUtilHashMap alloc] init];
    checkedReports_ = [[JavaUtilHashSet alloc] init];
  }
  return self;
}

- (OrgOssPdfreporterEngineTypeModeEnumEnum *)getModeValue {
  return [OrgOssPdfreporterEngineUtilJRStyleResolver getModeWithOrgOssPdfreporterEngineJRCommonElement:self withOrgOssPdfreporterEngineTypeModeEnumEnum:[OrgOssPdfreporterEngineTypeModeEnumEnum TRANSPARENT]];
}

- (BOOL)isUsingCache {
  return [((id<OrgOssPdfreporterEngineJRSubreport>) parent_) isUsingCache];
}

- (BOOL)usingCache {
  JavaLangBoolean *isUsingCache = [self getUsingCache];
  if (isUsingCache == nil) {
    return [source_ isKindOfClass:[NSString class]];
  }
  return [((JavaLangBoolean *) nil_chk(isUsingCache)) booleanValue];
}

- (JavaLangBoolean *)isRunToBottom {
  return [((id<OrgOssPdfreporterEngineJRSubreport>) parent_) isRunToBottom];
}

- (void)setRunToBottomWithJavaLangBoolean:(JavaLangBoolean *)runToBottom {
  @throw [[JavaLangUnsupportedOperationException alloc] init];
}

- (id<OrgOssPdfreporterEngineJRExpression>)getParametersMapExpression {
  return [((id<OrgOssPdfreporterEngineJRSubreport>) parent_) getParametersMapExpression];
}

- (IOSObjectArray *)getParameters {
  return parameters_;
}

- (id<OrgOssPdfreporterEngineJRExpression>)getConnectionExpression {
  return [((id<OrgOssPdfreporterEngineJRSubreport>) parent_) getConnectionExpression];
}

- (id<OrgOssPdfreporterEngineJRExpression>)getDataSourceExpression {
  return [((id<OrgOssPdfreporterEngineJRSubreport>) parent_) getDataSourceExpression];
}

- (id<OrgOssPdfreporterEngineJRExpression>)getExpression {
  return [((id<OrgOssPdfreporterEngineJRSubreport>) parent_) getExpression];
}

- (OrgOssPdfreporterEngineFillJRTemplateRectangle *)getJRTemplateRectangle {
  return (OrgOssPdfreporterEngineFillJRTemplateRectangle *) [self getElementTemplate];
}

- (OrgOssPdfreporterEngineFillJRTemplateElement *)createElementTemplate {
  return [[OrgOssPdfreporterEngineFillJRTemplateRectangle alloc] initWithOrgOssPdfreporterEngineJROrigin:[self getElementOrigin] withOrgOssPdfreporterEngineJRDefaultStyleProvider:[((OrgOssPdfreporterEngineJasperPrint *) nil_chk([((OrgOssPdfreporterEngineFillJRBaseFiller *) nil_chk(filler_)) getJasperPrint])) getDefaultStyleProvider] withOrgOssPdfreporterEngineJRSubreport:self];
}

- (id<JavaUtilCollection>)getPrintElements {
  id<JavaUtilCollection> printElements = nil;
  if (printPage_ != nil) {
    printElements = [printPage_ getElements];
  }
  return printElements;
}

- (void)subreportPageFilled {
  if (printPage_ != nil) {
    [((OrgOssPdfreporterEngineFillJRBaseFiller *) nil_chk(subreportFiller_)) subreportPageFilledWithOrgOssPdfreporterEngineJRPrintPage:printPage_];
  }
}

- (void)evaluateWithChar:(char)evaluation {
  [self reset];
  [self evaluatePrintWhenExpressionWithChar:evaluation];
  if ([self isPrintWhenExpressionNull] || [self isPrintWhenTrue]) {
    [self evaluateSubreportWithChar:evaluation];
  }
}

- (OrgOssPdfreporterEngineJasperReport *)evaluateReportWithChar:(char)evaluation {
  OrgOssPdfreporterEngineJasperReport *report = nil;
  id<OrgOssPdfreporterEngineJRExpression> expression = [self getExpression];
  source_ = [self evaluateExpressionWithOrgOssPdfreporterEngineJRExpression:expression withChar:evaluation];
  if (source_ != nil) {
    JavaLangBoolean *isUsingCache = [self getUsingCache];
    if (isUsingCache == nil) {
      isUsingCache = [JavaLangBoolean valueOfWithBOOL:[source_ isKindOfClass:[NSString class]]];
    }
    if ([((JavaLangBoolean *) nil_chk(isUsingCache)) booleanValue] && [((OrgOssPdfreporterEngineFillJRFillContext *) nil_chk(((OrgOssPdfreporterEngineFillJRBaseFiller *) nil_chk(filler_)).fillContext)) hasLoadedSubreportWithId:source_]) {
      report = [((OrgOssPdfreporterEngineFillJRFillContext *) nil_chk(((OrgOssPdfreporterEngineFillJRBaseFiller *) nil_chk(filler_)).fillContext)) getLoadedSubreportWithId:source_];
    }
    else {
      if ([source_ isKindOfClass:[OrgOssPdfreporterEngineJasperReport class]]) {
        report = (OrgOssPdfreporterEngineJasperReport *) source_;
      }
      else if ([source_ isKindOfClass:[JavaIoInputStream class]]) {
        report = (OrgOssPdfreporterEngineJasperReport *) [OrgOssPdfreporterEngineUtilJRLoader loadObjectWithJavaIoInputStream:(JavaIoInputStream *) source_];
      }
      else if ([source_ conformsToProtocol: @protocol(OrgOssPdfreporterNetIURL)]) {
        report = (OrgOssPdfreporterEngineJasperReport *) [OrgOssPdfreporterEngineUtilJRLoader loadObjectWithOrgOssPdfreporterNetIURL:(id<OrgOssPdfreporterNetIURL>) source_];
      }
      else if ([source_ isKindOfClass:[JavaIoFile class]]) {
        report = (OrgOssPdfreporterEngineJasperReport *) [OrgOssPdfreporterEngineUtilJRLoader loadObjectWithJavaIoFile:(JavaIoFile *) source_];
      }
      else if ([source_ isKindOfClass:[NSString class]]) {
        report = [OrgOssPdfreporterRepoSubreportUtil loadSubreportWithNSString:(NSString *) source_];
      }
      else {
        @throw [[OrgOssPdfreporterEngineJRRuntimeException alloc] initWithNSString:[NSString stringWithFormat:@"Unknown subreport source class %@", [[source_ getClass] getName]]];
      }
      if ([((JavaLangBoolean *) nil_chk(isUsingCache)) booleanValue]) {
        [((OrgOssPdfreporterEngineFillJRFillContext *) nil_chk(((OrgOssPdfreporterEngineFillJRBaseFiller *) nil_chk(filler_)).fillContext)) registerLoadedSubreportWithId:source_ withOrgOssPdfreporterEngineJasperReport:report];
      }
    }
  }
  return report;
}

- (void)evaluateSubreportWithChar:(char)evaluation {
  [self evaluatePropertiesWithChar:evaluation];
  [self evaluateStyleWithChar:evaluation];
  jasperReport_ = [self evaluateReportWithChar:evaluation];
  if (jasperReport_ != nil) {
    OrgOssPdfreporterEngineFillJRFillDataset *parentDataset = [((id<OrgOssPdfreporterEngineFillJRFillExpressionEvaluator>) nil_chk(expressionEvaluator_)) getFillDataset];
    datasetPosition_ = [[OrgOssPdfreporterEngineFillFillDatasetPosition alloc] initWithOrgOssPdfreporterEngineFillFillDatasetPosition:((OrgOssPdfreporterEngineFillJRFillDataset *) nil_chk(parentDataset)).fillPosition];
    [((OrgOssPdfreporterEngineFillFillDatasetPosition *) nil_chk(datasetPosition_)) addAttributeWithNSString:@"subreportUUID" withId:[self getUUID]];
    [((OrgOssPdfreporterEngineFillJRFillDataset *) nil_chk(parentDataset)) setCacheRecordIndexWithOrgOssPdfreporterEngineFillFillDatasetPosition:datasetPosition_ withChar:evaluation];
    connection_ = (id<OrgOssPdfreporterSqlIConnection>) [self evaluateExpressionWithOrgOssPdfreporterEngineJRExpression:[self getConnectionExpression] withChar:evaluation];
    NSString *cacheIncludedProp = [OrgOssPdfreporterEngineJRPropertiesUtil getOwnPropertyWithOrgOssPdfreporterEngineJRPropertiesHolder:self withNSString:[OrgOssPdfreporterDataCacheDataCacheHandler PROPERTY_INCLUDED]];
    cacheIncluded_ = [OrgOssPdfreporterEngineJRPropertiesUtil asBooleanWithNSString:cacheIncludedProp withBOOL:YES];
    if ([((OrgOssPdfreporterEngineFillJRFillContext *) nil_chk(((OrgOssPdfreporterEngineFillJRBaseFiller *) nil_chk(filler_)).fillContext)) hasDataSnapshot] && cacheIncluded_) {
      dataSource_ = nil;
    }
    else {
      dataSource_ = (id<OrgOssPdfreporterEngineJRDataSource>) [self evaluateExpressionWithOrgOssPdfreporterEngineJRExpression:[self getDataSourceExpression] withChar:evaluation];
    }
    parameterValues_ = [self evaluateParameterValuesWithChar:evaluation];
    if (subreportFiller_ != nil) {
      [((OrgOssPdfreporterEngineFillJRBaseFiller *) nil_chk(filler_)) unregisterSubfillerWithOrgOssPdfreporterEngineFillJRBaseFiller:subreportFiller_];
    }
    id<OrgOssPdfreporterEngineFillDatasetExpressionEvaluator> evaluator = [self loadReportEvaluator];
    [self initSubreportFillerWithOrgOssPdfreporterEngineFillDatasetExpressionEvaluator:evaluator];
    [self validateReport];
    [self saveReturnVariables];
  }
}

- (id<JavaUtilMap>)evaluateParameterValuesWithChar:(char)evaluation {
  return [OrgOssPdfreporterEngineFillJRFillSubreport getParameterValuesWithOrgOssPdfreporterEngineFillJRBaseFiller:filler_ withOrgOssPdfreporterEngineFillJRFillExpressionEvaluator:expressionEvaluator_ withOrgOssPdfreporterEngineJRExpression:[self getParametersMapExpression] withOrgOssPdfreporterEngineJRDatasetParameterArray:[self getParameters] withChar:evaluation withBOOL:NO withBOOL:[((OrgOssPdfreporterEngineJasperReport *) nil_chk(jasperReport_)) getResourceBundle] != nil withBOOL:[((OrgOssPdfreporterEngineJasperReport *) nil_chk(jasperReport_)) getFormatFactoryClass] != nil];
}

- (id<OrgOssPdfreporterEngineFillDatasetExpressionEvaluator>)loadReportEvaluator {
  id<OrgOssPdfreporterEngineFillDatasetExpressionEvaluator> evaluator = nil;
  BOOL usingCache = [self usingCache];
  if (usingCache) {
    evaluator = [((id<JavaUtilMap>) nil_chk(loadedEvaluators_)) getWithId:jasperReport_];
  }
  if (evaluator == nil) {
    evaluator = [self createEvaluator];
    if (usingCache) {
      (void) [((id<JavaUtilMap>) nil_chk(loadedEvaluators_)) putWithId:jasperReport_ withId:(OrgOssPdfreporterEngineFillJREvaluator *) evaluator];
    }
  }
  return evaluator;
}

- (id<OrgOssPdfreporterEngineFillDatasetExpressionEvaluator>)createEvaluator {
  return (id<OrgOssPdfreporterEngineFillDatasetExpressionEvaluator>) [((OrgOssPdfreporterEngineJasperCompileManager *) nil_chk([OrgOssPdfreporterEngineJasperCompileManager getInstanceWithOrgOssPdfreporterEngineJasperReportsContext:[((OrgOssPdfreporterEngineFillJRBaseFiller *) nil_chk(filler_)) getJasperReportsContext]])) getEvaluatorWithOrgOssPdfreporterEngineJasperReport:jasperReport_];
}

- (void)initSubreportFillerWithOrgOssPdfreporterEngineFillDatasetExpressionEvaluator:(id<OrgOssPdfreporterEngineFillDatasetExpressionEvaluator>)evaluator OBJC_METHOD_FAMILY_NONE {
  switch ([[((OrgOssPdfreporterEngineJasperReport *) nil_chk(jasperReport_)) getPrintOrderValue] ordinal]) {
    case OrgOssPdfreporterEngineTypePrintOrderEnum_HORIZONTAL:
    {
      subreportFiller_ = [[OrgOssPdfreporterEngineFillJRHorizontalFiller alloc] initWithOrgOssPdfreporterEngineJasperReportsContext:[((OrgOssPdfreporterEngineFillJRBaseFiller *) nil_chk(filler_)) getJasperReportsContext] withOrgOssPdfreporterEngineJasperReport:jasperReport_ withOrgOssPdfreporterEngineFillDatasetExpressionEvaluator:evaluator withOrgOssPdfreporterEngineFillJRFillSubreport:self];
      break;
    }
    case OrgOssPdfreporterEngineTypePrintOrderEnum_VERTICAL:
    {
      subreportFiller_ = [[OrgOssPdfreporterEngineFillJRVerticalFiller alloc] initWithOrgOssPdfreporterEngineJasperReportsContext:[((OrgOssPdfreporterEngineFillJRBaseFiller *) nil_chk(filler_)) getJasperReportsContext] withOrgOssPdfreporterEngineJasperReport:jasperReport_ withOrgOssPdfreporterEngineFillDatasetExpressionEvaluator:evaluator withOrgOssPdfreporterEngineFillJRFillSubreport:self];
      break;
    }
    default:
    {
      @throw [[OrgOssPdfreporterEngineJRRuntimeException alloc] initWithNSString:[NSString stringWithFormat:@"Unkown print order %d.", [((OrgOssPdfreporterEngineTypePrintOrderEnumEnum *) nil_chk([((OrgOssPdfreporterEngineJasperReport *) nil_chk(jasperReport_)) getPrintOrderValue])) getValue]]];
    }
  }
  runner_ = [((id<OrgOssPdfreporterEngineFillJRSubreportRunnerFactory>) nil_chk([self getRunnerFactory])) createSubreportRunnerWithOrgOssPdfreporterEngineFillJRFillSubreport:self withOrgOssPdfreporterEngineFillJRBaseFiller:subreportFiller_];
  [((OrgOssPdfreporterEngineFillJRBaseFiller *) nil_chk(subreportFiller_)) setSubreportRunnerWithOrgOssPdfreporterEngineFillJRSubreportRunner:runner_];
  [((OrgOssPdfreporterEngineFillJRFillDataset *) nil_chk(((OrgOssPdfreporterEngineFillJRBaseFiller *) nil_chk(subreportFiller_)).mainDataset)) setFillPositionWithOrgOssPdfreporterEngineFillFillDatasetPosition:datasetPosition_];
  [((OrgOssPdfreporterEngineFillJRFillDataset *) nil_chk(((OrgOssPdfreporterEngineFillJRBaseFiller *) nil_chk(subreportFiller_)).mainDataset)) setCacheSkippedWithBOOL:!cacheIncluded_];
}

- (void)saveReturnVariables {
  if (returnValues_ != nil) {
    for (int i = 0; i < (int) [returnValues_ count]; i++) {
      NSString *varName = [((OrgOssPdfreporterEngineFillJRFillSubreportReturnValue *) nil_chk([returnValues_ objectAtIndex:i])) getToVariable];
      [((OrgOssPdfreporterEngineFillJRFillBand *) nil_chk(band_)) saveVariableWithNSString:varName];
    }
  }
}

+ (id<JavaUtilMap>)getParameterValuesWithOrgOssPdfreporterEngineFillJRBaseFiller:(OrgOssPdfreporterEngineFillJRBaseFiller *)filler
                                         withOrgOssPdfreporterEngineJRExpression:(id<OrgOssPdfreporterEngineJRExpression>)parametersMapExpression
                              withOrgOssPdfreporterEngineJRDatasetParameterArray:(IOSObjectArray *)subreportParameters
                                                                        withChar:(char)evaluation
                                                                        withBOOL:(BOOL)ignoreNullExpressions
                                                                        withBOOL:(BOOL)removeResourceBundle
                                                                        withBOOL:(BOOL)removeFormatFactory {
  return [OrgOssPdfreporterEngineFillJRFillSubreport getParameterValuesWithOrgOssPdfreporterEngineFillJRBaseFiller:filler withOrgOssPdfreporterEngineFillJRFillExpressionEvaluator:[((OrgOssPdfreporterEngineFillJRBaseFiller *) nil_chk(filler)) getExpressionEvaluator] withOrgOssPdfreporterEngineJRExpression:parametersMapExpression withOrgOssPdfreporterEngineJRDatasetParameterArray:subreportParameters withChar:evaluation withBOOL:ignoreNullExpressions withBOOL:removeResourceBundle withBOOL:removeFormatFactory];
}

+ (id<JavaUtilMap>)getParameterValuesWithOrgOssPdfreporterEngineFillJRBaseFiller:(OrgOssPdfreporterEngineFillJRBaseFiller *)filler
                        withOrgOssPdfreporterEngineFillJRFillExpressionEvaluator:(id<OrgOssPdfreporterEngineFillJRFillExpressionEvaluator>)expressionEvaluator
                                         withOrgOssPdfreporterEngineJRExpression:(id<OrgOssPdfreporterEngineJRExpression>)parametersMapExpression
                              withOrgOssPdfreporterEngineJRDatasetParameterArray:(IOSObjectArray *)subreportParameters
                                                                        withChar:(char)evaluation
                                                                        withBOOL:(BOOL)ignoreNullExpressions
                                                                        withBOOL:(BOOL)removeResourceBundle
                                                                        withBOOL:(BOOL)removeFormatFactory {
  id<JavaUtilMap> parameterValues = nil;
  if (parametersMapExpression != nil) {
    parameterValues = (id<JavaUtilMap>) [((id<OrgOssPdfreporterEngineFillJRFillExpressionEvaluator>) nil_chk(expressionEvaluator)) evaluateWithOrgOssPdfreporterEngineJRExpression:parametersMapExpression withChar:evaluation];
  }
  if (parameterValues != nil) {
    if (parameterValues == [((OrgOssPdfreporterEngineFillJRBaseFiller *) nil_chk(filler)) getParameterValuesMap]) {
      parameterValues = [[JavaUtilHashMap alloc] initWithJavaUtilMap:parameterValues];
    }
    if (removeResourceBundle) {
      (void) [parameterValues removeWithId:[OrgOssPdfreporterEngineJRParameter REPORT_RESOURCE_BUNDLE]];
    }
    if (removeFormatFactory) {
      (void) [parameterValues removeWithId:[OrgOssPdfreporterEngineJRParameter REPORT_FORMAT_FACTORY]];
    }
    (void) [parameterValues removeWithId:[OrgOssPdfreporterEngineJRParameter JASPER_REPORT]];
    (void) [parameterValues removeWithId:[OrgOssPdfreporterEngineJRParameter REPORT_CONNECTION]];
    (void) [parameterValues removeWithId:[OrgOssPdfreporterEngineJRParameter REPORT_MAX_COUNT]];
    (void) [parameterValues removeWithId:[OrgOssPdfreporterEngineJRParameter REPORT_DATA_SOURCE]];
    (void) [parameterValues removeWithId:[OrgOssPdfreporterEngineJRParameter REPORT_SCRIPTLET]];
    IOSObjectArray *scriptlets = [((OrgOssPdfreporterEngineJasperReport *) nil_chk([((OrgOssPdfreporterEngineFillJRBaseFiller *) nil_chk(filler)) getJasperReport])) getScriptlets];
    if (scriptlets != nil) {
      for (int i = 0; i < (int) [scriptlets count]; i++) {
        (void) [((id<JavaUtilMap>) nil_chk(parameterValues)) removeWithId:[NSString stringWithFormat:@"%@_SCRIPTLET", [((id<OrgOssPdfreporterEngineJRScriptlet>) nil_chk([scriptlets objectAtIndex:i])) getName]]];
      }
    }
    (void) [parameterValues removeWithId:[OrgOssPdfreporterEngineJRParameter REPORT_VIRTUALIZER]];
    (void) [parameterValues removeWithId:[OrgOssPdfreporterEngineJRParameter IS_IGNORE_PAGINATION]];
    (void) [parameterValues removeWithId:[OrgOssPdfreporterEngineJRParameter SORT_FIELDS]];
    (void) [parameterValues removeWithId:[OrgOssPdfreporterEngineJRParameter FILTER]];
    (void) [parameterValues removeWithId:[OrgOssPdfreporterEngineJRParameter REPORT_PARAMETERS_MAP]];
  }
  if (parameterValues == nil) {
    parameterValues = [[JavaUtilHashMap alloc] init];
  }
  if (subreportParameters != nil && (int) [((IOSObjectArray *) nil_chk(subreportParameters)) count] > 0) {
    id parameterValue = nil;
    for (int i = 0; i < (int) [((IOSObjectArray *) nil_chk(subreportParameters)) count]; i++) {
      id<OrgOssPdfreporterEngineJRExpression> expression = [((id<OrgOssPdfreporterEngineJRDatasetParameter>) nil_chk([((IOSObjectArray *) nil_chk(subreportParameters)) objectAtIndex:i])) getExpression];
      if (expression != nil || !ignoreNullExpressions) {
        parameterValue = [((id<OrgOssPdfreporterEngineFillJRFillExpressionEvaluator>) nil_chk(expressionEvaluator)) evaluateWithOrgOssPdfreporterEngineJRExpression:expression withChar:evaluation];
        if (parameterValue == nil) {
          (void) [((id<JavaUtilMap>) nil_chk(parameterValues)) removeWithId:[((id<OrgOssPdfreporterEngineJRDatasetParameter>) nil_chk([((IOSObjectArray *) nil_chk(subreportParameters)) objectAtIndex:i])) getName]];
        }
        else {
          (void) [((id<JavaUtilMap>) nil_chk(parameterValues)) putWithId:[((id<OrgOssPdfreporterEngineJRDatasetParameter>) nil_chk([((IOSObjectArray *) nil_chk(subreportParameters)) objectAtIndex:i])) getName] withId:parameterValue];
        }
      }
    }
  }
  if (![((id<JavaUtilMap>) nil_chk(parameterValues)) containsKeyWithId:[OrgOssPdfreporterEngineJRParameter REPORT_LOCALE]]) {
    (void) [((id<JavaUtilMap>) nil_chk(parameterValues)) putWithId:[OrgOssPdfreporterEngineJRParameter REPORT_LOCALE] withId:[((OrgOssPdfreporterEngineFillJRBaseFiller *) nil_chk(filler)) getLocale]];
  }
  if (![((id<JavaUtilMap>) nil_chk(parameterValues)) containsKeyWithId:[OrgOssPdfreporterEngineJRParameter REPORT_TIME_ZONE]]) {
    (void) [((id<JavaUtilMap>) nil_chk(parameterValues)) putWithId:[OrgOssPdfreporterEngineJRParameter REPORT_TIME_ZONE] withId:[((OrgOssPdfreporterEngineFillJRBaseFiller *) nil_chk(filler)) getTimeZone]];
  }
  if (![((id<JavaUtilMap>) nil_chk(parameterValues)) containsKeyWithId:[OrgOssPdfreporterEngineJRParameter REPORT_FORMAT_FACTORY]] && !removeFormatFactory) {
    (void) [((id<JavaUtilMap>) nil_chk(parameterValues)) putWithId:[OrgOssPdfreporterEngineJRParameter REPORT_FORMAT_FACTORY] withId:[((OrgOssPdfreporterEngineFillJRBaseFiller *) nil_chk(filler)) getFormatFactory]];
  }
  if (![((id<JavaUtilMap>) nil_chk(parameterValues)) containsKeyWithId:[OrgOssPdfreporterEngineJRParameter REPORT_CONTEXT]]) {
    id<OrgOssPdfreporterEngineReportContext> context = (id<OrgOssPdfreporterEngineReportContext>) [((OrgOssPdfreporterEngineFillJRFillDataset *) nil_chk([((OrgOssPdfreporterEngineFillJRBaseFiller *) nil_chk(filler)) getMainDataset])) getParameterValueWithNSString:[OrgOssPdfreporterEngineJRParameter REPORT_CONTEXT] withBOOL:YES];
    if (context != nil) {
      (void) [((id<JavaUtilMap>) nil_chk(parameterValues)) putWithId:[OrgOssPdfreporterEngineJRParameter REPORT_CONTEXT] withId:context];
    }
  }
  return parameterValues;
}

- (void)fillSubreport {
  if ([self getConnectionExpression] != nil) {
    (void) [((OrgOssPdfreporterEngineFillJRBaseFiller *) nil_chk(subreportFiller_)) fillWithJavaUtilMap:parameterValues_ withOrgOssPdfreporterSqlIConnection:connection_];
  }
  else if ([self getDataSourceExpression] != nil) {
    (void) [((OrgOssPdfreporterEngineFillJRBaseFiller *) nil_chk(subreportFiller_)) fillWithJavaUtilMap:parameterValues_ withOrgOssPdfreporterEngineJRDataSource:dataSource_];
  }
  else {
    (void) [((OrgOssPdfreporterEngineFillJRBaseFiller *) nil_chk(subreportFiller_)) fillWithJavaUtilMap:parameterValues_];
  }
}

- (BOOL)prepareWithInt:(int)availableHeight
              withBOOL:(BOOL)isOverflow {
  BOOL willOverflow = NO;
  [super prepareWithInt:availableHeight withBOOL:isOverflow];
  if (subreportFiller_ == nil) {
    [self setToPrintWithBOOL:NO];
  }
  if (![self isToPrint]) {
    return willOverflow;
  }
  int elementHeight = [self getHeight];
  if (availableHeight < [self getRelativeY] + elementHeight) {
    [self setToPrintWithBOOL:NO];
    return YES;
  }
  BOOL filling = [((id<OrgOssPdfreporterEngineFillJRSubreportRunner>) nil_chk(runner_)) isFilling];
  BOOL toPrint = !isOverflow || [self isPrintWhenDetailOverflows] || ![self isAlreadyPrinted];
  BOOL reprinted = isOverflow && [self isPrintWhenDetailOverflows];
  if (elementHeight == 0 && availableHeight == [self getRelativeY] && !filling && toPrint && fillContainerContext_ != nil && [((id<OrgOssPdfreporterEngineFillFillContainerContext>) nil_chk(fillContainerContext_)) isCurrentOverflow] && [((id<OrgOssPdfreporterEngineFillFillContainerContext>) nil_chk(fillContainerContext_)) isCurrentOverflowAllowed]) {
    [self setToPrintWithBOOL:NO];
    return YES;
  }
  if (!filling && toPrint && reprinted) {
    [self rewind];
  }
  if ([(id) printPage_ isKindOfClass:[OrgOssPdfreporterEngineBaseJRVirtualPrintPage class]]) {
    [((OrgOssPdfreporterEngineBaseJRVirtualPrintPage *) printPage_) dispose];
  }
  [((OrgOssPdfreporterEngineFillJRBaseFiller *) nil_chk(subreportFiller_)) setPageHeightWithInt:availableHeight - [self getRelativeY]];
  @synchronized (subreportFiller_) {
    OrgOssPdfreporterEngineFillJRSubreportRunResult *result;
    if (filling) {
      result = [((id<OrgOssPdfreporterEngineFillJRSubreportRunner>) nil_chk(runner_)) resume];
    }
    else if (toPrint) {
      [self setReprintedWithBOOL:reprinted];
      result = [((id<OrgOssPdfreporterEngineFillJRSubreportRunner>) nil_chk(runner_)) start];
    }
    else {
      printPage_ = nil;
      [self setStretchHeightWithInt:[self getHeight]];
      [self setToPrintWithBOOL:NO];
      return willOverflow;
    }
    if ([((OrgOssPdfreporterEngineFillJRSubreportRunResult *) nil_chk(result)) getException] != nil) {
      JavaLangThrowable *error = [((OrgOssPdfreporterEngineFillJRSubreportRunResult *) nil_chk(result)) getException];
      if ([error isKindOfClass:[JavaLangRuntimeException class]]) {
        @throw (JavaLangRuntimeException *) error;
      }
      @throw [[OrgOssPdfreporterEngineJRRuntimeException alloc] initWithJavaLangThrowable:error];
    }
    if ([((OrgOssPdfreporterEngineFillJRSubreportRunResult *) nil_chk(result)) hasFinished]) {
      [self copyValues];
    }
    printPage_ = [((OrgOssPdfreporterEngineFillJRBaseFiller *) nil_chk(subreportFiller_)) getCurrentPage];
    [self setStretchHeightWithInt:[((OrgOssPdfreporterEngineFillJRSubreportRunResult *) nil_chk(result)) hasFinished] ? [((OrgOssPdfreporterEngineFillJRBaseFiller *) nil_chk(subreportFiller_)) getCurrentPageStretchHeight] : availableHeight - [self getRelativeY]];
    willOverflow = ![((OrgOssPdfreporterEngineFillJRSubreportRunResult *) nil_chk(result)) hasFinished];
    if (!willOverflow) {
      [((id<OrgOssPdfreporterEngineFillJRSubreportRunner>) nil_chk(runner_)) reset];
    }
  }
  id<JavaUtilCollection> printElements = [self getPrintElements];
  if ((printElements == nil || [((id<JavaUtilCollection>) nil_chk(printElements)) size] == 0) && [self isRemoveLineWhenBlank]) {
    [self setToPrintWithBOOL:NO];
  }
  return willOverflow;
}

- (void)rewind {
  if (subreportFiller_ == nil) {
    return;
  }
  [self cancelSubreportFill];
  [self initSubreportFillerWithOrgOssPdfreporterEngineFillDatasetExpressionEvaluator:nil];
  if ([self getConnectionExpression] == nil && dataSource_ != nil) {
    if ([(id) dataSource_ conformsToProtocol: @protocol(OrgOssPdfreporterEngineJRRewindableDataSource)]) {
      [((id<OrgOssPdfreporterEngineJRRewindableDataSource>) dataSource_) moveFirst];
    }
    else {
      @throw [[OrgOssPdfreporterEngineJRException alloc] initWithNSString:@"The subreport is placed on a non-splitting band, but it does not have a rewindable data source."];
    }
  }
}

- (void)cancelSubreportFill {
  [((OrgOssPdfreporterEngineFillJRBaseFiller *) nil_chk(subreportFiller_)) setInterruptedWithBOOL:YES];
  @synchronized (subreportFiller_) {
    [((id<OrgOssPdfreporterEngineFillJRSubreportRunner>) nil_chk(runner_)) cancel];
    [((id<OrgOssPdfreporterEngineFillJRSubreportRunner>) nil_chk(runner_)) reset];
  }
  [((OrgOssPdfreporterEngineFillJRBaseFiller *) nil_chk(filler_)) unregisterSubfillerWithOrgOssPdfreporterEngineFillJRBaseFiller:subreportFiller_];
}

- (id<OrgOssPdfreporterEngineJRPrintElement>)fill {
  id<OrgOssPdfreporterEngineJRPrintRectangle> printRectangle = [[OrgOssPdfreporterEngineFillJRTemplatePrintRectangle alloc] initWithOrgOssPdfreporterEngineFillJRTemplateRectangle:[self getJRTemplateRectangle] withInt:elementId_];
  [((id<OrgOssPdfreporterEngineJRPrintRectangle>) nil_chk(printRectangle)) setUUIDWithOrgOssPdfreporterUsesJavaUtilUUID:[self getUUID]];
  [((id<OrgOssPdfreporterEngineJRPrintRectangle>) nil_chk(printRectangle)) setXWithInt:[self getX]];
  [((id<OrgOssPdfreporterEngineJRPrintRectangle>) nil_chk(printRectangle)) setYWithInt:[self getRelativeY]];
  [((id<OrgOssPdfreporterEngineJRPrintRectangle>) nil_chk(printRectangle)) setWidthWithInt:[self getWidth]];
  [((id<OrgOssPdfreporterEngineJRPrintRectangle>) nil_chk(printRectangle)) setHeightWithInt:[self getStretchHeight]];
  return printRectangle;
}

- (void)collectExpressionsWithOrgOssPdfreporterEngineJRExpressionCollector:(OrgOssPdfreporterEngineJRExpressionCollector *)collector {
  [((OrgOssPdfreporterEngineJRExpressionCollector *) nil_chk(collector)) collectWithOrgOssPdfreporterEngineJRSubreport:self];
}

- (void)visitWithOrgOssPdfreporterEngineJRVisitor:(id<OrgOssPdfreporterEngineJRVisitor>)visitor {
  [((id<OrgOssPdfreporterEngineJRVisitor>) nil_chk(visitor)) visitSubreportWithOrgOssPdfreporterEngineJRSubreport:self];
}

- (OrgOssPdfreporterEngineFillJRFillSubreportReturnValue *)addReturnValueWithOrgOssPdfreporterEngineJRSubreportReturnValue:(id<OrgOssPdfreporterEngineJRSubreportReturnValue>)parentReturnValue
                                                                                                          withJavaUtilList:(id<JavaUtilList>)returnValueList
                                                                        withOrgOssPdfreporterEngineFillJRFillObjectFactory:(OrgOssPdfreporterEngineFillJRFillObjectFactory *)factory {
  OrgOssPdfreporterEngineFillJRFillSubreportReturnValue *returnValue = [((OrgOssPdfreporterEngineFillJRFillObjectFactory *) nil_chk(factory)) getSubreportReturnValueWithOrgOssPdfreporterEngineJRSubreportReturnValue:parentReturnValue];
  OrgOssPdfreporterEngineTypeCalculationEnumEnum *calculation = [((OrgOssPdfreporterEngineFillJRFillSubreportReturnValue *) nil_chk(returnValue)) getCalculationValue];
  switch ([calculation ordinal]) {
    case OrgOssPdfreporterEngineTypeCalculationEnum_AVERAGE:
    case OrgOssPdfreporterEngineTypeCalculationEnum_VARIANCE:
    {
      id<OrgOssPdfreporterEngineJRSubreportReturnValue> countVal = [self createHelperReturnValueWithOrgOssPdfreporterEngineJRSubreportReturnValue:parentReturnValue withNSString:@"_COUNT" withOrgOssPdfreporterEngineTypeCalculationEnumEnum:[OrgOssPdfreporterEngineTypeCalculationEnumEnum COUNT]];
      (void) [self addReturnValueWithOrgOssPdfreporterEngineJRSubreportReturnValue:countVal withJavaUtilList:returnValueList withOrgOssPdfreporterEngineFillJRFillObjectFactory:factory];
      id<OrgOssPdfreporterEngineJRSubreportReturnValue> sumVal = [self createHelperReturnValueWithOrgOssPdfreporterEngineJRSubreportReturnValue:parentReturnValue withNSString:@"_SUM" withOrgOssPdfreporterEngineTypeCalculationEnumEnum:[OrgOssPdfreporterEngineTypeCalculationEnumEnum SUM]];
      (void) [self addReturnValueWithOrgOssPdfreporterEngineJRSubreportReturnValue:sumVal withJavaUtilList:returnValueList withOrgOssPdfreporterEngineFillJRFillObjectFactory:factory];
      [((OrgOssPdfreporterEngineFillJRBaseFiller *) nil_chk(filler_)) addVariableCalculationReqWithNSString:[((OrgOssPdfreporterEngineFillJRFillSubreportReturnValue *) nil_chk(returnValue)) getToVariable] withOrgOssPdfreporterEngineTypeCalculationEnumEnum:calculation];
      break;
    }
    case OrgOssPdfreporterEngineTypeCalculationEnum_STANDARD_DEVIATION:
    {
      id<OrgOssPdfreporterEngineJRSubreportReturnValue> varianceVal = [self createHelperReturnValueWithOrgOssPdfreporterEngineJRSubreportReturnValue:parentReturnValue withNSString:@"_VARIANCE" withOrgOssPdfreporterEngineTypeCalculationEnumEnum:[OrgOssPdfreporterEngineTypeCalculationEnumEnum VARIANCE]];
      (void) [self addReturnValueWithOrgOssPdfreporterEngineJRSubreportReturnValue:varianceVal withJavaUtilList:returnValueList withOrgOssPdfreporterEngineFillJRFillObjectFactory:factory];
      [((OrgOssPdfreporterEngineFillJRBaseFiller *) nil_chk(filler_)) addVariableCalculationReqWithNSString:[((OrgOssPdfreporterEngineFillJRFillSubreportReturnValue *) nil_chk(returnValue)) getToVariable] withOrgOssPdfreporterEngineTypeCalculationEnumEnum:calculation];
      break;
    }
    case OrgOssPdfreporterEngineTypeCalculationEnum_DISTINCT_COUNT:
    {
      id<OrgOssPdfreporterEngineJRSubreportReturnValue> countVal = [self createDistinctCountHelperReturnValueWithOrgOssPdfreporterEngineJRSubreportReturnValue:parentReturnValue];
      (void) [self addReturnValueWithOrgOssPdfreporterEngineJRSubreportReturnValue:countVal withJavaUtilList:returnValueList withOrgOssPdfreporterEngineFillJRFillObjectFactory:factory];
      [((OrgOssPdfreporterEngineFillJRBaseFiller *) nil_chk(filler_)) addVariableCalculationReqWithNSString:[((OrgOssPdfreporterEngineFillJRFillSubreportReturnValue *) nil_chk(returnValue)) getToVariable] withOrgOssPdfreporterEngineTypeCalculationEnumEnum:calculation];
      break;
    }
  }
  [((id<JavaUtilList>) nil_chk(returnValueList)) addWithId:returnValue];
  return returnValue;
}

- (id<OrgOssPdfreporterEngineJRSubreportReturnValue>)createHelperReturnValueWithOrgOssPdfreporterEngineJRSubreportReturnValue:(id<OrgOssPdfreporterEngineJRSubreportReturnValue>)returnValue
                                                                                                                 withNSString:(NSString *)nameSuffix
                                                                           withOrgOssPdfreporterEngineTypeCalculationEnumEnum:(OrgOssPdfreporterEngineTypeCalculationEnumEnum *)calculation {
  OrgOssPdfreporterEngineDesignJRDesignSubreportReturnValue *helper = [[OrgOssPdfreporterEngineDesignJRDesignSubreportReturnValue alloc] init];
  [((OrgOssPdfreporterEngineDesignJRDesignSubreportReturnValue *) nil_chk(helper)) setToVariableWithNSString:[NSString stringWithFormat:@"%@%@", [((id<OrgOssPdfreporterEngineJRSubreportReturnValue>) nil_chk(returnValue)) getToVariable], nameSuffix]];
  [((OrgOssPdfreporterEngineDesignJRDesignSubreportReturnValue *) nil_chk(helper)) setSubreportVariableWithNSString:[((id<OrgOssPdfreporterEngineJRSubreportReturnValue>) nil_chk(returnValue)) getSubreportVariable]];
  [((OrgOssPdfreporterEngineDesignJRDesignSubreportReturnValue *) nil_chk(helper)) setCalculationWithOrgOssPdfreporterEngineTypeCalculationEnumEnum:calculation];
  [((OrgOssPdfreporterEngineDesignJRDesignSubreportReturnValue *) nil_chk(helper)) setIncrementerFactoryClassNameWithNSString:[((OrgOssPdfreporterEngineDesignJRDesignSubreportReturnValue *) nil_chk(helper)) getIncrementerFactoryClassName]];
  return helper;
}

- (id<OrgOssPdfreporterEngineJRSubreportReturnValue>)createDistinctCountHelperReturnValueWithOrgOssPdfreporterEngineJRSubreportReturnValue:(id<OrgOssPdfreporterEngineJRSubreportReturnValue>)returnValue {
  OrgOssPdfreporterEngineDesignJRDesignSubreportReturnValue *helper = [[OrgOssPdfreporterEngineDesignJRDesignSubreportReturnValue alloc] init];
  [((OrgOssPdfreporterEngineDesignJRDesignSubreportReturnValue *) nil_chk(helper)) setToVariableWithNSString:[NSString stringWithFormat:@"%@_DISTINCT_COUNT", [((id<OrgOssPdfreporterEngineJRSubreportReturnValue>) nil_chk(returnValue)) getToVariable]]];
  [((OrgOssPdfreporterEngineDesignJRDesignSubreportReturnValue *) nil_chk(helper)) setSubreportVariableWithNSString:[((id<OrgOssPdfreporterEngineJRSubreportReturnValue>) nil_chk(returnValue)) getSubreportVariable]];
  [((OrgOssPdfreporterEngineDesignJRDesignSubreportReturnValue *) nil_chk(helper)) setCalculationWithOrgOssPdfreporterEngineTypeCalculationEnumEnum:[OrgOssPdfreporterEngineTypeCalculationEnumEnum NOTHING]];
  [((OrgOssPdfreporterEngineDesignJRDesignSubreportReturnValue *) nil_chk(helper)) setIncrementerFactoryClassNameWithNSString:[((OrgOssPdfreporterEngineDesignJRDesignSubreportReturnValue *) nil_chk(helper)) getIncrementerFactoryClassName]];
  return helper;
}

- (IOSObjectArray *)getReturnValues {
  return self.returnValues;
}

- (BOOL)usesForReturnValueWithNSString:(NSString *)variableName {
  BOOL used = NO;
  if (returnValues_ != nil) {
    for (int j = 0; j < (int) [returnValues_ count]; j++) {
      id<OrgOssPdfreporterEngineJRSubreportReturnValue> returnValue = [returnValues_ objectAtIndex:j];
      if ([((NSString *) nil_chk([((id<OrgOssPdfreporterEngineJRSubreportReturnValue>) nil_chk(returnValue)) getToVariable])) isEqual:variableName]) {
        used = YES;
        break;
      }
    }
  }
  return used;
}

- (void)copyValues OBJC_METHOD_FAMILY_NONE {
  if (returnValues_ != nil && (int) [((IOSObjectArray *) nil_chk(returnValues_)) count] > 0) {
    for (int i = 0; i < (int) [((IOSObjectArray *) nil_chk(returnValues_)) count]; i++) {
      [self copyValueWithOrgOssPdfreporterEngineFillJRFillSubreportReturnValue:[((IOSObjectArray *) nil_chk(returnValues_)) objectAtIndex:i]];
    }
  }
}

- (void)copyValueWithOrgOssPdfreporterEngineFillJRFillSubreportReturnValue:(OrgOssPdfreporterEngineFillJRFillSubreportReturnValue *)returnValue OBJC_METHOD_FAMILY_NONE {
  @try {
    OrgOssPdfreporterEngineFillJRFillVariable *variable = [((OrgOssPdfreporterEngineFillJRBaseFiller *) nil_chk(filler_)) getVariableWithNSString:[((OrgOssPdfreporterEngineFillJRFillSubreportReturnValue *) nil_chk(returnValue)) getToVariable]];
    id value = [((OrgOssPdfreporterEngineFillJRBaseFiller *) nil_chk(subreportFiller_)) getVariableValueWithNSString:[((OrgOssPdfreporterEngineFillJRFillSubreportReturnValue *) nil_chk(returnValue)) getSubreportVariable]];
    id newValue = [((id<OrgOssPdfreporterEngineFillJRIncrementer>) nil_chk([((OrgOssPdfreporterEngineFillJRFillSubreportReturnValue *) nil_chk(returnValue)) getIncrementer])) incrementWithOrgOssPdfreporterEngineFillJRFillVariable:variable withId:value withOrgOssPdfreporterEngineFillAbstractValueProvider:[OrgOssPdfreporterEngineFillAbstractValueProvider getCurrentValueProvider]];
    [((OrgOssPdfreporterEngineFillJRFillVariable *) nil_chk(variable)) setOldValueWithId:newValue];
    [((OrgOssPdfreporterEngineFillJRFillVariable *) nil_chk(variable)) setValueWithId:newValue];
    [((OrgOssPdfreporterEngineFillJRFillVariable *) nil_chk(variable)) setIncrementedValueWithId:newValue];
  }
  @catch (OrgOssPdfreporterEngineJRException *e) {
    @throw [[OrgOssPdfreporterEngineJRRuntimeException alloc] initWithJavaLangThrowable:e];
  }
}

- (void)validateReport {
  if (![((id<JavaUtilSet>) nil_chk(checkedReports_)) containsWithId:jasperReport_]) {
    [self verifyBandHeights];
    [self checkReturnValues];
    if ([self usingCache]) {
      [((id<JavaUtilSet>) nil_chk(checkedReports_)) addWithId:jasperReport_];
    }
  }
}

- (void)verifyBandHeights {
  if (![((OrgOssPdfreporterEngineFillJRFillContext *) nil_chk(((OrgOssPdfreporterEngineFillJRBaseFiller *) nil_chk(filler_)).fillContext)) isIgnorePagination]) {
    int pageHeight;
    int topMargin = [((OrgOssPdfreporterEngineJasperReport *) nil_chk(jasperReport_)) getTopMargin];
    int bottomMargin = [((OrgOssPdfreporterEngineJasperReport *) nil_chk(jasperReport_)) getBottomMargin];
    OrgOssPdfreporterEngineFillJRBaseFiller *parentFiller = filler_;
    do {
      pageHeight = [((OrgOssPdfreporterEngineJasperReport *) nil_chk(((OrgOssPdfreporterEngineFillJRBaseFiller *) nil_chk(parentFiller)).jasperReport)) getPageHeight];
      topMargin += [((OrgOssPdfreporterEngineJasperReport *) nil_chk(((OrgOssPdfreporterEngineFillJRBaseFiller *) nil_chk(parentFiller)).jasperReport)) getTopMargin];
      bottomMargin += [((OrgOssPdfreporterEngineJasperReport *) nil_chk(((OrgOssPdfreporterEngineFillJRBaseFiller *) nil_chk(parentFiller)).jasperReport)) getBottomMargin];
      parentFiller = ((OrgOssPdfreporterEngineFillJRBaseFiller *) nil_chk(parentFiller)).parentFiller;
    }
    while (parentFiller != nil);
    id<JavaUtilList> brokenRules = [[JavaUtilArrayList alloc] init];
    [OrgOssPdfreporterEngineDesignJRVerifier verifyBandHeightsWithJavaUtilCollection:brokenRules withOrgOssPdfreporterEngineJRReport:jasperReport_ withInt:pageHeight withInt:topMargin withInt:bottomMargin];
    if (![((id<JavaUtilList>) nil_chk(brokenRules)) isEmpty]) {
      @throw [[OrgOssPdfreporterEngineDesignJRValidationException alloc] initWithNSString:[NSString stringWithFormat:@"Band height validation for subreport \"%@\" failed in the current page context (height = %d, top margin = %d, bottom margin = %d) : ", [((OrgOssPdfreporterEngineJasperReport *) nil_chk(jasperReport_)) getName], pageHeight, topMargin, bottomMargin] withJavaUtilCollection:brokenRules];
    }
  }
}

- (void)checkReturnValues {
  if (returnValues_ != nil && (int) [((IOSObjectArray *) nil_chk(returnValues_)) count] > 0) {
    for (int i = 0; i < (int) [((IOSObjectArray *) nil_chk(returnValues_)) count]; i++) {
      id<OrgOssPdfreporterEngineJRSubreportReturnValue> returnValue = [((IOSObjectArray *) nil_chk(returnValues_)) objectAtIndex:i];
      NSString *subreportVariableName = [((id<OrgOssPdfreporterEngineJRSubreportReturnValue>) nil_chk(returnValue)) getSubreportVariable];
      id<OrgOssPdfreporterEngineJRVariable> subrepVariable = [((OrgOssPdfreporterEngineFillJRBaseFiller *) nil_chk(subreportFiller_)) getVariableWithNSString:subreportVariableName];
      if (subrepVariable == nil) {
        @throw [[OrgOssPdfreporterEngineJRException alloc] initWithNSString:[NSString stringWithFormat:@"Subreport variable %@ not found.", subreportVariableName]];
      }
      id<OrgOssPdfreporterEngineJRVariable> variable = [((OrgOssPdfreporterEngineFillJRBaseFiller *) nil_chk(filler_)) getVariableWithNSString:[((id<OrgOssPdfreporterEngineJRSubreportReturnValue>) nil_chk(returnValue)) getToVariable]];
      if ([((id<OrgOssPdfreporterEngineJRSubreportReturnValue>) nil_chk(returnValue)) getCalculationValue] == [OrgOssPdfreporterEngineTypeCalculationEnumEnum COUNT] || [((id<OrgOssPdfreporterEngineJRSubreportReturnValue>) nil_chk(returnValue)) getCalculationValue] == [OrgOssPdfreporterEngineTypeCalculationEnumEnum DISTINCT_COUNT]) {
        if (![[IOSClass classWithClass:[NSNumber class]] isAssignableFrom:[((id<OrgOssPdfreporterEngineJRVariable>) nil_chk(variable)) getValueClass]]) {
          @throw [[OrgOssPdfreporterEngineJRException alloc] initWithNSString:[NSString stringWithFormat:@"Variable %@ must have a numeric type.", [((id<OrgOssPdfreporterEngineJRSubreportReturnValue>) nil_chk(returnValue)) getToVariable]]];
        }
      }
      else if (![nil_chk([((id<OrgOssPdfreporterEngineJRVariable>) nil_chk(variable)) getValueClass]) isAssignableFrom:[((id<OrgOssPdfreporterEngineJRVariable>) nil_chk(subrepVariable)) getValueClass]] && !([[IOSClass classWithClass:[NSNumber class]] isAssignableFrom:[((id<OrgOssPdfreporterEngineJRVariable>) nil_chk(variable)) getValueClass]] && [[IOSClass classWithClass:[NSNumber class]] isAssignableFrom:[((id<OrgOssPdfreporterEngineJRVariable>) nil_chk(subrepVariable)) getValueClass]])) {
        @throw [[OrgOssPdfreporterEngineJRException alloc] initWithNSString:[NSString stringWithFormat:@"Variable %@ is not assignable from subreport variable %@", [((id<OrgOssPdfreporterEngineJRSubreportReturnValue>) nil_chk(returnValue)) getToVariable], subreportVariableName]];
      }
    }
  }
}

- (void)resolveElementWithOrgOssPdfreporterEngineJRPrintElement:(id<OrgOssPdfreporterEngineJRPrintElement>)element
                                                       withChar:(char)evaluation {
}

- (JavaLangBoolean *)isOwnUsingCache {
  return [((id<OrgOssPdfreporterEngineJRSubreport>) parent_) isOwnUsingCache];
}

- (JavaLangBoolean *)getUsingCache {
  return [((id<OrgOssPdfreporterEngineJRSubreport>) parent_) getUsingCache];
}

- (void)setUsingCacheWithJavaLangBoolean:(JavaLangBoolean *)isUsingCache {
}

- (id<OrgOssPdfreporterEngineFillJRFillCloneable>)createCloneWithOrgOssPdfreporterEngineFillJRFillCloneFactory:(OrgOssPdfreporterEngineFillJRFillCloneFactory *)factory {
  return nil;
}

- (id<OrgOssPdfreporterEngineFillJRSubreportRunnerFactory>)getRunnerFactory {
  NSString *factoryClassName = [((OrgOssPdfreporterEngineJRPropertiesUtil *) nil_chk([((OrgOssPdfreporterEngineFillJRBaseFiller *) nil_chk(filler_)) getPropertiesUtil])) getPropertyWithNSString:[OrgOssPdfreporterEngineFillJRSubreportRunnerFactory SUBREPORT_RUNNER_FACTORY]];
  if (factoryClassName == nil) {
    @throw [[OrgOssPdfreporterEngineJRException alloc] initWithNSString:@"Property \"net.sf.jasperreports.subreport.runner.factory\" must be set"];
  }
  return [((OrgOssPdfreporterEngineUtilJRSingletonCache *) nil_chk(OrgOssPdfreporterEngineFillJRFillSubreport_runnerFactoryCache_)) getCachedInstanceWithNSString:factoryClassName];
}

- (int)getContentsStretchHeight {
  return [((OrgOssPdfreporterEngineFillJRBaseFiller *) nil_chk(subreportFiller_)) getCurrentPageStretchHeight];
}

+ (void)initialize {
  if (self == [OrgOssPdfreporterEngineFillJRFillSubreport class]) {
    OrgOssPdfreporterEngineFillJRFillSubreport_runnerFactoryCache_ = [[OrgOssPdfreporterEngineUtilJRSingletonCache alloc] initWithIOSClass:[IOSClass classWithProtocol:@protocol(OrgOssPdfreporterEngineFillJRSubreportRunnerFactory)]];
  }
}

- (void)copyAllPropertiesTo:(id)copy {
  [super copyAllPropertiesTo:copy];
  OrgOssPdfreporterEngineFillJRFillSubreport *typedCopy = (OrgOssPdfreporterEngineFillJRFillSubreport *) copy;
  typedCopy.parameterValues = parameterValues_;
  typedCopy.parameters = parameters_;
  typedCopy.datasetPosition = datasetPosition_;
  typedCopy.cacheIncluded = cacheIncluded_;
  typedCopy.connection = connection_;
  typedCopy.dataSource = dataSource_;
  typedCopy.jasperReport = jasperReport_;
  typedCopy.source = source_;
  typedCopy.loadedEvaluators = loadedEvaluators_;
  typedCopy.returnValues = returnValues_;
  typedCopy.subreportFiller = subreportFiller_;
  typedCopy.printPage = printPage_;
  typedCopy.runner = runner_;
  typedCopy.checkedReports = checkedReports_;
}

@end
