//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: pdfreporter-core/src/org/oss/pdfreporter/engine/JRAbstractScriptlet.java
//
//  Created by kendra on 9/27/13.
//

#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "java/util/Map.h"
#include "org/oss/pdfreporter/engine/JRAbstractScriptlet.h"
#include "org/oss/pdfreporter/engine/JRParameter.h"
#include "org/oss/pdfreporter/engine/JRScriptletException.h"
#include "org/oss/pdfreporter/engine/fill/IJRFillParameter.h"
#include "org/oss/pdfreporter/engine/fill/JRFillField.h"
#include "org/oss/pdfreporter/engine/fill/JRFillGroup.h"
#include "org/oss/pdfreporter/engine/fill/JRFillVariable.h"

@implementation OrgOssPdfreporterEngineJRAbstractScriptlet

@synthesize parametersMap = parametersMap_;
@synthesize fieldsMap = fieldsMap_;
@synthesize variablesMap = variablesMap_;
@synthesize groups = groups_;

- (id)init {
  return [super init];
}

- (void)setDataWithJavaUtilMap:(id<JavaUtilMap>)parsm
               withJavaUtilMap:(id<JavaUtilMap>)fldsm
               withJavaUtilMap:(id<JavaUtilMap>)varsm
withOrgOssPdfreporterEngineFillJRFillGroupArray:(IOSObjectArray *)grps {
  parametersMap_ = parsm;
  fieldsMap_ = fldsm;
  variablesMap_ = varsm;
  groups_ = grps;
}

- (id)getParameterValueWithNSString:(NSString *)parameterName {
  return [self getParameterValueWithNSString:parameterName withBOOL:YES];
}

- (id)getParameterValueWithNSString:(NSString *)parameterName
                           withBOOL:(BOOL)mustBeDeclared {
  id<OrgOssPdfreporterEngineFillIJRFillParameter> parameter = [((id<JavaUtilMap>) nil_chk(self.parametersMap)) getWithId:parameterName];
  if (parameter == nil) {
    if (mustBeDeclared) {
      @throw [[OrgOssPdfreporterEngineJRScriptletException alloc] initWithNSString:[NSString stringWithFormat:@"Parameter not found : %@", parameterName]];
    }
    return [((id<JavaUtilMap>) [((id<OrgOssPdfreporterEngineFillIJRFillParameter>) nil_chk([((id<JavaUtilMap>) nil_chk(self.parametersMap)) getWithId:[OrgOssPdfreporterEngineJRParameter REPORT_PARAMETERS_MAP]])) getValue]) getWithId:parameterName];
  }
  return [((id<OrgOssPdfreporterEngineFillIJRFillParameter>) nil_chk(parameter)) getValue];
}

- (id)getFieldValueWithNSString:(NSString *)fieldName {
  OrgOssPdfreporterEngineFillJRFillField *field = [((id<JavaUtilMap>) nil_chk(self.fieldsMap)) getWithId:fieldName];
  if (field == nil) {
    @throw [[OrgOssPdfreporterEngineJRScriptletException alloc] initWithNSString:[NSString stringWithFormat:@"Field not found : %@", fieldName]];
  }
  return [((OrgOssPdfreporterEngineFillJRFillField *) nil_chk(field)) getValue];
}

- (id)getVariableValueWithNSString:(NSString *)variableName {
  OrgOssPdfreporterEngineFillJRFillVariable *variable = [((id<JavaUtilMap>) nil_chk(self.variablesMap)) getWithId:variableName];
  if (variable == nil) {
    @throw [[OrgOssPdfreporterEngineJRScriptletException alloc] initWithNSString:[NSString stringWithFormat:@"Variable not found : %@", variableName]];
  }
  return [((OrgOssPdfreporterEngineFillJRFillVariable *) nil_chk(variable)) getValue];
}

- (void)setVariableValueWithNSString:(NSString *)variableName
                              withId:(id)value {
  OrgOssPdfreporterEngineFillJRFillVariable *variable = [((id<JavaUtilMap>) nil_chk(self.variablesMap)) getWithId:variableName];
  if (variable == nil) {
    @throw [[OrgOssPdfreporterEngineJRScriptletException alloc] initWithNSString:[NSString stringWithFormat:@"Variable not found : %@", variableName]];
  }
  if (value != nil && ![((IOSClass *) nil_chk([((OrgOssPdfreporterEngineFillJRFillVariable *) nil_chk(variable)) getValueClass])) isInstance:value]) {
    @throw [[OrgOssPdfreporterEngineJRScriptletException alloc] initWithNSString:[NSString stringWithFormat:@"Incompatible value assigned to variable %@. Expected %@.", variableName, [((OrgOssPdfreporterEngineFillJRFillVariable *) nil_chk(variable)) getValueClassName]]];
  }
  [((OrgOssPdfreporterEngineFillJRFillVariable *) nil_chk(variable)) setValueWithId:value];
}

- (void)callBeforeReportInit {
  [self beforeReportInit];
  [self beforePageInit];
  [self beforeColumnInit];
  if (groups_ != nil && (int) [((IOSObjectArray *) nil_chk(groups_)) count] > 0) {
    for (int i = 0; i < (int) [((IOSObjectArray *) nil_chk(groups_)) count]; i++) {
      [self beforeGroupInitWithNSString:[((OrgOssPdfreporterEngineFillJRFillGroup *) nil_chk([((IOSObjectArray *) nil_chk(groups_)) objectAtIndex:i])) getName]];
    }
  }
}

- (void)callAfterReportInit {
  if (groups_ != nil && (int) [((IOSObjectArray *) nil_chk(groups_)) count] > 0) {
    for (int i = (int) [((IOSObjectArray *) nil_chk(groups_)) count] - 1; i >= 0; i--) {
      [self afterGroupInitWithNSString:[((OrgOssPdfreporterEngineFillJRFillGroup *) nil_chk([((IOSObjectArray *) nil_chk(groups_)) objectAtIndex:i])) getName]];
    }
  }
  [self afterColumnInit];
  [self afterPageInit];
  [self afterReportInit];
}

- (void)callBeforePageInit {
  [self beforePageInit];
  [self beforeColumnInit];
}

- (void)callAfterPageInit {
  [self afterColumnInit];
  [self afterPageInit];
}

- (void)callBeforeColumnInit {
  [self beforeColumnInit];
}

- (void)callAfterColumnInit {
  [self afterColumnInit];
}

- (void)callBeforeGroupInit {
  if (groups_ != nil && (int) [((IOSObjectArray *) nil_chk(groups_)) count] > 0) {
    OrgOssPdfreporterEngineFillJRFillGroup *group = nil;
    for (int i = 0; i < (int) [((IOSObjectArray *) nil_chk(groups_)) count]; i++) {
      group = [((IOSObjectArray *) nil_chk(groups_)) objectAtIndex:i];
      if ([((OrgOssPdfreporterEngineFillJRFillGroup *) nil_chk(group)) hasChanged]) {
        [self beforeGroupInitWithNSString:[((OrgOssPdfreporterEngineFillJRFillGroup *) nil_chk(group)) getName]];
      }
    }
  }
}

- (void)callAfterGroupInit {
  if (groups_ != nil && (int) [((IOSObjectArray *) nil_chk(groups_)) count] > 0) {
    OrgOssPdfreporterEngineFillJRFillGroup *group = nil;
    for (int i = (int) [((IOSObjectArray *) nil_chk(groups_)) count] - 1; i >= 0; i--) {
      group = [((IOSObjectArray *) nil_chk(groups_)) objectAtIndex:i];
      if ([((OrgOssPdfreporterEngineFillJRFillGroup *) nil_chk(group)) hasChanged]) {
        [self afterGroupInitWithNSString:[((OrgOssPdfreporterEngineFillJRFillGroup *) nil_chk(group)) getName]];
      }
    }
  }
}

- (void)callBeforeDetailEval {
  [self beforeDetailEval];
}

- (void)callAfterDetailEval {
  [self afterDetailEval];
}

- (void)beforeReportInit {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
}

- (void)afterReportInit {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
}

- (void)beforePageInit {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
}

- (void)afterPageInit {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
}

- (void)beforeColumnInit {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
}

- (void)afterColumnInit {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
}

- (void)beforeGroupInitWithNSString:(NSString *)groupName {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
}

- (void)afterGroupInitWithNSString:(NSString *)groupName {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
}

- (void)beforeDetailEval {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
}

- (void)afterDetailEval {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
}

- (void)copyAllPropertiesTo:(id)copy {
  [super copyAllPropertiesTo:copy];
  OrgOssPdfreporterEngineJRAbstractScriptlet *typedCopy = (OrgOssPdfreporterEngineJRAbstractScriptlet *) copy;
  typedCopy.parametersMap = parametersMap_;
  typedCopy.fieldsMap = fieldsMap_;
  typedCopy.variablesMap = variablesMap_;
  typedCopy.groups = groups_;
}

@end
