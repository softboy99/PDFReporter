//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: pdfreporter-core/src/org/oss/pdfreporter/engine/data/JRAbstractTextDataSource.java
//
//  Created by kendra on 9/27/13.
//

#include "IOSClass.h"
#include "java/lang/Boolean.h"
#include "java/lang/Byte.h"
#include "java/lang/Double.h"
#include "java/lang/Float.h"
#include "java/lang/Integer.h"
#include "java/lang/Long.h"
#include "java/lang/Short.h"
#include "java/math/BigDecimal.h"
#include "java/math/BigInteger.h"
#include "java/util/Date.h"
#include "java/util/Locale.h"
#include "java/util/TimeZone.h"
#include "org/oss/pdfreporter/engine/JRException.h"
#include "org/oss/pdfreporter/engine/JRField.h"
#include "org/oss/pdfreporter/engine/data/JRAbstractTextDataSource.h"
#include "org/oss/pdfreporter/engine/util/FormatUtils.h"
#include "org/oss/pdfreporter/engine/util/JRDataUtils.h"
#include "org/oss/pdfreporter/text/format/IDateFormat.h"
#include "org/oss/pdfreporter/text/format/INumberFormat.h"
#include "org/oss/pdfreporter/text/format/LocaleConverter.h"

@implementation OrgOssPdfreporterEngineDataJRAbstractTextDataSource

@synthesize locale = locale_;
@synthesize datePattern = datePattern_;
@synthesize numberPattern = numberPattern_;
@synthesize timeZone = timeZone_;

- (id)convertStringValueWithNSString:(NSString *)text
                        withIOSClass:(IOSClass *)valueClass {
  id value = nil;
  if ([[IOSClass classWithClass:[NSString class]] isEqual:valueClass]) {
    value = text;
  }
  else if ([[IOSClass classWithClass:[NSNumber class]] isAssignableFrom:valueClass]) {
    value = [OrgOssPdfreporterTextFormatLocaleConverter convertWithNSString:[((NSString *) nil_chk(text)) trim] withIOSClass:valueClass withJavaUtilLocale:locale_ withNSString:numberPattern_];
  }
  else if ([[IOSClass classWithClass:[JavaUtilDate class]] isAssignableFrom:valueClass]) {
    value = [OrgOssPdfreporterTextFormatLocaleConverter convertWithNSString:[((NSString *) nil_chk(text)) trim] withIOSClass:valueClass withJavaUtilLocale:locale_ withNSString:datePattern_];
  }
  else if ([[IOSClass classWithClass:[JavaLangBoolean class]] isEqual:valueClass]) {
    value = [JavaLangBoolean valueOfWithNSString:text];
  }
  return value;
}

- (id)convertNumberWithNSNumber:(NSNumber *)number
                   withIOSClass:(IOSClass *)valueClass {
  NSNumber *value = nil;
  if ([((IOSClass *) nil_chk(valueClass)) isEqual:[IOSClass classWithClass:[JavaLangByte class]]]) {
    value = [[JavaLangByte alloc] initWithChar:[((NSNumber *) nil_chk(number)) charValue]];
  }
  else if ([((IOSClass *) nil_chk(valueClass)) isEqual:[IOSClass classWithClass:[JavaLangShort class]]]) {
    value = [[JavaLangShort alloc] initWithShortInt:[((NSNumber *) nil_chk(number)) shortValue]];
  }
  else if ([((IOSClass *) nil_chk(valueClass)) isEqual:[IOSClass classWithClass:[JavaLangInteger class]]]) {
    value = [JavaLangInteger valueOfWithInt:[((NSNumber *) nil_chk(number)) intValue]];
  }
  else if ([((IOSClass *) nil_chk(valueClass)) isEqual:[IOSClass classWithClass:[JavaLangLong class]]]) {
    value = [[JavaLangLong alloc] initWithLongInt:[((NSNumber *) nil_chk(number)) longLongValue]];
  }
  else if ([((IOSClass *) nil_chk(valueClass)) isEqual:[IOSClass classWithClass:[JavaLangFloat class]]]) {
    value = [[JavaLangFloat alloc] initWithFloat:[((NSNumber *) nil_chk(number)) floatValue]];
  }
  else if ([((IOSClass *) nil_chk(valueClass)) isEqual:[IOSClass classWithClass:[JavaLangDouble class]]]) {
    value = [[JavaLangDouble alloc] initWithDouble:[((NSNumber *) nil_chk(number)) doubleValue]];
  }
  else if ([((IOSClass *) nil_chk(valueClass)) isEqual:[IOSClass classWithClass:[JavaMathBigInteger class]]]) {
    value = [JavaMathBigInteger valueOfWithLongInt:[((NSNumber *) nil_chk(number)) longLongValue]];
  }
  else if ([((IOSClass *) nil_chk(valueClass)) isEqual:[IOSClass classWithClass:[JavaMathBigDecimal class]]]) {
    value = [[JavaMathBigDecimal alloc] initWithNSString:[JavaLangDouble toStringWithDouble:[((NSNumber *) nil_chk(number)) doubleValue]]];
  }
  else {
    @throw [[OrgOssPdfreporterEngineJRException alloc] initWithNSString:[NSString stringWithFormat:@"Unknown number class %@", [((IOSClass *) nil_chk(valueClass)) getName]]];
  }
  return value;
}

- (NSNumber *)getFormattedNumberWithOrgOssPdfreporterTextFormatINumberFormat:(id<OrgOssPdfreporterTextFormatINumberFormat>)numberFormat
                                                                withNSString:(NSString *)fieldValue
                                                                withIOSClass:(IOSClass *)valueClass {
  return [OrgOssPdfreporterEngineUtilFormatUtils getFormattedNumberWithOrgOssPdfreporterTextFormatINumberFormat:numberFormat withNSString:fieldValue withIOSClass:valueClass];
}

- (JavaUtilDate *)getFormattedDateWithOrgOssPdfreporterTextFormatIDateFormat:(id<OrgOssPdfreporterTextFormatIDateFormat>)dateFormat
                                                                withNSString:(NSString *)fieldValue
                                                                withIOSClass:(IOSClass *)valueClass {
  return [OrgOssPdfreporterEngineUtilFormatUtils getFormattedDateWithOrgOssPdfreporterTextFormatIDateFormat:dateFormat withNSString:fieldValue withIOSClass:valueClass];
}

- (void)setTextAttributesWithOrgOssPdfreporterEngineDataJRAbstractTextDataSource:(OrgOssPdfreporterEngineDataJRAbstractTextDataSource *)textDataSource {
  [self setLocaleWithJavaUtilLocale:[((OrgOssPdfreporterEngineDataJRAbstractTextDataSource *) nil_chk(textDataSource)) getLocale]];
  [self setDatePatternWithNSString:[((OrgOssPdfreporterEngineDataJRAbstractTextDataSource *) nil_chk(textDataSource)) getDatePattern]];
  [self setNumberPatternWithNSString:[((OrgOssPdfreporterEngineDataJRAbstractTextDataSource *) nil_chk(textDataSource)) getNumberPattern]];
  [self setTimeZoneWithJavaUtilTimeZone:[((OrgOssPdfreporterEngineDataJRAbstractTextDataSource *) nil_chk(textDataSource)) getTimeZone]];
}

- (JavaUtilLocale *)getLocale {
  return locale_;
}

- (void)setLocaleWithJavaUtilLocale:(JavaUtilLocale *)locale {
  self.locale = locale;
}

- (void)setLocaleWithNSString:(NSString *)locale {
  [self setLocaleWithJavaUtilLocale:[OrgOssPdfreporterEngineUtilJRDataUtils getLocaleWithNSString:locale]];
}

- (NSString *)getDatePattern {
  return datePattern_;
}

- (void)setDatePatternWithNSString:(NSString *)datePattern {
  self.datePattern = datePattern;
}

- (NSString *)getNumberPattern {
  return numberPattern_;
}

- (void)setNumberPatternWithNSString:(NSString *)numberPattern {
  self.numberPattern = numberPattern;
}

- (JavaUtilTimeZone *)getTimeZone {
  return timeZone_;
}

- (void)setTimeZoneWithJavaUtilTimeZone:(JavaUtilTimeZone *)timeZone {
  self.timeZone = timeZone;
}

- (void)setTimeZoneWithNSString:(NSString *)timeZoneId {
  [self setTimeZoneWithJavaUtilTimeZone:[OrgOssPdfreporterEngineUtilJRDataUtils getTimeZoneWithNSString:timeZoneId]];
}

- (id)getFieldValueWithOrgOssPdfreporterEngineJRField:(id<OrgOssPdfreporterEngineJRField>)param0 {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}

- (BOOL)next {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}

- (id)init {
  return [super init];
}

- (void)copyAllPropertiesTo:(id)copy {
  [super copyAllPropertiesTo:copy];
  OrgOssPdfreporterEngineDataJRAbstractTextDataSource *typedCopy = (OrgOssPdfreporterEngineDataJRAbstractTextDataSource *) copy;
  typedCopy.locale = locale_;
  typedCopy.datePattern = datePattern_;
  typedCopy.numberPattern = numberPattern_;
  typedCopy.timeZone = timeZone_;
}

@end
