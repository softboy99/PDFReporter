//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: pdfreporter-core/src/org/oss/pdfreporter/engine/data/JRXmlDataSource.java
//
//  Created by kendra on 9/27/13.
//

#include "IOSClass.h"
#include "java/io/File.h"
#include "java/io/IOException.h"
#include "java/io/InputStream.h"
#include "java/lang/Boolean.h"
#include "java/lang/StringBuffer.h"
#include "java/util/logging/Level.h"
#include "java/util/logging/Logger.h"
#include "org/oss/pdfreporter/engine/DefaultJasperReportsContext.h"
#include "org/oss/pdfreporter/engine/JRException.h"
#include "org/oss/pdfreporter/engine/JRField.h"
#include "org/oss/pdfreporter/engine/JasperReportsContext.h"
#include "org/oss/pdfreporter/engine/data/JRAbstractTextDataSource.h"
#include "org/oss/pdfreporter/engine/data/JRXmlDataSource.h"
#include "org/oss/pdfreporter/engine/util/JRXmlUtils.h"
#include "org/oss/pdfreporter/engine/util/xml/JRXPathExecuter.h"
#include "org/oss/pdfreporter/engine/util/xml/JRXPathExecuterUtils.h"
#include "org/oss/pdfreporter/registry/IRegistry.h"
#include "org/oss/pdfreporter/repo/RepositoryUtil.h"
#include "org/oss/pdfreporter/uses/org/w3c/dom/Document.h"
#include "org/oss/pdfreporter/uses/org/w3c/dom/Node.h"
#include "org/oss/pdfreporter/uses/org/w3c/dom/NodeList.h"
#include "org/oss/pdfreporter/xml/parsers/IInputSource.h"
#include "org/oss/pdfreporter/xml/parsers/factory/IXmlParserFactory.h"

@implementation OrgOssPdfreporterEngineDataJRXmlDataSource

static JavaUtilLoggingLogger * OrgOssPdfreporterEngineDataJRXmlDataSource_logger_;

@synthesize document = document_;
@synthesize selectExpression = selectExpression_;
@synthesize nodeList = nodeList_;
@synthesize nodeListLength = nodeListLength_;
@synthesize currentNode = currentNode_;
@synthesize currentNodeIndex = currentNodeIndex_;
@synthesize xPathExecuter = xPathExecuter_;
@synthesize inputStream = inputStream_;
@synthesize closeInputStream = closeInputStream_;

+ (JavaUtilLoggingLogger *)logger {
  return OrgOssPdfreporterEngineDataJRXmlDataSource_logger_;
}

- (id)initOrgOssPdfreporterEngineDataJRXmlDataSourceWithOrgOssPdfreporterEngineJasperReportsContext:(id<OrgOssPdfreporterEngineJasperReportsContext>)jasperReportsContext
                                                         withOrgOssPdfreporterUsesOrgW3cDomDocument:(id<OrgOssPdfreporterUsesOrgW3cDomDocument>)document {
  return [self initOrgOssPdfreporterEngineDataJRXmlDataSourceWithOrgOssPdfreporterEngineJasperReportsContext:jasperReportsContext withOrgOssPdfreporterUsesOrgW3cDomDocument:document withNSString:@"."];
}

- (id)initWithOrgOssPdfreporterEngineJasperReportsContext:(id<OrgOssPdfreporterEngineJasperReportsContext>)jasperReportsContext
               withOrgOssPdfreporterUsesOrgW3cDomDocument:(id<OrgOssPdfreporterUsesOrgW3cDomDocument>)document {
  return [self initOrgOssPdfreporterEngineDataJRXmlDataSourceWithOrgOssPdfreporterEngineJasperReportsContext:jasperReportsContext withOrgOssPdfreporterUsesOrgW3cDomDocument:document];
}

- (id)initWithOrgOssPdfreporterUsesOrgW3cDomDocument:(id<OrgOssPdfreporterUsesOrgW3cDomDocument>)document {
  return [self initOrgOssPdfreporterEngineDataJRXmlDataSourceWithOrgOssPdfreporterEngineJasperReportsContext:[OrgOssPdfreporterEngineDefaultJasperReportsContext getInstance] withOrgOssPdfreporterUsesOrgW3cDomDocument:document];
}

- (id)initOrgOssPdfreporterEngineDataJRXmlDataSourceWithOrgOssPdfreporterEngineJasperReportsContext:(id<OrgOssPdfreporterEngineJasperReportsContext>)jasperReportsContext
                                                         withOrgOssPdfreporterUsesOrgW3cDomDocument:(id<OrgOssPdfreporterUsesOrgW3cDomDocument>)document
                                                                                       withNSString:(NSString *)selectExpression {
  if ((self = [super init])) {
    currentNodeIndex_ = -1;
    self.document = document;
    self.selectExpression = selectExpression;
    self.xPathExecuter = [OrgOssPdfreporterEngineUtilXmlJRXPathExecuterUtils getXPathExecuterWithOrgOssPdfreporterEngineJasperReportsContext:jasperReportsContext];
    [self moveFirst];
  }
  return self;
}

- (id)initWithOrgOssPdfreporterEngineJasperReportsContext:(id<OrgOssPdfreporterEngineJasperReportsContext>)jasperReportsContext
               withOrgOssPdfreporterUsesOrgW3cDomDocument:(id<OrgOssPdfreporterUsesOrgW3cDomDocument>)document
                                             withNSString:(NSString *)selectExpression {
  return [self initOrgOssPdfreporterEngineDataJRXmlDataSourceWithOrgOssPdfreporterEngineJasperReportsContext:jasperReportsContext withOrgOssPdfreporterUsesOrgW3cDomDocument:document withNSString:selectExpression];
}

- (id)initWithOrgOssPdfreporterUsesOrgW3cDomDocument:(id<OrgOssPdfreporterUsesOrgW3cDomDocument>)document
                                        withNSString:(NSString *)selectExpression {
  return [self initOrgOssPdfreporterEngineDataJRXmlDataSourceWithOrgOssPdfreporterEngineJasperReportsContext:[OrgOssPdfreporterEngineDefaultJasperReportsContext getInstance] withOrgOssPdfreporterUsesOrgW3cDomDocument:document withNSString:selectExpression];
}

- (id)initOrgOssPdfreporterEngineDataJRXmlDataSourceWithOrgOssPdfreporterEngineJasperReportsContext:(id<OrgOssPdfreporterEngineJasperReportsContext>)jasperReportsContext
                                                                              withJavaIoInputStream:(JavaIoInputStream *)inArg {
  return [self initOrgOssPdfreporterEngineDataJRXmlDataSourceWithOrgOssPdfreporterEngineJasperReportsContext:jasperReportsContext withJavaIoInputStream:inArg withNSString:@"."];
}

- (id)initWithOrgOssPdfreporterEngineJasperReportsContext:(id<OrgOssPdfreporterEngineJasperReportsContext>)jasperReportsContext
                                    withJavaIoInputStream:(JavaIoInputStream *)inArg {
  return [self initOrgOssPdfreporterEngineDataJRXmlDataSourceWithOrgOssPdfreporterEngineJasperReportsContext:jasperReportsContext withJavaIoInputStream:inArg];
}

- (id)initWithJavaIoInputStream:(JavaIoInputStream *)inArg {
  return [self initOrgOssPdfreporterEngineDataJRXmlDataSourceWithOrgOssPdfreporterEngineJasperReportsContext:[OrgOssPdfreporterEngineDefaultJasperReportsContext getInstance] withJavaIoInputStream:inArg];
}

- (id)initOrgOssPdfreporterEngineDataJRXmlDataSourceWithOrgOssPdfreporterEngineJasperReportsContext:(id<OrgOssPdfreporterEngineJasperReportsContext>)jasperReportsContext
                                                                              withJavaIoInputStream:(JavaIoInputStream *)inArg
                                                                                       withNSString:(NSString *)selectExpression {
  if ((self = [self initOrgOssPdfreporterEngineDataJRXmlDataSourceWithOrgOssPdfreporterEngineJasperReportsContext:jasperReportsContext withOrgOssPdfreporterUsesOrgW3cDomDocument:[OrgOssPdfreporterEngineUtilJRXmlUtils parseWithOrgOssPdfreporterXmlParsersIInputSource:[((id<OrgOssPdfreporterXmlParsersFactoryIXmlParserFactory>) nil_chk([OrgOssPdfreporterRegistryIRegistry getIXmlParserFactory])) newInputSourceWithJavaIoInputStream:inArg]] withNSString:selectExpression])) {
    self.inputStream = inArg;
    self.closeInputStream = NO;
  }
  return self;
}

- (id)initWithOrgOssPdfreporterEngineJasperReportsContext:(id<OrgOssPdfreporterEngineJasperReportsContext>)jasperReportsContext
                                    withJavaIoInputStream:(JavaIoInputStream *)inArg
                                             withNSString:(NSString *)selectExpression {
  return [self initOrgOssPdfreporterEngineDataJRXmlDataSourceWithOrgOssPdfreporterEngineJasperReportsContext:jasperReportsContext withJavaIoInputStream:inArg withNSString:selectExpression];
}

- (id)initWithJavaIoInputStream:(JavaIoInputStream *)inArg
                   withNSString:(NSString *)selectExpression {
  return [self initOrgOssPdfreporterEngineDataJRXmlDataSourceWithOrgOssPdfreporterEngineJasperReportsContext:[OrgOssPdfreporterEngineDefaultJasperReportsContext getInstance] withJavaIoInputStream:inArg withNSString:selectExpression];
}

- (id)initOrgOssPdfreporterEngineDataJRXmlDataSourceWithOrgOssPdfreporterEngineJasperReportsContext:(id<OrgOssPdfreporterEngineJasperReportsContext>)jasperReportsContext
                                                                                       withNSString:(NSString *)uri {
  return [self initOrgOssPdfreporterEngineDataJRXmlDataSourceWithOrgOssPdfreporterEngineJasperReportsContext:jasperReportsContext withNSString:uri withNSString:@"."];
}

- (id)initWithOrgOssPdfreporterEngineJasperReportsContext:(id<OrgOssPdfreporterEngineJasperReportsContext>)jasperReportsContext
                                             withNSString:(NSString *)uri {
  return [self initOrgOssPdfreporterEngineDataJRXmlDataSourceWithOrgOssPdfreporterEngineJasperReportsContext:jasperReportsContext withNSString:uri];
}

- (id)initWithNSString:(NSString *)uri {
  return [self initOrgOssPdfreporterEngineDataJRXmlDataSourceWithOrgOssPdfreporterEngineJasperReportsContext:[OrgOssPdfreporterEngineDefaultJasperReportsContext getInstance] withNSString:uri];
}

- (id)initOrgOssPdfreporterEngineDataJRXmlDataSourceWithOrgOssPdfreporterEngineJasperReportsContext:(id<OrgOssPdfreporterEngineJasperReportsContext>)jasperReportsContext
                                                                                       withNSString:(NSString *)uri
                                                                                       withNSString:(NSString *)selectExpression {
  if ((self = [self initOrgOssPdfreporterEngineDataJRXmlDataSourceWithOrgOssPdfreporterEngineJasperReportsContext:jasperReportsContext withJavaIoInputStream:[((OrgOssPdfreporterRepoRepositoryUtil *) nil_chk([OrgOssPdfreporterRepoRepositoryUtil getInstanceWithOrgOssPdfreporterEngineJasperReportsContext:jasperReportsContext])) getInputStreamFromLocationWithNSString:uri] withNSString:selectExpression])) {
    self.closeInputStream = YES;
  }
  return self;
}

- (id)initWithOrgOssPdfreporterEngineJasperReportsContext:(id<OrgOssPdfreporterEngineJasperReportsContext>)jasperReportsContext
                                             withNSString:(NSString *)uri
                                             withNSString:(NSString *)selectExpression {
  return [self initOrgOssPdfreporterEngineDataJRXmlDataSourceWithOrgOssPdfreporterEngineJasperReportsContext:jasperReportsContext withNSString:uri withNSString:selectExpression];
}

- (id)initWithNSString:(NSString *)uri
          withNSString:(NSString *)selectExpression {
  return [self initOrgOssPdfreporterEngineDataJRXmlDataSourceWithOrgOssPdfreporterEngineJasperReportsContext:[OrgOssPdfreporterEngineDefaultJasperReportsContext getInstance] withNSString:uri withNSString:selectExpression];
}

- (id)initOrgOssPdfreporterEngineDataJRXmlDataSourceWithOrgOssPdfreporterEngineJasperReportsContext:(id<OrgOssPdfreporterEngineJasperReportsContext>)jasperReportsContext
                                                                                     withJavaIoFile:(JavaIoFile *)file {
  return [self initOrgOssPdfreporterEngineDataJRXmlDataSourceWithOrgOssPdfreporterEngineJasperReportsContext:jasperReportsContext withJavaIoFile:file withNSString:@"."];
}

- (id)initWithOrgOssPdfreporterEngineJasperReportsContext:(id<OrgOssPdfreporterEngineJasperReportsContext>)jasperReportsContext
                                           withJavaIoFile:(JavaIoFile *)file {
  return [self initOrgOssPdfreporterEngineDataJRXmlDataSourceWithOrgOssPdfreporterEngineJasperReportsContext:jasperReportsContext withJavaIoFile:file];
}

- (id)initWithJavaIoFile:(JavaIoFile *)file {
  return [self initOrgOssPdfreporterEngineDataJRXmlDataSourceWithOrgOssPdfreporterEngineJasperReportsContext:[OrgOssPdfreporterEngineDefaultJasperReportsContext getInstance] withJavaIoFile:file];
}

- (id)initOrgOssPdfreporterEngineDataJRXmlDataSourceWithOrgOssPdfreporterEngineJasperReportsContext:(id<OrgOssPdfreporterEngineJasperReportsContext>)jasperReportsContext
                                                                                     withJavaIoFile:(JavaIoFile *)file
                                                                                       withNSString:(NSString *)selectExpression {
  return [self initOrgOssPdfreporterEngineDataJRXmlDataSourceWithOrgOssPdfreporterEngineJasperReportsContext:jasperReportsContext withOrgOssPdfreporterUsesOrgW3cDomDocument:[OrgOssPdfreporterEngineUtilJRXmlUtils parseWithJavaIoFile:file] withNSString:selectExpression];
}

- (id)initWithOrgOssPdfreporterEngineJasperReportsContext:(id<OrgOssPdfreporterEngineJasperReportsContext>)jasperReportsContext
                                           withJavaIoFile:(JavaIoFile *)file
                                             withNSString:(NSString *)selectExpression {
  return [self initOrgOssPdfreporterEngineDataJRXmlDataSourceWithOrgOssPdfreporterEngineJasperReportsContext:jasperReportsContext withJavaIoFile:file withNSString:selectExpression];
}

- (id)initWithJavaIoFile:(JavaIoFile *)file
            withNSString:(NSString *)selectExpression {
  return [self initOrgOssPdfreporterEngineDataJRXmlDataSourceWithOrgOssPdfreporterEngineJasperReportsContext:[OrgOssPdfreporterEngineDefaultJasperReportsContext getInstance] withJavaIoFile:file withNSString:selectExpression];
}

- (void)moveFirst {
  if (document_ == nil) {
    @throw [[OrgOssPdfreporterEngineJRException alloc] initWithNSString:@"document cannot be null"];
  }
  if (selectExpression_ == nil) {
    @throw [[OrgOssPdfreporterEngineJRException alloc] initWithNSString:@"selectExpression cannot be null"];
  }
  currentNode_ = nil;
  currentNodeIndex_ = -1;
  nodeListLength_ = 0;
  nodeList_ = [((id<OrgOssPdfreporterEngineUtilXmlJRXPathExecuter>) nil_chk(xPathExecuter_)) selectNodeListWithOrgOssPdfreporterUsesOrgW3cDomNode:document_ withNSString:selectExpression_];
  nodeListLength_ = [((id<OrgOssPdfreporterUsesOrgW3cDomNodeList>) nil_chk(nodeList_)) getLength];
  [((JavaUtilLoggingLogger *) nil_chk(OrgOssPdfreporterEngineDataJRXmlDataSource_logger_)) fineWithNSString:[NSString stringWithFormat:@"Selected nodes from %@ with expression: %@, found: %d", document_, selectExpression_, nodeListLength_]];
}

- (BOOL)next {
  if (currentNodeIndex_ == nodeListLength_ - 1) {
    return NO;
  }
  currentNode_ = [((id<OrgOssPdfreporterUsesOrgW3cDomNodeList>) nil_chk(nodeList_)) itemWithInt:++currentNodeIndex_];
  return YES;
}

- (id)getFieldValueWithOrgOssPdfreporterEngineJRField:(id<OrgOssPdfreporterEngineJRField>)jrField {
  if (currentNode_ == nil) {
    return nil;
  }
  NSString *expression = [((id<OrgOssPdfreporterEngineJRField>) nil_chk(jrField)) getDescription];
  if (expression == nil || [((NSString *) nil_chk(expression)) length] == 0) {
    [((JavaUtilLoggingLogger *) nil_chk(OrgOssPdfreporterEngineDataJRXmlDataSource_logger_)) warningWithNSString:[NSString stringWithFormat:@"Missing filed description for '%@' in jrxml file, thus no data selected.", [((id<OrgOssPdfreporterEngineJRField>) nil_chk(jrField)) getName]]];
    return nil;
  }
  id value = nil;
  IOSClass *valueClass = [((id<OrgOssPdfreporterEngineJRField>) nil_chk(jrField)) getValueClass];
  id selectedObject = [((id<OrgOssPdfreporterEngineUtilXmlJRXPathExecuter>) nil_chk(xPathExecuter_)) selectObjectWithOrgOssPdfreporterUsesOrgW3cDomNode:currentNode_ withNSString:expression];
  if ([((JavaUtilLoggingLogger *) nil_chk(OrgOssPdfreporterEngineDataJRXmlDataSource_logger_)) isLoggableWithJavaUtilLoggingLevel:[JavaUtilLoggingLevel FINEST]]) {
    [((JavaUtilLoggingLogger *) nil_chk(OrgOssPdfreporterEngineDataJRXmlDataSource_logger_)) finestWithNSString:[NSString stringWithFormat:@"Selected object from %@ with expression: %@, found: %@", currentNode_, expression, selectedObject]];
  }
  if ([IOSClass classWithClass:[NSObject class]] != valueClass) {
    if (selectedObject != nil) {
      if ([selectedObject conformsToProtocol: @protocol(OrgOssPdfreporterUsesOrgW3cDomNode)]) {
        NSString *text = [self getTextWithOrgOssPdfreporterUsesOrgW3cDomNode:(id<OrgOssPdfreporterUsesOrgW3cDomNode>) selectedObject];
        if (text != nil) {
          value = [self convertStringValueWithNSString:text withIOSClass:valueClass];
        }
      }
      else if ([selectedObject isKindOfClass:[JavaLangBoolean class]] && [((IOSClass *) nil_chk(valueClass)) isEqual:[IOSClass classWithClass:[JavaLangBoolean class]]]) {
        value = selectedObject;
      }
      else if ([selectedObject isKindOfClass:[NSNumber class]] && [[IOSClass classWithClass:[NSNumber class]] isAssignableFrom:valueClass]) {
        value = [self convertNumberWithNSNumber:(NSNumber *) selectedObject withIOSClass:valueClass];
      }
      else {
        NSString *text = [selectedObject description];
        value = [self convertStringValueWithNSString:text withIOSClass:valueClass];
      }
    }
  }
  else {
    value = selectedObject;
  }
  return value;
}

- (OrgOssPdfreporterEngineDataJRXmlDataSource *)subDataSourceWithNSString:(NSString *)selectExpr {
  id<OrgOssPdfreporterUsesOrgW3cDomDocument> doc = [self subDocument];
  OrgOssPdfreporterEngineDataJRXmlDataSource *subDataSource = [[OrgOssPdfreporterEngineDataJRXmlDataSource alloc] initWithOrgOssPdfreporterUsesOrgW3cDomDocument:doc withNSString:selectExpr];
  [((OrgOssPdfreporterEngineDataJRXmlDataSource *) nil_chk(subDataSource)) setTextAttributesWithOrgOssPdfreporterEngineDataJRAbstractTextDataSource:self];
  return subDataSource;
}

- (OrgOssPdfreporterEngineDataJRXmlDataSource *)subDataSource {
  return [self subDataSourceWithNSString:@"."];
}

- (id<OrgOssPdfreporterUsesOrgW3cDomDocument>)subDocument {
  if (currentNode_ == nil) {
    @throw [[OrgOssPdfreporterEngineJRException alloc] initWithNSString:@"No node available. Iterate or rewind the data source."];
  }
  return [OrgOssPdfreporterEngineUtilJRXmlUtils createDocumentWithOrgOssPdfreporterUsesOrgW3cDomNode:currentNode_];
}

- (OrgOssPdfreporterEngineDataJRXmlDataSource *)dataSourceWithNSString:(NSString *)selectExpr {
  OrgOssPdfreporterEngineDataJRXmlDataSource *subDataSource = [[OrgOssPdfreporterEngineDataJRXmlDataSource alloc] initWithOrgOssPdfreporterUsesOrgW3cDomDocument:document_ withNSString:selectExpr];
  [((OrgOssPdfreporterEngineDataJRXmlDataSource *) nil_chk(subDataSource)) setTextAttributesWithOrgOssPdfreporterEngineDataJRAbstractTextDataSource:self];
  return subDataSource;
}

- (OrgOssPdfreporterEngineDataJRXmlDataSource *)dataSource {
  return [self dataSourceWithNSString:@"."];
}

- (NSString *)getTextWithOrgOssPdfreporterUsesOrgW3cDomNode:(id<OrgOssPdfreporterUsesOrgW3cDomNode>)node {
  if (![((id<OrgOssPdfreporterUsesOrgW3cDomNode>) nil_chk(node)) hasChildNodes]) {
    return [((id<OrgOssPdfreporterUsesOrgW3cDomNode>) nil_chk(node)) getNodeValue];
  }
  JavaLangStringBuffer *result = [[JavaLangStringBuffer alloc] init];
  id<OrgOssPdfreporterUsesOrgW3cDomNodeList> list = [((id<OrgOssPdfreporterUsesOrgW3cDomNode>) nil_chk(node)) getChildNodes];
  for (int i = 0; i < [((id<OrgOssPdfreporterUsesOrgW3cDomNodeList>) nil_chk(list)) getLength]; i++) {
    id<OrgOssPdfreporterUsesOrgW3cDomNode> subnode = [((id<OrgOssPdfreporterUsesOrgW3cDomNodeList>) nil_chk(list)) itemWithInt:i];
    if ([((id<OrgOssPdfreporterUsesOrgW3cDomNode>) nil_chk(subnode)) getNodeType] == OrgOssPdfreporterUsesOrgW3cDomNode_TEXT_NODE) {
      NSString *value = [((id<OrgOssPdfreporterUsesOrgW3cDomNode>) nil_chk(subnode)) getNodeValue];
      if (value != nil) {
        (void) [((JavaLangStringBuffer *) nil_chk(result)) appendWithNSString:value];
      }
    }
    else if ([((id<OrgOssPdfreporterUsesOrgW3cDomNode>) nil_chk(subnode)) getNodeType] == OrgOssPdfreporterUsesOrgW3cDomNode_CDATA_SECTION_NODE) {
      NSString *value = [((id<OrgOssPdfreporterUsesOrgW3cDomNode>) nil_chk(subnode)) getNodeValue];
      if (value != nil) {
        (void) [((JavaLangStringBuffer *) nil_chk(result)) appendWithNSString:value];
      }
    }
    else if ([((id<OrgOssPdfreporterUsesOrgW3cDomNode>) nil_chk(subnode)) getNodeType] == OrgOssPdfreporterUsesOrgW3cDomNode_ENTITY_REFERENCE_NODE) {
      NSString *value = [self getTextWithOrgOssPdfreporterUsesOrgW3cDomNode:subnode];
      if (value != nil) {
        (void) [((JavaLangStringBuffer *) nil_chk(result)) appendWithNSString:value];
      }
    }
  }
  return [((JavaLangStringBuffer *) nil_chk(result)) description];
}

- (void)close {
  @try {
    if (closeInputStream_) {
      [((JavaIoInputStream *) nil_chk(inputStream_)) close];
    }
  }
  @catch (JavaIoIOException *e) {
  }
}

+ (void)initialize {
  if (self == [OrgOssPdfreporterEngineDataJRXmlDataSource class]) {
    OrgOssPdfreporterEngineDataJRXmlDataSource_logger_ = [JavaUtilLoggingLogger getLoggerWithNSString:[[IOSClass classWithClass:[OrgOssPdfreporterEngineDataJRXmlDataSource class]] getName]];
  }
}

- (void)copyAllPropertiesTo:(id)copy {
  [super copyAllPropertiesTo:copy];
  OrgOssPdfreporterEngineDataJRXmlDataSource *typedCopy = (OrgOssPdfreporterEngineDataJRXmlDataSource *) copy;
  typedCopy.document = document_;
  typedCopy.selectExpression = selectExpression_;
  typedCopy.nodeList = nodeList_;
  typedCopy.nodeListLength = nodeListLength_;
  typedCopy.currentNode = currentNode_;
  typedCopy.currentNodeIndex = currentNodeIndex_;
  typedCopy.xPathExecuter = xPathExecuter_;
  typedCopy.inputStream = inputStream_;
  typedCopy.closeInputStream = closeInputStream_;
}

@end
