//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: pdfreporter-core/src/org/oss/pdfreporter/engine/JasperPrint.java
//
//  Created by kendra on 9/27/13.
//

#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "java/lang/Integer.h"
#include "java/util/ArrayList.h"
#include "java/util/Collection.h"
#include "java/util/Collections.h"
#include "java/util/HashMap.h"
#include "java/util/Iterator.h"
#include "java/util/List.h"
#include "java/util/Map.h"
#include "org/oss/pdfreporter/engine/JRDefaultStyleProvider.h"
#include "org/oss/pdfreporter/engine/JRException.h"
#include "org/oss/pdfreporter/engine/JROrigin.h"
#include "org/oss/pdfreporter/engine/JRPrintAnchor.h"
#include "org/oss/pdfreporter/engine/JRPrintAnchorIndex.h"
#include "org/oss/pdfreporter/engine/JRPrintElement.h"
#include "org/oss/pdfreporter/engine/JRPrintFrame.h"
#include "org/oss/pdfreporter/engine/JRPrintPage.h"
#include "org/oss/pdfreporter/engine/JRPropertiesHolder.h"
#include "org/oss/pdfreporter/engine/JRPropertiesMap.h"
#include "org/oss/pdfreporter/engine/JRPropertiesUtil.h"
#include "org/oss/pdfreporter/engine/JRStyle.h"
#include "org/oss/pdfreporter/engine/JasperPrint.h"
#include "org/oss/pdfreporter/engine/type/OrientationEnum.h"

@implementation OrgOssPdfreporterEngineJasperPrint

static NSString * OrgOssPdfreporterEngineJasperPrint_PROPERTIES_PRINT_TRANSFER_PREFIX_ = @"net.sf.jasperreports.print.transfer.";

@synthesize name = name_;
@synthesize pageWidth = pageWidth_;
@synthesize pageHeight = pageHeight_;
@synthesize topMargin = topMargin_;
@synthesize leftMargin = leftMargin_;
@synthesize bottomMargin = bottomMargin_;
@synthesize rightMargin = rightMargin_;
@synthesize orientationValue = orientationValue_;
@synthesize stylesMap = stylesMap_;
@synthesize stylesList = stylesList_;
@synthesize originsMap = originsMap_;
@synthesize originsList = originsList_;
@synthesize pages = pages_;
@synthesize anchorIndexes = anchorIndexes_;
@synthesize defaultStyleProvider = defaultStyleProvider_;
@synthesize formatFactoryClass = formatFactoryClass_;
@synthesize localeCode = localeCode_;
@synthesize timeZoneId = timeZoneId_;
@synthesize propertiesMap = propertiesMap_;

+ (NSString *)PROPERTIES_PRINT_TRANSFER_PREFIX {
  return OrgOssPdfreporterEngineJasperPrint_PROPERTIES_PRINT_TRANSFER_PREFIX_;
}

- (id)init {
  if ((self = [super init])) {
    orientationValue_ = [OrgOssPdfreporterEngineTypeOrientationEnumEnum PORTRAIT];
    stylesMap_ = [[JavaUtilHashMap alloc] init];
    stylesList_ = [[JavaUtilArrayList alloc] init];
    originsMap_ = [[JavaUtilHashMap alloc] init];
    originsList_ = [[JavaUtilArrayList alloc] init];
    pages_ = [JavaUtilCollections synchronizedListWithJavaUtilList:[[JavaUtilArrayList alloc] init]];
    defaultStyleProvider_ = [[OrgOssPdfreporterEngineJasperPrint_DefaultStyleProvider alloc] initWithOrgOssPdfreporterEngineJRStyle:nil];
    propertiesMap_ = [[OrgOssPdfreporterEngineJRPropertiesMap alloc] init];
  }
  return self;
}

- (NSString *)getName {
  return name_;
}

- (void)setNameWithNSString:(NSString *)name {
  self.name = name;
}

- (int)getPageWidth {
  return pageWidth_;
}

- (void)setPageWidthWithInt:(int)pageWidth {
  self.pageWidth = pageWidth;
}

- (int)getPageHeight {
  return pageHeight_;
}

- (void)setPageHeightWithInt:(int)pageHeight {
  self.pageHeight = pageHeight;
}

- (JavaLangInteger *)getTopMargin {
  return topMargin_;
}

- (void)setTopMarginWithJavaLangInteger:(JavaLangInteger *)topMargin {
  self.topMargin = topMargin;
}

- (JavaLangInteger *)getLeftMargin {
  return leftMargin_;
}

- (void)setLeftMarginWithJavaLangInteger:(JavaLangInteger *)leftMargin {
  self.leftMargin = leftMargin;
}

- (JavaLangInteger *)getBottomMargin {
  return bottomMargin_;
}

- (void)setBottomMarginWithJavaLangInteger:(JavaLangInteger *)bottomMargin {
  self.bottomMargin = bottomMargin;
}

- (JavaLangInteger *)getRightMargin {
  return rightMargin_;
}

- (void)setRightMarginWithJavaLangInteger:(JavaLangInteger *)rightMargin {
  self.rightMargin = rightMargin;
}

- (OrgOssPdfreporterEngineTypeOrientationEnumEnum *)getOrientationValue {
  return orientationValue_;
}

- (void)setOrientationWithOrgOssPdfreporterEngineTypeOrientationEnumEnum:(OrgOssPdfreporterEngineTypeOrientationEnumEnum *)orientationValue {
  self.orientationValue = orientationValue;
}

- (BOOL)hasProperties {
  return propertiesMap_ != nil && [((OrgOssPdfreporterEngineJRPropertiesMap *) nil_chk(propertiesMap_)) hasProperties];
}

- (OrgOssPdfreporterEngineJRPropertiesMap *)getPropertiesMap {
  return propertiesMap_;
}

- (id<OrgOssPdfreporterEngineJRPropertiesHolder>)getParentProperties {
  return nil;
}

- (IOSObjectArray *)getPropertyNames {
  return [((OrgOssPdfreporterEngineJRPropertiesMap *) nil_chk(propertiesMap_)) getPropertyNames];
}

- (NSString *)getPropertyWithNSString:(NSString *)propName {
  return [((OrgOssPdfreporterEngineJRPropertiesMap *) nil_chk(propertiesMap_)) getPropertyWithNSString:propName];
}

- (void)setPropertyWithNSString:(NSString *)propName
                   withNSString:(NSString *)value {
  [((OrgOssPdfreporterEngineJRPropertiesMap *) nil_chk(propertiesMap_)) setPropertyWithNSString:propName withNSString:value];
}

- (void)removePropertyWithNSString:(NSString *)propName {
  [((OrgOssPdfreporterEngineJRPropertiesMap *) nil_chk(propertiesMap_)) removePropertyWithNSString:propName];
}

- (id<OrgOssPdfreporterEngineJRStyle>)getDefaultStyle {
  return [((OrgOssPdfreporterEngineJasperPrint_DefaultStyleProvider *) nil_chk(defaultStyleProvider_)) getDefaultStyle];
}

- (void)setDefaultStyleWithOrgOssPdfreporterEngineJRStyle:(id<OrgOssPdfreporterEngineJRStyle>)style {
  @synchronized(self) {
    {
      [((OrgOssPdfreporterEngineJasperPrint_DefaultStyleProvider *) nil_chk(defaultStyleProvider_)) setDefaultStyleWithOrgOssPdfreporterEngineJRStyle:style];
    }
  }
}

- (id<OrgOssPdfreporterEngineJRDefaultStyleProvider>)getDefaultStyleProvider {
  return defaultStyleProvider_;
}

- (IOSObjectArray *)getStyles {
  IOSObjectArray *stylesArray = [IOSObjectArray arrayWithLength:[((id<JavaUtilList>) nil_chk(stylesList_)) size] type:[IOSClass classWithProtocol:@protocol(OrgOssPdfreporterEngineJRStyle)]];
  (void) [((id<JavaUtilList>) nil_chk(stylesList_)) toArrayWithNSObjectArray:stylesArray];
  return stylesArray;
}

- (id<JavaUtilList>)getStylesList {
  return stylesList_;
}

- (id<JavaUtilMap>)getStylesMap {
  return stylesMap_;
}

- (void)addStyleWithOrgOssPdfreporterEngineJRStyle:(id<OrgOssPdfreporterEngineJRStyle>)style {
  @synchronized(self) {
    {
      [self addStyleWithOrgOssPdfreporterEngineJRStyle:style withBOOL:NO];
    }
  }
}

- (void)addStyleWithOrgOssPdfreporterEngineJRStyle:(id<OrgOssPdfreporterEngineJRStyle>)style
                                          withBOOL:(BOOL)isIgnoreDuplicate {
  @synchronized(self) {
    {
      if ([((id<JavaUtilMap>) nil_chk(stylesMap_)) containsKeyWithId:[((id<OrgOssPdfreporterEngineJRStyle>) nil_chk(style)) getName]]) {
        if (!isIgnoreDuplicate) {
          @throw [[OrgOssPdfreporterEngineJRException alloc] initWithNSString:[NSString stringWithFormat:@"Duplicate declaration of report style : %@", [((id<OrgOssPdfreporterEngineJRStyle>) nil_chk(style)) getName]]];
        }
      }
      else {
        [((id<JavaUtilList>) nil_chk(stylesList_)) addWithId:style];
        (void) [((id<JavaUtilMap>) nil_chk(stylesMap_)) putWithId:[((id<OrgOssPdfreporterEngineJRStyle>) nil_chk(style)) getName] withId:style];
        if ([((id<OrgOssPdfreporterEngineJRStyle>) nil_chk(style)) isDefault]) {
          [self setDefaultStyleWithOrgOssPdfreporterEngineJRStyle:style];
        }
      }
    }
  }
}

- (id<OrgOssPdfreporterEngineJRStyle>)removeStyleWithNSString:(NSString *)styleName {
  @synchronized(self) {
    {
      return [self removeStyleWithOrgOssPdfreporterEngineJRStyle:[((id<JavaUtilMap>) nil_chk(stylesMap_)) getWithId:styleName]];
    }
  }
}

- (id<OrgOssPdfreporterEngineJRStyle>)removeStyleWithOrgOssPdfreporterEngineJRStyle:(id<OrgOssPdfreporterEngineJRStyle>)style {
  @synchronized(self) {
    {
      if (style != nil) {
        if ([style isDefault]) {
          [self setDefaultStyleWithOrgOssPdfreporterEngineJRStyle:nil];
        }
        [((id<JavaUtilList>) nil_chk(stylesList_)) removeWithId:style];
        (void) [((id<JavaUtilMap>) nil_chk(stylesMap_)) removeWithId:[style getName]];
      }
      return style;
    }
  }
}

- (IOSObjectArray *)getOrigins {
  return [((id<JavaUtilList>) nil_chk(originsList_)) toArrayWithNSObjectArray:[IOSObjectArray arrayWithLength:[((id<JavaUtilList>) nil_chk(originsList_)) size] type:[IOSClass classWithClass:[OrgOssPdfreporterEngineJROrigin class]]]];
}

- (id<JavaUtilList>)getOriginsList {
  return originsList_;
}

- (id<JavaUtilMap>)getOriginsMap {
  return originsMap_;
}

- (void)addOriginWithOrgOssPdfreporterEngineJROrigin:(OrgOssPdfreporterEngineJROrigin *)origin {
  @synchronized(self) {
    {
      if (![((id<JavaUtilMap>) nil_chk(originsMap_)) containsKeyWithId:origin]) {
        [((id<JavaUtilList>) nil_chk(originsList_)) addWithId:origin];
        (void) [((id<JavaUtilMap>) nil_chk(originsMap_)) putWithId:origin withId:[JavaLangInteger valueOfWithInt:[((id<JavaUtilList>) nil_chk(originsList_)) size] - 1]];
      }
    }
  }
}

- (OrgOssPdfreporterEngineJROrigin *)removeOriginWithOrgOssPdfreporterEngineJROrigin:(OrgOssPdfreporterEngineJROrigin *)origin {
  @synchronized(self) {
    {
      if ([((id<JavaUtilMap>) nil_chk(originsMap_)) containsKeyWithId:origin]) {
        [((id<JavaUtilList>) nil_chk(originsList_)) removeWithId:origin];
        originsMap_ = [[JavaUtilHashMap alloc] init];
        for (int i = 0; i < [((id<JavaUtilList>) nil_chk(originsList_)) size]; i++) {
          (void) [((id<JavaUtilMap>) nil_chk(originsMap_)) putWithId:[((id<JavaUtilList>) nil_chk(originsList_)) getWithInt:i] withId:[JavaLangInteger valueOfWithInt:i]];
        }
      }
      return origin;
    }
  }
}

- (id<JavaUtilList>)getPages {
  return pages_;
}

- (void)addPageWithOrgOssPdfreporterEngineJRPrintPage:(id<OrgOssPdfreporterEngineJRPrintPage>)page {
  @synchronized(self) {
    {
      anchorIndexes_ = nil;
      [((id<JavaUtilList>) nil_chk(pages_)) addWithId:page];
    }
  }
}

- (void)addPageWithInt:(int)index
withOrgOssPdfreporterEngineJRPrintPage:(id<OrgOssPdfreporterEngineJRPrintPage>)page {
  @synchronized(self) {
    {
      anchorIndexes_ = nil;
      [((id<JavaUtilList>) nil_chk(pages_)) addWithInt:index withId:page];
    }
  }
}

- (id<OrgOssPdfreporterEngineJRPrintPage>)removePageWithInt:(int)index {
  @synchronized(self) {
    {
      anchorIndexes_ = nil;
      return [((id<JavaUtilList>) nil_chk(pages_)) removeWithInt:index];
    }
  }
}

- (id<JavaUtilMap>)getAnchorIndexes {
  @synchronized(self) {
    {
      if (anchorIndexes_ == nil) {
        anchorIndexes_ = [[JavaUtilHashMap alloc] init];
        int i = 0;
        for (id<JavaUtilIterator> itp = [((id<JavaUtilList>) nil_chk(pages_)) iterator]; [((id<JavaUtilIterator>) nil_chk(itp)) hasNext]; i++) {
          id<OrgOssPdfreporterEngineJRPrintPage> page = [((id<JavaUtilIterator>) nil_chk(itp)) next];
          id<JavaUtilCollection> elements = [((id<OrgOssPdfreporterEngineJRPrintPage>) nil_chk(page)) getElements];
          [self collectAnchorsWithJavaUtilCollection:elements withInt:i withInt:0 withInt:0];
        }
      }
      return anchorIndexes_;
    }
  }
}

- (void)collectAnchorsWithJavaUtilCollection:(id<JavaUtilCollection>)elements
                                     withInt:(int)pageIndex
                                     withInt:(int)offsetX
                                     withInt:(int)offsetY {
  if (elements != nil && [((id<JavaUtilCollection>) nil_chk(elements)) size] > 0) {
    id<OrgOssPdfreporterEngineJRPrintElement> element = nil;
    for (id<JavaUtilIterator> it = [((id<JavaUtilCollection>) nil_chk(elements)) iterator]; [((id<JavaUtilIterator>) nil_chk(it)) hasNext]; ) {
      element = [((id<JavaUtilIterator>) nil_chk(it)) next];
      if ([(id) element conformsToProtocol: @protocol(OrgOssPdfreporterEngineJRPrintAnchor)]) {
        (void) [((id<JavaUtilMap>) nil_chk(anchorIndexes_)) putWithId:[((id<OrgOssPdfreporterEngineJRPrintAnchor>) element) getAnchorName] withId:[[OrgOssPdfreporterEngineJRPrintAnchorIndex alloc] initWithInt:pageIndex withOrgOssPdfreporterEngineJRPrintElement:element withInt:offsetX withInt:offsetY]];
      }
      if ([(id) element conformsToProtocol: @protocol(OrgOssPdfreporterEngineJRPrintFrame)]) {
        id<OrgOssPdfreporterEngineJRPrintFrame> frame = (id<OrgOssPdfreporterEngineJRPrintFrame>) element;
        [self collectAnchorsWithJavaUtilCollection:[((id<OrgOssPdfreporterEngineJRPrintFrame>) nil_chk(frame)) getElements] withInt:pageIndex withInt:offsetX + [((id<OrgOssPdfreporterEngineJRPrintFrame>) nil_chk(frame)) getX] withInt:offsetY + [((id<OrgOssPdfreporterEngineJRPrintFrame>) nil_chk(frame)) getY]];
      }
    }
  }
}

- (NSString *)getFormatFactoryClass {
  return formatFactoryClass_;
}

- (void)setFormatFactoryClassWithNSString:(NSString *)formatFactoryClass {
  self.formatFactoryClass = formatFactoryClass;
}

- (NSString *)getLocaleCode {
  return localeCode_;
}

- (void)setLocaleCodeWithNSString:(NSString *)localeCode {
  self.localeCode = localeCode;
}

- (NSString *)getTimeZoneId {
  return timeZoneId_;
}

- (void)setTimeZoneIdWithNSString:(NSString *)timeZoneId {
  self.timeZoneId = timeZoneId;
}

- (void)copyAllPropertiesTo:(id)copy {
  [super copyAllPropertiesTo:copy];
  OrgOssPdfreporterEngineJasperPrint *typedCopy = (OrgOssPdfreporterEngineJasperPrint *) copy;
  typedCopy.name = name_;
  typedCopy.pageWidth = pageWidth_;
  typedCopy.pageHeight = pageHeight_;
  typedCopy.topMargin = topMargin_;
  typedCopy.leftMargin = leftMargin_;
  typedCopy.bottomMargin = bottomMargin_;
  typedCopy.rightMargin = rightMargin_;
  typedCopy.orientationValue = orientationValue_;
  typedCopy.stylesMap = stylesMap_;
  typedCopy.stylesList = stylesList_;
  typedCopy.originsMap = originsMap_;
  typedCopy.originsList = originsList_;
  typedCopy.pages = pages_;
  typedCopy.anchorIndexes = anchorIndexes_;
  typedCopy.defaultStyleProvider = defaultStyleProvider_;
  typedCopy.formatFactoryClass = formatFactoryClass_;
  typedCopy.localeCode = localeCode_;
  typedCopy.timeZoneId = timeZoneId_;
  typedCopy.propertiesMap = propertiesMap_;
}

@end
@implementation OrgOssPdfreporterEngineJasperPrint_DefaultStyleProvider

@synthesize defaultStyle = defaultStyle_;

- (id)initWithOrgOssPdfreporterEngineJRStyle:(id<OrgOssPdfreporterEngineJRStyle>)style {
  if ((self = [super init])) {
    self.defaultStyle = style;
  }
  return self;
}

- (id<OrgOssPdfreporterEngineJRStyle>)getDefaultStyle {
  return defaultStyle_;
}

- (void)setDefaultStyleWithOrgOssPdfreporterEngineJRStyle:(id<OrgOssPdfreporterEngineJRStyle>)style {
  self.defaultStyle = style;
}

- (void)copyAllPropertiesTo:(id)copy {
  [super copyAllPropertiesTo:copy];
  OrgOssPdfreporterEngineJasperPrint_DefaultStyleProvider *typedCopy = (OrgOssPdfreporterEngineJasperPrint_DefaultStyleProvider *) copy;
  typedCopy.defaultStyle = defaultStyle_;
}

@end
