//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: pdfreporter-core/src/org/oss/pdfreporter/engine/fonts/SimpleFontFamily.java
//
//  Created by kendra on 9/27/13.
//

#include "java/lang/Boolean.h"
#include "java/util/Locale.h"
#include "java/util/Map.h"
#include "java/util/Set.h"
#include "org/oss/pdfreporter/engine/DefaultJasperReportsContext.h"
#include "org/oss/pdfreporter/engine/JasperReportsContext.h"
#include "org/oss/pdfreporter/engine/fonts/FontFace.h"
#include "org/oss/pdfreporter/engine/fonts/LazyFontFace.h"
#include "org/oss/pdfreporter/engine/fonts/SimpleFontFamily.h"
#include "org/oss/pdfreporter/engine/util/JRDataUtils.h"
#include "org/oss/pdfreporter/font/IFont.h"

@implementation OrgOssPdfreporterEngineFontsSimpleFontFamily

@synthesize jasperReportsContext = jasperReportsContext_;
@synthesize name = name_;
@synthesize normalFace = normalFace_;
@synthesize boldFace = boldFace_;
@synthesize italicFace = italicFace_;
@synthesize boldItalicFace = boldItalicFace_;
@synthesize normalPdfFont = normalPdfFont_;
@synthesize boldPdfFont = boldPdfFont_;
@synthesize italicPdfFont = italicPdfFont_;
@synthesize boldItalicPdfFont = boldItalicPdfFont_;
@synthesize pdfEncoding = pdfEncoding_;
@synthesize isPdfEmbedded_ = isPdfEmbedded__;
@synthesize defaultExportFont = defaultExportFont_;
@synthesize exportFonts = exportFonts_;
@synthesize locales = locales_;

- (id)init {
  return [self initOrgOssPdfreporterEngineFontsSimpleFontFamilyWithOrgOssPdfreporterEngineJasperReportsContext:[OrgOssPdfreporterEngineDefaultJasperReportsContext getInstance]];
}

- (id)initOrgOssPdfreporterEngineFontsSimpleFontFamilyWithOrgOssPdfreporterEngineJasperReportsContext:(id<OrgOssPdfreporterEngineJasperReportsContext>)jasperReportsContext {
  if ((self = [super init])) {
    self.jasperReportsContext = jasperReportsContext;
  }
  return self;
}

- (id)initWithOrgOssPdfreporterEngineJasperReportsContext:(id<OrgOssPdfreporterEngineJasperReportsContext>)jasperReportsContext {
  return [self initOrgOssPdfreporterEngineFontsSimpleFontFamilyWithOrgOssPdfreporterEngineJasperReportsContext:jasperReportsContext];
}

- (NSString *)getName {
  return name_;
}

- (void)setNameWithNSString:(NSString *)name {
  self.name = name;
}

- (void)setNormalWithNSString:(NSString *)normal {
  normalFace_ = [OrgOssPdfreporterEngineFontsLazyFontFace getInstanceWithOrgOssPdfreporterEngineFontsFontFamily:self withOrgOssPdfreporterFontIFont_FontStyleEnum:[OrgOssPdfreporterFontIFont_FontStyleEnum PLAIN] withNSString:normal];
}

- (void)setBoldWithNSString:(NSString *)bold {
  boldFace_ = [OrgOssPdfreporterEngineFontsLazyFontFace getInstanceWithOrgOssPdfreporterEngineFontsFontFamily:self withOrgOssPdfreporterFontIFont_FontStyleEnum:[OrgOssPdfreporterFontIFont_FontStyleEnum BOLD] withNSString:bold];
}

- (void)setItalicWithNSString:(NSString *)italic {
  italicFace_ = [OrgOssPdfreporterEngineFontsLazyFontFace getInstanceWithOrgOssPdfreporterEngineFontsFontFamily:self withOrgOssPdfreporterFontIFont_FontStyleEnum:[OrgOssPdfreporterFontIFont_FontStyleEnum OBLIQUE] withNSString:italic];
}

- (void)setBoldItalicWithNSString:(NSString *)boldItalic {
  boldItalicFace_ = [OrgOssPdfreporterEngineFontsLazyFontFace getInstanceWithOrgOssPdfreporterEngineFontsFontFamily:self withOrgOssPdfreporterFontIFont_FontStyleEnum:[OrgOssPdfreporterFontIFont_FontStyleEnum BOLD_OBLIQUE] withNSString:boldItalic];
}

- (id<OrgOssPdfreporterEngineFontsFontFace>)getNormalFace {
  return normalFace_;
}

- (id<OrgOssPdfreporterEngineFontsFontFace>)getBoldFace {
  return boldFace_;
}

- (id<OrgOssPdfreporterEngineFontsFontFace>)getItalicFace {
  return italicFace_;
}

- (id<OrgOssPdfreporterEngineFontsFontFace>)getBoldItalicFace {
  return boldItalicFace_;
}

- (NSString *)getNormalPdfFont {
  return normalPdfFont_;
}

- (void)setNormalPdfFontWithNSString:(NSString *)normalPdfFont {
  self.normalPdfFont = normalPdfFont;
}

- (NSString *)getBoldPdfFont {
  return boldPdfFont_;
}

- (void)setBoldPdfFontWithNSString:(NSString *)boldPdfFont {
  self.boldPdfFont = boldPdfFont;
}

- (NSString *)getItalicPdfFont {
  return italicPdfFont_;
}

- (void)setItalicPdfFontWithNSString:(NSString *)italicPdfFont {
  self.italicPdfFont = italicPdfFont;
}

- (NSString *)getBoldItalicPdfFont {
  return boldItalicPdfFont_;
}

- (void)setBoldItalicPdfFontWithNSString:(NSString *)boldItalicPdfFont {
  self.boldItalicPdfFont = boldItalicPdfFont;
}

- (NSString *)getPdfEncoding {
  return pdfEncoding_;
}

- (void)setPdfEncodingWithNSString:(NSString *)pdfEncoding {
  self.pdfEncoding = pdfEncoding;
}

- (JavaLangBoolean *)isPdfEmbedded {
  return isPdfEmbedded__;
}

- (void)setPdfEmbeddedWithJavaLangBoolean:(JavaLangBoolean *)isPdfEmbedded {
  self.isPdfEmbedded_ = isPdfEmbedded;
}

- (NSString *)getDefaultExportFont {
  return defaultExportFont_;
}

- (void)setDefaultExportFontWithNSString:(NSString *)defaultExportFont {
  self.defaultExportFont = defaultExportFont;
}

- (id<JavaUtilMap>)getExportFonts {
  return exportFonts_;
}

- (void)setExportFontsWithJavaUtilMap:(id<JavaUtilMap>)exportFonts {
  self.exportFonts = exportFonts;
}

- (NSString *)getExportFontWithNSString:(NSString *)key {
  NSString *exportFont = exportFonts_ == nil ? nil : (NSString *) [((id<JavaUtilMap>) nil_chk(exportFonts_)) getWithId:key];
  return exportFont == nil ? defaultExportFont_ : exportFont;
}

- (id<JavaUtilSet>)getLocales {
  return locales_;
}

- (void)setLocalesWithJavaUtilSet:(id<JavaUtilSet>)locales {
  self.locales = locales;
}

- (BOOL)supportsLocaleWithJavaUtilLocale:(JavaUtilLocale *)locale {
  return locales_ == nil || [((id<JavaUtilSet>) nil_chk(locales_)) isEmpty] || [((id<JavaUtilSet>) nil_chk(locales_)) containsWithId:[OrgOssPdfreporterEngineUtilJRDataUtils getLocaleCodeWithJavaUtilLocale:locale]];
}

- (void)copyAllPropertiesTo:(id)copy {
  [super copyAllPropertiesTo:copy];
  OrgOssPdfreporterEngineFontsSimpleFontFamily *typedCopy = (OrgOssPdfreporterEngineFontsSimpleFontFamily *) copy;
  typedCopy.jasperReportsContext = jasperReportsContext_;
  typedCopy.name = name_;
  typedCopy.normalFace = normalFace_;
  typedCopy.boldFace = boldFace_;
  typedCopy.italicFace = italicFace_;
  typedCopy.boldItalicFace = boldItalicFace_;
  typedCopy.normalPdfFont = normalPdfFont_;
  typedCopy.boldPdfFont = boldPdfFont_;
  typedCopy.italicPdfFont = italicPdfFont_;
  typedCopy.boldItalicPdfFont = boldItalicPdfFont_;
  typedCopy.pdfEncoding = pdfEncoding_;
  typedCopy.isPdfEmbedded_ = isPdfEmbedded__;
  typedCopy.defaultExportFont = defaultExportFont_;
  typedCopy.exportFonts = exportFonts_;
  typedCopy.locales = locales_;
}

@end
