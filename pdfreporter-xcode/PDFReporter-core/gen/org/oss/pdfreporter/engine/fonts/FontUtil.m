//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: pdfreporter-core/src/org/oss/pdfreporter/engine/fonts/FontUtil.java
//
//  Created by kendra on 9/27/13.
//

#include "IOSClass.h"
#include "java/lang/Boolean.h"
#include "java/lang/Float.h"
#include "java/lang/Integer.h"
#include "java/util/Collection.h"
#include "java/util/HashMap.h"
#include "java/util/Iterator.h"
#include "java/util/List.h"
#include "java/util/Locale.h"
#include "java/util/Map.h"
#include "java/util/TreeSet.h"
#include "java/util/logging/Logger.h"
#include "org/oss/pdfreporter/engine/JRFont.h"
#include "org/oss/pdfreporter/engine/JRRuntimeException.h"
#include "org/oss/pdfreporter/engine/JasperReportsContext.h"
#include "org/oss/pdfreporter/engine/fonts/FontFace.h"
#include "org/oss/pdfreporter/engine/fonts/FontFamily.h"
#include "org/oss/pdfreporter/engine/fonts/FontInfo.h"
#include "org/oss/pdfreporter/engine/fonts/FontUtil.h"
#include "org/oss/pdfreporter/engine/util/JRFontNotFoundException.h"
#include "org/oss/pdfreporter/engine/util/JRGraphEnvInitializer.h"
#include "org/oss/pdfreporter/engine/util/JRTextAttribute.h"
#include "org/oss/pdfreporter/font/IFont.h"
#include "org/oss/pdfreporter/font/IFontManager.h"
#include "org/oss/pdfreporter/font/factory/IFontFactory.h"
#include "org/oss/pdfreporter/font/text/TextAttribute.h"
#include "org/oss/pdfreporter/registry/ApiRegistry.h"

@implementation OrgOssPdfreporterEngineFontsFontUtil

static JavaUtilLoggingLogger * OrgOssPdfreporterEngineFontsFontUtil_logger_;

@synthesize jasperReportsContext = jasperReportsContext_;

+ (JavaUtilLoggingLogger *)logger {
  return OrgOssPdfreporterEngineFontsFontUtil_logger_;
}

- (id)initWithOrgOssPdfreporterEngineJasperReportsContext:(id<OrgOssPdfreporterEngineJasperReportsContext>)jasperReportsContext {
  if ((self = [super init])) {
    self.jasperReportsContext = jasperReportsContext;
  }
  return self;
}

+ (OrgOssPdfreporterEngineFontsFontUtil *)getInstanceWithOrgOssPdfreporterEngineJasperReportsContext:(id<OrgOssPdfreporterEngineJasperReportsContext>)jasperReportsContext {
  return [[OrgOssPdfreporterEngineFontsFontUtil alloc] initWithOrgOssPdfreporterEngineJasperReportsContext:jasperReportsContext];
}

+ (void)copyNonNullOwnPropertiesWithOrgOssPdfreporterEngineJRFont:(id<OrgOssPdfreporterEngineJRFont>)srcFont
                                withOrgOssPdfreporterEngineJRFont:(id<OrgOssPdfreporterEngineJRFont>)destFont OBJC_METHOD_FAMILY_NONE {
  if (srcFont != nil && destFont != nil) {
    if ([((id<OrgOssPdfreporterEngineJRFont>) nil_chk(srcFont)) getOwnFontName] != nil) {
      [((id<OrgOssPdfreporterEngineJRFont>) nil_chk(destFont)) setFontNameWithNSString:[((id<OrgOssPdfreporterEngineJRFont>) nil_chk(srcFont)) getOwnFontName]];
    }
    if ([((id<OrgOssPdfreporterEngineJRFont>) nil_chk(srcFont)) isOwnBold] != nil) {
      [((id<OrgOssPdfreporterEngineJRFont>) nil_chk(destFont)) setBoldWithJavaLangBoolean:[((id<OrgOssPdfreporterEngineJRFont>) nil_chk(srcFont)) isOwnBold]];
    }
    if ([((id<OrgOssPdfreporterEngineJRFont>) nil_chk(srcFont)) isOwnItalic] != nil) {
      [((id<OrgOssPdfreporterEngineJRFont>) nil_chk(destFont)) setItalicWithJavaLangBoolean:[((id<OrgOssPdfreporterEngineJRFont>) nil_chk(srcFont)) isOwnItalic]];
    }
    if ([((id<OrgOssPdfreporterEngineJRFont>) nil_chk(srcFont)) isOwnUnderline] != nil) {
      [((id<OrgOssPdfreporterEngineJRFont>) nil_chk(destFont)) setUnderlineWithJavaLangBoolean:[((id<OrgOssPdfreporterEngineJRFont>) nil_chk(srcFont)) isOwnUnderline]];
    }
    if ([((id<OrgOssPdfreporterEngineJRFont>) nil_chk(srcFont)) isOwnStrikeThrough] != nil) {
      [((id<OrgOssPdfreporterEngineJRFont>) nil_chk(destFont)) setStrikeThroughWithJavaLangBoolean:[((id<OrgOssPdfreporterEngineJRFont>) nil_chk(srcFont)) isOwnStrikeThrough]];
    }
    if ([((id<OrgOssPdfreporterEngineJRFont>) nil_chk(srcFont)) getOwnFontSize] != nil) {
      [((id<OrgOssPdfreporterEngineJRFont>) nil_chk(destFont)) setFontSizeWithJavaLangInteger:[((id<OrgOssPdfreporterEngineJRFont>) nil_chk(srcFont)) getOwnFontSize]];
    }
    if ([((id<OrgOssPdfreporterEngineJRFont>) nil_chk(srcFont)) getOwnPdfFontName] != nil) {
      [((id<OrgOssPdfreporterEngineJRFont>) nil_chk(destFont)) setPdfFontNameWithNSString:[((id<OrgOssPdfreporterEngineJRFont>) nil_chk(srcFont)) getOwnPdfFontName]];
    }
    if ([((id<OrgOssPdfreporterEngineJRFont>) nil_chk(srcFont)) getOwnPdfEncoding] != nil) {
      [((id<OrgOssPdfreporterEngineJRFont>) nil_chk(destFont)) setPdfEncodingWithNSString:[((id<OrgOssPdfreporterEngineJRFont>) nil_chk(srcFont)) getOwnPdfEncoding]];
    }
    if ([((id<OrgOssPdfreporterEngineJRFont>) nil_chk(srcFont)) isOwnPdfEmbedded] != nil) {
      [((id<OrgOssPdfreporterEngineJRFont>) nil_chk(destFont)) setPdfEmbeddedWithJavaLangBoolean:[((id<OrgOssPdfreporterEngineJRFont>) nil_chk(srcFont)) isOwnPdfEmbedded]];
    }
  }
}

- (id<JavaUtilMap>)getAttributesWithoutAwtFontWithJavaUtilMap:(id<JavaUtilMap>)attributes
                            withOrgOssPdfreporterEngineJRFont:(id<OrgOssPdfreporterEngineJRFont>)font {
  (void) [((id<JavaUtilMap>) nil_chk(attributes)) putWithId:[OrgOssPdfreporterFontTextTextAttribute FAMILY] withId:[((id<OrgOssPdfreporterEngineJRFont>) nil_chk(font)) getFontName]];
  (void) [((id<JavaUtilMap>) nil_chk(attributes)) putWithId:[OrgOssPdfreporterFontTextTextAttribute SIZE] withId:[[JavaLangFloat alloc] initWithFloat:[((id<OrgOssPdfreporterEngineJRFont>) nil_chk(font)) getFontSize]]];
  if ([((id<OrgOssPdfreporterEngineJRFont>) nil_chk(font)) isBold]) {
    (void) [((id<JavaUtilMap>) nil_chk(attributes)) putWithId:[OrgOssPdfreporterFontTextTextAttribute WEIGHT] withId:[OrgOssPdfreporterFontTextTextAttribute WEIGHT_BOLD]];
  }
  if ([((id<OrgOssPdfreporterEngineJRFont>) nil_chk(font)) isItalic]) {
    (void) [((id<JavaUtilMap>) nil_chk(attributes)) putWithId:[OrgOssPdfreporterFontTextTextAttribute POSTURE] withId:[OrgOssPdfreporterFontTextTextAttribute POSTURE_OBLIQUE]];
  }
  if ([((id<OrgOssPdfreporterEngineJRFont>) nil_chk(font)) isUnderline]) {
    (void) [((id<JavaUtilMap>) nil_chk(attributes)) putWithId:[OrgOssPdfreporterFontTextTextAttribute UNDERLINE] withId:[OrgOssPdfreporterFontTextTextAttribute UNDERLINE_ON]];
  }
  if ([((id<OrgOssPdfreporterEngineJRFont>) nil_chk(font)) isStrikeThrough]) {
    (void) [((id<JavaUtilMap>) nil_chk(attributes)) putWithId:[OrgOssPdfreporterFontTextTextAttribute STRIKETHROUGH] withId:[OrgOssPdfreporterFontTextTextAttribute STRIKETHROUGH_ON]];
  }
  (void) [((id<JavaUtilMap>) nil_chk(attributes)) putWithId:[OrgOssPdfreporterEngineUtilJRTextAttribute PDF_FONT_NAME] withId:[((id<OrgOssPdfreporterEngineJRFont>) nil_chk(font)) getPdfFontName]];
  (void) [((id<JavaUtilMap>) nil_chk(attributes)) putWithId:[OrgOssPdfreporterEngineUtilJRTextAttribute PDF_ENCODING] withId:[((id<OrgOssPdfreporterEngineJRFont>) nil_chk(font)) getPdfEncoding]];
  if ([((id<OrgOssPdfreporterEngineJRFont>) nil_chk(font)) isPdfEmbedded]) {
    (void) [((id<JavaUtilMap>) nil_chk(attributes)) putWithId:[OrgOssPdfreporterEngineUtilJRTextAttribute IS_PDF_EMBEDDED] withId:[JavaLangBoolean getTRUE]];
  }
  return attributes;
}

- (OrgOssPdfreporterEngineFontsFontInfo *)getFontInfoWithNSString:(NSString *)name
                                               withJavaUtilLocale:(JavaUtilLocale *)locale {
  id<JavaUtilList> families = [((id<OrgOssPdfreporterEngineJasperReportsContext>) nil_chk(jasperReportsContext_)) getExtensionsWithIOSClass:[IOSClass classWithProtocol:@protocol(OrgOssPdfreporterEngineFontsFontFamily)]];
  for (id<JavaUtilIterator> itf = [((id<JavaUtilList>) nil_chk(families)) iterator]; [((id<JavaUtilIterator>) nil_chk(itf)) hasNext]; ) {
    id<OrgOssPdfreporterEngineFontsFontFamily> family = [((id<JavaUtilIterator>) nil_chk(itf)) next];
    if (locale == nil || [((id<OrgOssPdfreporterEngineFontsFontFamily>) nil_chk(family)) supportsLocaleWithJavaUtilLocale:locale]) {
      if ([((NSString *) nil_chk(name)) isEqual:[((id<OrgOssPdfreporterEngineFontsFontFamily>) nil_chk(family)) getName]]) {
        return [[OrgOssPdfreporterEngineFontsFontInfo alloc] initWithOrgOssPdfreporterEngineFontsFontFamily:family withOrgOssPdfreporterEngineFontsFontFace:nil withOrgOssPdfreporterFontIFont_FontStyleEnum:[OrgOssPdfreporterFontIFont_FontStyleEnum PLAIN]];
      }
      id<OrgOssPdfreporterEngineFontsFontFace> face = [((id<OrgOssPdfreporterEngineFontsFontFamily>) nil_chk(family)) getNormalFace];
      if (face != nil && [((NSString *) nil_chk(name)) isEqual:[((id<OrgOssPdfreporterEngineFontsFontFace>) nil_chk(face)) getName]]) {
        return [[OrgOssPdfreporterEngineFontsFontInfo alloc] initWithOrgOssPdfreporterEngineFontsFontFamily:family withOrgOssPdfreporterEngineFontsFontFace:face withOrgOssPdfreporterFontIFont_FontStyleEnum:[OrgOssPdfreporterFontIFont_FontStyleEnum PLAIN]];
      }
      face = [((id<OrgOssPdfreporterEngineFontsFontFamily>) nil_chk(family)) getBoldFace];
      if (face != nil && [((NSString *) nil_chk(name)) isEqual:[((id<OrgOssPdfreporterEngineFontsFontFace>) nil_chk(face)) getName]]) {
        return [[OrgOssPdfreporterEngineFontsFontInfo alloc] initWithOrgOssPdfreporterEngineFontsFontFamily:family withOrgOssPdfreporterEngineFontsFontFace:face withOrgOssPdfreporterFontIFont_FontStyleEnum:[OrgOssPdfreporterFontIFont_FontStyleEnum BOLD]];
      }
      face = [((id<OrgOssPdfreporterEngineFontsFontFamily>) nil_chk(family)) getItalicFace];
      if (face != nil && [((NSString *) nil_chk(name)) isEqual:[((id<OrgOssPdfreporterEngineFontsFontFace>) nil_chk(face)) getName]]) {
        return [[OrgOssPdfreporterEngineFontsFontInfo alloc] initWithOrgOssPdfreporterEngineFontsFontFamily:family withOrgOssPdfreporterEngineFontsFontFace:face withOrgOssPdfreporterFontIFont_FontStyleEnum:[OrgOssPdfreporterFontIFont_FontStyleEnum OBLIQUE]];
      }
      face = [((id<OrgOssPdfreporterEngineFontsFontFamily>) nil_chk(family)) getBoldItalicFace];
      if (face != nil && [((NSString *) nil_chk(name)) isEqual:[((id<OrgOssPdfreporterEngineFontsFontFace>) nil_chk(face)) getName]]) {
        return [[OrgOssPdfreporterEngineFontsFontInfo alloc] initWithOrgOssPdfreporterEngineFontsFontFamily:family withOrgOssPdfreporterEngineFontsFontFace:face withOrgOssPdfreporterFontIFont_FontStyleEnum:[OrgOssPdfreporterFontIFont_FontStyleEnum BOLD_OBLIQUE]];
      }
    }
  }
  return nil;
}

- (id<JavaUtilCollection>)getFontFamilyNames {
  JavaUtilTreeSet *familyNames = [[JavaUtilTreeSet alloc] init];
  id<JavaUtilList> families = [((id<OrgOssPdfreporterEngineJasperReportsContext>) nil_chk(jasperReportsContext_)) getExtensionsWithIOSClass:[IOSClass classWithProtocol:@protocol(OrgOssPdfreporterEngineFontsFontFamily)]];
  for (id<JavaUtilIterator> itf = [((id<JavaUtilList>) nil_chk(families)) iterator]; [((id<JavaUtilIterator>) nil_chk(itf)) hasNext]; ) {
    id<OrgOssPdfreporterEngineFontsFontFamily> family = [((id<JavaUtilIterator>) nil_chk(itf)) next];
    [((JavaUtilTreeSet *) nil_chk(familyNames)) addWithId:[((id<OrgOssPdfreporterEngineFontsFontFamily>) nil_chk(family)) getName]];
  }
  return familyNames;
}

- (id<OrgOssPdfreporterFontIFont>)getAwtFontFromBundlesWithNSString:(NSString *)name
                       withOrgOssPdfreporterFontIFont_FontStyleEnum:(OrgOssPdfreporterFontIFont_FontStyleEnum *)style
                                                            withInt:(int)size
                                                 withJavaUtilLocale:(JavaUtilLocale *)locale
                                                           withBOOL:(BOOL)ignoreMissingFont {
  id<OrgOssPdfreporterFontIFont> awtFont = nil;
  OrgOssPdfreporterEngineFontsFontInfo *fontInfo = [self getFontInfoWithNSString:name withJavaUtilLocale:locale];
  if (fontInfo != nil) {
    id<OrgOssPdfreporterEngineFontsFontFamily> family = [fontInfo getFontFamily];
    id<OrgOssPdfreporterEngineFontsFontFace> face = [fontInfo getFontFace];
    if (face == nil) {
      if ([((OrgOssPdfreporterFontIFont_FontStyleEnum *) nil_chk(style)) isEqual:[OrgOssPdfreporterFontIFont_FontStyleEnum BOLD_OBLIQUE]]) {
        face = [((id<OrgOssPdfreporterEngineFontsFontFamily>) nil_chk(family)) getBoldItalicFace];
      }
      if (face == nil && [((OrgOssPdfreporterFontIFont_FontStyleEnum *) nil_chk(style)) isEqual:[OrgOssPdfreporterFontIFont_FontStyleEnum BOLD]]) {
        face = [((id<OrgOssPdfreporterEngineFontsFontFamily>) nil_chk(family)) getBoldFace];
      }
      if (face == nil && [((OrgOssPdfreporterFontIFont_FontStyleEnum *) nil_chk(style)) isEqual:[OrgOssPdfreporterFontIFont_FontStyleEnum OBLIQUE]]) {
        face = [((id<OrgOssPdfreporterEngineFontsFontFamily>) nil_chk(family)) getItalicFace];
      }
      if (face == nil) {
        face = [((id<OrgOssPdfreporterEngineFontsFontFamily>) nil_chk(family)) getNormalFace];
      }
    }
    id<OrgOssPdfreporterFontIFontManager> fontManager = [((id<OrgOssPdfreporterFontFactoryIFontFactory>) nil_chk([OrgOssPdfreporterRegistryApiRegistry getFontFactory])) getFontManager];
    if (face == nil) {
      [self checkAwtFontWithNSString:[((id<OrgOssPdfreporterEngineFontsFontFamily>) nil_chk(family)) getName] withBOOL:ignoreMissingFont];
      awtFont = [((id<OrgOssPdfreporterFontIFontManager>) nil_chk(fontManager)) getFontWithNSString:[((id<OrgOssPdfreporterEngineFontsFontFamily>) nil_chk(family)) getName] withOrgOssPdfreporterFontIFont_FontStyleEnum:style];
      awtFont = [((id<OrgOssPdfreporterFontIFontManager>) nil_chk(fontManager)) getModifiedFontWithOrgOssPdfreporterFontIFont:awtFont withFloat:size withOrgOssPdfreporterFontIFont_FontDecorationEnum:[OrgOssPdfreporterFontIFont_FontDecorationEnum NONE]];
    }
    else {
      awtFont = [face getFont];
      if (awtFont == nil) {
        @throw [[OrgOssPdfreporterEngineJRRuntimeException alloc] initWithNSString:[NSString stringWithFormat:@"The '%@' font face in family '%@' returns a null font.", [((id<OrgOssPdfreporterEngineFontsFontFace>) nil_chk(face)) getName], [((id<OrgOssPdfreporterEngineFontsFontFamily>) nil_chk(family)) getName]]];
      }
      if (![((OrgOssPdfreporterFontIFont_FontStyleEnum *) nil_chk([((id<OrgOssPdfreporterFontIFont>) nil_chk(awtFont)) getStyle])) isEqual:style]) {
        id<OrgOssPdfreporterFontIFont> derived = [((id<OrgOssPdfreporterFontIFontManager>) nil_chk(fontManager)) getFontWithNSString:[((id<OrgOssPdfreporterEngineFontsFontFamily>) nil_chk(family)) getName] withOrgOssPdfreporterFontIFont_FontStyleEnum:style];
        if (derived == nil) {
          [((JavaUtilLoggingLogger *) nil_chk(OrgOssPdfreporterEngineFontsFontUtil_logger_)) warningWithNSString:[NSString stringWithFormat:@"Font style: %@ not available for Font: %@ use Style: %@ instead.", style, [((id<OrgOssPdfreporterEngineFontsFontFamily>) nil_chk(family)) getName], [((id<OrgOssPdfreporterFontIFont>) nil_chk(awtFont)) getStyle]]];
        }
        else {
          awtFont = derived;
        }
      }
      awtFont = [((id<OrgOssPdfreporterFontIFontManager>) nil_chk(fontManager)) getModifiedFontWithOrgOssPdfreporterFontIFont:awtFont withFloat:size withOrgOssPdfreporterFontIFont_FontDecorationEnum:[OrgOssPdfreporterFontIFont_FontDecorationEnum NONE]];
    }
  }
  return awtFont;
}

- (void)checkAwtFontWithNSString:(NSString *)name
                        withBOOL:(BOOL)ignoreMissingFont {
  if (![OrgOssPdfreporterEngineUtilJRGraphEnvInitializer isAwtFontAvailableWithNSString:name]) {
    if (!ignoreMissingFont) {
      @throw [[OrgOssPdfreporterEngineUtilJRFontNotFoundException alloc] initWithNSString:name];
    }
  }
}

- (id<OrgOssPdfreporterFontIFont>)getAwtFontWithOrgOssPdfreporterEngineJRFont:(id<OrgOssPdfreporterEngineJRFont>)font
                                                           withJavaUtilLocale:(JavaUtilLocale *)locale {
  if (font == nil) {
    return nil;
  }
  id<OrgOssPdfreporterFontIFont> awtFont = [self getAwtFontFromBundlesWithNSString:[((id<OrgOssPdfreporterEngineJRFont>) nil_chk(font)) getFontName] withOrgOssPdfreporterFontIFont_FontStyleEnum:[((id<OrgOssPdfreporterEngineJRFont>) nil_chk(font)) isBold] && [((id<OrgOssPdfreporterEngineJRFont>) nil_chk(font)) isItalic] ? [OrgOssPdfreporterFontIFont_FontStyleEnum BOLD_OBLIQUE] : [((id<OrgOssPdfreporterEngineJRFont>) nil_chk(font)) isBold] ? [OrgOssPdfreporterFontIFont_FontStyleEnum BOLD] : [((id<OrgOssPdfreporterEngineJRFont>) nil_chk(font)) isItalic] ? [OrgOssPdfreporterFontIFont_FontStyleEnum OBLIQUE] : [OrgOssPdfreporterFontIFont_FontStyleEnum PLAIN] withInt:[((id<OrgOssPdfreporterEngineJRFont>) nil_chk(font)) getFontSize] withJavaUtilLocale:locale withBOOL:YES];
  if (awtFont == nil) {
    @throw [[OrgOssPdfreporterEngineJRRuntimeException alloc] initWithNSString:[NSString stringWithFormat:@"The '%@ returns a null font.", [((id<OrgOssPdfreporterEngineJRFont>) nil_chk(font)) getFontName]]];
  }
  else {
    id<JavaUtilMap> attributes = [[JavaUtilHashMap alloc] init];
    if ([((id<OrgOssPdfreporterEngineJRFont>) nil_chk(font)) isUnderline]) {
      (void) [((id<JavaUtilMap>) nil_chk(attributes)) putWithId:[OrgOssPdfreporterFontTextTextAttribute UNDERLINE] withId:[OrgOssPdfreporterFontTextTextAttribute UNDERLINE_ON]];
    }
    if ([((id<OrgOssPdfreporterEngineJRFont>) nil_chk(font)) isStrikeThrough]) {
      (void) [((id<JavaUtilMap>) nil_chk(attributes)) putWithId:[OrgOssPdfreporterFontTextTextAttribute STRIKETHROUGH] withId:[OrgOssPdfreporterFontTextTextAttribute STRIKETHROUGH_ON]];
    }
    if (![((id<JavaUtilMap>) nil_chk(attributes)) isEmpty]) {
      [((JavaUtilLoggingLogger *) nil_chk(OrgOssPdfreporterEngineFontsFontUtil_logger_)) warningWithNSString:[NSString stringWithFormat:@"Font %@ cannot be decorated with underline or strikethrough", [awtFont getName]]];
    }
  }
  return awtFont;
}

- (id)init {
  return [super init];
}

+ (void)initialize {
  if (self == [OrgOssPdfreporterEngineFontsFontUtil class]) {
    OrgOssPdfreporterEngineFontsFontUtil_logger_ = [JavaUtilLoggingLogger getLoggerWithNSString:[[IOSClass classWithClass:[OrgOssPdfreporterEngineFontsFontUtil class]] getName]];
  }
}

- (void)copyAllPropertiesTo:(id)copy {
  [super copyAllPropertiesTo:copy];
  OrgOssPdfreporterEngineFontsFontUtil *typedCopy = (OrgOssPdfreporterEngineFontsFontUtil *) copy;
  typedCopy.jasperReportsContext = jasperReportsContext_;
}

@end
