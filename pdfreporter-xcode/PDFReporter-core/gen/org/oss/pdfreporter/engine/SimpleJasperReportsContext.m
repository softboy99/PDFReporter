//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: pdfreporter-core/src/org/oss/pdfreporter/engine/SimpleJasperReportsContext.java
//
//  Created by kendra on 9/27/13.
//

#include "IOSClass.h"
#include "java/util/ArrayList.h"
#include "java/util/HashMap.h"
#include "java/util/List.h"
#include "java/util/Map.h"
#include "org/oss/pdfreporter/engine/DefaultJasperReportsContext.h"
#include "org/oss/pdfreporter/engine/JasperReportsContext.h"
#include "org/oss/pdfreporter/engine/SimpleJasperReportsContext.h"

@implementation OrgOssPdfreporterEngineSimpleJasperReportsContext

@synthesize parent = parent_;
@synthesize values = values_;
@synthesize properties = properties_;
@synthesize extensionsMap = extensionsMap_;

- (id)init {
  return [self initOrgOssPdfreporterEngineSimpleJasperReportsContextWithOrgOssPdfreporterEngineJasperReportsContext:[OrgOssPdfreporterEngineDefaultJasperReportsContext getInstance]];
}

- (id)initOrgOssPdfreporterEngineSimpleJasperReportsContextWithOrgOssPdfreporterEngineJasperReportsContext:(id<OrgOssPdfreporterEngineJasperReportsContext>)parent {
  if ((self = [super init])) {
    values_ = [[JavaUtilHashMap alloc] init];
    self.parent = parent;
  }
  return self;
}

- (id)initWithOrgOssPdfreporterEngineJasperReportsContext:(id<OrgOssPdfreporterEngineJasperReportsContext>)parent {
  return [self initOrgOssPdfreporterEngineSimpleJasperReportsContextWithOrgOssPdfreporterEngineJasperReportsContext:parent];
}

- (void)setParentWithOrgOssPdfreporterEngineJasperReportsContext:(id<OrgOssPdfreporterEngineJasperReportsContext>)parent {
  self.parent = parent;
}

- (id)getValueWithNSString:(NSString *)key {
  if ([((id<JavaUtilMap>) nil_chk(values_)) containsKeyWithId:key]) {
    return [((id<JavaUtilMap>) nil_chk(values_)) getWithId:key];
  }
  if (parent_ != nil) {
    return [parent_ getValueWithNSString:key];
  }
  return nil;
}

- (void)setValueWithNSString:(NSString *)key
                      withId:(id)value {
  (void) [((id<JavaUtilMap>) nil_chk(values_)) putWithId:key withId:value];
}

- (void)removeValueWithNSString:(NSString *)key {
  (void) [((id<JavaUtilMap>) nil_chk(values_)) removeWithId:key];
}

- (id<JavaUtilList>)getExtensionsWithIOSClass:(IOSClass *)extensionType {
  if (extensionsMap_ == nil || ![((id<JavaUtilMap>) nil_chk(extensionsMap_)) containsKeyWithId:extensionType]) {
    if (parent_ == nil) {
      return nil;
    }
    else {
      return [parent_ getExtensionsWithIOSClass:extensionType];
    }
  }
  else {
    id<JavaUtilList> extensionsList = (id<JavaUtilList>) [((id<JavaUtilMap>) nil_chk(extensionsMap_)) getWithId:extensionType];
    if (parent_ == nil) {
      return extensionsList;
    }
    else {
      id<JavaUtilList> parentExtensions = [parent_ getExtensionsWithIOSClass:extensionType];
      if (extensionsList == nil || [((id<JavaUtilList>) nil_chk(extensionsList)) isEmpty]) {
        if (parentExtensions == nil || [((id<JavaUtilList>) nil_chk(parentExtensions)) isEmpty]) {
          return nil;
        }
        else {
          return parentExtensions;
        }
      }
      else {
        if (parentExtensions == nil || [((id<JavaUtilList>) nil_chk(parentExtensions)) isEmpty]) {
          return extensionsList;
        }
        else {
          id<JavaUtilList> returnedList = [[JavaUtilArrayList alloc] init];
          [((id<JavaUtilList>) nil_chk(returnedList)) addAllWithJavaUtilCollection:extensionsList];
          [((id<JavaUtilList>) nil_chk(returnedList)) addAllWithJavaUtilCollection:parentExtensions];
          return returnedList;
        }
      }
    }
  }
}

- (void)setExtensionsWithIOSClass:(IOSClass *)extensionType
                 withJavaUtilList:(id<JavaUtilList>)extensions {
  if (extensionsMap_ == nil) {
    extensionsMap_ = [[JavaUtilHashMap alloc] init];
  }
  (void) [((id<JavaUtilMap>) nil_chk(extensionsMap_)) putWithId:extensionType withId:extensions];
}

- (void)setExtensionsWithJavaUtilMap:(id<JavaUtilMap>)extensions {
  extensionsMap_ = extensions;
}

- (NSString *)getPropertyWithNSString:(NSString *)key {
  if (properties_ != nil && [((id<JavaUtilMap>) nil_chk(properties_)) containsKeyWithId:key]) {
    return [((id<JavaUtilMap>) nil_chk(properties_)) getWithId:key];
  }
  else {
    if (parent_ == nil) {
      return nil;
    }
    else {
      return [parent_ getPropertyWithNSString:key];
    }
  }
}

- (void)setPropertyWithNSString:(NSString *)key
                   withNSString:(NSString *)value {
  if (properties_ == nil) {
    properties_ = [[JavaUtilHashMap alloc] init];
  }
  (void) [((id<JavaUtilMap>) nil_chk(properties_)) putWithId:key withId:value];
}

- (void)removePropertyWithNSString:(NSString *)key {
  if (properties_ != nil) {
    (void) [properties_ removeWithId:key];
  }
}

- (id<JavaUtilMap>)getProperties {
  if (properties_ == nil) {
    if (parent_ == nil) {
      return nil;
    }
    else {
      return [parent_ getProperties];
    }
  }
  else {
    if (parent_ == nil) {
      return properties_;
    }
    else {
      id<JavaUtilMap> parentProperties = [parent_ getProperties];
      if (properties_ == nil || [((id<JavaUtilMap>) nil_chk(properties_)) isEmpty]) {
        if (parentProperties == nil || [((id<JavaUtilMap>) nil_chk(parentProperties)) isEmpty]) {
          return nil;
        }
        else {
          return parentProperties;
        }
      }
      else {
        if (parentProperties == nil || [((id<JavaUtilMap>) nil_chk(parentProperties)) isEmpty]) {
          return properties_;
        }
        else {
          id<JavaUtilMap> returnedMap = [[JavaUtilHashMap alloc] init];
          [((id<JavaUtilMap>) nil_chk(returnedMap)) putAllWithJavaUtilMap:parentProperties];
          [((id<JavaUtilMap>) nil_chk(returnedMap)) putAllWithJavaUtilMap:properties_];
          return returnedMap;
        }
      }
    }
  }
}

- (id<JavaUtilMap>)getPropertiesMap {
  return properties_;
}

- (void)setPropertiesMapWithJavaUtilMap:(id<JavaUtilMap>)propertiesMap {
  self.properties = propertiesMap;
}

- (void)copyAllPropertiesTo:(id)copy {
  [super copyAllPropertiesTo:copy];
  OrgOssPdfreporterEngineSimpleJasperReportsContext *typedCopy = (OrgOssPdfreporterEngineSimpleJasperReportsContext *) copy;
  typedCopy.parent = parent_;
  typedCopy.values = values_;
  typedCopy.properties = properties_;
  typedCopy.extensionsMap = extensionsMap_;
}

@end
