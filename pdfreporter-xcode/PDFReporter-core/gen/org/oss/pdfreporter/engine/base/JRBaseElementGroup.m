//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: pdfreporter-core/src/org/oss/pdfreporter/engine/base/JRBaseElementGroup.java
//
//  Created by kendra on 9/27/13.
//

#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "java/lang/CloneNotSupportedException.h"
#include "java/util/ArrayList.h"
#include "java/util/Arrays.h"
#include "java/util/List.h"
#include "org/oss/pdfreporter/crosstabs/JRCrosstab.h"
#include "org/oss/pdfreporter/engine/JRChild.h"
#include "org/oss/pdfreporter/engine/JRElement.h"
#include "org/oss/pdfreporter/engine/JRElementGroup.h"
#include "org/oss/pdfreporter/engine/JRFrame.h"
#include "org/oss/pdfreporter/engine/JRRuntimeException.h"
#include "org/oss/pdfreporter/engine/JRVisitor.h"
#include "org/oss/pdfreporter/engine/base/JRBaseElementGroup.h"
#include "org/oss/pdfreporter/engine/base/JRBaseObjectFactory.h"

@implementation OrgOssPdfreporterEngineBaseJRBaseElementGroup

@synthesize children = children_;
@synthesize elementGroup = elementGroup_;

- (id)init {
  if ((self = [super init])) {
    children_ = [[JavaUtilArrayList alloc] init];
  }
  return self;
}

- (id)initWithOrgOssPdfreporterEngineJRElementGroup:(id<OrgOssPdfreporterEngineJRElementGroup>)elementGrp
 withOrgOssPdfreporterEngineBaseJRBaseObjectFactory:(OrgOssPdfreporterEngineBaseJRBaseObjectFactory *)factory {
  if ((self = [super init])) {
    children_ = [[JavaUtilArrayList alloc] init];
    [((OrgOssPdfreporterEngineBaseJRBaseObjectFactory *) nil_chk(factory)) putWithId:elementGrp withId:self];
    id<JavaUtilList> list = [((id<OrgOssPdfreporterEngineJRElementGroup>) nil_chk(elementGrp)) getChildren];
    if (list != nil && [((id<JavaUtilList>) nil_chk(list)) size] > 0) {
      for (int i = 0; i < [((id<JavaUtilList>) nil_chk(list)) size]; i++) {
        id<OrgOssPdfreporterEngineJRChild> child = [((id<JavaUtilList>) nil_chk(list)) getWithInt:i];
        child = (id<OrgOssPdfreporterEngineJRChild>) [((OrgOssPdfreporterEngineBaseJRBaseObjectFactory *) nil_chk(factory)) getVisitResultWithOrgOssPdfreporterEngineJRVisitable:child];
        [((id<JavaUtilList>) nil_chk(children_)) addWithId:child];
      }
    }
    self.elementGroup = (id<OrgOssPdfreporterEngineJRElementGroup>) [((OrgOssPdfreporterEngineBaseJRBaseObjectFactory *) nil_chk(factory)) getVisitResultWithOrgOssPdfreporterEngineJRVisitable:[((id<OrgOssPdfreporterEngineJRElementGroup>) nil_chk(elementGrp)) getElementGroup]];
  }
  return self;
}

- (id<JavaUtilList>)getChildren {
  return self.children;
}

- (id<OrgOssPdfreporterEngineJRElementGroup>)getElementGroup {
  return self.elementGroup;
}

+ (IOSObjectArray *)getElementsWithJavaUtilList:(id<JavaUtilList>)children {
  IOSObjectArray *elements = nil;
  if (children != nil) {
    id<JavaUtilList> allElements = [[JavaUtilArrayList alloc] init];
    id child = nil;
    IOSObjectArray *childElementArray = nil;
    for (int i = 0; i < [children size]; i++) {
      child = [children getWithInt:i];
      if ([child conformsToProtocol: @protocol(OrgOssPdfreporterEngineJRElement)]) {
        [((id<JavaUtilList>) nil_chk(allElements)) addWithId:(id<OrgOssPdfreporterEngineJRElement>) child];
      }
      else if ([child conformsToProtocol: @protocol(OrgOssPdfreporterEngineJRElementGroup)]) {
        childElementArray = [((id<OrgOssPdfreporterEngineJRElementGroup>) child) getElements];
        if (childElementArray != nil) {
          [((id<JavaUtilList>) nil_chk(allElements)) addAllWithJavaUtilCollection:[JavaUtilArrays asListWithNSObjectArray:childElementArray]];
        }
      }
    }
    elements = [IOSObjectArray arrayWithLength:[((id<JavaUtilList>) nil_chk(allElements)) size] type:[IOSClass classWithProtocol:@protocol(OrgOssPdfreporterEngineJRElement)]];
    (void) [((id<JavaUtilList>) nil_chk(allElements)) toArrayWithNSObjectArray:elements];
  }
  return elements;
}

- (IOSObjectArray *)getElements {
  return [OrgOssPdfreporterEngineBaseJRBaseElementGroup getElementsWithJavaUtilList:children_];
}

+ (id<OrgOssPdfreporterEngineJRElement>)getElementByKeyWithOrgOssPdfreporterEngineJRElementArray:(IOSObjectArray *)elements
                                                                                    withNSString:(NSString *)key {
  id<OrgOssPdfreporterEngineJRElement> element = nil;
  if (key != nil) {
    if (elements != nil) {
      int i = 0;
      while (element == nil && i < (int) [elements count]) {
        id<OrgOssPdfreporterEngineJRElement> elem = [elements objectAtIndex:i];
        if ([((NSString *) nil_chk(key)) isEqual:[((id<OrgOssPdfreporterEngineJRElement>) nil_chk(elem)) getKey]]) {
          element = elem;
        }
        else if ([(id) elem conformsToProtocol: @protocol(OrgOssPdfreporterEngineJRFrame)]) {
          element = [((id<OrgOssPdfreporterEngineJRFrame>) elem) getElementByKeyWithNSString:key];
        }
        else if ([(id) elem conformsToProtocol: @protocol(OrgOssPdfreporterCrosstabsJRCrosstab)]) {
          element = [((id<OrgOssPdfreporterCrosstabsJRCrosstab>) elem) getElementByKeyWithNSString:key];
        }
        i++;
      }
    }
  }
  return element;
}

- (id<OrgOssPdfreporterEngineJRElement>)getElementByKeyWithNSString:(NSString *)key {
  return [OrgOssPdfreporterEngineBaseJRBaseElementGroup getElementByKeyWithOrgOssPdfreporterEngineJRElementArray:[self getElements] withNSString:key];
}

- (void)visitWithOrgOssPdfreporterEngineJRVisitor:(id<OrgOssPdfreporterEngineJRVisitor>)visitor {
  [((id<OrgOssPdfreporterEngineJRVisitor>) nil_chk(visitor)) visitElementGroupWithOrgOssPdfreporterEngineJRElementGroup:self];
}

- (id)clone {
  OrgOssPdfreporterEngineBaseJRBaseElementGroup *clone = nil;
  @try {
    clone = (OrgOssPdfreporterEngineBaseJRBaseElementGroup *) [super clone];
  }
  @catch (JavaLangCloneNotSupportedException *e) {
    @throw [[OrgOssPdfreporterEngineJRRuntimeException alloc] initWithJavaLangThrowable:e];
  }
  if (children_ != nil) {
    ((OrgOssPdfreporterEngineBaseJRBaseElementGroup *) nil_chk(clone)).children = [[JavaUtilArrayList alloc] initWithInt:[children_ size]];
    for (int i = 0; i < [children_ size]; i++) {
      [((OrgOssPdfreporterEngineBaseJRBaseElementGroup *) nil_chk(clone)).children addWithId:(id<OrgOssPdfreporterEngineJRChild>) ([((id<OrgOssPdfreporterEngineJRChild>) nil_chk([children_ getWithInt:i])) cloneWithOrgOssPdfreporterEngineJRElementGroup:clone])];
    }
  }
  return clone;
}

- (id)cloneWithOrgOssPdfreporterEngineJRElementGroup:(id<OrgOssPdfreporterEngineJRElementGroup>)parentGroup {
  OrgOssPdfreporterEngineBaseJRBaseElementGroup *clone = (OrgOssPdfreporterEngineBaseJRBaseElementGroup *) [self clone];
  ((OrgOssPdfreporterEngineBaseJRBaseElementGroup *) nil_chk(clone)).elementGroup = parentGroup;
  return clone;
}

- (id)copyWithZone:(NSZone *)zone {
  return [self clone];
}

- (void)copyAllPropertiesTo:(id)copy {
  [super copyAllPropertiesTo:copy];
  OrgOssPdfreporterEngineBaseJRBaseElementGroup *typedCopy = (OrgOssPdfreporterEngineBaseJRBaseElementGroup *) copy;
  typedCopy.children = children_;
  typedCopy.elementGroup = elementGroup_;
}

@end
