//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: pdfreporter-core/src/org/oss/pdfreporter/engine/base/VirtualizableElementList.java
//
//  Created by kendra on 9/27/13.
//

#include "IOSClass.h"
#include "IOSIntArray.h"
#include "IOSObjectArray.h"
#include "java/lang/IndexOutOfBoundsException.h"
#include "java/lang/Math.h"
#include "java/lang/System.h"
#include "java/util/AbstractCollection.h"
#include "java/util/ArrayList.h"
#include "java/util/Arrays.h"
#include "java/util/List.h"
#include "java/util/Random.h"
#include "java/util/concurrent/atomic/AtomicInteger.h"
#include "org/oss/pdfreporter/engine/JRPrintElement.h"
#include "org/oss/pdfreporter/engine/JRVirtualizer.h"
#include "org/oss/pdfreporter/engine/base/ElementStore.h"
#include "org/oss/pdfreporter/engine/base/JRVirtualPrintPage.h"
#include "org/oss/pdfreporter/engine/base/VirtualElementsData.h"
#include "org/oss/pdfreporter/engine/base/VirtualizableElementList.h"
#include "org/oss/pdfreporter/engine/fill/JRVirtualizationContext.h"
#include "org/oss/pdfreporter/engine/util/DeepPrintElementCounter.h"

@implementation OrgOssPdfreporterEngineBaseVirtualizableElementList

@synthesize virtualizationContext = virtualizationContext_;
@synthesize store = store_;

- (id)initWithOrgOssPdfreporterEngineFillJRVirtualizationContext:(OrgOssPdfreporterEngineFillJRVirtualizationContext *)virtualizationContext
               withOrgOssPdfreporterEngineBaseJRVirtualPrintPage:(OrgOssPdfreporterEngineBaseJRVirtualPrintPage *)page {
  if ((self = [super init])) {
    self.virtualizationContext = virtualizationContext;
    [self initStoreWithOrgOssPdfreporterEngineBaseJRVirtualPrintPage:page];
  }
  return self;
}

- (void)initStoreWithOrgOssPdfreporterEngineBaseJRVirtualPrintPage:(OrgOssPdfreporterEngineBaseJRVirtualPrintPage *)page OBJC_METHOD_FAMILY_NONE {
  self.store = [[OrgOssPdfreporterEngineBaseElementsBlock alloc] initWithOrgOssPdfreporterEngineFillJRVirtualizationContext:virtualizationContext_ withOrgOssPdfreporterEngineBaseJRVirtualPrintPage:page];
}

- (void)setWithJavaUtilList:(id<JavaUtilList>)elements {
  @synchronized(self) {
    {
      [self clear];
      [self addAllWithJavaUtilCollection:elements];
    }
  }
}

- (void)cacheInContextWithOrgOssPdfreporterEngineJRPrintElement:(id<OrgOssPdfreporterEngineJRPrintElement>)element {
  [((OrgOssPdfreporterEngineFillJRVirtualizationContext *) nil_chk(virtualizationContext_)) cacheTemplateWithOrgOssPdfreporterEngineJRPrintElement:element];
}

- (id<OrgOssPdfreporterEngineJRPrintElement>)getWithInt:(int)index {
  @synchronized(self) {
    {
      return [((id<OrgOssPdfreporterEngineBaseElementStore>) nil_chk(store_)) getWithInt:index];
    }
  }
}

- (int)size {
  @synchronized(self) {
    {
      return [((id<OrgOssPdfreporterEngineBaseElementStore>) nil_chk(store_)) size];
    }
  }
}

- (id<OrgOssPdfreporterEngineJRPrintElement>)setWithInt:(int)index
                                                 withId:(id<OrgOssPdfreporterEngineJRPrintElement>)element {
  @synchronized(self) {
    {
      [self cacheInContextWithOrgOssPdfreporterEngineJRPrintElement:element];
      return [((id<OrgOssPdfreporterEngineBaseElementStore>) nil_chk(store_)) setWithInt:index withOrgOssPdfreporterEngineJRPrintElement:element];
    }
  }
}

- (void)createBlockList {
  OrgOssPdfreporterEngineBaseElementsBlockList *blockList = [[OrgOssPdfreporterEngineBaseElementsBlockList alloc] initWithOrgOssPdfreporterEngineBaseElementsBlock:(OrgOssPdfreporterEngineBaseElementsBlock *) store_];
  [((OrgOssPdfreporterEngineBaseElementsBlockList *) nil_chk(blockList)) addBlock];
  store_ = blockList;
}

- (BOOL)addWithId:(id<OrgOssPdfreporterEngineJRPrintElement>)element {
  @synchronized(self) {
    {
      [self cacheInContextWithOrgOssPdfreporterEngineJRPrintElement:element];
      if (![((id<OrgOssPdfreporterEngineBaseElementStore>) nil_chk(store_)) addWithOrgOssPdfreporterEngineJRPrintElement:element]) {
        [self createBlockList];
        [((id<OrgOssPdfreporterEngineBaseElementStore>) nil_chk(store_)) addWithOrgOssPdfreporterEngineJRPrintElement:element];
      }
      return YES;
    }
  }
}

- (void)addWithInt:(int)index
            withId:(id<OrgOssPdfreporterEngineJRPrintElement>)element {
  @synchronized(self) {
    {
      [self cacheInContextWithOrgOssPdfreporterEngineJRPrintElement:element];
      if (![((id<OrgOssPdfreporterEngineBaseElementStore>) nil_chk(store_)) addWithInt:index withOrgOssPdfreporterEngineJRPrintElement:element]) {
        [self createBlockList];
        [((id<OrgOssPdfreporterEngineBaseElementStore>) nil_chk(store_)) addWithInt:index withOrgOssPdfreporterEngineJRPrintElement:element];
      }
    }
  }
}

- (id<OrgOssPdfreporterEngineJRPrintElement>)removeWithInt:(int)index {
  @synchronized(self) {
    {
      return [((id<OrgOssPdfreporterEngineBaseElementStore>) nil_chk(store_)) removeWithInt:index];
    }
  }
}

- (void)clear {
  @synchronized(self) {
    {
      OrgOssPdfreporterEngineBaseJRVirtualPrintPage *page = [((id<OrgOssPdfreporterEngineBaseElementStore>) nil_chk(store_)) getPage];
      [((id<OrgOssPdfreporterEngineBaseElementStore>) nil_chk(store_)) dispose];
      [self initStoreWithOrgOssPdfreporterEngineBaseJRVirtualPrintPage:page];
    }
  }
}

- (void)dispose {
  @synchronized(self) {
    {
      [((id<OrgOssPdfreporterEngineBaseElementStore>) nil_chk(store_)) dispose];
    }
  }
}

- (void)copyAllPropertiesTo:(id)copy {
  [super copyAllPropertiesTo:copy];
  OrgOssPdfreporterEngineBaseVirtualizableElementList *typedCopy = (OrgOssPdfreporterEngineBaseVirtualizableElementList *) copy;
  typedCopy.virtualizationContext = virtualizationContext_;
  typedCopy.store = store_;
}

@end
@implementation OrgOssPdfreporterEngineBaseElementsBlock

static JavaUtilConcurrentAtomicAtomicInteger * OrgOssPdfreporterEngineBaseElementsBlock_uidCounter_;
static JavaUtilRandom * OrgOssPdfreporterEngineBaseElementsBlock_uidRandom_;

@synthesize context = context_;
@synthesize uid = uid_;
@synthesize elements = elements_;
@synthesize size_ = size__;
@synthesize virtualData = virtualData_;
@synthesize deepElementCount = deepElementCount_;
@synthesize page = page_;

+ (JavaUtilConcurrentAtomicAtomicInteger *)uidCounter {
  return OrgOssPdfreporterEngineBaseElementsBlock_uidCounter_;
}

+ (JavaUtilRandom *)uidRandom {
  return OrgOssPdfreporterEngineBaseElementsBlock_uidRandom_;
}

- (id)initWithOrgOssPdfreporterEngineFillJRVirtualizationContext:(OrgOssPdfreporterEngineFillJRVirtualizationContext *)context
               withOrgOssPdfreporterEngineBaseJRVirtualPrintPage:(OrgOssPdfreporterEngineBaseJRVirtualPrintPage *)page {
  if ((self = [super init])) {
    self.context = context;
    self.page = page;
    self.uid = [self makeUID];
    self.elements = [[JavaUtilArrayList alloc] init];
    self.size_ = 0;
    self.deepElementCount = 0;
  }
  return self;
}

- (void)lockContext {
  [((OrgOssPdfreporterEngineFillJRVirtualizationContext *) nil_chk(context_)) lock];
}

- (void)unlockContext {
  [((OrgOssPdfreporterEngineFillJRVirtualizationContext *) nil_chk(context_)) unlock];
}

- (void)register__ {
  if ([((OrgOssPdfreporterEngineFillJRVirtualizationContext *) nil_chk(context_)) getVirtualizer] != nil) {
    [((id<OrgOssPdfreporterEngineJRVirtualizer>) nil_chk([((OrgOssPdfreporterEngineFillJRVirtualizationContext *) nil_chk(context_)) getVirtualizer])) registerObjectWithOrgOssPdfreporterEngineIJRVirtualizable:self];
  }
}

- (NSString *)makeUID {
  return [NSString stringWithFormat:@"%d_%d_%d_%d", [JavaLangSystem identityHashCodeWithId:context_], [JavaLangSystem identityHashCodeWithId:self], [((JavaUtilConcurrentAtomicAtomicInteger *) nil_chk(OrgOssPdfreporterEngineBaseElementsBlock_uidCounter_)) incrementAndGet], [((JavaUtilRandom *) nil_chk(OrgOssPdfreporterEngineBaseElementsBlock_uidRandom_)) nextInt]];
}

- (int)size {
  return size__;
}

- (BOOL)isEmpty {
  return size__ == 0;
}

- (id<OrgOssPdfreporterEngineJRPrintElement>)getWithInt:(int)index {
  [self lockContext];
  @try {
    [self ensureDataAndTouch];
    return [((id<JavaUtilList>) nil_chk(elements_)) getWithInt:index];
  }
  @finally {
    [self unlockContext];
  }
}

- (BOOL)preAddWithOrgOssPdfreporterEngineJRPrintElement:(id<OrgOssPdfreporterEngineJRPrintElement>)element
                                               withBOOL:(BOOL)force {
  BOOL empty = elements_ != nil && [((id<JavaUtilList>) nil_chk(elements_)) isEmpty];
  if (empty) {
    [self register__];
  }
  else {
    [self ensureDataAndTouch];
  }
  int elementCount = [OrgOssPdfreporterEngineUtilDeepPrintElementCounter countWithOrgOssPdfreporterEngineJRPrintElement:element];
  if (!force && ![((id<JavaUtilList>) nil_chk(elements_)) isEmpty]) {
    int pageSize = [((OrgOssPdfreporterEngineFillJRVirtualizationContext *) nil_chk(context_)) getPageElementSize];
    if (pageSize > 0 && deepElementCount_ + elementCount > pageSize) {
      return NO;
    }
  }
  deepElementCount_ += elementCount;
  return YES;
}

- (BOOL)addWithOrgOssPdfreporterEngineJRPrintElement:(id<OrgOssPdfreporterEngineJRPrintElement>)element
                                            withBOOL:(BOOL)force {
  [self lockContext];
  @try {
    BOOL adding = [self preAddWithOrgOssPdfreporterEngineJRPrintElement:element withBOOL:force];
    if (adding) {
      [((id<JavaUtilList>) nil_chk(elements_)) addWithId:element];
      ++size__;
    }
    return adding;
  }
  @finally {
    [self unlockContext];
  }
}

- (BOOL)addWithOrgOssPdfreporterEngineJRPrintElement:(id<OrgOssPdfreporterEngineJRPrintElement>)element {
  return [self addWithOrgOssPdfreporterEngineJRPrintElement:element withBOOL:NO];
}

- (BOOL)addWithInt:(int)index
withOrgOssPdfreporterEngineJRPrintElement:(id<OrgOssPdfreporterEngineJRPrintElement>)element
          withBOOL:(BOOL)force {
  [self lockContext];
  @try {
    BOOL adding = [self preAddWithOrgOssPdfreporterEngineJRPrintElement:element withBOOL:force];
    if (adding) {
      [((id<JavaUtilList>) nil_chk(elements_)) addWithInt:index withId:element];
      ++size__;
    }
    return adding;
  }
  @finally {
    [self unlockContext];
  }
}

- (BOOL)addWithInt:(int)index
withOrgOssPdfreporterEngineJRPrintElement:(id<OrgOssPdfreporterEngineJRPrintElement>)element {
  return [self addWithInt:index withOrgOssPdfreporterEngineJRPrintElement:element withBOOL:NO];
}

- (id<OrgOssPdfreporterEngineJRPrintElement>)setWithInt:(int)index
              withOrgOssPdfreporterEngineJRPrintElement:(id<OrgOssPdfreporterEngineJRPrintElement>)element {
  [self lockContext];
  @try {
    [self ensureDataAndTouch];
    id<OrgOssPdfreporterEngineJRPrintElement> oldElement = [((id<JavaUtilList>) nil_chk(elements_)) getWithInt:index];
    deepElementCount_ -= [OrgOssPdfreporterEngineUtilDeepPrintElementCounter countWithOrgOssPdfreporterEngineJRPrintElement:oldElement];
    deepElementCount_ += [OrgOssPdfreporterEngineUtilDeepPrintElementCounter countWithOrgOssPdfreporterEngineJRPrintElement:element];
    return [((id<JavaUtilList>) nil_chk(elements_)) setWithInt:index withId:element];
  }
  @finally {
    [self unlockContext];
  }
}

- (id<OrgOssPdfreporterEngineJRPrintElement>)removeWithInt:(int)index {
  [self lockContext];
  @try {
    [self ensureDataAndTouch];
    id<OrgOssPdfreporterEngineJRPrintElement> element = [((id<JavaUtilList>) nil_chk(elements_)) removeWithInt:index];
    --size__;
    deepElementCount_ -= [OrgOssPdfreporterEngineUtilDeepPrintElementCounter countWithOrgOssPdfreporterEngineJRPrintElement:element];
    if ([((id<JavaUtilList>) nil_chk(elements_)) isEmpty]) {
      [self deregister];
    }
    return element;
  }
  @finally {
    [self unlockContext];
  }
}

- (NSString *)getUID {
  return uid_;
}

- (void)ensureDataAndTouch {
  if (elements_ == nil) {
    [self ensureData];
  }
  else {
    if ([((OrgOssPdfreporterEngineFillJRVirtualizationContext *) nil_chk(context_)) getVirtualizer] != nil) {
      [((id<OrgOssPdfreporterEngineJRVirtualizer>) nil_chk([((OrgOssPdfreporterEngineFillJRVirtualizationContext *) nil_chk(context_)) getVirtualizer])) touchWithOrgOssPdfreporterEngineIJRVirtualizable:self];
    }
  }
}

- (void)ensureVirtualData {
  [self lockContext];
  @try {
    if (elements_ == nil) {
      [self ensureData];
    }
  }
  @finally {
    [self unlockContext];
  }
}

- (void)ensureData {
  if ([((OrgOssPdfreporterEngineFillJRVirtualizationContext *) nil_chk(context_)) getVirtualizer] != nil) {
    [((id<OrgOssPdfreporterEngineJRVirtualizer>) nil_chk([((OrgOssPdfreporterEngineFillJRVirtualizationContext *) nil_chk(context_)) getVirtualizer])) requestDataWithOrgOssPdfreporterEngineIJRVirtualizable:self];
  }
}

- (void)setVirtualDataWithId:(OrgOssPdfreporterEngineBaseVirtualElementsData *)virtualData {
  [self lockContext];
  @try {
    self.virtualData = virtualData;
    self.elements = [((OrgOssPdfreporterEngineBaseVirtualElementsData *) nil_chk(virtualData)) getElements];
  }
  @finally {
    [self unlockContext];
  }
}

- (OrgOssPdfreporterEngineBaseVirtualElementsData *)getVirtualData {
  return virtualData_;
}

- (void)removeVirtualData {
  [self lockContext];
  @try {
    virtualData_ = nil;
    elements_ = nil;
  }
  @finally {
    [self unlockContext];
  }
}

- (void)beforeExternalization {
  [self lockContext];
  @try {
    virtualData_ = [[OrgOssPdfreporterEngineBaseVirtualElementsData alloc] initWithJavaUtilList:elements_];
    [((OrgOssPdfreporterEngineFillJRVirtualizationContext *) nil_chk(context_)) beforeExternalizationWithOrgOssPdfreporterEngineJRVirtualizable:self];
  }
  @finally {
    [self unlockContext];
  }
}

- (void)afterExternalization {
  [self lockContext];
  @try {
    [((OrgOssPdfreporterEngineFillJRVirtualizationContext *) nil_chk(context_)) afterExternalizationWithOrgOssPdfreporterEngineJRVirtualizable:self];
  }
  @finally {
    [self unlockContext];
  }
}

- (void)afterInternalization {
  [self lockContext];
  @try {
    [((OrgOssPdfreporterEngineFillJRVirtualizationContext *) nil_chk(context_)) afterInternalizationWithOrgOssPdfreporterEngineJRVirtualizable:self];
    virtualData_ = nil;
  }
  @finally {
    [self unlockContext];
  }
}

- (OrgOssPdfreporterEngineFillJRVirtualizationContext *)getContext {
  return context_;
}

- (void)dealloc {
  [self dispose];
  page_ = nil;
  virtualData_ = nil;
  elements_ = nil;
  uid_ = nil;
  context_ = nil;
}

- (void)dispose {
  [self lockContext];
  @try {
    if (elements_ == nil || ![((id<JavaUtilList>) nil_chk(elements_)) isEmpty]) {
      [self deregister];
    }
  }
  @finally {
    [self unlockContext];
  }
}

- (void)deregister {
  if ([((OrgOssPdfreporterEngineFillJRVirtualizationContext *) nil_chk(context_)) getVirtualizer] != nil) {
    [((id<OrgOssPdfreporterEngineJRVirtualizer>) nil_chk([((OrgOssPdfreporterEngineFillJRVirtualizationContext *) nil_chk(context_)) getVirtualizer])) deregisterObjectWithOrgOssPdfreporterEngineIJRVirtualizable:self];
  }
}

- (OrgOssPdfreporterEngineBaseJRVirtualPrintPage *)getPage {
  return page_;
}

+ (void)initialize {
  if (self == [OrgOssPdfreporterEngineBaseElementsBlock class]) {
    OrgOssPdfreporterEngineBaseElementsBlock_uidCounter_ = [[JavaUtilConcurrentAtomicAtomicInteger alloc] init];
    OrgOssPdfreporterEngineBaseElementsBlock_uidRandom_ = [[JavaUtilRandom alloc] init];
  }
}

- (void)copyAllPropertiesTo:(id)copy {
  [super copyAllPropertiesTo:copy];
  OrgOssPdfreporterEngineBaseElementsBlock *typedCopy = (OrgOssPdfreporterEngineBaseElementsBlock *) copy;
  typedCopy.context = context_;
  typedCopy.uid = uid_;
  typedCopy.elements = elements_;
  typedCopy.size_ = size__;
  typedCopy.virtualData = virtualData_;
  typedCopy.deepElementCount = deepElementCount_;
  typedCopy.page = page_;
}

@end
@implementation OrgOssPdfreporterEngineBaseElementsBlockList

@synthesize blockCount = blockCount_;
@synthesize offsets = offsets_;
@synthesize blocks = blocks_;
@synthesize size_ = size__;
@synthesize lastIndex = lastIndex_;

- (id)initWithOrgOssPdfreporterEngineBaseElementsBlock:(OrgOssPdfreporterEngineBaseElementsBlock *)block {
  if ((self = [super init])) {
    lastIndex_ = -1;
    blocks_ = [IOSObjectArray arrayWithLength:OrgOssPdfreporterEngineBaseElementsBlockList_INITIAL_SIZE type:[IOSClass classWithClass:[OrgOssPdfreporterEngineBaseElementsBlock class]]];
    offsets_ = [IOSIntArray arrayWithLength:OrgOssPdfreporterEngineBaseElementsBlockList_INITIAL_SIZE];
    blockCount_ = 1;
    (void) [((IOSObjectArray *) nil_chk(blocks_)) replaceObjectAtIndex:0 withObject:block];
    (*[((IOSIntArray *) nil_chk(offsets_)) intRefAtIndex:0]) = 0;
    size__ = [((OrgOssPdfreporterEngineBaseElementsBlock *) nil_chk(block)) size];
  }
  return self;
}

- (void)addBlock {
  [self incrementBlocks];
  OrgOssPdfreporterEngineBaseElementsBlock *block = [[OrgOssPdfreporterEngineBaseElementsBlock alloc] initWithOrgOssPdfreporterEngineFillJRVirtualizationContext:[((OrgOssPdfreporterEngineBaseElementsBlock *) nil_chk([((IOSObjectArray *) nil_chk(blocks_)) objectAtIndex:0])) getContext] withOrgOssPdfreporterEngineBaseJRVirtualPrintPage:[((OrgOssPdfreporterEngineBaseElementsBlock *) nil_chk([((IOSObjectArray *) nil_chk(blocks_)) objectAtIndex:0])) getPage]];
  (void) [((IOSObjectArray *) nil_chk(blocks_)) replaceObjectAtIndex:blockCount_ withObject:block];
  (*[((IOSIntArray *) nil_chk(offsets_)) intRefAtIndex:blockCount_]) = size__;
  ++blockCount_;
}

- (void)incrementBlocks {
  if (blockCount_ == (int) [((IOSObjectArray *) nil_chk(blocks_)) count]) {
    int newSize = [JavaLangMath minWithInt:(blockCount_ * 3) / 2 + 1 withInt:blockCount_ + OrgOssPdfreporterEngineBaseElementsBlockList_MAX_INCREMENT];
    IOSObjectArray *newBlocks = [IOSObjectArray arrayWithLength:newSize type:[IOSClass classWithClass:[OrgOssPdfreporterEngineBaseElementsBlock class]]];
    [JavaLangSystem arraycopyWithId:blocks_ withInt:0 withId:newBlocks withInt:0 withInt:blockCount_];
    blocks_ = newBlocks;
    IOSIntArray *newOffsets = [IOSIntArray arrayWithLength:newSize];
    [JavaLangSystem arraycopyWithId:offsets_ withInt:0 withId:newOffsets withInt:0 withInt:blockCount_];
    offsets_ = newOffsets;
  }
}

- (int)size {
  return size__;
}

- (id<OrgOssPdfreporterEngineJRPrintElement>)getWithInt:(int)index {
  int blockIndex = [self blockIndexWithInt:index];
  return [((OrgOssPdfreporterEngineBaseElementsBlock *) nil_chk([((IOSObjectArray *) nil_chk(blocks_)) objectAtIndex:blockIndex])) getWithInt:index - [((IOSIntArray *) nil_chk(offsets_)) intAtIndex:blockIndex]];
}

- (BOOL)addWithOrgOssPdfreporterEngineJRPrintElement:(id<OrgOssPdfreporterEngineJRPrintElement>)element {
  if (![((OrgOssPdfreporterEngineBaseElementsBlock *) nil_chk([((IOSObjectArray *) nil_chk(blocks_)) objectAtIndex:blockCount_ - 1])) addWithOrgOssPdfreporterEngineJRPrintElement:element withBOOL:NO]) {
    [self addBlock];
    [((OrgOssPdfreporterEngineBaseElementsBlock *) nil_chk([((IOSObjectArray *) nil_chk(blocks_)) objectAtIndex:blockCount_ - 1])) addWithOrgOssPdfreporterEngineJRPrintElement:element withBOOL:YES];
  }
  ++size__;
  return YES;
}

- (BOOL)addWithInt:(int)index
withOrgOssPdfreporterEngineJRPrintElement:(id<OrgOssPdfreporterEngineJRPrintElement>)element {
  int blockIndex = [self blockIndexWithInt:index];
  BOOL last = blockIndex == blockCount_ - 1;
  if (last) {
    if (![((OrgOssPdfreporterEngineBaseElementsBlock *) nil_chk([((IOSObjectArray *) nil_chk(blocks_)) objectAtIndex:blockIndex])) addWithInt:index - [((IOSIntArray *) nil_chk(offsets_)) intAtIndex:blockIndex] withOrgOssPdfreporterEngineJRPrintElement:element withBOOL:NO]) {
      [self addBlock];
      blockIndex = blockCount_ - 1;
      [((OrgOssPdfreporterEngineBaseElementsBlock *) nil_chk([((IOSObjectArray *) nil_chk(blocks_)) objectAtIndex:blockIndex])) addWithInt:index - [((IOSIntArray *) nil_chk(offsets_)) intAtIndex:blockIndex] withOrgOssPdfreporterEngineJRPrintElement:element withBOOL:YES];
    }
  }
  else {
    [((OrgOssPdfreporterEngineBaseElementsBlock *) nil_chk([((IOSObjectArray *) nil_chk(blocks_)) objectAtIndex:blockIndex])) addWithInt:index - [((IOSIntArray *) nil_chk(offsets_)) intAtIndex:blockIndex] withOrgOssPdfreporterEngineJRPrintElement:element withBOOL:YES];
    for (int idx = blockIndex + 1; idx < blockCount_; ++idx) {
      ++(*[((IOSIntArray *) nil_chk(offsets_)) intRefAtIndex:blockIndex]);
    }
  }
  ++size__;
  return YES;
}

- (id<OrgOssPdfreporterEngineJRPrintElement>)setWithInt:(int)index
              withOrgOssPdfreporterEngineJRPrintElement:(id<OrgOssPdfreporterEngineJRPrintElement>)element {
  int blockIndex = [self blockIndexWithInt:index];
  return [((OrgOssPdfreporterEngineBaseElementsBlock *) nil_chk([((IOSObjectArray *) nil_chk(blocks_)) objectAtIndex:blockIndex])) setWithInt:index - [((IOSIntArray *) nil_chk(offsets_)) intAtIndex:blockIndex] withOrgOssPdfreporterEngineJRPrintElement:element];
}

- (id<OrgOssPdfreporterEngineJRPrintElement>)removeWithInt:(int)index {
  int blockIndex = [self blockIndexWithInt:index];
  OrgOssPdfreporterEngineBaseElementsBlock *block = [((IOSObjectArray *) nil_chk(blocks_)) objectAtIndex:blockIndex];
  id<OrgOssPdfreporterEngineJRPrintElement> element = [((OrgOssPdfreporterEngineBaseElementsBlock *) nil_chk(block)) removeWithInt:index - [((IOSIntArray *) nil_chk(offsets_)) intAtIndex:blockIndex]];
  if (blockIndex + 1 < blockCount_) {
    for (int idx = blockIndex + 1; idx < blockCount_; ++idx) {
      --(*[((IOSIntArray *) nil_chk(offsets_)) intRefAtIndex:idx]);
    }
  }
  if (blockCount_ > 1 && [((OrgOssPdfreporterEngineBaseElementsBlock *) nil_chk(block)) isEmpty]) {
    for (int idx = blockIndex + 1; idx < blockCount_; ++idx) {
      (void) [((IOSObjectArray *) nil_chk(blocks_)) replaceObjectAtIndex:idx - 1 withObject:[((IOSObjectArray *) nil_chk(blocks_)) objectAtIndex:idx]];
      (*[((IOSIntArray *) nil_chk(offsets_)) intRefAtIndex:idx - 1]) = [((IOSIntArray *) nil_chk(offsets_)) intAtIndex:idx];
    }
    --blockCount_;
    (void) [((IOSObjectArray *) nil_chk(blocks_)) replaceObjectAtIndex:blockCount_ withObject:nil];
    (*[((IOSIntArray *) nil_chk(offsets_)) intRefAtIndex:blockCount_]) = 0;
  }
  --size__;
  return element;
}

- (void)dispose {
  for (int idx = 0; idx < blockCount_; ++idx) {
    [((OrgOssPdfreporterEngineBaseElementsBlock *) nil_chk([((IOSObjectArray *) nil_chk(blocks_)) objectAtIndex:idx])) dispose];
  }
}

- (int)blockIndexWithInt:(int)index {
  if (index < 0) {
    @throw [[JavaLangIndexOutOfBoundsException alloc] initWithNSString:[NSString stringWithFormat:@"index: %d", index]];
  }
  if (lastIndex_ >= 0 && lastIndex_ < blockCount_) {
    if (index >= [((IOSIntArray *) nil_chk(offsets_)) intAtIndex:lastIndex_] && (lastIndex_ + 1 == blockCount_ || index < [((IOSIntArray *) nil_chk(offsets_)) intAtIndex:lastIndex_ + 1])) {
      return lastIndex_;
    }
  }
  int blockIndex = [JavaUtilArrays binarySearchWithIntArray:offsets_ withInt:0 withInt:blockCount_ withInt:index];
  if (blockIndex < 0) {
    blockIndex = -blockIndex - 2;
  }
  lastIndex_ = blockIndex;
  return blockIndex;
}

- (OrgOssPdfreporterEngineBaseJRVirtualPrintPage *)getPage {
  return [((OrgOssPdfreporterEngineBaseElementsBlock *) nil_chk([((IOSObjectArray *) nil_chk(blocks_)) objectAtIndex:0])) getPage];
}

- (void)copyAllPropertiesTo:(id)copy {
  [super copyAllPropertiesTo:copy];
  OrgOssPdfreporterEngineBaseElementsBlockList *typedCopy = (OrgOssPdfreporterEngineBaseElementsBlockList *) copy;
  typedCopy.blockCount = blockCount_;
  typedCopy.offsets = offsets_;
  typedCopy.blocks = blocks_;
  typedCopy.size_ = size__;
  typedCopy.lastIndex = lastIndex_;
}

@end
