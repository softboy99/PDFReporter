//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: pdfreporter-core/src/org/oss/pdfreporter/engine/base/JRBaseConditionalStyle.java
//
//  Created by kendra on 9/27/13.
//

#include "java/lang/Boolean.h"
#include "java/lang/Integer.h"
#include "org/oss/pdfreporter/engine/JRAbstractObjectFactory.h"
#include "org/oss/pdfreporter/engine/JRConditionalStyle.h"
#include "org/oss/pdfreporter/engine/JRExpression.h"
#include "org/oss/pdfreporter/engine/JRLineBox.h"
#include "org/oss/pdfreporter/engine/JRParagraph.h"
#include "org/oss/pdfreporter/engine/JRPen.h"
#include "org/oss/pdfreporter/engine/JRStyle.h"
#include "org/oss/pdfreporter/engine/base/JRBaseConditionalStyle.h"
#include "org/oss/pdfreporter/engine/base/JRBaseStyle.h"
#include "org/oss/pdfreporter/engine/type/FillEnum.h"
#include "org/oss/pdfreporter/engine/type/HorizontalAlignEnum.h"
#include "org/oss/pdfreporter/engine/type/ModeEnum.h"
#include "org/oss/pdfreporter/engine/type/RotationEnum.h"
#include "org/oss/pdfreporter/engine/type/ScaleImageEnum.h"
#include "org/oss/pdfreporter/engine/type/VerticalAlignEnum.h"
#include "org/oss/pdfreporter/engine/util/JRCloneUtils.h"
#include "org/oss/pdfreporter/engine/util/ObjectUtils.h"
#include "org/oss/pdfreporter/geometry/IColor.h"

@implementation OrgOssPdfreporterEngineBaseJRBaseConditionalStyle

@synthesize conditionExpression = conditionExpression_;

- (id)init {
  return [super init];
}

- (id)initWithOrgOssPdfreporterEngineJRConditionalStyle:(id<OrgOssPdfreporterEngineJRConditionalStyle>)style
                     withOrgOssPdfreporterEngineJRStyle:(id<OrgOssPdfreporterEngineJRStyle>)parentStyle
     withOrgOssPdfreporterEngineJRAbstractObjectFactory:(OrgOssPdfreporterEngineJRAbstractObjectFactory *)factory {
  if ((self = [super init])) {
    self.parentStyle = parentStyle;
    modeValue_ = [((id<OrgOssPdfreporterEngineJRConditionalStyle>) nil_chk(style)) getOwnModeValue];
    forecolor_ = [((id<OrgOssPdfreporterEngineJRConditionalStyle>) nil_chk(style)) getOwnForecolor];
    backcolor_ = [((id<OrgOssPdfreporterEngineJRConditionalStyle>) nil_chk(style)) getOwnBackcolor];
    linePen_ = [((id<OrgOssPdfreporterEngineJRPen>) nil_chk([((id<OrgOssPdfreporterEngineJRConditionalStyle>) nil_chk(style)) getLinePen])) cloneWithOrgOssPdfreporterEngineJRPenContainer:self];
    fillValue_ = [((id<OrgOssPdfreporterEngineJRConditionalStyle>) nil_chk(style)) getOwnFillValue];
    radius_ = [((id<OrgOssPdfreporterEngineJRConditionalStyle>) nil_chk(style)) getOwnRadius];
    scaleImageValue_ = [((id<OrgOssPdfreporterEngineJRConditionalStyle>) nil_chk(style)) getOwnScaleImageValue];
    horizontalAlignmentValue_ = [((id<OrgOssPdfreporterEngineJRConditionalStyle>) nil_chk(style)) getOwnHorizontalAlignmentValue];
    verticalAlignmentValue_ = [((id<OrgOssPdfreporterEngineJRConditionalStyle>) nil_chk(style)) getOwnVerticalAlignmentValue];
    lineBox_ = [((id<OrgOssPdfreporterEngineJRLineBox>) nil_chk([((id<OrgOssPdfreporterEngineJRConditionalStyle>) nil_chk(style)) getLineBox])) cloneWithOrgOssPdfreporterEngineJRBoxContainer:self];
    paragraph_ = [((id<OrgOssPdfreporterEngineJRParagraph>) nil_chk([((id<OrgOssPdfreporterEngineJRConditionalStyle>) nil_chk(style)) getParagraph])) cloneWithOrgOssPdfreporterEngineJRParagraphContainer:self];
    rotationValue_ = [((id<OrgOssPdfreporterEngineJRConditionalStyle>) nil_chk(style)) getOwnRotationValue];
    markup_ = [((id<OrgOssPdfreporterEngineJRConditionalStyle>) nil_chk(style)) getOwnMarkup];
    pattern_ = [((id<OrgOssPdfreporterEngineJRConditionalStyle>) nil_chk(style)) getOwnPattern];
    fontName_ = [((id<OrgOssPdfreporterEngineJRConditionalStyle>) nil_chk(style)) getOwnFontName];
    isBold__ = [((id<OrgOssPdfreporterEngineJRConditionalStyle>) nil_chk(style)) isOwnBold];
    isItalic__ = [((id<OrgOssPdfreporterEngineJRConditionalStyle>) nil_chk(style)) isOwnItalic];
    isUnderline__ = [((id<OrgOssPdfreporterEngineJRConditionalStyle>) nil_chk(style)) isOwnUnderline];
    isStrikeThrough__ = [((id<OrgOssPdfreporterEngineJRConditionalStyle>) nil_chk(style)) isOwnStrikeThrough];
    fontSize_ = [((id<OrgOssPdfreporterEngineJRConditionalStyle>) nil_chk(style)) getOwnFontSize];
    pdfFontName_ = [((id<OrgOssPdfreporterEngineJRConditionalStyle>) nil_chk(style)) getOwnPdfFontName];
    pdfEncoding_ = [((id<OrgOssPdfreporterEngineJRConditionalStyle>) nil_chk(style)) getOwnPdfEncoding];
    isPdfEmbedded__ = [((id<OrgOssPdfreporterEngineJRConditionalStyle>) nil_chk(style)) isOwnPdfEmbedded];
    conditionExpression_ = [((OrgOssPdfreporterEngineJRAbstractObjectFactory *) nil_chk(factory)) getExpressionWithOrgOssPdfreporterEngineJRExpression:[((id<OrgOssPdfreporterEngineJRConditionalStyle>) nil_chk(style)) getConditionExpression] withBOOL:YES];
  }
  return self;
}

- (id<OrgOssPdfreporterEngineJRExpression>)getConditionExpression {
  return conditionExpression_;
}

- (id)clone {
  OrgOssPdfreporterEngineBaseJRBaseConditionalStyle *clone = (OrgOssPdfreporterEngineBaseJRBaseConditionalStyle *) [super clone];
  ((OrgOssPdfreporterEngineBaseJRBaseConditionalStyle *) nil_chk(clone)).conditionExpression = [OrgOssPdfreporterEngineUtilJRCloneUtils nullSafeCloneWithId:conditionExpression_];
  return clone;
}

- (int)getHashCode {
  OrgOssPdfreporterEngineUtilObjectUtils_HashCode *hash_ = [OrgOssPdfreporterEngineUtilObjectUtils hash__];
  [self addStyleHashWithOrgOssPdfreporterEngineUtilObjectUtils_HashCode:hash_];
  [((OrgOssPdfreporterEngineUtilObjectUtils_HashCode *) nil_chk(hash_)) addWithId:conditionExpression_ == nil ? nil : [((id<OrgOssPdfreporterEngineJRExpression>) nil_chk(conditionExpression_)) getText]];
  return [((OrgOssPdfreporterEngineUtilObjectUtils_HashCode *) nil_chk(hash_)) getHashCode];
}

- (BOOL)isIdenticalWithId:(id)object {
  if (self == object) {
    return YES;
  }
  if (!([object isKindOfClass:[OrgOssPdfreporterEngineBaseJRBaseConditionalStyle class]])) {
    return NO;
  }
  OrgOssPdfreporterEngineBaseJRBaseConditionalStyle *style = (OrgOssPdfreporterEngineBaseJRBaseConditionalStyle *) object;
  if (![self identicalStyleWithOrgOssPdfreporterEngineBaseJRBaseStyle:style]) {
    return NO;
  }
  JavaLangInteger *expressionId = conditionExpression_ == nil ? nil : [JavaLangInteger valueOfWithInt:[((id<OrgOssPdfreporterEngineJRExpression>) nil_chk(conditionExpression_)) getId]];
  JavaLangInteger *otherExpressionId = ((OrgOssPdfreporterEngineBaseJRBaseConditionalStyle *) nil_chk(style)).conditionExpression == nil ? nil : [JavaLangInteger valueOfWithInt:[((id<OrgOssPdfreporterEngineJRExpression>) nil_chk(((OrgOssPdfreporterEngineBaseJRBaseConditionalStyle *) nil_chk(style)).conditionExpression)) getId]];
  if (![OrgOssPdfreporterEngineUtilObjectUtils equalsWithId:expressionId withId:otherExpressionId]) {
    return NO;
  }
  NSString *expressionText = conditionExpression_ == nil ? nil : [((id<OrgOssPdfreporterEngineJRExpression>) nil_chk(conditionExpression_)) getText];
  NSString *otherExpressionText = ((OrgOssPdfreporterEngineBaseJRBaseConditionalStyle *) nil_chk(style)).conditionExpression == nil ? nil : [((id<OrgOssPdfreporterEngineJRExpression>) nil_chk(((OrgOssPdfreporterEngineBaseJRBaseConditionalStyle *) nil_chk(style)).conditionExpression)) getText];
  return [OrgOssPdfreporterEngineUtilObjectUtils equalsWithId:expressionText withId:otherExpressionText];
}

- (void)copyAllPropertiesTo:(id)copy {
  [super copyAllPropertiesTo:copy];
  OrgOssPdfreporterEngineBaseJRBaseConditionalStyle *typedCopy = (OrgOssPdfreporterEngineBaseJRBaseConditionalStyle *) copy;
  typedCopy.conditionExpression = conditionExpression_;
}

@end
