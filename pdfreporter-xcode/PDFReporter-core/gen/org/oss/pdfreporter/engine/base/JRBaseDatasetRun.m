//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: pdfreporter-core/src/org/oss/pdfreporter/engine/base/JRBaseDatasetRun.java
//
//  Created by kendra on 9/27/13.
//

#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "java/lang/CloneNotSupportedException.h"
#include "org/oss/pdfreporter/engine/JRDatasetParameter.h"
#include "org/oss/pdfreporter/engine/JRDatasetRun.h"
#include "org/oss/pdfreporter/engine/JRExpression.h"
#include "org/oss/pdfreporter/engine/JRPropertiesHolder.h"
#include "org/oss/pdfreporter/engine/JRPropertiesMap.h"
#include "org/oss/pdfreporter/engine/JRRuntimeException.h"
#include "org/oss/pdfreporter/engine/base/JRBaseDatasetParameter.h"
#include "org/oss/pdfreporter/engine/base/JRBaseDatasetRun.h"
#include "org/oss/pdfreporter/engine/base/JRBaseObjectFactory.h"
#include "org/oss/pdfreporter/engine/util/JRCloneUtils.h"
#include "org/oss/pdfreporter/uses/java/util/UUID.h"

@implementation OrgOssPdfreporterEngineBaseJRBaseDatasetRun

@synthesize uuid = uuid_;
@synthesize datasetName = datasetName_;
@synthesize parametersMapExpression = parametersMapExpression_;
@synthesize parameters = parameters_;
@synthesize connectionExpression = connectionExpression_;
@synthesize dataSourceExpression = dataSourceExpression_;
@synthesize propertiesMap = propertiesMap_;

- (id)init {
  return [super init];
}

- (id)initWithOrgOssPdfreporterEngineJRDatasetRun:(id<OrgOssPdfreporterEngineJRDatasetRun>)datasetRun
withOrgOssPdfreporterEngineBaseJRBaseObjectFactory:(OrgOssPdfreporterEngineBaseJRBaseObjectFactory *)factory {
  if ((self = [super init])) {
    [((OrgOssPdfreporterEngineBaseJRBaseObjectFactory *) nil_chk(factory)) putWithId:datasetRun withId:self];
    uuid_ = [((id<OrgOssPdfreporterEngineJRDatasetRun>) nil_chk(datasetRun)) getUUID];
    datasetName_ = [((id<OrgOssPdfreporterEngineJRDatasetRun>) nil_chk(datasetRun)) getDatasetName];
    parametersMapExpression_ = [((OrgOssPdfreporterEngineBaseJRBaseObjectFactory *) nil_chk(factory)) getExpressionWithOrgOssPdfreporterEngineJRExpression:[((id<OrgOssPdfreporterEngineJRDatasetRun>) nil_chk(datasetRun)) getParametersMapExpression]];
    connectionExpression_ = [((OrgOssPdfreporterEngineBaseJRBaseObjectFactory *) nil_chk(factory)) getExpressionWithOrgOssPdfreporterEngineJRExpression:[((id<OrgOssPdfreporterEngineJRDatasetRun>) nil_chk(datasetRun)) getConnectionExpression]];
    dataSourceExpression_ = [((OrgOssPdfreporterEngineBaseJRBaseObjectFactory *) nil_chk(factory)) getExpressionWithOrgOssPdfreporterEngineJRExpression:[((id<OrgOssPdfreporterEngineJRDatasetRun>) nil_chk(datasetRun)) getDataSourceExpression]];
    propertiesMap_ = [OrgOssPdfreporterEngineJRPropertiesMap getPropertiesCloneWithOrgOssPdfreporterEngineJRPropertiesHolder:datasetRun];
    IOSObjectArray *datasetParams = [((id<OrgOssPdfreporterEngineJRDatasetRun>) nil_chk(datasetRun)) getParameters];
    if (datasetParams != nil && (int) [((IOSObjectArray *) nil_chk(datasetParams)) count] > 0) {
      parameters_ = [IOSObjectArray arrayWithLength:(int) [((IOSObjectArray *) nil_chk(datasetParams)) count] type:[IOSClass classWithClass:[OrgOssPdfreporterEngineBaseJRBaseDatasetParameter class]]];
      for (int i = 0; i < (int) [((IOSObjectArray *) nil_chk(parameters_)) count]; i++) {
        (void) [((IOSObjectArray *) nil_chk(parameters_)) replaceObjectAtIndex:i withObject:[((OrgOssPdfreporterEngineBaseJRBaseObjectFactory *) nil_chk(factory)) getDatasetParameterWithOrgOssPdfreporterEngineJRDatasetParameter:[((IOSObjectArray *) nil_chk(datasetParams)) objectAtIndex:i]]];
      }
    }
  }
  return self;
}

- (OrgOssPdfreporterUsesJavaUtilUUID *)getUUID {
  if (uuid_ == nil) {
    uuid_ = [OrgOssPdfreporterUsesJavaUtilUUID randomUUID];
  }
  return uuid_;
}

- (NSString *)getDatasetName {
  return datasetName_;
}

- (id<OrgOssPdfreporterEngineJRExpression>)getParametersMapExpression {
  return parametersMapExpression_;
}

- (IOSObjectArray *)getParameters {
  return parameters_;
}

- (id<OrgOssPdfreporterEngineJRExpression>)getConnectionExpression {
  return connectionExpression_;
}

- (id<OrgOssPdfreporterEngineJRExpression>)getDataSourceExpression {
  return dataSourceExpression_;
}

- (id)clone {
  OrgOssPdfreporterEngineBaseJRBaseDatasetRun *clone = nil;
  @try {
    clone = (OrgOssPdfreporterEngineBaseJRBaseDatasetRun *) [super clone];
  }
  @catch (JavaLangCloneNotSupportedException *e) {
    @throw [[OrgOssPdfreporterEngineJRRuntimeException alloc] initWithJavaLangThrowable:e];
  }
  ((OrgOssPdfreporterEngineBaseJRBaseDatasetRun *) nil_chk(clone)).parametersMapExpression = [OrgOssPdfreporterEngineUtilJRCloneUtils nullSafeCloneWithId:parametersMapExpression_];
  ((OrgOssPdfreporterEngineBaseJRBaseDatasetRun *) nil_chk(clone)).connectionExpression = [OrgOssPdfreporterEngineUtilJRCloneUtils nullSafeCloneWithId:connectionExpression_];
  ((OrgOssPdfreporterEngineBaseJRBaseDatasetRun *) nil_chk(clone)).dataSourceExpression = [OrgOssPdfreporterEngineUtilJRCloneUtils nullSafeCloneWithId:dataSourceExpression_];
  ((OrgOssPdfreporterEngineBaseJRBaseDatasetRun *) nil_chk(clone)).parameters = [OrgOssPdfreporterEngineUtilJRCloneUtils cloneArrayWithOrgOssPdfreporterEngineJRCloneableArray:parameters_];
  ((OrgOssPdfreporterEngineBaseJRBaseDatasetRun *) nil_chk(clone)).propertiesMap = [OrgOssPdfreporterEngineJRPropertiesMap getPropertiesCloneWithOrgOssPdfreporterEngineJRPropertiesHolder:self];
  ((OrgOssPdfreporterEngineBaseJRBaseDatasetRun *) nil_chk(clone)).uuid = nil;
  return clone;
}

- (BOOL)hasProperties {
  return propertiesMap_ != nil && [((OrgOssPdfreporterEngineJRPropertiesMap *) nil_chk(propertiesMap_)) hasProperties];
}

- (OrgOssPdfreporterEngineJRPropertiesMap *)getPropertiesMap {
  if (propertiesMap_ == nil) {
    propertiesMap_ = [[OrgOssPdfreporterEngineJRPropertiesMap alloc] init];
  }
  return propertiesMap_;
}

- (id<OrgOssPdfreporterEngineJRPropertiesHolder>)getParentProperties {
  return nil;
}

- (id)copyWithZone:(NSZone *)zone {
  return [self clone];
}

- (void)copyAllPropertiesTo:(id)copy {
  [super copyAllPropertiesTo:copy];
  OrgOssPdfreporterEngineBaseJRBaseDatasetRun *typedCopy = (OrgOssPdfreporterEngineBaseJRBaseDatasetRun *) copy;
  typedCopy.uuid = uuid_;
  typedCopy.datasetName = datasetName_;
  typedCopy.parametersMapExpression = parametersMapExpression_;
  typedCopy.parameters = parameters_;
  typedCopy.connectionExpression = connectionExpression_;
  typedCopy.dataSourceExpression = dataSourceExpression_;
  typedCopy.propertiesMap = propertiesMap_;
}

@end
