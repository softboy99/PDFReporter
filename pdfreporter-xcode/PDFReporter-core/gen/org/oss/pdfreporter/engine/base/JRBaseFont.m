//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: pdfreporter-core/src/org/oss/pdfreporter/engine/base/JRBaseFont.java
//
//  Created by kendra on 9/27/13.
//

#include "java/lang/Boolean.h"
#include "java/lang/CloneNotSupportedException.h"
#include "java/lang/Float.h"
#include "java/lang/Integer.h"
#include "java/util/Map.h"
#include "org/oss/pdfreporter/engine/JRAbstractObjectFactory.h"
#include "org/oss/pdfreporter/engine/JRDefaultStyleProvider.h"
#include "org/oss/pdfreporter/engine/JRFont.h"
#include "org/oss/pdfreporter/engine/JRRuntimeException.h"
#include "org/oss/pdfreporter/engine/JRStyle.h"
#include "org/oss/pdfreporter/engine/JRStyleContainer.h"
#include "org/oss/pdfreporter/engine/base/JRBaseFont.h"
#include "org/oss/pdfreporter/engine/design/events/JRPropertyChangeSupport.h"
#include "org/oss/pdfreporter/engine/util/JRStyleResolver.h"
#include "org/oss/pdfreporter/engine/util/JRTextAttribute.h"
#include "org/oss/pdfreporter/font/text/TextAttribute.h"

@implementation OrgOssPdfreporterEngineBaseJRBaseFont

static NSString * OrgOssPdfreporterEngineBaseJRBaseFont_PROPERTY_BOLD_ = @"bold";
static NSString * OrgOssPdfreporterEngineBaseJRBaseFont_PROPERTY_FONT_NAME_ = @"fontName";
static NSString * OrgOssPdfreporterEngineBaseJRBaseFont_PROPERTY_FONT_SIZE_ = @"fontSize";
static NSString * OrgOssPdfreporterEngineBaseJRBaseFont_PROPERTY_ITALIC_ = @"italic";
static NSString * OrgOssPdfreporterEngineBaseJRBaseFont_PROPERTY_PDF_EMBEDDED_ = @"pdfEmbedded";
static NSString * OrgOssPdfreporterEngineBaseJRBaseFont_PROPERTY_PDF_ENCODING_ = @"pdfEncoding";
static NSString * OrgOssPdfreporterEngineBaseJRBaseFont_PROPERTY_PDF_FONT_NAME_ = @"pdfFontName";
static NSString * OrgOssPdfreporterEngineBaseJRBaseFont_PROPERTY_REPORT_FONT_ = @"reportFont";
static NSString * OrgOssPdfreporterEngineBaseJRBaseFont_PROPERTY_STRIKE_THROUGH_ = @"strikeThrough";
static NSString * OrgOssPdfreporterEngineBaseJRBaseFont_PROPERTY_UNDERLINE_ = @"underline";

@synthesize styleContainer = styleContainer_;
@synthesize style = style_;
@synthesize styleNameReference = styleNameReference_;
@synthesize fontName = fontName_;
@synthesize isBold_ = isBold__;
@synthesize isItalic_ = isItalic__;
@synthesize isUnderline_ = isUnderline__;
@synthesize isStrikeThrough_ = isStrikeThrough__;
@synthesize fontSize = fontSize_;
@synthesize pdfFontName = pdfFontName_;
@synthesize pdfEncoding = pdfEncoding_;
@synthesize isPdfEmbedded_ = isPdfEmbedded__;
@synthesize eventSupport = eventSupport_;

+ (NSString *)PROPERTY_BOLD {
  return OrgOssPdfreporterEngineBaseJRBaseFont_PROPERTY_BOLD_;
}

+ (NSString *)PROPERTY_FONT_NAME {
  return OrgOssPdfreporterEngineBaseJRBaseFont_PROPERTY_FONT_NAME_;
}

+ (NSString *)PROPERTY_FONT_SIZE {
  return OrgOssPdfreporterEngineBaseJRBaseFont_PROPERTY_FONT_SIZE_;
}

+ (NSString *)PROPERTY_ITALIC {
  return OrgOssPdfreporterEngineBaseJRBaseFont_PROPERTY_ITALIC_;
}

+ (NSString *)PROPERTY_PDF_EMBEDDED {
  return OrgOssPdfreporterEngineBaseJRBaseFont_PROPERTY_PDF_EMBEDDED_;
}

+ (NSString *)PROPERTY_PDF_ENCODING {
  return OrgOssPdfreporterEngineBaseJRBaseFont_PROPERTY_PDF_ENCODING_;
}

+ (NSString *)PROPERTY_PDF_FONT_NAME {
  return OrgOssPdfreporterEngineBaseJRBaseFont_PROPERTY_PDF_FONT_NAME_;
}

+ (NSString *)PROPERTY_REPORT_FONT {
  return OrgOssPdfreporterEngineBaseJRBaseFont_PROPERTY_REPORT_FONT_;
}

+ (NSString *)PROPERTY_STRIKE_THROUGH {
  return OrgOssPdfreporterEngineBaseJRBaseFont_PROPERTY_STRIKE_THROUGH_;
}

+ (NSString *)PROPERTY_UNDERLINE {
  return OrgOssPdfreporterEngineBaseJRBaseFont_PROPERTY_UNDERLINE_;
}

- (id)init {
  return [super init];
}

- (id)initWithJavaUtilMap:(id<JavaUtilMap>)attributes {
  if ((self = [super init])) {
    NSString *fontNameAttr = (NSString *) [((id<JavaUtilMap>) nil_chk(attributes)) getWithId:[OrgOssPdfreporterFontTextTextAttribute FAMILY]];
    if (fontNameAttr != nil) {
      [self setFontNameWithNSString:fontNameAttr];
    }
    id bold = [((id<JavaUtilMap>) nil_chk(attributes)) getWithId:[OrgOssPdfreporterFontTextTextAttribute WEIGHT]];
    if (bold != nil) {
      [self setBoldWithBOOL:[((JavaLangFloat *) nil_chk([OrgOssPdfreporterFontTextTextAttribute WEIGHT_BOLD])) isEqual:bold]];
    }
    id italic = [((id<JavaUtilMap>) nil_chk(attributes)) getWithId:[OrgOssPdfreporterFontTextTextAttribute POSTURE]];
    if (italic != nil) {
      [self setItalicWithBOOL:[((JavaLangFloat *) nil_chk([OrgOssPdfreporterFontTextTextAttribute POSTURE_OBLIQUE])) isEqual:italic]];
    }
    JavaLangFloat *sizeAttr = (JavaLangFloat *) [((id<JavaUtilMap>) nil_chk(attributes)) getWithId:[OrgOssPdfreporterFontTextTextAttribute SIZE]];
    if (sizeAttr != nil) {
      [self setFontSizeWithInt:[sizeAttr intValue]];
    }
    id underline = [((id<JavaUtilMap>) nil_chk(attributes)) getWithId:[OrgOssPdfreporterFontTextTextAttribute UNDERLINE]];
    if (underline != nil) {
      [self setUnderlineWithBOOL:[((JavaLangInteger *) nil_chk([OrgOssPdfreporterFontTextTextAttribute UNDERLINE_ON])) isEqual:underline]];
    }
    id strikeThrough = [((id<JavaUtilMap>) nil_chk(attributes)) getWithId:[OrgOssPdfreporterFontTextTextAttribute STRIKETHROUGH]];
    if (strikeThrough != nil) {
      [self setStrikeThroughWithBOOL:[((JavaLangBoolean *) nil_chk([OrgOssPdfreporterFontTextTextAttribute STRIKETHROUGH_ON])) isEqual:strikeThrough]];
    }
    NSString *pdfFontNameAttr = (NSString *) [((id<JavaUtilMap>) nil_chk(attributes)) getWithId:[OrgOssPdfreporterEngineUtilJRTextAttribute PDF_FONT_NAME]];
    if (pdfFontNameAttr != nil) {
      [self setPdfFontNameWithNSString:pdfFontNameAttr];
    }
    NSString *pdfEncodingAttr = (NSString *) [((id<JavaUtilMap>) nil_chk(attributes)) getWithId:[OrgOssPdfreporterEngineUtilJRTextAttribute PDF_ENCODING]];
    if (pdfEncodingAttr != nil) {
      [self setPdfEncodingWithNSString:pdfEncodingAttr];
    }
    JavaLangBoolean *isPdfEmbeddedAttr = (JavaLangBoolean *) [((id<JavaUtilMap>) nil_chk(attributes)) getWithId:[OrgOssPdfreporterEngineUtilJRTextAttribute IS_PDF_EMBEDDED]];
    if (isPdfEmbeddedAttr != nil) {
      [self setPdfEmbeddedWithJavaLangBoolean:isPdfEmbeddedAttr];
    }
  }
  return self;
}

- (id)initOrgOssPdfreporterEngineBaseJRBaseFontWithOrgOssPdfreporterEngineJRStyleContainer:(id<OrgOssPdfreporterEngineJRStyleContainer>)styleContainer {
  if ((self = [super init])) {
    self.styleContainer = styleContainer;
  }
  return self;
}

- (id)initWithOrgOssPdfreporterEngineJRStyleContainer:(id<OrgOssPdfreporterEngineJRStyleContainer>)styleContainer {
  return [self initOrgOssPdfreporterEngineBaseJRBaseFontWithOrgOssPdfreporterEngineJRStyleContainer:styleContainer];
}

- (id)initWithOrgOssPdfreporterEngineJRStyleContainer:(id<OrgOssPdfreporterEngineJRStyleContainer>)styleContainer
                    withOrgOssPdfreporterEngineJRFont:(id<OrgOssPdfreporterEngineJRFont>)font {
  if ((self = [self initOrgOssPdfreporterEngineBaseJRBaseFontWithOrgOssPdfreporterEngineJRStyleContainer:styleContainer])) {
    if (font != nil) {
      fontName_ = [font getOwnFontName];
      isBold__ = [font isOwnBold];
      isItalic__ = [font isOwnItalic];
      isUnderline__ = [font isOwnUnderline];
      isStrikeThrough__ = [font isOwnStrikeThrough];
      fontSize_ = [font getOwnFontSize];
      pdfFontName_ = [font getOwnPdfFontName];
      pdfEncoding_ = [font getOwnPdfEncoding];
      isPdfEmbedded__ = [font isOwnPdfEmbedded];
    }
  }
  return self;
}

- (id)initWithOrgOssPdfreporterEngineJRStyleContainer:(id<OrgOssPdfreporterEngineJRStyleContainer>)styleContainer
                    withOrgOssPdfreporterEngineJRFont:(id<OrgOssPdfreporterEngineJRFont>)font
   withOrgOssPdfreporterEngineJRAbstractObjectFactory:(OrgOssPdfreporterEngineJRAbstractObjectFactory *)factory {
  if ((self = [super init])) {
    [((OrgOssPdfreporterEngineJRAbstractObjectFactory *) nil_chk(factory)) putWithId:font withId:self];
    self.styleContainer = styleContainer;
    style_ = [((OrgOssPdfreporterEngineJRAbstractObjectFactory *) nil_chk(factory)) getStyleWithOrgOssPdfreporterEngineJRStyle:[((id<OrgOssPdfreporterEngineJRFont>) nil_chk(font)) getStyle]];
    styleNameReference_ = [((id<OrgOssPdfreporterEngineJRFont>) nil_chk(font)) getStyleNameReference];
    fontName_ = [((id<OrgOssPdfreporterEngineJRFont>) nil_chk(font)) getOwnFontName];
    isBold__ = [((id<OrgOssPdfreporterEngineJRFont>) nil_chk(font)) isOwnBold];
    isItalic__ = [((id<OrgOssPdfreporterEngineJRFont>) nil_chk(font)) isOwnItalic];
    isUnderline__ = [((id<OrgOssPdfreporterEngineJRFont>) nil_chk(font)) isOwnUnderline];
    isStrikeThrough__ = [((id<OrgOssPdfreporterEngineJRFont>) nil_chk(font)) isOwnStrikeThrough];
    fontSize_ = [((id<OrgOssPdfreporterEngineJRFont>) nil_chk(font)) getOwnFontSize];
    pdfFontName_ = [((id<OrgOssPdfreporterEngineJRFont>) nil_chk(font)) getOwnPdfFontName];
    pdfEncoding_ = [((id<OrgOssPdfreporterEngineJRFont>) nil_chk(font)) getOwnPdfEncoding];
    isPdfEmbedded__ = [((id<OrgOssPdfreporterEngineJRFont>) nil_chk(font)) isOwnPdfEmbedded];
  }
  return self;
}

- (id<OrgOssPdfreporterEngineJRDefaultStyleProvider>)getDefaultStyleProvider {
  return styleContainer_ == nil ? nil : [((id<OrgOssPdfreporterEngineJRStyleContainer>) nil_chk(styleContainer_)) getDefaultStyleProvider];
}

- (id<OrgOssPdfreporterEngineJRStyle>)getStyle {
  return style_ == nil ? (styleContainer_ == nil ? nil : [((id<OrgOssPdfreporterEngineJRStyleContainer>) nil_chk(styleContainer_)) getStyle]) : style_;
}

- (NSString *)getStyleNameReference {
  return styleNameReference_ == nil ? (styleContainer_ == nil ? nil : [((id<OrgOssPdfreporterEngineJRStyleContainer>) nil_chk(styleContainer_)) getStyleNameReference]) : styleNameReference_;
}

- (NSString *)getFontName {
  return [OrgOssPdfreporterEngineUtilJRStyleResolver getFontNameWithOrgOssPdfreporterEngineJRFont:self];
}

- (NSString *)getOwnFontName {
  return fontName_;
}

- (void)setFontNameWithNSString:(NSString *)fontName {
  id old = self.fontName;
  self.fontName = fontName;
  [((OrgOssPdfreporterEngineDesignEventsJRPropertyChangeSupport *) nil_chk([self getEventSupport])) firePropertyChangeWithNSString:OrgOssPdfreporterEngineBaseJRBaseFont_PROPERTY_FONT_NAME_ withId:old withId:self.fontName];
}

- (BOOL)isBold {
  return [OrgOssPdfreporterEngineUtilJRStyleResolver isBoldWithOrgOssPdfreporterEngineJRFont:self];
}

- (JavaLangBoolean *)isOwnBold {
  return isBold__;
}

- (void)setBoldWithBOOL:(BOOL)isBold {
  [self setBoldWithJavaLangBoolean:isBold ? [JavaLangBoolean getTRUE] : [JavaLangBoolean getFALSE]];
}

- (void)setBoldWithJavaLangBoolean:(JavaLangBoolean *)isBold {
  id old = self.isBold_;
  self.isBold_ = isBold;
  [((OrgOssPdfreporterEngineDesignEventsJRPropertyChangeSupport *) nil_chk([self getEventSupport])) firePropertyChangeWithNSString:OrgOssPdfreporterEngineBaseJRBaseFont_PROPERTY_BOLD_ withId:old withId:self.isBold_];
}

- (BOOL)isItalic {
  return [OrgOssPdfreporterEngineUtilJRStyleResolver isItalicWithOrgOssPdfreporterEngineJRFont:self];
}

- (JavaLangBoolean *)isOwnItalic {
  return isItalic__;
}

- (void)setItalicWithBOOL:(BOOL)isItalic {
  [self setItalicWithJavaLangBoolean:isItalic ? [JavaLangBoolean getTRUE] : [JavaLangBoolean getFALSE]];
}

- (void)setItalicWithJavaLangBoolean:(JavaLangBoolean *)isItalic {
  id old = self.isItalic_;
  self.isItalic_ = isItalic;
  [((OrgOssPdfreporterEngineDesignEventsJRPropertyChangeSupport *) nil_chk([self getEventSupport])) firePropertyChangeWithNSString:OrgOssPdfreporterEngineBaseJRBaseFont_PROPERTY_ITALIC_ withId:old withId:self.isItalic_];
}

- (BOOL)isUnderline {
  return [OrgOssPdfreporterEngineUtilJRStyleResolver isUnderlineWithOrgOssPdfreporterEngineJRFont:self];
}

- (JavaLangBoolean *)isOwnUnderline {
  return isUnderline__;
}

- (void)setUnderlineWithBOOL:(BOOL)isUnderline {
  [self setUnderlineWithJavaLangBoolean:isUnderline ? [JavaLangBoolean getTRUE] : [JavaLangBoolean getFALSE]];
}

- (void)setUnderlineWithJavaLangBoolean:(JavaLangBoolean *)isUnderline {
  id old = self.isUnderline_;
  self.isUnderline_ = isUnderline;
  [((OrgOssPdfreporterEngineDesignEventsJRPropertyChangeSupport *) nil_chk([self getEventSupport])) firePropertyChangeWithNSString:OrgOssPdfreporterEngineBaseJRBaseFont_PROPERTY_UNDERLINE_ withId:old withId:self.isUnderline_];
}

- (BOOL)isStrikeThrough {
  return [OrgOssPdfreporterEngineUtilJRStyleResolver isStrikeThroughWithOrgOssPdfreporterEngineJRFont:self];
}

- (JavaLangBoolean *)isOwnStrikeThrough {
  return isStrikeThrough__;
}

- (void)setStrikeThroughWithBOOL:(BOOL)isStrikeThrough {
  [self setStrikeThroughWithJavaLangBoolean:isStrikeThrough ? [JavaLangBoolean getTRUE] : [JavaLangBoolean getFALSE]];
}

- (void)setStrikeThroughWithJavaLangBoolean:(JavaLangBoolean *)isStrikeThrough {
  id old = self.isStrikeThrough_;
  self.isStrikeThrough_ = isStrikeThrough;
  [((OrgOssPdfreporterEngineDesignEventsJRPropertyChangeSupport *) nil_chk([self getEventSupport])) firePropertyChangeWithNSString:OrgOssPdfreporterEngineBaseJRBaseFont_PROPERTY_STRIKE_THROUGH_ withId:old withId:self.isStrikeThrough_];
}

- (int)getFontSize {
  return [OrgOssPdfreporterEngineUtilJRStyleResolver getFontSizeWithOrgOssPdfreporterEngineJRFont:self];
}

- (JavaLangInteger *)getOwnFontSize {
  return fontSize_;
}

- (void)setFontSizeWithInt:(int)fontSize {
  [self setFontSizeWithJavaLangInteger:[JavaLangInteger valueOfWithInt:fontSize]];
}

- (void)setFontSizeWithJavaLangInteger:(JavaLangInteger *)fontSize {
  id old = self.fontSize;
  self.fontSize = fontSize;
  [((OrgOssPdfreporterEngineDesignEventsJRPropertyChangeSupport *) nil_chk([self getEventSupport])) firePropertyChangeWithNSString:OrgOssPdfreporterEngineBaseJRBaseFont_PROPERTY_FONT_SIZE_ withId:old withId:self.fontSize];
}

- (NSString *)getPdfFontName {
  return [OrgOssPdfreporterEngineUtilJRStyleResolver getPdfFontNameWithOrgOssPdfreporterEngineJRFont:self];
}

- (NSString *)getOwnPdfFontName {
  return pdfFontName_;
}

- (void)setPdfFontNameWithNSString:(NSString *)pdfFontName {
  id old = self.pdfFontName;
  self.pdfFontName = pdfFontName;
  [((OrgOssPdfreporterEngineDesignEventsJRPropertyChangeSupport *) nil_chk([self getEventSupport])) firePropertyChangeWithNSString:OrgOssPdfreporterEngineBaseJRBaseFont_PROPERTY_PDF_FONT_NAME_ withId:old withId:self.pdfFontName];
}

- (NSString *)getPdfEncoding {
  return [OrgOssPdfreporterEngineUtilJRStyleResolver getPdfEncodingWithOrgOssPdfreporterEngineJRFont:self];
}

- (NSString *)getOwnPdfEncoding {
  return pdfEncoding_;
}

- (void)setPdfEncodingWithNSString:(NSString *)pdfEncoding {
  id old = self.pdfEncoding;
  self.pdfEncoding = pdfEncoding;
  [((OrgOssPdfreporterEngineDesignEventsJRPropertyChangeSupport *) nil_chk([self getEventSupport])) firePropertyChangeWithNSString:OrgOssPdfreporterEngineBaseJRBaseFont_PROPERTY_PDF_ENCODING_ withId:old withId:self.pdfEncoding];
}

- (BOOL)isPdfEmbedded {
  return [OrgOssPdfreporterEngineUtilJRStyleResolver isPdfEmbeddedWithOrgOssPdfreporterEngineJRFont:self];
}

- (JavaLangBoolean *)isOwnPdfEmbedded {
  return isPdfEmbedded__;
}

- (void)setPdfEmbeddedWithBOOL:(BOOL)isPdfEmbedded {
  [self setPdfEmbeddedWithJavaLangBoolean:isPdfEmbedded ? [JavaLangBoolean getTRUE] : [JavaLangBoolean getFALSE]];
}

- (void)setPdfEmbeddedWithJavaLangBoolean:(JavaLangBoolean *)isPdfEmbedded {
  id old = self.isPdfEmbedded_;
  self.isPdfEmbedded_ = isPdfEmbedded;
  [((OrgOssPdfreporterEngineDesignEventsJRPropertyChangeSupport *) nil_chk([self getEventSupport])) firePropertyChangeWithNSString:OrgOssPdfreporterEngineBaseJRBaseFont_PROPERTY_PDF_EMBEDDED_ withId:old withId:self.isPdfEmbedded_];
}

- (id)clone {
  OrgOssPdfreporterEngineBaseJRBaseFont *clone = nil;
  @try {
    clone = (OrgOssPdfreporterEngineBaseJRBaseFont *) [super clone];
  }
  @catch (JavaLangCloneNotSupportedException *e) {
    @throw [[OrgOssPdfreporterEngineJRRuntimeException alloc] initWithJavaLangThrowable:e];
  }
  ((OrgOssPdfreporterEngineBaseJRBaseFont *) nil_chk(clone)).eventSupport = nil;
  return clone;
}

- (OrgOssPdfreporterEngineDesignEventsJRPropertyChangeSupport *)getEventSupport {
  @synchronized (self) {
    if (eventSupport_ == nil) {
      eventSupport_ = [[OrgOssPdfreporterEngineDesignEventsJRPropertyChangeSupport alloc] initWithId:self];
    }
  }
  return eventSupport_;
}

- (id)copyWithZone:(NSZone *)zone {
  return [self clone];
}

- (void)copyAllPropertiesTo:(id)copy {
  [super copyAllPropertiesTo:copy];
  OrgOssPdfreporterEngineBaseJRBaseFont *typedCopy = (OrgOssPdfreporterEngineBaseJRBaseFont *) copy;
  typedCopy.styleContainer = styleContainer_;
  typedCopy.style = style_;
  typedCopy.styleNameReference = styleNameReference_;
  typedCopy.fontName = fontName_;
  typedCopy.isBold_ = isBold__;
  typedCopy.isItalic_ = isItalic__;
  typedCopy.isUnderline_ = isUnderline__;
  typedCopy.isStrikeThrough_ = isStrikeThrough__;
  typedCopy.fontSize = fontSize_;
  typedCopy.pdfFontName = pdfFontName_;
  typedCopy.pdfEncoding = pdfEncoding_;
  typedCopy.isPdfEmbedded_ = isPdfEmbedded__;
  typedCopy.eventSupport = eventSupport_;
}

@end
