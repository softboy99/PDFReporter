//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: pdfreporter-core/src/org/oss/pdfreporter/engine/base/JRBaseDataset.java
//
//  Created by kendra on 9/27/13.
//

#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "java/lang/CloneNotSupportedException.h"
#include "org/oss/pdfreporter/engine/JRDataset.h"
#include "org/oss/pdfreporter/engine/JRExpression.h"
#include "org/oss/pdfreporter/engine/JRField.h"
#include "org/oss/pdfreporter/engine/JRGroup.h"
#include "org/oss/pdfreporter/engine/JRParameter.h"
#include "org/oss/pdfreporter/engine/JRPropertiesHolder.h"
#include "org/oss/pdfreporter/engine/JRPropertiesMap.h"
#include "org/oss/pdfreporter/engine/JRQuery.h"
#include "org/oss/pdfreporter/engine/JRRuntimeException.h"
#include "org/oss/pdfreporter/engine/JRScriptlet.h"
#include "org/oss/pdfreporter/engine/JRSortField.h"
#include "org/oss/pdfreporter/engine/JRVariable.h"
#include "org/oss/pdfreporter/engine/base/JRBaseDataset.h"
#include "org/oss/pdfreporter/engine/base/JRBaseField.h"
#include "org/oss/pdfreporter/engine/base/JRBaseGroup.h"
#include "org/oss/pdfreporter/engine/base/JRBaseObjectFactory.h"
#include "org/oss/pdfreporter/engine/base/JRBaseParameter.h"
#include "org/oss/pdfreporter/engine/base/JRBaseQuery.h"
#include "org/oss/pdfreporter/engine/base/JRBaseScriptlet.h"
#include "org/oss/pdfreporter/engine/base/JRBaseSortField.h"
#include "org/oss/pdfreporter/engine/base/JRBaseVariable.h"
#include "org/oss/pdfreporter/engine/design/events/JRPropertyChangeSupport.h"
#include "org/oss/pdfreporter/engine/type/WhenResourceMissingTypeEnum.h"
#include "org/oss/pdfreporter/engine/util/JRCloneUtils.h"
#include "org/oss/pdfreporter/uses/java/util/UUID.h"

@implementation OrgOssPdfreporterEngineBaseJRBaseDataset

static NSString * OrgOssPdfreporterEngineBaseJRBaseDataset_PROPERTY_WHEN_RESOURCE_MISSING_TYPE_ = @"whenResourceMissingType";

@synthesize isMain = isMain_;
@synthesize uuid = uuid_;
@synthesize name = name_;
@synthesize scriptletClass = scriptletClass_;
@synthesize scriptlets = scriptlets_;
@synthesize parameters = parameters_;
@synthesize query = query_;
@synthesize fields = fields_;
@synthesize sortFields = sortFields_;
@synthesize variables = variables_;
@synthesize groups = groups_;
@synthesize resourceBundle = resourceBundle_;
@synthesize whenResourceMissingTypeValue = whenResourceMissingTypeValue_;
@synthesize propertiesMap = propertiesMap_;
@synthesize filterExpression = filterExpression_;
@synthesize eventSupport = eventSupport_;

+ (NSString *)PROPERTY_WHEN_RESOURCE_MISSING_TYPE {
  return OrgOssPdfreporterEngineBaseJRBaseDataset_PROPERTY_WHEN_RESOURCE_MISSING_TYPE_;
}

- (id)initWithBOOL:(BOOL)isMain {
  if ((self = [super init])) {
    whenResourceMissingTypeValue_ = [OrgOssPdfreporterEngineTypeWhenResourceMissingTypeEnumEnum NULL_];
    self.isMain = isMain;
    propertiesMap_ = [[OrgOssPdfreporterEngineJRPropertiesMap alloc] init];
  }
  return self;
}

- (id)initWithOrgOssPdfreporterEngineJRDataset:(id<OrgOssPdfreporterEngineJRDataset>)dataset
withOrgOssPdfreporterEngineBaseJRBaseObjectFactory:(OrgOssPdfreporterEngineBaseJRBaseObjectFactory *)factory {
  if ((self = [super init])) {
    whenResourceMissingTypeValue_ = [OrgOssPdfreporterEngineTypeWhenResourceMissingTypeEnumEnum NULL_];
    [((OrgOssPdfreporterEngineBaseJRBaseObjectFactory *) nil_chk(factory)) putWithId:dataset withId:self];
    uuid_ = [((id<OrgOssPdfreporterEngineJRDataset>) nil_chk(dataset)) getUUID];
    name_ = [((id<OrgOssPdfreporterEngineJRDataset>) nil_chk(dataset)) getName];
    scriptletClass_ = [((id<OrgOssPdfreporterEngineJRDataset>) nil_chk(dataset)) getScriptletClass];
    resourceBundle_ = [((id<OrgOssPdfreporterEngineJRDataset>) nil_chk(dataset)) getResourceBundle];
    whenResourceMissingTypeValue_ = [((id<OrgOssPdfreporterEngineJRDataset>) nil_chk(dataset)) getWhenResourceMissingTypeValue];
    self.propertiesMap = [((OrgOssPdfreporterEngineJRPropertiesMap *) nil_chk([((id<OrgOssPdfreporterEngineJRDataset>) nil_chk(dataset)) getPropertiesMap])) cloneProperties];
    query_ = [((OrgOssPdfreporterEngineBaseJRBaseObjectFactory *) nil_chk(factory)) getQueryWithOrgOssPdfreporterEngineJRQuery:[((id<OrgOssPdfreporterEngineJRDataset>) nil_chk(dataset)) getQuery]];
    isMain_ = [((id<OrgOssPdfreporterEngineJRDataset>) nil_chk(dataset)) isMainDataset];
    IOSObjectArray *jrScriptlets = [((id<OrgOssPdfreporterEngineJRDataset>) nil_chk(dataset)) getScriptlets];
    if (jrScriptlets != nil && (int) [((IOSObjectArray *) nil_chk(jrScriptlets)) count] > 0) {
      scriptlets_ = [IOSObjectArray arrayWithLength:(int) [((IOSObjectArray *) nil_chk(jrScriptlets)) count] type:[IOSClass classWithProtocol:@protocol(OrgOssPdfreporterEngineJRScriptlet)]];
      for (int i = 0; i < (int) [((IOSObjectArray *) nil_chk(scriptlets_)) count]; i++) {
        (void) [((IOSObjectArray *) nil_chk(scriptlets_)) replaceObjectAtIndex:i withObject:[((OrgOssPdfreporterEngineBaseJRBaseObjectFactory *) nil_chk(factory)) getScriptletWithOrgOssPdfreporterEngineJRScriptlet:[((IOSObjectArray *) nil_chk(jrScriptlets)) objectAtIndex:i]]];
      }
    }
    IOSObjectArray *jrParameters = [((id<OrgOssPdfreporterEngineJRDataset>) nil_chk(dataset)) getParameters];
    if (jrParameters != nil && (int) [((IOSObjectArray *) nil_chk(jrParameters)) count] > 0) {
      parameters_ = [IOSObjectArray arrayWithLength:(int) [((IOSObjectArray *) nil_chk(jrParameters)) count] type:[IOSClass classWithProtocol:@protocol(OrgOssPdfreporterEngineJRParameter)]];
      for (int i = 0; i < (int) [((IOSObjectArray *) nil_chk(parameters_)) count]; i++) {
        (void) [((IOSObjectArray *) nil_chk(parameters_)) replaceObjectAtIndex:i withObject:[((OrgOssPdfreporterEngineBaseJRBaseObjectFactory *) nil_chk(factory)) getParameterWithOrgOssPdfreporterEngineJRParameter:[((IOSObjectArray *) nil_chk(jrParameters)) objectAtIndex:i]]];
      }
    }
    IOSObjectArray *jrFields = [((id<OrgOssPdfreporterEngineJRDataset>) nil_chk(dataset)) getFields];
    if (jrFields != nil && (int) [((IOSObjectArray *) nil_chk(jrFields)) count] > 0) {
      fields_ = [IOSObjectArray arrayWithLength:(int) [((IOSObjectArray *) nil_chk(jrFields)) count] type:[IOSClass classWithProtocol:@protocol(OrgOssPdfreporterEngineJRField)]];
      for (int i = 0; i < (int) [((IOSObjectArray *) nil_chk(fields_)) count]; i++) {
        (void) [((IOSObjectArray *) nil_chk(fields_)) replaceObjectAtIndex:i withObject:[((OrgOssPdfreporterEngineBaseJRBaseObjectFactory *) nil_chk(factory)) getFieldWithOrgOssPdfreporterEngineJRField:[((IOSObjectArray *) nil_chk(jrFields)) objectAtIndex:i]]];
      }
    }
    IOSObjectArray *jrSortFields = [((id<OrgOssPdfreporterEngineJRDataset>) nil_chk(dataset)) getSortFields];
    if (jrSortFields != nil && (int) [((IOSObjectArray *) nil_chk(jrSortFields)) count] > 0) {
      sortFields_ = [IOSObjectArray arrayWithLength:(int) [((IOSObjectArray *) nil_chk(jrSortFields)) count] type:[IOSClass classWithProtocol:@protocol(OrgOssPdfreporterEngineJRSortField)]];
      for (int i = 0; i < (int) [((IOSObjectArray *) nil_chk(sortFields_)) count]; i++) {
        (void) [((IOSObjectArray *) nil_chk(sortFields_)) replaceObjectAtIndex:i withObject:[((OrgOssPdfreporterEngineBaseJRBaseObjectFactory *) nil_chk(factory)) getSortFieldWithOrgOssPdfreporterEngineJRSortField:[((IOSObjectArray *) nil_chk(jrSortFields)) objectAtIndex:i]]];
      }
    }
    IOSObjectArray *jrVariables = [((id<OrgOssPdfreporterEngineJRDataset>) nil_chk(dataset)) getVariables];
    if (jrVariables != nil && (int) [((IOSObjectArray *) nil_chk(jrVariables)) count] > 0) {
      variables_ = [IOSObjectArray arrayWithLength:(int) [((IOSObjectArray *) nil_chk(jrVariables)) count] type:[IOSClass classWithProtocol:@protocol(OrgOssPdfreporterEngineJRVariable)]];
      for (int i = 0; i < (int) [((IOSObjectArray *) nil_chk(variables_)) count]; i++) {
        (void) [((IOSObjectArray *) nil_chk(variables_)) replaceObjectAtIndex:i withObject:[((OrgOssPdfreporterEngineBaseJRBaseObjectFactory *) nil_chk(factory)) getVariableWithOrgOssPdfreporterEngineJRVariable:[((IOSObjectArray *) nil_chk(jrVariables)) objectAtIndex:i]]];
      }
    }
    IOSObjectArray *jrGroups = [((id<OrgOssPdfreporterEngineJRDataset>) nil_chk(dataset)) getGroups];
    if (jrGroups != nil && (int) [((IOSObjectArray *) nil_chk(jrGroups)) count] > 0) {
      groups_ = [IOSObjectArray arrayWithLength:(int) [((IOSObjectArray *) nil_chk(jrGroups)) count] type:[IOSClass classWithProtocol:@protocol(OrgOssPdfreporterEngineJRGroup)]];
      for (int i = 0; i < (int) [((IOSObjectArray *) nil_chk(groups_)) count]; i++) {
        (void) [((IOSObjectArray *) nil_chk(groups_)) replaceObjectAtIndex:i withObject:[((OrgOssPdfreporterEngineBaseJRBaseObjectFactory *) nil_chk(factory)) getGroupWithOrgOssPdfreporterEngineJRGroup:[((IOSObjectArray *) nil_chk(jrGroups)) objectAtIndex:i]]];
      }
    }
    filterExpression_ = [((OrgOssPdfreporterEngineBaseJRBaseObjectFactory *) nil_chk(factory)) getExpressionWithOrgOssPdfreporterEngineJRExpression:[((id<OrgOssPdfreporterEngineJRDataset>) nil_chk(dataset)) getFilterExpression]];
  }
  return self;
}

- (OrgOssPdfreporterUsesJavaUtilUUID *)getUUID {
  if (uuid_ == nil) {
    uuid_ = [OrgOssPdfreporterUsesJavaUtilUUID randomUUID];
  }
  return uuid_;
}

- (NSString *)getName {
  return name_;
}

- (NSString *)getScriptletClass {
  return scriptletClass_;
}

- (id<OrgOssPdfreporterEngineJRQuery>)getQuery {
  return query_;
}

- (IOSObjectArray *)getScriptlets {
  return scriptlets_;
}

- (IOSObjectArray *)getParameters {
  return parameters_;
}

- (IOSObjectArray *)getFields {
  return fields_;
}

- (IOSObjectArray *)getSortFields {
  return sortFields_;
}

- (IOSObjectArray *)getVariables {
  return variables_;
}

- (IOSObjectArray *)getGroups {
  return groups_;
}

- (BOOL)isMainDataset {
  return isMain_;
}

- (NSString *)getResourceBundle {
  return resourceBundle_;
}

- (OrgOssPdfreporterEngineTypeWhenResourceMissingTypeEnumEnum *)getWhenResourceMissingTypeValue {
  return whenResourceMissingTypeValue_;
}

- (void)setWhenResourceMissingTypeWithOrgOssPdfreporterEngineTypeWhenResourceMissingTypeEnumEnum:(OrgOssPdfreporterEngineTypeWhenResourceMissingTypeEnumEnum *)whenResourceMissingTypeValue {
  id old = self.whenResourceMissingTypeValue;
  self.whenResourceMissingTypeValue = whenResourceMissingTypeValue;
  [((OrgOssPdfreporterEngineDesignEventsJRPropertyChangeSupport *) nil_chk([self getEventSupport])) firePropertyChangeWithNSString:OrgOssPdfreporterEngineBaseJRBaseDataset_PROPERTY_WHEN_RESOURCE_MISSING_TYPE_ withId:old withId:self.whenResourceMissingTypeValue];
}

- (BOOL)hasProperties {
  return propertiesMap_ != nil && [((OrgOssPdfreporterEngineJRPropertiesMap *) nil_chk(propertiesMap_)) hasProperties];
}

- (OrgOssPdfreporterEngineJRPropertiesMap *)getPropertiesMap {
  return propertiesMap_;
}

- (id<OrgOssPdfreporterEngineJRPropertiesHolder>)getParentProperties {
  return nil;
}

- (id<OrgOssPdfreporterEngineJRExpression>)getFilterExpression {
  return filterExpression_;
}

- (id)clone {
  OrgOssPdfreporterEngineBaseJRBaseDataset *clone = nil;
  @try {
    clone = (OrgOssPdfreporterEngineBaseJRBaseDataset *) [super clone];
  }
  @catch (JavaLangCloneNotSupportedException *e) {
    @throw [[OrgOssPdfreporterEngineJRRuntimeException alloc] initWithJavaLangThrowable:e];
  }
  ((OrgOssPdfreporterEngineBaseJRBaseDataset *) nil_chk(clone)).query = [OrgOssPdfreporterEngineUtilJRCloneUtils nullSafeCloneWithId:query_];
  ((OrgOssPdfreporterEngineBaseJRBaseDataset *) nil_chk(clone)).filterExpression = [OrgOssPdfreporterEngineUtilJRCloneUtils nullSafeCloneWithId:filterExpression_];
  if (propertiesMap_ != nil) {
    ((OrgOssPdfreporterEngineBaseJRBaseDataset *) nil_chk(clone)).propertiesMap = (OrgOssPdfreporterEngineJRPropertiesMap *) [propertiesMap_ clone];
  }
  ((OrgOssPdfreporterEngineBaseJRBaseDataset *) nil_chk(clone)).parameters = [OrgOssPdfreporterEngineUtilJRCloneUtils cloneArrayWithOrgOssPdfreporterEngineJRCloneableArray:parameters_];
  ((OrgOssPdfreporterEngineBaseJRBaseDataset *) nil_chk(clone)).fields = [OrgOssPdfreporterEngineUtilJRCloneUtils cloneArrayWithOrgOssPdfreporterEngineJRCloneableArray:fields_];
  ((OrgOssPdfreporterEngineBaseJRBaseDataset *) nil_chk(clone)).sortFields = [OrgOssPdfreporterEngineUtilJRCloneUtils cloneArrayWithOrgOssPdfreporterEngineJRCloneableArray:sortFields_];
  ((OrgOssPdfreporterEngineBaseJRBaseDataset *) nil_chk(clone)).variables = [OrgOssPdfreporterEngineUtilJRCloneUtils cloneArrayWithOrgOssPdfreporterEngineJRCloneableArray:variables_];
  ((OrgOssPdfreporterEngineBaseJRBaseDataset *) nil_chk(clone)).groups = [OrgOssPdfreporterEngineUtilJRCloneUtils cloneArrayWithOrgOssPdfreporterEngineJRCloneableArray:groups_];
  ((OrgOssPdfreporterEngineBaseJRBaseDataset *) nil_chk(clone)).eventSupport = nil;
  ((OrgOssPdfreporterEngineBaseJRBaseDataset *) nil_chk(clone)).uuid = nil;
  return clone;
}

- (OrgOssPdfreporterEngineDesignEventsJRPropertyChangeSupport *)getEventSupport {
  @synchronized (self) {
    if (eventSupport_ == nil) {
      eventSupport_ = [[OrgOssPdfreporterEngineDesignEventsJRPropertyChangeSupport alloc] initWithId:self];
    }
  }
  return eventSupport_;
}

- (id)copyWithZone:(NSZone *)zone {
  return [self clone];
}

- (void)copyAllPropertiesTo:(id)copy {
  [super copyAllPropertiesTo:copy];
  OrgOssPdfreporterEngineBaseJRBaseDataset *typedCopy = (OrgOssPdfreporterEngineBaseJRBaseDataset *) copy;
  typedCopy.isMain = isMain_;
  typedCopy.uuid = uuid_;
  typedCopy.name = name_;
  typedCopy.scriptletClass = scriptletClass_;
  typedCopy.scriptlets = scriptlets_;
  typedCopy.parameters = parameters_;
  typedCopy.query = query_;
  typedCopy.fields = fields_;
  typedCopy.sortFields = sortFields_;
  typedCopy.variables = variables_;
  typedCopy.groups = groups_;
  typedCopy.resourceBundle = resourceBundle_;
  typedCopy.whenResourceMissingTypeValue = whenResourceMissingTypeValue_;
  typedCopy.propertiesMap = propertiesMap_;
  typedCopy.filterExpression = filterExpression_;
  typedCopy.eventSupport = eventSupport_;
}

@end
