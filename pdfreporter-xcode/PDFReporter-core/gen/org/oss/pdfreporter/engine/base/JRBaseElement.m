//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: pdfreporter-core/src/org/oss/pdfreporter/engine/base/JRBaseElement.java
//
//  Created by kendra on 9/27/13.
//

#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "java/lang/CloneNotSupportedException.h"
#include "org/oss/pdfreporter/engine/JRDefaultStyleProvider.h"
#include "org/oss/pdfreporter/engine/JRElement.h"
#include "org/oss/pdfreporter/engine/JRElementGroup.h"
#include "org/oss/pdfreporter/engine/JRExpression.h"
#include "org/oss/pdfreporter/engine/JRExpressionCollector.h"
#include "org/oss/pdfreporter/engine/JRGroup.h"
#include "org/oss/pdfreporter/engine/JRPropertiesHolder.h"
#include "org/oss/pdfreporter/engine/JRPropertiesMap.h"
#include "org/oss/pdfreporter/engine/JRPropertyExpression.h"
#include "org/oss/pdfreporter/engine/JRRuntimeException.h"
#include "org/oss/pdfreporter/engine/JRStyle.h"
#include "org/oss/pdfreporter/engine/JRVisitor.h"
#include "org/oss/pdfreporter/engine/base/JRBaseElement.h"
#include "org/oss/pdfreporter/engine/base/JRBaseGroup.h"
#include "org/oss/pdfreporter/engine/base/JRBaseObjectFactory.h"
#include "org/oss/pdfreporter/engine/base/JRBaseStyle.h"
#include "org/oss/pdfreporter/engine/design/events/JRPropertyChangeSupport.h"
#include "org/oss/pdfreporter/engine/type/ModeEnum.h"
#include "org/oss/pdfreporter/engine/type/PositionTypeEnum.h"
#include "org/oss/pdfreporter/engine/type/StretchTypeEnum.h"
#include "org/oss/pdfreporter/engine/util/JRCloneUtils.h"
#include "org/oss/pdfreporter/engine/util/JRStyleResolver.h"
#include "org/oss/pdfreporter/geometry/IColor.h"
#include "org/oss/pdfreporter/uses/java/util/UUID.h"

@implementation OrgOssPdfreporterEngineBaseJRBaseElement

static NSString * OrgOssPdfreporterEngineBaseJRBaseElement_PROPERTY_POSITION_TYPE_ = @"positionType";
static NSString * OrgOssPdfreporterEngineBaseJRBaseElement_PROPERTY_PRINT_IN_FIRST_WHOLE_BAND_ = @"isPrintInFirstWholeBand";
static NSString * OrgOssPdfreporterEngineBaseJRBaseElement_PROPERTY_PRINT_REPEATED_VALUES_ = @"isPrintRepeatedValues";
static NSString * OrgOssPdfreporterEngineBaseJRBaseElement_PROPERTY_PRINT_WHEN_DETAIL_OVERFLOWS_ = @"isPrintWhenDetailOverflows";
static NSString * OrgOssPdfreporterEngineBaseJRBaseElement_PROPERTY_REMOVE_LINE_WHEN_BLANK_ = @"isRemoveLineWhenBlank";
static NSString * OrgOssPdfreporterEngineBaseJRBaseElement_PROPERTY_STRETCH_TYPE_ = @"stretchType";
static NSString * OrgOssPdfreporterEngineBaseJRBaseElement_PROPERTY_WIDTH_ = @"width";
static NSString * OrgOssPdfreporterEngineBaseJRBaseElement_PROPERTY_X_ = @"x";

@synthesize uuid = uuid_;
@synthesize key = key_;
@synthesize positionTypeValue = positionTypeValue_;
@synthesize stretchTypeValue = stretchTypeValue_;
@synthesize isPrintRepeatedValues_ = isPrintRepeatedValues__;
@synthesize modeValue = modeValue_;
@synthesize x = x_;
@synthesize y = y_;
@synthesize width = width_;
@synthesize height = height_;
@synthesize isRemoveLineWhenBlank_ = isRemoveLineWhenBlank__;
@synthesize isPrintInFirstWholeBand_ = isPrintInFirstWholeBand__;
@synthesize isPrintWhenDetailOverflows_ = isPrintWhenDetailOverflows__;
@synthesize forecolor = forecolor_;
@synthesize backcolor = backcolor_;
@synthesize printWhenExpression = printWhenExpression_;
@synthesize printWhenGroupChanges = printWhenGroupChanges_;
@synthesize elementGroup = elementGroup_;
@synthesize defaultStyleProvider = defaultStyleProvider_;
@synthesize parentStyle = parentStyle_;
@synthesize parentStyleNameReference = parentStyleNameReference_;
@synthesize propertiesMap = propertiesMap_;
@synthesize propertyExpressions = propertyExpressions_;
@synthesize eventSupport = eventSupport_;

+ (NSString *)PROPERTY_POSITION_TYPE {
  return OrgOssPdfreporterEngineBaseJRBaseElement_PROPERTY_POSITION_TYPE_;
}

+ (NSString *)PROPERTY_PRINT_IN_FIRST_WHOLE_BAND {
  return OrgOssPdfreporterEngineBaseJRBaseElement_PROPERTY_PRINT_IN_FIRST_WHOLE_BAND_;
}

+ (NSString *)PROPERTY_PRINT_REPEATED_VALUES {
  return OrgOssPdfreporterEngineBaseJRBaseElement_PROPERTY_PRINT_REPEATED_VALUES_;
}

+ (NSString *)PROPERTY_PRINT_WHEN_DETAIL_OVERFLOWS {
  return OrgOssPdfreporterEngineBaseJRBaseElement_PROPERTY_PRINT_WHEN_DETAIL_OVERFLOWS_;
}

+ (NSString *)PROPERTY_REMOVE_LINE_WHEN_BLANK {
  return OrgOssPdfreporterEngineBaseJRBaseElement_PROPERTY_REMOVE_LINE_WHEN_BLANK_;
}

+ (NSString *)PROPERTY_STRETCH_TYPE {
  return OrgOssPdfreporterEngineBaseJRBaseElement_PROPERTY_STRETCH_TYPE_;
}

+ (NSString *)PROPERTY_WIDTH {
  return OrgOssPdfreporterEngineBaseJRBaseElement_PROPERTY_WIDTH_;
}

+ (NSString *)PROPERTY_X {
  return OrgOssPdfreporterEngineBaseJRBaseElement_PROPERTY_X_;
}

- (id)initWithOrgOssPdfreporterEngineJRDefaultStyleProvider:(id<OrgOssPdfreporterEngineJRDefaultStyleProvider>)defaultStyleProvider {
  if ((self = [super init])) {
    stretchTypeValue_ = [OrgOssPdfreporterEngineTypeStretchTypeEnumEnum NO_STRETCH];
    isPrintRepeatedValues__ = YES;
    self.defaultStyleProvider = defaultStyleProvider;
  }
  return self;
}

- (id)initWithOrgOssPdfreporterEngineJRElement:(id<OrgOssPdfreporterEngineJRElement>)element
withOrgOssPdfreporterEngineBaseJRBaseObjectFactory:(OrgOssPdfreporterEngineBaseJRBaseObjectFactory *)factory {
  if ((self = [super init])) {
    stretchTypeValue_ = [OrgOssPdfreporterEngineTypeStretchTypeEnumEnum NO_STRETCH];
    isPrintRepeatedValues__ = YES;
    [((OrgOssPdfreporterEngineBaseJRBaseObjectFactory *) nil_chk(factory)) putWithId:element withId:self];
    defaultStyleProvider_ = [((OrgOssPdfreporterEngineBaseJRBaseObjectFactory *) nil_chk(factory)) getDefaultStyleProvider];
    parentStyle_ = [((OrgOssPdfreporterEngineBaseJRBaseObjectFactory *) nil_chk(factory)) getStyleWithOrgOssPdfreporterEngineJRStyle:[((id<OrgOssPdfreporterEngineJRElement>) nil_chk(element)) getStyle]];
    parentStyleNameReference_ = [((id<OrgOssPdfreporterEngineJRElement>) nil_chk(element)) getStyleNameReference];
    uuid_ = [((id<OrgOssPdfreporterEngineJRElement>) nil_chk(element)) getUUID];
    key_ = [((id<OrgOssPdfreporterEngineJRElement>) nil_chk(element)) getKey];
    positionTypeValue_ = [((id<OrgOssPdfreporterEngineJRElement>) nil_chk(element)) getPositionTypeValue];
    stretchTypeValue_ = [((id<OrgOssPdfreporterEngineJRElement>) nil_chk(element)) getStretchTypeValue];
    isPrintRepeatedValues__ = [((id<OrgOssPdfreporterEngineJRElement>) nil_chk(element)) isPrintRepeatedValues];
    modeValue_ = [((id<OrgOssPdfreporterEngineJRElement>) nil_chk(element)) getOwnModeValue];
    x_ = [((id<OrgOssPdfreporterEngineJRElement>) nil_chk(element)) getX];
    y_ = [((id<OrgOssPdfreporterEngineJRElement>) nil_chk(element)) getY];
    width_ = [((id<OrgOssPdfreporterEngineJRElement>) nil_chk(element)) getWidth];
    height_ = [((id<OrgOssPdfreporterEngineJRElement>) nil_chk(element)) getHeight];
    isRemoveLineWhenBlank__ = [((id<OrgOssPdfreporterEngineJRElement>) nil_chk(element)) isRemoveLineWhenBlank];
    isPrintInFirstWholeBand__ = [((id<OrgOssPdfreporterEngineJRElement>) nil_chk(element)) isPrintInFirstWholeBand];
    isPrintWhenDetailOverflows__ = [((id<OrgOssPdfreporterEngineJRElement>) nil_chk(element)) isPrintWhenDetailOverflows];
    forecolor_ = [((id<OrgOssPdfreporterEngineJRElement>) nil_chk(element)) getOwnForecolor];
    backcolor_ = [((id<OrgOssPdfreporterEngineJRElement>) nil_chk(element)) getOwnBackcolor];
    printWhenExpression_ = [((OrgOssPdfreporterEngineBaseJRBaseObjectFactory *) nil_chk(factory)) getExpressionWithOrgOssPdfreporterEngineJRExpression:[((id<OrgOssPdfreporterEngineJRElement>) nil_chk(element)) getPrintWhenExpression]];
    printWhenGroupChanges_ = [((OrgOssPdfreporterEngineBaseJRBaseObjectFactory *) nil_chk(factory)) getGroupWithOrgOssPdfreporterEngineJRGroup:[((id<OrgOssPdfreporterEngineJRElement>) nil_chk(element)) getPrintWhenGroupChanges]];
    elementGroup_ = (id<OrgOssPdfreporterEngineJRElementGroup>) [((OrgOssPdfreporterEngineBaseJRBaseObjectFactory *) nil_chk(factory)) getVisitResultWithOrgOssPdfreporterEngineJRVisitable:[((id<OrgOssPdfreporterEngineJRElement>) nil_chk(element)) getElementGroup]];
    propertiesMap_ = [OrgOssPdfreporterEngineJRPropertiesMap getPropertiesCloneWithOrgOssPdfreporterEngineJRPropertiesHolder:element];
    [self copyPropertyExpressionsWithOrgOssPdfreporterEngineJRElement:element withOrgOssPdfreporterEngineBaseJRBaseObjectFactory:factory];
  }
  return self;
}

- (void)copyPropertyExpressionsWithOrgOssPdfreporterEngineJRElement:(id<OrgOssPdfreporterEngineJRElement>)element
                 withOrgOssPdfreporterEngineBaseJRBaseObjectFactory:(OrgOssPdfreporterEngineBaseJRBaseObjectFactory *)factory OBJC_METHOD_FAMILY_NONE {
  IOSObjectArray *props = [((id<OrgOssPdfreporterEngineJRElement>) nil_chk(element)) getPropertyExpressions];
  if (props != nil && (int) [((IOSObjectArray *) nil_chk(props)) count] > 0) {
    propertyExpressions_ = [IOSObjectArray arrayWithLength:(int) [((IOSObjectArray *) nil_chk(props)) count] type:[IOSClass classWithProtocol:@protocol(OrgOssPdfreporterEngineJRPropertyExpression)]];
    for (int i = 0; i < (int) [((IOSObjectArray *) nil_chk(props)) count]; i++) {
      (void) [((IOSObjectArray *) nil_chk(propertyExpressions_)) replaceObjectAtIndex:i withObject:[((OrgOssPdfreporterEngineBaseJRBaseObjectFactory *) nil_chk(factory)) getPropertyExpressionWithOrgOssPdfreporterEngineJRPropertyExpression:[((IOSObjectArray *) nil_chk(props)) objectAtIndex:i]]];
    }
  }
}

- (id<OrgOssPdfreporterEngineJRDefaultStyleProvider>)getDefaultStyleProvider {
  return defaultStyleProvider_;
}

- (id<OrgOssPdfreporterEngineJRStyle>)getBaseStyle {
  if (parentStyle_ != nil) {
    return parentStyle_;
  }
  if (defaultStyleProvider_ != nil) {
    return [defaultStyleProvider_ getDefaultStyle];
  }
  return nil;
}

- (OrgOssPdfreporterUsesJavaUtilUUID *)getUUID {
  if (uuid_ == nil) {
    uuid_ = [OrgOssPdfreporterUsesJavaUtilUUID randomUUID];
  }
  return uuid_;
}

- (NSString *)getKey {
  return key_;
}

- (OrgOssPdfreporterEngineTypePositionTypeEnumEnum *)getPositionTypeValue {
  return positionTypeValue_;
}

- (void)setPositionTypeWithOrgOssPdfreporterEngineTypePositionTypeEnumEnum:(OrgOssPdfreporterEngineTypePositionTypeEnumEnum *)positionTypeValue {
  OrgOssPdfreporterEngineTypePositionTypeEnumEnum *old = self.positionTypeValue;
  self.positionTypeValue = positionTypeValue;
  [((OrgOssPdfreporterEngineDesignEventsJRPropertyChangeSupport *) nil_chk([self getEventSupport])) firePropertyChangeWithNSString:OrgOssPdfreporterEngineBaseJRBaseElement_PROPERTY_POSITION_TYPE_ withId:old withId:self.positionTypeValue];
}

- (OrgOssPdfreporterEngineTypeStretchTypeEnumEnum *)getStretchTypeValue {
  return stretchTypeValue_;
}

- (void)setStretchTypeWithOrgOssPdfreporterEngineTypeStretchTypeEnumEnum:(OrgOssPdfreporterEngineTypeStretchTypeEnumEnum *)stretchTypeValue {
  OrgOssPdfreporterEngineTypeStretchTypeEnumEnum *old = self.stretchTypeValue;
  self.stretchTypeValue = stretchTypeValue;
  [((OrgOssPdfreporterEngineDesignEventsJRPropertyChangeSupport *) nil_chk([self getEventSupport])) firePropertyChangeWithNSString:OrgOssPdfreporterEngineBaseJRBaseElement_PROPERTY_STRETCH_TYPE_ withId:old withId:self.stretchTypeValue];
}

- (BOOL)isPrintRepeatedValues {
  return self.isPrintRepeatedValues_;
}

- (void)setPrintRepeatedValuesWithBOOL:(BOOL)isPrintRepeatedValues {
  BOOL old = self.isPrintRepeatedValues_;
  self.isPrintRepeatedValues_ = isPrintRepeatedValues;
  [((OrgOssPdfreporterEngineDesignEventsJRPropertyChangeSupport *) nil_chk([self getEventSupport])) firePropertyChangeWithNSString:OrgOssPdfreporterEngineBaseJRBaseElement_PROPERTY_PRINT_REPEATED_VALUES_ withBOOL:old withBOOL:self.isPrintRepeatedValues_];
}

- (OrgOssPdfreporterEngineTypeModeEnumEnum *)getModeValue {
  return [OrgOssPdfreporterEngineUtilJRStyleResolver getModeWithOrgOssPdfreporterEngineJRCommonElement:self withOrgOssPdfreporterEngineTypeModeEnumEnum:[OrgOssPdfreporterEngineTypeModeEnumEnum OPAQUE]];
}

- (OrgOssPdfreporterEngineTypeModeEnumEnum *)getOwnModeValue {
  return modeValue_;
}

- (void)setModeWithOrgOssPdfreporterEngineTypeModeEnumEnum:(OrgOssPdfreporterEngineTypeModeEnumEnum *)modeValue {
  id old = self.modeValue;
  self.modeValue = modeValue;
  [((OrgOssPdfreporterEngineDesignEventsJRPropertyChangeSupport *) nil_chk([self getEventSupport])) firePropertyChangeWithNSString:[OrgOssPdfreporterEngineBaseJRBaseStyle PROPERTY_MODE] withId:old withId:self.modeValue];
}

- (int)getX {
  return self.x;
}

- (void)setXWithInt:(int)x {
  int old = self.x;
  self.x = x;
  [((OrgOssPdfreporterEngineDesignEventsJRPropertyChangeSupport *) nil_chk([self getEventSupport])) firePropertyChangeWithNSString:OrgOssPdfreporterEngineBaseJRBaseElement_PROPERTY_X_ withInt:old withInt:self.x];
}

- (int)getY {
  return self.y;
}

- (int)getWidth {
  return self.width;
}

- (void)setWidthWithInt:(int)width {
  int old = self.width;
  self.width = width;
  [((OrgOssPdfreporterEngineDesignEventsJRPropertyChangeSupport *) nil_chk([self getEventSupport])) firePropertyChangeWithNSString:OrgOssPdfreporterEngineBaseJRBaseElement_PROPERTY_WIDTH_ withInt:old withInt:self.width];
}

- (int)getHeight {
  return self.height;
}

- (BOOL)isRemoveLineWhenBlank {
  return self.isRemoveLineWhenBlank_;
}

- (void)setRemoveLineWhenBlankWithBOOL:(BOOL)isRemoveLine {
  BOOL old = self.isRemoveLineWhenBlank_;
  self.isRemoveLineWhenBlank_ = isRemoveLine;
  [((OrgOssPdfreporterEngineDesignEventsJRPropertyChangeSupport *) nil_chk([self getEventSupport])) firePropertyChangeWithNSString:OrgOssPdfreporterEngineBaseJRBaseElement_PROPERTY_REMOVE_LINE_WHEN_BLANK_ withBOOL:old withBOOL:self.isRemoveLineWhenBlank_];
}

- (BOOL)isPrintInFirstWholeBand {
  return self.isPrintInFirstWholeBand_;
}

- (void)setPrintInFirstWholeBandWithBOOL:(BOOL)isPrint {
  BOOL old = self.isPrintInFirstWholeBand_;
  self.isPrintInFirstWholeBand_ = isPrint;
  [((OrgOssPdfreporterEngineDesignEventsJRPropertyChangeSupport *) nil_chk([self getEventSupport])) firePropertyChangeWithNSString:OrgOssPdfreporterEngineBaseJRBaseElement_PROPERTY_PRINT_IN_FIRST_WHOLE_BAND_ withBOOL:old withBOOL:self.isPrintInFirstWholeBand_];
}

- (BOOL)isPrintWhenDetailOverflows {
  return self.isPrintWhenDetailOverflows_;
}

- (void)setPrintWhenDetailOverflowsWithBOOL:(BOOL)isPrint {
  BOOL old = self.isPrintWhenDetailOverflows_;
  self.isPrintWhenDetailOverflows_ = isPrint;
  [((OrgOssPdfreporterEngineDesignEventsJRPropertyChangeSupport *) nil_chk([self getEventSupport])) firePropertyChangeWithNSString:OrgOssPdfreporterEngineBaseJRBaseElement_PROPERTY_PRINT_WHEN_DETAIL_OVERFLOWS_ withBOOL:old withBOOL:self.isPrintWhenDetailOverflows_];
}

- (id<OrgOssPdfreporterGeometryIColor>)getForecolor {
  return [OrgOssPdfreporterEngineUtilJRStyleResolver getForecolorWithOrgOssPdfreporterEngineJRCommonElement:self];
}

- (id<OrgOssPdfreporterGeometryIColor>)getOwnForecolor {
  return forecolor_;
}

- (void)setForecolorWithOrgOssPdfreporterGeometryIColor:(id<OrgOssPdfreporterGeometryIColor>)forecolor {
  id old = self.forecolor;
  self.forecolor = forecolor;
  [((OrgOssPdfreporterEngineDesignEventsJRPropertyChangeSupport *) nil_chk([self getEventSupport])) firePropertyChangeWithNSString:[OrgOssPdfreporterEngineBaseJRBaseStyle PROPERTY_FORECOLOR] withId:old withId:self.forecolor];
}

- (id<OrgOssPdfreporterGeometryIColor>)getBackcolor {
  return [OrgOssPdfreporterEngineUtilJRStyleResolver getBackcolorWithOrgOssPdfreporterEngineJRCommonElement:self];
}

- (id<OrgOssPdfreporterGeometryIColor>)getOwnBackcolor {
  return backcolor_;
}

- (void)setBackcolorWithOrgOssPdfreporterGeometryIColor:(id<OrgOssPdfreporterGeometryIColor>)backcolor {
  id old = self.backcolor;
  self.backcolor = backcolor;
  [((OrgOssPdfreporterEngineDesignEventsJRPropertyChangeSupport *) nil_chk([self getEventSupport])) firePropertyChangeWithNSString:[OrgOssPdfreporterEngineBaseJRBaseStyle PROPERTY_BACKCOLOR] withId:old withId:self.backcolor];
}

- (id<OrgOssPdfreporterEngineJRExpression>)getPrintWhenExpression {
  return self.printWhenExpression;
}

- (id<OrgOssPdfreporterEngineJRGroup>)getPrintWhenGroupChanges {
  return self.printWhenGroupChanges;
}

- (id<OrgOssPdfreporterEngineJRElementGroup>)getElementGroup {
  return self.elementGroup;
}

- (id<OrgOssPdfreporterEngineJRStyle>)getStyle {
  return parentStyle_;
}

- (NSString *)getStyleNameReference {
  return parentStyleNameReference_;
}

- (OrgOssPdfreporterEngineDesignEventsJRPropertyChangeSupport *)getEventSupport {
  @synchronized (self) {
    if (eventSupport_ == nil) {
      eventSupport_ = [[OrgOssPdfreporterEngineDesignEventsJRPropertyChangeSupport alloc] initWithId:self];
    }
  }
  return eventSupport_;
}

- (id)clone {
  OrgOssPdfreporterEngineBaseJRBaseElement *clone = nil;
  @try {
    clone = (OrgOssPdfreporterEngineBaseJRBaseElement *) [super clone];
  }
  @catch (JavaLangCloneNotSupportedException *e) {
    @throw [[OrgOssPdfreporterEngineJRRuntimeException alloc] initWithJavaLangThrowable:e];
  }
  ((OrgOssPdfreporterEngineBaseJRBaseElement *) nil_chk(clone)).printWhenExpression = [OrgOssPdfreporterEngineUtilJRCloneUtils nullSafeCloneWithId:printWhenExpression_];
  ((OrgOssPdfreporterEngineBaseJRBaseElement *) nil_chk(clone)).propertiesMap = [OrgOssPdfreporterEngineJRPropertiesMap getPropertiesCloneWithOrgOssPdfreporterEngineJRPropertiesHolder:self];
  ((OrgOssPdfreporterEngineBaseJRBaseElement *) nil_chk(clone)).eventSupport = nil;
  ((OrgOssPdfreporterEngineBaseJRBaseElement *) nil_chk(clone)).uuid = nil;
  return clone;
}

- (id)cloneWithOrgOssPdfreporterEngineJRElementGroup:(id<OrgOssPdfreporterEngineJRElementGroup>)parentGroup {
  OrgOssPdfreporterEngineBaseJRBaseElement *clone = (OrgOssPdfreporterEngineBaseJRBaseElement *) [self clone];
  ((OrgOssPdfreporterEngineBaseJRBaseElement *) nil_chk(clone)).elementGroup = parentGroup;
  return clone;
}

- (id<OrgOssPdfreporterEngineJRElement>)cloneWithOrgOssPdfreporterEngineJRElementGroup:(id<OrgOssPdfreporterEngineJRElementGroup>)parentGroup
                                                                               withInt:(int)y {
  OrgOssPdfreporterEngineBaseJRBaseElement *clone = (OrgOssPdfreporterEngineBaseJRBaseElement *) [self cloneWithOrgOssPdfreporterEngineJRElementGroup:parentGroup];
  ((OrgOssPdfreporterEngineBaseJRBaseElement *) nil_chk(clone)).y = y;
  return clone;
}

- (BOOL)hasProperties {
  return propertiesMap_ != nil && [((OrgOssPdfreporterEngineJRPropertiesMap *) nil_chk(propertiesMap_)) hasProperties];
}

- (OrgOssPdfreporterEngineJRPropertiesMap *)getPropertiesMap {
  if (propertiesMap_ == nil) {
    propertiesMap_ = [[OrgOssPdfreporterEngineJRPropertiesMap alloc] init];
  }
  return propertiesMap_;
}

- (id<OrgOssPdfreporterEngineJRPropertiesHolder>)getParentProperties {
  return nil;
}

- (IOSObjectArray *)getPropertyExpressions {
  return propertyExpressions_;
}

- (void)collectExpressionsWithOrgOssPdfreporterEngineJRExpressionCollector:(OrgOssPdfreporterEngineJRExpressionCollector *)param0 {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
}

- (void)visitWithOrgOssPdfreporterEngineJRVisitor:(id<OrgOssPdfreporterEngineJRVisitor>)param0 {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
}

- (id)copyWithZone:(NSZone *)zone {
  return [self clone];
}

- (void)copyAllPropertiesTo:(id)copy {
  [super copyAllPropertiesTo:copy];
  OrgOssPdfreporterEngineBaseJRBaseElement *typedCopy = (OrgOssPdfreporterEngineBaseJRBaseElement *) copy;
  typedCopy.uuid = uuid_;
  typedCopy.key = key_;
  typedCopy.positionTypeValue = positionTypeValue_;
  typedCopy.stretchTypeValue = stretchTypeValue_;
  typedCopy.isPrintRepeatedValues_ = isPrintRepeatedValues__;
  typedCopy.modeValue = modeValue_;
  typedCopy.x = x_;
  typedCopy.y = y_;
  typedCopy.width = width_;
  typedCopy.height = height_;
  typedCopy.isRemoveLineWhenBlank_ = isRemoveLineWhenBlank__;
  typedCopy.isPrintInFirstWholeBand_ = isPrintInFirstWholeBand__;
  typedCopy.isPrintWhenDetailOverflows_ = isPrintWhenDetailOverflows__;
  typedCopy.forecolor = forecolor_;
  typedCopy.backcolor = backcolor_;
  typedCopy.printWhenExpression = printWhenExpression_;
  typedCopy.printWhenGroupChanges = printWhenGroupChanges_;
  typedCopy.elementGroup = elementGroup_;
  typedCopy.defaultStyleProvider = defaultStyleProvider_;
  typedCopy.parentStyle = parentStyle_;
  typedCopy.parentStyleNameReference = parentStyleNameReference_;
  typedCopy.propertiesMap = propertiesMap_;
  typedCopy.propertyExpressions = propertyExpressions_;
  typedCopy.eventSupport = eventSupport_;
}

@end
