//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: pdfreporter-core/src/org/oss/pdfreporter/engine/base/JRBaseExpression.java
//
//  Created by kendra on 9/27/13.
//

#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "java/lang/ClassNotFoundException.h"
#include "java/lang/CloneNotSupportedException.h"
#include "java/lang/Integer.h"
#include "java/lang/StringBuffer.h"
#include "java/util/logging/Logger.h"
#include "org/oss/pdfreporter/engine/JRExpression.h"
#include "org/oss/pdfreporter/engine/JRExpressionChunk.h"
#include "org/oss/pdfreporter/engine/JRRuntimeException.h"
#include "org/oss/pdfreporter/engine/base/JRBaseExpression.h"
#include "org/oss/pdfreporter/engine/base/JRBaseExpressionChunk.h"
#include "org/oss/pdfreporter/engine/base/JRBaseObjectFactory.h"
#include "org/oss/pdfreporter/engine/util/JRClassLoader.h"
#include "org/oss/pdfreporter/engine/util/JRCloneUtils.h"
#include "org/oss/pdfreporter/uses/java/util/StringTokenizer.h"

@implementation OrgOssPdfreporterEngineBaseJRBaseExpression

static JavaUtilLoggingLogger * OrgOssPdfreporterEngineBaseJRBaseExpression_logger_;
static int OrgOssPdfreporterEngineBaseJRBaseExpression_lastId_;

@synthesize valueClassName = valueClassName_;
@synthesize valueClassRealName = valueClassRealName_;
@synthesize id_ = id__;
@synthesize valueClass = valueClass_;
@synthesize chunks = chunks_;

+ (JavaUtilLoggingLogger *)logger {
  return OrgOssPdfreporterEngineBaseJRBaseExpression_logger_;
}

+ (int)lastId {
  return OrgOssPdfreporterEngineBaseJRBaseExpression_lastId_;
}

+ (int *)lastIdRef {
  return &OrgOssPdfreporterEngineBaseJRBaseExpression_lastId_;
}

- (id)init {
  return [super init];
}

- (id)initOrgOssPdfreporterEngineBaseJRBaseExpressionWithOrgOssPdfreporterEngineJRExpression:(id<OrgOssPdfreporterEngineJRExpression>)expression
                                          withOrgOssPdfreporterEngineBaseJRBaseObjectFactory:(OrgOssPdfreporterEngineBaseJRBaseObjectFactory *)factory
                                                                         withJavaLangInteger:(JavaLangInteger *)expressionId {
  if ((self = [super init])) {
    [((OrgOssPdfreporterEngineBaseJRBaseObjectFactory *) nil_chk(factory)) putWithId:expression withId:self];
    if (expressionId == nil) {
      id__ = [((id<OrgOssPdfreporterEngineJRExpression>) nil_chk(expression)) getId];
    }
    else {
      id__ = [expressionId intValue];
    }
    [((JavaUtilLoggingLogger *) nil_chk(OrgOssPdfreporterEngineBaseJRBaseExpression_logger_)) finestWithNSString:[NSString stringWithFormat:@"Add Expression: %@, Id=%d", [((id<OrgOssPdfreporterEngineJRExpression>) nil_chk(expression)) getText], id__]];
    IOSObjectArray *jrChunks = [((id<OrgOssPdfreporterEngineJRExpression>) nil_chk(expression)) getChunks];
    if (jrChunks != nil && (int) [((IOSObjectArray *) nil_chk(jrChunks)) count] > 0) {
      chunks_ = [IOSObjectArray arrayWithLength:(int) [((IOSObjectArray *) nil_chk(jrChunks)) count] type:[IOSClass classWithProtocol:@protocol(OrgOssPdfreporterEngineJRExpressionChunk)]];
      for (int i = 0; i < (int) [((IOSObjectArray *) nil_chk(chunks_)) count]; i++) {
        (void) [((IOSObjectArray *) nil_chk(chunks_)) replaceObjectAtIndex:i withObject:[((OrgOssPdfreporterEngineBaseJRBaseObjectFactory *) nil_chk(factory)) getExpressionChunkWithOrgOssPdfreporterEngineJRExpressionChunk:[((IOSObjectArray *) nil_chk(jrChunks)) objectAtIndex:i]]];
      }
    }
  }
  return self;
}

- (id)initWithOrgOssPdfreporterEngineJRExpression:(id<OrgOssPdfreporterEngineJRExpression>)expression
withOrgOssPdfreporterEngineBaseJRBaseObjectFactory:(OrgOssPdfreporterEngineBaseJRBaseObjectFactory *)factory
                              withJavaLangInteger:(JavaLangInteger *)expressionId {
  return [self initOrgOssPdfreporterEngineBaseJRBaseExpressionWithOrgOssPdfreporterEngineJRExpression:expression withOrgOssPdfreporterEngineBaseJRBaseObjectFactory:factory withJavaLangInteger:expressionId];
}

- (id)initWithOrgOssPdfreporterEngineJRExpression:(id<OrgOssPdfreporterEngineJRExpression>)expression
withOrgOssPdfreporterEngineBaseJRBaseObjectFactory:(OrgOssPdfreporterEngineBaseJRBaseObjectFactory *)factory {
  return [self initOrgOssPdfreporterEngineBaseJRBaseExpressionWithOrgOssPdfreporterEngineJRExpression:expression withOrgOssPdfreporterEngineBaseJRBaseObjectFactory:factory withJavaLangInteger:nil];
}

+ (int)getNextId {
  @synchronized([self class]) {
    {
      return OrgOssPdfreporterEngineBaseJRBaseExpression_lastId_++;
    }
  }
}

- (void)regenerateId {
  id__ = [OrgOssPdfreporterEngineBaseJRBaseExpression getNextId];
}

- (IOSClass *)getValueClass {
  if (valueClass_ == nil) {
    NSString *className_ = [self getValueClassRealName];
    if (className_ != nil) {
      @try {
        valueClass_ = [OrgOssPdfreporterEngineUtilJRClassLoader loadClassForNameWithNSString:className_];
      }
      @catch (JavaLangClassNotFoundException *e) {
        @throw [[OrgOssPdfreporterEngineJRRuntimeException alloc] initWithJavaLangThrowable:e];
      }
    }
  }
  return valueClass_;
}

- (NSString *)getValueClassName {
  return valueClassName_;
}

- (NSString *)getValueClassRealName {
  if (valueClassRealName_ == nil) {
    valueClassRealName_ = [OrgOssPdfreporterEngineUtilJRClassLoader getClassRealNameWithNSString:valueClassName_];
  }
  return valueClassRealName_;
}

- (int)getId {
  return id__;
}

- (IOSObjectArray *)getChunks {
  return chunks_;
}

- (NSString *)getText {
  NSString *text = @"";
  chunks_ = [self getChunks];
  if (chunks_ != nil && (int) [((IOSObjectArray *) nil_chk(chunks_)) count] > 0) {
    JavaLangStringBuffer *sbuffer = [[JavaLangStringBuffer alloc] init];
    for (int i = 0; i < (int) [((IOSObjectArray *) nil_chk(chunks_)) count]; i++) {
      switch ([((id<OrgOssPdfreporterEngineJRExpressionChunk>) nil_chk([((IOSObjectArray *) nil_chk(chunks_)) objectAtIndex:i])) getType]) {
        case OrgOssPdfreporterEngineJRExpressionChunk_TYPE_PARAMETER:
        {
          (void) [((JavaLangStringBuffer *) nil_chk(sbuffer)) appendWithNSString:@"$P{"];
          (void) [((JavaLangStringBuffer *) nil_chk(sbuffer)) appendWithNSString:[((id<OrgOssPdfreporterEngineJRExpressionChunk>) nil_chk([((IOSObjectArray *) nil_chk(chunks_)) objectAtIndex:i])) getText]];
          (void) [((JavaLangStringBuffer *) nil_chk(sbuffer)) appendWithNSString:@"}"];
          break;
        }
        case OrgOssPdfreporterEngineJRExpressionChunk_TYPE_FIELD:
        {
          (void) [((JavaLangStringBuffer *) nil_chk(sbuffer)) appendWithNSString:@"$F{"];
          (void) [((JavaLangStringBuffer *) nil_chk(sbuffer)) appendWithNSString:[((id<OrgOssPdfreporterEngineJRExpressionChunk>) nil_chk([((IOSObjectArray *) nil_chk(chunks_)) objectAtIndex:i])) getText]];
          (void) [((JavaLangStringBuffer *) nil_chk(sbuffer)) appendWithNSString:@"}"];
          break;
        }
        case OrgOssPdfreporterEngineJRExpressionChunk_TYPE_VARIABLE:
        {
          (void) [((JavaLangStringBuffer *) nil_chk(sbuffer)) appendWithNSString:@"$V{"];
          (void) [((JavaLangStringBuffer *) nil_chk(sbuffer)) appendWithNSString:[((id<OrgOssPdfreporterEngineJRExpressionChunk>) nil_chk([((IOSObjectArray *) nil_chk(chunks_)) objectAtIndex:i])) getText]];
          (void) [((JavaLangStringBuffer *) nil_chk(sbuffer)) appendWithNSString:@"}"];
          break;
        }
        case OrgOssPdfreporterEngineJRExpressionChunk_TYPE_RESOURCE:
        {
          (void) [((JavaLangStringBuffer *) nil_chk(sbuffer)) appendWithNSString:@"$R{"];
          (void) [((JavaLangStringBuffer *) nil_chk(sbuffer)) appendWithNSString:[((id<OrgOssPdfreporterEngineJRExpressionChunk>) nil_chk([((IOSObjectArray *) nil_chk(chunks_)) objectAtIndex:i])) getText]];
          (void) [((JavaLangStringBuffer *) nil_chk(sbuffer)) appendWithNSString:@"}"];
          break;
        }
        case OrgOssPdfreporterEngineJRExpressionChunk_TYPE_TEXT:
        default:
        {
          NSString *textChunk = [((id<OrgOssPdfreporterEngineJRExpressionChunk>) nil_chk([((IOSObjectArray *) nil_chk(chunks_)) objectAtIndex:i])) getText];
          NSString *escapedText = [self escapeTextChunkWithNSString:textChunk];
          (void) [((JavaLangStringBuffer *) nil_chk(sbuffer)) appendWithNSString:escapedText];
          break;
        }
      }
    }
    text = [((JavaLangStringBuffer *) nil_chk(sbuffer)) description];
  }
  return text;
}

- (NSString *)escapeTextChunkWithNSString:(NSString *)text {
  if (text == nil || [((NSString *) nil_chk(text)) indexOf:'$'] < 0) {
    return text;
  }
  JavaLangStringBuffer *sb = [[JavaLangStringBuffer alloc] initWithInt:[((NSString *) nil_chk(text)) length] + 4];
  OrgOssPdfreporterUsesJavaUtilStringTokenizer *tkzer = [[OrgOssPdfreporterUsesJavaUtilStringTokenizer alloc] initWithNSString:text withNSString:@"$" withBOOL:YES];
  BOOL wasDelim = NO;
  while ([((OrgOssPdfreporterUsesJavaUtilStringTokenizer *) nil_chk(tkzer)) hasMoreElements]) {
    NSString *token = [((OrgOssPdfreporterUsesJavaUtilStringTokenizer *) nil_chk(tkzer)) nextToken];
    if (wasDelim && ([((NSString *) nil_chk(token)) hasPrefix:@"P{"] || [((NSString *) nil_chk(token)) hasPrefix:@"F{"] || [((NSString *) nil_chk(token)) hasPrefix:@"V{"] || [((NSString *) nil_chk(token)) hasPrefix:@"R{"]) && [((NSString *) nil_chk(token)) indexOf:'}'] > 0) {
      (void) [((JavaLangStringBuffer *) nil_chk(sb)) appendWithUnichar:'$'];
    }
    (void) [((JavaLangStringBuffer *) nil_chk(sb)) appendWithNSString:token];
    wasDelim = [((NSString *) nil_chk(token)) isEqual:@"$"];
  }
  return [((JavaLangStringBuffer *) nil_chk(sb)) description];
}

- (id)clone {
  OrgOssPdfreporterEngineBaseJRBaseExpression *clone = nil;
  @try {
    clone = (OrgOssPdfreporterEngineBaseJRBaseExpression *) [super clone];
  }
  @catch (JavaLangCloneNotSupportedException *e) {
    @throw [[OrgOssPdfreporterEngineJRRuntimeException alloc] initWithJavaLangThrowable:e];
  }
  ((OrgOssPdfreporterEngineBaseJRBaseExpression *) nil_chk(clone)).chunks = [OrgOssPdfreporterEngineUtilJRCloneUtils cloneArrayWithOrgOssPdfreporterEngineJRCloneableArray:chunks_];
  return clone;
}

+ (void)initialize {
  if (self == [OrgOssPdfreporterEngineBaseJRBaseExpression class]) {
    OrgOssPdfreporterEngineBaseJRBaseExpression_logger_ = [JavaUtilLoggingLogger getLoggerWithNSString:[[IOSClass classWithClass:[OrgOssPdfreporterEngineBaseJRBaseExpression class]] getName]];
  }
}

- (id)copyWithZone:(NSZone *)zone {
  return [self clone];
}

- (void)copyAllPropertiesTo:(id)copy {
  [super copyAllPropertiesTo:copy];
  OrgOssPdfreporterEngineBaseJRBaseExpression *typedCopy = (OrgOssPdfreporterEngineBaseJRBaseExpression *) copy;
  typedCopy.valueClassName = valueClassName_;
  typedCopy.valueClassRealName = valueClassRealName_;
  typedCopy.id_ = id__;
  typedCopy.valueClass = valueClass_;
  typedCopy.chunks = chunks_;
}

@end
