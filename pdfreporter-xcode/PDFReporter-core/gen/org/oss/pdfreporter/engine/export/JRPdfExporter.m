//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: pdfreporter-core/src/org/oss/pdfreporter/engine/export/JRPdfExporter.java
//
//  Created by kendra on 9/27/13.
//

#include "IOSByteArray.h"
#include "IOSClass.h"
#include "IOSIntArray.h"
#include "java/io/File.h"
#include "java/io/IOException.h"
#include "java/lang/Boolean.h"
#include "java/lang/Character.h"
#include "java/lang/Exception.h"
#include "java/lang/Float.h"
#include "java/lang/Integer.h"
#include "java/lang/Math.h"
#include "java/lang/Thread.h"
#include "java/util/Collection.h"
#include "java/util/Iterator.h"
#include "java/util/List.h"
#include "java/util/Map.h"
#include "java/util/logging/Level.h"
#include "java/util/logging/Logger.h"
#include "org/oss/pdfreporter/engine/DefaultJasperReportsContext.h"
#include "org/oss/pdfreporter/engine/JRAbstractExporter.h"
#include "org/oss/pdfreporter/engine/JRException.h"
#include "org/oss/pdfreporter/engine/JRExporterParameter.h"
#include "org/oss/pdfreporter/engine/JRFont.h"
#include "org/oss/pdfreporter/engine/JRGenericElementType.h"
#include "org/oss/pdfreporter/engine/JRGenericPrintElement.h"
#include "org/oss/pdfreporter/engine/JRLineBox.h"
#include "org/oss/pdfreporter/engine/JRPen.h"
#include "org/oss/pdfreporter/engine/JRPrintElement.h"
#include "org/oss/pdfreporter/engine/JRPrintEllipse.h"
#include "org/oss/pdfreporter/engine/JRPrintFrame.h"
#include "org/oss/pdfreporter/engine/JRPrintImage.h"
#include "org/oss/pdfreporter/engine/JRPrintLine.h"
#include "org/oss/pdfreporter/engine/JRPrintPage.h"
#include "org/oss/pdfreporter/engine/JRPrintRectangle.h"
#include "org/oss/pdfreporter/engine/JRPrintText.h"
#include "org/oss/pdfreporter/engine/JRPropertiesMap.h"
#include "org/oss/pdfreporter/engine/JRPropertiesUtil.h"
#include "org/oss/pdfreporter/engine/JasperPrint.h"
#include "org/oss/pdfreporter/engine/JasperReportsContext.h"
#include "org/oss/pdfreporter/engine/Renderable.h"
#include "org/oss/pdfreporter/engine/base/JRBaseFont.h"
#include "org/oss/pdfreporter/engine/base/JRBoxPen.h"
#include "org/oss/pdfreporter/engine/export/AbstractPdfTextRenderer.h"
#include "org/oss/pdfreporter/engine/export/ExporterFilter.h"
#include "org/oss/pdfreporter/engine/export/GenericElementHandler.h"
#include "org/oss/pdfreporter/engine/export/GenericElementHandlerEnviroment.h"
#include "org/oss/pdfreporter/engine/export/GenericElementPdfHandler.h"
#include "org/oss/pdfreporter/engine/export/JRExportProgressMonitor.h"
#include "org/oss/pdfreporter/engine/export/JRPdfExporter.h"
#include "org/oss/pdfreporter/engine/export/JRPdfExporterContext.h"
#include "org/oss/pdfreporter/engine/export/JRPdfExporterParameter.h"
#include "org/oss/pdfreporter/engine/export/PdfTextRenderer.h"
#include "org/oss/pdfreporter/engine/export/SimplePdfTextRenderer.h"
#include "org/oss/pdfreporter/engine/export/legacy/BorderOffset.h"
#include "org/oss/pdfreporter/engine/type/HorizontalAlignEnum.h"
#include "org/oss/pdfreporter/engine/type/LineDirectionEnum.h"
#include "org/oss/pdfreporter/engine/type/LineStyleEnum.h"
#include "org/oss/pdfreporter/engine/type/ModeEnum.h"
#include "org/oss/pdfreporter/engine/type/OrientationEnum.h"
#include "org/oss/pdfreporter/engine/type/RenderableTypeEnum.h"
#include "org/oss/pdfreporter/engine/type/RotationEnum.h"
#include "org/oss/pdfreporter/engine/type/ScaleImageEnum.h"
#include "org/oss/pdfreporter/engine/type/VerticalAlignEnum.h"
#include "org/oss/pdfreporter/engine/util/JRPdfaIccProfileNotFoundException.h"
#include "org/oss/pdfreporter/engine/util/JRStyledText.h"
#include "org/oss/pdfreporter/font/IFont.h"
#include "org/oss/pdfreporter/font/IFontManager.h"
#include "org/oss/pdfreporter/font/factory/IFontFactory.h"
#include "org/oss/pdfreporter/font/text/TextAttribute.h"
#include "org/oss/pdfreporter/geometry/IAffineTransformMatrix.h"
#include "org/oss/pdfreporter/geometry/IColor.h"
#include "org/oss/pdfreporter/geometry/IDimension.h"
#include "org/oss/pdfreporter/geometry/IRectangle.h"
#include "org/oss/pdfreporter/geometry/factory/IGeometryFactory.h"
#include "org/oss/pdfreporter/image/IImage.h"
#include "org/oss/pdfreporter/pdf/DocumentException.h"
#include "org/oss/pdfreporter/pdf/IDocument.h"
#include "org/oss/pdfreporter/pdf/IEncryption.h"
#include "org/oss/pdfreporter/pdf/IPage.h"
#include "org/oss/pdfreporter/pdf/ParagraphRenderer.h"
#include "org/oss/pdfreporter/pdf/factory/IPdfFactory.h"
#include "org/oss/pdfreporter/registry/ApiRegistry.h"
#include "org/oss/pdfreporter/text/HorizontalAlignment.h"
#include "org/oss/pdfreporter/text/IPositionedLine.h"
#include "org/oss/pdfreporter/text/Paragraph.h"
#include "org/oss/pdfreporter/text/ParagraphText.h"
#include "org/oss/pdfreporter/text/PositionedLined.h"
#include "org/oss/pdfreporter/uses/java/awt/text/AttributedString.h"
#include "org/oss/pdfreporter/uses/java/awt/text/IAttributedCharacterIterator.h"

@implementation OrgOssPdfreporterEngineExportJRPdfExporter

static JavaUtilLoggingLogger * OrgOssPdfreporterEngineExportJRPdfExporter_logger_;
static NSString * OrgOssPdfreporterEngineExportJRPdfExporter_PDF_EXPORTER_PROPERTIES_PREFIX_ = @"net.sf.jasperreports.export.pdf.";
static NSString * OrgOssPdfreporterEngineExportJRPdfExporter_PDF_FONT_FILES_PREFIX_ = @"net.sf.jasperreports.export.pdf.font.";
static NSString * OrgOssPdfreporterEngineExportJRPdfExporter_PDF_FONT_DIRS_PREFIX_ = @"net.sf.jasperreports.export.pdf.fontdir.";
static NSString * OrgOssPdfreporterEngineExportJRPdfExporter_PDF_EXPORTER_KEY_ = @"net.sf.jasperreports.pdf";
static NSString * OrgOssPdfreporterEngineExportJRPdfExporter_EMPTY_BOOKMARK_TITLE_ = @"";
static NSString * OrgOssPdfreporterEngineExportJRPdfExporter_JR_PAGE_ANCHOR_PREFIX_ = @"JR_PAGE_ANCHOR_";
static BOOL OrgOssPdfreporterEngineExportJRPdfExporter_fontsRegistered_;

@synthesize document = document_;
@synthesize pdfPage = pdfPage_;
@synthesize progressMonitor = progressMonitor_;
@synthesize reportIndex = reportIndex_;
@synthesize forceSvgShapes = forceSvgShapes_;
@synthesize isCreatingBatchModeBookmarks = isCreatingBatchModeBookmarks_;
@synthesize isCompressed = isCompressed_;
@synthesize isEncrypted = isEncrypted_;
@synthesize is128BitKey = is128BitKey_;
@synthesize userPassword = userPassword_;
@synthesize ownerPassword = ownerPassword_;
@synthesize permissions = permissions_;
@synthesize pdfVersion = pdfVersion_;
@synthesize pdfJavaScript = pdfJavaScript_;
@synthesize printScaling = printScaling_;
@synthesize collapseMissingBookmarkLevels = collapseMissingBookmarkLevels_;
@synthesize pdfFontMap = pdfFontMap_;
@synthesize exporterContext = exporterContext_;

+ (JavaUtilLoggingLogger *)logger {
  return OrgOssPdfreporterEngineExportJRPdfExporter_logger_;
}

+ (NSString *)PDF_EXPORTER_PROPERTIES_PREFIX {
  return OrgOssPdfreporterEngineExportJRPdfExporter_PDF_EXPORTER_PROPERTIES_PREFIX_;
}

+ (NSString *)PDF_FONT_FILES_PREFIX {
  return OrgOssPdfreporterEngineExportJRPdfExporter_PDF_FONT_FILES_PREFIX_;
}

+ (NSString *)PDF_FONT_DIRS_PREFIX {
  return OrgOssPdfreporterEngineExportJRPdfExporter_PDF_FONT_DIRS_PREFIX_;
}

+ (NSString *)PDF_EXPORTER_KEY {
  return OrgOssPdfreporterEngineExportJRPdfExporter_PDF_EXPORTER_KEY_;
}

+ (NSString *)EMPTY_BOOKMARK_TITLE {
  return OrgOssPdfreporterEngineExportJRPdfExporter_EMPTY_BOOKMARK_TITLE_;
}

+ (NSString *)JR_PAGE_ANCHOR_PREFIX {
  return OrgOssPdfreporterEngineExportJRPdfExporter_JR_PAGE_ANCHOR_PREFIX_;
}

+ (BOOL)fontsRegistered {
  return OrgOssPdfreporterEngineExportJRPdfExporter_fontsRegistered_;
}

+ (BOOL *)fontsRegisteredRef {
  return &OrgOssPdfreporterEngineExportJRPdfExporter_fontsRegistered_;
}

- (id)init {
  return [self initOrgOssPdfreporterEngineExportJRPdfExporterWithOrgOssPdfreporterEngineJasperReportsContext:[OrgOssPdfreporterEngineDefaultJasperReportsContext getInstance]];
}

- (id)initOrgOssPdfreporterEngineExportJRPdfExporterWithOrgOssPdfreporterEngineJasperReportsContext:(id<OrgOssPdfreporterEngineJasperReportsContext>)jasperReportsContext {
  if ((self = [super initWithOrgOssPdfreporterEngineJasperReportsContext:jasperReportsContext])) {
    exporterContext_ = [[OrgOssPdfreporterEngineExportJRPdfExporter_ExporterContext alloc] initWithOrgOssPdfreporterEngineExportJRPdfExporter:self];
  }
  return self;
}

- (id)initWithOrgOssPdfreporterEngineJasperReportsContext:(id<OrgOssPdfreporterEngineJasperReportsContext>)jasperReportsContext {
  return [self initOrgOssPdfreporterEngineExportJRPdfExporterWithOrgOssPdfreporterEngineJasperReportsContext:jasperReportsContext];
}

- (void)exportReport {
  [OrgOssPdfreporterEngineExportJRPdfExporter registerFonts];
  progressMonitor_ = (id<OrgOssPdfreporterEngineExportJRExportProgressMonitor>) [((id<JavaUtilMap>) nil_chk(parameters_)) getWithId:[OrgOssPdfreporterEngineJRExporterParameter PROGRESS_MONITOR]];
  [self setOffset];
  @try {
    [self setExportContext];
    [self setInput];
    if (![((id<JavaUtilMap>) nil_chk(parameters_)) containsKeyWithId:[OrgOssPdfreporterEngineJRExporterParameter FILTER]]) {
      filter_ = [self createFilterWithNSString:OrgOssPdfreporterEngineExportJRPdfExporter_PDF_EXPORTER_PROPERTIES_PREFIX_];
    }
    if (!isModeBatch_) {
      [self setPageRange];
    }
    isCreatingBatchModeBookmarks_ = [self getBooleanParameterWithOrgOssPdfreporterEngineJRExporterParameter:[OrgOssPdfreporterEngineExportJRPdfExporterParameter IS_CREATING_BATCH_MODE_BOOKMARKS] withNSString:[OrgOssPdfreporterEngineExportJRPdfExporterParameter PROPERTY_CREATE_BATCH_MODE_BOOKMARKS] withBOOL:NO];
    forceSvgShapes_ = [self getBooleanParameterWithOrgOssPdfreporterEngineJRExporterParameter:[OrgOssPdfreporterEngineExportJRPdfExporterParameter FORCE_SVG_SHAPES] withNSString:[OrgOssPdfreporterEngineExportJRPdfExporterParameter PROPERTY_FORCE_SVG_SHAPES] withBOOL:NO];
    isCompressed_ = [self getBooleanParameterWithOrgOssPdfreporterEngineJRExporterParameter:[OrgOssPdfreporterEngineExportJRPdfExporterParameter IS_COMPRESSED] withNSString:[OrgOssPdfreporterEngineExportJRPdfExporterParameter PROPERTY_COMPRESSED] withBOOL:NO];
    isEncrypted_ = [self getBooleanParameterWithOrgOssPdfreporterEngineJRExporterParameter:[OrgOssPdfreporterEngineExportJRPdfExporterParameter IS_ENCRYPTED] withNSString:[OrgOssPdfreporterEngineExportJRPdfExporterParameter PROPERTY_ENCRYPTED] withBOOL:NO];
    is128BitKey_ = [self getBooleanParameterWithOrgOssPdfreporterEngineJRExporterParameter:[OrgOssPdfreporterEngineExportJRPdfExporterParameter IS_128_BIT_KEY] withNSString:[OrgOssPdfreporterEngineExportJRPdfExporterParameter PROPERTY_128_BIT_KEY] withBOOL:NO];
    userPassword_ = [self getStringParameterWithOrgOssPdfreporterEngineJRExporterParameter:[OrgOssPdfreporterEngineExportJRPdfExporterParameter USER_PASSWORD] withNSString:[OrgOssPdfreporterEngineExportJRPdfExporterParameter PROPERTY_USER_PASSWORD]];
    ownerPassword_ = [self getStringParameterWithOrgOssPdfreporterEngineJRExporterParameter:[OrgOssPdfreporterEngineExportJRPdfExporterParameter OWNER_PASSWORD] withNSString:[OrgOssPdfreporterEngineExportJRPdfExporterParameter PROPERTY_OWNER_PASSWORD]];
    JavaLangInteger *permissionsParameter = (JavaLangInteger *) [((id<JavaUtilMap>) nil_chk(parameters_)) getWithId:[OrgOssPdfreporterEngineExportJRPdfExporterParameter PERMISSIONS]];
    if (permissionsParameter != nil) {
      permissions_ = [permissionsParameter intValue];
    }
    pdfVersion_ = [self getCharacterParameterWithOrgOssPdfreporterEngineJRExporterParameter:[OrgOssPdfreporterEngineExportJRPdfExporterParameter PDF_VERSION] withNSString:[OrgOssPdfreporterEngineExportJRPdfExporterParameter PROPERTY_PDF_VERSION]];
    [self setFontMap];
    [self setSplitCharacter];
    [self setHyperlinkProducerFactory];
    pdfJavaScript_ = [self getStringParameterWithOrgOssPdfreporterEngineJRExporterParameter:[OrgOssPdfreporterEngineExportJRPdfExporterParameter PDF_JAVASCRIPT] withNSString:[OrgOssPdfreporterEngineExportJRPdfExporterParameter PROPERTY_PDF_JAVASCRIPT]];
    printScaling_ = [self getStringParameterWithOrgOssPdfreporterEngineJRExporterParameter:[OrgOssPdfreporterEngineExportJRPdfExporterParameter PRINT_SCALING] withNSString:[OrgOssPdfreporterEngineExportJRPdfExporterParameter PROPERTY_PRINT_SCALING]];
    collapseMissingBookmarkLevels_ = [((OrgOssPdfreporterEngineJRPropertiesUtil *) nil_chk([OrgOssPdfreporterEngineJRPropertiesUtil getInstanceWithOrgOssPdfreporterEngineJasperReportsContext:jasperReportsContext_])) getBooleanPropertyWithOrgOssPdfreporterEngineJRPropertiesHolder:jasperPrint_ withNSString:[OrgOssPdfreporterEngineExportJRPdfExporterParameter PROPERTY_COLLAPSE_MISSING_BOOKMARK_LEVELS] withBOOL:NO];
    NSString *fileName = (NSString *) [((id<JavaUtilMap>) nil_chk(parameters_)) getWithId:[OrgOssPdfreporterEngineJRExporterParameter OUTPUT_FILE_NAME]];
    if (fileName == nil) {
      JavaIoFile *destFile = (JavaIoFile *) [((id<JavaUtilMap>) nil_chk(parameters_)) getWithId:[OrgOssPdfreporterEngineJRExporterParameter OUTPUT_FILE]];
      if (destFile == nil) {
        @throw [[OrgOssPdfreporterEngineJRException alloc] initWithNSString:@"Only export to file by file or filename is supported."];
      }
      fileName = [((JavaIoFile *) nil_chk(destFile)) getAbsolutePath];
    }
    [self exportToFileWithNSString:fileName];
  }
  @finally {
    [self resetExportContext];
  }
}

- (void)setFontMap {
  pdfFontMap_ = (id<JavaUtilMap>) [((id<JavaUtilMap>) nil_chk(parameters_)) getWithId:[OrgOssPdfreporterEngineJRExporterParameter FONT_MAP]];
}

- (void)setSplitCharacter {
  BOOL useFillSplitCharacter;
  JavaLangBoolean *useFillSplitCharacterParam = (JavaLangBoolean *) [((id<JavaUtilMap>) nil_chk(parameters_)) getWithId:[OrgOssPdfreporterEngineExportJRPdfExporterParameter FORCE_LINEBREAK_POLICY]];
  if (useFillSplitCharacterParam == nil) {
    useFillSplitCharacter = [((OrgOssPdfreporterEngineJRPropertiesUtil *) nil_chk([OrgOssPdfreporterEngineJRPropertiesUtil getInstanceWithOrgOssPdfreporterEngineJasperReportsContext:jasperReportsContext_])) getBooleanPropertyWithOrgOssPdfreporterEngineJRPropertiesMap:[((OrgOssPdfreporterEngineJasperPrint *) nil_chk(jasperPrint_)) getPropertiesMap] withNSString:[OrgOssPdfreporterEngineExportJRPdfExporterParameter PROPERTY_FORCE_LINEBREAK_POLICY] withBOOL:NO];
  }
  else {
    useFillSplitCharacter = [useFillSplitCharacterParam booleanValue];
  }
}

- (void)exportToFileWithNSString:(NSString *)fileName {
  BOOL sizePageToContent = [((OrgOssPdfreporterEngineJRPropertiesUtil *) nil_chk([OrgOssPdfreporterEngineJRPropertiesUtil getInstanceWithOrgOssPdfreporterEngineJasperReportsContext:jasperReportsContext_])) getBooleanPropertyWithOrgOssPdfreporterEngineJRPropertiesHolder:jasperPrint_ withNSString:[OrgOssPdfreporterEngineExportJRPdfExporterParameter PROPERTY_SIZE_PAGE_TO_CONTENT] withBOOL:NO];
  BOOL closeDocuments = YES;
  @try {
    document_ = [((id<OrgOssPdfreporterPdfFactoryIPdfFactory>) nil_chk([OrgOssPdfreporterRegistryApiRegistry getPdfFactory])) newDocumentWithNSString:fileName];
    if (pdfVersion_ != nil) {
      [((id<OrgOssPdfreporterPdfIDocument>) nil_chk(document_)) setPdfVersionWithUnichar:[pdfVersion_ charValue]];
    }
    [((id<OrgOssPdfreporterPdfIDocument>) nil_chk(document_)) setCompressionWithBOOL:isCompressed_];
    if (isEncrypted_) {
      [((id<OrgOssPdfreporterPdfIDocument>) nil_chk(document_)) setEncryptionWithOrgOssPdfreporterPdfIEncryption_KeyLengthEnum:is128BitKey_ ? [OrgOssPdfreporterPdfIEncryption_KeyLengthEnum ENCRYPTION_128] : [OrgOssPdfreporterPdfIEncryption_KeyLengthEnum ENCRYPTION_40] withNSString:userPassword_ withNSString:ownerPassword_ withInt:permissions_];
    }
    if (printScaling_ != nil) {
    }
    NSString *title = (NSString *) [((id<JavaUtilMap>) nil_chk(parameters_)) getWithId:[OrgOssPdfreporterEngineExportJRPdfExporterParameter METADATA_TITLE]];
    if (title != nil) {
      [((id<OrgOssPdfreporterPdfIDocument>) nil_chk(document_)) setTitleWithNSString:title];
    }
    NSString *author = (NSString *) [((id<JavaUtilMap>) nil_chk(parameters_)) getWithId:[OrgOssPdfreporterEngineExportJRPdfExporterParameter METADATA_AUTHOR]];
    if (author != nil) {
      [((id<OrgOssPdfreporterPdfIDocument>) nil_chk(document_)) setAuthorWithNSString:author];
    }
    NSString *subject = (NSString *) [((id<JavaUtilMap>) nil_chk(parameters_)) getWithId:[OrgOssPdfreporterEngineExportJRPdfExporterParameter METADATA_SUBJECT]];
    if (subject != nil) {
      [((id<OrgOssPdfreporterPdfIDocument>) nil_chk(document_)) setSubjectWithNSString:subject];
    }
    NSString *keywords = (NSString *) [((id<JavaUtilMap>) nil_chk(parameters_)) getWithId:[OrgOssPdfreporterEngineExportJRPdfExporterParameter METADATA_KEYWORDS]];
    if (keywords != nil) {
      [((id<OrgOssPdfreporterPdfIDocument>) nil_chk(document_)) setKeywordsWithNSString:keywords];
    }
    NSString *creator = (NSString *) [((id<JavaUtilMap>) nil_chk(parameters_)) getWithId:[OrgOssPdfreporterEngineExportJRPdfExporterParameter METADATA_CREATOR]];
    if (creator != nil) {
      [((id<OrgOssPdfreporterPdfIDocument>) nil_chk(document_)) setCreatorWithNSString:creator];
    }
    else {
      [((id<OrgOssPdfreporterPdfIDocument>) nil_chk(document_)) setCreatorWithNSString:[NSString stringWithFormat:@"JasperReports (%@)", [((OrgOssPdfreporterEngineJasperPrint *) nil_chk(jasperPrint_)) getName]]];
    }
    NSString *pdfaConformance = [self getStringParameterWithOrgOssPdfreporterEngineJRExporterParameter:[OrgOssPdfreporterEngineExportJRPdfExporterParameter PDFA_CONFORMANCE] withNSString:[OrgOssPdfreporterEngineExportJRPdfExporterParameter PROPERTY_PDFA_CONFORMANCE]];
    BOOL gotPdfa = NO;
    if (pdfaConformance != nil && ![((NSString *) nil_chk([OrgOssPdfreporterEngineExportJRPdfExporterParameter PDFA_CONFORMANCE_NONE])) equalsIgnoreCase:pdfaConformance]) {
      if ([((NSString *) nil_chk([OrgOssPdfreporterEngineExportJRPdfExporterParameter PDFA_CONFORMANCE_1A])) equalsIgnoreCase:pdfaConformance]) {
        [((id<OrgOssPdfreporterPdfIDocument>) nil_chk(document_)) setPdfConformanceWithOrgOssPdfreporterPdfIDocument_ConformanceLevelEnum:[OrgOssPdfreporterPdfIDocument_ConformanceLevelEnum PDF_1A]];
        gotPdfa = YES;
      }
      else if ([((NSString *) nil_chk([OrgOssPdfreporterEngineExportJRPdfExporterParameter PDFA_CONFORMANCE_1B])) equalsIgnoreCase:pdfaConformance]) {
        [((id<OrgOssPdfreporterPdfIDocument>) nil_chk(document_)) setPdfConformanceWithOrgOssPdfreporterPdfIDocument_ConformanceLevelEnum:[OrgOssPdfreporterPdfIDocument_ConformanceLevelEnum PDF_1B]];
        gotPdfa = YES;
      }
    }
    if (gotPdfa) {
    }
    [((id<OrgOssPdfreporterPdfIDocument>) nil_chk(document_)) open];
    if (gotPdfa) {
      NSString *iccProfilePath = [self getStringParameterWithOrgOssPdfreporterEngineJRExporterParameter:[OrgOssPdfreporterEngineExportJRPdfExporterParameter PDFA_ICC_PROFILE_PATH] withNSString:[OrgOssPdfreporterEngineExportJRPdfExporterParameter PROPERTY_PDFA_ICC_PROFILE_PATH]];
      if (iccProfilePath != nil) {
      }
      else {
        @throw [[OrgOssPdfreporterEngineUtilJRPdfaIccProfileNotFoundException alloc] init];
      }
    }
    if (pdfJavaScript_ != nil) {
    }
    for (reportIndex_ = 0; reportIndex_ < [((id<JavaUtilList>) nil_chk(jasperPrintList_)) size]; reportIndex_++) {
      [self setJasperPrintWithOrgOssPdfreporterEngineJasperPrint:[((id<JavaUtilList>) nil_chk(jasperPrintList_)) getWithInt:reportIndex_]];
      [OrgOssPdfreporterEngineExportLegacyBorderOffset setLegacyWithBOOL:[((OrgOssPdfreporterEngineJRPropertiesUtil *) nil_chk([OrgOssPdfreporterEngineJRPropertiesUtil getInstanceWithOrgOssPdfreporterEngineJasperReportsContext:jasperReportsContext_])) getBooleanPropertyWithOrgOssPdfreporterEngineJRPropertiesHolder:jasperPrint_ withNSString:[OrgOssPdfreporterEngineExportLegacyBorderOffset PROPERTY_LEGACY_BORDER_OFFSET] withBOOL:NO]];
      id<JavaUtilList> pages = [((OrgOssPdfreporterEngineJasperPrint *) nil_chk(jasperPrint_)) getPages];
      if (pages != nil && [((id<JavaUtilList>) nil_chk(pages)) size] > 0) {
        if (isModeBatch_) {
          @throw [[OrgOssPdfreporterEngineJRException alloc] initWithNSString:@"Batchmode is not supported."];
        }
        for (int pageIndex = startPageIndex_; pageIndex <= endPageIndex_; pageIndex++) {
          if ([JavaLangThread interrupted]) {
            @throw [[OrgOssPdfreporterEngineJRException alloc] initWithNSString:@"Current thread interrupted."];
          }
          id<OrgOssPdfreporterEngineJRPrintPage> page = [((id<JavaUtilList>) nil_chk(pages)) getWithInt:pageIndex];
          if (sizePageToContent) {
            [self newPageWithOrgOssPdfreporterEngineJRPrintPage:page];
          }
          else {
            [self newPageWithOrgOssPdfreporterEngineJRPrintPage:nil];
          }
          [((id<OrgOssPdfreporterPdfIPage>) nil_chk(pdfPage_)) setLineCapWithOrgOssPdfreporterPdfIPage_LineCapEnum:[OrgOssPdfreporterPdfIPage_LineCapEnum PROJECTING_SCUARE_END]];
          [self exportPageWithOrgOssPdfreporterEngineJRPrintPage:page];
        }
      }
    }
    closeDocuments = NO;
    [((id<OrgOssPdfreporterPdfIDocument>) nil_chk(document_)) close];
  }
  @catch (OrgOssPdfreporterPdfDocumentException *e) {
    @throw [[OrgOssPdfreporterEngineJRException alloc] initWithNSString:[NSString stringWithFormat:@"PDF Document error : %@", [((OrgOssPdfreporterEngineJasperPrint *) nil_chk(jasperPrint_)) getName]] withJavaLangThrowable:e];
  }
  @catch (JavaIoIOException *e) {
    @throw [[OrgOssPdfreporterEngineJRException alloc] initWithNSString:[NSString stringWithFormat:@"Error generating PDF report : %@", [((OrgOssPdfreporterEngineJasperPrint *) nil_chk(jasperPrint_)) getName]] withJavaLangThrowable:e];
  }
  @finally {
    if (closeDocuments) {
      @try {
        [((id<OrgOssPdfreporterPdfIDocument>) nil_chk(document_)) close];
      }
      @catch (JavaLangException *e) {
      }
      @try {
      }
      @catch (JavaLangException *e) {
      }
    }
  }
}

- (void)writePageAnchorWithInt:(int)pageIndex {
}

- (void)newPageWithOrgOssPdfreporterEngineJRPrintPage:(id<OrgOssPdfreporterEngineJRPrintPage>)page OBJC_METHOD_FAMILY_NONE {
  int pageWidth = [((OrgOssPdfreporterEngineJasperPrint *) nil_chk(jasperPrint_)) getPageWidth];
  int pageHeight = [((OrgOssPdfreporterEngineJasperPrint *) nil_chk(jasperPrint_)) getPageHeight];
  if (page != nil) {
    id<JavaUtilCollection> elements = [page getElements];
    {
      id<JavaUtilIterator> iter__ = [((id<JavaUtilCollection>) nil_chk(elements)) iterator];
      while ([((id<JavaUtilIterator>) nil_chk(iter__)) hasNext]) {
        id<OrgOssPdfreporterEngineJRPrintElement> element = [((id<JavaUtilIterator>) nil_chk(iter__)) next];
        int elementRight = [((id<OrgOssPdfreporterEngineJRPrintElement>) nil_chk(element)) getX] + [((id<OrgOssPdfreporterEngineJRPrintElement>) nil_chk(element)) getWidth];
        int elementBottom = [((id<OrgOssPdfreporterEngineJRPrintElement>) nil_chk(element)) getY] + [((id<OrgOssPdfreporterEngineJRPrintElement>) nil_chk(element)) getHeight];
        pageWidth = pageWidth < elementRight ? elementRight : pageWidth;
        pageHeight = pageHeight < elementBottom ? elementBottom : pageHeight;
      }
    }
    pageWidth += [((JavaLangInteger *) nil_chk([((OrgOssPdfreporterEngineJasperPrint *) nil_chk(jasperPrint_)) getRightMargin])) intValue];
    pageHeight += [((JavaLangInteger *) nil_chk([((OrgOssPdfreporterEngineJasperPrint *) nil_chk(jasperPrint_)) getBottomMargin])) intValue];
  }
  switch ([[((OrgOssPdfreporterEngineJasperPrint *) nil_chk(jasperPrint_)) getOrientationValue] ordinal]) {
    case OrgOssPdfreporterEngineTypeOrientationEnum_LANDSCAPE:
    pdfPage_ = [((id<OrgOssPdfreporterPdfIDocument>) nil_chk(document_)) newPageWithOrgOssPdfreporterPdfIDocument_PageOrientationEnum:[OrgOssPdfreporterPdfIDocument_PageOrientationEnum LANDSCAPE] withInt:pageHeight withInt:pageWidth];
    break;
    default:
    pdfPage_ = [((id<OrgOssPdfreporterPdfIDocument>) nil_chk(document_)) newPageWithOrgOssPdfreporterPdfIDocument_PageOrientationEnum:[OrgOssPdfreporterPdfIDocument_PageOrientationEnum PORTRAIT] withInt:pageWidth withInt:pageHeight];
    break;
  }
}

- (void)exportPageWithOrgOssPdfreporterEngineJRPrintPage:(id<OrgOssPdfreporterEngineJRPrintPage>)page {
  id<JavaUtilCollection> elements = [((id<OrgOssPdfreporterEngineJRPrintPage>) nil_chk(page)) getElements];
  [self exportElementsWithJavaUtilCollection:elements];
  if (progressMonitor_ != nil) {
    [progressMonitor_ afterPageExport];
  }
}

- (void)exportElementsWithJavaUtilCollection:(id<JavaUtilCollection>)elements {
  if (elements != nil && [((id<JavaUtilCollection>) nil_chk(elements)) size] > 0) {
    for (id<JavaUtilIterator> it = [((id<JavaUtilCollection>) nil_chk(elements)) iterator]; [((id<JavaUtilIterator>) nil_chk(it)) hasNext]; ) {
      id<OrgOssPdfreporterEngineJRPrintElement> element = [((id<JavaUtilIterator>) nil_chk(it)) next];
      if (filter_ == nil || [((id<OrgOssPdfreporterEngineExportExporterFilter>) nil_chk(filter_)) isToExportWithOrgOssPdfreporterEngineJRPrintElement:element]) {
        if ([(id) element conformsToProtocol: @protocol(OrgOssPdfreporterEngineJRPrintLine)]) {
          [self exportLineWithOrgOssPdfreporterEngineJRPrintLine:(id<OrgOssPdfreporterEngineJRPrintLine>) element];
        }
        else if ([(id) element conformsToProtocol: @protocol(OrgOssPdfreporterEngineJRPrintRectangle)]) {
          [self exportRectangleWithOrgOssPdfreporterEngineJRPrintRectangle:(id<OrgOssPdfreporterEngineJRPrintRectangle>) element];
        }
        else if ([(id) element conformsToProtocol: @protocol(OrgOssPdfreporterEngineJRPrintEllipse)]) {
          [self exportEllipseWithOrgOssPdfreporterEngineJRPrintEllipse:(id<OrgOssPdfreporterEngineJRPrintEllipse>) element];
        }
        else if ([(id) element conformsToProtocol: @protocol(OrgOssPdfreporterEngineJRPrintImage)]) {
          [self exportImageWithOrgOssPdfreporterEngineJRPrintImage:(id<OrgOssPdfreporterEngineJRPrintImage>) element];
        }
        else if ([(id) element conformsToProtocol: @protocol(OrgOssPdfreporterEngineJRPrintText)]) {
          [self exportTextWithOrgOssPdfreporterEngineJRPrintText:(id<OrgOssPdfreporterEngineJRPrintText>) element];
        }
        else if ([(id) element conformsToProtocol: @protocol(OrgOssPdfreporterEngineJRPrintFrame)]) {
          [self exportFrameWithOrgOssPdfreporterEngineJRPrintFrame:(id<OrgOssPdfreporterEngineJRPrintFrame>) element];
        }
        else if ([(id) element conformsToProtocol: @protocol(OrgOssPdfreporterEngineJRGenericPrintElement)]) {
          [self exportGenericElementWithOrgOssPdfreporterEngineJRGenericPrintElement:(id<OrgOssPdfreporterEngineJRGenericPrintElement>) element];
        }
      }
    }
  }
}

- (void)exportLineWithOrgOssPdfreporterEngineJRPrintLine:(id<OrgOssPdfreporterEngineJRPrintLine>)line {
  float lineWidth = [((JavaLangFloat *) nil_chk([((id<OrgOssPdfreporterEngineJRPen>) nil_chk([((id<OrgOssPdfreporterEngineJRPrintLine>) nil_chk(line)) getLinePen])) getLineWidth])) floatValue];
  if (lineWidth > 0.0f) {
    [OrgOssPdfreporterEngineExportJRPdfExporter preparePenWithOrgOssPdfreporterPdfIPage:pdfPage_ withOrgOssPdfreporterEngineJRPen:[((id<OrgOssPdfreporterEngineJRPrintLine>) nil_chk(line)) getLinePen] withOrgOssPdfreporterPdfIPage_LineCapEnum:[OrgOssPdfreporterPdfIPage_LineCapEnum BUTT_END]];
    if ([((id<OrgOssPdfreporterEngineJRPrintLine>) nil_chk(line)) getWidth] == 1) {
      if ([((id<OrgOssPdfreporterEngineJRPrintLine>) nil_chk(line)) getHeight] != 1) {
        if ([((id<OrgOssPdfreporterEngineJRPen>) nil_chk([((id<OrgOssPdfreporterEngineJRPrintLine>) nil_chk(line)) getLinePen])) getLineStyleValue] == [OrgOssPdfreporterEngineTypeLineStyleEnumEnum DOUBLE]) {
          [((id<OrgOssPdfreporterPdfIPage>) nil_chk(pdfPage_)) moveToWithFloat:[((id<OrgOssPdfreporterEngineJRPrintLine>) nil_chk(line)) getX] + [self getOffsetX] + 0.5f - lineWidth / 3 withFloat:[((OrgOssPdfreporterEngineJasperPrint *) nil_chk(jasperPrint_)) getPageHeight] - [((id<OrgOssPdfreporterEngineJRPrintLine>) nil_chk(line)) getY] - [self getOffsetY]];
          [((id<OrgOssPdfreporterPdfIPage>) nil_chk(pdfPage_)) lineToWithFloat:[((id<OrgOssPdfreporterEngineJRPrintLine>) nil_chk(line)) getX] + [self getOffsetX] + 0.5f - lineWidth / 3 withFloat:[((OrgOssPdfreporterEngineJasperPrint *) nil_chk(jasperPrint_)) getPageHeight] - [((id<OrgOssPdfreporterEngineJRPrintLine>) nil_chk(line)) getY] - [self getOffsetY] - [((id<OrgOssPdfreporterEngineJRPrintLine>) nil_chk(line)) getHeight]];
          [((id<OrgOssPdfreporterPdfIPage>) nil_chk(pdfPage_)) stroke];
          [((id<OrgOssPdfreporterPdfIPage>) nil_chk(pdfPage_)) moveToWithFloat:[((id<OrgOssPdfreporterEngineJRPrintLine>) nil_chk(line)) getX] + [self getOffsetX] + 0.5f + lineWidth / 3 withFloat:[((OrgOssPdfreporterEngineJasperPrint *) nil_chk(jasperPrint_)) getPageHeight] - [((id<OrgOssPdfreporterEngineJRPrintLine>) nil_chk(line)) getY] - [self getOffsetY]];
          [((id<OrgOssPdfreporterPdfIPage>) nil_chk(pdfPage_)) lineToWithFloat:[((id<OrgOssPdfreporterEngineJRPrintLine>) nil_chk(line)) getX] + [self getOffsetX] + 0.5f + lineWidth / 3 withFloat:[((OrgOssPdfreporterEngineJasperPrint *) nil_chk(jasperPrint_)) getPageHeight] - [((id<OrgOssPdfreporterEngineJRPrintLine>) nil_chk(line)) getY] - [self getOffsetY] - [((id<OrgOssPdfreporterEngineJRPrintLine>) nil_chk(line)) getHeight]];
        }
        else {
          [((id<OrgOssPdfreporterPdfIPage>) nil_chk(pdfPage_)) moveToWithFloat:[((id<OrgOssPdfreporterEngineJRPrintLine>) nil_chk(line)) getX] + [self getOffsetX] + 0.5f withFloat:[((OrgOssPdfreporterEngineJasperPrint *) nil_chk(jasperPrint_)) getPageHeight] - [((id<OrgOssPdfreporterEngineJRPrintLine>) nil_chk(line)) getY] - [self getOffsetY]];
          [((id<OrgOssPdfreporterPdfIPage>) nil_chk(pdfPage_)) lineToWithFloat:[((id<OrgOssPdfreporterEngineJRPrintLine>) nil_chk(line)) getX] + [self getOffsetX] + 0.5f withFloat:[((OrgOssPdfreporterEngineJasperPrint *) nil_chk(jasperPrint_)) getPageHeight] - [((id<OrgOssPdfreporterEngineJRPrintLine>) nil_chk(line)) getY] - [self getOffsetY] - [((id<OrgOssPdfreporterEngineJRPrintLine>) nil_chk(line)) getHeight]];
        }
      }
    }
    else {
      if ([((id<OrgOssPdfreporterEngineJRPrintLine>) nil_chk(line)) getHeight] == 1) {
        if ([((id<OrgOssPdfreporterEngineJRPen>) nil_chk([((id<OrgOssPdfreporterEngineJRPrintLine>) nil_chk(line)) getLinePen])) getLineStyleValue] == [OrgOssPdfreporterEngineTypeLineStyleEnumEnum DOUBLE]) {
          [((id<OrgOssPdfreporterPdfIPage>) nil_chk(pdfPage_)) moveToWithFloat:[((id<OrgOssPdfreporterEngineJRPrintLine>) nil_chk(line)) getX] + [self getOffsetX] withFloat:[((OrgOssPdfreporterEngineJasperPrint *) nil_chk(jasperPrint_)) getPageHeight] - [((id<OrgOssPdfreporterEngineJRPrintLine>) nil_chk(line)) getY] - [self getOffsetY] - 0.5f + lineWidth / 3];
          [((id<OrgOssPdfreporterPdfIPage>) nil_chk(pdfPage_)) lineToWithFloat:[((id<OrgOssPdfreporterEngineJRPrintLine>) nil_chk(line)) getX] + [self getOffsetX] + [((id<OrgOssPdfreporterEngineJRPrintLine>) nil_chk(line)) getWidth] withFloat:[((OrgOssPdfreporterEngineJasperPrint *) nil_chk(jasperPrint_)) getPageHeight] - [((id<OrgOssPdfreporterEngineJRPrintLine>) nil_chk(line)) getY] - [self getOffsetY] - 0.5f + lineWidth / 3];
          [((id<OrgOssPdfreporterPdfIPage>) nil_chk(pdfPage_)) stroke];
          [((id<OrgOssPdfreporterPdfIPage>) nil_chk(pdfPage_)) moveToWithFloat:[((id<OrgOssPdfreporterEngineJRPrintLine>) nil_chk(line)) getX] + [self getOffsetX] withFloat:[((OrgOssPdfreporterEngineJasperPrint *) nil_chk(jasperPrint_)) getPageHeight] - [((id<OrgOssPdfreporterEngineJRPrintLine>) nil_chk(line)) getY] - [self getOffsetY] - 0.5f - lineWidth / 3];
          [((id<OrgOssPdfreporterPdfIPage>) nil_chk(pdfPage_)) lineToWithFloat:[((id<OrgOssPdfreporterEngineJRPrintLine>) nil_chk(line)) getX] + [self getOffsetX] + [((id<OrgOssPdfreporterEngineJRPrintLine>) nil_chk(line)) getWidth] withFloat:[((OrgOssPdfreporterEngineJasperPrint *) nil_chk(jasperPrint_)) getPageHeight] - [((id<OrgOssPdfreporterEngineJRPrintLine>) nil_chk(line)) getY] - [self getOffsetY] - 0.5f - lineWidth / 3];
        }
        else {
          [((id<OrgOssPdfreporterPdfIPage>) nil_chk(pdfPage_)) moveToWithFloat:[((id<OrgOssPdfreporterEngineJRPrintLine>) nil_chk(line)) getX] + [self getOffsetX] withFloat:[((OrgOssPdfreporterEngineJasperPrint *) nil_chk(jasperPrint_)) getPageHeight] - [((id<OrgOssPdfreporterEngineJRPrintLine>) nil_chk(line)) getY] - [self getOffsetY] - 0.5f];
          [((id<OrgOssPdfreporterPdfIPage>) nil_chk(pdfPage_)) lineToWithFloat:[((id<OrgOssPdfreporterEngineJRPrintLine>) nil_chk(line)) getX] + [self getOffsetX] + [((id<OrgOssPdfreporterEngineJRPrintLine>) nil_chk(line)) getWidth] withFloat:[((OrgOssPdfreporterEngineJasperPrint *) nil_chk(jasperPrint_)) getPageHeight] - [((id<OrgOssPdfreporterEngineJRPrintLine>) nil_chk(line)) getY] - [self getOffsetY] - 0.5f];
        }
      }
      else {
        if ([((id<OrgOssPdfreporterEngineJRPrintLine>) nil_chk(line)) getDirectionValue] == [OrgOssPdfreporterEngineTypeLineDirectionEnumEnum TOP_DOWN]) {
          if ([((id<OrgOssPdfreporterEngineJRPen>) nil_chk([((id<OrgOssPdfreporterEngineJRPrintLine>) nil_chk(line)) getLinePen])) getLineStyleValue] == [OrgOssPdfreporterEngineTypeLineStyleEnumEnum DOUBLE]) {
            double xtrans = lineWidth / (3 * [JavaLangMath sqrtWithDouble:1 + [JavaLangMath powWithDouble:[((id<OrgOssPdfreporterEngineJRPrintLine>) nil_chk(line)) getWidth] withDouble:2] / [JavaLangMath powWithDouble:[((id<OrgOssPdfreporterEngineJRPrintLine>) nil_chk(line)) getHeight] withDouble:2]]);
            double ytrans = lineWidth / (3 * [JavaLangMath sqrtWithDouble:1 + [JavaLangMath powWithDouble:[((id<OrgOssPdfreporterEngineJRPrintLine>) nil_chk(line)) getHeight] withDouble:2] / [JavaLangMath powWithDouble:[((id<OrgOssPdfreporterEngineJRPrintLine>) nil_chk(line)) getWidth] withDouble:2]]);
            [((id<OrgOssPdfreporterPdfIPage>) nil_chk(pdfPage_)) moveToWithFloat:[((id<OrgOssPdfreporterEngineJRPrintLine>) nil_chk(line)) getX] + [self getOffsetX] + (float) xtrans withFloat:[((OrgOssPdfreporterEngineJasperPrint *) nil_chk(jasperPrint_)) getPageHeight] - [((id<OrgOssPdfreporterEngineJRPrintLine>) nil_chk(line)) getY] - [self getOffsetY] + (float) ytrans];
            [((id<OrgOssPdfreporterPdfIPage>) nil_chk(pdfPage_)) lineToWithFloat:[((id<OrgOssPdfreporterEngineJRPrintLine>) nil_chk(line)) getX] + [self getOffsetX] + [((id<OrgOssPdfreporterEngineJRPrintLine>) nil_chk(line)) getWidth] + (float) xtrans withFloat:[((OrgOssPdfreporterEngineJasperPrint *) nil_chk(jasperPrint_)) getPageHeight] - [((id<OrgOssPdfreporterEngineJRPrintLine>) nil_chk(line)) getY] - [self getOffsetY] - [((id<OrgOssPdfreporterEngineJRPrintLine>) nil_chk(line)) getHeight] + (float) ytrans];
            [((id<OrgOssPdfreporterPdfIPage>) nil_chk(pdfPage_)) stroke];
            [((id<OrgOssPdfreporterPdfIPage>) nil_chk(pdfPage_)) moveToWithFloat:[((id<OrgOssPdfreporterEngineJRPrintLine>) nil_chk(line)) getX] + [self getOffsetX] - (float) xtrans withFloat:[((OrgOssPdfreporterEngineJasperPrint *) nil_chk(jasperPrint_)) getPageHeight] - [((id<OrgOssPdfreporterEngineJRPrintLine>) nil_chk(line)) getY] - [self getOffsetY] - (float) ytrans];
            [((id<OrgOssPdfreporterPdfIPage>) nil_chk(pdfPage_)) lineToWithFloat:[((id<OrgOssPdfreporterEngineJRPrintLine>) nil_chk(line)) getX] + [self getOffsetX] + [((id<OrgOssPdfreporterEngineJRPrintLine>) nil_chk(line)) getWidth] - (float) xtrans withFloat:[((OrgOssPdfreporterEngineJasperPrint *) nil_chk(jasperPrint_)) getPageHeight] - [((id<OrgOssPdfreporterEngineJRPrintLine>) nil_chk(line)) getY] - [self getOffsetY] - [((id<OrgOssPdfreporterEngineJRPrintLine>) nil_chk(line)) getHeight] - (float) ytrans];
          }
          else {
            [((id<OrgOssPdfreporterPdfIPage>) nil_chk(pdfPage_)) moveToWithFloat:[((id<OrgOssPdfreporterEngineJRPrintLine>) nil_chk(line)) getX] + [self getOffsetX] withFloat:[((OrgOssPdfreporterEngineJasperPrint *) nil_chk(jasperPrint_)) getPageHeight] - [((id<OrgOssPdfreporterEngineJRPrintLine>) nil_chk(line)) getY] - [self getOffsetY]];
            [((id<OrgOssPdfreporterPdfIPage>) nil_chk(pdfPage_)) lineToWithFloat:[((id<OrgOssPdfreporterEngineJRPrintLine>) nil_chk(line)) getX] + [self getOffsetX] + [((id<OrgOssPdfreporterEngineJRPrintLine>) nil_chk(line)) getWidth] withFloat:[((OrgOssPdfreporterEngineJasperPrint *) nil_chk(jasperPrint_)) getPageHeight] - [((id<OrgOssPdfreporterEngineJRPrintLine>) nil_chk(line)) getY] - [self getOffsetY] - [((id<OrgOssPdfreporterEngineJRPrintLine>) nil_chk(line)) getHeight]];
          }
        }
        else {
          if ([((id<OrgOssPdfreporterEngineJRPen>) nil_chk([((id<OrgOssPdfreporterEngineJRPrintLine>) nil_chk(line)) getLinePen])) getLineStyleValue] == [OrgOssPdfreporterEngineTypeLineStyleEnumEnum DOUBLE]) {
            double xtrans = lineWidth / (3 * [JavaLangMath sqrtWithDouble:1 + [JavaLangMath powWithDouble:[((id<OrgOssPdfreporterEngineJRPrintLine>) nil_chk(line)) getWidth] withDouble:2] / [JavaLangMath powWithDouble:[((id<OrgOssPdfreporterEngineJRPrintLine>) nil_chk(line)) getHeight] withDouble:2]]);
            double ytrans = lineWidth / (3 * [JavaLangMath sqrtWithDouble:1 + [JavaLangMath powWithDouble:[((id<OrgOssPdfreporterEngineJRPrintLine>) nil_chk(line)) getHeight] withDouble:2] / [JavaLangMath powWithDouble:[((id<OrgOssPdfreporterEngineJRPrintLine>) nil_chk(line)) getWidth] withDouble:2]]);
            [((id<OrgOssPdfreporterPdfIPage>) nil_chk(pdfPage_)) moveToWithFloat:[((id<OrgOssPdfreporterEngineJRPrintLine>) nil_chk(line)) getX] + [self getOffsetX] + (float) xtrans withFloat:[((OrgOssPdfreporterEngineJasperPrint *) nil_chk(jasperPrint_)) getPageHeight] - [((id<OrgOssPdfreporterEngineJRPrintLine>) nil_chk(line)) getY] - [self getOffsetY] - [((id<OrgOssPdfreporterEngineJRPrintLine>) nil_chk(line)) getHeight] - (float) ytrans];
            [((id<OrgOssPdfreporterPdfIPage>) nil_chk(pdfPage_)) lineToWithFloat:[((id<OrgOssPdfreporterEngineJRPrintLine>) nil_chk(line)) getX] + [self getOffsetX] + [((id<OrgOssPdfreporterEngineJRPrintLine>) nil_chk(line)) getWidth] + (float) xtrans withFloat:[((OrgOssPdfreporterEngineJasperPrint *) nil_chk(jasperPrint_)) getPageHeight] - [((id<OrgOssPdfreporterEngineJRPrintLine>) nil_chk(line)) getY] - [self getOffsetY] - (float) ytrans];
            [((id<OrgOssPdfreporterPdfIPage>) nil_chk(pdfPage_)) stroke];
            [((id<OrgOssPdfreporterPdfIPage>) nil_chk(pdfPage_)) moveToWithFloat:[((id<OrgOssPdfreporterEngineJRPrintLine>) nil_chk(line)) getX] + [self getOffsetX] - (float) xtrans withFloat:[((OrgOssPdfreporterEngineJasperPrint *) nil_chk(jasperPrint_)) getPageHeight] - [((id<OrgOssPdfreporterEngineJRPrintLine>) nil_chk(line)) getY] - [self getOffsetY] - [((id<OrgOssPdfreporterEngineJRPrintLine>) nil_chk(line)) getHeight] + (float) ytrans];
            [((id<OrgOssPdfreporterPdfIPage>) nil_chk(pdfPage_)) lineToWithFloat:[((id<OrgOssPdfreporterEngineJRPrintLine>) nil_chk(line)) getX] + [self getOffsetX] + [((id<OrgOssPdfreporterEngineJRPrintLine>) nil_chk(line)) getWidth] - (float) xtrans withFloat:[((OrgOssPdfreporterEngineJasperPrint *) nil_chk(jasperPrint_)) getPageHeight] - [((id<OrgOssPdfreporterEngineJRPrintLine>) nil_chk(line)) getY] - [self getOffsetY] + (float) ytrans];
          }
          else {
            [((id<OrgOssPdfreporterPdfIPage>) nil_chk(pdfPage_)) moveToWithFloat:[((id<OrgOssPdfreporterEngineJRPrintLine>) nil_chk(line)) getX] + [self getOffsetX] withFloat:[((OrgOssPdfreporterEngineJasperPrint *) nil_chk(jasperPrint_)) getPageHeight] - [((id<OrgOssPdfreporterEngineJRPrintLine>) nil_chk(line)) getY] - [self getOffsetY] - [((id<OrgOssPdfreporterEngineJRPrintLine>) nil_chk(line)) getHeight]];
            [((id<OrgOssPdfreporterPdfIPage>) nil_chk(pdfPage_)) lineToWithFloat:[((id<OrgOssPdfreporterEngineJRPrintLine>) nil_chk(line)) getX] + [self getOffsetX] + [((id<OrgOssPdfreporterEngineJRPrintLine>) nil_chk(line)) getWidth] withFloat:[((OrgOssPdfreporterEngineJasperPrint *) nil_chk(jasperPrint_)) getPageHeight] - [((id<OrgOssPdfreporterEngineJRPrintLine>) nil_chk(line)) getY] - [self getOffsetY]];
          }
        }
      }
    }
    [((id<OrgOssPdfreporterPdfIPage>) nil_chk(pdfPage_)) stroke];
    [((id<OrgOssPdfreporterPdfIPage>) nil_chk(pdfPage_)) setLineDashWithIntArray:nil withInt:0];
    [((id<OrgOssPdfreporterPdfIPage>) nil_chk(pdfPage_)) setLineCapWithOrgOssPdfreporterPdfIPage_LineCapEnum:[OrgOssPdfreporterPdfIPage_LineCapEnum PROJECTING_SCUARE_END]];
  }
}

- (void)exportRectangleWithOrgOssPdfreporterEngineJRPrintRectangle:(id<OrgOssPdfreporterEngineJRPrintRectangle>)rectangle {
  [((id<OrgOssPdfreporterPdfIPage>) nil_chk(pdfPage_)) setRGBColorFillWithOrgOssPdfreporterGeometryIColor:[((id<OrgOssPdfreporterEngineJRPrintRectangle>) nil_chk(rectangle)) getBackcolor]];
  [OrgOssPdfreporterEngineExportJRPdfExporter preparePenWithOrgOssPdfreporterPdfIPage:pdfPage_ withOrgOssPdfreporterEngineJRPen:[((id<OrgOssPdfreporterEngineJRPrintRectangle>) nil_chk(rectangle)) getLinePen] withOrgOssPdfreporterPdfIPage_LineCapEnum:[OrgOssPdfreporterPdfIPage_LineCapEnum PROJECTING_SCUARE_END]];
  float lineWidth = [((JavaLangFloat *) nil_chk([((id<OrgOssPdfreporterEngineJRPen>) nil_chk([((id<OrgOssPdfreporterEngineJRPrintRectangle>) nil_chk(rectangle)) getLinePen])) getLineWidth])) floatValue];
  float lineOffset = [OrgOssPdfreporterEngineExportLegacyBorderOffset getOffsetWithOrgOssPdfreporterEngineJRPen:[((id<OrgOssPdfreporterEngineJRPrintRectangle>) nil_chk(rectangle)) getLinePen]];
  if ([((id<OrgOssPdfreporterEngineJRPrintRectangle>) nil_chk(rectangle)) getModeValue] == [OrgOssPdfreporterEngineTypeModeEnumEnum OPAQUE]) {
    [((id<OrgOssPdfreporterPdfIPage>) nil_chk(pdfPage_)) roundRectangleWithFloat:[((id<OrgOssPdfreporterEngineJRPrintRectangle>) nil_chk(rectangle)) getX] + [self getOffsetX] withFloat:[((OrgOssPdfreporterEngineJasperPrint *) nil_chk(jasperPrint_)) getPageHeight] - [((id<OrgOssPdfreporterEngineJRPrintRectangle>) nil_chk(rectangle)) getY] - [self getOffsetY] - [((id<OrgOssPdfreporterEngineJRPrintRectangle>) nil_chk(rectangle)) getHeight] withFloat:[((id<OrgOssPdfreporterEngineJRPrintRectangle>) nil_chk(rectangle)) getWidth] withFloat:[((id<OrgOssPdfreporterEngineJRPrintRectangle>) nil_chk(rectangle)) getHeight] withInt:[((id<OrgOssPdfreporterEngineJRPrintRectangle>) nil_chk(rectangle)) getRadius]];
    [((id<OrgOssPdfreporterPdfIPage>) nil_chk(pdfPage_)) fill];
  }
  if (lineWidth > 0.0f) {
    if ([((id<OrgOssPdfreporterEngineJRPen>) nil_chk([((id<OrgOssPdfreporterEngineJRPrintRectangle>) nil_chk(rectangle)) getLinePen])) getLineStyleValue] == [OrgOssPdfreporterEngineTypeLineStyleEnumEnum DOUBLE]) {
      [OrgOssPdfreporterEngineExportJRPdfExporter drawRoundRectWithOrgOssPdfreporterPdfIPage:pdfPage_ withFloat:[((id<OrgOssPdfreporterEngineJRPrintRectangle>) nil_chk(rectangle)) getX] + [self getOffsetX] - lineWidth / 3 withFloat:[((OrgOssPdfreporterEngineJasperPrint *) nil_chk(jasperPrint_)) getPageHeight] - [((id<OrgOssPdfreporterEngineJRPrintRectangle>) nil_chk(rectangle)) getY] - [self getOffsetY] - [((id<OrgOssPdfreporterEngineJRPrintRectangle>) nil_chk(rectangle)) getHeight] - lineWidth / 3 withFloat:[((id<OrgOssPdfreporterEngineJRPrintRectangle>) nil_chk(rectangle)) getWidth] + 2 * lineWidth / 3 withFloat:[((id<OrgOssPdfreporterEngineJRPrintRectangle>) nil_chk(rectangle)) getHeight] + 2 * lineWidth / 3 withInt:[((id<OrgOssPdfreporterEngineJRPrintRectangle>) nil_chk(rectangle)) getRadius]];
      [((id<OrgOssPdfreporterPdfIPage>) nil_chk(pdfPage_)) stroke];
      [OrgOssPdfreporterEngineExportJRPdfExporter drawRoundRectWithOrgOssPdfreporterPdfIPage:pdfPage_ withFloat:[((id<OrgOssPdfreporterEngineJRPrintRectangle>) nil_chk(rectangle)) getX] + [self getOffsetX] + lineWidth / 3 withFloat:[((OrgOssPdfreporterEngineJasperPrint *) nil_chk(jasperPrint_)) getPageHeight] - [((id<OrgOssPdfreporterEngineJRPrintRectangle>) nil_chk(rectangle)) getY] - [self getOffsetY] - [((id<OrgOssPdfreporterEngineJRPrintRectangle>) nil_chk(rectangle)) getHeight] + lineWidth / 3 withFloat:[((id<OrgOssPdfreporterEngineJRPrintRectangle>) nil_chk(rectangle)) getWidth] - 2 * lineWidth / 3 withFloat:[((id<OrgOssPdfreporterEngineJRPrintRectangle>) nil_chk(rectangle)) getHeight] - 2 * lineWidth / 3 withInt:[((id<OrgOssPdfreporterEngineJRPrintRectangle>) nil_chk(rectangle)) getRadius]];
      [((id<OrgOssPdfreporterPdfIPage>) nil_chk(pdfPage_)) stroke];
    }
    else {
      [OrgOssPdfreporterEngineExportJRPdfExporter drawRoundRectWithOrgOssPdfreporterPdfIPage:pdfPage_ withFloat:[((id<OrgOssPdfreporterEngineJRPrintRectangle>) nil_chk(rectangle)) getX] + [self getOffsetX] + lineOffset withFloat:[((OrgOssPdfreporterEngineJasperPrint *) nil_chk(jasperPrint_)) getPageHeight] - [((id<OrgOssPdfreporterEngineJRPrintRectangle>) nil_chk(rectangle)) getY] - [self getOffsetY] - [((id<OrgOssPdfreporterEngineJRPrintRectangle>) nil_chk(rectangle)) getHeight] + lineOffset withFloat:[((id<OrgOssPdfreporterEngineJRPrintRectangle>) nil_chk(rectangle)) getWidth] - 2 * lineOffset withFloat:[((id<OrgOssPdfreporterEngineJRPrintRectangle>) nil_chk(rectangle)) getHeight] - 2 * lineOffset withInt:[((id<OrgOssPdfreporterEngineJRPrintRectangle>) nil_chk(rectangle)) getRadius]];
      [((id<OrgOssPdfreporterPdfIPage>) nil_chk(pdfPage_)) stroke];
    }
  }
  [((id<OrgOssPdfreporterPdfIPage>) nil_chk(pdfPage_)) setLineDashWithIntArray:nil withInt:0];
}

- (void)exportEllipseWithOrgOssPdfreporterEngineJRPrintEllipse:(id<OrgOssPdfreporterEngineJRPrintEllipse>)ellipse {
  [((id<OrgOssPdfreporterPdfIPage>) nil_chk(pdfPage_)) setRGBColorFillWithOrgOssPdfreporterGeometryIColor:[((id<OrgOssPdfreporterEngineJRPrintEllipse>) nil_chk(ellipse)) getBackcolor]];
  [OrgOssPdfreporterEngineExportJRPdfExporter preparePenWithOrgOssPdfreporterPdfIPage:pdfPage_ withOrgOssPdfreporterEngineJRPen:[((id<OrgOssPdfreporterEngineJRPrintEllipse>) nil_chk(ellipse)) getLinePen] withOrgOssPdfreporterPdfIPage_LineCapEnum:[OrgOssPdfreporterPdfIPage_LineCapEnum PROJECTING_SCUARE_END]];
  float lineWidth = [((JavaLangFloat *) nil_chk([((id<OrgOssPdfreporterEngineJRPen>) nil_chk([((id<OrgOssPdfreporterEngineJRPrintEllipse>) nil_chk(ellipse)) getLinePen])) getLineWidth])) floatValue];
  float lineOffset = [OrgOssPdfreporterEngineExportLegacyBorderOffset getOffsetWithOrgOssPdfreporterEngineJRPen:[((id<OrgOssPdfreporterEngineJRPrintEllipse>) nil_chk(ellipse)) getLinePen]];
  if ([((id<OrgOssPdfreporterEngineJRPrintEllipse>) nil_chk(ellipse)) getModeValue] == [OrgOssPdfreporterEngineTypeModeEnumEnum OPAQUE]) {
    [((id<OrgOssPdfreporterPdfIPage>) nil_chk(pdfPage_)) ellipseWithFloat:[((id<OrgOssPdfreporterEngineJRPrintEllipse>) nil_chk(ellipse)) getX] + [self getOffsetX] withFloat:[((OrgOssPdfreporterEngineJasperPrint *) nil_chk(jasperPrint_)) getPageHeight] - [((id<OrgOssPdfreporterEngineJRPrintEllipse>) nil_chk(ellipse)) getY] - [self getOffsetY] - [((id<OrgOssPdfreporterEngineJRPrintEllipse>) nil_chk(ellipse)) getHeight] withFloat:[((id<OrgOssPdfreporterEngineJRPrintEllipse>) nil_chk(ellipse)) getX] + [self getOffsetX] + [((id<OrgOssPdfreporterEngineJRPrintEllipse>) nil_chk(ellipse)) getWidth] withFloat:[((OrgOssPdfreporterEngineJasperPrint *) nil_chk(jasperPrint_)) getPageHeight] - [((id<OrgOssPdfreporterEngineJRPrintEllipse>) nil_chk(ellipse)) getY] - [self getOffsetY]];
    [((id<OrgOssPdfreporterPdfIPage>) nil_chk(pdfPage_)) fill];
  }
  if (lineWidth > 0.0f) {
    if ([((id<OrgOssPdfreporterEngineJRPen>) nil_chk([((id<OrgOssPdfreporterEngineJRPrintEllipse>) nil_chk(ellipse)) getLinePen])) getLineStyleValue] == [OrgOssPdfreporterEngineTypeLineStyleEnumEnum DOUBLE]) {
      [OrgOssPdfreporterEngineExportJRPdfExporter drawEllipseWithOrgOssPdfreporterPdfIPage:pdfPage_ withFloat:[((id<OrgOssPdfreporterEngineJRPrintEllipse>) nil_chk(ellipse)) getX] + [self getOffsetX] - lineWidth / 3 withFloat:[((OrgOssPdfreporterEngineJasperPrint *) nil_chk(jasperPrint_)) getPageHeight] - [((id<OrgOssPdfreporterEngineJRPrintEllipse>) nil_chk(ellipse)) getY] - [self getOffsetY] - [((id<OrgOssPdfreporterEngineJRPrintEllipse>) nil_chk(ellipse)) getHeight] - lineWidth / 3 withFloat:[((id<OrgOssPdfreporterEngineJRPrintEllipse>) nil_chk(ellipse)) getX] + [self getOffsetX] + [((id<OrgOssPdfreporterEngineJRPrintEllipse>) nil_chk(ellipse)) getWidth] + lineWidth / 3 withFloat:[((OrgOssPdfreporterEngineJasperPrint *) nil_chk(jasperPrint_)) getPageHeight] - [((id<OrgOssPdfreporterEngineJRPrintEllipse>) nil_chk(ellipse)) getY] - [self getOffsetY] + lineWidth / 3];
      [((id<OrgOssPdfreporterPdfIPage>) nil_chk(pdfPage_)) stroke];
      [OrgOssPdfreporterEngineExportJRPdfExporter drawEllipseWithOrgOssPdfreporterPdfIPage:pdfPage_ withFloat:[((id<OrgOssPdfreporterEngineJRPrintEllipse>) nil_chk(ellipse)) getX] + [self getOffsetX] + lineWidth / 3 withFloat:[((OrgOssPdfreporterEngineJasperPrint *) nil_chk(jasperPrint_)) getPageHeight] - [((id<OrgOssPdfreporterEngineJRPrintEllipse>) nil_chk(ellipse)) getY] - [self getOffsetY] - [((id<OrgOssPdfreporterEngineJRPrintEllipse>) nil_chk(ellipse)) getHeight] + lineWidth / 3 withFloat:[((id<OrgOssPdfreporterEngineJRPrintEllipse>) nil_chk(ellipse)) getX] + [self getOffsetX] + [((id<OrgOssPdfreporterEngineJRPrintEllipse>) nil_chk(ellipse)) getWidth] - lineWidth / 3 withFloat:[((OrgOssPdfreporterEngineJasperPrint *) nil_chk(jasperPrint_)) getPageHeight] - [((id<OrgOssPdfreporterEngineJRPrintEllipse>) nil_chk(ellipse)) getY] - [self getOffsetY] - lineWidth / 3];
      [((id<OrgOssPdfreporterPdfIPage>) nil_chk(pdfPage_)) stroke];
    }
    else {
      [OrgOssPdfreporterEngineExportJRPdfExporter drawEllipseWithOrgOssPdfreporterPdfIPage:pdfPage_ withFloat:[((id<OrgOssPdfreporterEngineJRPrintEllipse>) nil_chk(ellipse)) getX] + [self getOffsetX] + lineOffset withFloat:[((OrgOssPdfreporterEngineJasperPrint *) nil_chk(jasperPrint_)) getPageHeight] - [((id<OrgOssPdfreporterEngineJRPrintEllipse>) nil_chk(ellipse)) getY] - [self getOffsetY] - [((id<OrgOssPdfreporterEngineJRPrintEllipse>) nil_chk(ellipse)) getHeight] + lineOffset withFloat:[((id<OrgOssPdfreporterEngineJRPrintEllipse>) nil_chk(ellipse)) getX] + [self getOffsetX] + [((id<OrgOssPdfreporterEngineJRPrintEllipse>) nil_chk(ellipse)) getWidth] - lineOffset withFloat:[((OrgOssPdfreporterEngineJasperPrint *) nil_chk(jasperPrint_)) getPageHeight] - [((id<OrgOssPdfreporterEngineJRPrintEllipse>) nil_chk(ellipse)) getY] - [self getOffsetY] - lineOffset];
      [((id<OrgOssPdfreporterPdfIPage>) nil_chk(pdfPage_)) stroke];
    }
  }
  [((id<OrgOssPdfreporterPdfIPage>) nil_chk(pdfPage_)) setLineDashWithIntArray:nil withInt:0];
}

- (void)exportImageWithOrgOssPdfreporterEngineJRPrintImage:(id<OrgOssPdfreporterEngineJRPrintImage>)printImage {
  if ([((id<OrgOssPdfreporterEngineJRPrintImage>) nil_chk(printImage)) getModeValue] == [OrgOssPdfreporterEngineTypeModeEnumEnum OPAQUE]) {
    [((id<OrgOssPdfreporterPdfIPage>) nil_chk(pdfPage_)) setRGBColorFillWithOrgOssPdfreporterGeometryIColor:[((id<OrgOssPdfreporterEngineJRPrintImage>) nil_chk(printImage)) getBackcolor]];
    [((id<OrgOssPdfreporterPdfIPage>) nil_chk(pdfPage_)) rectangleWithFloat:[((id<OrgOssPdfreporterEngineJRPrintImage>) nil_chk(printImage)) getX] + [self getOffsetX] withFloat:[((OrgOssPdfreporterEngineJasperPrint *) nil_chk(jasperPrint_)) getPageHeight] - [((id<OrgOssPdfreporterEngineJRPrintImage>) nil_chk(printImage)) getY] - [self getOffsetY] withFloat:[((id<OrgOssPdfreporterEngineJRPrintImage>) nil_chk(printImage)) getWidth] withFloat:-[((id<OrgOssPdfreporterEngineJRPrintImage>) nil_chk(printImage)) getHeight]];
    [((id<OrgOssPdfreporterPdfIPage>) nil_chk(pdfPage_)) fill];
  }
  int topPadding = [((JavaLangInteger *) nil_chk([((id<OrgOssPdfreporterEngineJRLineBox>) nil_chk([((id<OrgOssPdfreporterEngineJRPrintImage>) nil_chk(printImage)) getLineBox])) getTopPadding])) intValue];
  int leftPadding = [((JavaLangInteger *) nil_chk([((id<OrgOssPdfreporterEngineJRLineBox>) nil_chk([((id<OrgOssPdfreporterEngineJRPrintImage>) nil_chk(printImage)) getLineBox])) getLeftPadding])) intValue];
  int bottomPadding = [((JavaLangInteger *) nil_chk([((id<OrgOssPdfreporterEngineJRLineBox>) nil_chk([((id<OrgOssPdfreporterEngineJRPrintImage>) nil_chk(printImage)) getLineBox])) getBottomPadding])) intValue];
  int rightPadding = [((JavaLangInteger *) nil_chk([((id<OrgOssPdfreporterEngineJRLineBox>) nil_chk([((id<OrgOssPdfreporterEngineJRPrintImage>) nil_chk(printImage)) getLineBox])) getRightPadding])) intValue];
  int availableImageWidth = [((id<OrgOssPdfreporterEngineJRPrintImage>) nil_chk(printImage)) getWidth] - leftPadding - rightPadding;
  availableImageWidth = (availableImageWidth < 0) ? 0 : availableImageWidth;
  int availableImageHeight = [((id<OrgOssPdfreporterEngineJRPrintImage>) nil_chk(printImage)) getHeight] - topPadding - bottomPadding;
  availableImageHeight = (availableImageHeight < 0) ? 0 : availableImageHeight;
  id<OrgOssPdfreporterEngineRenderable> renderer = [((id<OrgOssPdfreporterEngineJRPrintImage>) nil_chk(printImage)) getRenderable];
  if (renderer != nil) {
    int xoffset = 0;
    int yoffset = 0;
    OrgOssPdfreporterPdfIPage_ScaleModeEnum *scaleMode = nil;
    id<OrgOssPdfreporterGeometryIDimension> imageDimension = [renderer getDimensionWithOrgOssPdfreporterEngineJasperReportsContext:jasperReportsContext_];
    if ([renderer getTypeValue] == [OrgOssPdfreporterEngineTypeRenderableTypeEnumEnum IMAGE]) {
      float xalignFactor = [self getXAlignFactorWithOrgOssPdfreporterEngineJRPrintImage:printImage];
      float yalignFactor = [self getYAlignFactorWithOrgOssPdfreporterEngineJRPrintImage:printImage];
      switch ([[((id<OrgOssPdfreporterEngineJRPrintImage>) nil_chk(printImage)) getScaleImageValue] ordinal]) {
        case OrgOssPdfreporterEngineTypeScaleImageEnum_CLIP:
        {
          scaleMode = [OrgOssPdfreporterPdfIPage_ScaleModeEnum NONE];
          xoffset = (int) (xalignFactor * (availableImageWidth - [((id<OrgOssPdfreporterGeometryIDimension>) nil_chk(imageDimension)) getWidth]));
          yoffset = (int) (yalignFactor * (availableImageHeight - [((id<OrgOssPdfreporterGeometryIDimension>) nil_chk(imageDimension)) getHeight]));
          if (xalignFactor != 0 || yalignFactor != 0) {
            [((JavaUtilLoggingLogger *) nil_chk(OrgOssPdfreporterEngineExportJRPdfExporter_logger_)) finestWithNSString:[NSString stringWithFormat:@"xoffset: %f * (%d - %f) = %d", xalignFactor, availableImageWidth, [((id<OrgOssPdfreporterGeometryIDimension>) nil_chk(imageDimension)) getWidth], xoffset]];
            [((JavaUtilLoggingLogger *) nil_chk(OrgOssPdfreporterEngineExportJRPdfExporter_logger_)) finestWithNSString:[NSString stringWithFormat:@"yoffset: %f * (%d - %f) = %d", yalignFactor, availableImageHeight, [((id<OrgOssPdfreporterGeometryIDimension>) nil_chk(imageDimension)) getHeight], yoffset]];
          }
          break;
        }
        case OrgOssPdfreporterEngineTypeScaleImageEnum_FILL_FRAME:
        {
          scaleMode = [OrgOssPdfreporterPdfIPage_ScaleModeEnum SCALE];
          break;
        }
        case OrgOssPdfreporterEngineTypeScaleImageEnum_RETAIN_SHAPE:
        default:
        {
          scaleMode = [OrgOssPdfreporterPdfIPage_ScaleModeEnum SIZE];
          float scaleX = availableImageWidth * 1.0f / [((id<OrgOssPdfreporterGeometryIDimension>) nil_chk(imageDimension)) getWidth];
          float scaleY = availableImageHeight * 1.0f / [((id<OrgOssPdfreporterGeometryIDimension>) nil_chk(imageDimension)) getHeight];
          float scale_ = [JavaLangMath minWithFloat:scaleX withFloat:scaleY];
          float scaledWidth = [((id<OrgOssPdfreporterGeometryIDimension>) nil_chk(imageDimension)) getWidth] * scale_;
          float scaledHeight = [((id<OrgOssPdfreporterGeometryIDimension>) nil_chk(imageDimension)) getHeight] * scale_;
          xoffset = (int) (xalignFactor * (availableImageWidth - scaledWidth));
          yoffset = (int) (yalignFactor * (availableImageHeight - scaledHeight));
          if (xalignFactor != 0 || yalignFactor != 0) {
            [((JavaUtilLoggingLogger *) nil_chk(OrgOssPdfreporterEngineExportJRPdfExporter_logger_)) finestWithNSString:[NSString stringWithFormat:@"xoffset: %f * (%d - %f) = %d", xalignFactor, availableImageWidth, scaledWidth, xoffset]];
            [((JavaUtilLoggingLogger *) nil_chk(OrgOssPdfreporterEngineExportJRPdfExporter_logger_)) finestWithNSString:[NSString stringWithFormat:@"yoffset: %f * (%d - %f) = %d", yalignFactor, availableImageHeight, scaledHeight, yoffset]];
          }
          break;
        }
      }
    }
    else {
      @throw [[OrgOssPdfreporterEngineJRException alloc] initWithNSString:@"SVG Images not supported."];
    }
    float x = [((id<OrgOssPdfreporterEngineJRPrintImage>) nil_chk(printImage)) getX] + [self getOffsetX] + leftPadding;
    float y = [((OrgOssPdfreporterEngineJasperPrint *) nil_chk(jasperPrint_)) getPageHeight] - [((id<OrgOssPdfreporterEngineJRPrintImage>) nil_chk(printImage)) getY] - [((id<OrgOssPdfreporterEngineJRPrintImage>) nil_chk(printImage)) getHeight] - [self getOffsetY] + topPadding;
    float width = [((id<OrgOssPdfreporterEngineJRPrintImage>) nil_chk(printImage)) getWidth] - leftPadding - rightPadding;
    float height = [((id<OrgOssPdfreporterEngineJRPrintImage>) nil_chk(printImage)) getHeight] - topPadding - bottomPadding;
    id<OrgOssPdfreporterImageIImage> image = [renderer getImageWithOrgOssPdfreporterEngineJasperReportsContext:jasperReportsContext_];
    [((JavaUtilLoggingLogger *) nil_chk(OrgOssPdfreporterEngineExportJRPdfExporter_logger_)) finestWithNSString:[NSString stringWithFormat:@"drawImage(x: %f(+%d), y: %f(+%d), width: %f, height: %f, mode: %@", x, xoffset, y, yoffset, width, height, scaleMode]];
    if (xoffset >= 0 && yoffset >= 0) {
      [((id<OrgOssPdfreporterPdfIPage>) nil_chk(pdfPage_)) drawWithOrgOssPdfreporterImageIImage:image withFloat:x + xoffset withFloat:y + yoffset withFloat:width withFloat:height withOrgOssPdfreporterPdfIPage_ScaleModeEnum:scaleMode];
    }
    else {
      [((id<OrgOssPdfreporterPdfIPage>) nil_chk(pdfPage_)) drawCroppedWithOrgOssPdfreporterImageIImage:image withFloat:xoffset withFloat:yoffset withFloat:x withFloat:y withFloat:width withFloat:height];
    }
  }
  if ([((JavaLangFloat *) nil_chk([((id<OrgOssPdfreporterEngineBaseJRBoxPen>) nil_chk([((id<OrgOssPdfreporterEngineJRLineBox>) nil_chk([((id<OrgOssPdfreporterEngineJRPrintImage>) nil_chk(printImage)) getLineBox])) getTopPen])) getLineWidth])) floatValue] <= 0.0f && [((JavaLangFloat *) nil_chk([((id<OrgOssPdfreporterEngineBaseJRBoxPen>) nil_chk([((id<OrgOssPdfreporterEngineJRLineBox>) nil_chk([((id<OrgOssPdfreporterEngineJRPrintImage>) nil_chk(printImage)) getLineBox])) getLeftPen])) getLineWidth])) floatValue] <= 0.0f && [((JavaLangFloat *) nil_chk([((id<OrgOssPdfreporterEngineBaseJRBoxPen>) nil_chk([((id<OrgOssPdfreporterEngineJRLineBox>) nil_chk([((id<OrgOssPdfreporterEngineJRPrintImage>) nil_chk(printImage)) getLineBox])) getBottomPen])) getLineWidth])) floatValue] <= 0.0f && [((JavaLangFloat *) nil_chk([((id<OrgOssPdfreporterEngineBaseJRBoxPen>) nil_chk([((id<OrgOssPdfreporterEngineJRLineBox>) nil_chk([((id<OrgOssPdfreporterEngineJRPrintImage>) nil_chk(printImage)) getLineBox])) getRightPen])) getLineWidth])) floatValue] <= 0.0f) {
    if ([((JavaLangFloat *) nil_chk([((id<OrgOssPdfreporterEngineJRPen>) nil_chk([((id<OrgOssPdfreporterEngineJRPrintImage>) nil_chk(printImage)) getLinePen])) getLineWidth])) floatValue] > 0.0f) {
      [self exportPenWithOrgOssPdfreporterEngineJRPen:[((id<OrgOssPdfreporterEngineJRPrintImage>) nil_chk(printImage)) getLinePen] withOrgOssPdfreporterEngineJRPrintElement:printImage];
    }
  }
  else {
    [self exportBoxWithOrgOssPdfreporterEngineJRLineBox:[((id<OrgOssPdfreporterEngineJRPrintImage>) nil_chk(printImage)) getLineBox] withOrgOssPdfreporterEngineJRPrintElement:printImage];
  }
}

- (float)getXAlignFactorWithOrgOssPdfreporterEngineJRPrintImage:(id<OrgOssPdfreporterEngineJRPrintImage>)printImage {
  float xalignFactor = 0.0f;
  switch ([[((id<OrgOssPdfreporterEngineJRPrintImage>) nil_chk(printImage)) getHorizontalAlignmentValue] ordinal]) {
    case OrgOssPdfreporterEngineTypeHorizontalAlignEnum_RIGHT:
    {
      xalignFactor = 1.0f;
      break;
    }
    case OrgOssPdfreporterEngineTypeHorizontalAlignEnum_CENTER:
    {
      xalignFactor = 0.5f;
      break;
    }
    case OrgOssPdfreporterEngineTypeHorizontalAlignEnum_LEFT:
    default:
    {
      xalignFactor = 0.0f;
      break;
    }
  }
  return xalignFactor;
}

- (float)getYAlignFactorWithOrgOssPdfreporterEngineJRPrintImage:(id<OrgOssPdfreporterEngineJRPrintImage>)printImage {
  float yalignFactor = 0.0f;
  switch ([[((id<OrgOssPdfreporterEngineJRPrintImage>) nil_chk(printImage)) getVerticalAlignmentValue] ordinal]) {
    case OrgOssPdfreporterEngineTypeVerticalAlignEnum_BOTTOM:
    {
      yalignFactor = 1.0f;
      break;
    }
    case OrgOssPdfreporterEngineTypeVerticalAlignEnum_MIDDLE:
    {
      yalignFactor = 0.5f;
      break;
    }
    case OrgOssPdfreporterEngineTypeVerticalAlignEnum_TOP:
    default:
    {
      yalignFactor = 0.0f;
      break;
    }
  }
  return yalignFactor;
}

- (OrgOssPdfreporterTextParagraph *)getParagraphWithOrgOssPdfreporterUsesJavaAwtTextAttributedString:(OrgOssPdfreporterUsesJavaAwtTextAttributedString *)as
                                                                                        withNSString:(NSString *)text
                                                              withOrgOssPdfreporterEngineJRPrintText:(id<OrgOssPdfreporterEngineJRPrintText>)textElement {
  OrgOssPdfreporterTextParagraph *paragraph = [[OrgOssPdfreporterTextParagraph alloc] init];
  int runLimit = 0;
  id<OrgOssPdfreporterUsesJavaAwtTextIAttributedCharacterIterator> iterator = [((OrgOssPdfreporterUsesJavaAwtTextAttributedString *) nil_chk(as)) getIterator];
  BOOL firstText = YES;
  while (runLimit < [((NSString *) nil_chk(text)) length] && (runLimit = [((id<OrgOssPdfreporterUsesJavaAwtTextIAttributedCharacterIterator>) nil_chk(iterator)) getRunLimit]) <= [((NSString *) nil_chk(text)) length]) {
    id<JavaUtilMap> attributes = [((id<OrgOssPdfreporterUsesJavaAwtTextIAttributedCharacterIterator>) nil_chk(iterator)) getAttributes];
    OrgOssPdfreporterTextParagraphText *paragraphText = [self getParagrapghTextWithJavaUtilMap:attributes withNSString:[((NSString *) nil_chk(text)) substring:[((id<OrgOssPdfreporterUsesJavaAwtTextIAttributedCharacterIterator>) nil_chk(iterator)) getIndex] endIndex:runLimit]];
    if (firstText) {
    }
    [((OrgOssPdfreporterTextParagraph *) nil_chk(paragraph)) addWithOrgOssPdfreporterTextParagraphText:paragraphText];
    [((id<OrgOssPdfreporterUsesJavaAwtTextIAttributedCharacterIterator>) nil_chk(iterator)) setIndexWithInt:runLimit];
    firstText = NO;
  }
  return paragraph;
}

- (OrgOssPdfreporterTextParagraphText *)getParagrapghTextWithJavaUtilMap:(id<JavaUtilMap>)attributes
                                                            withNSString:(NSString *)text {
  id<OrgOssPdfreporterFontIFont> font = [self getFontWithJavaUtilMap:attributes];
  id<OrgOssPdfreporterGeometryIColor> forecolor = (id<OrgOssPdfreporterGeometryIColor>) [((id<JavaUtilMap>) nil_chk(attributes)) getWithId:[OrgOssPdfreporterFontTextTextAttribute FOREGROUND]];
  id<OrgOssPdfreporterGeometryIColor> backcolor = (id<OrgOssPdfreporterGeometryIColor>) [((id<JavaUtilMap>) nil_chk(attributes)) getWithId:[OrgOssPdfreporterFontTextTextAttribute BACKGROUND]];
  BOOL underline = [self hasUnderlineWithJavaUtilMap:attributes];
  BOOL strikethrough = [self hasStrikethroughWithJavaUtilMap:attributes];
  id<OrgOssPdfreporterTextIPositionedLine> line = underline ? [OrgOssPdfreporterTextPositionedLined newUnderline] : strikethrough ? [OrgOssPdfreporterTextPositionedLined newStrikethrough] : nil;
  return [[OrgOssPdfreporterTextParagraphText alloc] initWithNSString:text withOrgOssPdfreporterFontIFont:font withOrgOssPdfreporterGeometryIColor:forecolor withOrgOssPdfreporterGeometryIColor:backcolor withOrgOssPdfreporterTextIPositionedLine:line];
}

- (BOOL)hasUnderlineWithJavaUtilMap:(id<JavaUtilMap>)textAttributes {
  JavaLangInteger *underline = (JavaLangInteger *) [((id<JavaUtilMap>) nil_chk(textAttributes)) getWithId:[OrgOssPdfreporterFontTextTextAttribute UNDERLINE]];
  return [((JavaLangInteger *) nil_chk([OrgOssPdfreporterFontTextTextAttribute UNDERLINE_ON])) isEqual:underline];
}

- (BOOL)hasStrikethroughWithJavaUtilMap:(id<JavaUtilMap>)textAttributes {
  JavaLangBoolean *strike = (JavaLangBoolean *) [((id<JavaUtilMap>) nil_chk(textAttributes)) getWithId:[OrgOssPdfreporterFontTextTextAttribute STRIKETHROUGH]];
  return [((JavaLangBoolean *) nil_chk([OrgOssPdfreporterFontTextTextAttribute STRIKETHROUGH_ON])) isEqual:strike];
}

- (BOOL)hasSupersciptWithJavaUtilMap:(id<JavaUtilMap>)attributes {
  JavaLangInteger *scriptStyle = (JavaLangInteger *) [((id<JavaUtilMap>) nil_chk(attributes)) getWithId:[OrgOssPdfreporterFontTextTextAttribute SUPERSCRIPT]];
  return (scriptStyle != nil && [((JavaLangInteger *) nil_chk([OrgOssPdfreporterFontTextTextAttribute SUPERSCRIPT_SUPER])) isEqual:scriptStyle]);
}

- (BOOL)hasSubsciptWithJavaUtilMap:(id<JavaUtilMap>)attributes {
  JavaLangInteger *scriptStyle = (JavaLangInteger *) [((id<JavaUtilMap>) nil_chk(attributes)) getWithId:[OrgOssPdfreporterFontTextTextAttribute SUPERSCRIPT]];
  return (scriptStyle != nil && [((JavaLangInteger *) nil_chk([OrgOssPdfreporterFontTextTextAttribute SUPERSCRIPT_SUB])) isEqual:scriptStyle]);
}

- (id<OrgOssPdfreporterFontIFont>)getFontWithJavaUtilMap:(id<JavaUtilMap>)attributes {
  id<OrgOssPdfreporterEngineJRFont> jrFont = [[OrgOssPdfreporterEngineBaseJRBaseFont alloc] initWithJavaUtilMap:attributes];
  return [OrgOssPdfreporterEngineExportJRPdfExporter toPdfFontWithOrgOssPdfreporterEngineJRFont:jrFont withBOOL:[self hasUnderlineWithJavaUtilMap:attributes] withBOOL:[self hasStrikethroughWithJavaUtilMap:attributes] withBOOL:[self hasSupersciptWithJavaUtilMap:attributes] withBOOL:[self hasSubsciptWithJavaUtilMap:attributes]];
}

- (void)exportTextWithOrgOssPdfreporterEngineJRPrintText:(id<OrgOssPdfreporterEngineJRPrintText>)text {
  if ([((JavaUtilLoggingLogger *) nil_chk(OrgOssPdfreporterEngineExportJRPdfExporter_logger_)) isLoggableWithJavaUtilLoggingLevel:[JavaUtilLoggingLevel FINEST]]) {
    [((JavaUtilLoggingLogger *) nil_chk(OrgOssPdfreporterEngineExportJRPdfExporter_logger_)) finestWithNSString:[NSString stringWithFormat:@"X: %d, Y: %d, Width: %d, Height: %f, Text: ['%@']", [((id<OrgOssPdfreporterEngineJRPrintText>) nil_chk(text)) getX], [((id<OrgOssPdfreporterEngineJRPrintText>) nil_chk(text)) getY], [((id<OrgOssPdfreporterEngineJRPrintText>) nil_chk(text)) getWidth], [((id<OrgOssPdfreporterEngineJRPrintText>) nil_chk(text)) getTextHeight], [((id<OrgOssPdfreporterEngineJRPrintText>) nil_chk(text)) getFullText]]];
  }
  OrgOssPdfreporterEngineExportAbstractPdfTextRenderer *textRenderer = [((id<OrgOssPdfreporterEngineJRPrintText>) nil_chk(text)) getLeadingOffset] == 0 ? [[OrgOssPdfreporterEngineExportPdfTextRenderer alloc] initWithOrgOssPdfreporterEngineJasperReportsContext:jasperReportsContext_ withBOOL:[((OrgOssPdfreporterEngineJRPropertiesUtil *) nil_chk([self getPropertiesUtil])) getBooleanPropertyWithNSString:[OrgOssPdfreporterEngineUtilJRStyledText PROPERTY_AWT_IGNORE_MISSING_FONT]]] : [[OrgOssPdfreporterEngineExportSimplePdfTextRenderer alloc] initWithOrgOssPdfreporterEngineJasperReportsContext:jasperReportsContext_ withBOOL:[((OrgOssPdfreporterEngineJRPropertiesUtil *) nil_chk([self getPropertiesUtil])) getBooleanPropertyWithNSString:[OrgOssPdfreporterEngineUtilJRStyledText PROPERTY_AWT_IGNORE_MISSING_FONT]]];
  [((OrgOssPdfreporterEngineExportAbstractPdfTextRenderer *) nil_chk(textRenderer)) initialize__WithOrgOssPdfreporterEngineExportJRPdfExporter:self withOrgOssPdfreporterPdfIPage:pdfPage_ withOrgOssPdfreporterEngineJRPrintText:text withInt:[self getOffsetX] withInt:[self getOffsetY]];
  OrgOssPdfreporterEngineUtilJRStyledText *styledText = [((OrgOssPdfreporterEngineExportAbstractPdfTextRenderer *) nil_chk(textRenderer)) getStyledText];
  if (styledText == nil) {
    return;
  }
  OrgOssPdfreporterGeometryFactoryIGeometryFactory_Rotate90Enum *angle = [OrgOssPdfreporterGeometryFactoryIGeometryFactory_Rotate90Enum DEGREE_360];
  switch ([[((id<OrgOssPdfreporterEngineJRPrintText>) nil_chk(text)) getRotationValue] ordinal]) {
    case OrgOssPdfreporterEngineTypeRotationEnum_LEFT:
    {
      angle = [OrgOssPdfreporterGeometryFactoryIGeometryFactory_Rotate90Enum DEGREE_90];
      break;
    }
    case OrgOssPdfreporterEngineTypeRotationEnum_RIGHT:
    {
      angle = [OrgOssPdfreporterGeometryFactoryIGeometryFactory_Rotate90Enum DEGREE_270];
      break;
    }
    case OrgOssPdfreporterEngineTypeRotationEnum_UPSIDE_DOWN:
    {
      angle = [OrgOssPdfreporterGeometryFactoryIGeometryFactory_Rotate90Enum DEGREE_180];
      break;
    }
    case OrgOssPdfreporterEngineTypeRotationEnum_NONE:
    default:
    {
    }
  }
  BOOL doRestoreState = NO;
  if ([((id<OrgOssPdfreporterEngineJRPrintText>) nil_chk(text)) getRotationValue] != [OrgOssPdfreporterEngineTypeRotationEnumEnum NONE]) {
    id<OrgOssPdfreporterGeometryIAffineTransformMatrix> matrix = [((id<OrgOssPdfreporterGeometryFactoryIGeometryFactory>) nil_chk([OrgOssPdfreporterRegistryApiRegistry getGeometryFactory])) newAffineTransformMatrixWithFloat:[((OrgOssPdfreporterEngineExportAbstractPdfTextRenderer *) nil_chk(textRenderer)) getX] withFloat:[((OrgOssPdfreporterEngineJasperPrint *) nil_chk(jasperPrint_)) getPageHeight] - [((OrgOssPdfreporterEngineExportAbstractPdfTextRenderer *) nil_chk(textRenderer)) getY] withOrgOssPdfreporterGeometryFactoryIGeometryFactory_Rotate90Enum:angle];
    [((id<OrgOssPdfreporterPdfIPage>) nil_chk(pdfPage_)) transformWithOrgOssPdfreporterGeometryIAffineTransformMatrix:matrix];
    doRestoreState = YES;
  }
  if ([((id<OrgOssPdfreporterEngineJRPrintText>) nil_chk(text)) getModeValue] == [OrgOssPdfreporterEngineTypeModeEnumEnum OPAQUE]) {
    id<OrgOssPdfreporterGeometryIColor> backcolor = [((id<OrgOssPdfreporterEngineJRPrintText>) nil_chk(text)) getBackcolor];
    [((id<OrgOssPdfreporterPdfIPage>) nil_chk(pdfPage_)) setRGBColorFillWithOrgOssPdfreporterGeometryIColor:backcolor];
    [((id<OrgOssPdfreporterPdfIPage>) nil_chk(pdfPage_)) rectangleWithFloat:[((OrgOssPdfreporterEngineExportAbstractPdfTextRenderer *) nil_chk(textRenderer)) getX] withFloat:[((OrgOssPdfreporterEngineJasperPrint *) nil_chk(jasperPrint_)) getPageHeight] - [((OrgOssPdfreporterEngineExportAbstractPdfTextRenderer *) nil_chk(textRenderer)) getY] withFloat:[((OrgOssPdfreporterEngineExportAbstractPdfTextRenderer *) nil_chk(textRenderer)) getWidth] withFloat:-[((OrgOssPdfreporterEngineExportAbstractPdfTextRenderer *) nil_chk(textRenderer)) getHeight]];
    [((id<OrgOssPdfreporterPdfIPage>) nil_chk(pdfPage_)) fill];
  }
  if ([((OrgOssPdfreporterEngineUtilJRStyledText *) nil_chk(styledText)) length] > 0) {
    [((OrgOssPdfreporterEngineExportAbstractPdfTextRenderer *) nil_chk(textRenderer)) render];
  }
  if (doRestoreState) {
    [((id<OrgOssPdfreporterPdfIPage>) nil_chk(pdfPage_)) restoreTransformation];
  }
  [self exportBoxWithOrgOssPdfreporterEngineJRLineBox:[((id<OrgOssPdfreporterEngineJRPrintText>) nil_chk(text)) getLineBox] withOrgOssPdfreporterEngineJRPrintElement:text];
}

- (void)exportBoxWithOrgOssPdfreporterEngineJRLineBox:(id<OrgOssPdfreporterEngineJRLineBox>)box
            withOrgOssPdfreporterEngineJRPrintElement:(id<OrgOssPdfreporterEngineJRPrintElement>)element {
  [self exportTopPenWithOrgOssPdfreporterEngineJRPen:[((id<OrgOssPdfreporterEngineJRLineBox>) nil_chk(box)) getTopPen] withOrgOssPdfreporterEngineJRPen:[((id<OrgOssPdfreporterEngineJRLineBox>) nil_chk(box)) getLeftPen] withOrgOssPdfreporterEngineJRPen:[((id<OrgOssPdfreporterEngineJRLineBox>) nil_chk(box)) getRightPen] withOrgOssPdfreporterEngineJRPrintElement:element];
  [self exportLeftPenWithOrgOssPdfreporterEngineJRPen:[((id<OrgOssPdfreporterEngineJRLineBox>) nil_chk(box)) getTopPen] withOrgOssPdfreporterEngineJRPen:[((id<OrgOssPdfreporterEngineJRLineBox>) nil_chk(box)) getLeftPen] withOrgOssPdfreporterEngineJRPen:[((id<OrgOssPdfreporterEngineJRLineBox>) nil_chk(box)) getBottomPen] withOrgOssPdfreporterEngineJRPrintElement:element];
  [self exportBottomPenWithOrgOssPdfreporterEngineJRPen:[((id<OrgOssPdfreporterEngineJRLineBox>) nil_chk(box)) getLeftPen] withOrgOssPdfreporterEngineJRPen:[((id<OrgOssPdfreporterEngineJRLineBox>) nil_chk(box)) getBottomPen] withOrgOssPdfreporterEngineJRPen:[((id<OrgOssPdfreporterEngineJRLineBox>) nil_chk(box)) getRightPen] withOrgOssPdfreporterEngineJRPrintElement:element];
  [self exportRightPenWithOrgOssPdfreporterEngineJRPen:[((id<OrgOssPdfreporterEngineJRLineBox>) nil_chk(box)) getTopPen] withOrgOssPdfreporterEngineJRPen:[((id<OrgOssPdfreporterEngineJRLineBox>) nil_chk(box)) getBottomPen] withOrgOssPdfreporterEngineJRPen:[((id<OrgOssPdfreporterEngineJRLineBox>) nil_chk(box)) getRightPen] withOrgOssPdfreporterEngineJRPrintElement:element];
  [((id<OrgOssPdfreporterPdfIPage>) nil_chk(pdfPage_)) setLineDashWithIntArray:nil withInt:0];
  [((id<OrgOssPdfreporterPdfIPage>) nil_chk(pdfPage_)) setLineCapWithOrgOssPdfreporterPdfIPage_LineCapEnum:[OrgOssPdfreporterPdfIPage_LineCapEnum PROJECTING_SCUARE_END]];
}

- (void)exportPenWithOrgOssPdfreporterEngineJRPen:(id<OrgOssPdfreporterEngineJRPen>)pen
        withOrgOssPdfreporterEngineJRPrintElement:(id<OrgOssPdfreporterEngineJRPrintElement>)element {
  [self exportTopPenWithOrgOssPdfreporterEngineJRPen:pen withOrgOssPdfreporterEngineJRPen:pen withOrgOssPdfreporterEngineJRPen:pen withOrgOssPdfreporterEngineJRPrintElement:element];
  [self exportLeftPenWithOrgOssPdfreporterEngineJRPen:pen withOrgOssPdfreporterEngineJRPen:pen withOrgOssPdfreporterEngineJRPen:pen withOrgOssPdfreporterEngineJRPrintElement:element];
  [self exportBottomPenWithOrgOssPdfreporterEngineJRPen:pen withOrgOssPdfreporterEngineJRPen:pen withOrgOssPdfreporterEngineJRPen:pen withOrgOssPdfreporterEngineJRPrintElement:element];
  [self exportRightPenWithOrgOssPdfreporterEngineJRPen:pen withOrgOssPdfreporterEngineJRPen:pen withOrgOssPdfreporterEngineJRPen:pen withOrgOssPdfreporterEngineJRPrintElement:element];
  [((id<OrgOssPdfreporterPdfIPage>) nil_chk(pdfPage_)) setLineDashWithIntArray:nil withInt:0];
  [((id<OrgOssPdfreporterPdfIPage>) nil_chk(pdfPage_)) setLineCapWithOrgOssPdfreporterPdfIPage_LineCapEnum:[OrgOssPdfreporterPdfIPage_LineCapEnum PROJECTING_SCUARE_END]];
}

- (void)exportTopPenWithOrgOssPdfreporterEngineJRPen:(id<OrgOssPdfreporterEngineJRPen>)topPen
                    withOrgOssPdfreporterEngineJRPen:(id<OrgOssPdfreporterEngineJRPen>)leftPen
                    withOrgOssPdfreporterEngineJRPen:(id<OrgOssPdfreporterEngineJRPen>)rightPen
           withOrgOssPdfreporterEngineJRPrintElement:(id<OrgOssPdfreporterEngineJRPrintElement>)element {
  if ([((JavaLangFloat *) nil_chk([((id<OrgOssPdfreporterEngineJRPen>) nil_chk(topPen)) getLineWidth])) floatValue] > 0.0f) {
    float leftOffset = [((JavaLangFloat *) nil_chk([((id<OrgOssPdfreporterEngineJRPen>) nil_chk(leftPen)) getLineWidth])) floatValue] / 2 - [OrgOssPdfreporterEngineExportLegacyBorderOffset getOffsetWithOrgOssPdfreporterEngineJRPen:leftPen];
    float rightOffset = [((JavaLangFloat *) nil_chk([((id<OrgOssPdfreporterEngineJRPen>) nil_chk(rightPen)) getLineWidth])) floatValue] / 2 - [OrgOssPdfreporterEngineExportLegacyBorderOffset getOffsetWithOrgOssPdfreporterEngineJRPen:rightPen];
    [OrgOssPdfreporterEngineExportJRPdfExporter preparePenWithOrgOssPdfreporterPdfIPage:pdfPage_ withOrgOssPdfreporterEngineJRPen:topPen withOrgOssPdfreporterPdfIPage_LineCapEnum:[OrgOssPdfreporterPdfIPage_LineCapEnum BUTT_END]];
    if ([((id<OrgOssPdfreporterEngineJRPen>) nil_chk(topPen)) getLineStyleValue] == [OrgOssPdfreporterEngineTypeLineStyleEnumEnum DOUBLE]) {
      float topOffset = [((JavaLangFloat *) nil_chk([((id<OrgOssPdfreporterEngineJRPen>) nil_chk(topPen)) getLineWidth])) floatValue];
      [((id<OrgOssPdfreporterPdfIPage>) nil_chk(pdfPage_)) moveToWithFloat:[((id<OrgOssPdfreporterEngineJRPrintElement>) nil_chk(element)) getX] + [self getOffsetX] - leftOffset withFloat:[((OrgOssPdfreporterEngineJasperPrint *) nil_chk(jasperPrint_)) getPageHeight] - [((id<OrgOssPdfreporterEngineJRPrintElement>) nil_chk(element)) getY] - [self getOffsetY] + topOffset / 3];
      [((id<OrgOssPdfreporterPdfIPage>) nil_chk(pdfPage_)) lineToWithFloat:[((id<OrgOssPdfreporterEngineJRPrintElement>) nil_chk(element)) getX] + [self getOffsetX] + [((id<OrgOssPdfreporterEngineJRPrintElement>) nil_chk(element)) getWidth] + rightOffset withFloat:[((OrgOssPdfreporterEngineJasperPrint *) nil_chk(jasperPrint_)) getPageHeight] - [((id<OrgOssPdfreporterEngineJRPrintElement>) nil_chk(element)) getY] - [self getOffsetY] + topOffset / 3];
      [((id<OrgOssPdfreporterPdfIPage>) nil_chk(pdfPage_)) stroke];
      [((id<OrgOssPdfreporterPdfIPage>) nil_chk(pdfPage_)) moveToWithFloat:[((id<OrgOssPdfreporterEngineJRPrintElement>) nil_chk(element)) getX] + [self getOffsetX] + leftOffset / 3 withFloat:[((OrgOssPdfreporterEngineJasperPrint *) nil_chk(jasperPrint_)) getPageHeight] - [((id<OrgOssPdfreporterEngineJRPrintElement>) nil_chk(element)) getY] - [self getOffsetY] - topOffset / 3];
      [((id<OrgOssPdfreporterPdfIPage>) nil_chk(pdfPage_)) lineToWithFloat:[((id<OrgOssPdfreporterEngineJRPrintElement>) nil_chk(element)) getX] + [self getOffsetX] + [((id<OrgOssPdfreporterEngineJRPrintElement>) nil_chk(element)) getWidth] - rightOffset / 3 withFloat:[((OrgOssPdfreporterEngineJasperPrint *) nil_chk(jasperPrint_)) getPageHeight] - [((id<OrgOssPdfreporterEngineJRPrintElement>) nil_chk(element)) getY] - [self getOffsetY] - topOffset / 3];
      [((id<OrgOssPdfreporterPdfIPage>) nil_chk(pdfPage_)) stroke];
    }
    else {
      float topOffset = [OrgOssPdfreporterEngineExportLegacyBorderOffset getOffsetWithOrgOssPdfreporterEngineJRPen:topPen];
      [((id<OrgOssPdfreporterPdfIPage>) nil_chk(pdfPage_)) moveToWithFloat:[((id<OrgOssPdfreporterEngineJRPrintElement>) nil_chk(element)) getX] + [self getOffsetX] - leftOffset withFloat:[((OrgOssPdfreporterEngineJasperPrint *) nil_chk(jasperPrint_)) getPageHeight] - [((id<OrgOssPdfreporterEngineJRPrintElement>) nil_chk(element)) getY] - [self getOffsetY] - topOffset];
      [((id<OrgOssPdfreporterPdfIPage>) nil_chk(pdfPage_)) lineToWithFloat:[((id<OrgOssPdfreporterEngineJRPrintElement>) nil_chk(element)) getX] + [self getOffsetX] + [((id<OrgOssPdfreporterEngineJRPrintElement>) nil_chk(element)) getWidth] + rightOffset withFloat:[((OrgOssPdfreporterEngineJasperPrint *) nil_chk(jasperPrint_)) getPageHeight] - [((id<OrgOssPdfreporterEngineJRPrintElement>) nil_chk(element)) getY] - [self getOffsetY] - topOffset];
      [((id<OrgOssPdfreporterPdfIPage>) nil_chk(pdfPage_)) stroke];
    }
  }
}

- (void)exportLeftPenWithOrgOssPdfreporterEngineJRPen:(id<OrgOssPdfreporterEngineJRPen>)topPen
                     withOrgOssPdfreporterEngineJRPen:(id<OrgOssPdfreporterEngineJRPen>)leftPen
                     withOrgOssPdfreporterEngineJRPen:(id<OrgOssPdfreporterEngineJRPen>)bottomPen
            withOrgOssPdfreporterEngineJRPrintElement:(id<OrgOssPdfreporterEngineJRPrintElement>)element {
  if ([((JavaLangFloat *) nil_chk([((id<OrgOssPdfreporterEngineJRPen>) nil_chk(leftPen)) getLineWidth])) floatValue] > 0.0f) {
    float topOffset = [((JavaLangFloat *) nil_chk([((id<OrgOssPdfreporterEngineJRPen>) nil_chk(topPen)) getLineWidth])) floatValue] / 2 - [OrgOssPdfreporterEngineExportLegacyBorderOffset getOffsetWithOrgOssPdfreporterEngineJRPen:topPen];
    float bottomOffset = [((JavaLangFloat *) nil_chk([((id<OrgOssPdfreporterEngineJRPen>) nil_chk(bottomPen)) getLineWidth])) floatValue] / 2 - [OrgOssPdfreporterEngineExportLegacyBorderOffset getOffsetWithOrgOssPdfreporterEngineJRPen:bottomPen];
    [OrgOssPdfreporterEngineExportJRPdfExporter preparePenWithOrgOssPdfreporterPdfIPage:pdfPage_ withOrgOssPdfreporterEngineJRPen:leftPen withOrgOssPdfreporterPdfIPage_LineCapEnum:[OrgOssPdfreporterPdfIPage_LineCapEnum BUTT_END]];
    if ([((id<OrgOssPdfreporterEngineJRPen>) nil_chk(leftPen)) getLineStyleValue] == [OrgOssPdfreporterEngineTypeLineStyleEnumEnum DOUBLE]) {
      float leftOffset = [((JavaLangFloat *) nil_chk([((id<OrgOssPdfreporterEngineJRPen>) nil_chk(leftPen)) getLineWidth])) floatValue];
      [((id<OrgOssPdfreporterPdfIPage>) nil_chk(pdfPage_)) moveToWithFloat:[((id<OrgOssPdfreporterEngineJRPrintElement>) nil_chk(element)) getX] + [self getOffsetX] - leftOffset / 3 withFloat:[((OrgOssPdfreporterEngineJasperPrint *) nil_chk(jasperPrint_)) getPageHeight] - [((id<OrgOssPdfreporterEngineJRPrintElement>) nil_chk(element)) getY] - [self getOffsetY] + topOffset];
      [((id<OrgOssPdfreporterPdfIPage>) nil_chk(pdfPage_)) lineToWithFloat:[((id<OrgOssPdfreporterEngineJRPrintElement>) nil_chk(element)) getX] + [self getOffsetX] - leftOffset / 3 withFloat:[((OrgOssPdfreporterEngineJasperPrint *) nil_chk(jasperPrint_)) getPageHeight] - [((id<OrgOssPdfreporterEngineJRPrintElement>) nil_chk(element)) getY] - [self getOffsetY] - [((id<OrgOssPdfreporterEngineJRPrintElement>) nil_chk(element)) getHeight] - bottomOffset];
      [((id<OrgOssPdfreporterPdfIPage>) nil_chk(pdfPage_)) stroke];
      [((id<OrgOssPdfreporterPdfIPage>) nil_chk(pdfPage_)) moveToWithFloat:[((id<OrgOssPdfreporterEngineJRPrintElement>) nil_chk(element)) getX] + [self getOffsetX] + leftOffset / 3 withFloat:[((OrgOssPdfreporterEngineJasperPrint *) nil_chk(jasperPrint_)) getPageHeight] - [((id<OrgOssPdfreporterEngineJRPrintElement>) nil_chk(element)) getY] - [self getOffsetY] - topOffset / 3];
      [((id<OrgOssPdfreporterPdfIPage>) nil_chk(pdfPage_)) lineToWithFloat:[((id<OrgOssPdfreporterEngineJRPrintElement>) nil_chk(element)) getX] + [self getOffsetX] + leftOffset / 3 withFloat:[((OrgOssPdfreporterEngineJasperPrint *) nil_chk(jasperPrint_)) getPageHeight] - [((id<OrgOssPdfreporterEngineJRPrintElement>) nil_chk(element)) getY] - [self getOffsetY] - [((id<OrgOssPdfreporterEngineJRPrintElement>) nil_chk(element)) getHeight] + bottomOffset / 3];
      [((id<OrgOssPdfreporterPdfIPage>) nil_chk(pdfPage_)) stroke];
    }
    else {
      float leftOffset = [OrgOssPdfreporterEngineExportLegacyBorderOffset getOffsetWithOrgOssPdfreporterEngineJRPen:leftPen];
      [((id<OrgOssPdfreporterPdfIPage>) nil_chk(pdfPage_)) moveToWithFloat:[((id<OrgOssPdfreporterEngineJRPrintElement>) nil_chk(element)) getX] + [self getOffsetX] + leftOffset withFloat:[((OrgOssPdfreporterEngineJasperPrint *) nil_chk(jasperPrint_)) getPageHeight] - [((id<OrgOssPdfreporterEngineJRPrintElement>) nil_chk(element)) getY] - [self getOffsetY] + topOffset];
      [((id<OrgOssPdfreporterPdfIPage>) nil_chk(pdfPage_)) lineToWithFloat:[((id<OrgOssPdfreporterEngineJRPrintElement>) nil_chk(element)) getX] + [self getOffsetX] + leftOffset withFloat:[((OrgOssPdfreporterEngineJasperPrint *) nil_chk(jasperPrint_)) getPageHeight] - [((id<OrgOssPdfreporterEngineJRPrintElement>) nil_chk(element)) getY] - [self getOffsetY] - [((id<OrgOssPdfreporterEngineJRPrintElement>) nil_chk(element)) getHeight] - bottomOffset];
      [((id<OrgOssPdfreporterPdfIPage>) nil_chk(pdfPage_)) stroke];
    }
  }
}

- (void)exportBottomPenWithOrgOssPdfreporterEngineJRPen:(id<OrgOssPdfreporterEngineJRPen>)leftPen
                       withOrgOssPdfreporterEngineJRPen:(id<OrgOssPdfreporterEngineJRPen>)bottomPen
                       withOrgOssPdfreporterEngineJRPen:(id<OrgOssPdfreporterEngineJRPen>)rightPen
              withOrgOssPdfreporterEngineJRPrintElement:(id<OrgOssPdfreporterEngineJRPrintElement>)element {
  if ([((JavaLangFloat *) nil_chk([((id<OrgOssPdfreporterEngineJRPen>) nil_chk(bottomPen)) getLineWidth])) floatValue] > 0.0f) {
    float leftOffset = [((JavaLangFloat *) nil_chk([((id<OrgOssPdfreporterEngineJRPen>) nil_chk(leftPen)) getLineWidth])) floatValue] / 2 - [OrgOssPdfreporterEngineExportLegacyBorderOffset getOffsetWithOrgOssPdfreporterEngineJRPen:leftPen];
    float rightOffset = [((JavaLangFloat *) nil_chk([((id<OrgOssPdfreporterEngineJRPen>) nil_chk(rightPen)) getLineWidth])) floatValue] / 2 - [OrgOssPdfreporterEngineExportLegacyBorderOffset getOffsetWithOrgOssPdfreporterEngineJRPen:rightPen];
    [OrgOssPdfreporterEngineExportJRPdfExporter preparePenWithOrgOssPdfreporterPdfIPage:pdfPage_ withOrgOssPdfreporterEngineJRPen:bottomPen withOrgOssPdfreporterPdfIPage_LineCapEnum:[OrgOssPdfreporterPdfIPage_LineCapEnum BUTT_END]];
    if ([((id<OrgOssPdfreporterEngineJRPen>) nil_chk(bottomPen)) getLineStyleValue] == [OrgOssPdfreporterEngineTypeLineStyleEnumEnum DOUBLE]) {
      float bottomOffset = [((JavaLangFloat *) nil_chk([((id<OrgOssPdfreporterEngineJRPen>) nil_chk(bottomPen)) getLineWidth])) floatValue];
      [((id<OrgOssPdfreporterPdfIPage>) nil_chk(pdfPage_)) moveToWithFloat:[((id<OrgOssPdfreporterEngineJRPrintElement>) nil_chk(element)) getX] + [self getOffsetX] - leftOffset withFloat:[((OrgOssPdfreporterEngineJasperPrint *) nil_chk(jasperPrint_)) getPageHeight] - [((id<OrgOssPdfreporterEngineJRPrintElement>) nil_chk(element)) getY] - [self getOffsetY] - [((id<OrgOssPdfreporterEngineJRPrintElement>) nil_chk(element)) getHeight] - bottomOffset / 3];
      [((id<OrgOssPdfreporterPdfIPage>) nil_chk(pdfPage_)) lineToWithFloat:[((id<OrgOssPdfreporterEngineJRPrintElement>) nil_chk(element)) getX] + [self getOffsetX] + [((id<OrgOssPdfreporterEngineJRPrintElement>) nil_chk(element)) getWidth] + rightOffset withFloat:[((OrgOssPdfreporterEngineJasperPrint *) nil_chk(jasperPrint_)) getPageHeight] - [((id<OrgOssPdfreporterEngineJRPrintElement>) nil_chk(element)) getY] - [self getOffsetY] - [((id<OrgOssPdfreporterEngineJRPrintElement>) nil_chk(element)) getHeight] - bottomOffset / 3];
      [((id<OrgOssPdfreporterPdfIPage>) nil_chk(pdfPage_)) stroke];
      [((id<OrgOssPdfreporterPdfIPage>) nil_chk(pdfPage_)) moveToWithFloat:[((id<OrgOssPdfreporterEngineJRPrintElement>) nil_chk(element)) getX] + [self getOffsetX] + leftOffset / 3 withFloat:[((OrgOssPdfreporterEngineJasperPrint *) nil_chk(jasperPrint_)) getPageHeight] - [((id<OrgOssPdfreporterEngineJRPrintElement>) nil_chk(element)) getY] - [self getOffsetY] - [((id<OrgOssPdfreporterEngineJRPrintElement>) nil_chk(element)) getHeight] + bottomOffset / 3];
      [((id<OrgOssPdfreporterPdfIPage>) nil_chk(pdfPage_)) lineToWithFloat:[((id<OrgOssPdfreporterEngineJRPrintElement>) nil_chk(element)) getX] + [self getOffsetX] + [((id<OrgOssPdfreporterEngineJRPrintElement>) nil_chk(element)) getWidth] - rightOffset / 3 withFloat:[((OrgOssPdfreporterEngineJasperPrint *) nil_chk(jasperPrint_)) getPageHeight] - [((id<OrgOssPdfreporterEngineJRPrintElement>) nil_chk(element)) getY] - [self getOffsetY] - [((id<OrgOssPdfreporterEngineJRPrintElement>) nil_chk(element)) getHeight] + bottomOffset / 3];
      [((id<OrgOssPdfreporterPdfIPage>) nil_chk(pdfPage_)) stroke];
    }
    else {
      float bottomOffset = [OrgOssPdfreporterEngineExportLegacyBorderOffset getOffsetWithOrgOssPdfreporterEngineJRPen:bottomPen];
      [((id<OrgOssPdfreporterPdfIPage>) nil_chk(pdfPage_)) moveToWithFloat:[((id<OrgOssPdfreporterEngineJRPrintElement>) nil_chk(element)) getX] + [self getOffsetX] - leftOffset withFloat:[((OrgOssPdfreporterEngineJasperPrint *) nil_chk(jasperPrint_)) getPageHeight] - [((id<OrgOssPdfreporterEngineJRPrintElement>) nil_chk(element)) getY] - [self getOffsetY] - [((id<OrgOssPdfreporterEngineJRPrintElement>) nil_chk(element)) getHeight] + bottomOffset];
      [((id<OrgOssPdfreporterPdfIPage>) nil_chk(pdfPage_)) lineToWithFloat:[((id<OrgOssPdfreporterEngineJRPrintElement>) nil_chk(element)) getX] + [self getOffsetX] + [((id<OrgOssPdfreporterEngineJRPrintElement>) nil_chk(element)) getWidth] + rightOffset withFloat:[((OrgOssPdfreporterEngineJasperPrint *) nil_chk(jasperPrint_)) getPageHeight] - [((id<OrgOssPdfreporterEngineJRPrintElement>) nil_chk(element)) getY] - [self getOffsetY] - [((id<OrgOssPdfreporterEngineJRPrintElement>) nil_chk(element)) getHeight] + bottomOffset];
      [((id<OrgOssPdfreporterPdfIPage>) nil_chk(pdfPage_)) stroke];
    }
  }
}

- (void)exportRightPenWithOrgOssPdfreporterEngineJRPen:(id<OrgOssPdfreporterEngineJRPen>)topPen
                      withOrgOssPdfreporterEngineJRPen:(id<OrgOssPdfreporterEngineJRPen>)bottomPen
                      withOrgOssPdfreporterEngineJRPen:(id<OrgOssPdfreporterEngineJRPen>)rightPen
             withOrgOssPdfreporterEngineJRPrintElement:(id<OrgOssPdfreporterEngineJRPrintElement>)element {
  if ([((JavaLangFloat *) nil_chk([((id<OrgOssPdfreporterEngineJRPen>) nil_chk(rightPen)) getLineWidth])) floatValue] > 0.0f) {
    float topOffset = [((JavaLangFloat *) nil_chk([((id<OrgOssPdfreporterEngineJRPen>) nil_chk(topPen)) getLineWidth])) floatValue] / 2 - [OrgOssPdfreporterEngineExportLegacyBorderOffset getOffsetWithOrgOssPdfreporterEngineJRPen:topPen];
    float bottomOffset = [((JavaLangFloat *) nil_chk([((id<OrgOssPdfreporterEngineJRPen>) nil_chk(bottomPen)) getLineWidth])) floatValue] / 2 - [OrgOssPdfreporterEngineExportLegacyBorderOffset getOffsetWithOrgOssPdfreporterEngineJRPen:bottomPen];
    [OrgOssPdfreporterEngineExportJRPdfExporter preparePenWithOrgOssPdfreporterPdfIPage:pdfPage_ withOrgOssPdfreporterEngineJRPen:rightPen withOrgOssPdfreporterPdfIPage_LineCapEnum:[OrgOssPdfreporterPdfIPage_LineCapEnum BUTT_END]];
    if ([((id<OrgOssPdfreporterEngineJRPen>) nil_chk(rightPen)) getLineStyleValue] == [OrgOssPdfreporterEngineTypeLineStyleEnumEnum DOUBLE]) {
      float rightOffset = [((JavaLangFloat *) nil_chk([((id<OrgOssPdfreporterEngineJRPen>) nil_chk(rightPen)) getLineWidth])) floatValue];
      [((id<OrgOssPdfreporterPdfIPage>) nil_chk(pdfPage_)) moveToWithFloat:[((id<OrgOssPdfreporterEngineJRPrintElement>) nil_chk(element)) getX] + [self getOffsetX] + [((id<OrgOssPdfreporterEngineJRPrintElement>) nil_chk(element)) getWidth] + rightOffset / 3 withFloat:[((OrgOssPdfreporterEngineJasperPrint *) nil_chk(jasperPrint_)) getPageHeight] - [((id<OrgOssPdfreporterEngineJRPrintElement>) nil_chk(element)) getY] - [self getOffsetY] + topOffset];
      [((id<OrgOssPdfreporterPdfIPage>) nil_chk(pdfPage_)) lineToWithFloat:[((id<OrgOssPdfreporterEngineJRPrintElement>) nil_chk(element)) getX] + [self getOffsetX] + [((id<OrgOssPdfreporterEngineJRPrintElement>) nil_chk(element)) getWidth] + rightOffset / 3 withFloat:[((OrgOssPdfreporterEngineJasperPrint *) nil_chk(jasperPrint_)) getPageHeight] - [((id<OrgOssPdfreporterEngineJRPrintElement>) nil_chk(element)) getY] - [self getOffsetY] - [((id<OrgOssPdfreporterEngineJRPrintElement>) nil_chk(element)) getHeight] - bottomOffset];
      [((id<OrgOssPdfreporterPdfIPage>) nil_chk(pdfPage_)) stroke];
      [((id<OrgOssPdfreporterPdfIPage>) nil_chk(pdfPage_)) moveToWithFloat:[((id<OrgOssPdfreporterEngineJRPrintElement>) nil_chk(element)) getX] + [self getOffsetX] + [((id<OrgOssPdfreporterEngineJRPrintElement>) nil_chk(element)) getWidth] - rightOffset / 3 withFloat:[((OrgOssPdfreporterEngineJasperPrint *) nil_chk(jasperPrint_)) getPageHeight] - [((id<OrgOssPdfreporterEngineJRPrintElement>) nil_chk(element)) getY] - [self getOffsetY] - topOffset / 3];
      [((id<OrgOssPdfreporterPdfIPage>) nil_chk(pdfPage_)) lineToWithFloat:[((id<OrgOssPdfreporterEngineJRPrintElement>) nil_chk(element)) getX] + [self getOffsetX] + [((id<OrgOssPdfreporterEngineJRPrintElement>) nil_chk(element)) getWidth] - rightOffset / 3 withFloat:[((OrgOssPdfreporterEngineJasperPrint *) nil_chk(jasperPrint_)) getPageHeight] - [((id<OrgOssPdfreporterEngineJRPrintElement>) nil_chk(element)) getY] - [self getOffsetY] - [((id<OrgOssPdfreporterEngineJRPrintElement>) nil_chk(element)) getHeight] + bottomOffset / 3];
      [((id<OrgOssPdfreporterPdfIPage>) nil_chk(pdfPage_)) stroke];
    }
    else {
      float rightOffset = [OrgOssPdfreporterEngineExportLegacyBorderOffset getOffsetWithOrgOssPdfreporterEngineJRPen:rightPen];
      [((id<OrgOssPdfreporterPdfIPage>) nil_chk(pdfPage_)) moveToWithFloat:[((id<OrgOssPdfreporterEngineJRPrintElement>) nil_chk(element)) getX] + [self getOffsetX] + [((id<OrgOssPdfreporterEngineJRPrintElement>) nil_chk(element)) getWidth] - rightOffset withFloat:[((OrgOssPdfreporterEngineJasperPrint *) nil_chk(jasperPrint_)) getPageHeight] - [((id<OrgOssPdfreporterEngineJRPrintElement>) nil_chk(element)) getY] - [self getOffsetY] + topOffset];
      [((id<OrgOssPdfreporterPdfIPage>) nil_chk(pdfPage_)) lineToWithFloat:[((id<OrgOssPdfreporterEngineJRPrintElement>) nil_chk(element)) getX] + [self getOffsetX] + [((id<OrgOssPdfreporterEngineJRPrintElement>) nil_chk(element)) getWidth] - rightOffset withFloat:[((OrgOssPdfreporterEngineJasperPrint *) nil_chk(jasperPrint_)) getPageHeight] - [((id<OrgOssPdfreporterEngineJRPrintElement>) nil_chk(element)) getY] - [self getOffsetY] - [((id<OrgOssPdfreporterEngineJRPrintElement>) nil_chk(element)) getHeight] - bottomOffset];
      [((id<OrgOssPdfreporterPdfIPage>) nil_chk(pdfPage_)) stroke];
    }
  }
}

+ (IOSIntArray *)toDashPatternWithFloat:(float)on
                              withFloat:(float)off {
  return [IOSIntArray arrayWithInts:(int[]){ (int) on, (int) off } count:2];
}

+ (void)drawRoundRectWithOrgOssPdfreporterPdfIPage:(id<OrgOssPdfreporterPdfIPage>)aPdfPage
                                         withFloat:(float)x
                                         withFloat:(float)y
                                         withFloat:(float)width
                                         withFloat:(float)height
                                           withInt:(int)radius {
  [((id<OrgOssPdfreporterPdfIPage>) nil_chk(aPdfPage)) roundRectangleWithFloat:(int) x withFloat:(int) y withFloat:(int) width withFloat:(int) height withInt:radius];
}

+ (void)drawEllipseWithOrgOssPdfreporterPdfIPage:(id<OrgOssPdfreporterPdfIPage>)aPdfPage
                                       withFloat:(float)x1
                                       withFloat:(float)y1
                                       withFloat:(float)x2
                                       withFloat:(float)y2 {
  [((id<OrgOssPdfreporterPdfIPage>) nil_chk(aPdfPage)) ellipseWithFloat:(int) x1 withFloat:(int) y1 withFloat:(int) x2 withFloat:(int) y2];
}

+ (id<OrgOssPdfreporterFontIFont>)toPdfFontWithOrgOssPdfreporterEngineJRFont:(id<OrgOssPdfreporterEngineJRFont>)font
                                                                    withBOOL:(BOOL)underline
                                                                    withBOOL:(BOOL)strikethrough
                                                                    withBOOL:(BOOL)superscript
                                                                    withBOOL:(BOOL)subscript {
  id<OrgOssPdfreporterFontFactoryIFontFactory> fontFactory = [OrgOssPdfreporterRegistryApiRegistry getFontFactory];
  id<OrgOssPdfreporterFontIFontManager> fontManager = [((id<OrgOssPdfreporterFontFactoryIFontFactory>) nil_chk(fontFactory)) getFontManager];
  OrgOssPdfreporterFontIFont_FontStyleEnum *style = [((id<OrgOssPdfreporterEngineJRFont>) nil_chk(font)) isBold] && [((id<OrgOssPdfreporterEngineJRFont>) nil_chk(font)) isItalic] ? [OrgOssPdfreporterFontIFont_FontStyleEnum BOLD_OBLIQUE] : [((id<OrgOssPdfreporterEngineJRFont>) nil_chk(font)) isBold] ? [OrgOssPdfreporterFontIFont_FontStyleEnum BOLD] : [((id<OrgOssPdfreporterEngineJRFont>) nil_chk(font)) isItalic] ? [OrgOssPdfreporterFontIFont_FontStyleEnum OBLIQUE] : [OrgOssPdfreporterFontIFont_FontStyleEnum PLAIN];
  id<OrgOssPdfreporterFontIFont> pdfFont = [((id<OrgOssPdfreporterFontIFontManager>) nil_chk(fontManager)) getFontWithNSString:[((id<OrgOssPdfreporterEngineJRFont>) nil_chk(font)) getFontName] withOrgOssPdfreporterFontIFont_FontStyleEnum:style];
  if (pdfFont == nil) {
    pdfFont = [((id<OrgOssPdfreporterFontIFontManager>) nil_chk(fontManager)) findFontWithNSString:[((id<OrgOssPdfreporterEngineJRFont>) nil_chk(font)) getFontName] withOrgOssPdfreporterFontIFont_FontStyleEnum:style];
  }
  OrgOssPdfreporterFontIFont_FontDecorationEnum *decoration = underline ? [OrgOssPdfreporterFontIFont_FontDecorationEnum UNDERLINE] : strikethrough ? [OrgOssPdfreporterFontIFont_FontDecorationEnum STRIKE_THROUGH] : superscript ? [OrgOssPdfreporterFontIFont_FontDecorationEnum SUPERSCRIPT] : subscript ? [OrgOssPdfreporterFontIFont_FontDecorationEnum SUBSCRIPT] : [OrgOssPdfreporterFontIFont_FontDecorationEnum NONE];
  float fontSizeScale = superscript || subscript ? 2.0f / 3 : 1.0f;
  return [((id<OrgOssPdfreporterFontIFontManager>) nil_chk(fontManager)) getModifiedFontWithOrgOssPdfreporterFontIFont:pdfFont withFloat:[((id<OrgOssPdfreporterEngineJRFont>) nil_chk(font)) getFontSize] * fontSizeScale withOrgOssPdfreporterFontIFont_FontDecorationEnum:decoration];
}

+ (void)drawParagraphWithOrgOssPdfreporterPdfIPage:(id<OrgOssPdfreporterPdfIPage>)aPdfPage
                withOrgOssPdfreporterTextParagraph:(OrgOssPdfreporterTextParagraph *)paragraph
                                         withFloat:(float)llx
                                         withFloat:(float)lly
                                         withFloat:(float)urx
                                         withFloat:(float)ury
                                         withFloat:(float)leading
  withOrgOssPdfreporterTextHorizontalAlignmentEnum:(OrgOssPdfreporterTextHorizontalAlignmentEnum *)alignment {
  [((JavaUtilLoggingLogger *) nil_chk(OrgOssPdfreporterEngineExportJRPdfExporter_logger_)) finestWithNSString:[NSString stringWithFormat:@"drawParagraph('%@', %f, %f, %f, %f, %f, %@", [((OrgOssPdfreporterTextParagraph *) nil_chk(paragraph)) getText], llx, lly, urx, ury, leading, alignment]];
  [((JavaUtilLoggingLogger *) nil_chk(OrgOssPdfreporterEngineExportJRPdfExporter_logger_)) finestWithNSString:[NSString stringWithFormat:@"Pos(x=%d, y=%d, width=%d, height=%d", (int) llx, (int) lly, (int) (urx - llx), (int) (lly - ury)]];
  float verticalAlignmentHack = [((id<OrgOssPdfreporterFontIFont>) nil_chk([((OrgOssPdfreporterTextParagraphText *) nil_chk([((OrgOssPdfreporterTextParagraph *) nil_chk(paragraph)) getFirstParagraphText])) getFont])) getSize];
  id<OrgOssPdfreporterGeometryIRectangle> rect = [((id<OrgOssPdfreporterGeometryFactoryIGeometryFactory>) nil_chk([OrgOssPdfreporterRegistryApiRegistry getGeometryFactory])) newRectangleWithFloat:(int) llx withFloat:(int) (lly - verticalAlignmentHack) withFloat:(int) (urx - llx) withFloat:(int) (lly - ury)];
  OrgOssPdfreporterPdfParagraphRenderer *renderer = [[OrgOssPdfreporterPdfParagraphRenderer alloc] initWithOrgOssPdfreporterTextParagraph:paragraph withOrgOssPdfreporterTextHorizontalAlignmentEnum:alignment withOrgOssPdfreporterGeometryIRectangle:rect];
  [((OrgOssPdfreporterPdfParagraphRenderer *) nil_chk(renderer)) renderWithOrgOssPdfreporterPdfIPage:aPdfPage withBOOL:YES];
}

+ (void)preparePenWithOrgOssPdfreporterPdfIPage:(id<OrgOssPdfreporterPdfIPage>)aPdfPage
               withOrgOssPdfreporterEngineJRPen:(id<OrgOssPdfreporterEngineJRPen>)pen
      withOrgOssPdfreporterPdfIPage_LineCapEnum:(OrgOssPdfreporterPdfIPage_LineCapEnum *)lineCap {
  float lineWidth = [((JavaLangFloat *) nil_chk([((id<OrgOssPdfreporterEngineJRPen>) nil_chk(pen)) getLineWidth])) floatValue];
  if (lineWidth <= 0) {
    return;
  }
  [((id<OrgOssPdfreporterPdfIPage>) nil_chk(aPdfPage)) setLineWidthWithFloat:lineWidth];
  [((id<OrgOssPdfreporterPdfIPage>) nil_chk(aPdfPage)) setLineCapWithOrgOssPdfreporterPdfIPage_LineCapEnum:lineCap];
  id<OrgOssPdfreporterGeometryIColor> color = [((id<OrgOssPdfreporterEngineJRPen>) nil_chk(pen)) getLineColor];
  [((id<OrgOssPdfreporterPdfIPage>) nil_chk(aPdfPage)) setRGBColorStrokeWithOrgOssPdfreporterGeometryIColor:color];
  switch ([[((id<OrgOssPdfreporterEngineJRPen>) nil_chk(pen)) getLineStyleValue] ordinal]) {
    case OrgOssPdfreporterEngineTypeLineStyleEnum_DOUBLE:
    {
      [((id<OrgOssPdfreporterPdfIPage>) nil_chk(aPdfPage)) setLineWidthWithFloat:lineWidth / 3];
      [((id<OrgOssPdfreporterPdfIPage>) nil_chk(aPdfPage)) setLineDashWithIntArray:nil withInt:0];
      break;
    }
    case OrgOssPdfreporterEngineTypeLineStyleEnum_DOTTED:
    {
      switch ([lineCap ordinal]) {
        case OrgOssPdfreporterPdfIPage_LineCap_BUTT_END:
        {
          [((id<OrgOssPdfreporterPdfIPage>) nil_chk(aPdfPage)) setLineDashWithIntArray:[OrgOssPdfreporterEngineExportJRPdfExporter toDashPatternWithFloat:lineWidth withFloat:lineWidth] withInt:0];
          break;
        }
        case OrgOssPdfreporterPdfIPage_LineCap_PROJECTING_SCUARE_END:
        {
          [((id<OrgOssPdfreporterPdfIPage>) nil_chk(aPdfPage)) setLineDashWithIntArray:[OrgOssPdfreporterEngineExportJRPdfExporter toDashPatternWithFloat:0 withFloat:2 * lineWidth] withInt:0];
          break;
        }
      }
      break;
    }
    case OrgOssPdfreporterEngineTypeLineStyleEnum_DASHED:
    {
      switch ([lineCap ordinal]) {
        case OrgOssPdfreporterPdfIPage_LineCap_BUTT_END:
        {
          [((id<OrgOssPdfreporterPdfIPage>) nil_chk(aPdfPage)) setLineDashWithIntArray:[OrgOssPdfreporterEngineExportJRPdfExporter toDashPatternWithFloat:5 * lineWidth withFloat:3 * lineWidth] withInt:0];
          break;
        }
        case OrgOssPdfreporterPdfIPage_LineCap_PROJECTING_SCUARE_END:
        {
          [((id<OrgOssPdfreporterPdfIPage>) nil_chk(aPdfPage)) setLineDashWithIntArray:[OrgOssPdfreporterEngineExportJRPdfExporter toDashPatternWithFloat:4 * lineWidth withFloat:4 * lineWidth] withInt:0];
          break;
        }
      }
      break;
    }
    case OrgOssPdfreporterEngineTypeLineStyleEnum_SOLID:
    default:
    {
      [((id<OrgOssPdfreporterPdfIPage>) nil_chk(aPdfPage)) setLineDashWithIntArray:nil withInt:0];
      break;
    }
  }
}

+ (void)registerFonts {
  @synchronized([self class]) {
    {
    }
  }
}

- (void)exportFrameWithOrgOssPdfreporterEngineJRPrintFrame:(id<OrgOssPdfreporterEngineJRPrintFrame>)frame {
  if ([((id<OrgOssPdfreporterEngineJRPrintFrame>) nil_chk(frame)) getModeValue] == [OrgOssPdfreporterEngineTypeModeEnumEnum OPAQUE]) {
    int x = [((id<OrgOssPdfreporterEngineJRPrintFrame>) nil_chk(frame)) getX] + [self getOffsetX];
    int y = [((id<OrgOssPdfreporterEngineJRPrintFrame>) nil_chk(frame)) getY] + [self getOffsetY];
    id<OrgOssPdfreporterGeometryIColor> backcolor = [((id<OrgOssPdfreporterEngineJRPrintFrame>) nil_chk(frame)) getBackcolor];
    [((id<OrgOssPdfreporterPdfIPage>) nil_chk(pdfPage_)) setRGBColorFillWithOrgOssPdfreporterGeometryIColor:backcolor];
    [((id<OrgOssPdfreporterPdfIPage>) nil_chk(pdfPage_)) rectangleWithFloat:x withFloat:[((OrgOssPdfreporterEngineJasperPrint *) nil_chk(jasperPrint_)) getPageHeight] - y withFloat:[((id<OrgOssPdfreporterEngineJRPrintFrame>) nil_chk(frame)) getWidth] withFloat:-[((id<OrgOssPdfreporterEngineJRPrintFrame>) nil_chk(frame)) getHeight]];
    [((id<OrgOssPdfreporterPdfIPage>) nil_chk(pdfPage_)) fill];
  }
  [self setFrameElementsOffsetWithOrgOssPdfreporterEngineJRPrintFrame:frame withBOOL:NO];
  @try {
    [self exportElementsWithJavaUtilCollection:[((id<OrgOssPdfreporterEngineJRPrintFrame>) nil_chk(frame)) getElements]];
  }
  @finally {
    [self restoreElementOffsets];
  }
  [self exportBoxWithOrgOssPdfreporterEngineJRLineBox:[((id<OrgOssPdfreporterEngineJRPrintFrame>) nil_chk(frame)) getLineBox] withOrgOssPdfreporterEngineJRPrintElement:frame];
}

- (void)exportGenericElementWithOrgOssPdfreporterEngineJRGenericPrintElement:(id<OrgOssPdfreporterEngineJRGenericPrintElement>)element {
  id<OrgOssPdfreporterEngineExportGenericElementPdfHandler> handler = (id<OrgOssPdfreporterEngineExportGenericElementPdfHandler>) [((OrgOssPdfreporterEngineExportGenericElementHandlerEnviroment *) nil_chk([OrgOssPdfreporterEngineExportGenericElementHandlerEnviroment getInstanceWithOrgOssPdfreporterEngineJasperReportsContext:[self getJasperReportsContext]])) getElementHandlerWithOrgOssPdfreporterEngineJRGenericElementType:[((id<OrgOssPdfreporterEngineJRGenericPrintElement>) nil_chk(element)) getGenericType] withNSString:OrgOssPdfreporterEngineExportJRPdfExporter_PDF_EXPORTER_KEY_];
  if (handler != nil) {
    [handler exportElementWithOrgOssPdfreporterEngineExportJRPdfExporterContext:exporterContext_ withOrgOssPdfreporterEngineJRGenericPrintElement:element];
  }
  else {
    [((JavaUtilLoggingLogger *) nil_chk(OrgOssPdfreporterEngineExportJRPdfExporter_logger_)) warningWithNSString:[NSString stringWithFormat:@"No PDF generic element handler for %@", [((id<OrgOssPdfreporterEngineJRGenericPrintElement>) nil_chk(element)) getGenericType]]];
  }
}

- (NSString *)getExporterKey {
  return OrgOssPdfreporterEngineExportJRPdfExporter_PDF_EXPORTER_KEY_;
}

+ (void)initialize {
  if (self == [OrgOssPdfreporterEngineExportJRPdfExporter class]) {
    OrgOssPdfreporterEngineExportJRPdfExporter_logger_ = [JavaUtilLoggingLogger getLoggerWithNSString:[[IOSClass classWithClass:[OrgOssPdfreporterEngineExportJRPdfExporter class]] getName]];
  }
}

- (void)copyAllPropertiesTo:(id)copy {
  [super copyAllPropertiesTo:copy];
  OrgOssPdfreporterEngineExportJRPdfExporter *typedCopy = (OrgOssPdfreporterEngineExportJRPdfExporter *) copy;
  typedCopy.document = document_;
  typedCopy.pdfPage = pdfPage_;
  typedCopy.progressMonitor = progressMonitor_;
  typedCopy.reportIndex = reportIndex_;
  typedCopy.forceSvgShapes = forceSvgShapes_;
  typedCopy.isCreatingBatchModeBookmarks = isCreatingBatchModeBookmarks_;
  typedCopy.isCompressed = isCompressed_;
  typedCopy.isEncrypted = isEncrypted_;
  typedCopy.is128BitKey = is128BitKey_;
  typedCopy.userPassword = userPassword_;
  typedCopy.ownerPassword = ownerPassword_;
  typedCopy.permissions = permissions_;
  typedCopy.pdfVersion = pdfVersion_;
  typedCopy.pdfJavaScript = pdfJavaScript_;
  typedCopy.printScaling = printScaling_;
  typedCopy.collapseMissingBookmarkLevels = collapseMissingBookmarkLevels_;
  typedCopy.pdfFontMap = pdfFontMap_;
  typedCopy.exporterContext = exporterContext_;
}

@end
@implementation OrgOssPdfreporterEngineExportJRPdfExporter_ExporterContext

@synthesize this$1 = this$1_;

- (NSString *)getExportPropertiesPrefix {
  return [OrgOssPdfreporterEngineExportJRPdfExporter PDF_EXPORTER_PROPERTIES_PREFIX];
}

- (id<OrgOssPdfreporterPdfIDocument>)getPdfDocument {
  return this$1_.document;
}

- (id<OrgOssPdfreporterPdfIPage>)getCurrentPage {
  return this$1_.pdfPage;
}

- (id)initWithOrgOssPdfreporterEngineExportJRPdfExporter:(OrgOssPdfreporterEngineExportJRPdfExporter *)outer$ {
  if ((self = [super initWithOrgOssPdfreporterEngineJRAbstractExporter:outer$])) {
    this$1_ = outer$;
  }
  return self;
}

- (void)copyAllPropertiesTo:(id)copy {
  [super copyAllPropertiesTo:copy];
  OrgOssPdfreporterEngineExportJRPdfExporter_ExporterContext *typedCopy = (OrgOssPdfreporterEngineExportJRPdfExporter_ExporterContext *) copy;
  typedCopy.this$1 = this$1_;
}

@end
@implementation OrgOssPdfreporterEngineExportJRPdfExporter_NullOutputStream

- (id)init {
  return [super init];
}

- (void)writeWithInt:(int)b {
}

- (void)writeWithByteArray:(IOSByteArray *)b
                   withInt:(int)off
                   withInt:(int)len {
}

- (void)writeWithByteArray:(IOSByteArray *)b {
}

@end
