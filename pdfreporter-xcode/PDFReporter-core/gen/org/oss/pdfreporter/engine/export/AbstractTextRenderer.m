//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: pdfreporter-core/src/org/oss/pdfreporter/engine/export/AbstractTextRenderer.java
//
//  Created by kendra on 9/27/13.
//

#include "IOSClass.h"
#include "java/lang/Boolean.h"
#include "java/lang/Float.h"
#include "java/lang/Integer.h"
#include "java/lang/Math.h"
#include "java/lang/StringBuilder.h"
#include "java/util/ArrayList.h"
#include "java/util/List.h"
#include "java/util/Map.h"
#include "java/util/StringTokenizer.h"
#include "java/util/logging/Logger.h"
#include "org/oss/pdfreporter/engine/DefaultJasperReportsContext.h"
#include "org/oss/pdfreporter/engine/JRLineBox.h"
#include "org/oss/pdfreporter/engine/JRParagraph.h"
#include "org/oss/pdfreporter/engine/JRPrintText.h"
#include "org/oss/pdfreporter/engine/JRStyledTextAttributeSelector.h"
#include "org/oss/pdfreporter/engine/JasperReportsContext.h"
#include "org/oss/pdfreporter/engine/TabStop.h"
#include "org/oss/pdfreporter/engine/export/AbstractTextRenderer.h"
#include "org/oss/pdfreporter/engine/type/HorizontalAlignEnum.h"
#include "org/oss/pdfreporter/engine/type/LineSpacingEnum.h"
#include "org/oss/pdfreporter/engine/type/RotationEnum.h"
#include "org/oss/pdfreporter/engine/type/VerticalAlignEnum.h"
#include "org/oss/pdfreporter/engine/util/JRStringUtil.h"
#include "org/oss/pdfreporter/engine/util/JRStyledText.h"
#include "org/oss/pdfreporter/engine/util/JRStyledTextUtil.h"
#include "org/oss/pdfreporter/engine/util/ParagraphUtil.h"
#include "org/oss/pdfreporter/font/factory/IFontFactory.h"
#include "org/oss/pdfreporter/font/text/ILineBreakMeasurer.h"
#include "org/oss/pdfreporter/font/text/ITextLayout.h"
#include "org/oss/pdfreporter/registry/ApiRegistry.h"
#include "org/oss/pdfreporter/uses/java/awt/text/AttributedString.h"
#include "org/oss/pdfreporter/uses/java/awt/text/IAttributedCharacterIterator.h"
#include "org/oss/pdfreporter/uses/java/awt/text/ICharacterIterator.h"

@implementation OrgOssPdfreporterEngineExportAbstractTextRenderer

static JavaUtilLoggingLogger * OrgOssPdfreporterEngineExportAbstractTextRenderer_logger_;

@synthesize jasperReportsContext = jasperReportsContext_;
@synthesize noBackcolorSelector = noBackcolorSelector_;
@synthesize text = text_;
@synthesize styledText = styledText_;
@synthesize allText = allText_;
@synthesize x = x_;
@synthesize y = y_;
@synthesize width = width_;
@synthesize height = height_;
@synthesize topPadding = topPadding_;
@synthesize leftPadding = leftPadding_;
@synthesize bottomPadding = bottomPadding_;
@synthesize rightPadding = rightPadding_;
@synthesize verticalAlignOffset = verticalAlignOffset_;
@synthesize drawPosY = drawPosY_;
@synthesize drawPosX = drawPosX_;
@synthesize lineHeight = lineHeight_;
@synthesize isMaxHeightReached = isMaxHeightReached_;
@synthesize segments = segments_;
@synthesize segmentIndex = segmentIndex_;
@synthesize isMinimizePrinterJobSize = isMinimizePrinterJobSize_;
@synthesize ignoreMissingFont = ignoreMissingFont_;
@synthesize fontFactory = fontFactory_;

+ (JavaUtilLoggingLogger *)logger {
  return OrgOssPdfreporterEngineExportAbstractTextRenderer_logger_;
}

- (id)initOrgOssPdfreporterEngineExportAbstractTextRendererWithOrgOssPdfreporterEngineJasperReportsContext:(id<OrgOssPdfreporterEngineJasperReportsContext>)jasperReportsContext
                                                                                                  withBOOL:(BOOL)isMinimizePrinterJobSize
                                                                                                  withBOOL:(BOOL)ignoreMissingFont {
  if ((self = [super init])) {
    isMinimizePrinterJobSize_ = YES;
    self.jasperReportsContext = jasperReportsContext;
    self.noBackcolorSelector = [OrgOssPdfreporterEngineJRStyledTextAttributeSelector getNoBackcolorSelectorWithOrgOssPdfreporterEngineJasperReportsContext:jasperReportsContext];
    self.isMinimizePrinterJobSize = isMinimizePrinterJobSize;
    self.ignoreMissingFont = ignoreMissingFont;
    self.fontFactory = [OrgOssPdfreporterRegistryApiRegistry getFontFactory];
  }
  return self;
}

- (id)initWithOrgOssPdfreporterEngineJasperReportsContext:(id<OrgOssPdfreporterEngineJasperReportsContext>)jasperReportsContext
                                                 withBOOL:(BOOL)isMinimizePrinterJobSize
                                                 withBOOL:(BOOL)ignoreMissingFont {
  return [self initOrgOssPdfreporterEngineExportAbstractTextRendererWithOrgOssPdfreporterEngineJasperReportsContext:jasperReportsContext withBOOL:isMinimizePrinterJobSize withBOOL:ignoreMissingFont];
}

- (id)initWithBOOL:(BOOL)isMinimizePrinterJobSize
          withBOOL:(BOOL)ignoreMissingFont {
  return [self initOrgOssPdfreporterEngineExportAbstractTextRendererWithOrgOssPdfreporterEngineJasperReportsContext:[OrgOssPdfreporterEngineDefaultJasperReportsContext getInstance] withBOOL:isMinimizePrinterJobSize withBOOL:ignoreMissingFont];
}

- (int)getX {
  return x_;
}

- (int)getY {
  return y_;
}

- (int)getWidth {
  return width_;
}

- (int)getHeight {
  return height_;
}

- (OrgOssPdfreporterEngineUtilJRStyledText *)getStyledText {
  return styledText_;
}

- (NSString *)getPlainText {
  return allText_;
}

- (void)initialize__WithOrgOssPdfreporterEngineJRPrintText:(id<OrgOssPdfreporterEngineJRPrintText>)text
                                                   withInt:(int)offsetX
                                                   withInt:(int)offsetY OBJC_METHOD_FAMILY_NONE {
  styledText_ = [((OrgOssPdfreporterEngineUtilJRStyledTextUtil *) nil_chk([OrgOssPdfreporterEngineUtilJRStyledTextUtil getInstanceWithOrgOssPdfreporterEngineJasperReportsContext:jasperReportsContext_])) getStyledTextWithOrgOssPdfreporterEngineJRPrintText:text withOrgOssPdfreporterEngineJRStyledTextAttributeSelector:noBackcolorSelector_];
  if (styledText_ == nil) {
    return;
  }
  allText_ = [((OrgOssPdfreporterEngineUtilJRStyledText *) nil_chk(styledText_)) getText];
  x_ = [((id<OrgOssPdfreporterEngineJRPrintText>) nil_chk(text)) getX] + offsetX;
  y_ = [((id<OrgOssPdfreporterEngineJRPrintText>) nil_chk(text)) getY] + offsetY;
  width_ = [((id<OrgOssPdfreporterEngineJRPrintText>) nil_chk(text)) getWidth];
  height_ = [((id<OrgOssPdfreporterEngineJRPrintText>) nil_chk(text)) getHeight];
  topPadding_ = [((JavaLangInteger *) nil_chk([((id<OrgOssPdfreporterEngineJRLineBox>) nil_chk([((id<OrgOssPdfreporterEngineJRPrintText>) nil_chk(text)) getLineBox])) getTopPadding])) intValue];
  leftPadding_ = [((JavaLangInteger *) nil_chk([((id<OrgOssPdfreporterEngineJRLineBox>) nil_chk([((id<OrgOssPdfreporterEngineJRPrintText>) nil_chk(text)) getLineBox])) getLeftPadding])) intValue];
  bottomPadding_ = [((JavaLangInteger *) nil_chk([((id<OrgOssPdfreporterEngineJRLineBox>) nil_chk([((id<OrgOssPdfreporterEngineJRPrintText>) nil_chk(text)) getLineBox])) getBottomPadding])) intValue];
  rightPadding_ = [((JavaLangInteger *) nil_chk([((id<OrgOssPdfreporterEngineJRLineBox>) nil_chk([((id<OrgOssPdfreporterEngineJRPrintText>) nil_chk(text)) getLineBox])) getRightPadding])) intValue];
  switch ([[((id<OrgOssPdfreporterEngineJRPrintText>) nil_chk(text)) getRotationValue] ordinal]) {
    case OrgOssPdfreporterEngineTypeRotationEnum_LEFT:
    {
      y_ = [((id<OrgOssPdfreporterEngineJRPrintText>) nil_chk(text)) getY] + offsetY + [((id<OrgOssPdfreporterEngineJRPrintText>) nil_chk(text)) getHeight];
      width_ = [((id<OrgOssPdfreporterEngineJRPrintText>) nil_chk(text)) getHeight];
      height_ = [((id<OrgOssPdfreporterEngineJRPrintText>) nil_chk(text)) getWidth];
      int tmpPadding = topPadding_;
      topPadding_ = leftPadding_;
      leftPadding_ = bottomPadding_;
      bottomPadding_ = rightPadding_;
      rightPadding_ = tmpPadding;
      break;
    }
    case OrgOssPdfreporterEngineTypeRotationEnum_RIGHT:
    {
      x_ = [((id<OrgOssPdfreporterEngineJRPrintText>) nil_chk(text)) getX] + offsetX + [((id<OrgOssPdfreporterEngineJRPrintText>) nil_chk(text)) getWidth];
      width_ = [((id<OrgOssPdfreporterEngineJRPrintText>) nil_chk(text)) getHeight];
      height_ = [((id<OrgOssPdfreporterEngineJRPrintText>) nil_chk(text)) getWidth];
      int tmpPadding = topPadding_;
      topPadding_ = rightPadding_;
      rightPadding_ = bottomPadding_;
      bottomPadding_ = leftPadding_;
      leftPadding_ = tmpPadding;
      break;
    }
    case OrgOssPdfreporterEngineTypeRotationEnum_UPSIDE_DOWN:
    {
      int tmpPadding = topPadding_;
      x_ = [((id<OrgOssPdfreporterEngineJRPrintText>) nil_chk(text)) getX] + offsetX + [((id<OrgOssPdfreporterEngineJRPrintText>) nil_chk(text)) getWidth];
      y_ = [((id<OrgOssPdfreporterEngineJRPrintText>) nil_chk(text)) getY] + offsetY + [((id<OrgOssPdfreporterEngineJRPrintText>) nil_chk(text)) getHeight];
      topPadding_ = bottomPadding_;
      bottomPadding_ = tmpPadding;
      tmpPadding = leftPadding_;
      leftPadding_ = rightPadding_;
      rightPadding_ = tmpPadding;
      break;
    }
    case OrgOssPdfreporterEngineTypeRotationEnum_NONE:
    default:
    {
    }
  }
  self.text = text;
  verticalAlignOffset_ = 0.0f;
  switch ([[((id<OrgOssPdfreporterEngineJRPrintText>) nil_chk(text)) getVerticalAlignmentValue] ordinal]) {
    case OrgOssPdfreporterEngineTypeVerticalAlignEnum_TOP:
    {
      verticalAlignOffset_ = 0.0f;
      break;
    }
    case OrgOssPdfreporterEngineTypeVerticalAlignEnum_MIDDLE:
    {
      verticalAlignOffset_ = (height_ - topPadding_ - bottomPadding_ - [((id<OrgOssPdfreporterEngineJRPrintText>) nil_chk(text)) getTextHeight]) / 2.0f;
      break;
    }
    case OrgOssPdfreporterEngineTypeVerticalAlignEnum_BOTTOM:
    {
      verticalAlignOffset_ = height_ - topPadding_ - bottomPadding_ - [((id<OrgOssPdfreporterEngineJRPrintText>) nil_chk(text)) getTextHeight];
      break;
    }
    default:
    {
      verticalAlignOffset_ = 0.0f;
    }
  }
  drawPosY_ = 0;
  drawPosX_ = 0;
  isMaxHeightReached_ = NO;
}

- (void)render {
  id<OrgOssPdfreporterUsesJavaAwtTextIAttributedCharacterIterator> allParagraphs = [((OrgOssPdfreporterUsesJavaAwtTextAttributedString *) nil_chk([((OrgOssPdfreporterEngineUtilJRStyledText *) nil_chk(styledText_)) getAwtAttributedStringWithOrgOssPdfreporterEngineJasperReportsContext:jasperReportsContext_ withBOOL:ignoreMissingFont_])) getIterator];
  int tokenPosition = 0;
  int lastParagraphStart = 0;
  NSString *lastParagraphText = nil;
  JavaUtilStringTokenizer *tkzer = [[JavaUtilStringTokenizer alloc] initWithNSString:allText_ withNSString:@"\n" withBOOL:YES];
  while ([((JavaUtilStringTokenizer *) nil_chk(tkzer)) hasMoreTokens] && !isMaxHeightReached_) {
    NSString *token = [((JavaUtilStringTokenizer *) nil_chk(tkzer)) nextToken];
    if ([@"\n" isEqual:token]) {
      [self renderParagraphWithOrgOssPdfreporterUsesJavaAwtTextIAttributedCharacterIterator:allParagraphs withInt:lastParagraphStart withNSString:lastParagraphText];
      lastParagraphStart = tokenPosition + ([((JavaUtilStringTokenizer *) nil_chk(tkzer)) hasMoreTokens] || tokenPosition == 0 ? 1 : 0);
      lastParagraphText = nil;
    }
    else {
      lastParagraphStart = tokenPosition;
      lastParagraphText = token;
    }
    tokenPosition += [((NSString *) nil_chk(token)) length];
  }
  if (!isMaxHeightReached_ && lastParagraphStart < [((NSString *) nil_chk(allText_)) length]) {
    [self renderParagraphWithOrgOssPdfreporterUsesJavaAwtTextIAttributedCharacterIterator:allParagraphs withInt:lastParagraphStart withNSString:lastParagraphText];
  }
}

- (void)renderParagraphWithOrgOssPdfreporterUsesJavaAwtTextIAttributedCharacterIterator:(id<OrgOssPdfreporterUsesJavaAwtTextIAttributedCharacterIterator>)allParagraphs
                                                                                withInt:(int)lastParagraphStart
                                                                           withNSString:(NSString *)lastParagraphText {
  id<OrgOssPdfreporterUsesJavaAwtTextIAttributedCharacterIterator> paragraph = nil;
  if (lastParagraphText == nil) {
    lastParagraphText = @" ";
    paragraph = [((OrgOssPdfreporterUsesJavaAwtTextAttributedString *) [[OrgOssPdfreporterUsesJavaAwtTextAttributedString alloc] initWithNSString:lastParagraphText withJavaUtilMap:[((id<OrgOssPdfreporterUsesJavaAwtTextIAttributedCharacterIterator>) nil_chk([((OrgOssPdfreporterUsesJavaAwtTextAttributedString *) [[OrgOssPdfreporterUsesJavaAwtTextAttributedString alloc] initWithOrgOssPdfreporterUsesJavaAwtTextIAttributedCharacterIterator:allParagraphs withInt:lastParagraphStart withInt:lastParagraphStart + [lastParagraphText length]]) getIterator])) getAttributes]]) getIterator];
  }
  else {
    paragraph = [((OrgOssPdfreporterUsesJavaAwtTextAttributedString *) [[OrgOssPdfreporterUsesJavaAwtTextAttributedString alloc] initWithOrgOssPdfreporterUsesJavaAwtTextIAttributedCharacterIterator:allParagraphs withInt:lastParagraphStart withInt:lastParagraphStart + [lastParagraphText length]]) getIterator];
  }
  id<JavaUtilList> tabIndexes = [OrgOssPdfreporterEngineUtilJRStringUtil getTabIndexesWithNSString:lastParagraphText];
  int currentTab = 0;
  int lines = 0;
  float endX = 0;
  OrgOssPdfreporterEngineTabStop *nextTabStop = nil;
  BOOL requireNextWord = NO;
  id<OrgOssPdfreporterFontTextILineBreakMeasurer> lineMeasurer = [((id<OrgOssPdfreporterFontFactoryIFontFactory>) nil_chk(fontFactory_)) newLineBreakMeasurerWithOrgOssPdfreporterUsesJavaAwtTextAttributedString:[[OrgOssPdfreporterUsesJavaAwtTextAttributedString alloc] initWithOrgOssPdfreporterUsesJavaAwtTextIAttributedCharacterIterator:paragraph]];
  while ([((id<OrgOssPdfreporterFontTextILineBreakMeasurer>) nil_chk(lineMeasurer)) getPosition] < [((id<OrgOssPdfreporterUsesJavaAwtTextIAttributedCharacterIterator>) nil_chk(paragraph)) getEndIndex] && !isMaxHeightReached_) {
    BOOL lineComplete = NO;
    float maxAscent = 0;
    float maxDescent = 0;
    float maxLeading = 0;
    segments_ = [[JavaUtilArrayList alloc] initWithInt:1];
    OrgOssPdfreporterEngineExportAbstractTextRenderer_TabSegment *oldSegment = nil;
    OrgOssPdfreporterEngineExportAbstractTextRenderer_TabSegment *crtSegment = nil;
    while (!lineComplete) {
      int tabIndexOrEndIndex = (tabIndexes == nil || currentTab >= [((id<JavaUtilList>) nil_chk(tabIndexes)) size] ? [((id<OrgOssPdfreporterUsesJavaAwtTextIAttributedCharacterIterator>) nil_chk(paragraph)) getEndIndex] : [((JavaLangInteger *) nil_chk([((id<JavaUtilList>) nil_chk(tabIndexes)) getWithInt:currentTab])) intValue] + 1);
      float startX = ([((id<OrgOssPdfreporterFontTextILineBreakMeasurer>) nil_chk(lineMeasurer)) getPosition] == 0 ? [((JavaLangInteger *) nil_chk([((id<OrgOssPdfreporterEngineJRParagraph>) nil_chk([((id<OrgOssPdfreporterEngineJRPrintText>) nil_chk(text_)) getParagraph])) getFirstLineIndent])) intValue] : 0) + leftPadding_;
      endX = width_ - [((JavaLangInteger *) nil_chk([((id<OrgOssPdfreporterEngineJRParagraph>) nil_chk([((id<OrgOssPdfreporterEngineJRPrintText>) nil_chk(text_)) getParagraph])) getRightIndent])) intValue] - rightPadding_;
      endX = endX < startX ? startX : endX;
      int startIndex = [((id<OrgOssPdfreporterFontTextILineBreakMeasurer>) nil_chk(lineMeasurer)) getPosition];
      float rightX = 0;
      if ([((id<JavaUtilList>) nil_chk(segments_)) size] == 0) {
        rightX = startX;
      }
      else {
        rightX = ((OrgOssPdfreporterEngineExportAbstractTextRenderer_TabSegment *) nil_chk(oldSegment)).rightX;
        nextTabStop = [OrgOssPdfreporterEngineUtilParagraphUtil getNextTabStopWithOrgOssPdfreporterEngineJRParagraph:[((id<OrgOssPdfreporterEngineJRPrintText>) nil_chk(text_)) getParagraph] withFloat:endX withFloat:rightX];
      }
      float availableWidth = endX - [((JavaLangInteger *) nil_chk([((id<OrgOssPdfreporterEngineJRParagraph>) nil_chk([((id<OrgOssPdfreporterEngineJRPrintText>) nil_chk(text_)) getParagraph])) getLeftIndent])) intValue] - [OrgOssPdfreporterEngineUtilParagraphUtil getSegmentOffsetWithOrgOssPdfreporterEngineTabStop:nextTabStop withFloat:rightX];
      [((JavaUtilLoggingLogger *) nil_chk(OrgOssPdfreporterEngineExportAbstractTextRenderer_logger_)) finestWithNSString:[NSString stringWithFormat:@"width: %f, endLimit: %d, requireWord: %@", availableWidth, tabIndexOrEndIndex, [JavaLangBoolean toStringWithBOOL:requireNextWord]]];
      int beginIndex = [((id<OrgOssPdfreporterFontTextILineBreakMeasurer>) nil_chk(lineMeasurer)) getPosition];
      id<OrgOssPdfreporterFontTextITextLayout> layout = [((id<OrgOssPdfreporterFontTextILineBreakMeasurer>) nil_chk(lineMeasurer)) nextLayoutWithFloat:availableWidth withInt:tabIndexOrEndIndex withBOOL:requireNextWord];
      int endIndex = [((id<OrgOssPdfreporterFontTextILineBreakMeasurer>) nil_chk(lineMeasurer)) getPosition];
      [self logTextWithInt:beginIndex withInt:endIndex withOrgOssPdfreporterFontTextITextLayout:layout withOrgOssPdfreporterUsesJavaAwtTextIAttributedCharacterIterator:paragraph];
      if (layout != nil) {
        OrgOssPdfreporterUsesJavaAwtTextAttributedString *tmpText = [[OrgOssPdfreporterUsesJavaAwtTextAttributedString alloc] initWithOrgOssPdfreporterUsesJavaAwtTextIAttributedCharacterIterator:paragraph withInt:startIndex withInt:startIndex + [layout getCharacterCount]];
        if ([((id<OrgOssPdfreporterEngineJRPrintText>) nil_chk(text_)) getHorizontalAlignmentValue] == [OrgOssPdfreporterEngineTypeHorizontalAlignEnumEnum JUSTIFIED] && [((id<OrgOssPdfreporterFontTextILineBreakMeasurer>) nil_chk(lineMeasurer)) getPosition] < [((id<OrgOssPdfreporterUsesJavaAwtTextIAttributedCharacterIterator>) nil_chk(paragraph)) getEndIndex]) {
          layout = [layout getJustifiedLayoutWithFloat:availableWidth];
        }
        maxAscent = [JavaLangMath maxWithFloat:maxAscent withFloat:[layout getAscent]];
        maxDescent = [JavaLangMath maxWithFloat:maxDescent withFloat:[layout getDescent]];
        maxLeading = [JavaLangMath maxWithFloat:maxLeading withFloat:[layout getLeading]];
        crtSegment = [[OrgOssPdfreporterEngineExportAbstractTextRenderer_TabSegment alloc] init];
        ((OrgOssPdfreporterEngineExportAbstractTextRenderer_TabSegment *) nil_chk(crtSegment)).layout = layout;
        ((OrgOssPdfreporterEngineExportAbstractTextRenderer_TabSegment *) nil_chk(crtSegment)).as = tmpText;
        ((OrgOssPdfreporterEngineExportAbstractTextRenderer_TabSegment *) nil_chk(crtSegment)).text = [((NSString *) nil_chk(lastParagraphText)) substring:startIndex endIndex:startIndex + [layout getCharacterCount]];
        float leftX = [OrgOssPdfreporterEngineUtilParagraphUtil getLeftXWithOrgOssPdfreporterEngineTabStop:nextTabStop withFloat:[layout getAdvance]];
        if (rightX > leftX) {
          ((OrgOssPdfreporterEngineExportAbstractTextRenderer_TabSegment *) nil_chk(crtSegment)).leftX = rightX;
          ((OrgOssPdfreporterEngineExportAbstractTextRenderer_TabSegment *) nil_chk(crtSegment)).rightX = rightX + [layout getAdvance];
        }
        else {
          ((OrgOssPdfreporterEngineExportAbstractTextRenderer_TabSegment *) nil_chk(crtSegment)).leftX = leftX;
          ((OrgOssPdfreporterEngineExportAbstractTextRenderer_TabSegment *) nil_chk(crtSegment)).rightX = [OrgOssPdfreporterEngineUtilParagraphUtil getRightXWithOrgOssPdfreporterEngineTabStop:nextTabStop withFloat:[layout getAdvance]];
        }
        [((id<JavaUtilList>) nil_chk(segments_)) addWithId:crtSegment];
      }
      requireNextWord = YES;
      if ([((id<OrgOssPdfreporterFontTextILineBreakMeasurer>) nil_chk(lineMeasurer)) getPosition] == tabIndexOrEndIndex) {
        currentTab++;
      }
      if ([((id<OrgOssPdfreporterFontTextILineBreakMeasurer>) nil_chk(lineMeasurer)) getPosition] == [((id<OrgOssPdfreporterUsesJavaAwtTextIAttributedCharacterIterator>) nil_chk(paragraph)) getEndIndex]) {
        lineComplete = YES;
        nextTabStop = nil;
      }
      else {
        if ([((id<OrgOssPdfreporterFontTextILineBreakMeasurer>) nil_chk(lineMeasurer)) getPosition] == tabIndexOrEndIndex) {
          if (((OrgOssPdfreporterEngineExportAbstractTextRenderer_TabSegment *) nil_chk(crtSegment)).rightX >= [((OrgOssPdfreporterEngineTabStop *) nil_chk([OrgOssPdfreporterEngineUtilParagraphUtil getLastTabStopWithOrgOssPdfreporterEngineJRParagraph:[((id<OrgOssPdfreporterEngineJRPrintText>) nil_chk(text_)) getParagraph] withFloat:endX])) getPosition]) {
            lineComplete = YES;
            nextTabStop = [OrgOssPdfreporterEngineUtilParagraphUtil getFirstTabStopWithOrgOssPdfreporterEngineJRParagraph:[((id<OrgOssPdfreporterEngineJRPrintText>) nil_chk(text_)) getParagraph] withFloat:endX];
          }
        }
        else {
          lineComplete = YES;
          if (layout == nil) {
            if ([((OrgOssPdfreporterEngineTabStop *) nil_chk(nextTabStop)) getPosition] == [((OrgOssPdfreporterEngineTabStop *) nil_chk([OrgOssPdfreporterEngineUtilParagraphUtil getFirstTabStopWithOrgOssPdfreporterEngineJRParagraph:[((id<OrgOssPdfreporterEngineJRPrintText>) nil_chk(text_)) getParagraph] withFloat:endX])) getPosition]) {
              nextTabStop = nil;
              requireNextWord = NO;
              OrgOssPdfreporterUsesJavaAwtTextAttributedString *tmpText = [[OrgOssPdfreporterUsesJavaAwtTextAttributedString alloc] initWithOrgOssPdfreporterUsesJavaAwtTextIAttributedCharacterIterator:paragraph withInt:startIndex withInt:startIndex + 1];
              id<OrgOssPdfreporterFontTextILineBreakMeasurer> lbm = [((id<OrgOssPdfreporterFontFactoryIFontFactory>) nil_chk(fontFactory_)) newLineBreakMeasurerWithOrgOssPdfreporterUsesJavaAwtTextAttributedString:tmpText];
              id<OrgOssPdfreporterFontTextITextLayout> tlyt = [((id<OrgOssPdfreporterFontTextILineBreakMeasurer>) nil_chk(lbm)) nextLayoutWithFloat:100];
              maxAscent = [((id<OrgOssPdfreporterFontTextITextLayout>) nil_chk(tlyt)) getAscent];
              maxDescent = [((id<OrgOssPdfreporterFontTextITextLayout>) nil_chk(tlyt)) getDescent];
              maxLeading = [((id<OrgOssPdfreporterFontTextITextLayout>) nil_chk(tlyt)) getLeading];
            }
            else {
              nextTabStop = [OrgOssPdfreporterEngineUtilParagraphUtil getFirstTabStopWithOrgOssPdfreporterEngineJRParagraph:[((id<OrgOssPdfreporterEngineJRPrintText>) nil_chk(text_)) getParagraph] withFloat:endX];
            }
          }
          else {
            nextTabStop = nil;
            requireNextWord = NO;
          }
        }
      }
      oldSegment = crtSegment;
    }
    lineHeight_ = [OrgOssPdfreporterEngineExportAbstractTextRenderer getLineHeightWithBOOL:lastParagraphStart == 0 && lines == 0 withOrgOssPdfreporterEngineJRParagraph:[((id<OrgOssPdfreporterEngineJRPrintText>) nil_chk(text_)) getParagraph] withFloat:maxLeading withFloat:maxAscent];
    if (lastParagraphStart == 0 && lines == 0) {
      lineHeight_ += [((JavaLangInteger *) nil_chk([((id<OrgOssPdfreporterEngineJRParagraph>) nil_chk([((id<OrgOssPdfreporterEngineJRPrintText>) nil_chk(text_)) getParagraph])) getSpacingBefore])) intValue];
    }
    if (drawPosY_ + lineHeight_ <= [((id<OrgOssPdfreporterEngineJRPrintText>) nil_chk(text_)) getTextHeight]) {
      lines++;
      drawPosY_ += lineHeight_;
      float lastRightX = (segments_ == nil || [((id<JavaUtilList>) nil_chk(segments_)) size] == 0 ? 0 : ((OrgOssPdfreporterEngineExportAbstractTextRenderer_TabSegment *) nil_chk([((id<JavaUtilList>) nil_chk(segments_)) getWithInt:[((id<JavaUtilList>) nil_chk(segments_)) size] - 1])).rightX);
      for (segmentIndex_ = 0; segmentIndex_ < [((id<JavaUtilList>) nil_chk(segments_)) size]; segmentIndex_++) {
        OrgOssPdfreporterEngineExportAbstractTextRenderer_TabSegment *segment = [((id<JavaUtilList>) nil_chk(segments_)) getWithInt:segmentIndex_];
        id<OrgOssPdfreporterFontTextITextLayout> layout = ((OrgOssPdfreporterEngineExportAbstractTextRenderer_TabSegment *) nil_chk(segment)).layout;
        switch ([[((id<OrgOssPdfreporterEngineJRPrintText>) nil_chk(text_)) getHorizontalAlignmentValue] ordinal]) {
          case OrgOssPdfreporterEngineTypeHorizontalAlignEnum_JUSTIFIED:
          {
            if ([((id<OrgOssPdfreporterFontTextITextLayout>) nil_chk(layout)) isLeftToRight]) {
              drawPosX_ = [((JavaLangInteger *) nil_chk([((id<OrgOssPdfreporterEngineJRParagraph>) nil_chk([((id<OrgOssPdfreporterEngineJRPrintText>) nil_chk(text_)) getParagraph])) getLeftIndent])) intValue] + ((OrgOssPdfreporterEngineExportAbstractTextRenderer_TabSegment *) nil_chk(segment)).leftX;
            }
            else {
              drawPosX_ = (endX - lastRightX + ((OrgOssPdfreporterEngineExportAbstractTextRenderer_TabSegment *) nil_chk(segment)).leftX);
            }
            break;
          }
          case OrgOssPdfreporterEngineTypeHorizontalAlignEnum_RIGHT:
          {
            drawPosX_ = (endX - lastRightX + ((OrgOssPdfreporterEngineExportAbstractTextRenderer_TabSegment *) nil_chk(segment)).leftX);
            break;
          }
          case OrgOssPdfreporterEngineTypeHorizontalAlignEnum_CENTER:
          {
            drawPosX_ = ((endX - lastRightX) / 2) + ((OrgOssPdfreporterEngineExportAbstractTextRenderer_TabSegment *) nil_chk(segment)).leftX;
            break;
          }
          case OrgOssPdfreporterEngineTypeHorizontalAlignEnum_LEFT:
          default:
          {
            drawPosX_ = [((JavaLangInteger *) nil_chk([((id<OrgOssPdfreporterEngineJRParagraph>) nil_chk([((id<OrgOssPdfreporterEngineJRPrintText>) nil_chk(text_)) getParagraph])) getLeftIndent])) intValue] + ((OrgOssPdfreporterEngineExportAbstractTextRenderer_TabSegment *) nil_chk(segment)).leftX;
          }
        }
        [self draw];
      }
      drawPosY_ += maxDescent;
    }
    else {
      isMaxHeightReached_ = YES;
    }
  }
}

- (void)logTextWithInt:(int)beginIndex
               withInt:(int)endIndex
withOrgOssPdfreporterFontTextITextLayout:(id<OrgOssPdfreporterFontTextITextLayout>)textLayout
withOrgOssPdfreporterUsesJavaAwtTextIAttributedCharacterIterator:(id<OrgOssPdfreporterUsesJavaAwtTextIAttributedCharacterIterator>)paragraph {
  if (textLayout != nil) {
    [((JavaUtilLoggingLogger *) nil_chk(OrgOssPdfreporterEngineExportAbstractTextRenderer_logger_)) finestWithNSString:[NSString stringWithFormat:@"Space advance: %f, Visible space advance: %f", [textLayout getAdvance], [textLayout getVisibleAdvance]]];
  }
  JavaLangStringBuilder *builder = [[JavaLangStringBuilder alloc] init];
  OrgOssPdfreporterUsesJavaAwtTextAttributedString *attributedText = [[OrgOssPdfreporterUsesJavaAwtTextAttributedString alloc] initWithOrgOssPdfreporterUsesJavaAwtTextIAttributedCharacterIterator:paragraph withInt:beginIndex withInt:endIndex];
  id<OrgOssPdfreporterUsesJavaAwtTextIAttributedCharacterIterator> iterator = [((OrgOssPdfreporterUsesJavaAwtTextAttributedString *) nil_chk(attributedText)) getIterator];
  for (unichar c = [((id<OrgOssPdfreporterUsesJavaAwtTextIAttributedCharacterIterator>) nil_chk(iterator)) first]; c != OrgOssPdfreporterUsesJavaAwtTextICharacterIterator_DONE; c = [((id<OrgOssPdfreporterUsesJavaAwtTextIAttributedCharacterIterator>) nil_chk(iterator)) next]) {
    (void) [((JavaLangStringBuilder *) nil_chk(builder)) appendWithUnichar:c];
  }
  [((JavaUtilLoggingLogger *) nil_chk(OrgOssPdfreporterEngineExportAbstractTextRenderer_logger_)) finestWithNSString:[NSString stringWithFormat:@"Pos: %d, next: %d, text: %@", beginIndex, endIndex, [((JavaLangStringBuilder *) nil_chk(builder)) description]]];
}

- (void)draw {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
}

+ (float)getLineHeightWithBOOL:(BOOL)isFirstLine
withOrgOssPdfreporterEngineJRParagraph:(id<OrgOssPdfreporterEngineJRParagraph>)paragraph
                     withFloat:(float)maxLeading
                     withFloat:(float)maxAscent {
  float lineHeight = 0;
  switch ([[((id<OrgOssPdfreporterEngineJRParagraph>) nil_chk(paragraph)) getLineSpacing] ordinal]) {
    case OrgOssPdfreporterEngineTypeLineSpacingEnum_SINGLE:
    default:
    {
      lineHeight = maxLeading + 1.0f * maxAscent;
      break;
    }
    case OrgOssPdfreporterEngineTypeLineSpacingEnum_ONE_AND_HALF:
    {
      if (isFirstLine) {
        lineHeight = maxLeading + 1.0f * maxAscent;
      }
      else {
        lineHeight = maxLeading + 1.5f * maxAscent;
      }
      break;
    }
    case OrgOssPdfreporterEngineTypeLineSpacingEnum_DOUBLE:
    {
      if (isFirstLine) {
        lineHeight = maxLeading + 1.0f * maxAscent;
      }
      else {
        lineHeight = maxLeading + 2.0f * maxAscent;
      }
      break;
    }
    case OrgOssPdfreporterEngineTypeLineSpacingEnum_PROPORTIONAL:
    {
      if (isFirstLine) {
        lineHeight = maxLeading + 1.0f * maxAscent;
      }
      else {
        lineHeight = maxLeading + [((JavaLangFloat *) nil_chk([((id<OrgOssPdfreporterEngineJRParagraph>) nil_chk(paragraph)) getLineSpacingSize])) floatValue] * maxAscent;
      }
      break;
    }
    case OrgOssPdfreporterEngineTypeLineSpacingEnum_AT_LEAST:
    {
      if (isFirstLine) {
        lineHeight = maxLeading + 1.0f * maxAscent;
      }
      else {
        lineHeight = [JavaLangMath maxWithFloat:maxLeading + 1.0f * maxAscent withFloat:[((JavaLangFloat *) nil_chk([((id<OrgOssPdfreporterEngineJRParagraph>) nil_chk(paragraph)) getLineSpacingSize])) floatValue]];
      }
      break;
    }
    case OrgOssPdfreporterEngineTypeLineSpacingEnum_FIXED:
    {
      if (isFirstLine) {
        lineHeight = maxLeading + 1.0f * maxAscent;
      }
      else {
        lineHeight = [((JavaLangFloat *) nil_chk([((id<OrgOssPdfreporterEngineJRParagraph>) nil_chk(paragraph)) getLineSpacingSize])) floatValue];
      }
      break;
    }
  }
  return lineHeight;
}

+ (void)initialize {
  if (self == [OrgOssPdfreporterEngineExportAbstractTextRenderer class]) {
    OrgOssPdfreporterEngineExportAbstractTextRenderer_logger_ = [JavaUtilLoggingLogger getLoggerWithNSString:[[IOSClass classWithClass:[OrgOssPdfreporterEngineExportAbstractTextRenderer class]] getName]];
  }
}

- (void)copyAllPropertiesTo:(id)copy {
  [super copyAllPropertiesTo:copy];
  OrgOssPdfreporterEngineExportAbstractTextRenderer *typedCopy = (OrgOssPdfreporterEngineExportAbstractTextRenderer *) copy;
  typedCopy.jasperReportsContext = jasperReportsContext_;
  typedCopy.noBackcolorSelector = noBackcolorSelector_;
  typedCopy.text = text_;
  typedCopy.styledText = styledText_;
  typedCopy.allText = allText_;
  typedCopy.x = x_;
  typedCopy.y = y_;
  typedCopy.width = width_;
  typedCopy.height = height_;
  typedCopy.topPadding = topPadding_;
  typedCopy.leftPadding = leftPadding_;
  typedCopy.bottomPadding = bottomPadding_;
  typedCopy.rightPadding = rightPadding_;
  typedCopy.verticalAlignOffset = verticalAlignOffset_;
  typedCopy.drawPosY = drawPosY_;
  typedCopy.drawPosX = drawPosX_;
  typedCopy.lineHeight = lineHeight_;
  typedCopy.isMaxHeightReached = isMaxHeightReached_;
  typedCopy.segments = segments_;
  typedCopy.segmentIndex = segmentIndex_;
  typedCopy.isMinimizePrinterJobSize = isMinimizePrinterJobSize_;
  typedCopy.ignoreMissingFont = ignoreMissingFont_;
  typedCopy.fontFactory = fontFactory_;
}

@end
@implementation OrgOssPdfreporterEngineExportAbstractTextRenderer_TabSegment

@synthesize layout = layout_;
@synthesize as = as_;
@synthesize text = text_;
@synthesize leftX = leftX_;
@synthesize rightX = rightX_;

- (id)init {
  return [super init];
}

- (void)copyAllPropertiesTo:(id)copy {
  [super copyAllPropertiesTo:copy];
  OrgOssPdfreporterEngineExportAbstractTextRenderer_TabSegment *typedCopy = (OrgOssPdfreporterEngineExportAbstractTextRenderer_TabSegment *) copy;
  typedCopy.layout = layout_;
  typedCopy.as = as_;
  typedCopy.text = text_;
  typedCopy.leftX = leftX_;
  typedCopy.rightX = rightX_;
}

@end
