//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: pdfreporter-core/src/org/oss/pdfreporter/engine/export/DefaultExporterFilterFactory.java
//
//  Created by kendra on 9/27/13.
//

#include "java/util/ArrayList.h"
#include "java/util/Iterator.h"
#include "java/util/List.h"
#include "org/oss/pdfreporter/engine/DefaultJasperReportsContext.h"
#include "org/oss/pdfreporter/engine/JRPropertiesUtil.h"
#include "org/oss/pdfreporter/engine/JasperPrint.h"
#include "org/oss/pdfreporter/engine/JasperReportsContext.h"
#include "org/oss/pdfreporter/engine/export/DefaultExporterFilterFactory.h"
#include "org/oss/pdfreporter/engine/export/ExporterFilter.h"
#include "org/oss/pdfreporter/engine/export/ExporterFilterContainer.h"
#include "org/oss/pdfreporter/engine/export/ExporterFilterFactory.h"
#include "org/oss/pdfreporter/engine/export/ExporterFilterFactoryUtil.h"
#include "org/oss/pdfreporter/engine/export/JRExporterContext.h"

@implementation OrgOssPdfreporterEngineExportDefaultExporterFilterFactory

static NSString * OrgOssPdfreporterEngineExportDefaultExporterFilterFactory_PROPERTY_EXPORTER_FILTER_FACTORY_PREFIX_ = @"net.sf.jasperreports.export.filter.factory.";

+ (NSString *)PROPERTY_EXPORTER_FILTER_FACTORY_PREFIX {
  return OrgOssPdfreporterEngineExportDefaultExporterFilterFactory_PROPERTY_EXPORTER_FILTER_FACTORY_PREFIX_;
}

- (id<OrgOssPdfreporterEngineExportExporterFilter>)getFilterWithOrgOssPdfreporterEngineExportJRExporterContext:(id<OrgOssPdfreporterEngineExportJRExporterContext>)exporterContext {
  id<JavaUtilList> factories = [self getAllFilterFactoriesWithOrgOssPdfreporterEngineJasperPrint:[((id<OrgOssPdfreporterEngineExportJRExporterContext>) nil_chk(exporterContext)) getExportedReport]];
  id<JavaUtilList> filters = [[JavaUtilArrayList alloc] initWithInt:[((id<JavaUtilList>) nil_chk(factories)) size]];
  for (id<JavaUtilIterator> it = [((id<JavaUtilList>) nil_chk(factories)) iterator]; [((id<JavaUtilIterator>) nil_chk(it)) hasNext]; ) {
    id<OrgOssPdfreporterEngineExportExporterFilterFactory> factory = [((id<JavaUtilIterator>) nil_chk(it)) next];
    id<OrgOssPdfreporterEngineExportExporterFilter> filter = [((id<OrgOssPdfreporterEngineExportExporterFilterFactory>) nil_chk(factory)) getFilterWithOrgOssPdfreporterEngineExportJRExporterContext:exporterContext];
    if (filter != nil) {
      [((id<JavaUtilList>) nil_chk(filters)) addWithId:filter];
    }
  }
  id<OrgOssPdfreporterEngineExportExporterFilter> filter;
  if ([((id<JavaUtilList>) nil_chk(filters)) isEmpty]) {
    filter = nil;
  }
  else if ([((id<JavaUtilList>) nil_chk(filters)) size] == 1) {
    filter = [((id<JavaUtilList>) nil_chk(filters)) getWithInt:0];
  }
  else {
    filter = [[OrgOssPdfreporterEngineExportExporterFilterContainer alloc] initWithJavaUtilList:filters];
  }
  return filter;
}

- (id<JavaUtilList>)getAllFilterFactoriesWithOrgOssPdfreporterEngineJasperReportsContext:(id<OrgOssPdfreporterEngineJasperReportsContext>)jasperReportsContext
                                                  withOrgOssPdfreporterEngineJasperPrint:(OrgOssPdfreporterEngineJasperPrint *)report {
  id<JavaUtilList> factoryProps = [((OrgOssPdfreporterEngineJRPropertiesUtil *) nil_chk([OrgOssPdfreporterEngineJRPropertiesUtil getInstanceWithOrgOssPdfreporterEngineJasperReportsContext:jasperReportsContext])) getAllPropertiesWithOrgOssPdfreporterEngineJRPropertiesHolder:report withNSString:OrgOssPdfreporterEngineExportDefaultExporterFilterFactory_PROPERTY_EXPORTER_FILTER_FACTORY_PREFIX_];
  id<JavaUtilList> factories = [[JavaUtilArrayList alloc] initWithInt:[((id<JavaUtilList>) nil_chk(factoryProps)) size]];
  for (id<JavaUtilIterator> it = [((id<JavaUtilList>) nil_chk(factoryProps)) iterator]; [((id<JavaUtilIterator>) nil_chk(it)) hasNext]; ) {
    OrgOssPdfreporterEngineJRPropertiesUtil_PropertySuffix *prop = [((id<JavaUtilIterator>) nil_chk(it)) next];
    id<OrgOssPdfreporterEngineExportExporterFilterFactory> factory = [self getFilterFactoryWithNSString:[((OrgOssPdfreporterEngineJRPropertiesUtil_PropertySuffix *) nil_chk(prop)) getValue]];
    [((id<JavaUtilList>) nil_chk(factories)) addWithId:factory];
  }
  return factories;
}

- (id<JavaUtilList>)getAllFilterFactoriesWithOrgOssPdfreporterEngineJasperPrint:(OrgOssPdfreporterEngineJasperPrint *)report {
  return [self getAllFilterFactoriesWithOrgOssPdfreporterEngineJasperReportsContext:[OrgOssPdfreporterEngineDefaultJasperReportsContext getInstance] withOrgOssPdfreporterEngineJasperPrint:report];
}

- (id<OrgOssPdfreporterEngineExportExporterFilterFactory>)getFilterFactoryWithNSString:(NSString *)factoryClassName {
  return [OrgOssPdfreporterEngineExportExporterFilterFactoryUtil getFilterFactoryWithNSString:factoryClassName];
}

- (id)init {
  return [super init];
}

@end
