//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: pdfreporter-core/src/org/oss/pdfreporter/engine/JasperCompileManager.java
//
//  Created by kendra on 9/27/13.
//

#include "IOSClass.h"
#include "java/io/File.h"
#include "java/io/InputStream.h"
#include "java/io/OutputStream.h"
#include "java/util/Collection.h"
#include "java/util/logging/Logger.h"
#include "org/oss/pdfreporter/compilers/jeval/JEvalCompiler.h"
#include "org/oss/pdfreporter/crosstabs/JRCrosstab.h"
#include "org/oss/pdfreporter/engine/DefaultJasperReportsContext.h"
#include "org/oss/pdfreporter/engine/JRDataset.h"
#include "org/oss/pdfreporter/engine/JRException.h"
#include "org/oss/pdfreporter/engine/JRReport.h"
#include "org/oss/pdfreporter/engine/JasperCompileManager.h"
#include "org/oss/pdfreporter/engine/JasperReport.h"
#include "org/oss/pdfreporter/engine/JasperReportsContext.h"
#include "org/oss/pdfreporter/engine/design/JRCompiler.h"
#include "org/oss/pdfreporter/engine/design/JRVerifier.h"
#include "org/oss/pdfreporter/engine/design/JasperDesign.h"
#include "org/oss/pdfreporter/engine/fill/JREvaluator.h"
#include "org/oss/pdfreporter/engine/util/JRSaver.h"
#include "org/oss/pdfreporter/engine/xml/JRXmlLoader.h"
#include "org/oss/pdfreporter/progress/IProgressHandler.h"
#include "org/oss/pdfreporter/progress/ProgressManager.h"

@implementation OrgOssPdfreporterEngineJasperCompileManager

static JavaUtilLoggingLogger * OrgOssPdfreporterEngineJasperCompileManager_logger_;
static NSString * OrgOssPdfreporterEngineJasperCompileManager_JEVAL_COMPILER_;

@synthesize jasperReportsContext = jasperReportsContext_;

+ (JavaUtilLoggingLogger *)logger {
  return OrgOssPdfreporterEngineJasperCompileManager_logger_;
}

+ (NSString *)JEVAL_COMPILER {
  return OrgOssPdfreporterEngineJasperCompileManager_JEVAL_COMPILER_;
}

- (id)initWithOrgOssPdfreporterEngineJasperReportsContext:(id<OrgOssPdfreporterEngineJasperReportsContext>)jasperReportsContext {
  if ((self = [super init])) {
    self.jasperReportsContext = jasperReportsContext;
  }
  return self;
}

+ (OrgOssPdfreporterEngineJasperCompileManager *)getDefaultInstance {
  return [[OrgOssPdfreporterEngineJasperCompileManager alloc] initWithOrgOssPdfreporterEngineJasperReportsContext:[OrgOssPdfreporterEngineDefaultJasperReportsContext getInstance]];
}

+ (OrgOssPdfreporterEngineJasperCompileManager *)getInstanceWithOrgOssPdfreporterEngineJasperReportsContext:(id<OrgOssPdfreporterEngineJasperReportsContext>)jasperReportsContext {
  return [[OrgOssPdfreporterEngineJasperCompileManager alloc] initWithOrgOssPdfreporterEngineJasperReportsContext:jasperReportsContext];
}

- (NSString *)compileToFileWithNSString:(NSString *)sourceFileName {
  JavaIoFile *sourceFile = [[JavaIoFile alloc] initWithNSString:sourceFileName];
  OrgOssPdfreporterEngineDesignJasperDesign *jasperDesign = [OrgOssPdfreporterEngineXmlJRXmlLoader load__WithNSString:sourceFileName];
  JavaIoFile *destFile = [[JavaIoFile alloc] initWithNSString:[((JavaIoFile *) nil_chk(sourceFile)) getParent] withNSString:[NSString stringWithFormat:@"%@.jasper", [((OrgOssPdfreporterEngineDesignJasperDesign *) nil_chk(jasperDesign)) getName]]];
  NSString *destFileName = [((JavaIoFile *) nil_chk(destFile)) description];
  [self compileToFileWithOrgOssPdfreporterEngineDesignJasperDesign:jasperDesign withNSString:destFileName];
  return destFileName;
}

- (void)compileToFileWithNSString:(NSString *)sourceFileName
                     withNSString:(NSString *)destFileName {
  OrgOssPdfreporterEngineDesignJasperDesign *jasperDesign = [OrgOssPdfreporterEngineXmlJRXmlLoader load__WithNSString:sourceFileName];
  [self compileToFileWithOrgOssPdfreporterEngineDesignJasperDesign:jasperDesign withNSString:destFileName];
}

- (void)compileToFileWithOrgOssPdfreporterEngineDesignJasperDesign:(OrgOssPdfreporterEngineDesignJasperDesign *)jasperDesign
                                                      withNSString:(NSString *)destFileName {
  OrgOssPdfreporterEngineJasperReport *jasperReport = [self compileWithOrgOssPdfreporterEngineDesignJasperDesign:jasperDesign];
  [OrgOssPdfreporterEngineUtilJRSaver saveObjectWithId:jasperReport withNSString:destFileName];
}

- (OrgOssPdfreporterEngineJasperReport *)compileWithNSString:(NSString *)sourceFileName {
  OrgOssPdfreporterEngineDesignJasperDesign *jasperDesign = [OrgOssPdfreporterEngineXmlJRXmlLoader load__WithNSString:sourceFileName];
  return [self compileWithOrgOssPdfreporterEngineDesignJasperDesign:jasperDesign];
}

- (void)compileToStreamWithJavaIoInputStream:(JavaIoInputStream *)inputStream
                      withJavaIoOutputStream:(JavaIoOutputStream *)outputStream {
  OrgOssPdfreporterEngineDesignJasperDesign *jasperDesign = [OrgOssPdfreporterEngineXmlJRXmlLoader load__WithJavaIoInputStream:inputStream];
  [self compileToStreamWithOrgOssPdfreporterEngineDesignJasperDesign:jasperDesign withJavaIoOutputStream:outputStream];
}

- (void)compileToStreamWithOrgOssPdfreporterEngineDesignJasperDesign:(OrgOssPdfreporterEngineDesignJasperDesign *)jasperDesign
                                              withJavaIoOutputStream:(JavaIoOutputStream *)outputStream {
  OrgOssPdfreporterEngineJasperReport *jasperReport = [self compileWithOrgOssPdfreporterEngineDesignJasperDesign:jasperDesign];
  [OrgOssPdfreporterEngineUtilJRSaver saveObjectWithId:jasperReport withJavaIoOutputStream:outputStream];
}

- (OrgOssPdfreporterEngineJasperReport *)compileWithJavaIoInputStream:(JavaIoInputStream *)inputStream {
  OrgOssPdfreporterEngineDesignJasperDesign *jasperDesign = [OrgOssPdfreporterEngineXmlJRXmlLoader load__WithJavaIoInputStream:inputStream];
  return [self compileWithOrgOssPdfreporterEngineDesignJasperDesign:jasperDesign];
}

- (OrgOssPdfreporterEngineJasperReport *)compileWithOrgOssPdfreporterEngineDesignJasperDesign:(OrgOssPdfreporterEngineDesignJasperDesign *)jasperDesign {
  OrgOssPdfreporterProgressProgressManager *pm = [[OrgOssPdfreporterProgressProgressManager alloc] initWithOrgOssPdfreporterProgressIProgressHandler_ProgressStateEnum:[OrgOssPdfreporterProgressIProgressHandler_ProgressStateEnum COMPILING]];
  @try {
    return [((id<OrgOssPdfreporterEngineDesignJRCompiler>) nil_chk([self getCompilerWithOrgOssPdfreporterEngineDesignJasperDesign:jasperDesign])) compileReportWithOrgOssPdfreporterEngineDesignJasperDesign:jasperDesign];
  }
  @finally {
    [((OrgOssPdfreporterProgressProgressManager *) nil_chk(pm)) done];
  }
}

- (id<JavaUtilCollection>)verifyWithOrgOssPdfreporterEngineDesignJasperDesign:(OrgOssPdfreporterEngineDesignJasperDesign *)jasperDesign {
  return [OrgOssPdfreporterEngineDesignJRVerifier verifyDesignWithOrgOssPdfreporterEngineDesignJasperDesign:jasperDesign];
}

- (OrgOssPdfreporterEngineFillJREvaluator *)getEvaluatorWithOrgOssPdfreporterEngineJasperReport:(OrgOssPdfreporterEngineJasperReport *)jasperReport
                                                           withOrgOssPdfreporterEngineJRDataset:(id<OrgOssPdfreporterEngineJRDataset>)dataset {
  id<OrgOssPdfreporterEngineDesignJRCompiler> compiler = [self getCompilerWithOrgOssPdfreporterEngineJasperReport:jasperReport];
  return [((id<OrgOssPdfreporterEngineDesignJRCompiler>) nil_chk(compiler)) loadEvaluatorWithOrgOssPdfreporterEngineJasperReport:jasperReport withOrgOssPdfreporterEngineJRDataset:dataset];
}

- (OrgOssPdfreporterEngineFillJREvaluator *)getEvaluatorWithOrgOssPdfreporterEngineJasperReport:(OrgOssPdfreporterEngineJasperReport *)jasperReport
                                                       withOrgOssPdfreporterCrosstabsJRCrosstab:(id<OrgOssPdfreporterCrosstabsJRCrosstab>)crosstab {
  id<OrgOssPdfreporterEngineDesignJRCompiler> compiler = [self getCompilerWithOrgOssPdfreporterEngineJasperReport:jasperReport];
  return [((id<OrgOssPdfreporterEngineDesignJRCompiler>) nil_chk(compiler)) loadEvaluatorWithOrgOssPdfreporterEngineJasperReport:jasperReport withOrgOssPdfreporterCrosstabsJRCrosstab:crosstab];
}

- (OrgOssPdfreporterEngineFillJREvaluator *)getEvaluatorWithOrgOssPdfreporterEngineJasperReport:(OrgOssPdfreporterEngineJasperReport *)jasperReport {
  return [self getEvaluatorWithOrgOssPdfreporterEngineJasperReport:jasperReport withOrgOssPdfreporterEngineJRDataset:[((OrgOssPdfreporterEngineJasperReport *) nil_chk(jasperReport)) getMainDataset]];
}

+ (NSString *)compileReportToFileWithNSString:(NSString *)sourceFileName {
  return [((OrgOssPdfreporterEngineJasperCompileManager *) nil_chk([OrgOssPdfreporterEngineJasperCompileManager getDefaultInstance])) compileToFileWithNSString:sourceFileName];
}

+ (void)compileReportToFileWithNSString:(NSString *)sourceFileName
                           withNSString:(NSString *)destFileName {
  [((OrgOssPdfreporterEngineJasperCompileManager *) nil_chk([OrgOssPdfreporterEngineJasperCompileManager getDefaultInstance])) compileToFileWithNSString:sourceFileName withNSString:destFileName];
}

+ (void)compileReportToFileWithOrgOssPdfreporterEngineDesignJasperDesign:(OrgOssPdfreporterEngineDesignJasperDesign *)jasperDesign
                                                            withNSString:(NSString *)destFileName {
  [((OrgOssPdfreporterEngineJasperCompileManager *) nil_chk([OrgOssPdfreporterEngineJasperCompileManager getDefaultInstance])) compileToFileWithOrgOssPdfreporterEngineDesignJasperDesign:jasperDesign withNSString:destFileName];
}

+ (OrgOssPdfreporterEngineJasperReport *)compileReportWithNSString:(NSString *)sourceFileName {
  return [((OrgOssPdfreporterEngineJasperCompileManager *) nil_chk([OrgOssPdfreporterEngineJasperCompileManager getDefaultInstance])) compileWithNSString:sourceFileName];
}

+ (void)compileReportToStreamWithJavaIoInputStream:(JavaIoInputStream *)inputStream
                            withJavaIoOutputStream:(JavaIoOutputStream *)outputStream {
  [((OrgOssPdfreporterEngineJasperCompileManager *) nil_chk([OrgOssPdfreporterEngineJasperCompileManager getDefaultInstance])) compileToStreamWithJavaIoInputStream:inputStream withJavaIoOutputStream:outputStream];
}

+ (void)compileReportToStreamWithOrgOssPdfreporterEngineDesignJasperDesign:(OrgOssPdfreporterEngineDesignJasperDesign *)jasperDesign
                                                    withJavaIoOutputStream:(JavaIoOutputStream *)outputStream {
  [((OrgOssPdfreporterEngineJasperCompileManager *) nil_chk([OrgOssPdfreporterEngineJasperCompileManager getDefaultInstance])) compileToStreamWithOrgOssPdfreporterEngineDesignJasperDesign:jasperDesign withJavaIoOutputStream:outputStream];
}

+ (OrgOssPdfreporterEngineJasperReport *)compileReportWithJavaIoInputStream:(JavaIoInputStream *)inputStream {
  return [((OrgOssPdfreporterEngineJasperCompileManager *) nil_chk([OrgOssPdfreporterEngineJasperCompileManager getDefaultInstance])) compileWithJavaIoInputStream:inputStream];
}

+ (OrgOssPdfreporterEngineJasperReport *)compileReportWithOrgOssPdfreporterEngineDesignJasperDesign:(OrgOssPdfreporterEngineDesignJasperDesign *)jasperDesign {
  return [((OrgOssPdfreporterEngineJasperCompileManager *) nil_chk([OrgOssPdfreporterEngineJasperCompileManager getDefaultInstance])) compileWithOrgOssPdfreporterEngineDesignJasperDesign:jasperDesign];
}

+ (id<JavaUtilCollection>)verifyDesignWithOrgOssPdfreporterEngineDesignJasperDesign:(OrgOssPdfreporterEngineDesignJasperDesign *)jasperDesign {
  return [((OrgOssPdfreporterEngineJasperCompileManager *) nil_chk([OrgOssPdfreporterEngineJasperCompileManager getDefaultInstance])) verifyWithOrgOssPdfreporterEngineDesignJasperDesign:jasperDesign];
}

+ (OrgOssPdfreporterEngineFillJREvaluator *)loadEvaluatorWithOrgOssPdfreporterEngineJasperReport:(OrgOssPdfreporterEngineJasperReport *)jasperReport
                                                            withOrgOssPdfreporterEngineJRDataset:(id<OrgOssPdfreporterEngineJRDataset>)dataset {
  return [((OrgOssPdfreporterEngineJasperCompileManager *) nil_chk([OrgOssPdfreporterEngineJasperCompileManager getDefaultInstance])) getEvaluatorWithOrgOssPdfreporterEngineJasperReport:jasperReport withOrgOssPdfreporterEngineJRDataset:dataset];
}

+ (OrgOssPdfreporterEngineFillJREvaluator *)loadEvaluatorWithOrgOssPdfreporterEngineJasperReport:(OrgOssPdfreporterEngineJasperReport *)jasperReport
                                                        withOrgOssPdfreporterCrosstabsJRCrosstab:(id<OrgOssPdfreporterCrosstabsJRCrosstab>)crosstab {
  return [((OrgOssPdfreporterEngineJasperCompileManager *) nil_chk([OrgOssPdfreporterEngineJasperCompileManager getDefaultInstance])) getEvaluatorWithOrgOssPdfreporterEngineJasperReport:jasperReport withOrgOssPdfreporterCrosstabsJRCrosstab:crosstab];
}

+ (OrgOssPdfreporterEngineFillJREvaluator *)loadEvaluatorWithOrgOssPdfreporterEngineJasperReport:(OrgOssPdfreporterEngineJasperReport *)jasperReport {
  return [((OrgOssPdfreporterEngineJasperCompileManager *) nil_chk([OrgOssPdfreporterEngineJasperCompileManager getDefaultInstance])) getEvaluatorWithOrgOssPdfreporterEngineJasperReport:jasperReport];
}

- (id<OrgOssPdfreporterEngineDesignJRCompiler>)getCompilerWithOrgOssPdfreporterEngineJasperReport:(OrgOssPdfreporterEngineJasperReport *)jasperReport {
  NSString *compilerClassName = [((OrgOssPdfreporterEngineJasperReport *) nil_chk(jasperReport)) getCompilerClass];
  if ([((NSString *) nil_chk(OrgOssPdfreporterEngineJasperCompileManager_JEVAL_COMPILER_)) isEqual:compilerClassName]) {
    return [[OrgOssPdfreporterCompilersJevalJEvalCompiler alloc] initWithOrgOssPdfreporterEngineJasperReportsContext:jasperReportsContext_];
  }
  @throw [[OrgOssPdfreporterEngineJRException alloc] initWithNSString:[NSString stringWithFormat:@"Report compiler '%@' not supported.", compilerClassName]];
}

- (id<OrgOssPdfreporterEngineDesignJRCompiler>)getCompilerWithOrgOssPdfreporterEngineDesignJasperDesign:(OrgOssPdfreporterEngineDesignJasperDesign *)jasperDesign {
  NSString *language = [((OrgOssPdfreporterEngineDesignJasperDesign *) nil_chk(jasperDesign)) getLanguage];
  if ([((NSString *) nil_chk([OrgOssPdfreporterEngineJRReport LANGUAGE_JEVAL])) isEqual:language]) {
    return [[OrgOssPdfreporterCompilersJevalJEvalCompiler alloc] initWithOrgOssPdfreporterEngineJasperReportsContext:jasperReportsContext_ withBOOL:NO];
  }
  else {
    if (language == nil) {
      @throw [[OrgOssPdfreporterEngineJRException alloc] initWithNSString:@"There is no default language set for compiler. You should include a dtd to your jrxml report file."];
    }
    @throw [[OrgOssPdfreporterEngineJRException alloc] initWithNSString:[NSString stringWithFormat:@"No report compiler set for language : %@", language]];
  }
}

+ (void)initialize {
  if (self == [OrgOssPdfreporterEngineJasperCompileManager class]) {
    OrgOssPdfreporterEngineJasperCompileManager_logger_ = [JavaUtilLoggingLogger getLoggerWithNSString:[[IOSClass classWithClass:[OrgOssPdfreporterEngineJasperCompileManager class]] getName]];
    OrgOssPdfreporterEngineJasperCompileManager_JEVAL_COMPILER_ = [[IOSClass classWithClass:[OrgOssPdfreporterCompilersJevalJEvalCompiler class]] getName];
  }
}

- (void)copyAllPropertiesTo:(id)copy {
  [super copyAllPropertiesTo:copy];
  OrgOssPdfreporterEngineJasperCompileManager *typedCopy = (OrgOssPdfreporterEngineJasperCompileManager *) copy;
  typedCopy.jasperReportsContext = jasperReportsContext_;
}

@end
