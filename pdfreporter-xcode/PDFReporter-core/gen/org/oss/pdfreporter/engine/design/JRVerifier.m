//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: pdfreporter-core/src/org/oss/pdfreporter/engine/design/JRVerifier.java
//
//  Created by kendra on 9/27/13.
//

#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "java/lang/ClassNotFoundException.h"
#include "java/lang/Exception.h"
#include "java/lang/Integer.h"
#include "java/lang/StringBuffer.h"
#include "java/util/ArrayList.h"
#include "java/util/Collection.h"
#include "java/util/HashMap.h"
#include "java/util/Iterator.h"
#include "java/util/LinkedList.h"
#include "java/util/List.h"
#include "java/util/Map.h"
#include "org/oss/pdfreporter/commons/arrays/Array2D.h"
#include "org/oss/pdfreporter/crosstabs/JRCellContents.h"
#include "org/oss/pdfreporter/crosstabs/JRCrosstab.h"
#include "org/oss/pdfreporter/crosstabs/JRCrosstabBucket.h"
#include "org/oss/pdfreporter/crosstabs/JRCrosstabCell.h"
#include "org/oss/pdfreporter/crosstabs/JRCrosstabColumnGroup.h"
#include "org/oss/pdfreporter/crosstabs/JRCrosstabDataset.h"
#include "org/oss/pdfreporter/crosstabs/JRCrosstabGroup.h"
#include "org/oss/pdfreporter/crosstabs/JRCrosstabMeasure.h"
#include "org/oss/pdfreporter/crosstabs/JRCrosstabParameter.h"
#include "org/oss/pdfreporter/crosstabs/JRCrosstabRowGroup.h"
#include "org/oss/pdfreporter/crosstabs/design/JRDesignCrosstab.h"
#include "org/oss/pdfreporter/crosstabs/type/CrosstabPercentageEnum.h"
#include "org/oss/pdfreporter/engine/DefaultJasperReportsContext.h"
#include "org/oss/pdfreporter/engine/JRAnchor.h"
#include "org/oss/pdfreporter/engine/JRBand.h"
#include "org/oss/pdfreporter/engine/JRComponentElement.h"
#include "org/oss/pdfreporter/engine/JRDataset.h"
#include "org/oss/pdfreporter/engine/JRDatasetParameter.h"
#include "org/oss/pdfreporter/engine/JRDatasetRun.h"
#include "org/oss/pdfreporter/engine/JRElement.h"
#include "org/oss/pdfreporter/engine/JRElementDataset.h"
#include "org/oss/pdfreporter/engine/JRException.h"
#include "org/oss/pdfreporter/engine/JRExpression.h"
#include "org/oss/pdfreporter/engine/JRExpressionChunk.h"
#include "org/oss/pdfreporter/engine/JRExpressionCollector.h"
#include "org/oss/pdfreporter/engine/JRField.h"
#include "org/oss/pdfreporter/engine/JRFrame.h"
#include "org/oss/pdfreporter/engine/JRGenericElement.h"
#include "org/oss/pdfreporter/engine/JRGenericElementParameter.h"
#include "org/oss/pdfreporter/engine/JRGenericElementType.h"
#include "org/oss/pdfreporter/engine/JRGroup.h"
#include "org/oss/pdfreporter/engine/JRHyperlink.h"
#include "org/oss/pdfreporter/engine/JRHyperlinkParameter.h"
#include "org/oss/pdfreporter/engine/JRImage.h"
#include "org/oss/pdfreporter/engine/JRLineBox.h"
#include "org/oss/pdfreporter/engine/JRParameter.h"
#include "org/oss/pdfreporter/engine/JRPropertiesMap.h"
#include "org/oss/pdfreporter/engine/JRPropertiesUtil.h"
#include "org/oss/pdfreporter/engine/JRPropertyExpression.h"
#include "org/oss/pdfreporter/engine/JRQuery.h"
#include "org/oss/pdfreporter/engine/JRQueryChunk.h"
#include "org/oss/pdfreporter/engine/JRReport.h"
#include "org/oss/pdfreporter/engine/JRReportTemplate.h"
#include "org/oss/pdfreporter/engine/JRRuntimeException.h"
#include "org/oss/pdfreporter/engine/JRSection.h"
#include "org/oss/pdfreporter/engine/JRSortField.h"
#include "org/oss/pdfreporter/engine/JRStaticText.h"
#include "org/oss/pdfreporter/engine/JRStyle.h"
#include "org/oss/pdfreporter/engine/JRSubreport.h"
#include "org/oss/pdfreporter/engine/JRSubreportParameter.h"
#include "org/oss/pdfreporter/engine/JRSubreportReturnValue.h"
#include "org/oss/pdfreporter/engine/JRTextField.h"
#include "org/oss/pdfreporter/engine/JRVariable.h"
#include "org/oss/pdfreporter/engine/JasperReportsContext.h"
#include "org/oss/pdfreporter/engine/component/Component.h"
#include "org/oss/pdfreporter/engine/component/ComponentCompiler.h"
#include "org/oss/pdfreporter/engine/component/ComponentKey.h"
#include "org/oss/pdfreporter/engine/component/ComponentsEnvironment.h"
#include "org/oss/pdfreporter/engine/component/IComponentManager.h"
#include "org/oss/pdfreporter/engine/design/JRDesignDataset.h"
#include "org/oss/pdfreporter/engine/design/JRValidationFault.h"
#include "org/oss/pdfreporter/engine/design/JRVerifier.h"
#include "org/oss/pdfreporter/engine/design/JasperDesign.h"
#include "org/oss/pdfreporter/engine/query/QueryExecuterFactory.h"
#include "org/oss/pdfreporter/engine/type/CalculationEnum.h"
#include "org/oss/pdfreporter/engine/type/EvaluationTimeEnum.h"
#include "org/oss/pdfreporter/engine/type/IncrementTypeEnum.h"
#include "org/oss/pdfreporter/engine/type/ResetTypeEnum.h"
#include "org/oss/pdfreporter/engine/type/SortFieldTypeEnum.h"
#include "org/oss/pdfreporter/engine/type/SplitTypeEnum.h"
#include "org/oss/pdfreporter/engine/util/JRClassLoader.h"
#include "org/oss/pdfreporter/engine/util/JRQueryExecuterUtils.h"
#include "org/oss/pdfreporter/text/format/factory/IFormatFactory.h"

@implementation OrgOssPdfreporterEngineDesignJRVerifier

static NSString * OrgOssPdfreporterEngineDesignJRVerifier_PROPERTY_ALLOW_ELEMENT_OVERLAP_ = @"net.sf.jasperreports.allow.element.overlap";
static NSString * OrgOssPdfreporterEngineDesignJRVerifier_PROPERTY_ALLOW_ELEMENT_NEGATIVE_WIDTH_ = @"net.sf.jasperreports.allow.element.negative.width";
static NSString * OrgOssPdfreporterEngineDesignJRVerifier_PROPERTY_ALLOW_ELEMENT_NEGATIVE_Y_ = @"net.sf.jasperreports.allow.element.negative.y";

@synthesize jasperReportsContext = jasperReportsContext_;
@synthesize jasperDesign = jasperDesign_;
@synthesize brokenRules = brokenRules_;
@synthesize expressionCollector = expressionCollector_;
@synthesize currentComponentElementStack = currentComponentElementStack_;
@synthesize allowElementNegativeWidth = allowElementNegativeWidth_;
@synthesize allowElementNegativeY_ = allowElementNegativeY__;

+ (NSString *)PROPERTY_ALLOW_ELEMENT_OVERLAP {
  return OrgOssPdfreporterEngineDesignJRVerifier_PROPERTY_ALLOW_ELEMENT_OVERLAP_;
}

+ (NSString *)PROPERTY_ALLOW_ELEMENT_NEGATIVE_WIDTH {
  return OrgOssPdfreporterEngineDesignJRVerifier_PROPERTY_ALLOW_ELEMENT_NEGATIVE_WIDTH_;
}

+ (NSString *)PROPERTY_ALLOW_ELEMENT_NEGATIVE_Y {
  return OrgOssPdfreporterEngineDesignJRVerifier_PROPERTY_ALLOW_ELEMENT_NEGATIVE_Y_;
}

- (id)initWithOrgOssPdfreporterEngineDesignJasperDesign:(OrgOssPdfreporterEngineDesignJasperDesign *)jasperDesign {
  return [self initOrgOssPdfreporterEngineDesignJRVerifierWithOrgOssPdfreporterEngineJasperReportsContext:[OrgOssPdfreporterEngineDefaultJasperReportsContext getInstance] withOrgOssPdfreporterEngineDesignJasperDesign:jasperDesign withOrgOssPdfreporterEngineJRExpressionCollector:nil];
}

- (id)initWithOrgOssPdfreporterEngineDesignJasperDesign:(OrgOssPdfreporterEngineDesignJasperDesign *)jasperDesign
       withOrgOssPdfreporterEngineJRExpressionCollector:(OrgOssPdfreporterEngineJRExpressionCollector *)expressionCollector {
  return [self initOrgOssPdfreporterEngineDesignJRVerifierWithOrgOssPdfreporterEngineJasperReportsContext:[OrgOssPdfreporterEngineDefaultJasperReportsContext getInstance] withOrgOssPdfreporterEngineDesignJasperDesign:jasperDesign withOrgOssPdfreporterEngineJRExpressionCollector:expressionCollector];
}

- (id)initOrgOssPdfreporterEngineDesignJRVerifierWithOrgOssPdfreporterEngineJasperReportsContext:(id<OrgOssPdfreporterEngineJasperReportsContext>)jasperReportsContext
                                                   withOrgOssPdfreporterEngineDesignJasperDesign:(OrgOssPdfreporterEngineDesignJasperDesign *)jasperDesign
                                                withOrgOssPdfreporterEngineJRExpressionCollector:(OrgOssPdfreporterEngineJRExpressionCollector *)expressionCollector {
  if ((self = [super init])) {
    currentComponentElementStack_ = [[JavaUtilLinkedList alloc] init];
    self.jasperReportsContext = jasperReportsContext;
    self.jasperDesign = jasperDesign;
    brokenRules_ = [[JavaUtilArrayList alloc] init];
    if (expressionCollector != nil) {
      self.expressionCollector = expressionCollector;
    }
    else {
      self.expressionCollector = [OrgOssPdfreporterEngineJRExpressionCollector collectorWithOrgOssPdfreporterEngineJasperReportsContext:jasperReportsContext withOrgOssPdfreporterEngineJRReport:jasperDesign];
    }
    allowElementNegativeWidth_ = [((OrgOssPdfreporterEngineJRPropertiesUtil *) nil_chk([OrgOssPdfreporterEngineJRPropertiesUtil getInstanceWithOrgOssPdfreporterEngineJasperReportsContext:jasperReportsContext])) getBooleanPropertyWithOrgOssPdfreporterEngineJRPropertiesHolder:jasperDesign withNSString:OrgOssPdfreporterEngineDesignJRVerifier_PROPERTY_ALLOW_ELEMENT_NEGATIVE_WIDTH_ withBOOL:NO];
    allowElementNegativeY__ = [((OrgOssPdfreporterEngineJRPropertiesUtil *) nil_chk([OrgOssPdfreporterEngineJRPropertiesUtil getInstanceWithOrgOssPdfreporterEngineJasperReportsContext:jasperReportsContext])) getBooleanPropertyWithOrgOssPdfreporterEngineJRPropertiesHolder:jasperDesign withNSString:OrgOssPdfreporterEngineDesignJRVerifier_PROPERTY_ALLOW_ELEMENT_NEGATIVE_Y_ withBOOL:YES];
  }
  return self;
}

- (id)initWithOrgOssPdfreporterEngineJasperReportsContext:(id<OrgOssPdfreporterEngineJasperReportsContext>)jasperReportsContext
            withOrgOssPdfreporterEngineDesignJasperDesign:(OrgOssPdfreporterEngineDesignJasperDesign *)jasperDesign
         withOrgOssPdfreporterEngineJRExpressionCollector:(OrgOssPdfreporterEngineJRExpressionCollector *)expressionCollector {
  return [self initOrgOssPdfreporterEngineDesignJRVerifierWithOrgOssPdfreporterEngineJasperReportsContext:jasperReportsContext withOrgOssPdfreporterEngineDesignJasperDesign:jasperDesign withOrgOssPdfreporterEngineJRExpressionCollector:expressionCollector];
}

- (OrgOssPdfreporterEngineDesignJasperDesign *)getReportDesign {
  return jasperDesign_;
}

- (void)addBrokenRuleWithNSString:(NSString *)message
                           withId:(id)source {
  [OrgOssPdfreporterEngineDesignJRVerifier addBrokenRuleWithJavaUtilCollection:brokenRules_ withNSString:message withId:source];
}

+ (void)addBrokenRuleWithJavaUtilCollection:(id<JavaUtilCollection>)brokenRules
                               withNSString:(NSString *)message
                                     withId:(id)source {
  OrgOssPdfreporterEngineDesignJRValidationFault *fault = [[OrgOssPdfreporterEngineDesignJRValidationFault alloc] init];
  [((OrgOssPdfreporterEngineDesignJRValidationFault *) nil_chk(fault)) setMessageWithNSString:message];
  [((OrgOssPdfreporterEngineDesignJRValidationFault *) nil_chk(fault)) setSourceWithId:source];
  [((id<JavaUtilCollection>) nil_chk(brokenRules)) addWithId:fault];
}

- (void)addBrokenRuleWithJavaLangException:(JavaLangException *)e
                                    withId:(id)source {
  OrgOssPdfreporterEngineDesignJRValidationFault *fault = [[OrgOssPdfreporterEngineDesignJRValidationFault alloc] init];
  [((OrgOssPdfreporterEngineDesignJRValidationFault *) nil_chk(fault)) setMessageWithNSString:[((JavaLangException *) nil_chk(e)) getMessage]];
  [((OrgOssPdfreporterEngineDesignJRValidationFault *) nil_chk(fault)) setSourceWithId:source];
  [((id<JavaUtilCollection>) nil_chk(brokenRules_)) addWithId:fault];
}

+ (id<JavaUtilCollection>)verifyDesignWithOrgOssPdfreporterEngineDesignJasperDesign:(OrgOssPdfreporterEngineDesignJasperDesign *)jasperDesign
                                   withOrgOssPdfreporterEngineJRExpressionCollector:(OrgOssPdfreporterEngineJRExpressionCollector *)expressionCollector {
  return [OrgOssPdfreporterEngineDesignJRVerifier verifyDesignWithOrgOssPdfreporterEngineJasperReportsContext:[OrgOssPdfreporterEngineDefaultJasperReportsContext getInstance] withOrgOssPdfreporterEngineDesignJasperDesign:jasperDesign withOrgOssPdfreporterEngineJRExpressionCollector:expressionCollector];
}

+ (id<JavaUtilCollection>)verifyDesignWithOrgOssPdfreporterEngineJasperReportsContext:(id<OrgOssPdfreporterEngineJasperReportsContext>)jasperReportsContext
                                        withOrgOssPdfreporterEngineDesignJasperDesign:(OrgOssPdfreporterEngineDesignJasperDesign *)jasperDesign
                                     withOrgOssPdfreporterEngineJRExpressionCollector:(OrgOssPdfreporterEngineJRExpressionCollector *)expressionCollector {
  OrgOssPdfreporterEngineDesignJRVerifier *verifier = [[OrgOssPdfreporterEngineDesignJRVerifier alloc] initWithOrgOssPdfreporterEngineJasperReportsContext:jasperReportsContext withOrgOssPdfreporterEngineDesignJasperDesign:jasperDesign withOrgOssPdfreporterEngineJRExpressionCollector:expressionCollector];
  return [((OrgOssPdfreporterEngineDesignJRVerifier *) nil_chk(verifier)) verifyDesign];
}

+ (id<JavaUtilCollection>)verifyDesignWithOrgOssPdfreporterEngineDesignJasperDesign:(OrgOssPdfreporterEngineDesignJasperDesign *)jasperDesign {
  return [OrgOssPdfreporterEngineDesignJRVerifier verifyDesignWithOrgOssPdfreporterEngineDesignJasperDesign:jasperDesign withOrgOssPdfreporterEngineJRExpressionCollector:nil];
}

- (id<JavaUtilCollection>)verifyDesign {
  [((OrgOssPdfreporterEngineDesignJasperDesign *) nil_chk(jasperDesign_)) preprocess];
  [self verifyDesignAttributes];
  [self verifyReportTemplates];
  [self verifyDatasetWithOrgOssPdfreporterEngineDesignJRDesignDataset:[((OrgOssPdfreporterEngineDesignJasperDesign *) nil_chk(jasperDesign_)) getMainDesignDataset]];
  [self verifyDatasets];
  [self verifyStyles];
  if ([self toVerifyElementOverlap]) {
    [self verifyEmptyBackground];
  }
  [self verifyBandWithOrgOssPdfreporterEngineJRBand:[((OrgOssPdfreporterEngineDesignJasperDesign *) nil_chk(jasperDesign_)) getBackground]];
  [self verifyBandWithOrgOssPdfreporterEngineJRBand:[((OrgOssPdfreporterEngineDesignJasperDesign *) nil_chk(jasperDesign_)) getTitle]];
  [self verifyBandWithOrgOssPdfreporterEngineJRBand:[((OrgOssPdfreporterEngineDesignJasperDesign *) nil_chk(jasperDesign_)) getPageHeader]];
  [self verifyBandWithOrgOssPdfreporterEngineJRBand:[((OrgOssPdfreporterEngineDesignJasperDesign *) nil_chk(jasperDesign_)) getColumnHeader]];
  [self verifySectionWithOrgOssPdfreporterEngineJRSection:[((OrgOssPdfreporterEngineDesignJasperDesign *) nil_chk(jasperDesign_)) getDetailSection]];
  [self verifyBandWithOrgOssPdfreporterEngineJRBand:[((OrgOssPdfreporterEngineDesignJasperDesign *) nil_chk(jasperDesign_)) getColumnFooter]];
  [self verifyBandWithOrgOssPdfreporterEngineJRBand:[((OrgOssPdfreporterEngineDesignJasperDesign *) nil_chk(jasperDesign_)) getPageFooter]];
  [self verifyBandWithOrgOssPdfreporterEngineJRBand:[((OrgOssPdfreporterEngineDesignJasperDesign *) nil_chk(jasperDesign_)) getLastPageFooter]];
  [self verifyBandWithOrgOssPdfreporterEngineJRBand:[((OrgOssPdfreporterEngineDesignJasperDesign *) nil_chk(jasperDesign_)) getSummary]];
  [self verifyBandWithOrgOssPdfreporterEngineJRBand:[((OrgOssPdfreporterEngineDesignJasperDesign *) nil_chk(jasperDesign_)) getNoData]];
  return brokenRules_;
}

- (void)verifyEmptyBackground {
  id<OrgOssPdfreporterEngineJRBand> background = [((OrgOssPdfreporterEngineDesignJasperDesign *) nil_chk(jasperDesign_)) getBackground];
  if (background != nil && [((id<OrgOssPdfreporterEngineJRBand>) nil_chk(background)) getHeight] > 0) {
    IOSObjectArray *elements = [((id<OrgOssPdfreporterEngineJRBand>) nil_chk(background)) getElements];
    if (elements != nil && (int) [((IOSObjectArray *) nil_chk(elements)) count] > 0) {
      BOOL foundContent = NO;
      for (int i = 0; i < (int) [((IOSObjectArray *) nil_chk(elements)) count]; i++) {
        if ([((id<OrgOssPdfreporterEngineJRElement>) nil_chk([((IOSObjectArray *) nil_chk(elements)) objectAtIndex:i])) getWidth] > 0 && [((id<OrgOssPdfreporterEngineJRElement>) nil_chk([((IOSObjectArray *) nil_chk(elements)) objectAtIndex:i])) getHeight] > 0) {
          foundContent = YES;
          break;
        }
      }
      if (foundContent) {
        [self addBrokenRuleWithNSString:@"Use of the background section is not recommended for reports that are supposed to be exported using grid exporters such as HTML and XLS because the background content would likely be overlapped by other sections resulting in it not showing up." withId:background];
      }
    }
  }
}

- (void)verifyDesignAttributes {
  if ([((OrgOssPdfreporterEngineDesignJasperDesign *) nil_chk(jasperDesign_)) getName] == nil || [((NSString *) nil_chk([((NSString *) nil_chk([((OrgOssPdfreporterEngineDesignJasperDesign *) nil_chk(jasperDesign_)) getName])) trim])) length] == 0) {
    [self addBrokenRuleWithNSString:@"Report name is missing." withId:jasperDesign_];
  }
  if ([((OrgOssPdfreporterEngineDesignJasperDesign *) nil_chk(jasperDesign_)) getColumnCount] <= 0) {
    [self addBrokenRuleWithNSString:@"Column count must be greater than zero." withId:jasperDesign_];
  }
  if ([((OrgOssPdfreporterEngineDesignJasperDesign *) nil_chk(jasperDesign_)) getPageWidth] < 0) {
    [self addBrokenRuleWithNSString:@"Page width must be positive." withId:jasperDesign_];
  }
  if ([((OrgOssPdfreporterEngineDesignJasperDesign *) nil_chk(jasperDesign_)) getPageHeight] < 0) {
    [self addBrokenRuleWithNSString:@"Page height must be positive." withId:jasperDesign_];
  }
  if ([((OrgOssPdfreporterEngineDesignJasperDesign *) nil_chk(jasperDesign_)) getColumnWidth] < 0) {
    [self addBrokenRuleWithNSString:@"Column width must be positive." withId:jasperDesign_];
  }
  if ([((OrgOssPdfreporterEngineDesignJasperDesign *) nil_chk(jasperDesign_)) getColumnSpacing] < 0) {
    [self addBrokenRuleWithNSString:@"Column spacing must be positive." withId:jasperDesign_];
  }
  if ([((OrgOssPdfreporterEngineDesignJasperDesign *) nil_chk(jasperDesign_)) getLeftMargin] < 0) {
    [self addBrokenRuleWithNSString:@"Left margin must be positive." withId:jasperDesign_];
  }
  if ([((OrgOssPdfreporterEngineDesignJasperDesign *) nil_chk(jasperDesign_)) getRightMargin] < 0) {
    [self addBrokenRuleWithNSString:@"Right margin must be positive." withId:jasperDesign_];
  }
  if ([((OrgOssPdfreporterEngineDesignJasperDesign *) nil_chk(jasperDesign_)) getTopMargin] < 0) {
    [self addBrokenRuleWithNSString:@"Top margin must be positive." withId:jasperDesign_];
  }
  if ([((OrgOssPdfreporterEngineDesignJasperDesign *) nil_chk(jasperDesign_)) getBottomMargin] < 0) {
    [self addBrokenRuleWithNSString:@"Bottom margin must be positive." withId:jasperDesign_];
  }
  if ([((OrgOssPdfreporterEngineDesignJasperDesign *) nil_chk(jasperDesign_)) getLeftMargin] + [((OrgOssPdfreporterEngineDesignJasperDesign *) nil_chk(jasperDesign_)) getColumnCount] * [((OrgOssPdfreporterEngineDesignJasperDesign *) nil_chk(jasperDesign_)) getColumnWidth] + ([((OrgOssPdfreporterEngineDesignJasperDesign *) nil_chk(jasperDesign_)) getColumnCount] - 1) * [((OrgOssPdfreporterEngineDesignJasperDesign *) nil_chk(jasperDesign_)) getColumnSpacing] + [((OrgOssPdfreporterEngineDesignJasperDesign *) nil_chk(jasperDesign_)) getRightMargin] > [((OrgOssPdfreporterEngineDesignJasperDesign *) nil_chk(jasperDesign_)) getPageWidth]) {
    [self addBrokenRuleWithNSString:@"The columns and the margins do not fit the page width." withId:jasperDesign_];
  }
  [OrgOssPdfreporterEngineDesignJRVerifier verifyBandHeightsWithJavaUtilCollection:brokenRules_ withOrgOssPdfreporterEngineJRReport:jasperDesign_ withInt:[((OrgOssPdfreporterEngineDesignJasperDesign *) nil_chk(jasperDesign_)) getPageHeight] withInt:[((OrgOssPdfreporterEngineDesignJasperDesign *) nil_chk(jasperDesign_)) getTopMargin] withInt:[((OrgOssPdfreporterEngineDesignJasperDesign *) nil_chk(jasperDesign_)) getBottomMargin]];
  [self verifyFormatFactoryClass];
}

+ (void)verifyBandHeightsWithJavaUtilCollection:(id<JavaUtilCollection>)brokenRules
            withOrgOssPdfreporterEngineJRReport:(id<OrgOssPdfreporterEngineJRReport>)report
                                        withInt:(int)pageHeight
                                        withInt:(int)topMargin
                                        withInt:(int)bottomMargin {
  if (topMargin + ([((id<OrgOssPdfreporterEngineJRReport>) nil_chk(report)) getBackground] != nil ? [((id<OrgOssPdfreporterEngineJRBand>) nil_chk([((id<OrgOssPdfreporterEngineJRReport>) nil_chk(report)) getBackground])) getHeight] : 0) + bottomMargin > pageHeight) {
    [OrgOssPdfreporterEngineDesignJRVerifier addBrokenRuleWithJavaUtilCollection:brokenRules withNSString:@"The background section and the margins do not fit the page height." withId:report];
  }
  if ([((id<OrgOssPdfreporterEngineJRReport>) nil_chk(report)) isTitleNewPage]) {
    if (topMargin + [OrgOssPdfreporterEngineDesignJRVerifier getBreakHeightWithOrgOssPdfreporterEngineJRBand:[((id<OrgOssPdfreporterEngineJRReport>) nil_chk(report)) getTitle]] + bottomMargin > pageHeight) {
      [OrgOssPdfreporterEngineDesignJRVerifier addBrokenRuleWithJavaUtilCollection:brokenRules withNSString:@"The title section and the margins do not fit the page height." withId:report];
    }
  }
  else {
    if (topMargin + [OrgOssPdfreporterEngineDesignJRVerifier getBreakHeightWithOrgOssPdfreporterEngineJRBand:[((id<OrgOssPdfreporterEngineJRReport>) nil_chk(report)) getTitle]] + ([((id<OrgOssPdfreporterEngineJRReport>) nil_chk(report)) getPageHeader] != nil ? [((id<OrgOssPdfreporterEngineJRBand>) nil_chk([((id<OrgOssPdfreporterEngineJRReport>) nil_chk(report)) getPageHeader])) getHeight] : 0) + ([((id<OrgOssPdfreporterEngineJRReport>) nil_chk(report)) getColumnHeader] != nil ? [((id<OrgOssPdfreporterEngineJRBand>) nil_chk([((id<OrgOssPdfreporterEngineJRReport>) nil_chk(report)) getColumnHeader])) getHeight] : 0) + ([((id<OrgOssPdfreporterEngineJRReport>) nil_chk(report)) getColumnFooter] != nil ? [((id<OrgOssPdfreporterEngineJRBand>) nil_chk([((id<OrgOssPdfreporterEngineJRReport>) nil_chk(report)) getColumnFooter])) getHeight] : 0) + ([((id<OrgOssPdfreporterEngineJRReport>) nil_chk(report)) getPageFooter] != nil ? [((id<OrgOssPdfreporterEngineJRBand>) nil_chk([((id<OrgOssPdfreporterEngineJRReport>) nil_chk(report)) getPageFooter])) getHeight] : 0) + bottomMargin > pageHeight) {
      [OrgOssPdfreporterEngineDesignJRVerifier addBrokenRuleWithJavaUtilCollection:brokenRules withNSString:@"The title section, the page and column headers and footers and the margins do not fit the page height." withId:report];
    }
  }
  if (topMargin + ([((id<OrgOssPdfreporterEngineJRReport>) nil_chk(report)) getPageHeader] != nil ? [((id<OrgOssPdfreporterEngineJRBand>) nil_chk([((id<OrgOssPdfreporterEngineJRReport>) nil_chk(report)) getPageHeader])) getHeight] : 0) + ([((id<OrgOssPdfreporterEngineJRReport>) nil_chk(report)) getColumnHeader] != nil ? [((id<OrgOssPdfreporterEngineJRBand>) nil_chk([((id<OrgOssPdfreporterEngineJRReport>) nil_chk(report)) getColumnHeader])) getHeight] : 0) + ([((id<OrgOssPdfreporterEngineJRReport>) nil_chk(report)) getColumnFooter] != nil ? [((id<OrgOssPdfreporterEngineJRBand>) nil_chk([((id<OrgOssPdfreporterEngineJRReport>) nil_chk(report)) getColumnFooter])) getHeight] : 0) + ([((id<OrgOssPdfreporterEngineJRReport>) nil_chk(report)) getPageFooter] != nil ? [((id<OrgOssPdfreporterEngineJRBand>) nil_chk([((id<OrgOssPdfreporterEngineJRReport>) nil_chk(report)) getPageFooter])) getHeight] : 0) + bottomMargin > pageHeight) {
    [OrgOssPdfreporterEngineDesignJRVerifier addBrokenRuleWithJavaUtilCollection:brokenRules withNSString:@"The page and column headers and footers and the margins do not fit the page height." withId:report];
  }
  if (topMargin + ([((id<OrgOssPdfreporterEngineJRReport>) nil_chk(report)) getPageHeader] != nil ? [((id<OrgOssPdfreporterEngineJRBand>) nil_chk([((id<OrgOssPdfreporterEngineJRReport>) nil_chk(report)) getPageHeader])) getHeight] : 0) + ([((id<OrgOssPdfreporterEngineJRReport>) nil_chk(report)) getColumnHeader] != nil ? [((id<OrgOssPdfreporterEngineJRBand>) nil_chk([((id<OrgOssPdfreporterEngineJRReport>) nil_chk(report)) getColumnHeader])) getHeight] : 0) + ([((id<OrgOssPdfreporterEngineJRReport>) nil_chk(report)) getColumnFooter] != nil ? [((id<OrgOssPdfreporterEngineJRBand>) nil_chk([((id<OrgOssPdfreporterEngineJRReport>) nil_chk(report)) getColumnFooter])) getHeight] : 0) + ([((id<OrgOssPdfreporterEngineJRReport>) nil_chk(report)) getLastPageFooter] != nil ? [((id<OrgOssPdfreporterEngineJRBand>) nil_chk([((id<OrgOssPdfreporterEngineJRReport>) nil_chk(report)) getLastPageFooter])) getHeight] : 0) + bottomMargin > pageHeight) {
    [OrgOssPdfreporterEngineDesignJRVerifier addBrokenRuleWithJavaUtilCollection:brokenRules withNSString:@"The page and column headers and footers and the margins do not fit the last page height." withId:report];
  }
  if (topMargin + [OrgOssPdfreporterEngineDesignJRVerifier getBreakHeightWithOrgOssPdfreporterEngineJRBand:[((id<OrgOssPdfreporterEngineJRReport>) nil_chk(report)) getSummary]] + bottomMargin > pageHeight) {
    [OrgOssPdfreporterEngineDesignJRVerifier addBrokenRuleWithJavaUtilCollection:brokenRules withNSString:@"The summary section and the margins do not fit the page height." withId:report];
  }
  id<OrgOssPdfreporterEngineJRSection> detailSection = [((id<OrgOssPdfreporterEngineJRReport>) nil_chk(report)) getDetailSection];
  if (detailSection != nil) {
    IOSObjectArray *detailBands = [detailSection getBands];
    if (detailBands != nil && (int) [((IOSObjectArray *) nil_chk(detailBands)) count] > 0) {
      for (int i = 0; i < (int) [((IOSObjectArray *) nil_chk(detailBands)) count]; i++) {
        id<OrgOssPdfreporterEngineJRBand> detailBand = [((IOSObjectArray *) nil_chk(detailBands)) objectAtIndex:i];
        if (topMargin + ([((id<OrgOssPdfreporterEngineJRReport>) nil_chk(report)) getPageHeader] != nil ? [((id<OrgOssPdfreporterEngineJRBand>) nil_chk([((id<OrgOssPdfreporterEngineJRReport>) nil_chk(report)) getPageHeader])) getHeight] : 0) + ([((id<OrgOssPdfreporterEngineJRReport>) nil_chk(report)) getColumnHeader] != nil ? [((id<OrgOssPdfreporterEngineJRBand>) nil_chk([((id<OrgOssPdfreporterEngineJRReport>) nil_chk(report)) getColumnHeader])) getHeight] : 0) + [OrgOssPdfreporterEngineDesignJRVerifier getBreakHeightWithOrgOssPdfreporterEngineJRBand:detailBand] + ([((id<OrgOssPdfreporterEngineJRReport>) nil_chk(report)) getColumnFooter] != nil ? [((id<OrgOssPdfreporterEngineJRBand>) nil_chk([((id<OrgOssPdfreporterEngineJRReport>) nil_chk(report)) getColumnFooter])) getHeight] : 0) + ([((id<OrgOssPdfreporterEngineJRReport>) nil_chk(report)) getPageFooter] != nil ? [((id<OrgOssPdfreporterEngineJRBand>) nil_chk([((id<OrgOssPdfreporterEngineJRReport>) nil_chk(report)) getPageFooter])) getHeight] : 0) + bottomMargin > pageHeight) {
          [OrgOssPdfreporterEngineDesignJRVerifier addBrokenRuleWithJavaUtilCollection:brokenRules withNSString:@"The detail section, the page and column headers and footers and the margins do not fit the page height." withId:report];
        }
      }
    }
  }
  if (topMargin + [OrgOssPdfreporterEngineDesignJRVerifier getBreakHeightWithOrgOssPdfreporterEngineJRBand:[((id<OrgOssPdfreporterEngineJRReport>) nil_chk(report)) getNoData]] + bottomMargin > pageHeight) {
    [OrgOssPdfreporterEngineDesignJRVerifier addBrokenRuleWithJavaUtilCollection:brokenRules withNSString:@"The noData section and the margins do not fit the page height." withId:report];
  }
}

- (void)verifyFormatFactoryClass {
  NSString *formatFactoryClassName = [((OrgOssPdfreporterEngineDesignJasperDesign *) nil_chk(jasperDesign_)) getFormatFactoryClass];
  if (formatFactoryClassName != nil) {
    @try {
      IOSClass *formatFactoryClass = [OrgOssPdfreporterEngineUtilJRClassLoader loadClassForNameWithNSString:formatFactoryClassName];
      if (![[IOSClass classWithProtocol:@protocol(OrgOssPdfreporterTextFormatFactoryIFormatFactory)] isAssignableFrom:formatFactoryClass]) {
        [self addBrokenRuleWithNSString:[NSString stringWithFormat:@"The report format factory class is not compatible with %@", [[IOSClass classWithProtocol:@protocol(OrgOssPdfreporterTextFormatFactoryIFormatFactory)] getName]] withId:jasperDesign_];
      }
    }
    @catch (JavaLangClassNotFoundException *e) {
      [self addBrokenRuleWithNSString:[((JavaLangClassNotFoundException *) nil_chk(e)) description] withId:jasperDesign_];
    }
  }
}

- (void)verifyQueryWithOrgOssPdfreporterEngineDesignJRDesignDataset:(OrgOssPdfreporterEngineDesignJRDesignDataset *)dataset {
  id<OrgOssPdfreporterEngineJRQuery> query = [((OrgOssPdfreporterEngineDesignJRDesignDataset *) nil_chk(dataset)) getQuery];
  if (query != nil) {
    NSString *language = [query getLanguage];
    id<OrgOssPdfreporterEngineQueryQueryExecuterFactory> queryExecuterFactory = nil;
    if (language == nil || [((NSString *) nil_chk(language)) length] == 0) {
      [self addBrokenRuleWithNSString:@"Query language not set." withId:query];
    }
    else {
      @try {
        queryExecuterFactory = [((OrgOssPdfreporterEngineUtilJRQueryExecuterUtils *) nil_chk([OrgOssPdfreporterEngineUtilJRQueryExecuterUtils getInstanceWithOrgOssPdfreporterEngineJasperReportsContext:jasperReportsContext_])) getExecuterFactoryWithNSString:[query getLanguage]];
      }
      @catch (OrgOssPdfreporterEngineJRException *e1) {
        [self addBrokenRuleWithNSString:[NSString stringWithFormat:@"Query executer factory for %@ cannot be created.", language] withId:query];
      }
    }
    IOSObjectArray *chunks = [query getChunks];
    if (chunks != nil && (int) [((IOSObjectArray *) nil_chk(chunks)) count] > 0) {
      id<JavaUtilMap> parametersMap = [((OrgOssPdfreporterEngineDesignJRDesignDataset *) nil_chk(dataset)) getParametersMap];
      for (int j = 0; j < (int) [((IOSObjectArray *) nil_chk(chunks)) count]; j++) {
        id<OrgOssPdfreporterEngineJRQueryChunk> queryChunk = [((IOSObjectArray *) nil_chk(chunks)) objectAtIndex:j];
        switch ([((id<OrgOssPdfreporterEngineJRQueryChunk>) nil_chk(queryChunk)) getType]) {
          case OrgOssPdfreporterEngineJRQueryChunk_TYPE_PARAMETER:
          {
            id<OrgOssPdfreporterEngineJRParameter> parameter = [((id<JavaUtilMap>) nil_chk(parametersMap)) getWithId:[((id<OrgOssPdfreporterEngineJRQueryChunk>) nil_chk(queryChunk)) getText]];
            if (parameter == nil) {
              [self addBrokenRuleWithNSString:[NSString stringWithFormat:@"Query parameter not found : %@", [((id<OrgOssPdfreporterEngineJRQueryChunk>) nil_chk(queryChunk)) getText]] withId:query];
            }
            else if (queryExecuterFactory != nil) {
              NSString *parameterType = nil;
              @try {
                parameterType = [((id<OrgOssPdfreporterEngineJRParameter>) nil_chk(parameter)) getValueClassName];
              }
              @catch (OrgOssPdfreporterEngineJRRuntimeException *e) {
              }
              if (parameterType != nil && ![queryExecuterFactory supportsQueryParameterTypeWithNSString:parameterType]) {
                [self addBrokenRuleWithNSString:[NSString stringWithFormat:@"Parameter type not supported in query : %@ class %@", [((id<OrgOssPdfreporterEngineJRQueryChunk>) nil_chk(queryChunk)) getText], parameterType] withId:query];
              }
            }
            break;
          }
          case OrgOssPdfreporterEngineJRQueryChunk_TYPE_PARAMETER_CLAUSE:
          {
            if (![((id<JavaUtilMap>) nil_chk(parametersMap)) containsKeyWithId:[((id<OrgOssPdfreporterEngineJRQueryChunk>) nil_chk(queryChunk)) getText]]) {
              [self addBrokenRuleWithNSString:[NSString stringWithFormat:@"Query parameter not found : %@", [((id<OrgOssPdfreporterEngineJRQueryChunk>) nil_chk(queryChunk)) getText]] withId:query];
            }
            break;
          }
          case OrgOssPdfreporterEngineJRQueryChunk_TYPE_TEXT:
          default:
          {
          }
        }
      }
    }
  }
}

- (void)verifyExpressionsWithJavaUtilList:(id<JavaUtilList>)expressions
                          withJavaUtilMap:(id<JavaUtilMap>)parametersMap
                          withJavaUtilMap:(id<JavaUtilMap>)fieldsMap
                          withJavaUtilMap:(id<JavaUtilMap>)variablesMap {
  if (expressions != nil && [((id<JavaUtilList>) nil_chk(expressions)) size] > 0) {
    for (id<JavaUtilIterator> it = [((id<JavaUtilList>) nil_chk(expressions)) iterator]; [((id<JavaUtilIterator>) nil_chk(it)) hasNext]; ) {
      id<OrgOssPdfreporterEngineJRExpression> expression = [((id<JavaUtilIterator>) nil_chk(it)) next];
      IOSObjectArray *chunks = [((id<OrgOssPdfreporterEngineJRExpression>) nil_chk(expression)) getChunks];
      if (chunks != nil && (int) [((IOSObjectArray *) nil_chk(chunks)) count] > 0) {
        for (int j = 0; j < (int) [((IOSObjectArray *) nil_chk(chunks)) count]; j++) {
          id<OrgOssPdfreporterEngineJRExpressionChunk> expressionChunk = [((IOSObjectArray *) nil_chk(chunks)) objectAtIndex:j];
          switch ([((id<OrgOssPdfreporterEngineJRExpressionChunk>) nil_chk(expressionChunk)) getType]) {
            case OrgOssPdfreporterEngineJRExpressionChunk_TYPE_VARIABLE:
            {
              if (![((id<JavaUtilMap>) nil_chk(variablesMap)) containsKeyWithId:[((id<OrgOssPdfreporterEngineJRExpressionChunk>) nil_chk(expressionChunk)) getText]]) {
                [self addBrokenRuleWithNSString:[NSString stringWithFormat:@"Variable not found : %@", [((id<OrgOssPdfreporterEngineJRExpressionChunk>) nil_chk(expressionChunk)) getText]] withId:expression];
              }
              break;
            }
            case OrgOssPdfreporterEngineJRExpressionChunk_TYPE_FIELD:
            {
              if (![((id<JavaUtilMap>) nil_chk(fieldsMap)) containsKeyWithId:[((id<OrgOssPdfreporterEngineJRExpressionChunk>) nil_chk(expressionChunk)) getText]]) {
                [self addBrokenRuleWithNSString:[NSString stringWithFormat:@"Field not found : %@", [((id<OrgOssPdfreporterEngineJRExpressionChunk>) nil_chk(expressionChunk)) getText]] withId:expression];
              }
              break;
            }
            case OrgOssPdfreporterEngineJRExpressionChunk_TYPE_PARAMETER:
            {
              if (![((id<JavaUtilMap>) nil_chk(parametersMap)) containsKeyWithId:[((id<OrgOssPdfreporterEngineJRExpressionChunk>) nil_chk(expressionChunk)) getText]]) {
                [self addBrokenRuleWithNSString:[NSString stringWithFormat:@"Parameter not found : %@", [((id<OrgOssPdfreporterEngineJRExpressionChunk>) nil_chk(expressionChunk)) getText]] withId:expression];
              }
              break;
            }
            case OrgOssPdfreporterEngineJRExpressionChunk_TYPE_RESOURCE:
            case OrgOssPdfreporterEngineJRExpressionChunk_TYPE_TEXT:
            default:
            {
            }
          }
        }
      }
    }
  }
}

- (void)verifyExpressionsWithOrgOssPdfreporterEngineDesignJRDesignDataset:(OrgOssPdfreporterEngineDesignJRDesignDataset *)dataset {
  [self verifyExpressionsWithJavaUtilList:[((OrgOssPdfreporterEngineJRExpressionCollector *) nil_chk(expressionCollector_)) getExpressionsWithOrgOssPdfreporterEngineJRDataset:dataset] withJavaUtilMap:[((OrgOssPdfreporterEngineDesignJRDesignDataset *) nil_chk(dataset)) getParametersMap] withJavaUtilMap:[((OrgOssPdfreporterEngineDesignJRDesignDataset *) nil_chk(dataset)) getFieldsMap] withJavaUtilMap:[((OrgOssPdfreporterEngineDesignJRDesignDataset *) nil_chk(dataset)) getVariablesMap]];
}

- (void)verifyReportTemplates {
  IOSObjectArray *templates = [((OrgOssPdfreporterEngineDesignJasperDesign *) nil_chk(jasperDesign_)) getTemplates];
  if (templates != nil) {
    for (int i = 0; i < (int) [templates count]; i++) {
      id<OrgOssPdfreporterEngineJRReportTemplate> template_ = [templates objectAtIndex:i];
      [self verifyTemplateWithOrgOssPdfreporterEngineJRReportTemplate:template_];
    }
  }
}

- (void)verifyTemplateWithOrgOssPdfreporterEngineJRReportTemplate:(id<OrgOssPdfreporterEngineJRReportTemplate>)template_ {
  id<OrgOssPdfreporterEngineJRExpression> sourceExpression = [((id<OrgOssPdfreporterEngineJRReportTemplate>) nil_chk(template_)) getSourceExpression];
  if (sourceExpression == nil) {
    [self addBrokenRuleWithNSString:@"Template source expression missing." withId:template_];
  }
}

- (void)verifyStyles {
  IOSObjectArray *styles = [((OrgOssPdfreporterEngineDesignJasperDesign *) nil_chk(jasperDesign_)) getStyles];
  if (styles != nil && (int) [((IOSObjectArray *) nil_chk(styles)) count] > 0) {
    for (int index = 0; index < (int) [((IOSObjectArray *) nil_chk(styles)) count]; index++) {
      id<OrgOssPdfreporterEngineJRStyle> style = [((IOSObjectArray *) nil_chk(styles)) objectAtIndex:index];
      if ([((id<OrgOssPdfreporterEngineJRStyle>) nil_chk(style)) getName] == nil || [((NSString *) nil_chk([((NSString *) nil_chk([((id<OrgOssPdfreporterEngineJRStyle>) nil_chk(style)) getName])) trim])) length] == 0) {
        [self addBrokenRuleWithNSString:@"Report style name missing." withId:style];
      }
      [self verifyConditionalStylesWithOrgOssPdfreporterEngineJRStyle:style];
    }
  }
}

- (void)verifyConditionalStylesWithOrgOssPdfreporterEngineJRStyle:(id<OrgOssPdfreporterEngineJRStyle>)style {
  IOSObjectArray *condStyles = [((id<OrgOssPdfreporterEngineJRStyle>) nil_chk(style)) getConditionalStyles];
  if (condStyles != nil && (int) [((IOSObjectArray *) nil_chk(condStyles)) count] > 0) {
    for (int index = 0; index < (int) [((IOSObjectArray *) nil_chk(condStyles)) count]; index++) {
    }
  }
}

- (void)verifyParametersWithOrgOssPdfreporterEngineDesignJRDesignDataset:(OrgOssPdfreporterEngineDesignJRDesignDataset *)dataset {
  IOSObjectArray *parameters = [((OrgOssPdfreporterEngineDesignJRDesignDataset *) nil_chk(dataset)) getParameters];
  if (parameters != nil && (int) [((IOSObjectArray *) nil_chk(parameters)) count] > 0) {
    for (int index = 0; index < (int) [((IOSObjectArray *) nil_chk(parameters)) count]; index++) {
      id<OrgOssPdfreporterEngineJRParameter> parameter = [((IOSObjectArray *) nil_chk(parameters)) objectAtIndex:index];
      id errorSource = parameter;
      if ([((id<OrgOssPdfreporterEngineJRParameter>) nil_chk(parameter)) isSystemDefined]) {
        errorSource = jasperDesign_;
      }
      if ([((id<OrgOssPdfreporterEngineJRParameter>) nil_chk(parameter)) getName] == nil || [((NSString *) nil_chk([((NSString *) nil_chk([((id<OrgOssPdfreporterEngineJRParameter>) nil_chk(parameter)) getName])) trim])) length] == 0) {
        [self addBrokenRuleWithNSString:@"Parameter name missing." withId:errorSource];
      }
      if ([((id<OrgOssPdfreporterEngineJRParameter>) nil_chk(parameter)) getValueClassName] == nil) {
        [self addBrokenRuleWithNSString:[NSString stringWithFormat:@"Class not set for parameter : %@", [((id<OrgOssPdfreporterEngineJRParameter>) nil_chk(parameter)) getName]] withId:errorSource];
      }
    }
  }
}

- (void)verifyFieldsWithOrgOssPdfreporterEngineDesignJRDesignDataset:(OrgOssPdfreporterEngineDesignJRDesignDataset *)dataset {
  IOSObjectArray *fields = [((OrgOssPdfreporterEngineDesignJRDesignDataset *) nil_chk(dataset)) getFields];
  if (fields != nil && (int) [((IOSObjectArray *) nil_chk(fields)) count] > 0) {
    for (int index = 0; index < (int) [((IOSObjectArray *) nil_chk(fields)) count]; index++) {
      id<OrgOssPdfreporterEngineJRField> field = [((IOSObjectArray *) nil_chk(fields)) objectAtIndex:index];
      if ([((id<OrgOssPdfreporterEngineJRField>) nil_chk(field)) getName] == nil || [((NSString *) nil_chk([((NSString *) nil_chk([((id<OrgOssPdfreporterEngineJRField>) nil_chk(field)) getName])) trim])) length] == 0) {
        [self addBrokenRuleWithNSString:@"Field name missing." withId:field];
      }
      @try {
        IOSClass *fieldType = [((id<OrgOssPdfreporterEngineJRField>) nil_chk(field)) getValueClass];
        if (fieldType == nil) {
          [self addBrokenRuleWithNSString:[NSString stringWithFormat:@"Class not set for field : %@", [((id<OrgOssPdfreporterEngineJRField>) nil_chk(field)) getName]] withId:field];
        }
      }
      @catch (OrgOssPdfreporterEngineJRRuntimeException *e) {
        [self addBrokenRuleWithJavaLangException:e withId:field];
      }
    }
  }
}

- (void)verifySortFieldsWithOrgOssPdfreporterEngineDesignJRDesignDataset:(OrgOssPdfreporterEngineDesignJRDesignDataset *)dataset {
  IOSObjectArray *fields = [((OrgOssPdfreporterEngineDesignJRDesignDataset *) nil_chk(dataset)) getFields];
  IOSObjectArray *variables = [((OrgOssPdfreporterEngineDesignJRDesignDataset *) nil_chk(dataset)) getVariables];
  IOSObjectArray *sortFields = [((OrgOssPdfreporterEngineDesignJRDesignDataset *) nil_chk(dataset)) getSortFields];
  if (sortFields != nil && (int) [((IOSObjectArray *) nil_chk(sortFields)) count] > 0) {
    for (int index = 0; index < (int) [((IOSObjectArray *) nil_chk(sortFields)) count]; index++) {
      id<OrgOssPdfreporterEngineJRSortField> sortField = [((IOSObjectArray *) nil_chk(sortFields)) objectAtIndex:index];
      NSString *sortFieldName = [((id<OrgOssPdfreporterEngineJRSortField>) nil_chk(sortField)) getName];
      if (sortFieldName == nil || [((NSString *) nil_chk([((NSString *) nil_chk(sortFieldName)) trim])) length] == 0) {
        [self addBrokenRuleWithNSString:@"Sort field name missing." withId:sortField];
      }
      else {
        BOOL isFound = NO;
        if ([((id<OrgOssPdfreporterEngineJRSortField>) nil_chk(sortField)) getType] == [OrgOssPdfreporterEngineTypeSortFieldTypeEnumEnum VARIABLE]) {
          if (variables != nil) {
            int j = 0;
            while (!isFound && j < (int) [variables count]) {
              isFound = [((NSString *) nil_chk(sortFieldName)) isEqual:[((id<OrgOssPdfreporterEngineJRVariable>) nil_chk([variables objectAtIndex:j])) getName]];
              j++;
            }
          }
        }
        else {
          if (fields != nil) {
            int j = 0;
            while (!isFound && j < (int) [fields count]) {
              isFound = [((NSString *) nil_chk(sortFieldName)) isEqual:[((id<OrgOssPdfreporterEngineJRField>) nil_chk([fields objectAtIndex:j])) getName]];
              j++;
            }
          }
        }
        if (!isFound) {
          [self addBrokenRuleWithNSString:[NSString stringWithFormat:@"Sort %@ \'%@\' not found in dataset.", [((NSString *) nil_chk([((OrgOssPdfreporterEngineTypeSortFieldTypeEnumEnum *) nil_chk([((id<OrgOssPdfreporterEngineJRSortField>) nil_chk(sortField)) getType])) getName])) lowercaseString], sortFieldName] withId:sortField];
        }
      }
    }
  }
}

- (void)verifyVariablesWithOrgOssPdfreporterEngineDesignJRDesignDataset:(OrgOssPdfreporterEngineDesignJRDesignDataset *)dataset {
  IOSObjectArray *variables = [((OrgOssPdfreporterEngineDesignJRDesignDataset *) nil_chk(dataset)) getVariables];
  if (variables != nil && (int) [((IOSObjectArray *) nil_chk(variables)) count] > 0) {
    BOOL isMainDataset = [((OrgOssPdfreporterEngineDesignJRDesignDataset *) nil_chk(dataset)) isMainDataset];
    for (int index = 0; index < (int) [((IOSObjectArray *) nil_chk(variables)) count]; index++) {
      id<OrgOssPdfreporterEngineJRVariable> variable = [((IOSObjectArray *) nil_chk(variables)) objectAtIndex:index];
      if ([((id<OrgOssPdfreporterEngineJRVariable>) nil_chk(variable)) getName] == nil || [((NSString *) nil_chk([((NSString *) nil_chk([((id<OrgOssPdfreporterEngineJRVariable>) nil_chk(variable)) getName])) trim])) length] == 0) {
        [self addBrokenRuleWithNSString:@"Variable name missing." withId:variable];
      }
      @try {
        IOSClass *valueClass = [((id<OrgOssPdfreporterEngineJRVariable>) nil_chk(variable)) getValueClass];
        if (valueClass == nil) {
          [self addBrokenRuleWithNSString:[NSString stringWithFormat:@"Class not set for variable : %@", [((id<OrgOssPdfreporterEngineJRVariable>) nil_chk(variable)) getName]] withId:variable];
        }
      }
      @catch (OrgOssPdfreporterEngineJRRuntimeException *e) {
        [self addBrokenRuleWithJavaLangException:e withId:variable];
      }
      OrgOssPdfreporterEngineTypeResetTypeEnumEnum *resetType = [((id<OrgOssPdfreporterEngineJRVariable>) nil_chk(variable)) getResetTypeValue];
      if (resetType == [OrgOssPdfreporterEngineTypeResetTypeEnumEnum GROUP]) {
        if ([((id<OrgOssPdfreporterEngineJRVariable>) nil_chk(variable)) getResetGroup] == nil) {
          [self addBrokenRuleWithNSString:[NSString stringWithFormat:@"Reset group missing for variable : %@", [((id<OrgOssPdfreporterEngineJRVariable>) nil_chk(variable)) getName]] withId:variable];
        }
        else {
          id<JavaUtilMap> groupsMap = [((OrgOssPdfreporterEngineDesignJRDesignDataset *) nil_chk(dataset)) getGroupsMap];
          if (![((id<JavaUtilMap>) nil_chk(groupsMap)) containsKeyWithId:[((id<OrgOssPdfreporterEngineJRGroup>) nil_chk([((id<OrgOssPdfreporterEngineJRVariable>) nil_chk(variable)) getResetGroup])) getName]]) {
            [self addBrokenRuleWithNSString:[NSString stringWithFormat:@"Reset group \"%@\" not found for variable : %@", [((id<OrgOssPdfreporterEngineJRGroup>) nil_chk([((id<OrgOssPdfreporterEngineJRVariable>) nil_chk(variable)) getResetGroup])) getName], [((id<OrgOssPdfreporterEngineJRVariable>) nil_chk(variable)) getName]] withId:variable];
          }
        }
      }
      OrgOssPdfreporterEngineTypeIncrementTypeEnumEnum *incrementType = [((id<OrgOssPdfreporterEngineJRVariable>) nil_chk(variable)) getIncrementTypeValue];
      if (incrementType == [OrgOssPdfreporterEngineTypeIncrementTypeEnumEnum GROUP]) {
        if ([((id<OrgOssPdfreporterEngineJRVariable>) nil_chk(variable)) getIncrementGroup] == nil) {
          [self addBrokenRuleWithNSString:[NSString stringWithFormat:@"Increment group missing for variable : %@", [((id<OrgOssPdfreporterEngineJRVariable>) nil_chk(variable)) getName]] withId:variable];
        }
        else {
          id<JavaUtilMap> groupsMap = [((OrgOssPdfreporterEngineDesignJRDesignDataset *) nil_chk(dataset)) getGroupsMap];
          if (![((id<JavaUtilMap>) nil_chk(groupsMap)) containsKeyWithId:[((id<OrgOssPdfreporterEngineJRGroup>) nil_chk([((id<OrgOssPdfreporterEngineJRVariable>) nil_chk(variable)) getIncrementGroup])) getName]]) {
            [self addBrokenRuleWithNSString:[NSString stringWithFormat:@"Increment group \"%@\" not found for variable : %@", [((id<OrgOssPdfreporterEngineJRGroup>) nil_chk([((id<OrgOssPdfreporterEngineJRVariable>) nil_chk(variable)) getIncrementGroup])) getName], [((id<OrgOssPdfreporterEngineJRVariable>) nil_chk(variable)) getName]] withId:variable];
          }
        }
      }
      if (!isMainDataset && ![((id<OrgOssPdfreporterEngineJRVariable>) nil_chk(variable)) isSystemDefined]) {
        if (resetType == [OrgOssPdfreporterEngineTypeResetTypeEnumEnum COLUMN] || resetType == [OrgOssPdfreporterEngineTypeResetTypeEnumEnum PAGE]) {
          [self addBrokenRuleWithNSString:[NSString stringWithFormat:@"Variable %@ of dataset %@ cannot have Column or Page reset type.", [((id<OrgOssPdfreporterEngineJRVariable>) nil_chk(variable)) getName], [((OrgOssPdfreporterEngineDesignJRDesignDataset *) nil_chk(dataset)) getName]] withId:variable];
        }
        if (incrementType == [OrgOssPdfreporterEngineTypeIncrementTypeEnumEnum COLUMN] || incrementType == [OrgOssPdfreporterEngineTypeIncrementTypeEnumEnum PAGE]) {
          [self addBrokenRuleWithNSString:[NSString stringWithFormat:@"Variable %@ of dataset %@ cannot have Column or Page increment type.", [((id<OrgOssPdfreporterEngineJRVariable>) nil_chk(variable)) getName], [((OrgOssPdfreporterEngineDesignJRDesignDataset *) nil_chk(dataset)) getName]] withId:variable];
        }
      }
    }
  }
}

- (void)verifyGroupsWithOrgOssPdfreporterEngineDesignJRDesignDataset:(OrgOssPdfreporterEngineDesignJRDesignDataset *)dataset {
  IOSObjectArray *groups = [((OrgOssPdfreporterEngineDesignJRDesignDataset *) nil_chk(dataset)) getGroups];
  if (groups != nil && (int) [((IOSObjectArray *) nil_chk(groups)) count] > 0) {
    BOOL isMainDataset = [((OrgOssPdfreporterEngineDesignJRDesignDataset *) nil_chk(dataset)) isMainDataset];
    for (int index = 0; index < (int) [((IOSObjectArray *) nil_chk(groups)) count]; index++) {
      id<OrgOssPdfreporterEngineJRGroup> group = [((IOSObjectArray *) nil_chk(groups)) objectAtIndex:index];
      if ([((id<OrgOssPdfreporterEngineJRGroup>) nil_chk(group)) getName] == nil || [((NSString *) nil_chk([((NSString *) nil_chk([((id<OrgOssPdfreporterEngineJRGroup>) nil_chk(group)) getName])) trim])) length] == 0) {
        [self addBrokenRuleWithNSString:@"Group name missing." withId:group];
      }
      if (isMainDataset) {
        [self verifyGroupHeaderAndFooterWithOrgOssPdfreporterEngineJRGroup:group];
      }
      else {
        if (([((id<OrgOssPdfreporterEngineJRGroup>) nil_chk(group)) getGroupHeaderSection] != nil && [((id<OrgOssPdfreporterEngineJRSection>) nil_chk([((id<OrgOssPdfreporterEngineJRGroup>) nil_chk(group)) getGroupHeaderSection])) getBands] != nil && (int) [((IOSObjectArray *) nil_chk([((id<OrgOssPdfreporterEngineJRSection>) nil_chk([((id<OrgOssPdfreporterEngineJRGroup>) nil_chk(group)) getGroupHeaderSection])) getBands])) count] > 0) || ([((id<OrgOssPdfreporterEngineJRGroup>) nil_chk(group)) getGroupFooterSection] != nil && [((id<OrgOssPdfreporterEngineJRSection>) nil_chk([((id<OrgOssPdfreporterEngineJRGroup>) nil_chk(group)) getGroupFooterSection])) getBands] != nil && (int) [((IOSObjectArray *) nil_chk([((id<OrgOssPdfreporterEngineJRSection>) nil_chk([((id<OrgOssPdfreporterEngineJRGroup>) nil_chk(group)) getGroupFooterSection])) getBands])) count] > 0)) {
          [self addBrokenRuleWithNSString:[NSString stringWithFormat:@"Group %@ cannot have header or footer sections.", [((id<OrgOssPdfreporterEngineJRGroup>) nil_chk(group)) getName]] withId:group];
        }
      }
      if (isMainDataset) {
        [self verifySectionWithOrgOssPdfreporterEngineJRSection:[((id<OrgOssPdfreporterEngineJRGroup>) nil_chk(group)) getGroupHeaderSection]];
        [self verifySectionWithOrgOssPdfreporterEngineJRSection:[((id<OrgOssPdfreporterEngineJRGroup>) nil_chk(group)) getGroupFooterSection]];
      }
    }
  }
}

- (void)verifyGroupHeaderAndFooterWithOrgOssPdfreporterEngineJRGroup:(id<OrgOssPdfreporterEngineJRGroup>)group {
  if ([((OrgOssPdfreporterEngineDesignJasperDesign *) nil_chk(jasperDesign_)) isTitleNewPage]) {
    id<OrgOssPdfreporterEngineJRSection> groupHeaderSection = [((id<OrgOssPdfreporterEngineJRGroup>) nil_chk(group)) getGroupHeaderSection];
    if (groupHeaderSection != nil) {
      IOSObjectArray *groupHeaderBands = [groupHeaderSection getBands];
      if (groupHeaderBands != nil && (int) [((IOSObjectArray *) nil_chk(groupHeaderBands)) count] > 0) {
        for (int i = 0; i < (int) [((IOSObjectArray *) nil_chk(groupHeaderBands)) count]; i++) {
          id<OrgOssPdfreporterEngineJRBand> groupHeaderBand = [((IOSObjectArray *) nil_chk(groupHeaderBands)) objectAtIndex:i];
          if ([((OrgOssPdfreporterEngineDesignJasperDesign *) nil_chk(jasperDesign_)) getTopMargin] + ([((OrgOssPdfreporterEngineDesignJasperDesign *) nil_chk(jasperDesign_)) getPageHeader] != nil ? [((id<OrgOssPdfreporterEngineJRBand>) nil_chk([((OrgOssPdfreporterEngineDesignJasperDesign *) nil_chk(jasperDesign_)) getPageHeader])) getHeight] : 0) + ([((OrgOssPdfreporterEngineDesignJasperDesign *) nil_chk(jasperDesign_)) getColumnHeader] != nil ? [((id<OrgOssPdfreporterEngineJRBand>) nil_chk([((OrgOssPdfreporterEngineDesignJasperDesign *) nil_chk(jasperDesign_)) getColumnHeader])) getHeight] : 0) + [OrgOssPdfreporterEngineDesignJRVerifier getBreakHeightWithOrgOssPdfreporterEngineJRBand:groupHeaderBand] + ([((OrgOssPdfreporterEngineDesignJasperDesign *) nil_chk(jasperDesign_)) getColumnFooter] != nil ? [((id<OrgOssPdfreporterEngineJRBand>) nil_chk([((OrgOssPdfreporterEngineDesignJasperDesign *) nil_chk(jasperDesign_)) getColumnFooter])) getHeight] : 0) + ([((OrgOssPdfreporterEngineDesignJasperDesign *) nil_chk(jasperDesign_)) getPageFooter] != nil ? [((id<OrgOssPdfreporterEngineJRBand>) nil_chk([((OrgOssPdfreporterEngineDesignJasperDesign *) nil_chk(jasperDesign_)) getPageFooter])) getHeight] : 0) + [((OrgOssPdfreporterEngineDesignJasperDesign *) nil_chk(jasperDesign_)) getBottomMargin] > [((OrgOssPdfreporterEngineDesignJasperDesign *) nil_chk(jasperDesign_)) getPageHeight]) {
            [self addBrokenRuleWithNSString:[NSString stringWithFormat:@"The '%@' group header section, the page and column headers and footers and the margins do not fit the page height.", [((id<OrgOssPdfreporterEngineJRGroup>) nil_chk(group)) getName]] withId:groupHeaderBand];
          }
        }
      }
    }
    id<OrgOssPdfreporterEngineJRSection> groupFooterSection = [((id<OrgOssPdfreporterEngineJRGroup>) nil_chk(group)) getGroupFooterSection];
    if (groupFooterSection != nil) {
      IOSObjectArray *groupFooterBands = [groupFooterSection getBands];
      if (groupFooterBands != nil && (int) [((IOSObjectArray *) nil_chk(groupFooterBands)) count] > 0) {
        for (int i = 0; i < (int) [((IOSObjectArray *) nil_chk(groupFooterBands)) count]; i++) {
          id<OrgOssPdfreporterEngineJRBand> groupFooterBand = [((IOSObjectArray *) nil_chk(groupFooterBands)) objectAtIndex:i];
          if ([((OrgOssPdfreporterEngineDesignJasperDesign *) nil_chk(jasperDesign_)) getTopMargin] + ([((OrgOssPdfreporterEngineDesignJasperDesign *) nil_chk(jasperDesign_)) getPageHeader] != nil ? [((id<OrgOssPdfreporterEngineJRBand>) nil_chk([((OrgOssPdfreporterEngineDesignJasperDesign *) nil_chk(jasperDesign_)) getPageHeader])) getHeight] : 0) + ([((OrgOssPdfreporterEngineDesignJasperDesign *) nil_chk(jasperDesign_)) getColumnHeader] != nil ? [((id<OrgOssPdfreporterEngineJRBand>) nil_chk([((OrgOssPdfreporterEngineDesignJasperDesign *) nil_chk(jasperDesign_)) getColumnHeader])) getHeight] : 0) + [OrgOssPdfreporterEngineDesignJRVerifier getBreakHeightWithOrgOssPdfreporterEngineJRBand:groupFooterBand] + ([((OrgOssPdfreporterEngineDesignJasperDesign *) nil_chk(jasperDesign_)) getColumnFooter] != nil ? [((id<OrgOssPdfreporterEngineJRBand>) nil_chk([((OrgOssPdfreporterEngineDesignJasperDesign *) nil_chk(jasperDesign_)) getColumnFooter])) getHeight] : 0) + ([((OrgOssPdfreporterEngineDesignJasperDesign *) nil_chk(jasperDesign_)) getPageFooter] != nil ? [((id<OrgOssPdfreporterEngineJRBand>) nil_chk([((OrgOssPdfreporterEngineDesignJasperDesign *) nil_chk(jasperDesign_)) getPageFooter])) getHeight] : 0) + [((OrgOssPdfreporterEngineDesignJasperDesign *) nil_chk(jasperDesign_)) getBottomMargin] > [((OrgOssPdfreporterEngineDesignJasperDesign *) nil_chk(jasperDesign_)) getPageHeight]) {
            [self addBrokenRuleWithNSString:[NSString stringWithFormat:@"The '%@' group footer section, the page and column headers and footers and the margins do not fit the page height.", [((id<OrgOssPdfreporterEngineJRGroup>) nil_chk(group)) getName]] withId:groupFooterBand];
          }
        }
      }
    }
  }
  else {
    id<OrgOssPdfreporterEngineJRSection> groupHeaderSection = [((id<OrgOssPdfreporterEngineJRGroup>) nil_chk(group)) getGroupHeaderSection];
    if (groupHeaderSection != nil) {
      IOSObjectArray *groupHeaderBands = [groupHeaderSection getBands];
      if (groupHeaderBands != nil && (int) [((IOSObjectArray *) nil_chk(groupHeaderBands)) count] > 0) {
        for (int i = 0; i < (int) [((IOSObjectArray *) nil_chk(groupHeaderBands)) count]; i++) {
          id<OrgOssPdfreporterEngineJRBand> groupHeaderBand = [((IOSObjectArray *) nil_chk(groupHeaderBands)) objectAtIndex:i];
          if ([((OrgOssPdfreporterEngineDesignJasperDesign *) nil_chk(jasperDesign_)) getTopMargin] + ([((OrgOssPdfreporterEngineDesignJasperDesign *) nil_chk(jasperDesign_)) getTitle] != nil ? [((id<OrgOssPdfreporterEngineJRBand>) nil_chk([((OrgOssPdfreporterEngineDesignJasperDesign *) nil_chk(jasperDesign_)) getTitle])) getHeight] : 0) + ([((OrgOssPdfreporterEngineDesignJasperDesign *) nil_chk(jasperDesign_)) getPageHeader] != nil ? [((id<OrgOssPdfreporterEngineJRBand>) nil_chk([((OrgOssPdfreporterEngineDesignJasperDesign *) nil_chk(jasperDesign_)) getPageHeader])) getHeight] : 0) + ([((OrgOssPdfreporterEngineDesignJasperDesign *) nil_chk(jasperDesign_)) getColumnHeader] != nil ? [((id<OrgOssPdfreporterEngineJRBand>) nil_chk([((OrgOssPdfreporterEngineDesignJasperDesign *) nil_chk(jasperDesign_)) getColumnHeader])) getHeight] : 0) + [OrgOssPdfreporterEngineDesignJRVerifier getBreakHeightWithOrgOssPdfreporterEngineJRBand:groupHeaderBand] + ([((OrgOssPdfreporterEngineDesignJasperDesign *) nil_chk(jasperDesign_)) getColumnFooter] != nil ? [((id<OrgOssPdfreporterEngineJRBand>) nil_chk([((OrgOssPdfreporterEngineDesignJasperDesign *) nil_chk(jasperDesign_)) getColumnFooter])) getHeight] : 0) + ([((OrgOssPdfreporterEngineDesignJasperDesign *) nil_chk(jasperDesign_)) getPageFooter] != nil ? [((id<OrgOssPdfreporterEngineJRBand>) nil_chk([((OrgOssPdfreporterEngineDesignJasperDesign *) nil_chk(jasperDesign_)) getPageFooter])) getHeight] : 0) + [((OrgOssPdfreporterEngineDesignJasperDesign *) nil_chk(jasperDesign_)) getBottomMargin] > [((OrgOssPdfreporterEngineDesignJasperDesign *) nil_chk(jasperDesign_)) getPageHeight]) {
            [self addBrokenRuleWithNSString:[NSString stringWithFormat:@"The '%@' group header section, the title, the page and column headers and footers and the margins do not fit the first page height.", [((id<OrgOssPdfreporterEngineJRGroup>) nil_chk(group)) getName]] withId:groupHeaderBand];
          }
        }
      }
    }
    id<OrgOssPdfreporterEngineJRSection> groupFooterSection = [((id<OrgOssPdfreporterEngineJRGroup>) nil_chk(group)) getGroupFooterSection];
    if (groupFooterSection != nil) {
      IOSObjectArray *groupFooterBands = [groupFooterSection getBands];
      if (groupFooterBands != nil && (int) [((IOSObjectArray *) nil_chk(groupFooterBands)) count] > 0) {
        for (int i = 0; i < (int) [((IOSObjectArray *) nil_chk(groupFooterBands)) count]; i++) {
          id<OrgOssPdfreporterEngineJRBand> groupFooterBand = [((IOSObjectArray *) nil_chk(groupFooterBands)) objectAtIndex:i];
          if ([((OrgOssPdfreporterEngineDesignJasperDesign *) nil_chk(jasperDesign_)) getTopMargin] + ([((OrgOssPdfreporterEngineDesignJasperDesign *) nil_chk(jasperDesign_)) getTitle] != nil ? [((id<OrgOssPdfreporterEngineJRBand>) nil_chk([((OrgOssPdfreporterEngineDesignJasperDesign *) nil_chk(jasperDesign_)) getTitle])) getHeight] : 0) + ([((OrgOssPdfreporterEngineDesignJasperDesign *) nil_chk(jasperDesign_)) getPageHeader] != nil ? [((id<OrgOssPdfreporterEngineJRBand>) nil_chk([((OrgOssPdfreporterEngineDesignJasperDesign *) nil_chk(jasperDesign_)) getPageHeader])) getHeight] : 0) + ([((OrgOssPdfreporterEngineDesignJasperDesign *) nil_chk(jasperDesign_)) getColumnHeader] != nil ? [((id<OrgOssPdfreporterEngineJRBand>) nil_chk([((OrgOssPdfreporterEngineDesignJasperDesign *) nil_chk(jasperDesign_)) getColumnHeader])) getHeight] : 0) + [OrgOssPdfreporterEngineDesignJRVerifier getBreakHeightWithOrgOssPdfreporterEngineJRBand:groupFooterBand] + ([((OrgOssPdfreporterEngineDesignJasperDesign *) nil_chk(jasperDesign_)) getColumnFooter] != nil ? [((id<OrgOssPdfreporterEngineJRBand>) nil_chk([((OrgOssPdfreporterEngineDesignJasperDesign *) nil_chk(jasperDesign_)) getColumnFooter])) getHeight] : 0) + ([((OrgOssPdfreporterEngineDesignJasperDesign *) nil_chk(jasperDesign_)) getPageFooter] != nil ? [((id<OrgOssPdfreporterEngineJRBand>) nil_chk([((OrgOssPdfreporterEngineDesignJasperDesign *) nil_chk(jasperDesign_)) getPageFooter])) getHeight] : 0) + [((OrgOssPdfreporterEngineDesignJasperDesign *) nil_chk(jasperDesign_)) getBottomMargin] > [((OrgOssPdfreporterEngineDesignJasperDesign *) nil_chk(jasperDesign_)) getPageHeight]) {
            [self addBrokenRuleWithNSString:[NSString stringWithFormat:@"The '%@' group footer section, the title, the page and column headers and footers and the margins do not fit the first page height.", [((id<OrgOssPdfreporterEngineJRGroup>) nil_chk(group)) getName]] withId:groupFooterBand];
          }
        }
      }
    }
  }
}

- (BOOL)toVerifyElementOverlap {
  return ![((OrgOssPdfreporterEngineJRPropertiesUtil *) nil_chk([OrgOssPdfreporterEngineJRPropertiesUtil getInstanceWithOrgOssPdfreporterEngineJasperReportsContext:jasperReportsContext_])) getBooleanPropertyWithOrgOssPdfreporterEngineJRPropertiesHolder:jasperDesign_ withNSString:OrgOssPdfreporterEngineDesignJRVerifier_PROPERTY_ALLOW_ELEMENT_OVERLAP_ withBOOL:YES];
}

- (BOOL)isAllowedToOverlapWithOrgOssPdfreporterEngineJRElement:(id<OrgOssPdfreporterEngineJRElement>)element {
  return [((id<OrgOssPdfreporterEngineJRElement>) nil_chk(element)) hasProperties] && [OrgOssPdfreporterEngineJRPropertiesUtil asBooleanWithNSString:[((OrgOssPdfreporterEngineJRPropertiesMap *) nil_chk([((id<OrgOssPdfreporterEngineJRElement>) nil_chk(element)) getPropertiesMap])) getPropertyWithNSString:OrgOssPdfreporterEngineDesignJRVerifier_PROPERTY_ALLOW_ELEMENT_OVERLAP_]];
}

- (void)verifyElementOverlapWithOrgOssPdfreporterEngineJRElement:(id<OrgOssPdfreporterEngineJRElement>)element1
                            withOrgOssPdfreporterEngineJRElement:(id<OrgOssPdfreporterEngineJRElement>)element2 {
  if ([((id<OrgOssPdfreporterEngineJRElement>) nil_chk(element1)) getWidth] <= 0 || [((id<OrgOssPdfreporterEngineJRElement>) nil_chk(element1)) getHeight] <= 0 || [((id<OrgOssPdfreporterEngineJRElement>) nil_chk(element2)) getWidth] <= 0 || [((id<OrgOssPdfreporterEngineJRElement>) nil_chk(element2)) getHeight] <= 0) {
    return;
  }
  if (([((id<OrgOssPdfreporterEngineJRElement>) nil_chk(element1)) getX] < [((id<OrgOssPdfreporterEngineJRElement>) nil_chk(element2)) getX] + [((id<OrgOssPdfreporterEngineJRElement>) nil_chk(element2)) getWidth] && [((id<OrgOssPdfreporterEngineJRElement>) nil_chk(element2)) getX] < [((id<OrgOssPdfreporterEngineJRElement>) nil_chk(element1)) getX] + [((id<OrgOssPdfreporterEngineJRElement>) nil_chk(element1)) getWidth]) && ([((id<OrgOssPdfreporterEngineJRElement>) nil_chk(element1)) getY] < [((id<OrgOssPdfreporterEngineJRElement>) nil_chk(element2)) getY] + [((id<OrgOssPdfreporterEngineJRElement>) nil_chk(element2)) getHeight] && [((id<OrgOssPdfreporterEngineJRElement>) nil_chk(element2)) getY] < [((id<OrgOssPdfreporterEngineJRElement>) nil_chk(element1)) getY] + [((id<OrgOssPdfreporterEngineJRElement>) nil_chk(element1)) getHeight])) {
    JavaLangStringBuffer *message = [[JavaLangStringBuffer alloc] init];
    (void) [((JavaLangStringBuffer *) nil_chk(message)) appendWithNSString:@"Element "];
    if ([((id<OrgOssPdfreporterEngineJRElement>) nil_chk(element2)) getKey] != nil) {
      (void) [((JavaLangStringBuffer *) nil_chk(message)) appendWithNSString:@"\""];
      (void) [((JavaLangStringBuffer *) nil_chk(message)) appendWithNSString:[((id<OrgOssPdfreporterEngineJRElement>) nil_chk(element2)) getKey]];
      (void) [((JavaLangStringBuffer *) nil_chk(message)) appendWithNSString:@"\" "];
    }
    (void) [((JavaLangStringBuffer *) nil_chk(message)) appendWithNSString:@"at "];
    (void) [((JavaLangStringBuffer *) nil_chk(message)) appendWithNSString:[self getElementPositionTextWithOrgOssPdfreporterEngineJRElement:element2]];
    (void) [((JavaLangStringBuffer *) nil_chk(message)) appendWithNSString:@" overlaps element "];
    if ([((id<OrgOssPdfreporterEngineJRElement>) nil_chk(element1)) getKey] != nil) {
      (void) [((JavaLangStringBuffer *) nil_chk(message)) appendWithNSString:@"\""];
      (void) [((JavaLangStringBuffer *) nil_chk(message)) appendWithNSString:[((id<OrgOssPdfreporterEngineJRElement>) nil_chk(element1)) getKey]];
      (void) [((JavaLangStringBuffer *) nil_chk(message)) appendWithNSString:@"\" "];
    }
    (void) [((JavaLangStringBuffer *) nil_chk(message)) appendWithNSString:@"at "];
    (void) [((JavaLangStringBuffer *) nil_chk(message)) appendWithNSString:[self getElementPositionTextWithOrgOssPdfreporterEngineJRElement:element1]];
    [self addBrokenRuleWithNSString:[((JavaLangStringBuffer *) nil_chk(message)) description] withId:element2];
  }
}

- (NSString *)getElementPositionTextWithOrgOssPdfreporterEngineJRElement:(id<OrgOssPdfreporterEngineJRElement>)element {
  return [NSString stringWithFormat:@"[x = %d, y = %d, width = %d, height = %d]", [((id<OrgOssPdfreporterEngineJRElement>) nil_chk(element)) getX], [((id<OrgOssPdfreporterEngineJRElement>) nil_chk(element)) getY], [((id<OrgOssPdfreporterEngineJRElement>) nil_chk(element)) getWidth], [((id<OrgOssPdfreporterEngineJRElement>) nil_chk(element)) getHeight]];
}

- (void)verifyElementsOverlapWithOrgOssPdfreporterEngineJRElementArray:(IOSObjectArray *)elements {
  if (![self toVerifyElementOverlap]) {
    return;
  }
  for (int index = 1; index < (int) [((IOSObjectArray *) nil_chk(elements)) count]; index++) {
    id<OrgOssPdfreporterEngineJRElement> element = [((IOSObjectArray *) nil_chk(elements)) objectAtIndex:index];
    if (![self isAllowedToOverlapWithOrgOssPdfreporterEngineJRElement:element]) {
      for (int overlapIndex = 0; overlapIndex < index; ++overlapIndex) {
        if (![self isAllowedToOverlapWithOrgOssPdfreporterEngineJRElement:[((IOSObjectArray *) nil_chk(elements)) objectAtIndex:overlapIndex]]) {
          [self verifyElementOverlapWithOrgOssPdfreporterEngineJRElement:[((IOSObjectArray *) nil_chk(elements)) objectAtIndex:overlapIndex] withOrgOssPdfreporterEngineJRElement:element];
        }
      }
    }
  }
}

- (void)verifySectionWithOrgOssPdfreporterEngineJRSection:(id<OrgOssPdfreporterEngineJRSection>)section {
  if (section != nil) {
    IOSObjectArray *bands = [section getBands];
    if (bands != nil && (int) [((IOSObjectArray *) nil_chk(bands)) count] > 0) {
      for (int i = 0; i < (int) [((IOSObjectArray *) nil_chk(bands)) count]; i++) {
        [self verifyBandWithOrgOssPdfreporterEngineJRBand:[((IOSObjectArray *) nil_chk(bands)) objectAtIndex:i]];
      }
    }
  }
}

- (void)verifyBandWithOrgOssPdfreporterEngineJRBand:(id<OrgOssPdfreporterEngineJRBand>)band {
  if (band != nil) {
    IOSObjectArray *elements = [band getElements];
    if (elements != nil && (int) [((IOSObjectArray *) nil_chk(elements)) count] > 0) {
      for (int index = 0; index < (int) [((IOSObjectArray *) nil_chk(elements)) count]; index++) {
        id<OrgOssPdfreporterEngineJRElement> element = [((IOSObjectArray *) nil_chk(elements)) objectAtIndex:index];
        if ([((id<OrgOssPdfreporterEngineJRElement>) nil_chk(element)) getY] + [((id<OrgOssPdfreporterEngineJRElement>) nil_chk(element)) getHeight] > [band getHeight]) {
          [self addBrokenRuleWithNSString:[NSString stringWithFormat:@"Warning : Element bottom reaches outside band area : y=%d height=%d band-height=%d", [((id<OrgOssPdfreporterEngineJRElement>) nil_chk(element)) getY], [((id<OrgOssPdfreporterEngineJRElement>) nil_chk(element)) getHeight], [band getHeight]] withId:element];
        }
        [self verifyElementWithOrgOssPdfreporterEngineJRElement:element];
      }
      [self verifyElementsOverlapWithOrgOssPdfreporterEngineJRElementArray:elements];
    }
  }
}

- (void)verifyElementWithOrgOssPdfreporterEngineJRElement:(id<OrgOssPdfreporterEngineJRElement>)element {
  if ([(id) element conformsToProtocol: @protocol(OrgOssPdfreporterEngineJRStaticText)]) {
    [self verifyStaticTextWithOrgOssPdfreporterEngineJRStaticText:(id<OrgOssPdfreporterEngineJRStaticText>) element];
  }
  else if ([(id) element conformsToProtocol: @protocol(OrgOssPdfreporterEngineJRTextField)]) {
    [self verifyTextFieldWithOrgOssPdfreporterEngineJRTextField:(id<OrgOssPdfreporterEngineJRTextField>) element];
  }
  else if ([(id) element conformsToProtocol: @protocol(OrgOssPdfreporterEngineJRImage)]) {
    [self verifyImageWithOrgOssPdfreporterEngineJRImage:(id<OrgOssPdfreporterEngineJRImage>) element];
  }
  else if ([(id) element conformsToProtocol: @protocol(OrgOssPdfreporterEngineJRSubreport)]) {
    [self verifySubreportWithOrgOssPdfreporterEngineJRSubreport:(id<OrgOssPdfreporterEngineJRSubreport>) element];
  }
  else if ([(id) element conformsToProtocol: @protocol(OrgOssPdfreporterCrosstabsJRCrosstab)]) {
    [self verifyCrosstabWithOrgOssPdfreporterCrosstabsDesignJRDesignCrosstab:(OrgOssPdfreporterCrosstabsDesignJRDesignCrosstab *) element];
  }
  else if ([(id) element conformsToProtocol: @protocol(OrgOssPdfreporterEngineJRFrame)]) {
    [self verifyFrameWithOrgOssPdfreporterEngineJRFrame:(id<OrgOssPdfreporterEngineJRFrame>) element];
  }
  else if ([(id) element conformsToProtocol: @protocol(OrgOssPdfreporterEngineJRComponentElement)]) {
    [self verifyComponentElementWithOrgOssPdfreporterEngineJRComponentElement:(id<OrgOssPdfreporterEngineJRComponentElement>) element];
  }
  else if ([(id) element conformsToProtocol: @protocol(OrgOssPdfreporterEngineJRGenericElement)]) {
    [self verifyGenericElementWithOrgOssPdfreporterEngineJRGenericElement:(id<OrgOssPdfreporterEngineJRGenericElement>) element];
  }
}

- (void)verifyStaticTextWithOrgOssPdfreporterEngineJRStaticText:(id<OrgOssPdfreporterEngineJRStaticText>)staticText {
  [self verifyReportElementWithOrgOssPdfreporterEngineJRElement:staticText];
}

- (void)verifyTextFieldWithOrgOssPdfreporterEngineJRTextField:(id<OrgOssPdfreporterEngineJRTextField>)textField {
  [self verifyReportElementWithOrgOssPdfreporterEngineJRElement:textField];
  [self verifyAnchorWithOrgOssPdfreporterEngineJRAnchor:textField];
  [self verifyHyperlinkWithOrgOssPdfreporterEngineJRHyperlink:textField];
}

- (void)verifyAnchorWithOrgOssPdfreporterEngineJRAnchor:(id<OrgOssPdfreporterEngineJRAnchor>)anchor {
  if (anchor != nil) {
    if ([anchor getBookmarkLevel] != OrgOssPdfreporterEngineJRAnchor_NO_BOOKMARK && [anchor getBookmarkLevel] < 1) {
      [self addBrokenRuleWithNSString:@"Bookmark level should be 0 or greater than 0" withId:anchor];
    }
  }
}

- (void)verifyHyperlinkWithOrgOssPdfreporterEngineJRHyperlink:(id<OrgOssPdfreporterEngineJRHyperlink>)hyperlink {
  if (hyperlink != nil) {
    IOSObjectArray *parameters = [hyperlink getHyperlinkParameters];
    if (parameters != nil) {
      for (int i = 0; i < (int) [parameters count]; i++) {
        id<OrgOssPdfreporterEngineJRHyperlinkParameter> parameter = [parameters objectAtIndex:i];
        [self verifyHyperlinkParameterWithOrgOssPdfreporterEngineJRHyperlinkParameter:parameter];
      }
    }
  }
}

- (void)verifyHyperlinkParameterWithOrgOssPdfreporterEngineJRHyperlinkParameter:(id<OrgOssPdfreporterEngineJRHyperlinkParameter>)parameter {
  if (parameter != nil) {
    NSString *name = [parameter getName];
    if (name == nil || [((NSString *) nil_chk(name)) length] == 0) {
      [self addBrokenRuleWithNSString:@"Hyperlink parameter name missing." withId:parameter];
    }
  }
}

- (void)verifyImageWithOrgOssPdfreporterEngineJRImage:(id<OrgOssPdfreporterEngineJRImage>)image {
  [self verifyReportElementWithOrgOssPdfreporterEngineJRElement:image];
  [self verifyAnchorWithOrgOssPdfreporterEngineJRAnchor:image];
  [self verifyHyperlinkWithOrgOssPdfreporterEngineJRHyperlink:image];
}

- (void)verifySubreportWithOrgOssPdfreporterEngineJRSubreport:(id<OrgOssPdfreporterEngineJRSubreport>)subreport {
  if (subreport != nil) {
    [self verifyReportElementWithOrgOssPdfreporterEngineJRElement:subreport];
    IOSObjectArray *parameters = [subreport getParameters];
    if (parameters != nil && (int) [((IOSObjectArray *) nil_chk(parameters)) count] > 0) {
      for (int index = 0; index < (int) [((IOSObjectArray *) nil_chk(parameters)) count]; index++) {
        id<OrgOssPdfreporterEngineJRSubreportParameter> parameter = [((IOSObjectArray *) nil_chk(parameters)) objectAtIndex:index];
        if ([((id<OrgOssPdfreporterEngineJRSubreportParameter>) nil_chk(parameter)) getName] == nil || [((NSString *) nil_chk([((NSString *) nil_chk([((id<OrgOssPdfreporterEngineJRSubreportParameter>) nil_chk(parameter)) getName])) trim])) length] == 0) {
          [self addBrokenRuleWithNSString:@"Subreport parameter name missing." withId:parameter];
        }
      }
    }
    if ([subreport getConnectionExpression] != nil && [subreport getDataSourceExpression] != nil) {
      [self addBrokenRuleWithNSString:@"Subreport cannot have both connection expresion and data source expression." withId:subreport];
    }
    IOSObjectArray *returnValues = [subreport getReturnValues];
    if (returnValues != nil && (int) [((IOSObjectArray *) nil_chk(returnValues)) count] > 0) {
      for (int i = 0; i < (int) [((IOSObjectArray *) nil_chk(returnValues)) count]; i++) {
        id<OrgOssPdfreporterEngineJRSubreportReturnValue> returnValue = [((IOSObjectArray *) nil_chk(returnValues)) objectAtIndex:i];
        if ([((id<OrgOssPdfreporterEngineJRSubreportReturnValue>) nil_chk(returnValue)) getSubreportVariable] == nil || [((NSString *) nil_chk([((NSString *) nil_chk([((id<OrgOssPdfreporterEngineJRSubreportReturnValue>) nil_chk(returnValue)) getSubreportVariable])) trim])) length] == 0) {
          [self addBrokenRuleWithNSString:@"Subreport return value variable name missing." withId:returnValue];
        }
        if ([((id<OrgOssPdfreporterEngineJRSubreportReturnValue>) nil_chk(returnValue)) getToVariable] == nil || [((NSString *) nil_chk([((NSString *) nil_chk([((id<OrgOssPdfreporterEngineJRSubreportReturnValue>) nil_chk(returnValue)) getToVariable])) trim])) length] == 0) {
          [self addBrokenRuleWithNSString:@"Subreport return value to variable name missing." withId:returnValue];
        }
        if (![((id<JavaUtilMap>) nil_chk([((OrgOssPdfreporterEngineDesignJasperDesign *) nil_chk(jasperDesign_)) getVariablesMap])) containsKeyWithId:[((id<OrgOssPdfreporterEngineJRSubreportReturnValue>) nil_chk(returnValue)) getToVariable]]) {
          [self addBrokenRuleWithNSString:@"Subreport return value to variable not found." withId:returnValue];
        }
      }
    }
  }
}

- (void)verifyCrosstabWithOrgOssPdfreporterCrosstabsDesignJRDesignCrosstab:(OrgOssPdfreporterCrosstabsDesignJRDesignCrosstab *)crosstab {
  [self verifyReportElementWithOrgOssPdfreporterEngineJRElement:crosstab];
  [self verifyParametersWithOrgOssPdfreporterCrosstabsDesignJRDesignCrosstab:crosstab];
  id<OrgOssPdfreporterCrosstabsJRCrosstabDataset> dataset = [((OrgOssPdfreporterCrosstabsDesignJRDesignCrosstab *) nil_chk(crosstab)) getDataset];
  if (dataset == nil) {
    [self addBrokenRuleWithNSString:@"Crosstab dataset missing." withId:crosstab];
  }
  else {
    [self verifyElementDatasetWithOrgOssPdfreporterEngineJRElementDataset:dataset];
  }
  [self verifyCellContentsWithOrgOssPdfreporterCrosstabsJRCellContents:[((OrgOssPdfreporterCrosstabsDesignJRDesignCrosstab *) nil_chk(crosstab)) getHeaderCell] withNSString:@"crosstab cell"];
  IOSObjectArray *rowGroups = [((OrgOssPdfreporterCrosstabsDesignJRDesignCrosstab *) nil_chk(crosstab)) getRowGroups];
  if (rowGroups == nil || (int) [((IOSObjectArray *) nil_chk(rowGroups)) count] == 0) {
    [self addBrokenRuleWithNSString:@"Crosstab should have at least one row group." withId:crosstab];
  }
  else {
    for (int i = 0; i < (int) [((IOSObjectArray *) nil_chk(rowGroups)) count]; i++) {
      [self verifyCrosstabRowGroupWithOrgOssPdfreporterCrosstabsJRCrosstabRowGroup:[((IOSObjectArray *) nil_chk(rowGroups)) objectAtIndex:i]];
    }
  }
  IOSObjectArray *colGroups = [((OrgOssPdfreporterCrosstabsDesignJRDesignCrosstab *) nil_chk(crosstab)) getColumnGroups];
  if (colGroups == nil || (int) [((IOSObjectArray *) nil_chk(colGroups)) count] == 0) {
    [self addBrokenRuleWithNSString:@"Crosstab should have at least one column group." withId:crosstab];
  }
  else {
    for (int i = 0; i < (int) [((IOSObjectArray *) nil_chk(colGroups)) count]; i++) {
      [self verifyCrosstabColumnGroupWithOrgOssPdfreporterCrosstabsJRCrosstabColumnGroup:[((IOSObjectArray *) nil_chk(colGroups)) objectAtIndex:i]];
    }
  }
  IOSObjectArray *measures = [((OrgOssPdfreporterCrosstabsDesignJRDesignCrosstab *) nil_chk(crosstab)) getMeasures];
  if (measures == nil || (int) [((IOSObjectArray *) nil_chk(measures)) count] == 0) {
    [self addBrokenRuleWithNSString:@"Crosstab should have at least one measure." withId:crosstab];
  }
  else {
    for (int i = 0; i < (int) [((IOSObjectArray *) nil_chk(measures)) count]; i++) {
      [self verifyCrosstabMeasureWithOrgOssPdfreporterCrosstabsJRCrosstabMeasure:[((IOSObjectArray *) nil_chk(measures)) objectAtIndex:i]];
    }
  }
  [self verifyCrosstabCellsWithOrgOssPdfreporterCrosstabsDesignJRDesignCrosstab:crosstab];
  [self verifyCellContentsWithOrgOssPdfreporterCrosstabsJRCellContents:[((OrgOssPdfreporterCrosstabsDesignJRDesignCrosstab *) nil_chk(crosstab)) getWhenNoDataCell] withNSString:@"when no data cell"];
  [self verifyExpressionsWithOrgOssPdfreporterCrosstabsDesignJRDesignCrosstab:crosstab];
}

- (void)verifyParametersWithOrgOssPdfreporterCrosstabsDesignJRDesignCrosstab:(OrgOssPdfreporterCrosstabsDesignJRDesignCrosstab *)crosstab {
  IOSObjectArray *parameters = [((OrgOssPdfreporterCrosstabsDesignJRDesignCrosstab *) nil_chk(crosstab)) getParameters];
  if (parameters != nil) {
    for (int i = 0; i < (int) [parameters count]; i++) {
      id<OrgOssPdfreporterCrosstabsJRCrosstabParameter> parameter = [parameters objectAtIndex:i];
      NSString *paramName = [((id<OrgOssPdfreporterCrosstabsJRCrosstabParameter>) nil_chk(parameter)) getName];
      if (paramName == nil || [((NSString *) nil_chk(paramName)) length] == 0) {
        [self addBrokenRuleWithNSString:@"Missing parameter name for crosstab." withId:parameter];
      }
      @try {
        IOSClass *valueClass = [((id<OrgOssPdfreporterCrosstabsJRCrosstabParameter>) nil_chk(parameter)) getValueClass];
        if (valueClass == nil) {
          [self addBrokenRuleWithNSString:[NSString stringWithFormat:@"Class not set for crosstab parameter %@.", paramName] withId:parameter];
        }
      }
      @catch (JavaLangException *e) {
        [self addBrokenRuleWithJavaLangException:e withId:parameter];
      }
    }
  }
}

- (void)verifyCrosstabRowGroupWithOrgOssPdfreporterCrosstabsJRCrosstabRowGroup:(id<OrgOssPdfreporterCrosstabsJRCrosstabRowGroup>)group {
  [self verifyCrosstabGroupWithOrgOssPdfreporterCrosstabsJRCrosstabGroup:group];
}

- (void)verifyCrosstabColumnGroupWithOrgOssPdfreporterCrosstabsJRCrosstabColumnGroup:(id<OrgOssPdfreporterCrosstabsJRCrosstabColumnGroup>)group {
  [self verifyCrosstabGroupWithOrgOssPdfreporterCrosstabsJRCrosstabGroup:group];
}

- (void)verifyCrosstabGroupWithOrgOssPdfreporterCrosstabsJRCrosstabGroup:(id<OrgOssPdfreporterCrosstabsJRCrosstabGroup>)group {
  NSString *groupName = [((id<OrgOssPdfreporterCrosstabsJRCrosstabGroup>) nil_chk(group)) getName];
  if (groupName == nil || [((NSString *) nil_chk(groupName)) length] == 0) {
    [self addBrokenRuleWithNSString:@"Crosstab group name missing." withId:group];
  }
  [self verifyCrosstabBucketWithOrgOssPdfreporterCrosstabsJRCrosstabGroup:group];
  [self verifyCellContentsWithOrgOssPdfreporterCrosstabsJRCellContents:[((id<OrgOssPdfreporterCrosstabsJRCrosstabGroup>) nil_chk(group)) getHeader] withNSString:[NSString stringWithFormat:@"%@ header", groupName]];
  if ([((id<OrgOssPdfreporterCrosstabsJRCrosstabGroup>) nil_chk(group)) hasTotal]) {
    [self verifyCellContentsWithOrgOssPdfreporterCrosstabsJRCellContents:[((id<OrgOssPdfreporterCrosstabsJRCrosstabGroup>) nil_chk(group)) getTotalHeader] withNSString:[NSString stringWithFormat:@"%@ total header", groupName]];
  }
}

- (void)verifyCrosstabBucketWithOrgOssPdfreporterCrosstabsJRCrosstabGroup:(id<OrgOssPdfreporterCrosstabsJRCrosstabGroup>)group {
  id<OrgOssPdfreporterCrosstabsJRCrosstabBucket> bucket = [((id<OrgOssPdfreporterCrosstabsJRCrosstabGroup>) nil_chk(group)) getBucket];
  @try {
    IOSClass *valueClass = [((id<OrgOssPdfreporterCrosstabsJRCrosstabBucket>) nil_chk(bucket)) getValueClass];
    if (valueClass == nil) {
      [self addBrokenRuleWithNSString:[NSString stringWithFormat:@"Class not set for bucket : %@", [((id<OrgOssPdfreporterCrosstabsJRCrosstabGroup>) nil_chk(group)) getName]] withId:bucket];
    }
  }
  @catch (OrgOssPdfreporterEngineJRRuntimeException *e) {
    [self addBrokenRuleWithJavaLangException:e withId:bucket];
  }
  id<OrgOssPdfreporterEngineJRExpression> expression = [((id<OrgOssPdfreporterCrosstabsJRCrosstabBucket>) nil_chk(bucket)) getExpression];
  if (expression == nil) {
    [self addBrokenRuleWithNSString:[NSString stringWithFormat:@"Crosstab bucket expression missing for group %@.", [((id<OrgOssPdfreporterCrosstabsJRCrosstabGroup>) nil_chk(group)) getName]] withId:bucket];
  }
}

- (void)verifyCrosstabCellsWithOrgOssPdfreporterCrosstabsDesignJRDesignCrosstab:(OrgOssPdfreporterCrosstabsDesignJRDesignCrosstab *)crosstab {
  id<OrgOssPdfreporterCommonsArraysArray2D> cells = [((OrgOssPdfreporterCrosstabsDesignJRDesignCrosstab *) nil_chk(crosstab)) getCells];
  IOSObjectArray *rowGroups = [((OrgOssPdfreporterCrosstabsDesignJRDesignCrosstab *) nil_chk(crosstab)) getRowGroups];
  IOSObjectArray *columnGroups = [((OrgOssPdfreporterCrosstabsDesignJRDesignCrosstab *) nil_chk(crosstab)) getColumnGroups];
  id<OrgOssPdfreporterCrosstabsJRCrosstabCell> baseCell = [((id<OrgOssPdfreporterCommonsArraysArray2D>) nil_chk(cells)) getWithInt:(int) [((IOSObjectArray *) nil_chk(rowGroups)) count] withInt:(int) [((IOSObjectArray *) nil_chk(columnGroups)) count]];
  if (baseCell == nil || [((id<OrgOssPdfreporterCrosstabsJRCrosstabCell>) nil_chk(baseCell)) getWidth] == nil) {
    [self addBrokenRuleWithNSString:@"Crosstab base cell width not specified." withId:crosstab];
  }
  if (baseCell == nil || [((id<OrgOssPdfreporterCrosstabsJRCrosstabCell>) nil_chk(baseCell)) getHeight] == nil) {
    [self addBrokenRuleWithNSString:@"Crosstab base cell height not specified." withId:crosstab];
  }
  for (int i = (int) [((IOSObjectArray *) nil_chk(rowGroups)) count]; i >= 0; --i) {
    for (int j = (int) [((IOSObjectArray *) nil_chk(columnGroups)) count]; j >= 0; --j) {
      id<OrgOssPdfreporterCrosstabsJRCrosstabCell> cell = [((id<OrgOssPdfreporterCommonsArraysArray2D>) nil_chk(cells)) getWithInt:i withInt:j];
      NSString *cellText = [self getCrosstabCellTextWithOrgOssPdfreporterCrosstabsJRCrosstabRowGroupArray:rowGroups withOrgOssPdfreporterCrosstabsJRCrosstabColumnGroupArray:columnGroups withInt:i withInt:j];
      if (cell != nil) {
        id<OrgOssPdfreporterCrosstabsJRCellContents> contents = [cell getContents];
        if (i < (int) [((IOSObjectArray *) nil_chk(rowGroups)) count]) {
          id<OrgOssPdfreporterCrosstabsJRCrosstabCell> colCell = [((id<OrgOssPdfreporterCommonsArraysArray2D>) nil_chk(cells)) getWithInt:(int) [((IOSObjectArray *) nil_chk(rowGroups)) count] withInt:j];
          if (colCell != nil && [((id<OrgOssPdfreporterCrosstabsJRCellContents>) nil_chk([((id<OrgOssPdfreporterCrosstabsJRCrosstabCell>) nil_chk(colCell)) getContents])) getWidth] != [((id<OrgOssPdfreporterCrosstabsJRCellContents>) nil_chk(contents)) getWidth]) {
            [self addBrokenRuleWithNSString:[NSString stringWithFormat:@"Crosstab %@ width should be %d.", cellText, [((id<OrgOssPdfreporterCrosstabsJRCellContents>) nil_chk([((id<OrgOssPdfreporterCrosstabsJRCrosstabCell>) nil_chk(colCell)) getContents])) getWidth]] withId:cell];
          }
        }
        if (j < (int) [((IOSObjectArray *) nil_chk(columnGroups)) count]) {
          id<OrgOssPdfreporterCrosstabsJRCrosstabCell> rowCell = [((id<OrgOssPdfreporterCommonsArraysArray2D>) nil_chk(cells)) getWithInt:i withInt:(int) [((IOSObjectArray *) nil_chk(columnGroups)) count]];
          if (rowCell != nil && [((id<OrgOssPdfreporterCrosstabsJRCellContents>) nil_chk([((id<OrgOssPdfreporterCrosstabsJRCrosstabCell>) nil_chk(rowCell)) getContents])) getHeight] != [((id<OrgOssPdfreporterCrosstabsJRCellContents>) nil_chk(contents)) getHeight]) {
            [self addBrokenRuleWithNSString:[NSString stringWithFormat:@"Crosstab %@ height should be %d.", cellText, [((id<OrgOssPdfreporterCrosstabsJRCellContents>) nil_chk([((id<OrgOssPdfreporterCrosstabsJRCrosstabCell>) nil_chk(rowCell)) getContents])) getHeight]] withId:cell];
          }
        }
        [self verifyCellContentsWithOrgOssPdfreporterCrosstabsJRCellContents:contents withNSString:cellText];
      }
    }
  }
}

- (NSString *)getCrosstabCellTextWithOrgOssPdfreporterCrosstabsJRCrosstabRowGroupArray:(IOSObjectArray *)rowGroups
                              withOrgOssPdfreporterCrosstabsJRCrosstabColumnGroupArray:(IOSObjectArray *)columnGroups
                                                                               withInt:(int)rowIndex
                                                                               withInt:(int)columnIndex {
  NSString *text;
  if (rowIndex == (int) [((IOSObjectArray *) nil_chk(rowGroups)) count]) {
    if (columnIndex == (int) [((IOSObjectArray *) nil_chk(columnGroups)) count]) {
      text = @"cell";
    }
    else {
      text = [NSString stringWithFormat:@"%@ total cell", [((id<OrgOssPdfreporterCrosstabsJRCrosstabColumnGroup>) nil_chk([((IOSObjectArray *) nil_chk(columnGroups)) objectAtIndex:columnIndex])) getName]];
    }
  }
  else {
    if (columnIndex == (int) [((IOSObjectArray *) nil_chk(columnGroups)) count]) {
      text = [NSString stringWithFormat:@"%@ total cell", [((id<OrgOssPdfreporterCrosstabsJRCrosstabRowGroup>) nil_chk([((IOSObjectArray *) nil_chk(rowGroups)) objectAtIndex:rowIndex])) getName]];
    }
    else {
      text = [NSString stringWithFormat:@"%@,%@ total cell", [((id<OrgOssPdfreporterCrosstabsJRCrosstabRowGroup>) nil_chk([((IOSObjectArray *) nil_chk(rowGroups)) objectAtIndex:rowIndex])) getName], [((id<OrgOssPdfreporterCrosstabsJRCrosstabColumnGroup>) nil_chk([((IOSObjectArray *) nil_chk(columnGroups)) objectAtIndex:columnIndex])) getName]];
    }
  }
  return text;
}

- (void)verifyCrosstabMeasureWithOrgOssPdfreporterCrosstabsJRCrosstabMeasure:(id<OrgOssPdfreporterCrosstabsJRCrosstabMeasure>)measure {
  NSString *measureName = [((id<OrgOssPdfreporterCrosstabsJRCrosstabMeasure>) nil_chk(measure)) getName];
  if (measureName == nil || [((NSString *) nil_chk([((NSString *) nil_chk(measureName)) trim])) length] == 0) {
    [self addBrokenRuleWithNSString:@"Measure name missing." withId:measure];
  }
  OrgOssPdfreporterEngineTypeCalculationEnumEnum *calculation = [((id<OrgOssPdfreporterCrosstabsJRCrosstabMeasure>) nil_chk(measure)) getCalculationValue];
  if (calculation == [OrgOssPdfreporterEngineTypeCalculationEnumEnum SYSTEM]) {
    [self addBrokenRuleWithNSString:@"Crosstab mesures cannot have system calculation" withId:measure];
  }
  id<OrgOssPdfreporterEngineJRExpression> valueExpression = [((id<OrgOssPdfreporterCrosstabsJRCrosstabMeasure>) nil_chk(measure)) getValueExpression];
  if (valueExpression == nil) {
    [self addBrokenRuleWithNSString:[NSString stringWithFormat:@"Missing expression for measure %@", measureName] withId:measure];
  }
  @try {
    IOSClass *valueClass = [((id<OrgOssPdfreporterCrosstabsJRCrosstabMeasure>) nil_chk(measure)) getValueClass];
    if (valueClass == nil) {
      [self addBrokenRuleWithNSString:@"Measure value class missing." withId:measure];
    }
    if ([((id<OrgOssPdfreporterCrosstabsJRCrosstabMeasure>) nil_chk(measure)) getPercentageType] != [OrgOssPdfreporterCrosstabsTypeCrosstabPercentageEnumEnum NONE]) {
      IOSClass *percentageCalculatorClass = [((id<OrgOssPdfreporterCrosstabsJRCrosstabMeasure>) nil_chk(measure)) getPercentageCalculatorClass];
      if (percentageCalculatorClass == nil) {
      }
      else {
      }
    }
  }
  @catch (OrgOssPdfreporterEngineJRRuntimeException *e) {
    [self addBrokenRuleWithJavaLangException:e withId:measure];
  }
  @try {
    IOSClass *incrementerFactoryClass = [((id<OrgOssPdfreporterCrosstabsJRCrosstabMeasure>) nil_chk(measure)) getIncrementerFactoryClass];
  }
  @catch (OrgOssPdfreporterEngineJRRuntimeException *e) {
    [self addBrokenRuleWithJavaLangException:e withId:measure];
  }
}

- (void)verifyExpressionsWithOrgOssPdfreporterCrosstabsDesignJRDesignCrosstab:(OrgOssPdfreporterCrosstabsDesignJRDesignCrosstab *)crosstab {
  [self verifyExpressionsWithJavaUtilList:[((OrgOssPdfreporterEngineJRExpressionCollector *) nil_chk(expressionCollector_)) getExpressionsWithOrgOssPdfreporterCrosstabsJRCrosstab:crosstab] withJavaUtilMap:[((OrgOssPdfreporterCrosstabsDesignJRDesignCrosstab *) nil_chk(crosstab)) getParametersMap] withJavaUtilMap:[[JavaUtilHashMap alloc] init] withJavaUtilMap:[((OrgOssPdfreporterCrosstabsDesignJRDesignCrosstab *) nil_chk(crosstab)) getVariablesMap]];
}

- (void)verifyCellContentsWithOrgOssPdfreporterCrosstabsJRCellContents:(id<OrgOssPdfreporterCrosstabsJRCellContents>)contents
                                                          withNSString:(NSString *)cellText {
  if (contents != nil) {
    IOSObjectArray *elements = [contents getElements];
    if (elements != nil && (int) [((IOSObjectArray *) nil_chk(elements)) count] > 0) {
      int topPadding = 0;
      int leftPadding = 0;
      int bottomPadding = 0;
      int rightPadding = 0;
      id<OrgOssPdfreporterEngineJRLineBox> box = [contents getLineBox];
      if (box != nil) {
        topPadding = [((JavaLangInteger *) nil_chk([box getTopPadding])) intValue];
        leftPadding = [((JavaLangInteger *) nil_chk([box getLeftPadding])) intValue];
        bottomPadding = [((JavaLangInteger *) nil_chk([box getBottomPadding])) intValue];
        rightPadding = [((JavaLangInteger *) nil_chk([box getRightPadding])) intValue];
      }
      int cellWidth = [contents getWidth];
      BOOL widthCalculated = cellWidth != OrgOssPdfreporterCrosstabsJRCellContents_NOT_CALCULATED;
      int avlblWidth = cellWidth - leftPadding - rightPadding;
      int cellHeight = [contents getHeight];
      BOOL heightCalculated = cellHeight != OrgOssPdfreporterCrosstabsJRCellContents_NOT_CALCULATED;
      int avlblHeight = cellHeight - topPadding - bottomPadding;
      for (int i = 0; i < (int) [((IOSObjectArray *) nil_chk(elements)) count]; i++) {
        id<OrgOssPdfreporterEngineJRElement> element = [((IOSObjectArray *) nil_chk(elements)) objectAtIndex:i];
        if (widthCalculated && [((id<OrgOssPdfreporterEngineJRElement>) nil_chk(element)) getX] + [((id<OrgOssPdfreporterEngineJRElement>) nil_chk(element)) getWidth] > avlblWidth) {
          [self addBrokenRuleWithNSString:[NSString stringWithFormat:@"Element reaches outside %@ width: x=%d, width=%d, available width=%d.", cellText, [((id<OrgOssPdfreporterEngineJRElement>) nil_chk(element)) getX], [((id<OrgOssPdfreporterEngineJRElement>) nil_chk(element)) getWidth], avlblWidth] withId:element];
        }
        if (heightCalculated && [((id<OrgOssPdfreporterEngineJRElement>) nil_chk(element)) getY] + [((id<OrgOssPdfreporterEngineJRElement>) nil_chk(element)) getHeight] > avlblHeight) {
          [self addBrokenRuleWithNSString:[NSString stringWithFormat:@"Element reaches outside %@ height: y=%d, height=%d, available height=%d.", cellText, [((id<OrgOssPdfreporterEngineJRElement>) nil_chk(element)) getY], [((id<OrgOssPdfreporterEngineJRElement>) nil_chk(element)) getHeight], avlblHeight] withId:element];
        }
        if ([(id) element conformsToProtocol: @protocol(OrgOssPdfreporterEngineJRStaticText)]) {
          [self verifyStaticTextWithOrgOssPdfreporterEngineJRStaticText:(id<OrgOssPdfreporterEngineJRStaticText>) element];
        }
        else if ([(id) element conformsToProtocol: @protocol(OrgOssPdfreporterEngineJRTextField)]) {
          id<OrgOssPdfreporterEngineJRTextField> textField = (id<OrgOssPdfreporterEngineJRTextField>) element;
          if ([((id<OrgOssPdfreporterEngineJRTextField>) nil_chk(textField)) getEvaluationTimeValue] != [OrgOssPdfreporterEngineTypeEvaluationTimeEnumEnum NOW]) {
            [self addBrokenRuleWithNSString:@"Elements with delayed evaluation time are not supported inside crosstab cells." withId:textField];
          }
          [self verifyTextFieldWithOrgOssPdfreporterEngineJRTextField:textField];
        }
        else if ([(id) element conformsToProtocol: @protocol(OrgOssPdfreporterEngineJRImage)]) {
          id<OrgOssPdfreporterEngineJRImage> image = (id<OrgOssPdfreporterEngineJRImage>) element;
          if ([((id<OrgOssPdfreporterEngineJRImage>) nil_chk(image)) getEvaluationTimeValue] != [OrgOssPdfreporterEngineTypeEvaluationTimeEnumEnum NOW]) {
            [self addBrokenRuleWithNSString:@"Elements with delayed evaluation time are not supported inside crosstab cells." withId:image];
          }
          [self verifyImageWithOrgOssPdfreporterEngineJRImage:image];
        }
        else if ([(id) element conformsToProtocol: @protocol(OrgOssPdfreporterEngineJRFrame)]) {
          [self verifyFrameWithOrgOssPdfreporterEngineJRFrame:(id<OrgOssPdfreporterEngineJRFrame>) element];
        }
        else if ([(id) element conformsToProtocol: @protocol(OrgOssPdfreporterEngineJRSubreport)]) {
          [self addBrokenRuleWithNSString:@"Subreports are not allowed inside crosstab cells." withId:element];
        }
        else if ([(id) element conformsToProtocol: @protocol(OrgOssPdfreporterCrosstabsJRCrosstab)]) {
          [self addBrokenRuleWithNSString:@"Crosstabs are not allowed inside crosstab cells." withId:element];
        }
      }
      [self verifyElementsOverlapWithOrgOssPdfreporterEngineJRElementArray:elements];
    }
  }
}

- (void)verifyElementDatasetWithOrgOssPdfreporterEngineJRElementDataset:(id<OrgOssPdfreporterEngineJRElementDataset>)dataset {
  id<OrgOssPdfreporterEngineJRDatasetRun> datasetRun = [((id<OrgOssPdfreporterEngineJRElementDataset>) nil_chk(dataset)) getDatasetRun];
  if (datasetRun != nil) {
    OrgOssPdfreporterEngineTypeIncrementTypeEnumEnum *incrementType = [((id<OrgOssPdfreporterEngineJRElementDataset>) nil_chk(dataset)) getIncrementTypeValue];
    if (incrementType == [OrgOssPdfreporterEngineTypeIncrementTypeEnumEnum PAGE] || incrementType == [OrgOssPdfreporterEngineTypeIncrementTypeEnumEnum COLUMN]) {
      [self addBrokenRuleWithNSString:@"Chart datasets with dataset run cannont have Column or Page increment type." withId:dataset];
    }
    OrgOssPdfreporterEngineTypeResetTypeEnumEnum *resetType = [((id<OrgOssPdfreporterEngineJRElementDataset>) nil_chk(dataset)) getResetTypeValue];
    if (resetType == [OrgOssPdfreporterEngineTypeResetTypeEnumEnum PAGE] || resetType == [OrgOssPdfreporterEngineTypeResetTypeEnumEnum COLUMN]) {
      [self addBrokenRuleWithNSString:@"Chart datasets with dataset run cannont have Column or Page reset type." withId:dataset];
    }
    [self verifyDatasetRunWithOrgOssPdfreporterEngineJRDatasetRun:datasetRun];
  }
}

- (void)verifyDatasetRunWithOrgOssPdfreporterEngineJRDatasetRun:(id<OrgOssPdfreporterEngineJRDatasetRun>)datasetRun {
  OrgOssPdfreporterEngineDesignJRDesignDataset *dataset = nil;
  NSString *datasetName = [((id<OrgOssPdfreporterEngineJRDatasetRun>) nil_chk(datasetRun)) getDatasetName];
  if (datasetName == nil || [((NSString *) nil_chk(datasetName)) length] == 0) {
    [self addBrokenRuleWithNSString:@"Dataset name is missing for dataset run." withId:datasetRun];
  }
  else {
    dataset = (OrgOssPdfreporterEngineDesignJRDesignDataset *) [((id<JavaUtilMap>) nil_chk([((OrgOssPdfreporterEngineDesignJasperDesign *) nil_chk(jasperDesign_)) getDatasetMap])) getWithId:datasetName];
    if (dataset == nil) {
      [self addBrokenRuleWithNSString:[NSString stringWithFormat:@"Unknown dataset name %@.", datasetName] withId:datasetRun];
    }
  }
  IOSObjectArray *parameters = [((id<OrgOssPdfreporterEngineJRDatasetRun>) nil_chk(datasetRun)) getParameters];
  if (parameters != nil && (int) [((IOSObjectArray *) nil_chk(parameters)) count] > 0) {
    for (int index = 0; index < (int) [((IOSObjectArray *) nil_chk(parameters)) count]; index++) {
      id<OrgOssPdfreporterEngineJRDatasetParameter> parameter = [((IOSObjectArray *) nil_chk(parameters)) objectAtIndex:index];
      NSString *paramName = [((id<OrgOssPdfreporterEngineJRDatasetParameter>) nil_chk(parameter)) getName];
      if (paramName == nil || [((NSString *) nil_chk([((NSString *) nil_chk(paramName)) trim])) length] == 0) {
        [self addBrokenRuleWithNSString:[NSString stringWithFormat:@"Dataset %@ parameter name missing.", datasetName] withId:parameter];
      }
      id<OrgOssPdfreporterEngineJRParameter> datasetParam = nil;
      if (dataset != nil) {
        datasetParam = [((id<JavaUtilMap>) nil_chk([dataset getParametersMap])) getWithId:paramName];
        if (datasetParam == nil) {
          [self addBrokenRuleWithNSString:[NSString stringWithFormat:@"Unknown parameter %@ in dataset %@.", paramName, datasetName] withId:parameter];
        }
      }
    }
  }
  id<OrgOssPdfreporterEngineJRExpression> connectionExpression = [((id<OrgOssPdfreporterEngineJRDatasetRun>) nil_chk(datasetRun)) getConnectionExpression];
  id<OrgOssPdfreporterEngineJRExpression> dataSourceExpression = [((id<OrgOssPdfreporterEngineJRDatasetRun>) nil_chk(datasetRun)) getDataSourceExpression];
  if (connectionExpression != nil && dataSourceExpression != nil) {
    [self addBrokenRuleWithNSString:[NSString stringWithFormat:@"Dataset %@ cannot have both connection expresion and data source expression.", datasetName] withId:datasetRun];
  }
}

- (void)verifyDatasets {
  IOSObjectArray *datasets = [((OrgOssPdfreporterEngineDesignJasperDesign *) nil_chk(jasperDesign_)) getDatasets];
  if (datasets != nil && (int) [((IOSObjectArray *) nil_chk(datasets)) count] > 0) {
    for (int i = 0; i < (int) [((IOSObjectArray *) nil_chk(datasets)) count]; ++i) {
      OrgOssPdfreporterEngineDesignJRDesignDataset *dataset = (OrgOssPdfreporterEngineDesignJRDesignDataset *) [((IOSObjectArray *) nil_chk(datasets)) objectAtIndex:i];
      if ([((OrgOssPdfreporterEngineDesignJRDesignDataset *) nil_chk(dataset)) getName] == nil || [((NSString *) nil_chk([((NSString *) nil_chk([((OrgOssPdfreporterEngineDesignJRDesignDataset *) nil_chk(dataset)) getName])) trim])) length] == 0) {
        [self addBrokenRuleWithNSString:@"Dataset name is missing." withId:dataset];
      }
      [self verifyDatasetWithOrgOssPdfreporterEngineDesignJRDesignDataset:dataset];
    }
  }
}

- (void)verifyDatasetWithOrgOssPdfreporterEngineDesignJRDesignDataset:(OrgOssPdfreporterEngineDesignJRDesignDataset *)dataset {
  [self verifyExpressionsWithOrgOssPdfreporterEngineDesignJRDesignDataset:dataset];
  [self verifyParametersWithOrgOssPdfreporterEngineDesignJRDesignDataset:dataset];
  [self verifyQueryWithOrgOssPdfreporterEngineDesignJRDesignDataset:dataset];
  [self verifyFieldsWithOrgOssPdfreporterEngineDesignJRDesignDataset:dataset];
  [self verifySortFieldsWithOrgOssPdfreporterEngineDesignJRDesignDataset:dataset];
  [self verifyVariablesWithOrgOssPdfreporterEngineDesignJRDesignDataset:dataset];
  [self verifyGroupsWithOrgOssPdfreporterEngineDesignJRDesignDataset:dataset];
}

- (void)verifyFrameWithOrgOssPdfreporterEngineJRFrame:(id<OrgOssPdfreporterEngineJRFrame>)frame {
  [self verifyReportElementWithOrgOssPdfreporterEngineJRElement:frame];
  IOSObjectArray *elements = [((id<OrgOssPdfreporterEngineJRFrame>) nil_chk(frame)) getElements];
  if (elements != nil && (int) [((IOSObjectArray *) nil_chk(elements)) count] > 0) {
    int topPadding = [((JavaLangInteger *) nil_chk([((id<OrgOssPdfreporterEngineJRLineBox>) nil_chk([((id<OrgOssPdfreporterEngineJRFrame>) nil_chk(frame)) getLineBox])) getTopPadding])) intValue];
    int leftPadding = [((JavaLangInteger *) nil_chk([((id<OrgOssPdfreporterEngineJRLineBox>) nil_chk([((id<OrgOssPdfreporterEngineJRFrame>) nil_chk(frame)) getLineBox])) getLeftPadding])) intValue];
    int bottomPadding = [((JavaLangInteger *) nil_chk([((id<OrgOssPdfreporterEngineJRLineBox>) nil_chk([((id<OrgOssPdfreporterEngineJRFrame>) nil_chk(frame)) getLineBox])) getBottomPadding])) intValue];
    int rightPadding = [((JavaLangInteger *) nil_chk([((id<OrgOssPdfreporterEngineJRLineBox>) nil_chk([((id<OrgOssPdfreporterEngineJRFrame>) nil_chk(frame)) getLineBox])) getRightPadding])) intValue];
    int avlblWidth = [((id<OrgOssPdfreporterEngineJRFrame>) nil_chk(frame)) getWidth] - leftPadding - rightPadding;
    int avlblHeight = [((id<OrgOssPdfreporterEngineJRFrame>) nil_chk(frame)) getHeight] - topPadding - bottomPadding;
    for (int i = 0; i < (int) [((IOSObjectArray *) nil_chk(elements)) count]; i++) {
      id<OrgOssPdfreporterEngineJRElement> element = [((IOSObjectArray *) nil_chk(elements)) objectAtIndex:i];
      if ([((id<OrgOssPdfreporterEngineJRElement>) nil_chk(element)) getX] + [((id<OrgOssPdfreporterEngineJRElement>) nil_chk(element)) getWidth] > avlblWidth) {
        [self addBrokenRuleWithNSString:[NSString stringWithFormat:@"Element reaches outside frame width: x=%d, width=%d, available width=%d.", [((id<OrgOssPdfreporterEngineJRElement>) nil_chk(element)) getX], [((id<OrgOssPdfreporterEngineJRElement>) nil_chk(element)) getWidth], avlblWidth] withId:element];
      }
      if ([((id<OrgOssPdfreporterEngineJRElement>) nil_chk(element)) getY] + [((id<OrgOssPdfreporterEngineJRElement>) nil_chk(element)) getHeight] > avlblHeight) {
        [self addBrokenRuleWithNSString:[NSString stringWithFormat:@"Element reaches outside frame height: y=%d, height=%d, available height=%d.", [((id<OrgOssPdfreporterEngineJRElement>) nil_chk(element)) getY], [((id<OrgOssPdfreporterEngineJRElement>) nil_chk(element)) getHeight], avlblHeight] withId:element];
      }
      [self verifyElementWithOrgOssPdfreporterEngineJRElement:element];
    }
    [self verifyElementsOverlapWithOrgOssPdfreporterEngineJRElementArray:elements];
  }
}

- (void)verifyReportElementWithOrgOssPdfreporterEngineJRElement:(id<OrgOssPdfreporterEngineJRElement>)element {
  if ([((id<OrgOssPdfreporterEngineJRElement>) nil_chk(element)) getWidth] < 0) {
    if (!allowElementNegativeWidth_) {
      [self addBrokenRuleWithNSString:@"Element cannot have negative width." withId:element];
    }
  }
  if ([((id<OrgOssPdfreporterEngineJRElement>) nil_chk(element)) getY] < 0 && ![self allowElementNegativeYWithOrgOssPdfreporterEngineJRElement:element]) {
    [self addBrokenRuleWithNSString:[NSString stringWithFormat:@"Element negative Y %d not allowed", [((id<OrgOssPdfreporterEngineJRElement>) nil_chk(element)) getY]] withId:element];
  }
  [self verifyProperyExpressionsWithOrgOssPdfreporterEngineJRPropertyExpressionArray:[((id<OrgOssPdfreporterEngineJRElement>) nil_chk(element)) getPropertyExpressions]];
}

- (BOOL)allowElementNegativeYWithOrgOssPdfreporterEngineJRElement:(id<OrgOssPdfreporterEngineJRElement>)element {
  BOOL allow = allowElementNegativeY__;
  if ([((id<OrgOssPdfreporterEngineJRElement>) nil_chk(element)) hasProperties]) {
    OrgOssPdfreporterEngineJRPropertiesMap *properties = [((id<OrgOssPdfreporterEngineJRElement>) nil_chk(element)) getPropertiesMap];
    if ([((OrgOssPdfreporterEngineJRPropertiesMap *) nil_chk(properties)) containsPropertyWithNSString:OrgOssPdfreporterEngineDesignJRVerifier_PROPERTY_ALLOW_ELEMENT_NEGATIVE_Y_]) {
      allow = [OrgOssPdfreporterEngineJRPropertiesUtil asBooleanWithNSString:[((OrgOssPdfreporterEngineJRPropertiesMap *) nil_chk(properties)) getPropertyWithNSString:OrgOssPdfreporterEngineDesignJRVerifier_PROPERTY_ALLOW_ELEMENT_NEGATIVE_Y_]];
    }
  }
  return allow;
}

- (void)verifyProperyExpressionsWithOrgOssPdfreporterEngineJRPropertyExpressionArray:(IOSObjectArray *)propertyExpressions {
  if (propertyExpressions != nil) {
    for (int i = 0; i < (int) [propertyExpressions count]; i++) {
      [self verifyPropertyExpressionWithOrgOssPdfreporterEngineJRPropertyExpression:[propertyExpressions objectAtIndex:i]];
    }
  }
}

- (void)verifyPropertyExpressionWithOrgOssPdfreporterEngineJRPropertyExpression:(id<OrgOssPdfreporterEngineJRPropertyExpression>)propertyExpression {
  NSString *name = [((id<OrgOssPdfreporterEngineJRPropertyExpression>) nil_chk(propertyExpression)) getName];
  if (name == nil) {
    [self addBrokenRuleWithNSString:@"Property name missing." withId:propertyExpression];
  }
  id<OrgOssPdfreporterEngineJRExpression> expr = [((id<OrgOssPdfreporterEngineJRPropertyExpression>) nil_chk(propertyExpression)) getValueExpression];
  if (expr == nil) {
    [self addBrokenRuleWithNSString:@"Property value expression missing." withId:propertyExpression];
  }
}

- (void)verifyComponentElementWithOrgOssPdfreporterEngineJRComponentElement:(id<OrgOssPdfreporterEngineJRComponentElement>)element {
  [self verifyReportElementWithOrgOssPdfreporterEngineJRElement:element];
  OrgOssPdfreporterEngineComponentComponentKey *componentKey = [((id<OrgOssPdfreporterEngineJRComponentElement>) nil_chk(element)) getComponentKey];
  if (componentKey == nil) {
    [self addBrokenRuleWithNSString:@"No component key set for component element" withId:element];
  }
  id<OrgOssPdfreporterEngineComponentComponent> component = [((id<OrgOssPdfreporterEngineJRComponentElement>) nil_chk(element)) getComponent];
  if (component == nil) {
    [self addBrokenRuleWithNSString:@"No component set for component element" withId:element];
  }
  if (componentKey != nil && component != nil) {
    id<OrgOssPdfreporterEngineComponentComponentCompiler> compiler = [((id<OrgOssPdfreporterEngineComponentIComponentManager>) nil_chk([((OrgOssPdfreporterEngineComponentComponentsEnvironment *) nil_chk([OrgOssPdfreporterEngineComponentComponentsEnvironment getInstanceWithOrgOssPdfreporterEngineJasperReportsContext:jasperReportsContext_])) getManagerWithOrgOssPdfreporterEngineComponentComponentKey:componentKey])) getComponentCompilerWithOrgOssPdfreporterEngineJasperReportsContext:jasperReportsContext_];
    [self pushCurrentComponentElementWithOrgOssPdfreporterEngineJRComponentElement:element];
    @try {
      [((id<OrgOssPdfreporterEngineComponentComponentCompiler>) nil_chk(compiler)) verifyWithOrgOssPdfreporterEngineComponentComponent:component withOrgOssPdfreporterEngineDesignJRVerifier:self];
    }
    @finally {
      [self popCurrentComponentElement];
    }
  }
}

- (id<OrgOssPdfreporterEngineJRComponentElement>)getCurrentComponentElement {
  if ([((JavaUtilLinkedList *) nil_chk(currentComponentElementStack_)) isEmpty]) {
    return nil;
  }
  return [((JavaUtilLinkedList *) nil_chk(currentComponentElementStack_)) getFirst];
}

- (void)pushCurrentComponentElementWithOrgOssPdfreporterEngineJRComponentElement:(id<OrgOssPdfreporterEngineJRComponentElement>)element {
  [((JavaUtilLinkedList *) nil_chk(currentComponentElementStack_)) addFirstWithId:element];
}

- (void)popCurrentComponentElement {
  (void) [((JavaUtilLinkedList *) nil_chk(currentComponentElementStack_)) removeFirst];
}

- (void)verifyGenericElementWithOrgOssPdfreporterEngineJRGenericElement:(id<OrgOssPdfreporterEngineJRGenericElement>)element {
  [self verifyReportElementWithOrgOssPdfreporterEngineJRElement:element];
  if ([((id<OrgOssPdfreporterEngineJRGenericElement>) nil_chk(element)) getEvaluationTimeValue] == [OrgOssPdfreporterEngineTypeEvaluationTimeEnumEnum GROUP]) {
    NSString *groupName = [((id<OrgOssPdfreporterEngineJRGenericElement>) nil_chk(element)) getEvaluationGroupName];
    if (groupName == nil) {
      [self addBrokenRuleWithNSString:@"Evaluation group not set for generic element" withId:element];
    }
    else {
      if (![((id<JavaUtilMap>) nil_chk([((OrgOssPdfreporterEngineDesignJasperDesign *) nil_chk(jasperDesign_)) getGroupsMap])) containsKeyWithId:groupName]) {
        [self addBrokenRuleWithNSString:[NSString stringWithFormat:@"Generic element evaluation group %@ not found in report", groupName] withId:element];
      }
    }
  }
  OrgOssPdfreporterEngineJRGenericElementType *type = [((id<OrgOssPdfreporterEngineJRGenericElement>) nil_chk(element)) getGenericType];
  if (type == nil) {
    [self addBrokenRuleWithNSString:@"No type set for generic element" withId:element];
  }
  else {
    if ([((OrgOssPdfreporterEngineJRGenericElementType *) nil_chk(type)) getNamespace] == nil) {
      [self addBrokenRuleWithNSString:@"No namespace set for generic element type" withId:type];
    }
    if ([((OrgOssPdfreporterEngineJRGenericElementType *) nil_chk(type)) getName] == nil) {
      [self addBrokenRuleWithNSString:@"No name set for generic element type" withId:type];
    }
  }
  IOSObjectArray *parameters = [((id<OrgOssPdfreporterEngineJRGenericElement>) nil_chk(element)) getParameters];
  for (int i = 0; i < (int) [((IOSObjectArray *) nil_chk(parameters)) count]; i++) {
    id<OrgOssPdfreporterEngineJRGenericElementParameter> parameter = [((IOSObjectArray *) nil_chk(parameters)) objectAtIndex:i];
    if ([((id<OrgOssPdfreporterEngineJRGenericElementParameter>) nil_chk(parameter)) getName] == nil) {
      [self addBrokenRuleWithNSString:@"No name set for generic element parameter" withId:parameter];
    }
  }
}

+ (int)getBreakHeightWithOrgOssPdfreporterEngineJRBand:(id<OrgOssPdfreporterEngineJRBand>)band {
  int breakHeight = 0;
  if (band != nil) {
    breakHeight = [band getHeight];
    IOSObjectArray *elements = [band getElements];
    if ([OrgOssPdfreporterEngineTypeSplitTypeEnumEnum IMMEDIATE] == [band getSplitTypeValue] && elements != nil && (int) [((IOSObjectArray *) nil_chk(elements)) count] > 0) {
      for (int i = 0; i < (int) [((IOSObjectArray *) nil_chk(elements)) count]; i++) {
        id<OrgOssPdfreporterEngineJRElement> element = [((IOSObjectArray *) nil_chk(elements)) objectAtIndex:i];
        int bottom = [((id<OrgOssPdfreporterEngineJRElement>) nil_chk(element)) getY] + [((id<OrgOssPdfreporterEngineJRElement>) nil_chk(element)) getHeight];
        breakHeight = bottom < breakHeight ? bottom : breakHeight;
      }
    }
  }
  return breakHeight;
}

- (void)verifyExpressionWithOrgOssPdfreporterEngineJRExpression:(id<OrgOssPdfreporterEngineJRExpression>)expression
                                                         withId:(id)parent
                                                   withNSString:(NSString *)mandatoryMessage {
  if (expression == nil) {
    if (mandatoryMessage != nil) {
      [self addBrokenRuleWithNSString:mandatoryMessage withId:parent];
    }
  }
}

- (void)copyAllPropertiesTo:(id)copy {
  [super copyAllPropertiesTo:copy];
  OrgOssPdfreporterEngineDesignJRVerifier *typedCopy = (OrgOssPdfreporterEngineDesignJRVerifier *) copy;
  typedCopy.jasperReportsContext = jasperReportsContext_;
  typedCopy.jasperDesign = jasperDesign_;
  typedCopy.brokenRules = brokenRules_;
  typedCopy.expressionCollector = expressionCollector_;
  typedCopy.currentComponentElementStack = currentComponentElementStack_;
  typedCopy.allowElementNegativeWidth = allowElementNegativeWidth_;
  typedCopy.allowElementNegativeY_ = allowElementNegativeY__;
}

@end
