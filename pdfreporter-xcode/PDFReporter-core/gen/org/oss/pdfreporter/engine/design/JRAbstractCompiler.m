//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: pdfreporter-core/src/org/oss/pdfreporter/engine/design/JRAbstractCompiler.java
//
//  Created by kendra on 9/27/13.
//

#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "java/io/File.h"
#include "java/io/Serializable.h"
#include "java/lang/Exception.h"
#include "java/lang/Integer.h"
#include "java/lang/System.h"
#include "java/util/Collection.h"
#include "java/util/Iterator.h"
#include "java/util/List.h"
#include "java/util/ListIterator.h"
#include "java/util/Random.h"
#include "java/util/logging/Logger.h"
#include "org/oss/pdfreporter/crosstabs/JRCrosstab.h"
#include "org/oss/pdfreporter/crosstabs/design/JRDesignCrosstab.h"
#include "org/oss/pdfreporter/engine/DefaultJasperReportsContext.h"
#include "org/oss/pdfreporter/engine/JRDataset.h"
#include "org/oss/pdfreporter/engine/JRException.h"
#include "org/oss/pdfreporter/engine/JRExpressionCollector.h"
#include "org/oss/pdfreporter/engine/JRPropertiesUtil.h"
#include "org/oss/pdfreporter/engine/JRReport.h"
#include "org/oss/pdfreporter/engine/JRRuntimeException.h"
#include "org/oss/pdfreporter/engine/JasperReport.h"
#include "org/oss/pdfreporter/engine/JasperReportsContext.h"
#include "org/oss/pdfreporter/engine/design/JRAbstractCompiler.h"
#include "org/oss/pdfreporter/engine/design/JRCompilationSourceCode.h"
#include "org/oss/pdfreporter/engine/design/JRCompilationUnit.h"
#include "org/oss/pdfreporter/engine/design/JRCompiler.h"
#include "org/oss/pdfreporter/engine/design/JRDesignDataset.h"
#include "org/oss/pdfreporter/engine/design/JRReportCompileData.h"
#include "org/oss/pdfreporter/engine/design/JRSourceCompileTask.h"
#include "org/oss/pdfreporter/engine/design/JRValidationException.h"
#include "org/oss/pdfreporter/engine/design/JRVerifier.h"
#include "org/oss/pdfreporter/engine/design/JasperDesign.h"
#include "org/oss/pdfreporter/engine/fill/JREvaluator.h"
#include "org/oss/pdfreporter/engine/util/JRSaver.h"
#include "org/oss/pdfreporter/engine/util/JRStringUtil.h"

@implementation OrgOssPdfreporterEngineDesignJRAbstractCompiler

static JavaUtilLoggingLogger * OrgOssPdfreporterEngineDesignJRAbstractCompiler_logger_;
static JavaUtilRandom * OrgOssPdfreporterEngineDesignJRAbstractCompiler_random_;

@synthesize jasperReportsContext = jasperReportsContext_;
@synthesize needsSourceFiles = needsSourceFiles_;

+ (JavaUtilLoggingLogger *)logger {
  return OrgOssPdfreporterEngineDesignJRAbstractCompiler_logger_;
}

+ (JavaUtilRandom *)random {
  return OrgOssPdfreporterEngineDesignJRAbstractCompiler_random_;
}

- (id)initOrgOssPdfreporterEngineDesignJRAbstractCompilerWithOrgOssPdfreporterEngineJasperReportsContext:(id<OrgOssPdfreporterEngineJasperReportsContext>)jasperReportsContext
                                                                                                withBOOL:(BOOL)needsSourceFiles {
  if ((self = [super init])) {
    self.jasperReportsContext = jasperReportsContext;
    self.needsSourceFiles = needsSourceFiles;
  }
  return self;
}

- (id)initWithOrgOssPdfreporterEngineJasperReportsContext:(id<OrgOssPdfreporterEngineJasperReportsContext>)jasperReportsContext
                                                 withBOOL:(BOOL)needsSourceFiles {
  return [self initOrgOssPdfreporterEngineDesignJRAbstractCompilerWithOrgOssPdfreporterEngineJasperReportsContext:jasperReportsContext withBOOL:needsSourceFiles];
}

- (id)initWithBOOL:(BOOL)needsSourceFiles {
  return [self initOrgOssPdfreporterEngineDesignJRAbstractCompilerWithOrgOssPdfreporterEngineJasperReportsContext:[OrgOssPdfreporterEngineDefaultJasperReportsContext getInstance] withBOOL:needsSourceFiles];
}

+ (NSString *)getUnitNameWithOrgOssPdfreporterEngineJasperReport:(OrgOssPdfreporterEngineJasperReport *)report
                            withOrgOssPdfreporterEngineJRDataset:(id<OrgOssPdfreporterEngineJRDataset>)dataset {
  return [OrgOssPdfreporterEngineDesignJRAbstractCompiler getUnitNameWithOrgOssPdfreporterEngineJRReport:report withOrgOssPdfreporterEngineJRDataset:dataset withNSString:[((OrgOssPdfreporterEngineJasperReport *) nil_chk(report)) getCompileNameSuffix]];
}

+ (NSString *)getUnitNameWithOrgOssPdfreporterEngineJRReport:(id<OrgOssPdfreporterEngineJRReport>)report
                        withOrgOssPdfreporterEngineJRDataset:(id<OrgOssPdfreporterEngineJRDataset>)dataset
                                                withNSString:(NSString *)nameSuffix {
  NSString *className_;
  if ([((id<OrgOssPdfreporterEngineJRDataset>) nil_chk(dataset)) isMainDataset]) {
    className_ = [((id<OrgOssPdfreporterEngineJRReport>) nil_chk(report)) getName];
  }
  else {
    className_ = [NSString stringWithFormat:@"%@_%@", [((id<OrgOssPdfreporterEngineJRReport>) nil_chk(report)) getName], [((id<OrgOssPdfreporterEngineJRDataset>) nil_chk(dataset)) getName]];
  }
  className_ = [NSString stringWithFormat:@"%@%@", [OrgOssPdfreporterEngineUtilJRStringUtil getJavaIdentifierWithNSString:className_], nameSuffix];
  return className_;
}

+ (NSString *)getUnitNameWithOrgOssPdfreporterEngineJasperReport:(OrgOssPdfreporterEngineJasperReport *)report
                        withOrgOssPdfreporterCrosstabsJRCrosstab:(id<OrgOssPdfreporterCrosstabsJRCrosstab>)crosstab {
  return [OrgOssPdfreporterEngineDesignJRAbstractCompiler getUnitNameWithOrgOssPdfreporterEngineJRReport:report withInt:[((id<OrgOssPdfreporterCrosstabsJRCrosstab>) nil_chk(crosstab)) getId] withNSString:[((OrgOssPdfreporterEngineJasperReport *) nil_chk(report)) getCompileNameSuffix]];
}

+ (NSString *)getUnitNameWithOrgOssPdfreporterEngineJRReport:(id<OrgOssPdfreporterEngineJRReport>)report
                    withOrgOssPdfreporterCrosstabsJRCrosstab:(id<OrgOssPdfreporterCrosstabsJRCrosstab>)crosstab
            withOrgOssPdfreporterEngineJRExpressionCollector:(OrgOssPdfreporterEngineJRExpressionCollector *)expressionCollector
                                                withNSString:(NSString *)nameSuffix {
  JavaLangInteger *crosstabId = [((OrgOssPdfreporterEngineJRExpressionCollector *) nil_chk(expressionCollector)) getCrosstabIdWithOrgOssPdfreporterCrosstabsJRCrosstab:crosstab];
  if (crosstabId == nil) {
    @throw [[OrgOssPdfreporterEngineJRRuntimeException alloc] initWithNSString:@"Crosstab ID not found."];
  }
  return [OrgOssPdfreporterEngineDesignJRAbstractCompiler getUnitNameWithOrgOssPdfreporterEngineJRReport:report withInt:[((JavaLangInteger *) nil_chk(crosstabId)) intValue] withNSString:nameSuffix];
}

+ (NSString *)getUnitNameWithOrgOssPdfreporterEngineJRReport:(id<OrgOssPdfreporterEngineJRReport>)report
                                                     withInt:(int)crosstabId
                                                withNSString:(NSString *)nameSuffix {
  return [NSString stringWithFormat:@"%@_CROSSTAB%d%@", [OrgOssPdfreporterEngineUtilJRStringUtil getJavaIdentifierWithNSString:[((id<OrgOssPdfreporterEngineJRReport>) nil_chk(report)) getName]], crosstabId, nameSuffix];
}

- (OrgOssPdfreporterEngineJasperReport *)compileReportWithOrgOssPdfreporterEngineDesignJasperDesign:(OrgOssPdfreporterEngineDesignJasperDesign *)jasperDesign {
  [self checkLanguageWithNSString:[((OrgOssPdfreporterEngineDesignJasperDesign *) nil_chk(jasperDesign)) getLanguage]];
  [((JavaUtilLoggingLogger *) nil_chk(OrgOssPdfreporterEngineDesignJRAbstractCompiler_logger_)) finestWithNSString:[NSString stringWithFormat:@"Compiler language: %@ veryfied.", [((OrgOssPdfreporterEngineDesignJasperDesign *) nil_chk(jasperDesign)) getLanguage]]];
  OrgOssPdfreporterEngineJRExpressionCollector *expressionCollector = [OrgOssPdfreporterEngineJRExpressionCollector collectorWithOrgOssPdfreporterEngineJasperReportsContext:jasperReportsContext_ withOrgOssPdfreporterEngineJRReport:jasperDesign];
  [self verifyDesignWithOrgOssPdfreporterEngineDesignJasperDesign:jasperDesign withOrgOssPdfreporterEngineJRExpressionCollector:expressionCollector];
  [((JavaUtilLoggingLogger *) nil_chk(OrgOssPdfreporterEngineDesignJRAbstractCompiler_logger_)) finestWithNSString:[NSString stringWithFormat:@"Design report: %@ veryfied.", [((OrgOssPdfreporterEngineDesignJasperDesign *) nil_chk(jasperDesign)) getName]]];
  NSString *nameSuffix = [OrgOssPdfreporterEngineDesignJRAbstractCompiler createNameSuffix];
  BOOL isKeepJavaFile = [((OrgOssPdfreporterEngineJRPropertiesUtil *) nil_chk([OrgOssPdfreporterEngineJRPropertiesUtil getInstanceWithOrgOssPdfreporterEngineJasperReportsContext:jasperReportsContext_])) getBooleanPropertyWithNSString:[OrgOssPdfreporterEngineDesignJRCompiler COMPILER_KEEP_JAVA_FILE]];
  JavaIoFile *tempDirFile = nil;
  if (isKeepJavaFile || needsSourceFiles_) {
    NSString *tempDirStr = [((OrgOssPdfreporterEngineJRPropertiesUtil *) nil_chk([OrgOssPdfreporterEngineJRPropertiesUtil getInstanceWithOrgOssPdfreporterEngineJasperReportsContext:jasperReportsContext_])) getPropertyWithNSString:[OrgOssPdfreporterEngineDesignJRCompiler COMPILER_TEMP_DIR]];
    tempDirFile = [[JavaIoFile alloc] initWithNSString:tempDirStr];
    if (![((JavaIoFile *) nil_chk(tempDirFile)) exists] || ![((JavaIoFile *) nil_chk(tempDirFile)) isDirectory]) {
      @throw [[OrgOssPdfreporterEngineJRException alloc] initWithNSString:[NSString stringWithFormat:@"Temporary directory not found : %@", tempDirStr]];
    }
  }
  id<JavaUtilList> datasets = [((OrgOssPdfreporterEngineDesignJasperDesign *) nil_chk(jasperDesign)) getDatasetsList];
  id<JavaUtilList> crosstabs = [((OrgOssPdfreporterEngineDesignJasperDesign *) nil_chk(jasperDesign)) getCrosstabs];
  IOSObjectArray *units = [IOSObjectArray arrayWithLength:[((id<JavaUtilList>) nil_chk(datasets)) size] + [((id<JavaUtilList>) nil_chk(crosstabs)) size] + 1 type:[IOSClass classWithClass:[OrgOssPdfreporterEngineDesignJRCompilationUnit class]]];
  [((JavaUtilLoggingLogger *) nil_chk(OrgOssPdfreporterEngineDesignJRAbstractCompiler_logger_)) fineWithNSString:[NSString stringWithFormat:@"Requires: %d compilation units (Datasets: %d, Crosstabs: %d)", (int) [((IOSObjectArray *) nil_chk(units)) count], ([((id<JavaUtilList>) nil_chk(datasets)) size] + 1), [((id<JavaUtilList>) nil_chk(crosstabs)) size]]];
  (void) [((IOSObjectArray *) nil_chk(units)) replaceObjectAtIndex:0 withObject:[self createCompileUnitWithOrgOssPdfreporterEngineDesignJasperDesign:jasperDesign withOrgOssPdfreporterEngineDesignJRDesignDataset:[((OrgOssPdfreporterEngineDesignJasperDesign *) nil_chk(jasperDesign)) getMainDesignDataset] withOrgOssPdfreporterEngineJRExpressionCollector:expressionCollector withJavaIoFile:tempDirFile withNSString:nameSuffix]];
  [((JavaUtilLoggingLogger *) nil_chk(OrgOssPdfreporterEngineDesignJRAbstractCompiler_logger_)) finestWithNSString:[NSString stringWithFormat:@"Main Dataset generated: %@", [((OrgOssPdfreporterEngineDesignJRCompilationUnit *) nil_chk([((IOSObjectArray *) nil_chk(units)) objectAtIndex:0])) getName]]];
  int sourcesCount = 1;
  for (id<JavaUtilIterator> it = [((id<JavaUtilList>) nil_chk(datasets)) iterator]; [((id<JavaUtilIterator>) nil_chk(it)) hasNext]; ++sourcesCount) {
    OrgOssPdfreporterEngineDesignJRDesignDataset *dataset = (OrgOssPdfreporterEngineDesignJRDesignDataset *) [((id<JavaUtilIterator>) nil_chk(it)) next];
    (void) [((IOSObjectArray *) nil_chk(units)) replaceObjectAtIndex:sourcesCount withObject:[self createCompileUnitWithOrgOssPdfreporterEngineDesignJasperDesign:jasperDesign withOrgOssPdfreporterEngineDesignJRDesignDataset:dataset withOrgOssPdfreporterEngineJRExpressionCollector:expressionCollector withJavaIoFile:tempDirFile withNSString:nameSuffix]];
    [((JavaUtilLoggingLogger *) nil_chk(OrgOssPdfreporterEngineDesignJRAbstractCompiler_logger_)) finestWithNSString:[NSString stringWithFormat:@"Subdataset generated: %@", [((OrgOssPdfreporterEngineDesignJRCompilationUnit *) nil_chk([((IOSObjectArray *) nil_chk(units)) objectAtIndex:sourcesCount])) getName]]];
  }
  for (id<JavaUtilIterator> it = [((id<JavaUtilList>) nil_chk(crosstabs)) iterator]; [((id<JavaUtilIterator>) nil_chk(it)) hasNext]; ++sourcesCount) {
    OrgOssPdfreporterCrosstabsDesignJRDesignCrosstab *crosstab = (OrgOssPdfreporterCrosstabsDesignJRDesignCrosstab *) [((id<JavaUtilIterator>) nil_chk(it)) next];
    (void) [((IOSObjectArray *) nil_chk(units)) replaceObjectAtIndex:sourcesCount withObject:[self createCompileUnitWithOrgOssPdfreporterEngineDesignJasperDesign:jasperDesign withOrgOssPdfreporterCrosstabsDesignJRDesignCrosstab:crosstab withOrgOssPdfreporterEngineJRExpressionCollector:expressionCollector withJavaIoFile:tempDirFile withNSString:nameSuffix]];
    [((JavaUtilLoggingLogger *) nil_chk(OrgOssPdfreporterEngineDesignJRAbstractCompiler_logger_)) finestWithNSString:[NSString stringWithFormat:@"Crosstab dataset generated: %@", [((OrgOssPdfreporterEngineDesignJRCompilationUnit *) nil_chk([((IOSObjectArray *) nil_chk(units)) objectAtIndex:sourcesCount])) getName]]];
  }
  NSString *classpath = [((OrgOssPdfreporterEngineJRPropertiesUtil *) nil_chk([OrgOssPdfreporterEngineJRPropertiesUtil getInstanceWithOrgOssPdfreporterEngineJasperReportsContext:jasperReportsContext_])) getPropertyWithNSString:[OrgOssPdfreporterEngineDesignJRCompiler COMPILER_CLASSPATH]];
  @try {
    NSString *compileErrors = [self compileUnitsWithOrgOssPdfreporterEngineDesignJRCompilationUnitArray:units withNSString:classpath withJavaIoFile:tempDirFile];
    if (compileErrors != nil) {
      @throw [[OrgOssPdfreporterEngineJRException alloc] initWithNSString:[NSString stringWithFormat:@"Errors were encountered when compiling report expressions class file:\n%@", compileErrors]];
    }
    OrgOssPdfreporterEngineDesignJRReportCompileData *reportCompileData = [[OrgOssPdfreporterEngineDesignJRReportCompileData alloc] init];
    [((OrgOssPdfreporterEngineDesignJRReportCompileData *) nil_chk(reportCompileData)) setMainDatasetCompileDataWithJavaIoSerializable:[((OrgOssPdfreporterEngineDesignJRCompilationUnit *) nil_chk([((IOSObjectArray *) nil_chk(units)) objectAtIndex:0])) getCompileData]];
    for (id<JavaUtilListIterator> it = [((id<JavaUtilList>) nil_chk(datasets)) listIterator]; [((id<JavaUtilListIterator>) nil_chk(it)) hasNext]; ) {
      OrgOssPdfreporterEngineDesignJRDesignDataset *dataset = (OrgOssPdfreporterEngineDesignJRDesignDataset *) [((id<JavaUtilListIterator>) nil_chk(it)) next];
      [((OrgOssPdfreporterEngineDesignJRReportCompileData *) nil_chk(reportCompileData)) setDatasetCompileDataWithOrgOssPdfreporterEngineJRDataset:dataset withJavaIoSerializable:[((OrgOssPdfreporterEngineDesignJRCompilationUnit *) nil_chk([((IOSObjectArray *) nil_chk(units)) objectAtIndex:[((id<JavaUtilListIterator>) nil_chk(it)) nextIndex]])) getCompileData]];
    }
    for (id<JavaUtilListIterator> it = [((id<JavaUtilList>) nil_chk(crosstabs)) listIterator]; [((id<JavaUtilListIterator>) nil_chk(it)) hasNext]; ) {
      OrgOssPdfreporterCrosstabsDesignJRDesignCrosstab *crosstab = (OrgOssPdfreporterCrosstabsDesignJRDesignCrosstab *) [((id<JavaUtilListIterator>) nil_chk(it)) next];
      JavaLangInteger *crosstabId = [((OrgOssPdfreporterEngineJRExpressionCollector *) nil_chk(expressionCollector)) getCrosstabIdWithOrgOssPdfreporterCrosstabsJRCrosstab:crosstab];
      [((OrgOssPdfreporterEngineDesignJRReportCompileData *) nil_chk(reportCompileData)) setCrosstabCompileDataWithInt:[((JavaLangInteger *) nil_chk(crosstabId)) intValue] withJavaIoSerializable:[((OrgOssPdfreporterEngineDesignJRCompilationUnit *) nil_chk([((IOSObjectArray *) nil_chk(units)) objectAtIndex:[((id<JavaUtilList>) nil_chk(datasets)) size] + [((id<JavaUtilListIterator>) nil_chk(it)) nextIndex]])) getCompileData]];
    }
    OrgOssPdfreporterEngineJasperReport *jasperReport = [[OrgOssPdfreporterEngineJasperReport alloc] initWithOrgOssPdfreporterEngineJRReport:jasperDesign withNSString:[self getCompilerClass] withJavaIoSerializable:reportCompileData withOrgOssPdfreporterEngineJRExpressionCollector:expressionCollector withNSString:nameSuffix];
    return jasperReport;
  }
  @catch (OrgOssPdfreporterEngineJRException *e) {
    @throw e;
  }
  @catch (JavaLangException *e) {
    @throw [[OrgOssPdfreporterEngineJRException alloc] initWithNSString:@"Error compiling report design." withJavaLangThrowable:e];
  }
  @finally {
    if (needsSourceFiles_ && !isKeepJavaFile) {
      [self deleteSourceFilesWithOrgOssPdfreporterEngineDesignJRCompilationUnitArray:units];
    }
  }
}

+ (NSString *)createNameSuffix {
  return [NSString stringWithFormat:@"_%qi_%d", [JavaLangSystem currentTimeMillis], [((JavaUtilRandom *) nil_chk(OrgOssPdfreporterEngineDesignJRAbstractCompiler_random_)) nextIntWithInt:OrgOssPdfreporterEngineDesignJRAbstractCompiler_NAME_SUFFIX_RANDOM_MAX]];
}

- (NSString *)getCompilerClass {
  return [[self getClass] getName];
}

- (void)verifyDesignWithOrgOssPdfreporterEngineDesignJasperDesign:(OrgOssPdfreporterEngineDesignJasperDesign *)jasperDesign
                 withOrgOssPdfreporterEngineJRExpressionCollector:(OrgOssPdfreporterEngineJRExpressionCollector *)expressionCollector {
  id<JavaUtilCollection> brokenRules = [OrgOssPdfreporterEngineDesignJRVerifier verifyDesignWithOrgOssPdfreporterEngineJasperReportsContext:jasperReportsContext_ withOrgOssPdfreporterEngineDesignJasperDesign:jasperDesign withOrgOssPdfreporterEngineJRExpressionCollector:expressionCollector];
  if (brokenRules != nil && [((id<JavaUtilCollection>) nil_chk(brokenRules)) size] > 0) {
    @throw [[OrgOssPdfreporterEngineDesignJRValidationException alloc] initWithJavaUtilCollection:brokenRules];
  }
}

- (OrgOssPdfreporterEngineDesignJRCompilationUnit *)createCompileUnitWithOrgOssPdfreporterEngineDesignJasperDesign:(OrgOssPdfreporterEngineDesignJasperDesign *)jasperDesign
                                                                  withOrgOssPdfreporterEngineDesignJRDesignDataset:(OrgOssPdfreporterEngineDesignJRDesignDataset *)dataset
                                                                  withOrgOssPdfreporterEngineJRExpressionCollector:(OrgOssPdfreporterEngineJRExpressionCollector *)expressionCollector
                                                                                                    withJavaIoFile:(JavaIoFile *)saveSourceDir
                                                                                                      withNSString:(NSString *)nameSuffix {
  NSString *unitName = [OrgOssPdfreporterEngineDesignJRAbstractCompiler getUnitNameWithOrgOssPdfreporterEngineJRReport:jasperDesign withOrgOssPdfreporterEngineJRDataset:dataset withNSString:nameSuffix];
  OrgOssPdfreporterEngineDesignJRSourceCompileTask *sourceTask = [[OrgOssPdfreporterEngineDesignJRSourceCompileTask alloc] initWithOrgOssPdfreporterEngineDesignJasperDesign:jasperDesign withOrgOssPdfreporterEngineDesignJRDesignDataset:dataset withOrgOssPdfreporterEngineJRExpressionCollector:expressionCollector withNSString:unitName];
  id<OrgOssPdfreporterEngineDesignJRCompilationSourceCode> sourceCode = [self generateSourceCodeWithOrgOssPdfreporterEngineDesignJRSourceCompileTask:sourceTask];
  JavaIoFile *sourceFile = [self getSourceFileWithJavaIoFile:saveSourceDir withNSString:unitName withOrgOssPdfreporterEngineDesignJRCompilationSourceCode:sourceCode];
  return [[OrgOssPdfreporterEngineDesignJRCompilationUnit alloc] initWithNSString:unitName withOrgOssPdfreporterEngineDesignJRCompilationSourceCode:sourceCode withJavaIoFile:sourceFile withJavaUtilList:[((OrgOssPdfreporterEngineJRExpressionCollector *) nil_chk(expressionCollector)) getExpressionsWithOrgOssPdfreporterEngineJRDataset:dataset] withOrgOssPdfreporterEngineDesignJRSourceCompileTask:sourceTask];
}

- (OrgOssPdfreporterEngineDesignJRCompilationUnit *)createCompileUnitWithOrgOssPdfreporterEngineDesignJasperDesign:(OrgOssPdfreporterEngineDesignJasperDesign *)jasperDesign
                                                              withOrgOssPdfreporterCrosstabsDesignJRDesignCrosstab:(OrgOssPdfreporterCrosstabsDesignJRDesignCrosstab *)crosstab
                                                                  withOrgOssPdfreporterEngineJRExpressionCollector:(OrgOssPdfreporterEngineJRExpressionCollector *)expressionCollector
                                                                                                    withJavaIoFile:(JavaIoFile *)saveSourceDir
                                                                                                      withNSString:(NSString *)nameSuffix {
  NSString *unitName = [OrgOssPdfreporterEngineDesignJRAbstractCompiler getUnitNameWithOrgOssPdfreporterEngineJRReport:jasperDesign withOrgOssPdfreporterCrosstabsJRCrosstab:crosstab withOrgOssPdfreporterEngineJRExpressionCollector:expressionCollector withNSString:nameSuffix];
  OrgOssPdfreporterEngineDesignJRSourceCompileTask *sourceTask = [[OrgOssPdfreporterEngineDesignJRSourceCompileTask alloc] initWithOrgOssPdfreporterEngineDesignJasperDesign:jasperDesign withOrgOssPdfreporterCrosstabsDesignJRDesignCrosstab:crosstab withOrgOssPdfreporterEngineJRExpressionCollector:expressionCollector withNSString:unitName];
  id<OrgOssPdfreporterEngineDesignJRCompilationSourceCode> sourceCode = [self generateSourceCodeWithOrgOssPdfreporterEngineDesignJRSourceCompileTask:sourceTask];
  JavaIoFile *sourceFile = [self getSourceFileWithJavaIoFile:saveSourceDir withNSString:unitName withOrgOssPdfreporterEngineDesignJRCompilationSourceCode:sourceCode];
  return [[OrgOssPdfreporterEngineDesignJRCompilationUnit alloc] initWithNSString:unitName withOrgOssPdfreporterEngineDesignJRCompilationSourceCode:sourceCode withJavaIoFile:sourceFile withJavaUtilList:[((OrgOssPdfreporterEngineJRExpressionCollector *) nil_chk(expressionCollector)) getExpressionsWithOrgOssPdfreporterCrosstabsJRCrosstab:crosstab] withOrgOssPdfreporterEngineDesignJRSourceCompileTask:sourceTask];
}

- (JavaIoFile *)getSourceFileWithJavaIoFile:(JavaIoFile *)saveSourceDir
                               withNSString:(NSString *)unitName
withOrgOssPdfreporterEngineDesignJRCompilationSourceCode:(id<OrgOssPdfreporterEngineDesignJRCompilationSourceCode>)sourceCode {
  JavaIoFile *sourceFile = nil;
  if (saveSourceDir != nil && sourceCode != nil && [((id<OrgOssPdfreporterEngineDesignJRCompilationSourceCode>) nil_chk(sourceCode)) getCode] != nil) {
    NSString *fileName = [self getSourceFileNameWithNSString:unitName];
    sourceFile = [[JavaIoFile alloc] initWithJavaIoFile:saveSourceDir withNSString:fileName];
    [OrgOssPdfreporterEngineUtilJRSaver saveClassSourceWithNSString:[((id<OrgOssPdfreporterEngineDesignJRCompilationSourceCode>) nil_chk(sourceCode)) getCode] withJavaIoFile:sourceFile];
  }
  return sourceFile;
}

- (void)deleteSourceFilesWithOrgOssPdfreporterEngineDesignJRCompilationUnitArray:(IOSObjectArray *)units {
  for (int i = 0; i < (int) [((IOSObjectArray *) nil_chk(units)) count]; i++) {
    [((JavaIoFile *) nil_chk([((OrgOssPdfreporterEngineDesignJRCompilationUnit *) nil_chk([((IOSObjectArray *) nil_chk(units)) objectAtIndex:i])) getSourceFile])) delete__];
  }
}

- (OrgOssPdfreporterEngineFillJREvaluator *)loadEvaluatorWithOrgOssPdfreporterEngineJasperReport:(OrgOssPdfreporterEngineJasperReport *)jasperReport {
  return [self loadEvaluatorWithOrgOssPdfreporterEngineJasperReport:jasperReport withOrgOssPdfreporterEngineJRDataset:[((OrgOssPdfreporterEngineJasperReport *) nil_chk(jasperReport)) getMainDataset]];
}

- (OrgOssPdfreporterEngineFillJREvaluator *)loadEvaluatorWithOrgOssPdfreporterEngineJasperReport:(OrgOssPdfreporterEngineJasperReport *)jasperReport
                                                            withOrgOssPdfreporterEngineJRDataset:(id<OrgOssPdfreporterEngineJRDataset>)dataset {
  OrgOssPdfreporterEngineDesignJRReportCompileData *reportCompileData = (OrgOssPdfreporterEngineDesignJRReportCompileData *) [((OrgOssPdfreporterEngineJasperReport *) nil_chk(jasperReport)) getCompileData];
  NSString *unitName = [((OrgOssPdfreporterEngineDesignJRReportCompileData *) nil_chk(reportCompileData)) getUnitNameWithOrgOssPdfreporterEngineJasperReport:jasperReport withOrgOssPdfreporterEngineJRDataset:dataset];
  id<JavaIoSerializable> compileData = [((OrgOssPdfreporterEngineDesignJRReportCompileData *) nil_chk(reportCompileData)) getDatasetCompileDataWithOrgOssPdfreporterEngineJRDataset:dataset];
  return [self loadEvaluatorWithJavaIoSerializable:compileData withNSString:unitName];
}

- (OrgOssPdfreporterEngineFillJREvaluator *)loadEvaluatorWithOrgOssPdfreporterEngineJasperReport:(OrgOssPdfreporterEngineJasperReport *)jasperReport
                                                        withOrgOssPdfreporterCrosstabsJRCrosstab:(id<OrgOssPdfreporterCrosstabsJRCrosstab>)crosstab {
  OrgOssPdfreporterEngineDesignJRReportCompileData *reportCompileData = (OrgOssPdfreporterEngineDesignJRReportCompileData *) [((OrgOssPdfreporterEngineJasperReport *) nil_chk(jasperReport)) getCompileData];
  NSString *unitName = [((OrgOssPdfreporterEngineDesignJRReportCompileData *) nil_chk(reportCompileData)) getUnitNameWithOrgOssPdfreporterEngineJasperReport:jasperReport withOrgOssPdfreporterCrosstabsJRCrosstab:crosstab];
  id<JavaIoSerializable> compileData = [((OrgOssPdfreporterEngineDesignJRReportCompileData *) nil_chk(reportCompileData)) getCrosstabCompileDataWithOrgOssPdfreporterCrosstabsJRCrosstab:crosstab];
  return [self loadEvaluatorWithJavaIoSerializable:compileData withNSString:unitName];
}

- (OrgOssPdfreporterEngineFillJREvaluator *)loadEvaluatorWithJavaIoSerializable:(id<JavaIoSerializable>)compileData
                                                                   withNSString:(NSString *)unitName {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}

- (void)checkLanguageWithNSString:(NSString *)language {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
}

- (id<OrgOssPdfreporterEngineDesignJRCompilationSourceCode>)generateSourceCodeWithOrgOssPdfreporterEngineDesignJRSourceCompileTask:(OrgOssPdfreporterEngineDesignJRSourceCompileTask *)sourceTask {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}

- (NSString *)compileUnitsWithOrgOssPdfreporterEngineDesignJRCompilationUnitArray:(IOSObjectArray *)units
                                                                     withNSString:(NSString *)classpath
                                                                   withJavaIoFile:(JavaIoFile *)tempDirFile {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}

- (NSString *)getSourceFileNameWithNSString:(NSString *)unitName {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}

+ (void)initialize {
  if (self == [OrgOssPdfreporterEngineDesignJRAbstractCompiler class]) {
    OrgOssPdfreporterEngineDesignJRAbstractCompiler_logger_ = [JavaUtilLoggingLogger getLoggerWithNSString:[[IOSClass classWithClass:[OrgOssPdfreporterEngineDesignJRAbstractCompiler class]] getName]];
    OrgOssPdfreporterEngineDesignJRAbstractCompiler_random_ = [[JavaUtilRandom alloc] init];
  }
}

- (void)copyAllPropertiesTo:(id)copy {
  [super copyAllPropertiesTo:copy];
  OrgOssPdfreporterEngineDesignJRAbstractCompiler *typedCopy = (OrgOssPdfreporterEngineDesignJRAbstractCompiler *) copy;
  typedCopy.jasperReportsContext = jasperReportsContext_;
  typedCopy.needsSourceFiles = needsSourceFiles_;
}

@end
