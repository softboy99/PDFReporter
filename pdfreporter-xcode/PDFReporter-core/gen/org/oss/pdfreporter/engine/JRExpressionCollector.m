//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: pdfreporter-core/src/org/oss/pdfreporter/engine/JRExpressionCollector.java
//
//  Created by kendra on 9/27/13.
//

#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "java/lang/Integer.h"
#include "java/util/ArrayList.h"
#include "java/util/Collection.h"
#include "java/util/Collections.h"
#include "java/util/HashMap.h"
#include "java/util/HashSet.h"
#include "java/util/Iterator.h"
#include "java/util/LinkedList.h"
#include "java/util/List.h"
#include "java/util/Map.h"
#include "java/util/Set.h"
#include "java/util/TreeMap.h"
#include "org/oss/pdfreporter/commons/arrays/Array2D.h"
#include "org/oss/pdfreporter/crosstabs/JRCellContents.h"
#include "org/oss/pdfreporter/crosstabs/JRCrosstab.h"
#include "org/oss/pdfreporter/crosstabs/JRCrosstabBucket.h"
#include "org/oss/pdfreporter/crosstabs/JRCrosstabCell.h"
#include "org/oss/pdfreporter/crosstabs/JRCrosstabColumnGroup.h"
#include "org/oss/pdfreporter/crosstabs/JRCrosstabDataset.h"
#include "org/oss/pdfreporter/crosstabs/JRCrosstabMeasure.h"
#include "org/oss/pdfreporter/crosstabs/JRCrosstabParameter.h"
#include "org/oss/pdfreporter/crosstabs/JRCrosstabRowGroup.h"
#include "org/oss/pdfreporter/crosstabs/design/JRDesignCrosstab.h"
#include "org/oss/pdfreporter/engine/DefaultJasperReportsContext.h"
#include "org/oss/pdfreporter/engine/JRAnchor.h"
#include "org/oss/pdfreporter/engine/JRBand.h"
#include "org/oss/pdfreporter/engine/JRBreak.h"
#include "org/oss/pdfreporter/engine/JRComponentElement.h"
#include "org/oss/pdfreporter/engine/JRConditionalStyle.h"
#include "org/oss/pdfreporter/engine/JRDataset.h"
#include "org/oss/pdfreporter/engine/JRDatasetParameter.h"
#include "org/oss/pdfreporter/engine/JRDatasetRun.h"
#include "org/oss/pdfreporter/engine/JRElement.h"
#include "org/oss/pdfreporter/engine/JRElementDataset.h"
#include "org/oss/pdfreporter/engine/JREllipse.h"
#include "org/oss/pdfreporter/engine/JRExpression.h"
#include "org/oss/pdfreporter/engine/JRExpressionCollector.h"
#include "org/oss/pdfreporter/engine/JRFrame.h"
#include "org/oss/pdfreporter/engine/JRGenericElement.h"
#include "org/oss/pdfreporter/engine/JRGenericElementParameter.h"
#include "org/oss/pdfreporter/engine/JRGroup.h"
#include "org/oss/pdfreporter/engine/JRHyperlink.h"
#include "org/oss/pdfreporter/engine/JRHyperlinkParameter.h"
#include "org/oss/pdfreporter/engine/JRImage.h"
#include "org/oss/pdfreporter/engine/JRLine.h"
#include "org/oss/pdfreporter/engine/JRParameter.h"
#include "org/oss/pdfreporter/engine/JRPropertyExpression.h"
#include "org/oss/pdfreporter/engine/JRRectangle.h"
#include "org/oss/pdfreporter/engine/JRReport.h"
#include "org/oss/pdfreporter/engine/JRReportTemplate.h"
#include "org/oss/pdfreporter/engine/JRRuntimeException.h"
#include "org/oss/pdfreporter/engine/JRSection.h"
#include "org/oss/pdfreporter/engine/JRStaticText.h"
#include "org/oss/pdfreporter/engine/JRStyle.h"
#include "org/oss/pdfreporter/engine/JRSubreport.h"
#include "org/oss/pdfreporter/engine/JRSubreportParameter.h"
#include "org/oss/pdfreporter/engine/JRTextField.h"
#include "org/oss/pdfreporter/engine/JRVariable.h"
#include "org/oss/pdfreporter/engine/JasperReportsContext.h"
#include "org/oss/pdfreporter/engine/component/Component.h"
#include "org/oss/pdfreporter/engine/component/ComponentCompiler.h"
#include "org/oss/pdfreporter/engine/component/ComponentKey.h"
#include "org/oss/pdfreporter/engine/component/ComponentsEnvironment.h"
#include "org/oss/pdfreporter/engine/component/IComponentManager.h"

@implementation OrgOssPdfreporterEngineJRExpressionCollector

@synthesize jasperReportsContext = jasperReportsContext_;
@synthesize report = report_;
@synthesize parent = parent_;
@synthesize expressionIds = expressionIds_;
@synthesize contextStack = contextStack_;
@synthesize expressionContextMap = expressionContextMap_;
@synthesize generatedIds = generatedIds_;
@synthesize crosstabIds = crosstabIds_;
@synthesize datasetCollectors = datasetCollectors_;
@synthesize crosstabCollectors = crosstabCollectors_;
@synthesize collectedStyles = collectedStyles_;

+ (OrgOssPdfreporterEngineJRExpressionCollector *)collectorWithOrgOssPdfreporterEngineJasperReportsContext:(id<OrgOssPdfreporterEngineJasperReportsContext>)jasperReportsContext
                                                                       withOrgOssPdfreporterEngineJRReport:(id<OrgOssPdfreporterEngineJRReport>)report {
  OrgOssPdfreporterEngineJRExpressionCollector *collector = [[OrgOssPdfreporterEngineJRExpressionCollector alloc] initWithOrgOssPdfreporterEngineJasperReportsContext:jasperReportsContext withOrgOssPdfreporterEngineJRExpressionCollector:nil withOrgOssPdfreporterEngineJRReport:report];
  (void) [((OrgOssPdfreporterEngineJRExpressionCollector *) nil_chk(collector)) collect];
  return collector;
}

+ (id<JavaUtilList>)collectExpressionsWithOrgOssPdfreporterEngineJasperReportsContext:(id<OrgOssPdfreporterEngineJasperReportsContext>)jasperReportsContext
                                                  withOrgOssPdfreporterEngineJRReport:(id<OrgOssPdfreporterEngineJRReport>)report {
  return [((OrgOssPdfreporterEngineJRExpressionCollector *) nil_chk([OrgOssPdfreporterEngineJRExpressionCollector collectorWithOrgOssPdfreporterEngineJasperReportsContext:jasperReportsContext withOrgOssPdfreporterEngineJRReport:report])) getExpressions];
}

+ (OrgOssPdfreporterEngineJRExpressionCollector *)collectorWithOrgOssPdfreporterEngineJasperReportsContext:(id<OrgOssPdfreporterEngineJasperReportsContext>)jasperReportsContext
                                                                       withOrgOssPdfreporterEngineJRReport:(id<OrgOssPdfreporterEngineJRReport>)report
                                                                  withOrgOssPdfreporterCrosstabsJRCrosstab:(id<OrgOssPdfreporterCrosstabsJRCrosstab>)crosstab {
  OrgOssPdfreporterEngineJRExpressionCollector *collector = [[OrgOssPdfreporterEngineJRExpressionCollector alloc] initWithOrgOssPdfreporterEngineJasperReportsContext:jasperReportsContext withOrgOssPdfreporterEngineJRExpressionCollector:nil withOrgOssPdfreporterEngineJRReport:report];
  [((OrgOssPdfreporterEngineJRExpressionCollector *) nil_chk(collector)) collectWithOrgOssPdfreporterCrosstabsJRCrosstab:crosstab];
  return collector;
}

+ (id<JavaUtilList>)collectExpressionsWithOrgOssPdfreporterEngineJasperReportsContext:(id<OrgOssPdfreporterEngineJasperReportsContext>)jasperReportsContext
                                                  withOrgOssPdfreporterEngineJRReport:(id<OrgOssPdfreporterEngineJRReport>)report
                                             withOrgOssPdfreporterCrosstabsJRCrosstab:(id<OrgOssPdfreporterCrosstabsJRCrosstab>)crosstab {
  return [((OrgOssPdfreporterEngineJRExpressionCollector *) nil_chk([OrgOssPdfreporterEngineJRExpressionCollector collectorWithOrgOssPdfreporterEngineJasperReportsContext:jasperReportsContext withOrgOssPdfreporterEngineJRReport:report withOrgOssPdfreporterCrosstabsJRCrosstab:crosstab])) getExpressionsWithOrgOssPdfreporterCrosstabsJRCrosstab:crosstab];
}

+ (OrgOssPdfreporterEngineJRExpressionCollector *)collectorWithOrgOssPdfreporterEngineJRReport:(id<OrgOssPdfreporterEngineJRReport>)report {
  return [OrgOssPdfreporterEngineJRExpressionCollector collectorWithOrgOssPdfreporterEngineJasperReportsContext:[OrgOssPdfreporterEngineDefaultJasperReportsContext getInstance] withOrgOssPdfreporterEngineJRReport:report];
}

+ (id<JavaUtilList>)collectExpressionsWithOrgOssPdfreporterEngineJRReport:(id<OrgOssPdfreporterEngineJRReport>)report {
  return [OrgOssPdfreporterEngineJRExpressionCollector collectExpressionsWithOrgOssPdfreporterEngineJasperReportsContext:[OrgOssPdfreporterEngineDefaultJasperReportsContext getInstance] withOrgOssPdfreporterEngineJRReport:report];
}

+ (OrgOssPdfreporterEngineJRExpressionCollector *)collectorWithOrgOssPdfreporterEngineJRReport:(id<OrgOssPdfreporterEngineJRReport>)report
                                                      withOrgOssPdfreporterCrosstabsJRCrosstab:(id<OrgOssPdfreporterCrosstabsJRCrosstab>)crosstab {
  return [OrgOssPdfreporterEngineJRExpressionCollector collectorWithOrgOssPdfreporterEngineJasperReportsContext:[OrgOssPdfreporterEngineDefaultJasperReportsContext getInstance] withOrgOssPdfreporterEngineJRReport:report withOrgOssPdfreporterCrosstabsJRCrosstab:crosstab];
}

+ (id<JavaUtilList>)collectExpressionsWithOrgOssPdfreporterEngineJRReport:(id<OrgOssPdfreporterEngineJRReport>)report
                                 withOrgOssPdfreporterCrosstabsJRCrosstab:(id<OrgOssPdfreporterCrosstabsJRCrosstab>)crosstab {
  return [OrgOssPdfreporterEngineJRExpressionCollector collectExpressionsWithOrgOssPdfreporterEngineJasperReportsContext:[OrgOssPdfreporterEngineDefaultJasperReportsContext getInstance] withOrgOssPdfreporterEngineJRReport:report withOrgOssPdfreporterCrosstabsJRCrosstab:crosstab];
}

- (id)initWithOrgOssPdfreporterEngineJRExpressionCollector:(OrgOssPdfreporterEngineJRExpressionCollector *)parent
                       withOrgOssPdfreporterEngineJRReport:(id<OrgOssPdfreporterEngineJRReport>)report {
  return [self initOrgOssPdfreporterEngineJRExpressionCollectorWithOrgOssPdfreporterEngineJasperReportsContext:[OrgOssPdfreporterEngineDefaultJasperReportsContext getInstance] withOrgOssPdfreporterEngineJRExpressionCollector:parent withOrgOssPdfreporterEngineJRReport:report];
}

- (id)initOrgOssPdfreporterEngineJRExpressionCollectorWithOrgOssPdfreporterEngineJasperReportsContext:(id<OrgOssPdfreporterEngineJasperReportsContext>)jasperReportsContext
                                                     withOrgOssPdfreporterEngineJRExpressionCollector:(OrgOssPdfreporterEngineJRExpressionCollector *)parent
                                                                  withOrgOssPdfreporterEngineJRReport:(id<OrgOssPdfreporterEngineJRReport>)report {
  if ((self = [super init])) {
    generatedIds_ = [[OrgOssPdfreporterEngineJRExpressionCollector_GeneratedIds alloc] init];
    crosstabIds_ = [[JavaUtilHashMap alloc] init];
    self.jasperReportsContext = jasperReportsContext;
    self.parent = parent;
    self.report = report;
    if (parent == nil) {
      expressionIds_ = [[JavaUtilHashMap alloc] init];
      datasetCollectors_ = [[JavaUtilHashMap alloc] init];
      crosstabCollectors_ = [[JavaUtilHashMap alloc] init];
      contextStack_ = [[JavaUtilLinkedList alloc] init];
      expressionContextMap_ = [[JavaUtilHashMap alloc] init];
    }
    else {
      expressionIds_ = ((OrgOssPdfreporterEngineJRExpressionCollector *) nil_chk(self.parent)).expressionIds;
      contextStack_ = ((OrgOssPdfreporterEngineJRExpressionCollector *) nil_chk(self.parent)).contextStack;
      expressionContextMap_ = ((OrgOssPdfreporterEngineJRExpressionCollector *) nil_chk(self.parent)).expressionContextMap;
    }
    collectedStyles_ = [[JavaUtilHashSet alloc] init];
  }
  return self;
}

- (id)initWithOrgOssPdfreporterEngineJasperReportsContext:(id<OrgOssPdfreporterEngineJasperReportsContext>)jasperReportsContext
         withOrgOssPdfreporterEngineJRExpressionCollector:(OrgOssPdfreporterEngineJRExpressionCollector *)parent
                      withOrgOssPdfreporterEngineJRReport:(id<OrgOssPdfreporterEngineJRReport>)report {
  return [self initOrgOssPdfreporterEngineJRExpressionCollectorWithOrgOssPdfreporterEngineJasperReportsContext:jasperReportsContext withOrgOssPdfreporterEngineJRExpressionCollector:parent withOrgOssPdfreporterEngineJRReport:report];
}

- (void)addExpressionWithOrgOssPdfreporterEngineJRExpression:(id<OrgOssPdfreporterEngineJRExpression>)expression {
  if (expression != nil) {
    JavaLangInteger *id_ = [self getExpressionIdWithOrgOssPdfreporterEngineJRExpression:expression];
    if (id_ == nil) {
      id_ = [((OrgOssPdfreporterEngineJRExpressionCollector_GeneratedIds *) nil_chk(generatedIds_)) nextId];
      [self setGeneratedIdWithOrgOssPdfreporterEngineJRExpression:expression withJavaLangInteger:id_];
      (void) [((OrgOssPdfreporterEngineJRExpressionCollector_GeneratedIds *) nil_chk(generatedIds_)) putWithJavaLangInteger:id_ withOrgOssPdfreporterEngineJRExpression:expression];
    }
    else {
      id<OrgOssPdfreporterEngineJRExpression> existingExpression = [((OrgOssPdfreporterEngineJRExpressionCollector_GeneratedIds *) nil_chk(generatedIds_)) putWithJavaLangInteger:id_ withOrgOssPdfreporterEngineJRExpression:expression];
      if (existingExpression != nil && ![((id<OrgOssPdfreporterEngineJRExpression>) nil_chk(existingExpression)) isEqual:expression]) {
        JavaLangInteger *newId = [((OrgOssPdfreporterEngineJRExpressionCollector_GeneratedIds *) nil_chk(generatedIds_)) nextId];
        [self updateGeneratedIdWithOrgOssPdfreporterEngineJRExpression:existingExpression withJavaLangInteger:id_ withJavaLangInteger:newId];
        (void) [((OrgOssPdfreporterEngineJRExpressionCollector_GeneratedIds *) nil_chk(generatedIds_)) putWithJavaLangInteger:newId withOrgOssPdfreporterEngineJRExpression:existingExpression];
      }
    }
    [self setExpressionContextWithOrgOssPdfreporterEngineJRExpression:expression];
  }
}

- (void)setGeneratedIdWithOrgOssPdfreporterEngineJRExpression:(id<OrgOssPdfreporterEngineJRExpression>)expression
                                          withJavaLangInteger:(JavaLangInteger *)id_ {
  id existingId = [((id<JavaUtilMap>) nil_chk(expressionIds_)) putWithId:expression withId:id_];
  if (existingId != nil && ![nil_chk(existingId) isEqual:id_]) {
    @throw [[OrgOssPdfreporterEngineJRRuntimeException alloc] initWithNSString:[NSString stringWithFormat:@"Expression \"%@\" has two generated IDs", [((id<OrgOssPdfreporterEngineJRExpression>) nil_chk(expression)) getText]]];
  }
}

- (void)updateGeneratedIdWithOrgOssPdfreporterEngineJRExpression:(id<OrgOssPdfreporterEngineJRExpression>)expression
                                             withJavaLangInteger:(JavaLangInteger *)currentId
                                             withJavaLangInteger:(JavaLangInteger *)newId {
  id existingId = [((id<JavaUtilMap>) nil_chk(expressionIds_)) putWithId:expression withId:newId];
  if (existingId == nil || ![nil_chk(existingId) isEqual:currentId]) {
    @throw [[OrgOssPdfreporterEngineJRRuntimeException alloc] initWithNSString:[NSString stringWithFormat:@"Expression \"%@\" not found with id %@", [((id<OrgOssPdfreporterEngineJRExpression>) nil_chk(expression)) getText], currentId]];
  }
}

- (void)pushContextObjectWithId:(id)context {
  [((JavaUtilLinkedList *) nil_chk(contextStack_)) addLastWithId:context];
}

- (id)popContextObject {
  return [((JavaUtilLinkedList *) nil_chk(contextStack_)) removeLast];
}

- (void)setExpressionContextWithOrgOssPdfreporterEngineJRExpression:(id<OrgOssPdfreporterEngineJRExpression>)expression {
  if (![((JavaUtilLinkedList *) nil_chk(contextStack_)) isEmpty]) {
    id context = [((JavaUtilLinkedList *) nil_chk(contextStack_)) getLast];
    (void) [((id<JavaUtilMap>) nil_chk(expressionContextMap_)) putWithId:expression withId:context];
  }
}

- (OrgOssPdfreporterEngineJRExpressionCollector *)getCollectorWithOrgOssPdfreporterEngineJRElementDataset:(id<OrgOssPdfreporterEngineJRElementDataset>)elementDataset {
  OrgOssPdfreporterEngineJRExpressionCollector *collector;
  id<OrgOssPdfreporterEngineJRDatasetRun> datasetRun = [((id<OrgOssPdfreporterEngineJRElementDataset>) nil_chk(elementDataset)) getDatasetRun];
  if (datasetRun == nil) {
    collector = self;
  }
  else {
    collector = [self getDatasetCollectorWithNSString:[datasetRun getDatasetName]];
  }
  return collector;
}

- (OrgOssPdfreporterEngineJRExpressionCollector *)getDatasetCollectorWithNSString:(NSString *)datasetName {
  OrgOssPdfreporterEngineJRExpressionCollector *collector;
  if (parent_ == nil) {
    collector = [((id<JavaUtilMap>) nil_chk(datasetCollectors_)) getWithId:datasetName];
    if (collector == nil) {
      collector = [[OrgOssPdfreporterEngineJRExpressionCollector alloc] initWithOrgOssPdfreporterEngineJasperReportsContext:jasperReportsContext_ withOrgOssPdfreporterEngineJRExpressionCollector:self withOrgOssPdfreporterEngineJRReport:report_];
      (void) [((id<JavaUtilMap>) nil_chk(datasetCollectors_)) putWithId:datasetName withId:collector];
    }
  }
  else {
    collector = [parent_ getDatasetCollectorWithNSString:datasetName];
  }
  return collector;
}

- (OrgOssPdfreporterEngineJRExpressionCollector *)getCollectorWithOrgOssPdfreporterEngineJRDataset:(id<OrgOssPdfreporterEngineJRDataset>)dataset {
  OrgOssPdfreporterEngineJRExpressionCollector *collector;
  if (parent_ == nil) {
    if ([((id<OrgOssPdfreporterEngineJRDataset>) nil_chk(dataset)) isMainDataset] || datasetCollectors_ == nil) {
      collector = self;
    }
    else {
      collector = [self getDatasetCollectorWithNSString:[((id<OrgOssPdfreporterEngineJRDataset>) nil_chk(dataset)) getName]];
    }
  }
  else {
    collector = [parent_ getCollectorWithOrgOssPdfreporterEngineJRDataset:dataset];
  }
  return collector;
}

- (OrgOssPdfreporterEngineJRExpressionCollector *)getCollectorWithOrgOssPdfreporterCrosstabsJRCrosstab:(id<OrgOssPdfreporterCrosstabsJRCrosstab>)crosstab {
  OrgOssPdfreporterEngineJRExpressionCollector *collector;
  if (parent_ == nil) {
    collector = [((id<JavaUtilMap>) nil_chk(crosstabCollectors_)) getWithId:crosstab];
    if (collector == nil) {
      collector = [[OrgOssPdfreporterEngineJRExpressionCollector alloc] initWithOrgOssPdfreporterEngineJasperReportsContext:jasperReportsContext_ withOrgOssPdfreporterEngineJRExpressionCollector:self withOrgOssPdfreporterEngineJRReport:report_];
      (void) [((id<JavaUtilMap>) nil_chk(crosstabCollectors_)) putWithId:crosstab withId:collector];
    }
  }
  else {
    collector = [parent_ getCollectorWithOrgOssPdfreporterCrosstabsJRCrosstab:crosstab];
  }
  return collector;
}

- (id<JavaUtilList>)getExpressions {
  return [[JavaUtilArrayList alloc] initWithJavaUtilCollection:[((OrgOssPdfreporterEngineJRExpressionCollector_GeneratedIds *) nil_chk(generatedIds_)) expressions]];
}

- (id<JavaUtilCollection>)getReportExpressions {
  return [JavaUtilCollections unmodifiableSetWithJavaUtilSet:[((id<JavaUtilMap>) nil_chk(expressionIds_)) keySet]];
}

- (id<JavaUtilList>)getExpressionsWithOrgOssPdfreporterEngineJRDataset:(id<OrgOssPdfreporterEngineJRDataset>)dataset {
  return [((OrgOssPdfreporterEngineJRExpressionCollector *) nil_chk([self getCollectorWithOrgOssPdfreporterEngineJRDataset:dataset])) getExpressions];
}

- (id<JavaUtilList>)getExpressionsWithOrgOssPdfreporterCrosstabsJRCrosstab:(id<OrgOssPdfreporterCrosstabsJRCrosstab>)crosstab {
  return [((OrgOssPdfreporterEngineJRExpressionCollector *) nil_chk([self getCollectorWithOrgOssPdfreporterCrosstabsJRCrosstab:crosstab])) getExpressions];
}

- (JavaLangInteger *)getExpressionIdWithOrgOssPdfreporterEngineJRExpression:(id<OrgOssPdfreporterEngineJRExpression>)expression {
  return [((id<JavaUtilMap>) nil_chk(expressionIds_)) getWithId:expression];
}

- (id<OrgOssPdfreporterEngineJRExpression>)getExpressionWithInt:(int)expressionId {
  return [((OrgOssPdfreporterEngineJRExpressionCollector_GeneratedIds *) nil_chk(generatedIds_)) expressionWithInt:expressionId];
}

- (JavaLangInteger *)getCrosstabIdWithOrgOssPdfreporterCrosstabsJRCrosstab:(id<OrgOssPdfreporterCrosstabsJRCrosstab>)crosstab {
  return [((id<JavaUtilMap>) nil_chk(crosstabIds_)) getWithId:crosstab];
}

- (id)getExpressionContextWithOrgOssPdfreporterEngineJRExpression:(id<OrgOssPdfreporterEngineJRExpression>)expression {
  return [((id<JavaUtilMap>) nil_chk(expressionContextMap_)) getWithId:expression];
}

- (id<JavaUtilCollection>)collect {
  [self collectTemplates];
  [self collectWithOrgOssPdfreporterEngineJRStyle:[((id<OrgOssPdfreporterEngineJRReport>) nil_chk(report_)) getDefaultStyle]];
  (void) [self collectWithOrgOssPdfreporterEngineJRDataset:[((id<OrgOssPdfreporterEngineJRReport>) nil_chk(report_)) getMainDataset]];
  IOSObjectArray *datasets = [((id<OrgOssPdfreporterEngineJRReport>) nil_chk(report_)) getDatasets];
  if (datasets != nil && (int) [((IOSObjectArray *) nil_chk(datasets)) count] > 0) {
    for (int i = 0; i < (int) [((IOSObjectArray *) nil_chk(datasets)) count]; i++) {
      OrgOssPdfreporterEngineJRExpressionCollector *collector = [self getCollectorWithOrgOssPdfreporterEngineJRDataset:[((IOSObjectArray *) nil_chk(datasets)) objectAtIndex:i]];
      (void) [((OrgOssPdfreporterEngineJRExpressionCollector *) nil_chk(collector)) collectWithOrgOssPdfreporterEngineJRDataset:[((IOSObjectArray *) nil_chk(datasets)) objectAtIndex:i]];
    }
  }
  [self collectWithOrgOssPdfreporterEngineJRBand:[((id<OrgOssPdfreporterEngineJRReport>) nil_chk(report_)) getBackground]];
  [self collectWithOrgOssPdfreporterEngineJRBand:[((id<OrgOssPdfreporterEngineJRReport>) nil_chk(report_)) getTitle]];
  [self collectWithOrgOssPdfreporterEngineJRBand:[((id<OrgOssPdfreporterEngineJRReport>) nil_chk(report_)) getPageHeader]];
  [self collectWithOrgOssPdfreporterEngineJRBand:[((id<OrgOssPdfreporterEngineJRReport>) nil_chk(report_)) getColumnHeader]];
  [self collectWithOrgOssPdfreporterEngineJRSection:[((id<OrgOssPdfreporterEngineJRReport>) nil_chk(report_)) getDetailSection]];
  [self collectWithOrgOssPdfreporterEngineJRBand:[((id<OrgOssPdfreporterEngineJRReport>) nil_chk(report_)) getColumnFooter]];
  [self collectWithOrgOssPdfreporterEngineJRBand:[((id<OrgOssPdfreporterEngineJRReport>) nil_chk(report_)) getPageFooter]];
  [self collectWithOrgOssPdfreporterEngineJRBand:[((id<OrgOssPdfreporterEngineJRReport>) nil_chk(report_)) getLastPageFooter]];
  [self collectWithOrgOssPdfreporterEngineJRBand:[((id<OrgOssPdfreporterEngineJRReport>) nil_chk(report_)) getSummary]];
  [self collectWithOrgOssPdfreporterEngineJRBand:[((id<OrgOssPdfreporterEngineJRReport>) nil_chk(report_)) getNoData]];
  return [self getExpressions];
}

- (void)collectTemplates {
  IOSObjectArray *templates = [((id<OrgOssPdfreporterEngineJRReport>) nil_chk(report_)) getTemplates];
  if (templates != nil) {
    for (int i = 0; i < (int) [templates count]; i++) {
      id<OrgOssPdfreporterEngineJRReportTemplate> template_ = [templates objectAtIndex:i];
      [self collectWithOrgOssPdfreporterEngineJRReportTemplate:template_];
    }
  }
}

- (void)collectWithOrgOssPdfreporterEngineJRReportTemplate:(id<OrgOssPdfreporterEngineJRReportTemplate>)template_ {
  [self addExpressionWithOrgOssPdfreporterEngineJRExpression:[((id<OrgOssPdfreporterEngineJRReportTemplate>) nil_chk(template_)) getSourceExpression]];
}

- (void)collectWithOrgOssPdfreporterEngineJRStyle:(id<OrgOssPdfreporterEngineJRStyle>)style {
  if (style != nil && [((id<JavaUtilSet>) nil_chk(collectedStyles_)) addWithId:style]) {
    IOSObjectArray *conditionalStyles = [((id<OrgOssPdfreporterEngineJRStyle>) nil_chk(style)) getConditionalStyles];
    if (conditionalStyles != nil && (int) [((IOSObjectArray *) nil_chk(conditionalStyles)) count] > 0) {
      for (int i = 0; i < (int) [((IOSObjectArray *) nil_chk(conditionalStyles)) count]; i++) {
        [self addExpressionWithOrgOssPdfreporterEngineJRExpression:[((id<OrgOssPdfreporterEngineJRConditionalStyle>) nil_chk([((IOSObjectArray *) nil_chk(conditionalStyles)) objectAtIndex:i])) getConditionExpression]];
      }
    }
    [self collectWithOrgOssPdfreporterEngineJRStyle:[((id<OrgOssPdfreporterEngineJRStyle>) nil_chk(style)) getStyle]];
  }
}

- (void)collectWithOrgOssPdfreporterEngineJRParameterArray:(IOSObjectArray *)parameters {
  if (parameters != nil && (int) [((IOSObjectArray *) nil_chk(parameters)) count] > 0) {
    for (int i = 0; i < (int) [((IOSObjectArray *) nil_chk(parameters)) count]; i++) {
      [self addExpressionWithOrgOssPdfreporterEngineJRExpression:[((id<OrgOssPdfreporterEngineJRParameter>) nil_chk([((IOSObjectArray *) nil_chk(parameters)) objectAtIndex:i])) getDefaultValueExpression]];
    }
  }
}

- (void)collectWithOrgOssPdfreporterEngineJRVariableArray:(IOSObjectArray *)variables {
  if (variables != nil && (int) [((IOSObjectArray *) nil_chk(variables)) count] > 0) {
    for (int i = 0; i < (int) [((IOSObjectArray *) nil_chk(variables)) count]; i++) {
      id<OrgOssPdfreporterEngineJRVariable> variable = [((IOSObjectArray *) nil_chk(variables)) objectAtIndex:i];
      [self addExpressionWithOrgOssPdfreporterEngineJRExpression:[((id<OrgOssPdfreporterEngineJRVariable>) nil_chk(variable)) getExpression]];
      [self addExpressionWithOrgOssPdfreporterEngineJRExpression:[((id<OrgOssPdfreporterEngineJRVariable>) nil_chk(variable)) getInitialValueExpression]];
    }
  }
}

- (void)collectWithOrgOssPdfreporterEngineJRGroupArray:(IOSObjectArray *)groups {
  if (groups != nil && (int) [((IOSObjectArray *) nil_chk(groups)) count] > 0) {
    for (int i = 0; i < (int) [((IOSObjectArray *) nil_chk(groups)) count]; i++) {
      id<OrgOssPdfreporterEngineJRGroup> group = [((IOSObjectArray *) nil_chk(groups)) objectAtIndex:i];
      [self addExpressionWithOrgOssPdfreporterEngineJRExpression:[((id<OrgOssPdfreporterEngineJRGroup>) nil_chk(group)) getExpression]];
      [self collectWithOrgOssPdfreporterEngineJRSection:[((id<OrgOssPdfreporterEngineJRGroup>) nil_chk(group)) getGroupHeaderSection]];
      [self collectWithOrgOssPdfreporterEngineJRSection:[((id<OrgOssPdfreporterEngineJRGroup>) nil_chk(group)) getGroupFooterSection]];
    }
  }
}

- (void)collectWithOrgOssPdfreporterEngineJRSection:(id<OrgOssPdfreporterEngineJRSection>)section {
  if (section != nil) {
    IOSObjectArray *bands = [section getBands];
    if (bands != nil && (int) [((IOSObjectArray *) nil_chk(bands)) count] > 0) {
      for (int i = 0; i < (int) [((IOSObjectArray *) nil_chk(bands)) count]; i++) {
        [self collectWithOrgOssPdfreporterEngineJRBand:[((IOSObjectArray *) nil_chk(bands)) objectAtIndex:i]];
      }
    }
  }
}

- (void)collectWithOrgOssPdfreporterEngineJRBand:(id<OrgOssPdfreporterEngineJRBand>)band {
  if (band != nil) {
    [self addExpressionWithOrgOssPdfreporterEngineJRExpression:[band getPrintWhenExpression]];
    IOSObjectArray *elements = [band getElements];
    if (elements != nil && (int) [((IOSObjectArray *) nil_chk(elements)) count] > 0) {
      for (int i = 0; i < (int) [((IOSObjectArray *) nil_chk(elements)) count]; i++) {
        [((id<OrgOssPdfreporterEngineJRElement>) nil_chk([((IOSObjectArray *) nil_chk(elements)) objectAtIndex:i])) collectExpressionsWithOrgOssPdfreporterEngineJRExpressionCollector:self];
      }
    }
  }
}

- (void)collectElementWithOrgOssPdfreporterEngineJRElement:(id<OrgOssPdfreporterEngineJRElement>)element {
  [self collectWithOrgOssPdfreporterEngineJRStyle:[((id<OrgOssPdfreporterEngineJRElement>) nil_chk(element)) getStyle]];
  [self addExpressionWithOrgOssPdfreporterEngineJRExpression:[((id<OrgOssPdfreporterEngineJRElement>) nil_chk(element)) getPrintWhenExpression]];
  [self collectPropertyExpressionsWithOrgOssPdfreporterEngineJRPropertyExpressionArray:[((id<OrgOssPdfreporterEngineJRElement>) nil_chk(element)) getPropertyExpressions]];
}

- (void)collectPropertyExpressionsWithOrgOssPdfreporterEngineJRPropertyExpressionArray:(IOSObjectArray *)propertyExpressions {
  if (propertyExpressions != nil && (int) [((IOSObjectArray *) nil_chk(propertyExpressions)) count] > 0) {
    for (int i = 0; i < (int) [((IOSObjectArray *) nil_chk(propertyExpressions)) count]; i++) {
      [self collectPropertyExpressionWithOrgOssPdfreporterEngineJRPropertyExpression:[((IOSObjectArray *) nil_chk(propertyExpressions)) objectAtIndex:i]];
    }
  }
}

- (void)collectPropertyExpressionWithOrgOssPdfreporterEngineJRPropertyExpression:(id<OrgOssPdfreporterEngineJRPropertyExpression>)propertyExpression {
  [self addExpressionWithOrgOssPdfreporterEngineJRExpression:[((id<OrgOssPdfreporterEngineJRPropertyExpression>) nil_chk(propertyExpression)) getValueExpression]];
}

- (void)collectAnchorWithOrgOssPdfreporterEngineJRAnchor:(id<OrgOssPdfreporterEngineJRAnchor>)anchor {
  [self addExpressionWithOrgOssPdfreporterEngineJRExpression:[((id<OrgOssPdfreporterEngineJRAnchor>) nil_chk(anchor)) getAnchorNameExpression]];
}

- (void)collectHyperlinkWithOrgOssPdfreporterEngineJRHyperlink:(id<OrgOssPdfreporterEngineJRHyperlink>)hyperlink {
  if (hyperlink != nil) {
    [self addExpressionWithOrgOssPdfreporterEngineJRExpression:[hyperlink getHyperlinkReferenceExpression]];
    [self addExpressionWithOrgOssPdfreporterEngineJRExpression:[hyperlink getHyperlinkAnchorExpression]];
    [self addExpressionWithOrgOssPdfreporterEngineJRExpression:[hyperlink getHyperlinkPageExpression]];
    [self addExpressionWithOrgOssPdfreporterEngineJRExpression:[hyperlink getHyperlinkTooltipExpression]];
    IOSObjectArray *hyperlinkParameters = [hyperlink getHyperlinkParameters];
    if (hyperlinkParameters != nil) {
      for (int i = 0; i < (int) [hyperlinkParameters count]; i++) {
        id<OrgOssPdfreporterEngineJRHyperlinkParameter> parameter = [hyperlinkParameters objectAtIndex:i];
        [self collectHyperlinkParameterWithOrgOssPdfreporterEngineJRHyperlinkParameter:parameter];
      }
    }
  }
}

- (void)collectHyperlinkParameterWithOrgOssPdfreporterEngineJRHyperlinkParameter:(id<OrgOssPdfreporterEngineJRHyperlinkParameter>)parameter {
  if (parameter != nil) {
    [self addExpressionWithOrgOssPdfreporterEngineJRExpression:[parameter getValueExpression]];
  }
}

- (void)collectWithOrgOssPdfreporterEngineJRBreak:(id<OrgOssPdfreporterEngineJRBreak>)breakElement {
  [self collectElementWithOrgOssPdfreporterEngineJRElement:breakElement];
}

- (void)collectWithOrgOssPdfreporterEngineJRLine:(id<OrgOssPdfreporterEngineJRLine>)line {
  [self collectElementWithOrgOssPdfreporterEngineJRElement:line];
}

- (void)collectWithOrgOssPdfreporterEngineJRRectangle:(id<OrgOssPdfreporterEngineJRRectangle>)rectangle {
  [self collectElementWithOrgOssPdfreporterEngineJRElement:rectangle];
}

- (void)collectWithOrgOssPdfreporterEngineJREllipse:(id<OrgOssPdfreporterEngineJREllipse>)ellipse {
  [self collectElementWithOrgOssPdfreporterEngineJRElement:ellipse];
}

- (void)collectWithOrgOssPdfreporterEngineJRImage:(id<OrgOssPdfreporterEngineJRImage>)image {
  [self collectElementWithOrgOssPdfreporterEngineJRElement:image];
  [self addExpressionWithOrgOssPdfreporterEngineJRExpression:[((id<OrgOssPdfreporterEngineJRImage>) nil_chk(image)) getExpression]];
  [self collectAnchorWithOrgOssPdfreporterEngineJRAnchor:image];
  [self collectHyperlinkWithOrgOssPdfreporterEngineJRHyperlink:image];
}

- (void)collectWithOrgOssPdfreporterEngineJRStaticText:(id<OrgOssPdfreporterEngineJRStaticText>)staticText {
  [self collectElementWithOrgOssPdfreporterEngineJRElement:staticText];
}

- (void)collectWithOrgOssPdfreporterEngineJRTextField:(id<OrgOssPdfreporterEngineJRTextField>)textField {
  [self collectElementWithOrgOssPdfreporterEngineJRElement:textField];
  [self addExpressionWithOrgOssPdfreporterEngineJRExpression:[((id<OrgOssPdfreporterEngineJRTextField>) nil_chk(textField)) getExpression]];
  [self addExpressionWithOrgOssPdfreporterEngineJRExpression:[((id<OrgOssPdfreporterEngineJRTextField>) nil_chk(textField)) getPatternExpression]];
  [self collectAnchorWithOrgOssPdfreporterEngineJRAnchor:textField];
  [self collectHyperlinkWithOrgOssPdfreporterEngineJRHyperlink:textField];
}

- (void)collectWithOrgOssPdfreporterEngineJRSubreport:(id<OrgOssPdfreporterEngineJRSubreport>)subreport {
  [self collectElementWithOrgOssPdfreporterEngineJRElement:subreport];
  [self addExpressionWithOrgOssPdfreporterEngineJRExpression:[((id<OrgOssPdfreporterEngineJRSubreport>) nil_chk(subreport)) getParametersMapExpression]];
  IOSObjectArray *parameters = [((id<OrgOssPdfreporterEngineJRSubreport>) nil_chk(subreport)) getParameters];
  if (parameters != nil && (int) [((IOSObjectArray *) nil_chk(parameters)) count] > 0) {
    for (int j = 0; j < (int) [((IOSObjectArray *) nil_chk(parameters)) count]; j++) {
      [self addExpressionWithOrgOssPdfreporterEngineJRExpression:[((id<OrgOssPdfreporterEngineJRSubreportParameter>) nil_chk([((IOSObjectArray *) nil_chk(parameters)) objectAtIndex:j])) getExpression]];
    }
  }
  [self addExpressionWithOrgOssPdfreporterEngineJRExpression:[((id<OrgOssPdfreporterEngineJRSubreport>) nil_chk(subreport)) getConnectionExpression]];
  [self addExpressionWithOrgOssPdfreporterEngineJRExpression:[((id<OrgOssPdfreporterEngineJRSubreport>) nil_chk(subreport)) getDataSourceExpression]];
  [self addExpressionWithOrgOssPdfreporterEngineJRExpression:[((id<OrgOssPdfreporterEngineJRSubreport>) nil_chk(subreport)) getExpression]];
}

- (void)collectWithOrgOssPdfreporterCrosstabsJRCrosstab:(id<OrgOssPdfreporterCrosstabsJRCrosstab>)crosstab {
  [self collectElementWithOrgOssPdfreporterEngineJRElement:crosstab];
  [self createCrosstabIdWithOrgOssPdfreporterCrosstabsJRCrosstab:crosstab];
  id<OrgOssPdfreporterCrosstabsJRCrosstabDataset> dataset = [((id<OrgOssPdfreporterCrosstabsJRCrosstab>) nil_chk(crosstab)) getDataset];
  [self collectWithOrgOssPdfreporterEngineJRElementDataset:dataset];
  OrgOssPdfreporterEngineJRExpressionCollector *datasetCollector = [self getCollectorWithOrgOssPdfreporterEngineJRElementDataset:dataset];
  OrgOssPdfreporterEngineJRExpressionCollector *crosstabCollector = [self getCollectorWithOrgOssPdfreporterCrosstabsJRCrosstab:crosstab];
  [((OrgOssPdfreporterEngineJRExpressionCollector *) nil_chk(crosstabCollector)) collectWithOrgOssPdfreporterEngineJRStyle:[((id<OrgOssPdfreporterEngineJRReport>) nil_chk(report_)) getDefaultStyle]];
  [self addExpressionWithOrgOssPdfreporterEngineJRExpression:[((id<OrgOssPdfreporterCrosstabsJRCrosstab>) nil_chk(crosstab)) getParametersMapExpression]];
  IOSObjectArray *parameters = [((id<OrgOssPdfreporterCrosstabsJRCrosstab>) nil_chk(crosstab)) getParameters];
  if (parameters != nil) {
    for (int i = 0; i < (int) [parameters count]; i++) {
      [self addExpressionWithOrgOssPdfreporterEngineJRExpression:[((id<OrgOssPdfreporterCrosstabsJRCrosstabParameter>) nil_chk([parameters objectAtIndex:i])) getExpression]];
    }
  }
  [((OrgOssPdfreporterEngineJRExpressionCollector *) nil_chk(crosstabCollector)) collectWithOrgOssPdfreporterCrosstabsJRCellContents:[((id<OrgOssPdfreporterCrosstabsJRCrosstab>) nil_chk(crosstab)) getHeaderCell]];
  IOSObjectArray *rowGroups = [((id<OrgOssPdfreporterCrosstabsJRCrosstab>) nil_chk(crosstab)) getRowGroups];
  if (rowGroups != nil) {
    for (int i = 0; i < (int) [rowGroups count]; i++) {
      id<OrgOssPdfreporterCrosstabsJRCrosstabRowGroup> rowGroup = [rowGroups objectAtIndex:i];
      id<OrgOssPdfreporterCrosstabsJRCrosstabBucket> bucket = [((id<OrgOssPdfreporterCrosstabsJRCrosstabRowGroup>) nil_chk(rowGroup)) getBucket];
      [((OrgOssPdfreporterEngineJRExpressionCollector *) nil_chk(datasetCollector)) addExpressionWithOrgOssPdfreporterEngineJRExpression:[((id<OrgOssPdfreporterCrosstabsJRCrosstabBucket>) nil_chk(bucket)) getExpression]];
      [((OrgOssPdfreporterEngineJRExpressionCollector *) nil_chk(crosstabCollector)) pushContextObjectWithId:rowGroup];
      [((OrgOssPdfreporterEngineJRExpressionCollector *) nil_chk(crosstabCollector)) addExpressionWithOrgOssPdfreporterEngineJRExpression:[((id<OrgOssPdfreporterCrosstabsJRCrosstabBucket>) nil_chk(bucket)) getOrderByExpression]];
      [self addExpressionWithOrgOssPdfreporterEngineJRExpression:[((id<OrgOssPdfreporterCrosstabsJRCrosstabBucket>) nil_chk(bucket)) getComparatorExpression]];
      [((OrgOssPdfreporterEngineJRExpressionCollector *) nil_chk(crosstabCollector)) collectWithOrgOssPdfreporterCrosstabsJRCellContents:[((id<OrgOssPdfreporterCrosstabsJRCrosstabRowGroup>) nil_chk(rowGroup)) getHeader]];
      [((OrgOssPdfreporterEngineJRExpressionCollector *) nil_chk(crosstabCollector)) collectWithOrgOssPdfreporterCrosstabsJRCellContents:[((id<OrgOssPdfreporterCrosstabsJRCrosstabRowGroup>) nil_chk(rowGroup)) getTotalHeader]];
      (void) [((OrgOssPdfreporterEngineJRExpressionCollector *) nil_chk(crosstabCollector)) popContextObject];
    }
  }
  IOSObjectArray *colGroups = [((id<OrgOssPdfreporterCrosstabsJRCrosstab>) nil_chk(crosstab)) getColumnGroups];
  if (colGroups != nil) {
    for (int i = 0; i < (int) [colGroups count]; i++) {
      id<OrgOssPdfreporterCrosstabsJRCrosstabColumnGroup> columnGroup = [colGroups objectAtIndex:i];
      id<OrgOssPdfreporterCrosstabsJRCrosstabBucket> bucket = [((id<OrgOssPdfreporterCrosstabsJRCrosstabColumnGroup>) nil_chk(columnGroup)) getBucket];
      [((OrgOssPdfreporterEngineJRExpressionCollector *) nil_chk(datasetCollector)) addExpressionWithOrgOssPdfreporterEngineJRExpression:[((id<OrgOssPdfreporterCrosstabsJRCrosstabBucket>) nil_chk(bucket)) getExpression]];
      [((OrgOssPdfreporterEngineJRExpressionCollector *) nil_chk(crosstabCollector)) pushContextObjectWithId:columnGroup];
      [((OrgOssPdfreporterEngineJRExpressionCollector *) nil_chk(crosstabCollector)) addExpressionWithOrgOssPdfreporterEngineJRExpression:[((id<OrgOssPdfreporterCrosstabsJRCrosstabBucket>) nil_chk(bucket)) getOrderByExpression]];
      [self addExpressionWithOrgOssPdfreporterEngineJRExpression:[((id<OrgOssPdfreporterCrosstabsJRCrosstabBucket>) nil_chk(bucket)) getComparatorExpression]];
      [((OrgOssPdfreporterEngineJRExpressionCollector *) nil_chk(crosstabCollector)) collectWithOrgOssPdfreporterCrosstabsJRCellContents:[((id<OrgOssPdfreporterCrosstabsJRCrosstabColumnGroup>) nil_chk(columnGroup)) getHeader]];
      [((OrgOssPdfreporterEngineJRExpressionCollector *) nil_chk(crosstabCollector)) collectWithOrgOssPdfreporterCrosstabsJRCellContents:[((id<OrgOssPdfreporterCrosstabsJRCrosstabColumnGroup>) nil_chk(columnGroup)) getTotalHeader]];
      (void) [((OrgOssPdfreporterEngineJRExpressionCollector *) nil_chk(crosstabCollector)) popContextObject];
    }
  }
  IOSObjectArray *measures = [((id<OrgOssPdfreporterCrosstabsJRCrosstab>) nil_chk(crosstab)) getMeasures];
  if (measures != nil) {
    for (int i = 0; i < (int) [measures count]; i++) {
      [((OrgOssPdfreporterEngineJRExpressionCollector *) nil_chk(datasetCollector)) addExpressionWithOrgOssPdfreporterEngineJRExpression:[((id<OrgOssPdfreporterCrosstabsJRCrosstabMeasure>) nil_chk([measures objectAtIndex:i])) getValueExpression]];
    }
  }
  [((OrgOssPdfreporterEngineJRExpressionCollector *) nil_chk(crosstabCollector)) collectWithOrgOssPdfreporterCrosstabsJRCellContents:[((id<OrgOssPdfreporterCrosstabsJRCrosstab>) nil_chk(crosstab)) getWhenNoDataCell]];
  [self collectCrosstabCellsWithOrgOssPdfreporterCrosstabsJRCrosstab:crosstab withOrgOssPdfreporterEngineJRExpressionCollector:crosstabCollector];
}

- (void)createCrosstabIdWithOrgOssPdfreporterCrosstabsJRCrosstab:(id<OrgOssPdfreporterCrosstabsJRCrosstab>)crosstab {
  (void) [((id<JavaUtilMap>) nil_chk(crosstabIds_)) putWithId:crosstab withId:[JavaLangInteger valueOfWithInt:[((id<JavaUtilMap>) nil_chk(crosstabIds_)) size]]];
}

- (void)collectCrosstabCellsWithOrgOssPdfreporterCrosstabsJRCrosstab:(id<OrgOssPdfreporterCrosstabsJRCrosstab>)crosstab
                    withOrgOssPdfreporterEngineJRExpressionCollector:(OrgOssPdfreporterEngineJRExpressionCollector *)crosstabCollector {
  if ([(id) crosstab isKindOfClass:[OrgOssPdfreporterCrosstabsDesignJRDesignCrosstab class]]) {
    id<JavaUtilList> cellsList = [((OrgOssPdfreporterCrosstabsDesignJRDesignCrosstab *) crosstab) getCellsList];
    if (cellsList != nil) {
      for (id<JavaUtilIterator> iter = [cellsList iterator]; [((id<JavaUtilIterator>) nil_chk(iter)) hasNext]; ) {
        id<OrgOssPdfreporterCrosstabsJRCrosstabCell> cell = [((id<JavaUtilIterator>) nil_chk(iter)) next];
        [((OrgOssPdfreporterEngineJRExpressionCollector *) nil_chk(crosstabCollector)) collectWithOrgOssPdfreporterCrosstabsJRCellContents:[((id<OrgOssPdfreporterCrosstabsJRCrosstabCell>) nil_chk(cell)) getContents]];
      }
    }
  }
  else {
    id<OrgOssPdfreporterCommonsArraysArray2D> cells = [((id<OrgOssPdfreporterCrosstabsJRCrosstab>) nil_chk(crosstab)) getCells];
    if (cells != nil) {
      for (int i = 0; i < [cells getLengthI]; ++i) {
        for (int j = 0; j < [cells getLengthJ]; j++) {
          if ([((id<OrgOssPdfreporterCommonsArraysArray2D>) nil_chk(cells)) getWithInt:i withInt:j] != nil) {
            [((OrgOssPdfreporterEngineJRExpressionCollector *) nil_chk(crosstabCollector)) collectWithOrgOssPdfreporterCrosstabsJRCellContents:[((id<OrgOssPdfreporterCrosstabsJRCrosstabCell>) nil_chk([((id<OrgOssPdfreporterCommonsArraysArray2D>) nil_chk(cells)) getWithInt:i withInt:j])) getContents]];
          }
        }
      }
    }
  }
}

- (id<JavaUtilCollection>)collectWithOrgOssPdfreporterEngineJRDataset:(id<OrgOssPdfreporterEngineJRDataset>)dataset {
  OrgOssPdfreporterEngineJRExpressionCollector *collector = [self getCollectorWithOrgOssPdfreporterEngineJRDataset:dataset];
  [((OrgOssPdfreporterEngineJRExpressionCollector *) nil_chk(collector)) collectWithOrgOssPdfreporterEngineJRParameterArray:[((id<OrgOssPdfreporterEngineJRDataset>) nil_chk(dataset)) getParameters]];
  [((OrgOssPdfreporterEngineJRExpressionCollector *) nil_chk(collector)) collectWithOrgOssPdfreporterEngineJRVariableArray:[((id<OrgOssPdfreporterEngineJRDataset>) nil_chk(dataset)) getVariables]];
  [((OrgOssPdfreporterEngineJRExpressionCollector *) nil_chk(collector)) collectWithOrgOssPdfreporterEngineJRGroupArray:[((id<OrgOssPdfreporterEngineJRDataset>) nil_chk(dataset)) getGroups]];
  [((OrgOssPdfreporterEngineJRExpressionCollector *) nil_chk(collector)) addExpressionWithOrgOssPdfreporterEngineJRExpression:[((id<OrgOssPdfreporterEngineJRDataset>) nil_chk(dataset)) getFilterExpression]];
  return [self getExpressionsWithOrgOssPdfreporterEngineJRDataset:dataset];
}

- (void)collectWithOrgOssPdfreporterEngineJRElementDataset:(id<OrgOssPdfreporterEngineJRElementDataset>)dataset {
  [self collectWithOrgOssPdfreporterEngineJRDatasetRun:[((id<OrgOssPdfreporterEngineJRElementDataset>) nil_chk(dataset)) getDatasetRun]];
  id<OrgOssPdfreporterEngineJRExpression> incrementWhenExpression = [((id<OrgOssPdfreporterEngineJRElementDataset>) nil_chk(dataset)) getIncrementWhenExpression];
  if (incrementWhenExpression != nil) {
    OrgOssPdfreporterEngineJRExpressionCollector *datasetCollector = [self getCollectorWithOrgOssPdfreporterEngineJRElementDataset:dataset];
    [((OrgOssPdfreporterEngineJRExpressionCollector *) nil_chk(datasetCollector)) addExpressionWithOrgOssPdfreporterEngineJRExpression:incrementWhenExpression];
  }
}

- (void)collectWithOrgOssPdfreporterEngineJRDatasetRun:(id<OrgOssPdfreporterEngineJRDatasetRun>)datasetRun {
  if (datasetRun != nil) {
    [self addExpressionWithOrgOssPdfreporterEngineJRExpression:[datasetRun getParametersMapExpression]];
    [self addExpressionWithOrgOssPdfreporterEngineJRExpression:[datasetRun getConnectionExpression]];
    [self addExpressionWithOrgOssPdfreporterEngineJRExpression:[datasetRun getDataSourceExpression]];
    IOSObjectArray *parameters = [datasetRun getParameters];
    if (parameters != nil && (int) [((IOSObjectArray *) nil_chk(parameters)) count] > 0) {
      for (int i = 0; i < (int) [((IOSObjectArray *) nil_chk(parameters)) count]; i++) {
        [self addExpressionWithOrgOssPdfreporterEngineJRExpression:[((id<OrgOssPdfreporterEngineJRDatasetParameter>) nil_chk([((IOSObjectArray *) nil_chk(parameters)) objectAtIndex:i])) getExpression]];
      }
    }
  }
}

- (void)collectWithOrgOssPdfreporterCrosstabsJRCellContents:(id<OrgOssPdfreporterCrosstabsJRCellContents>)cell {
  if (cell != nil) {
    [self collectWithOrgOssPdfreporterEngineJRStyle:[cell getStyle]];
    IOSObjectArray *elements = [cell getElements];
    if (elements != nil && (int) [((IOSObjectArray *) nil_chk(elements)) count] > 0) {
      for (int i = 0; i < (int) [((IOSObjectArray *) nil_chk(elements)) count]; i++) {
        [((id<OrgOssPdfreporterEngineJRElement>) nil_chk([((IOSObjectArray *) nil_chk(elements)) objectAtIndex:i])) collectExpressionsWithOrgOssPdfreporterEngineJRExpressionCollector:self];
      }
    }
  }
}

- (void)collectWithOrgOssPdfreporterEngineJRFrame:(id<OrgOssPdfreporterEngineJRFrame>)frame {
  [self collectElementWithOrgOssPdfreporterEngineJRElement:frame];
  IOSObjectArray *elements = [((id<OrgOssPdfreporterEngineJRFrame>) nil_chk(frame)) getElements];
  if (elements != nil) {
    for (int i = 0; i < (int) [elements count]; i++) {
      [((id<OrgOssPdfreporterEngineJRElement>) nil_chk([elements objectAtIndex:i])) collectExpressionsWithOrgOssPdfreporterEngineJRExpressionCollector:self];
    }
  }
}

- (void)collectWithOrgOssPdfreporterEngineJRComponentElement:(id<OrgOssPdfreporterEngineJRComponentElement>)componentElement {
  [self collectElementWithOrgOssPdfreporterEngineJRElement:componentElement];
  OrgOssPdfreporterEngineComponentComponentKey *componentKey = [((id<OrgOssPdfreporterEngineJRComponentElement>) nil_chk(componentElement)) getComponentKey];
  id<OrgOssPdfreporterEngineComponentIComponentManager> manager = [((OrgOssPdfreporterEngineComponentComponentsEnvironment *) nil_chk([OrgOssPdfreporterEngineComponentComponentsEnvironment getInstanceWithOrgOssPdfreporterEngineJasperReportsContext:jasperReportsContext_])) getManagerWithOrgOssPdfreporterEngineComponentComponentKey:componentKey];
  id<OrgOssPdfreporterEngineComponentComponent> component = [((id<OrgOssPdfreporterEngineJRComponentElement>) nil_chk(componentElement)) getComponent];
  [((id<OrgOssPdfreporterEngineComponentComponentCompiler>) nil_chk([((id<OrgOssPdfreporterEngineComponentIComponentManager>) nil_chk(manager)) getComponentCompilerWithOrgOssPdfreporterEngineJasperReportsContext:jasperReportsContext_])) collectExpressionsWithOrgOssPdfreporterEngineComponentComponent:component withOrgOssPdfreporterEngineJRExpressionCollector:self];
}

- (void)collectWithOrgOssPdfreporterEngineJRGenericElement:(id<OrgOssPdfreporterEngineJRGenericElement>)element {
  [self collectElementWithOrgOssPdfreporterEngineJRElement:element];
  IOSObjectArray *parameters = [((id<OrgOssPdfreporterEngineJRGenericElement>) nil_chk(element)) getParameters];
  for (int i = 0; i < (int) [((IOSObjectArray *) nil_chk(parameters)) count]; i++) {
    id<OrgOssPdfreporterEngineJRGenericElementParameter> parameter = [((IOSObjectArray *) nil_chk(parameters)) objectAtIndex:i];
    [self addExpressionWithOrgOssPdfreporterEngineJRExpression:[((id<OrgOssPdfreporterEngineJRGenericElementParameter>) nil_chk(parameter)) getValueExpression]];
  }
}

- (void)copyAllPropertiesTo:(id)copy {
  [super copyAllPropertiesTo:copy];
  OrgOssPdfreporterEngineJRExpressionCollector *typedCopy = (OrgOssPdfreporterEngineJRExpressionCollector *) copy;
  typedCopy.jasperReportsContext = jasperReportsContext_;
  typedCopy.report = report_;
  typedCopy.parent = parent_;
  typedCopy.expressionIds = expressionIds_;
  typedCopy.contextStack = contextStack_;
  typedCopy.expressionContextMap = expressionContextMap_;
  typedCopy.generatedIds = generatedIds_;
  typedCopy.crosstabIds = crosstabIds_;
  typedCopy.datasetCollectors = datasetCollectors_;
  typedCopy.crosstabCollectors = crosstabCollectors_;
  typedCopy.collectedStyles = collectedStyles_;
}

@end
@implementation OrgOssPdfreporterEngineJRExpressionCollector_GeneratedIds

@synthesize ids = ids_;
@synthesize nextId_ = nextId__;
@synthesize expressions_ = expressions__;

- (id<OrgOssPdfreporterEngineJRExpression>)putWithJavaLangInteger:(JavaLangInteger *)id_
                          withOrgOssPdfreporterEngineJRExpression:(id<OrgOssPdfreporterEngineJRExpression>)expression {
  expressions__ = nil;
  return [((JavaUtilTreeMap *) nil_chk(ids_)) putWithId:id_ withId:expression];
}

- (JavaLangInteger *)nextId {
  JavaLangInteger *id_ = [JavaLangInteger valueOfWithInt:nextId__];
  while ([((JavaUtilTreeMap *) nil_chk(ids_)) containsKeyWithId:id_]) {
    id_ = [JavaLangInteger valueOfWithInt:++nextId__];
  }
  return id_;
}

- (id<JavaUtilList>)expressions {
  if (expressions__ == nil) {
    expressions__ = [[JavaUtilArrayList alloc] initWithJavaUtilCollection:[((JavaUtilTreeMap *) nil_chk(ids_)) values]];
  }
  return expressions__;
}

- (id<OrgOssPdfreporterEngineJRExpression>)expressionWithInt:(int)id_ {
  return [((JavaUtilTreeMap *) nil_chk(ids_)) getWithId:[JavaLangInteger valueOfWithInt:id_]];
}

- (id)init {
  if ((self = [super init])) {
    ids_ = [[JavaUtilTreeMap alloc] init];
  }
  return self;
}

- (void)copyAllPropertiesTo:(id)copy {
  [super copyAllPropertiesTo:copy];
  OrgOssPdfreporterEngineJRExpressionCollector_GeneratedIds *typedCopy = (OrgOssPdfreporterEngineJRExpressionCollector_GeneratedIds *) copy;
  typedCopy.ids = ids_;
  typedCopy.nextId_ = nextId__;
  typedCopy.expressions_ = expressions__;
}

@end
