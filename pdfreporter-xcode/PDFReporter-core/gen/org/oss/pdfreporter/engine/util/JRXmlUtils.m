//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: pdfreporter-core/src/org/oss/pdfreporter/engine/util/JRXmlUtils.java
//
//  Created by kendra on 9/27/13.
//

#include "java/io/File.h"
#include "java/io/IOException.h"
#include "java/io/InputStream.h"
#include "org/oss/pdfreporter/engine/JRException.h"
#include "org/oss/pdfreporter/engine/util/JRXmlUtils.h"
#include "org/oss/pdfreporter/registry/IRegistry.h"
#include "org/oss/pdfreporter/uses/org/w3c/dom/Document.h"
#include "org/oss/pdfreporter/uses/org/w3c/dom/Element.h"
#include "org/oss/pdfreporter/uses/org/w3c/dom/Node.h"
#include "org/oss/pdfreporter/xml/parsers/IDocumentBuilder.h"
#include "org/oss/pdfreporter/xml/parsers/IDocumentBuilderFactory.h"
#include "org/oss/pdfreporter/xml/parsers/IInputSource.h"
#include "org/oss/pdfreporter/xml/parsers/ParserConfigurationException.h"
#include "org/oss/pdfreporter/xml/parsers/XMLParseException.h"
#include "org/oss/pdfreporter/xml/parsers/factory/IXmlParserFactory.h"

@implementation OrgOssPdfreporterEngineUtilJRXmlUtils

+ (id<OrgOssPdfreporterUsesOrgW3cDomDocument>)parseWithOrgOssPdfreporterXmlParsersIInputSource:(id<OrgOssPdfreporterXmlParsersIInputSource>)is {
  return [OrgOssPdfreporterEngineUtilJRXmlUtils parseWithOrgOssPdfreporterXmlParsersIInputSource:is withBOOL:NO];
}

+ (id<OrgOssPdfreporterUsesOrgW3cDomDocument>)parseWithOrgOssPdfreporterXmlParsersIInputSource:(id<OrgOssPdfreporterXmlParsersIInputSource>)is
                                                                                      withBOOL:(BOOL)isNamespaceAware {
  @try {
    return [((id<OrgOssPdfreporterXmlParsersIDocumentBuilder>) nil_chk([OrgOssPdfreporterEngineUtilJRXmlUtils createDocumentBuilderWithBOOL:isNamespaceAware])) parseWithOrgOssPdfreporterXmlParsersIInputSource:is];
  }
  @catch (OrgOssPdfreporterXmlParsersXMLParseException *e) {
    @throw [[OrgOssPdfreporterEngineJRException alloc] initWithNSString:@"Failed to parse the xml document" withJavaLangThrowable:e];
  }
  @catch (JavaIoIOException *e) {
    @throw [[OrgOssPdfreporterEngineJRException alloc] initWithNSString:@"Failed to parse the xml document" withJavaLangThrowable:e];
  }
}

+ (id<OrgOssPdfreporterUsesOrgW3cDomDocument>)parseWithJavaIoFile:(JavaIoFile *)file {
  return [OrgOssPdfreporterEngineUtilJRXmlUtils parseWithJavaIoFile:file withBOOL:NO];
}

+ (id<OrgOssPdfreporterUsesOrgW3cDomDocument>)parseWithJavaIoFile:(JavaIoFile *)file
                                                         withBOOL:(BOOL)isNamespaceAware {
  @try {
    return [((id<OrgOssPdfreporterXmlParsersIDocumentBuilder>) nil_chk([OrgOssPdfreporterEngineUtilJRXmlUtils createDocumentBuilderWithBOOL:isNamespaceAware])) parseWithJavaIoFile:file];
  }
  @catch (OrgOssPdfreporterXmlParsersXMLParseException *e) {
    @throw [[OrgOssPdfreporterEngineJRException alloc] initWithNSString:@"Failed to parse the xml document" withJavaLangThrowable:e];
  }
  @catch (JavaIoIOException *e) {
    @throw [[OrgOssPdfreporterEngineJRException alloc] initWithNSString:@"Failed to parse the xml document" withJavaLangThrowable:e];
  }
}

+ (id<OrgOssPdfreporterUsesOrgW3cDomDocument>)parseWithJavaIoInputStream:(JavaIoInputStream *)is {
  return [OrgOssPdfreporterEngineUtilJRXmlUtils parseWithJavaIoInputStream:is withBOOL:NO];
}

+ (id<OrgOssPdfreporterUsesOrgW3cDomDocument>)parseWithJavaIoInputStream:(JavaIoInputStream *)is
                                                                withBOOL:(BOOL)isNamespaceAware {
  return [OrgOssPdfreporterEngineUtilJRXmlUtils parseWithOrgOssPdfreporterXmlParsersIInputSource:[((id<OrgOssPdfreporterXmlParsersFactoryIXmlParserFactory>) nil_chk([OrgOssPdfreporterRegistryIRegistry getIXmlParserFactory])) newInputSourceWithJavaIoInputStream:is] withBOOL:isNamespaceAware];
}

+ (id<OrgOssPdfreporterXmlParsersIDocumentBuilder>)createDocumentBuilder {
  return [OrgOssPdfreporterEngineUtilJRXmlUtils createDocumentBuilderWithBOOL:NO];
}

+ (id<OrgOssPdfreporterXmlParsersIDocumentBuilder>)createDocumentBuilderWithBOOL:(BOOL)isNamespaceAware {
  id<OrgOssPdfreporterXmlParsersIDocumentBuilderFactory> dbf = [((id<OrgOssPdfreporterXmlParsersFactoryIXmlParserFactory>) nil_chk([OrgOssPdfreporterRegistryIRegistry getIXmlParserFactory])) newDocumentBuilderFactory];
  [((id<OrgOssPdfreporterXmlParsersIDocumentBuilderFactory>) nil_chk(dbf)) setValidatingWithBOOL:NO];
  [((id<OrgOssPdfreporterXmlParsersIDocumentBuilderFactory>) nil_chk(dbf)) setIgnoringCommentsWithBOOL:YES];
  [((id<OrgOssPdfreporterXmlParsersIDocumentBuilderFactory>) nil_chk(dbf)) setNamespaceAwareWithBOOL:isNamespaceAware];
  @try {
    return [((id<OrgOssPdfreporterXmlParsersIDocumentBuilderFactory>) nil_chk(dbf)) newDocumentBuilder];
  }
  @catch (OrgOssPdfreporterXmlParsersParserConfigurationException *e) {
    @throw [[OrgOssPdfreporterEngineJRException alloc] initWithNSString:@"Failed to create a document builder factory" withJavaLangThrowable:e];
  }
}

+ (id<OrgOssPdfreporterUsesOrgW3cDomDocument>)createDocumentWithOrgOssPdfreporterUsesOrgW3cDomNode:(id<OrgOssPdfreporterUsesOrgW3cDomNode>)sourceNode {
  return [OrgOssPdfreporterEngineUtilJRXmlUtils createDocumentWithOrgOssPdfreporterUsesOrgW3cDomNode:sourceNode withBOOL:NO];
}

+ (id<OrgOssPdfreporterUsesOrgW3cDomDocument>)createDocumentWithOrgOssPdfreporterUsesOrgW3cDomNode:(id<OrgOssPdfreporterUsesOrgW3cDomNode>)sourceNode
                                                                                          withBOOL:(BOOL)isNamespaceAware {
  id<OrgOssPdfreporterUsesOrgW3cDomDocument> doc = [((id<OrgOssPdfreporterXmlParsersIDocumentBuilder>) nil_chk([OrgOssPdfreporterEngineUtilJRXmlUtils createDocumentBuilderWithBOOL:isNamespaceAware])) newDocument];
  id<OrgOssPdfreporterUsesOrgW3cDomNode> source;
  if ([((id<OrgOssPdfreporterUsesOrgW3cDomNode>) nil_chk(sourceNode)) getNodeType] == OrgOssPdfreporterUsesOrgW3cDomNode_DOCUMENT_NODE) {
    source = [((id<OrgOssPdfreporterUsesOrgW3cDomDocument>) sourceNode) getDocumentElement];
  }
  else {
    source = sourceNode;
  }
  id<OrgOssPdfreporterUsesOrgW3cDomNode> node = [((id<OrgOssPdfreporterUsesOrgW3cDomDocument>) nil_chk(doc)) importNodeWithOrgOssPdfreporterUsesOrgW3cDomNode:source withBOOL:YES];
  (void) [((id<OrgOssPdfreporterUsesOrgW3cDomDocument>) nil_chk(doc)) appendChildWithOrgOssPdfreporterUsesOrgW3cDomNode:node];
  return doc;
}

- (id)init {
  return [super init];
}

@end
