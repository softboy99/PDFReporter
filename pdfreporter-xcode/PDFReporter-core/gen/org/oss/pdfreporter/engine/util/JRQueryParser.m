//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: pdfreporter-core/src/org/oss/pdfreporter/engine/util/JRQueryParser.java
//
//  Created by kendra on 9/27/13.
//

#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "java/lang/StringBuffer.h"
#include "java/util/ArrayList.h"
#include "java/util/List.h"
#include "java/util/StringTokenizer.h"
#include "org/oss/pdfreporter/engine/JRQueryChunk.h"
#include "org/oss/pdfreporter/engine/JRRuntimeException.h"
#include "org/oss/pdfreporter/engine/util/JRProperties.h"
#include "org/oss/pdfreporter/engine/util/JRQueryChunkHandler.h"
#include "org/oss/pdfreporter/engine/util/JRQueryParser.h"

@implementation OrgOssPdfreporterEngineUtilJRQueryParser

static OrgOssPdfreporterEngineUtilJRQueryParser * OrgOssPdfreporterEngineUtilJRQueryParser_singleton_;

+ (OrgOssPdfreporterEngineUtilJRQueryParser *)singleton {
  return OrgOssPdfreporterEngineUtilJRQueryParser_singleton_;
}

+ (OrgOssPdfreporterEngineUtilJRQueryParser *)instance {
  return OrgOssPdfreporterEngineUtilJRQueryParser_singleton_;
}

- (void)parseWithNSString:(NSString *)text
withOrgOssPdfreporterEngineUtilJRQueryChunkHandler:(id<OrgOssPdfreporterEngineUtilJRQueryChunkHandler>)chunkHandler {
  if (text != nil) {
    JavaLangStringBuffer *textChunk = [[JavaLangStringBuffer alloc] init];
    JavaUtilStringTokenizer *tkzer = [[JavaUtilStringTokenizer alloc] initWithNSString:text withNSString:@"$" withBOOL:YES];
    BOOL wasDelim = NO;
    while ([((JavaUtilStringTokenizer *) nil_chk(tkzer)) hasMoreTokens]) {
      NSString *token = [((JavaUtilStringTokenizer *) nil_chk(tkzer)) nextToken];
      if ([((NSString *) nil_chk(token)) isEqual:@"$"]) {
        if (wasDelim) {
          (void) [((JavaLangStringBuffer *) nil_chk(textChunk)) appendWithNSString:@"$"];
        }
        wasDelim = YES;
      }
      else {
        if ([((NSString *) nil_chk(token)) hasPrefix:@"P{"] && wasDelim) {
          int end = [((NSString *) nil_chk(token)) indexOf:'}'];
          if (end > 0) {
            if ([((JavaLangStringBuffer *) nil_chk(textChunk)) sequenceLength] > 0) {
              [((id<OrgOssPdfreporterEngineUtilJRQueryChunkHandler>) nil_chk(chunkHandler)) handleTextChunkWithNSString:[((JavaLangStringBuffer *) nil_chk(textChunk)) description]];
            }
            NSString *parameterChunk = [((NSString *) nil_chk(token)) substring:2 endIndex:end];
            [((id<OrgOssPdfreporterEngineUtilJRQueryChunkHandler>) nil_chk(chunkHandler)) handleParameterChunkWithNSString:parameterChunk];
            textChunk = [[JavaLangStringBuffer alloc] initWithNSString:[((NSString *) nil_chk(token)) substring:end + 1]];
          }
          else {
            if (wasDelim) {
              (void) [((JavaLangStringBuffer *) nil_chk(textChunk)) appendWithNSString:@"$"];
            }
            (void) [((JavaLangStringBuffer *) nil_chk(textChunk)) appendWithNSString:token];
          }
        }
        else if ([((NSString *) nil_chk(token)) hasPrefix:@"P!{"] && wasDelim) {
          int end = [((NSString *) nil_chk(token)) indexOf:'}'];
          if (end > 0) {
            if ([((JavaLangStringBuffer *) nil_chk(textChunk)) sequenceLength] > 0) {
              [((id<OrgOssPdfreporterEngineUtilJRQueryChunkHandler>) nil_chk(chunkHandler)) handleTextChunkWithNSString:[((JavaLangStringBuffer *) nil_chk(textChunk)) description]];
            }
            NSString *parameterClauseChunk = [((NSString *) nil_chk(token)) substring:3 endIndex:end];
            [((id<OrgOssPdfreporterEngineUtilJRQueryChunkHandler>) nil_chk(chunkHandler)) handleParameterClauseChunkWithNSString:parameterClauseChunk];
            textChunk = [[JavaLangStringBuffer alloc] initWithNSString:[((NSString *) nil_chk(token)) substring:end + 1]];
          }
          else {
            if (wasDelim) {
              (void) [((JavaLangStringBuffer *) nil_chk(textChunk)) appendWithNSString:@"$"];
            }
            (void) [((JavaLangStringBuffer *) nil_chk(textChunk)) appendWithNSString:token];
          }
        }
        else if ([((NSString *) nil_chk(token)) hasPrefix:@"X{"] && wasDelim) {
          int end = [((NSString *) nil_chk(token)) indexOf:'}'];
          if (end > 0) {
            if ([((JavaLangStringBuffer *) nil_chk(textChunk)) sequenceLength] > 0) {
              [((id<OrgOssPdfreporterEngineUtilJRQueryChunkHandler>) nil_chk(chunkHandler)) handleTextChunkWithNSString:[((JavaLangStringBuffer *) nil_chk(textChunk)) description]];
            }
            NSString *clauseChunk = [((NSString *) nil_chk(token)) substring:2 endIndex:end];
            IOSObjectArray *tokens = [self parseClauseWithNSString:clauseChunk];
            [((id<OrgOssPdfreporterEngineUtilJRQueryChunkHandler>) nil_chk(chunkHandler)) handleClauseChunkWithNSStringArray:tokens];
            textChunk = [[JavaLangStringBuffer alloc] initWithNSString:[((NSString *) nil_chk(token)) substring:end + 1]];
          }
          else {
            if (wasDelim) {
              (void) [((JavaLangStringBuffer *) nil_chk(textChunk)) appendWithNSString:@"$"];
            }
            (void) [((JavaLangStringBuffer *) nil_chk(textChunk)) appendWithNSString:token];
          }
        }
        else {
          if (wasDelim) {
            (void) [((JavaLangStringBuffer *) nil_chk(textChunk)) appendWithNSString:@"$"];
          }
          (void) [((JavaLangStringBuffer *) nil_chk(textChunk)) appendWithNSString:token];
        }
        wasDelim = NO;
      }
    }
    if (wasDelim) {
      (void) [((JavaLangStringBuffer *) nil_chk(textChunk)) appendWithNSString:@"$"];
    }
    if ([((JavaLangStringBuffer *) nil_chk(textChunk)) sequenceLength] > 0) {
      [((id<OrgOssPdfreporterEngineUtilJRQueryChunkHandler>) nil_chk(chunkHandler)) handleTextChunkWithNSString:[((JavaLangStringBuffer *) nil_chk(textChunk)) description]];
    }
  }
}

- (IOSObjectArray *)parseClauseWithNSString:(NSString *)clauseChunk {
  id<JavaUtilList> tokens = [[JavaUtilArrayList alloc] init];
  BOOL wasClauseToken = NO;
  NSString *separator = [self determineClauseTokenSeparatorWithNSString:clauseChunk];
  JavaUtilStringTokenizer *tokenizer = [[JavaUtilStringTokenizer alloc] initWithNSString:clauseChunk withNSString:separator withBOOL:YES];
  while ([((JavaUtilStringTokenizer *) nil_chk(tokenizer)) hasMoreTokens]) {
    NSString *token = [((JavaUtilStringTokenizer *) nil_chk(tokenizer)) nextToken];
    if ([((NSString *) nil_chk(token)) isEqual:separator]) {
      if (!wasClauseToken) {
        [((id<JavaUtilList>) nil_chk(tokens)) addWithId:@""];
      }
      wasClauseToken = NO;
    }
    else {
      [((id<JavaUtilList>) nil_chk(tokens)) addWithId:token];
      wasClauseToken = YES;
    }
  }
  if (!wasClauseToken) {
    [((id<JavaUtilList>) nil_chk(tokens)) addWithId:@""];
  }
  return [((id<JavaUtilList>) nil_chk(tokens)) toArrayWithNSObjectArray:[IOSObjectArray arrayWithLength:[((id<JavaUtilList>) nil_chk(tokens)) size] type:[IOSClass classWithClass:[NSString class]]]];
}

- (NSString *)determineClauseTokenSeparatorWithNSString:(NSString *)clauseChunk {
  NSString *allSeparators = [self getTokenSeparators];
  if (allSeparators == nil || [((NSString *) nil_chk(allSeparators)) length] == 0) {
    @throw [[OrgOssPdfreporterEngineJRRuntimeException alloc] initWithNSString:@"No token separators configured"];
  }
  int firstSepIdx = 0;
  int clauseLenght = [((NSString *) nil_chk(clauseChunk)) length];
  for (int idx = 0; idx < clauseLenght; ++idx) {
    int sepIdx = [((NSString *) nil_chk(allSeparators)) indexOf:[((NSString *) nil_chk(clauseChunk)) charAtWithInt:idx]];
    if (sepIdx >= 0) {
      firstSepIdx = sepIdx;
      break;
    }
  }
  return [NSString valueOfChar:[((NSString *) nil_chk(allSeparators)) charAtWithInt:firstSepIdx]];
}

- (NSString *)getTokenSeparators {
  return [OrgOssPdfreporterEngineUtilJRProperties getPropertyWithNSString:[OrgOssPdfreporterEngineJRQueryChunk PROPERTY_CHUNK_TOKEN_SEPARATOR]];
}

- (NSString *)asTextWithOrgOssPdfreporterEngineJRQueryChunkArray:(IOSObjectArray *)chunks {
  NSString *text = @"";
  if (chunks != nil && (int) [((IOSObjectArray *) nil_chk(chunks)) count] > 0) {
    JavaLangStringBuffer *sbuffer = [[JavaLangStringBuffer alloc] init];
    for (int i = 0; i < (int) [((IOSObjectArray *) nil_chk(chunks)) count]; i++) {
      id<OrgOssPdfreporterEngineJRQueryChunk> queryChunk = [((IOSObjectArray *) nil_chk(chunks)) objectAtIndex:i];
      switch ([((id<OrgOssPdfreporterEngineJRQueryChunk>) nil_chk(queryChunk)) getType]) {
        case OrgOssPdfreporterEngineJRQueryChunk_TYPE_PARAMETER:
        {
          (void) [((JavaLangStringBuffer *) nil_chk(sbuffer)) appendWithNSString:@"$P{"];
          (void) [((JavaLangStringBuffer *) nil_chk(sbuffer)) appendWithNSString:[((id<OrgOssPdfreporterEngineJRQueryChunk>) nil_chk(queryChunk)) getText]];
          (void) [((JavaLangStringBuffer *) nil_chk(sbuffer)) appendWithNSString:@"}"];
          break;
        }
        case OrgOssPdfreporterEngineJRQueryChunk_TYPE_PARAMETER_CLAUSE:
        {
          (void) [((JavaLangStringBuffer *) nil_chk(sbuffer)) appendWithNSString:@"$P!{"];
          (void) [((JavaLangStringBuffer *) nil_chk(sbuffer)) appendWithNSString:[((id<OrgOssPdfreporterEngineJRQueryChunk>) nil_chk(queryChunk)) getText]];
          (void) [((JavaLangStringBuffer *) nil_chk(sbuffer)) appendWithNSString:@"}"];
          break;
        }
        case OrgOssPdfreporterEngineJRQueryChunk_TYPE_CLAUSE_TOKENS:
        {
          (void) [((JavaLangStringBuffer *) nil_chk(sbuffer)) appendWithNSString:@"$X{"];
          (void) [((JavaLangStringBuffer *) nil_chk(sbuffer)) appendWithNSString:[((id<OrgOssPdfreporterEngineJRQueryChunk>) nil_chk(queryChunk)) getText]];
          (void) [((JavaLangStringBuffer *) nil_chk(sbuffer)) appendWithNSString:@"}"];
          break;
        }
        case OrgOssPdfreporterEngineJRQueryChunk_TYPE_TEXT:
        default:
        {
          (void) [((JavaLangStringBuffer *) nil_chk(sbuffer)) appendWithNSString:[((id<OrgOssPdfreporterEngineJRQueryChunk>) nil_chk(queryChunk)) getText]];
          break;
        }
      }
    }
    text = [((JavaLangStringBuffer *) nil_chk(sbuffer)) description];
  }
  return text;
}

- (NSString *)asClauseTextWithNSStringArray:(IOSObjectArray *)tokens {
  JavaLangStringBuffer *sb = [[JavaLangStringBuffer alloc] init];
  if (tokens != nil && (int) [((IOSObjectArray *) nil_chk(tokens)) count] > 0) {
    for (int i = 0; i < (int) [((IOSObjectArray *) nil_chk(tokens)) count]; i++) {
      if (i > 0) {
        (void) [((JavaLangStringBuffer *) nil_chk(sb)) appendWithUnichar:','];
      }
      NSString *token = [((IOSObjectArray *) nil_chk(tokens)) objectAtIndex:i];
      if (token != nil) {
        (void) [((JavaLangStringBuffer *) nil_chk(sb)) appendWithNSString:token];
      }
    }
  }
  return [((JavaLangStringBuffer *) nil_chk(sb)) description];
}

- (id)init {
  return [super init];
}

+ (void)initialize {
  if (self == [OrgOssPdfreporterEngineUtilJRQueryParser class]) {
    OrgOssPdfreporterEngineUtilJRQueryParser_singleton_ = [[OrgOssPdfreporterEngineUtilJRQueryParser alloc] init];
  }
}

@end
