//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: pdfreporter-core/src/org/oss/pdfreporter/engine/util/JRElementsVisitor.java
//
//  Created by kendra on 9/27/13.
//

#include "IOSObjectArray.h"
#include "java/util/HashSet.h"
#include "java/util/Iterator.h"
#include "java/util/List.h"
#include "java/util/Set.h"
#include "org/oss/pdfreporter/commons/arrays/Array2D.h"
#include "org/oss/pdfreporter/crosstabs/JRCellContents.h"
#include "org/oss/pdfreporter/crosstabs/JRCrosstab.h"
#include "org/oss/pdfreporter/crosstabs/JRCrosstabCell.h"
#include "org/oss/pdfreporter/crosstabs/JRCrosstabColumnGroup.h"
#include "org/oss/pdfreporter/crosstabs/JRCrosstabRowGroup.h"
#include "org/oss/pdfreporter/crosstabs/design/JRDesignCrosstab.h"
#include "org/oss/pdfreporter/engine/JRBand.h"
#include "org/oss/pdfreporter/engine/JRChild.h"
#include "org/oss/pdfreporter/engine/JRElementGroup.h"
#include "org/oss/pdfreporter/engine/JRFrame.h"
#include "org/oss/pdfreporter/engine/JRGroup.h"
#include "org/oss/pdfreporter/engine/JRReport.h"
#include "org/oss/pdfreporter/engine/JRSection.h"
#include "org/oss/pdfreporter/engine/JRVisitor.h"
#include "org/oss/pdfreporter/engine/util/JRElementsVisitor.h"

@implementation OrgOssPdfreporterEngineUtilJRElementsVisitor

+ (void)visitReportWithOrgOssPdfreporterEngineJRReport:(id<OrgOssPdfreporterEngineJRReport>)report
                  withOrgOssPdfreporterEngineJRVisitor:(id<OrgOssPdfreporterEngineJRVisitor>)visitor {
  OrgOssPdfreporterEngineUtilJRElementsVisitor *reportVisitor = [[OrgOssPdfreporterEngineUtilJRElementsVisitor alloc] initWithOrgOssPdfreporterEngineJRVisitor:visitor];
  [((OrgOssPdfreporterEngineUtilJRElementsVisitor *) nil_chk(reportVisitor)) visitReportWithOrgOssPdfreporterEngineJRReport:report];
}

- (id)initWithOrgOssPdfreporterEngineJRVisitor:(id<OrgOssPdfreporterEngineJRVisitor>)visitor {
  return [super initWithOrgOssPdfreporterEngineJRVisitor:visitor];
}

- (void)visitReportWithOrgOssPdfreporterEngineJRReport:(id<OrgOssPdfreporterEngineJRReport>)report {
  [self visitBandWithOrgOssPdfreporterEngineJRBand:[((id<OrgOssPdfreporterEngineJRReport>) nil_chk(report)) getBackground]];
  [self visitBandWithOrgOssPdfreporterEngineJRBand:[((id<OrgOssPdfreporterEngineJRReport>) nil_chk(report)) getTitle]];
  [self visitBandWithOrgOssPdfreporterEngineJRBand:[((id<OrgOssPdfreporterEngineJRReport>) nil_chk(report)) getPageHeader]];
  [self visitBandWithOrgOssPdfreporterEngineJRBand:[((id<OrgOssPdfreporterEngineJRReport>) nil_chk(report)) getColumnHeader]];
  [self visitSectionWithOrgOssPdfreporterEngineJRSection:[((id<OrgOssPdfreporterEngineJRReport>) nil_chk(report)) getDetailSection]];
  [self visitBandWithOrgOssPdfreporterEngineJRBand:[((id<OrgOssPdfreporterEngineJRReport>) nil_chk(report)) getColumnFooter]];
  [self visitBandWithOrgOssPdfreporterEngineJRBand:[((id<OrgOssPdfreporterEngineJRReport>) nil_chk(report)) getPageFooter]];
  [self visitBandWithOrgOssPdfreporterEngineJRBand:[((id<OrgOssPdfreporterEngineJRReport>) nil_chk(report)) getLastPageFooter]];
  [self visitBandWithOrgOssPdfreporterEngineJRBand:[((id<OrgOssPdfreporterEngineJRReport>) nil_chk(report)) getSummary]];
  [self visitBandWithOrgOssPdfreporterEngineJRBand:[((id<OrgOssPdfreporterEngineJRReport>) nil_chk(report)) getNoData]];
  IOSObjectArray *groups = [((id<OrgOssPdfreporterEngineJRReport>) nil_chk(report)) getGroups];
  if (groups != nil) {
    for (int i = 0; i < (int) [groups count]; i++) {
      id<OrgOssPdfreporterEngineJRGroup> group = [groups objectAtIndex:i];
      [self visitSectionWithOrgOssPdfreporterEngineJRSection:[((id<OrgOssPdfreporterEngineJRGroup>) nil_chk(group)) getGroupHeaderSection]];
      [self visitSectionWithOrgOssPdfreporterEngineJRSection:[((id<OrgOssPdfreporterEngineJRGroup>) nil_chk(group)) getGroupFooterSection]];
    }
  }
}

- (void)visitSectionWithOrgOssPdfreporterEngineJRSection:(id<OrgOssPdfreporterEngineJRSection>)section {
  if (section != nil) {
    IOSObjectArray *bands = [section getBands];
    if (bands != nil) {
      for (int i = 0; i < (int) [bands count]; i++) {
        [self visitBandWithOrgOssPdfreporterEngineJRBand:[bands objectAtIndex:i]];
      }
    }
  }
}

- (void)visitBandWithOrgOssPdfreporterEngineJRBand:(id<OrgOssPdfreporterEngineJRBand>)band {
  if (band != nil) {
    [band visitWithOrgOssPdfreporterEngineJRVisitor:self];
  }
}

- (void)visitElementsWithJavaUtilList:(id<JavaUtilList>)elements {
  if (elements != nil) {
    for (id<JavaUtilIterator> it = [elements iterator]; [((id<JavaUtilIterator>) nil_chk(it)) hasNext]; ) {
      id<OrgOssPdfreporterEngineJRChild> child = [((id<JavaUtilIterator>) nil_chk(it)) next];
      [((id<OrgOssPdfreporterEngineJRChild>) nil_chk(child)) visitWithOrgOssPdfreporterEngineJRVisitor:self];
    }
  }
}

- (void)visitElementGroupWithOrgOssPdfreporterEngineJRElementGroup:(id<OrgOssPdfreporterEngineJRElementGroup>)elementGroup {
  [super visitElementGroupWithOrgOssPdfreporterEngineJRElementGroup:elementGroup];
  [self visitElementsWithJavaUtilList:[((id<OrgOssPdfreporterEngineJRElementGroup>) nil_chk(elementGroup)) getChildren]];
}

- (void)visitFrameWithOrgOssPdfreporterEngineJRFrame:(id<OrgOssPdfreporterEngineJRFrame>)frame {
  [super visitFrameWithOrgOssPdfreporterEngineJRFrame:frame];
  [self visitElementsWithJavaUtilList:[((id<OrgOssPdfreporterEngineJRFrame>) nil_chk(frame)) getChildren]];
}

- (void)visitCrosstabWithOrgOssPdfreporterCrosstabsJRCrosstab:(id<OrgOssPdfreporterCrosstabsJRCrosstab>)crosstab {
  [super visitCrosstabWithOrgOssPdfreporterCrosstabsJRCrosstab:crosstab];
  [self visitCrosstabCellWithOrgOssPdfreporterCrosstabsJRCellContents:[((id<OrgOssPdfreporterCrosstabsJRCrosstab>) nil_chk(crosstab)) getWhenNoDataCell]];
  [self visitCrosstabCellWithOrgOssPdfreporterCrosstabsJRCellContents:[((id<OrgOssPdfreporterCrosstabsJRCrosstab>) nil_chk(crosstab)) getHeaderCell]];
  IOSObjectArray *rowGroups = [((id<OrgOssPdfreporterCrosstabsJRCrosstab>) nil_chk(crosstab)) getRowGroups];
  for (int i = 0; i < (int) [((IOSObjectArray *) nil_chk(rowGroups)) count]; i++) {
    id<OrgOssPdfreporterCrosstabsJRCrosstabRowGroup> rowGroup = [((IOSObjectArray *) nil_chk(rowGroups)) objectAtIndex:i];
    [self visitCrosstabCellWithOrgOssPdfreporterCrosstabsJRCellContents:[((id<OrgOssPdfreporterCrosstabsJRCrosstabRowGroup>) nil_chk(rowGroup)) getHeader]];
    [self visitCrosstabCellWithOrgOssPdfreporterCrosstabsJRCellContents:[((id<OrgOssPdfreporterCrosstabsJRCrosstabRowGroup>) nil_chk(rowGroup)) getTotalHeader]];
  }
  IOSObjectArray *columnGroups = [((id<OrgOssPdfreporterCrosstabsJRCrosstab>) nil_chk(crosstab)) getColumnGroups];
  for (int i = 0; i < (int) [((IOSObjectArray *) nil_chk(columnGroups)) count]; i++) {
    id<OrgOssPdfreporterCrosstabsJRCrosstabColumnGroup> columnGroup = [((IOSObjectArray *) nil_chk(columnGroups)) objectAtIndex:i];
    [self visitCrosstabCellWithOrgOssPdfreporterCrosstabsJRCellContents:[((id<OrgOssPdfreporterCrosstabsJRCrosstabColumnGroup>) nil_chk(columnGroup)) getHeader]];
    [self visitCrosstabCellWithOrgOssPdfreporterCrosstabsJRCellContents:[((id<OrgOssPdfreporterCrosstabsJRCrosstabColumnGroup>) nil_chk(columnGroup)) getTotalHeader]];
  }
  if ([(id) crosstab isKindOfClass:[OrgOssPdfreporterCrosstabsDesignJRDesignCrosstab class]]) {
    id<JavaUtilList> cells = [((OrgOssPdfreporterCrosstabsDesignJRDesignCrosstab *) crosstab) getCellsList];
    for (id<JavaUtilIterator> it = [((id<JavaUtilList>) nil_chk(cells)) iterator]; [((id<JavaUtilIterator>) nil_chk(it)) hasNext]; ) {
      id<OrgOssPdfreporterCrosstabsJRCrosstabCell> cell = [((id<JavaUtilIterator>) nil_chk(it)) next];
      [self visitCrosstabCellWithOrgOssPdfreporterCrosstabsJRCellContents:[((id<OrgOssPdfreporterCrosstabsJRCrosstabCell>) nil_chk(cell)) getContents]];
    }
  }
  else {
    id<OrgOssPdfreporterCommonsArraysArray2D> cells = [((id<OrgOssPdfreporterCrosstabsJRCrosstab>) nil_chk(crosstab)) getCells];
    if (cells != nil) {
      id<JavaUtilSet> cellContents = [[JavaUtilHashSet alloc] init];
      for (int i = 0; i < [cells getLengthI]; i++) {
        for (int j = 0; j < [cells getLengthJ]; j++) {
          id<OrgOssPdfreporterCrosstabsJRCrosstabCell> cell = [cells getWithInt:i withInt:j];
          if (cell != nil && [((id<OrgOssPdfreporterCrosstabsJRCrosstabCell>) nil_chk(cell)) getContents] != nil && [((id<JavaUtilSet>) nil_chk(cellContents)) addWithId:[((id<OrgOssPdfreporterCrosstabsJRCrosstabCell>) nil_chk(cell)) getContents]]) {
            [self visitCrosstabCellWithOrgOssPdfreporterCrosstabsJRCellContents:[((id<OrgOssPdfreporterCrosstabsJRCrosstabCell>) nil_chk(cell)) getContents]];
          }
        }
      }
    }
  }
}

- (void)visitCrosstabCellWithOrgOssPdfreporterCrosstabsJRCellContents:(id<OrgOssPdfreporterCrosstabsJRCellContents>)cell {
  if (cell != nil) {
    [self visitElementsWithJavaUtilList:[cell getChildren]];
  }
}

@end
