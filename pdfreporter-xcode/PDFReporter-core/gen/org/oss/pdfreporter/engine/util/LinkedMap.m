//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: pdfreporter-core/src/org/oss/pdfreporter/engine/util/LinkedMap.java
//
//  Created by kendra on 9/27/13.
//

#include "IOSClass.h"
#include "java/lang/IllegalStateException.h"
#include "java/lang/NullPointerException.h"
#include "java/util/HashMap.h"
#include "org/oss/pdfreporter/engine/util/LinkedMap.h"

@implementation OrgOssPdfreporterEngineUtilLinkedMap

@synthesize header = header_;
@synthesize map = map_;

- (id)init {
  if ((self = [super init])) {
    map_ = [[JavaUtilHashMap alloc] init];
    header_ = [[OrgOssPdfreporterEngineUtilLinkedMap_LinkedValue alloc] initWithId:nil withId:nil];
    ((OrgOssPdfreporterEngineUtilLinkedMap_LinkedValue *) nil_chk(header_)).prev = header_;
    ((OrgOssPdfreporterEngineUtilLinkedMap_LinkedValue *) nil_chk(header_)).next = header_;
  }
  return self;
}

- (void)addWithId:(id)key
           withId:(id)value {
  if (key != nil && [((JavaUtilHashMap *) nil_chk(map_)) containsKeyWithId:key]) {
    return;
  }
  OrgOssPdfreporterEngineUtilLinkedMap_LinkedValue *entry = [[OrgOssPdfreporterEngineUtilLinkedMap_LinkedValue alloc] initWithId:key withId:value];
  ((OrgOssPdfreporterEngineUtilLinkedMap_LinkedValue *) nil_chk(entry)).prev = ((OrgOssPdfreporterEngineUtilLinkedMap_LinkedValue *) nil_chk(header_)).prev;
  ((OrgOssPdfreporterEngineUtilLinkedMap_LinkedValue *) nil_chk(entry)).next = header_;
  ((OrgOssPdfreporterEngineUtilLinkedMap_LinkedValue *) nil_chk(((OrgOssPdfreporterEngineUtilLinkedMap_LinkedValue *) nil_chk(header_)).prev)).next = entry;
  ((OrgOssPdfreporterEngineUtilLinkedMap_LinkedValue *) nil_chk(header_)).prev = entry;
  if (key != nil) {
    (void) [((JavaUtilHashMap *) nil_chk(map_)) putWithId:key withId:entry];
  }
}

- (void)addFirstWithId:(id)key
                withId:(id)value {
  if (key != nil && [((JavaUtilHashMap *) nil_chk(map_)) containsKeyWithId:key]) {
    return;
  }
  OrgOssPdfreporterEngineUtilLinkedMap_LinkedValue *entry = [[OrgOssPdfreporterEngineUtilLinkedMap_LinkedValue alloc] initWithId:key withId:value];
  ((OrgOssPdfreporterEngineUtilLinkedMap_LinkedValue *) nil_chk(entry)).next = ((OrgOssPdfreporterEngineUtilLinkedMap_LinkedValue *) nil_chk(header_)).next;
  ((OrgOssPdfreporterEngineUtilLinkedMap_LinkedValue *) nil_chk(entry)).prev = header_;
  ((OrgOssPdfreporterEngineUtilLinkedMap_LinkedValue *) nil_chk(((OrgOssPdfreporterEngineUtilLinkedMap_LinkedValue *) nil_chk(header_)).next)).prev = entry;
  ((OrgOssPdfreporterEngineUtilLinkedMap_LinkedValue *) nil_chk(header_)).next = entry;
  if (key != nil) {
    (void) [((JavaUtilHashMap *) nil_chk(map_)) putWithId:key withId:entry];
  }
}

- (BOOL)isEmpty {
  return ((OrgOssPdfreporterEngineUtilLinkedMap_LinkedValue *) nil_chk(header_)).next == header_;
}

- (id)pop {
  if (((OrgOssPdfreporterEngineUtilLinkedMap_LinkedValue *) nil_chk(header_)).next == header_) {
    @throw [[JavaLangIllegalStateException alloc] initWithNSString:@"Empty map"];
  }
  OrgOssPdfreporterEngineUtilLinkedMap_LinkedValue *entry = ((OrgOssPdfreporterEngineUtilLinkedMap_LinkedValue *) nil_chk(header_)).next;
  ((OrgOssPdfreporterEngineUtilLinkedMap_LinkedValue *) nil_chk(((OrgOssPdfreporterEngineUtilLinkedMap_LinkedValue *) nil_chk(entry)).prev)).next = ((OrgOssPdfreporterEngineUtilLinkedMap_LinkedValue *) nil_chk(entry)).next;
  ((OrgOssPdfreporterEngineUtilLinkedMap_LinkedValue *) nil_chk(((OrgOssPdfreporterEngineUtilLinkedMap_LinkedValue *) nil_chk(entry)).next)).prev = ((OrgOssPdfreporterEngineUtilLinkedMap_LinkedValue *) nil_chk(entry)).prev;
  if (((OrgOssPdfreporterEngineUtilLinkedMap_LinkedValue *) nil_chk(entry)).key != nil) {
    (void) [((JavaUtilHashMap *) nil_chk(map_)) removeWithId:((OrgOssPdfreporterEngineUtilLinkedMap_LinkedValue *) nil_chk(entry)).key];
  }
  return ((OrgOssPdfreporterEngineUtilLinkedMap_LinkedValue *) nil_chk(entry)).value;
}

- (id)removeWithId:(id)key {
  if (key == nil) {
    @throw [[JavaLangNullPointerException alloc] initWithNSString:@"Key cannot be null"];
  }
  OrgOssPdfreporterEngineUtilLinkedMap_LinkedValue *entry = [((JavaUtilHashMap *) nil_chk(map_)) removeWithId:key];
  if (entry == nil) {
    return nil;
  }
  ((OrgOssPdfreporterEngineUtilLinkedMap_LinkedValue *) nil_chk(((OrgOssPdfreporterEngineUtilLinkedMap_LinkedValue *) nil_chk(entry)).prev)).next = ((OrgOssPdfreporterEngineUtilLinkedMap_LinkedValue *) nil_chk(entry)).next;
  ((OrgOssPdfreporterEngineUtilLinkedMap_LinkedValue *) nil_chk(((OrgOssPdfreporterEngineUtilLinkedMap_LinkedValue *) nil_chk(entry)).next)).prev = ((OrgOssPdfreporterEngineUtilLinkedMap_LinkedValue *) nil_chk(entry)).prev;
  return ((OrgOssPdfreporterEngineUtilLinkedMap_LinkedValue *) nil_chk(entry)).value;
}

- (void)addAllWithOrgOssPdfreporterEngineUtilLinkedMap:(OrgOssPdfreporterEngineUtilLinkedMap *)map {
  for (OrgOssPdfreporterEngineUtilLinkedMap_LinkedValue * entry = ((OrgOssPdfreporterEngineUtilLinkedMap_LinkedValue *) nil_chk(((OrgOssPdfreporterEngineUtilLinkedMap *) nil_chk(map)).header)).next; entry != ((OrgOssPdfreporterEngineUtilLinkedMap *) nil_chk(map)).header; entry = ((OrgOssPdfreporterEngineUtilLinkedMap_LinkedValue *) nil_chk(entry)).next) {
    [self addWithId:((OrgOssPdfreporterEngineUtilLinkedMap_LinkedValue *) nil_chk(entry)).key withId:((OrgOssPdfreporterEngineUtilLinkedMap_LinkedValue *) nil_chk(entry)).value];
  }
}

- (void)copyAllPropertiesTo:(id)copy {
  [super copyAllPropertiesTo:copy];
  OrgOssPdfreporterEngineUtilLinkedMap *typedCopy = (OrgOssPdfreporterEngineUtilLinkedMap *) copy;
  typedCopy.header = header_;
  typedCopy.map = map_;
}

@end
@implementation OrgOssPdfreporterEngineUtilLinkedMap_LinkedValue

@synthesize prev = prev_;
@synthesize next = next_;
@synthesize key = key_;
@synthesize value = value_;

- (id)initWithId:(id)key
          withId:(id)value {
  if ((self = [super init])) {
    self.key = key;
    self.value = value;
  }
  return self;
}

- (void)copyAllPropertiesTo:(id)copy {
  [super copyAllPropertiesTo:copy];
  OrgOssPdfreporterEngineUtilLinkedMap_LinkedValue *typedCopy = (OrgOssPdfreporterEngineUtilLinkedMap_LinkedValue *) copy;
  typedCopy.prev = prev_;
  typedCopy.next = next_;
  typedCopy.key = key_;
  typedCopy.value = value_;
}

@end
