//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: pdfreporter-core/src/org/oss/pdfreporter/engine/util/JRSingletonCache.java
//
//  Created by kendra on 9/27/13.
//

#include "IOSClass.h"
#include "java/lang/ClassNotFoundException.h"
#include "java/lang/IllegalAccessException.h"
#include "java/lang/InstantiationException.h"
#include "java/util/Map.h"
#include "org/oss/pdfreporter/engine/JRException.h"
#include "org/oss/pdfreporter/engine/util/JRClassLoader.h"
#include "org/oss/pdfreporter/engine/util/JRSingletonCache.h"
#include "org/oss/pdfreporter/uses/org/apache/commons/collections/ReferenceMap.h"

@implementation OrgOssPdfreporterEngineUtilJRSingletonCache

static id OrgOssPdfreporterEngineUtilJRSingletonCache_CONTEXT_KEY_NULL_;

@synthesize cache = cache_;
@synthesize itf = itf_;

+ (id)CONTEXT_KEY_NULL {
  return OrgOssPdfreporterEngineUtilJRSingletonCache_CONTEXT_KEY_NULL_;
}

- (id)initWithIOSClass:(IOSClass *)itf {
  if ((self = [super init])) {
    cache_ = [[OrgOssPdfreporterUsesOrgApacheCommonsCollectionsReferenceMap alloc] initWithInt:OrgOssPdfreporterUsesOrgApacheCommonsCollectionsReferenceMap_WEAK withInt:OrgOssPdfreporterUsesOrgApacheCommonsCollectionsReferenceMap_SOFT];
    self.itf = itf;
  }
  return self;
}

- (id)getCachedInstanceWithNSString:(NSString *)className_ {
  @synchronized(self) {
    {
      id<JavaUtilMap> contextCache = [self getContextInstanceCache];
      id instance = [((id<JavaUtilMap>) nil_chk(contextCache)) getWithId:className_];
      if (instance == nil) {
        instance = [self createInstanceWithNSString:className_];
        (void) [((id<JavaUtilMap>) nil_chk(contextCache)) putWithId:className_ withId:instance];
      }
      return instance;
    }
  }
}

- (id)createInstanceWithNSString:(NSString *)className_ {
  @try {
    IOSClass *clazz = (IOSClass *) [OrgOssPdfreporterEngineUtilJRClassLoader loadClassForNameWithNSString:className_];
    if (itf_ != nil && ![nil_chk(itf_) isAssignableFrom:clazz]) {
      @throw [[OrgOssPdfreporterEngineJRException alloc] initWithNSString:[NSString stringWithFormat:@"Class \"%@\" should be compatible with \"%@\"", className_, [((IOSClass *) nil_chk(itf_)) getName]]];
    }
    return [((IOSClass *) nil_chk(clazz)) newInstance];
  }
  @catch (JavaLangClassNotFoundException *e) {
    @throw [[OrgOssPdfreporterEngineJRException alloc] initWithNSString:[NSString stringWithFormat:@"Class %@ not found.", className_] withJavaLangThrowable:e];
  }
  @catch (JavaLangInstantiationException *e) {
    @throw [[OrgOssPdfreporterEngineJRException alloc] initWithNSString:[NSString stringWithFormat:@"Error instantiating class %@.", className_] withJavaLangThrowable:e];
  }
  @catch (JavaLangIllegalAccessException *e) {
    @throw [[OrgOssPdfreporterEngineJRException alloc] initWithNSString:[NSString stringWithFormat:@"Error instantiating class %@.", className_] withJavaLangThrowable:e];
  }
}

- (id<JavaUtilMap>)getContextInstanceCache {
  id contextKey = [self getContextKey];
  id<JavaUtilMap> contextCache = (id<JavaUtilMap>) [((OrgOssPdfreporterUsesOrgApacheCommonsCollectionsReferenceMap *) nil_chk(cache_)) getWithId:contextKey];
  if (contextCache == nil) {
    contextCache = [[OrgOssPdfreporterUsesOrgApacheCommonsCollectionsReferenceMap alloc] init];
    (void) [((OrgOssPdfreporterUsesOrgApacheCommonsCollectionsReferenceMap *) nil_chk(cache_)) putWithId:contextKey withId:contextCache];
  }
  return contextCache;
}

- (id)getContextKey {
  return OrgOssPdfreporterEngineUtilJRSingletonCache_CONTEXT_KEY_NULL_;
}

+ (void)initialize {
  if (self == [OrgOssPdfreporterEngineUtilJRSingletonCache class]) {
    OrgOssPdfreporterEngineUtilJRSingletonCache_CONTEXT_KEY_NULL_ = [[NSObject alloc] init];
  }
}

- (void)copyAllPropertiesTo:(id)copy {
  [super copyAllPropertiesTo:copy];
  OrgOssPdfreporterEngineUtilJRSingletonCache *typedCopy = (OrgOssPdfreporterEngineUtilJRSingletonCache *) copy;
  typedCopy.cache = cache_;
  typedCopy.itf = itf_;
}

@end
