//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: pdfreporter-core/src/org/oss/pdfreporter/engine/util/JRCloneUtils.java
//
//  Created by kendra on 9/27/13.
//

#include "IOSObjectArray.h"
#include "java/util/ArrayList.h"
#include "java/util/Iterator.h"
#include "java/util/List.h"
#include "org/oss/pdfreporter/engine/JRCloneable.h"
#include "org/oss/pdfreporter/engine/util/JRCloneUtils.h"

@implementation OrgOssPdfreporterEngineUtilJRCloneUtils

+ (id)nullSafeCloneWithId:(id<OrgOssPdfreporterEngineJRCloneable>)original {
  return original == nil ? nil : (id<OrgOssPdfreporterEngineJRCloneable>) [((id<OrgOssPdfreporterEngineJRCloneable>) nil_chk(original)) clone];
}

+ (id<JavaUtilList>)cloneListWithJavaUtilList:(id<JavaUtilList>)items {
  id<JavaUtilList> clone;
  if (items == nil) {
    clone = nil;
  }
  else {
    clone = [[JavaUtilArrayList alloc] initWithInt:[items size]];
    {
      id<JavaUtilIterator> iter__ = [items iterator];
      while ([((id<JavaUtilIterator>) nil_chk(iter__)) hasNext]) {
        id<OrgOssPdfreporterEngineJRCloneable> item = [((id<JavaUtilIterator>) nil_chk(iter__)) next];
        [((id<JavaUtilList>) nil_chk(clone)) addWithId:[OrgOssPdfreporterEngineUtilJRCloneUtils nullSafeCloneWithId:item]];
      }
    }
  }
  return clone;
}

+ (IOSObjectArray *)cloneArrayWithOrgOssPdfreporterEngineJRCloneableArray:(IOSObjectArray *)items {
  IOSObjectArray *clone;
  if (items == nil) {
    clone = nil;
  }
  else {
    clone = [items clone];
    id<JavaUtilList> list = [[JavaUtilArrayList alloc] initWithInt:(int) [items count]];
    {
      IOSObjectArray *a__ = items;
      int n__ = (int) [((IOSObjectArray *) nil_chk(a__)) count];
      for (int i__ = 0; i__ < n__; i__++) {
        id<OrgOssPdfreporterEngineJRCloneable> item = [((IOSObjectArray *) nil_chk(a__)) objectAtIndex:i__];
        [((id<JavaUtilList>) nil_chk(list)) addWithId:[OrgOssPdfreporterEngineUtilJRCloneUtils nullSafeCloneWithId:item]];
      }
    }
    clone = [((id<JavaUtilList>) nil_chk(list)) toArrayWithNSObjectArray:clone];
  }
  return clone;
}

- (id)init {
  return [super init];
}

@end
