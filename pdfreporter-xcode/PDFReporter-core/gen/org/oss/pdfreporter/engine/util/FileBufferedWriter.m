//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: pdfreporter-core/src/org/oss/pdfreporter/engine/util/FileBufferedWriter.java
//
//  Created by kendra on 9/27/13.
//

#include "IOSCharArray.h"
#include "java/io/BufferedWriter.h"
#include "java/io/IOException.h"
#include "java/io/InputStream.h"
#include "java/io/InputStreamReader.h"
#include "java/io/OutputStreamWriter.h"
#include "java/io/Reader.h"
#include "java/io/UnsupportedEncodingException.h"
#include "java/io/Writer.h"
#include "org/oss/pdfreporter/engine/JRRuntimeException.h"
#include "org/oss/pdfreporter/engine/util/FileBufferedOutputStream.h"
#include "org/oss/pdfreporter/engine/util/FileBufferedWriter.h"

@implementation OrgOssPdfreporterEngineUtilFileBufferedWriter

@synthesize fbos = fbos_;
@synthesize osw = osw_;
@synthesize isEmpty_ = isEmpty__;

- (id)init {
  if ((self = [super init])) {
    isEmpty__ = YES;
    fbos_ = [[OrgOssPdfreporterEngineUtilFileBufferedOutputStream alloc] init];
    @try {
      osw_ = [[JavaIoBufferedWriter alloc] initWithJavaIoWriter:[[JavaIoOutputStreamWriter alloc] initWithJavaIoOutputStream:fbos_ withNSString:@"UTF-8"]];
    }
    @catch (JavaIoUnsupportedEncodingException *e) {
      @throw [[OrgOssPdfreporterEngineJRRuntimeException alloc] initWithJavaLangThrowable:e];
    }
  }
  return self;
}

- (BOOL)isEmpty {
  return isEmpty__;
}

- (void)writeDataWithJavaIoWriter:(JavaIoWriter *)writer {
  JavaIoReader *reader = nil;
  @try {
    [self close];
    reader = [[JavaIoInputStreamReader alloc] initWithJavaIoInputStream:[((OrgOssPdfreporterEngineUtilFileBufferedOutputStream *) nil_chk(fbos_)) getDataInputStream] withNSString:@"UTF-8"];
    IOSCharArray *chars = [IOSCharArray arrayWithLength:10000];
    int ln = 0;
    while ((ln = [((JavaIoReader *) nil_chk(reader)) readWithCharArray:chars]) > 0) {
      [((JavaIoWriter *) nil_chk(writer)) writeWithCharArray:chars withInt:0 withInt:ln];
    }
    [((JavaIoWriter *) nil_chk(writer)) flush];
  }
  @catch (JavaIoIOException *e) {
    @throw [[OrgOssPdfreporterEngineJRRuntimeException alloc] initWithJavaLangThrowable:e];
  }
  @finally {
    if (reader != nil) {
      @try {
        [reader close];
      }
      @catch (JavaIoIOException *e) {
      }
    }
  }
}

- (void)dispose {
  [((OrgOssPdfreporterEngineUtilFileBufferedOutputStream *) nil_chk(fbos_)) dispose];
}

- (void)close {
  [((JavaIoWriter *) nil_chk(osw_)) close];
}

- (void)flush {
  [((JavaIoWriter *) nil_chk(osw_)) flush];
}

- (void)writeWithCharArray:(IOSCharArray *)cbuf
                   withInt:(int)off
                   withInt:(int)len {
  if (len > 0) {
    isEmpty__ = NO;
  }
  [((JavaIoWriter *) nil_chk(osw_)) writeWithCharArray:cbuf withInt:off withInt:len];
}

- (void)copyAllPropertiesTo:(id)copy {
  [super copyAllPropertiesTo:copy];
  OrgOssPdfreporterEngineUtilFileBufferedWriter *typedCopy = (OrgOssPdfreporterEngineUtilFileBufferedWriter *) copy;
  typedCopy.fbos = fbos_;
  typedCopy.osw = osw_;
  typedCopy.isEmpty_ = isEmpty__;
}

@end
