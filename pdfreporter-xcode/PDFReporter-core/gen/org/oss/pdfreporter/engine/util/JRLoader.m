//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: pdfreporter-core/src/org/oss/pdfreporter/engine/util/JRLoader.java
//
//  Created by kendra on 9/27/13.
//

#include "IOSByteArray.h"
#include "java/io/ByteArrayOutputStream.h"
#include "java/io/File.h"
#include "java/io/FileInputStream.h"
#include "java/io/FileNotFoundException.h"
#include "java/io/IOException.h"
#include "java/io/InputStream.h"
#include "java/util/List.h"
#include "org/oss/pdfreporter/engine/DefaultJasperReportsContext.h"
#include "org/oss/pdfreporter/engine/JRException.h"
#include "org/oss/pdfreporter/engine/JasperReportsContext.h"
#include "org/oss/pdfreporter/engine/util/JRLoader.h"
#include "org/oss/pdfreporter/net/IURL.h"
#include "org/oss/pdfreporter/net/MalformedURLException.h"
#include "org/oss/pdfreporter/net/factory/INetFactory.h"
#include "org/oss/pdfreporter/registry/IRegistry.h"
#include "org/oss/pdfreporter/repo/DigireportFileResourceLoader.h"

@implementation OrgOssPdfreporterEngineUtilJRLoader

+ (id)loadObjectWithNSString:(NSString *)fileName {
  return [OrgOssPdfreporterEngineUtilJRLoader loadObjectFromFileWithNSString:fileName];
}

+ (id)loadObjectFromFileWithNSString:(NSString *)fileName {
  return [OrgOssPdfreporterEngineUtilJRLoader loadObjectWithJavaIoFile:[[JavaIoFile alloc] initWithNSString:fileName]];
}

+ (id)loadObjectWithJavaIoFile:(JavaIoFile *)file {
  return [OrgOssPdfreporterEngineUtilJRLoader loadObjectWithOrgOssPdfreporterEngineJasperReportsContext:[OrgOssPdfreporterEngineDefaultJasperReportsContext getInstance] withJavaIoFile:file];
}

+ (id)loadObjectWithOrgOssPdfreporterEngineJasperReportsContext:(id<OrgOssPdfreporterEngineJasperReportsContext>)jasperReportsContext
                                                 withJavaIoFile:(JavaIoFile *)file {
  if (![((JavaIoFile *) nil_chk(file)) exists] || ![((JavaIoFile *) nil_chk(file)) isFile]) {
    @throw [[OrgOssPdfreporterEngineJRException alloc] initWithJavaLangThrowable:[[JavaIoFileNotFoundException alloc] initWithNSString:[NSString valueOf:file]]];
  }
  @throw [[OrgOssPdfreporterEngineJRException alloc] initWithNSString:[NSString stringWithFormat:@"Error not supported to deserialize Objects from File: %@", [((JavaIoFile *) nil_chk(file)) getAbsolutePath]]];
}

+ (id)loadObjectWithOrgOssPdfreporterNetIURL:(id<OrgOssPdfreporterNetIURL>)url {
  return [OrgOssPdfreporterEngineUtilJRLoader loadObjectWithOrgOssPdfreporterEngineJasperReportsContext:[OrgOssPdfreporterEngineDefaultJasperReportsContext getInstance] withOrgOssPdfreporterNetIURL:url];
}

+ (id)loadObjectWithOrgOssPdfreporterEngineJasperReportsContext:(id<OrgOssPdfreporterEngineJasperReportsContext>)jasperReportsContext
                                   withOrgOssPdfreporterNetIURL:(id<OrgOssPdfreporterNetIURL>)url {
  @throw [[OrgOssPdfreporterEngineJRException alloc] initWithNSString:[NSString stringWithFormat:@"Error not supported to deserialize Objects from URL: %@", url]];
}

+ (id)loadObjectWithJavaIoInputStream:(JavaIoInputStream *)is {
  return [OrgOssPdfreporterEngineUtilJRLoader loadObjectWithOrgOssPdfreporterEngineJasperReportsContext:[OrgOssPdfreporterEngineDefaultJasperReportsContext getInstance] withJavaIoInputStream:is];
}

+ (id)loadObjectWithOrgOssPdfreporterEngineJasperReportsContext:(id<OrgOssPdfreporterEngineJasperReportsContext>)jasperReportsContext
                                          withJavaIoInputStream:(JavaIoInputStream *)is {
  @throw [[OrgOssPdfreporterEngineJRException alloc] initWithNSString:[NSString stringWithFormat:@"Error not supported to deserialize Objects from InputStream: %@", is]];
}

+ (JavaIoInputStream *)getInputStreamWithJavaIoFile:(JavaIoFile *)file {
  if (![((JavaIoFile *) nil_chk(file)) exists] || ![((JavaIoFile *) nil_chk(file)) isFile]) {
    @throw [[OrgOssPdfreporterEngineJRException alloc] initWithJavaLangThrowable:[[JavaIoFileNotFoundException alloc] initWithNSString:[NSString valueOf:file]]];
  }
  JavaIoFileInputStream *fis = nil;
  @try {
    fis = [[JavaIoFileInputStream alloc] initWithJavaIoFile:file];
  }
  @catch (JavaIoIOException *e) {
    @throw [[OrgOssPdfreporterEngineJRException alloc] initWithNSString:[NSString stringWithFormat:@"Error opening input stream from file : %@", file] withJavaLangThrowable:e];
  }
  return fis;
}

+ (JavaIoInputStream *)getInputStreamWithOrgOssPdfreporterNetIURL:(id<OrgOssPdfreporterNetIURL>)url {
  JavaIoInputStream *is = nil;
  @try {
    is = [((id<OrgOssPdfreporterNetIURL>) nil_chk(url)) openStream];
  }
  @catch (JavaIoIOException *e) {
    @throw [[OrgOssPdfreporterEngineJRException alloc] initWithNSString:[NSString stringWithFormat:@"Error opening input stream from IURL : %@", url] withJavaLangThrowable:e];
  }
  return is;
}

+ (IOSByteArray *)loadBytesWithJavaIoFile:(JavaIoFile *)file {
  JavaIoByteArrayOutputStream *baos = nil;
  JavaIoFileInputStream *fis = nil;
  @try {
    fis = [[JavaIoFileInputStream alloc] initWithJavaIoFile:file];
    baos = [[JavaIoByteArrayOutputStream alloc] init];
    IOSByteArray *bytes = [IOSByteArray arrayWithLength:10000];
    int ln = 0;
    while ((ln = [((JavaIoFileInputStream *) nil_chk(fis)) readWithByteArray:bytes]) > 0) {
      [((JavaIoByteArrayOutputStream *) nil_chk(baos)) writeWithByteArray:bytes withInt:0 withInt:ln];
    }
    [((JavaIoByteArrayOutputStream *) nil_chk(baos)) flush];
  }
  @catch (JavaIoIOException *e) {
    @throw [[OrgOssPdfreporterEngineJRException alloc] initWithNSString:[NSString stringWithFormat:@"Error loading byte data : %@", file] withJavaLangThrowable:e];
  }
  @finally {
    if (baos != nil) {
      @try {
        [baos close];
      }
      @catch (JavaIoIOException *e) {
      }
    }
    if (fis != nil) {
      @try {
        [fis close];
      }
      @catch (JavaIoIOException *e) {
      }
    }
  }
  return [((JavaIoByteArrayOutputStream *) nil_chk(baos)) toByteArray];
}

+ (IOSByteArray *)loadBytesWithOrgOssPdfreporterNetIURL:(id<OrgOssPdfreporterNetIURL>)url {
  JavaIoByteArrayOutputStream *baos = nil;
  JavaIoInputStream *is = nil;
  @try {
    is = [((id<OrgOssPdfreporterNetIURL>) nil_chk(url)) openStream];
    baos = [[JavaIoByteArrayOutputStream alloc] init];
    IOSByteArray *bytes = [IOSByteArray arrayWithLength:10000];
    int ln = 0;
    while ((ln = [((JavaIoInputStream *) nil_chk(is)) readWithByteArray:bytes]) > 0) {
      [((JavaIoByteArrayOutputStream *) nil_chk(baos)) writeWithByteArray:bytes withInt:0 withInt:ln];
    }
    [((JavaIoByteArrayOutputStream *) nil_chk(baos)) flush];
  }
  @catch (JavaIoIOException *e) {
    @throw [[OrgOssPdfreporterEngineJRException alloc] initWithNSString:[NSString stringWithFormat:@"Error loading byte data : %@", url] withJavaLangThrowable:e];
  }
  @finally {
    if (baos != nil) {
      @try {
        [baos close];
      }
      @catch (JavaIoIOException *e) {
      }
    }
    if (is != nil) {
      @try {
        [is close];
      }
      @catch (JavaIoIOException *e) {
      }
    }
  }
  return [((JavaIoByteArrayOutputStream *) nil_chk(baos)) toByteArray];
}

+ (IOSByteArray *)loadBytesWithJavaIoInputStream:(JavaIoInputStream *)is {
  JavaIoByteArrayOutputStream *baos = nil;
  @try {
    baos = [[JavaIoByteArrayOutputStream alloc] init];
    IOSByteArray *bytes = [IOSByteArray arrayWithLength:10000];
    int ln = 0;
    while ((ln = [((JavaIoInputStream *) nil_chk(is)) readWithByteArray:bytes]) > 0) {
      [((JavaIoByteArrayOutputStream *) nil_chk(baos)) writeWithByteArray:bytes withInt:0 withInt:ln];
    }
    [((JavaIoByteArrayOutputStream *) nil_chk(baos)) flush];
  }
  @catch (JavaIoIOException *e) {
    @throw [[OrgOssPdfreporterEngineJRException alloc] initWithNSString:@"Error loading byte data from input stream." withJavaLangThrowable:e];
  }
  @finally {
    if (baos != nil) {
      @try {
        [baos close];
      }
      @catch (JavaIoIOException *e) {
      }
    }
  }
  return [((JavaIoByteArrayOutputStream *) nil_chk(baos)) toByteArray];
}

+ (IOSByteArray *)loadBytesFromResourceWithNSString:(NSString *)resourceName {
  id<OrgOssPdfreporterNetIURL> url = [OrgOssPdfreporterRepoDigireportFileResourceLoader getURLWithNSString:resourceName];
  if (url != nil) {
    return [OrgOssPdfreporterEngineUtilJRLoader loadBytesWithOrgOssPdfreporterNetIURL:url];
  }
  @throw [[OrgOssPdfreporterEngineJRException alloc] initWithNSString:[NSString stringWithFormat:@"Resource '%@' not found.", resourceName]];
}

+ (JavaIoInputStream *)getLocationInputStreamWithNSString:(NSString *)location {
  JavaIoInputStream *is = nil;
  is = [OrgOssPdfreporterEngineUtilJRLoader getResourceInputStreamWithNSString:location];
  if (is == nil) {
    is = [OrgOssPdfreporterEngineUtilJRLoader getFileInputStreamWithNSString:location];
  }
  if (is == nil) {
    is = [OrgOssPdfreporterEngineUtilJRLoader getURLInputStreamWithNSString:location];
  }
  return is;
}

+ (JavaIoInputStream *)getFileInputStreamWithNSString:(NSString *)filename {
  JavaIoInputStream *is = nil;
  JavaIoFile *file = [[JavaIoFile alloc] initWithNSString:filename];
  if ([((JavaIoFile *) nil_chk(file)) exists] && [((JavaIoFile *) nil_chk(file)) isFile]) {
    @try {
      is = [[JavaIoFileInputStream alloc] initWithJavaIoFile:file];
    }
    @catch (JavaIoFileNotFoundException *e) {
      @throw [[OrgOssPdfreporterEngineJRException alloc] initWithNSString:[NSString stringWithFormat:@"Error opening file %@", filename] withJavaLangThrowable:e];
    }
  }
  return is;
}

+ (JavaIoInputStream *)getResourceInputStreamWithNSString:(NSString *)resource {
  JavaIoInputStream *is = nil;
  id<OrgOssPdfreporterNetIURL> resourceUrl = [OrgOssPdfreporterRepoDigireportFileResourceLoader getURLWithNSString:resource];
  if (resourceUrl != nil) {
    @try {
      is = [resourceUrl openStream];
    }
    @catch (JavaIoIOException *e) {
      @throw [[OrgOssPdfreporterEngineJRException alloc] initWithNSString:[NSString stringWithFormat:@"Error opening stream %@", resource] withJavaLangThrowable:e];
    }
  }
  return is;
}

+ (id<JavaUtilList>)getResourcesWithNSString:(NSString *)resource {
  return [OrgOssPdfreporterRepoDigireportFileResourceLoader getConfiguredFileResources];
}

+ (id<JavaUtilList>)getFileSystemResourcesWithNSString:(NSString *)resource {
  return [OrgOssPdfreporterRepoDigireportFileResourceLoader findConfiguredFileSystemResourcesWithNSString:resource];
}

+ (id<OrgOssPdfreporterNetIURL>)getResourceWithNSString:(NSString *)resource {
  return [OrgOssPdfreporterRepoDigireportFileResourceLoader getURLWithNSString:resource];
}

+ (JavaIoInputStream *)getURLInputStreamWithNSString:(NSString *)spec {
  JavaIoInputStream *is = nil;
  @try {
    id<OrgOssPdfreporterNetIURL> url = [((id<OrgOssPdfreporterNetFactoryINetFactory>) nil_chk([OrgOssPdfreporterRegistryIRegistry getINetFactory])) newURLWithNSString:spec];
    is = [((id<OrgOssPdfreporterNetIURL>) nil_chk(url)) openStream];
  }
  @catch (OrgOssPdfreporterNetMalformedURLException *e) {
  }
  @catch (JavaIoIOException *e) {
    @throw [[OrgOssPdfreporterEngineJRException alloc] initWithNSString:[NSString stringWithFormat:@"Error opening IURL %@", spec] withJavaLangThrowable:e];
  }
  return is;
}

- (id)init {
  return [super init];
}

@end
