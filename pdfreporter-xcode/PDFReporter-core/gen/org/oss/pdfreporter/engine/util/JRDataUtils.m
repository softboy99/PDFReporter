//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: pdfreporter-core/src/org/oss/pdfreporter/engine/util/JRDataUtils.java
//
//  Created by kendra on 9/27/13.
//

#include "java/lang/Math.h"
#include "java/util/Calendar.h"
#include "java/util/Date.h"
#include "java/util/GregorianCalendar.h"
#include "java/util/Locale.h"
#include "java/util/TimeZone.h"
#include "org/oss/pdfreporter/engine/util/JRDataUtils.h"

@implementation OrgOssPdfreporterEngineUtilJRDataUtils

+ (double)JULIAN_0000 {
  return OrgOssPdfreporterEngineUtilJRDataUtils_JULIAN_0000;
}

+ (double)JULIAN_1900 {
  return OrgOssPdfreporterEngineUtilJRDataUtils_JULIAN_1900;
}

+ (NSString *)getLocaleCodeWithJavaUtilLocale:(JavaUtilLocale *)locale {
  return [((JavaUtilLocale *) nil_chk(locale)) description];
}

+ (JavaUtilLocale *)getLocaleWithNSString:(NSString *)code {
  NSString *language;
  NSString *country;
  NSString *variant;
  int firstSep = [((NSString *) nil_chk(code)) indexOf:'_'];
  if (firstSep < 0) {
    language = code;
    country = variant = @"";
  }
  else {
    language = [((NSString *) nil_chk(code)) substring:0 endIndex:firstSep];
    int secondSep = [((NSString *) nil_chk(code)) indexOf:'_' fromIndex:firstSep + 1];
    if (secondSep < 0) {
      country = [((NSString *) nil_chk(code)) substring:firstSep + 1];
      variant = @"";
    }
    else {
      country = [((NSString *) nil_chk(code)) substring:firstSep + 1 endIndex:secondSep];
      variant = [((NSString *) nil_chk(code)) substring:secondSep + 1];
    }
  }
  return [[JavaUtilLocale alloc] initWithNSString:language withNSString:country withNSString:variant];
}

+ (NSString *)getTimeZoneIdWithJavaUtilTimeZone:(JavaUtilTimeZone *)tz {
  return [((JavaUtilTimeZone *) nil_chk(tz)) getID];
}

+ (JavaUtilTimeZone *)getTimeZoneWithNSString:(NSString *)id_ {
  return [JavaUtilTimeZone getTimeZoneWithNSString:id_];
}

+ (double)getExcelSerialDayNumberWithJavaUtilDate:(JavaUtilDate *)date
                               withJavaUtilLocale:(JavaUtilLocale *)locale
                             withJavaUtilTimeZone:(JavaUtilTimeZone *)timeZone {
  JavaUtilGregorianCalendar *calendar = [[JavaUtilGregorianCalendar alloc] initWithJavaUtilTimeZone:timeZone withJavaUtilLocale:locale];
  [((JavaUtilGregorianCalendar *) nil_chk(calendar)) setTimeWithJavaUtilDate:date];
  int year = [((JavaUtilGregorianCalendar *) nil_chk(calendar)) getWithInt:JavaUtilCalendar_YEAR];
  int month = [((JavaUtilGregorianCalendar *) nil_chk(calendar)) getWithInt:JavaUtilCalendar_MONTH];
  int day = [((JavaUtilGregorianCalendar *) nil_chk(calendar)) getWithInt:JavaUtilCalendar_DAY_OF_MONTH];
  int hour = [((JavaUtilGregorianCalendar *) nil_chk(calendar)) getWithInt:JavaUtilCalendar_HOUR_OF_DAY];
  int min = [((JavaUtilGregorianCalendar *) nil_chk(calendar)) getWithInt:JavaUtilCalendar_MINUTE];
  int sec = [((JavaUtilGregorianCalendar *) nil_chk(calendar)) getWithInt:JavaUtilCalendar_SECOND];
  double result = [OrgOssPdfreporterEngineUtilJRDataUtils getGregorianToJulianDayWithInt:year withInt:month + 1 withInt:day] + ([JavaLangMath floorWithDouble:sec + 60 * (min + 60 * hour) + 0.5] / 86400.0);
  return (result - OrgOssPdfreporterEngineUtilJRDataUtils_JULIAN_1900) + 1 + ((result > 2415078.5) ? 1 : 0);
}

+ (double)getGregorianToJulianDayWithInt:(int)year
                                 withInt:(int)month
                                 withInt:(int)day {
  return OrgOssPdfreporterEngineUtilJRDataUtils_JULIAN_0000 + (365 * (year - 1)) + [JavaLangMath floorWithDouble:(year - 1) / 4] - [JavaLangMath floorWithDouble:(year - 1) / 100] + [JavaLangMath floorWithDouble:(year - 1) / 400] + [JavaLangMath floorWithDouble:(((367 * month) - 362) / 12) + (month <= 2 ? 0 : ([OrgOssPdfreporterEngineUtilJRDataUtils isLeapYearWithInt:year] ? -1 : -2)) + day];
}

+ (BOOL)isLeapYearWithInt:(int)year {
  return year % 4 == 0 && (year % 100 != 0 || year % 400 == 0);
}

+ (JavaUtilDate *)translateToTimezoneWithJavaUtilDate:(JavaUtilDate *)value
                                 withJavaUtilTimeZone:(JavaUtilTimeZone *)tz {
  if (tz == nil) {
    return value;
  }
  JavaUtilTimeZone *defaultTz = [JavaUtilTimeZone getDefault];
  if ([((JavaUtilTimeZone *) nil_chk(defaultTz)) hasSameRulesWithJavaUtilTimeZone:tz]) {
    return value;
  }
  long long int time = [((JavaUtilDate *) nil_chk(value)) getTime];
  JavaUtilDate *adjustedDate = [[JavaUtilDate alloc] initWithLongInt:time + [((JavaUtilTimeZone *) nil_chk(tz)) getOffsetWithLongInt:time] - [((JavaUtilTimeZone *) nil_chk(defaultTz)) getOffsetWithLongInt:time]];
  return adjustedDate;
}

- (id)init {
  return [super init];
}

@end
