//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: pdfreporter-core/src/org/oss/pdfreporter/engine/util/ObjectUtils.java
//
//  Created by kendra on 9/27/13.
//

#include "IOSObjectArray.h"
#include "java/lang/Boolean.h"
#include "java/lang/Enum.h"
#include "java/lang/System.h"
#include "java/util/Iterator.h"
#include "java/util/List.h"
#include "org/oss/pdfreporter/engine/Deduplicable.h"
#include "org/oss/pdfreporter/engine/JRPropertiesMap.h"
#include "org/oss/pdfreporter/engine/util/ObjectUtils.h"

@implementation OrgOssPdfreporterEngineUtilObjectUtils

+ (OrgOssPdfreporterEngineUtilObjectUtils_HashCode *)hash__ {
  return [[OrgOssPdfreporterEngineUtilObjectUtils_HashCode alloc] init];
}

+ (BOOL)equalsIdentityWithId:(id)o1
                      withId:(id)o2 {
  return o1 == o2;
}

+ (BOOL)identicalWithId:(id)o1
                 withId:(id)o2 {
  if ([o1 conformsToProtocol: @protocol(OrgOssPdfreporterEngineDeduplicable)] && [o2 conformsToProtocol: @protocol(OrgOssPdfreporterEngineDeduplicable)]) {
    return [((id<OrgOssPdfreporterEngineDeduplicable>) o1) isIdenticalWithId:o2];
  }
  return [OrgOssPdfreporterEngineUtilObjectUtils equalsWithId:o1 withId:o2];
}

+ (BOOL)identicalWithNSObjectArray:(IOSObjectArray *)v1
                 withNSObjectArray:(IOSObjectArray *)v2 {
  if (v1 == nil || (int) [((IOSObjectArray *) nil_chk(v1)) count] == 0) {
    return v2 == nil || (int) [((IOSObjectArray *) nil_chk(v2)) count] == 0;
  }
  if (v2 == nil || (int) [((IOSObjectArray *) nil_chk(v1)) count] != (int) [((IOSObjectArray *) nil_chk(v2)) count]) {
    return NO;
  }
  for (int idx = 0; idx < (int) [((IOSObjectArray *) nil_chk(v1)) count]; idx++) {
    if (![OrgOssPdfreporterEngineUtilObjectUtils identicalWithId:[((IOSObjectArray *) nil_chk(v1)) objectAtIndex:idx] withId:[((IOSObjectArray *) nil_chk(v2)) objectAtIndex:idx]]) {
      return NO;
    }
  }
  return YES;
}

+ (BOOL)identicalWithJavaUtilList:(id<JavaUtilList>)l1
                 withJavaUtilList:(id<JavaUtilList>)l2 {
  if (l1 == nil || [((id<JavaUtilList>) nil_chk(l1)) isEmpty]) {
    return l2 == nil || [((id<JavaUtilList>) nil_chk(l2)) isEmpty];
  }
  if (l2 == nil || [((id<JavaUtilList>) nil_chk(l1)) size] != [((id<JavaUtilList>) nil_chk(l2)) size]) {
    return NO;
  }
  id<JavaUtilIterator> i1 = [((id<JavaUtilList>) nil_chk(l1)) iterator];
  id<JavaUtilIterator> i2 = [((id<JavaUtilList>) nil_chk(l2)) iterator];
  while ([((id<JavaUtilIterator>) nil_chk(i1)) hasNext]) {
    id o1 = [((id<JavaUtilIterator>) nil_chk(i1)) next];
    id o2 = [((id<JavaUtilIterator>) nil_chk(i2)) next];
    if (![OrgOssPdfreporterEngineUtilObjectUtils identicalWithId:o1 withId:o2]) {
      return NO;
    }
  }
  return YES;
}

+ (BOOL)equalsWithId:(id)o1
              withId:(id)o2 {
  return (o1 == nil) ? (o2 == nil) : (o2 != nil && [nil_chk(o1) isEqual:o2]);
}

+ (BOOL)equalsWithJavaLangEnum:(JavaLangEnum *)o1
              withJavaLangEnum:(JavaLangEnum *)o2 {
  return o1 == o2;
}

+ (BOOL)equalsWithBOOL:(BOOL)b1
              withBOOL:(BOOL)b2 {
  return b1 == b2;
}

+ (BOOL)equalsWithInt:(int)i1
              withInt:(int)i2 {
  return i1 == i2;
}

+ (BOOL)equalsWithOrgOssPdfreporterEngineJRPropertiesMap:(OrgOssPdfreporterEngineJRPropertiesMap *)p1
              withOrgOssPdfreporterEngineJRPropertiesMap:(OrgOssPdfreporterEngineJRPropertiesMap *)p2 {
  if (p1 == nil || ![((OrgOssPdfreporterEngineJRPropertiesMap *) nil_chk(p1)) hasProperties]) {
    return p2 == nil || ![((OrgOssPdfreporterEngineJRPropertiesMap *) nil_chk(p2)) hasProperties];
  }
  if (p2 == nil || ![((OrgOssPdfreporterEngineJRPropertiesMap *) nil_chk(p2)) hasProperties]) {
    return NO;
  }
  IOSObjectArray *names1 = [((OrgOssPdfreporterEngineJRPropertiesMap *) nil_chk(p1)) getPropertyNames];
  IOSObjectArray *names2 = [((OrgOssPdfreporterEngineJRPropertiesMap *) nil_chk(p2)) getPropertyNames];
  if ((int) [((IOSObjectArray *) nil_chk(names1)) count] != (int) [((IOSObjectArray *) nil_chk(names2)) count]) {
    return NO;
  }
  for (int i = 0; i < (int) [((IOSObjectArray *) nil_chk(names1)) count]; i++) {
    NSString *name1 = [((IOSObjectArray *) nil_chk(names1)) objectAtIndex:i];
    NSString *name2 = [((IOSObjectArray *) nil_chk(names2)) objectAtIndex:i];
    if (![OrgOssPdfreporterEngineUtilObjectUtils equalsWithId:name1 withId:name2]) {
      return NO;
    }
    NSString *value1 = [((OrgOssPdfreporterEngineJRPropertiesMap *) nil_chk(p1)) getPropertyWithNSString:name1];
    NSString *value2 = [((OrgOssPdfreporterEngineJRPropertiesMap *) nil_chk(p1)) getPropertyWithNSString:name1];
    if (![OrgOssPdfreporterEngineUtilObjectUtils equalsWithId:value1 withId:value2]) {
      return NO;
    }
  }
  return YES;
}

- (id)init {
  return [super init];
}

@end
@implementation OrgOssPdfreporterEngineUtilObjectUtils_HashCode

@synthesize coefficient = coefficient_;
@synthesize hash_ = hash__;

- (id)init {
  if ((self = [super init])) {
    coefficient_ = 29;
    hash__ = 47;
  }
  return self;
}

- (void)addToHashWithInt:(int)value {
  hash__ = coefficient_ * hash__ + value;
}

- (void)addWithInt:(int)value {
  [self addToHashWithInt:value];
}

- (void)addWithBOOL:(BOOL)value {
  [self addToHashWithInt:[[JavaLangBoolean valueOfWithBOOL:value] hash]];
}

- (void)addWithId:(id)value {
  [self addToHashWithInt:value == nil ? 0 : [nil_chk(value) hash]];
}

- (void)addIdenticalWithId:(id)value {
  if ([value conformsToProtocol: @protocol(OrgOssPdfreporterEngineDeduplicable)]) {
    [self addToHashWithInt:[((id<OrgOssPdfreporterEngineDeduplicable>) value) getHashCode]];
  }
  else {
    [self addWithId:value];
  }
}

- (void)addIdentityWithId:(id)value {
  [self addToHashWithInt:[JavaLangSystem identityHashCodeWithId:value]];
}

- (void)addIdenticalWithNSObjectArray:(IOSObjectArray *)values {
  if (values == nil || (int) [((IOSObjectArray *) nil_chk(values)) count] == 0) {
    [self addToHashWithInt:0];
  }
  else {
    [self addToHashWithInt:(int) [((IOSObjectArray *) nil_chk(values)) count]];
    {
      IOSObjectArray *a__ = values;
      int n__ = (int) [((IOSObjectArray *) nil_chk(a__)) count];
      for (int i__ = 0; i__ < n__; i__++) {
        id object = [((IOSObjectArray *) nil_chk(a__)) objectAtIndex:i__];
        [self addIdenticalWithId:object];
      }
    }
  }
}

- (void)addIdenticalWithJavaUtilList:(id<JavaUtilList>)values {
  if (values == nil || [((id<JavaUtilList>) nil_chk(values)) isEmpty]) {
    [self addToHashWithInt:0];
  }
  else {
    [self addToHashWithInt:[((id<JavaUtilList>) nil_chk(values)) size]];
    {
      id<JavaUtilIterator> iter__ = [((id<JavaUtilList>) nil_chk(values)) iterator];
      while ([((id<JavaUtilIterator>) nil_chk(iter__)) hasNext]) {
        id object = [((id<JavaUtilIterator>) nil_chk(iter__)) next];
        [self addIdenticalWithId:object];
      }
    }
  }
}

- (void)addWithOrgOssPdfreporterEngineJRPropertiesMap:(OrgOssPdfreporterEngineJRPropertiesMap *)properties {
  if (properties == nil || ![((OrgOssPdfreporterEngineJRPropertiesMap *) nil_chk(properties)) hasProperties]) {
    [self addToHashWithInt:0];
  }
  else {
    IOSObjectArray *names = [((OrgOssPdfreporterEngineJRPropertiesMap *) nil_chk(properties)) getPropertyNames];
    {
      IOSObjectArray *a__ = names;
      int n__ = (int) [((IOSObjectArray *) nil_chk(a__)) count];
      for (int i__ = 0; i__ < n__; i__++) {
        NSString *prop = [((IOSObjectArray *) nil_chk(a__)) objectAtIndex:i__];
        [self addWithId:prop];
        [self addWithId:[((OrgOssPdfreporterEngineJRPropertiesMap *) nil_chk(properties)) getPropertyWithNSString:prop]];
      }
    }
  }
}

- (int)getHashCode {
  return hash__;
}

- (void)copyAllPropertiesTo:(id)copy {
  [super copyAllPropertiesTo:copy];
  OrgOssPdfreporterEngineUtilObjectUtils_HashCode *typedCopy = (OrgOssPdfreporterEngineUtilObjectUtils_HashCode *) copy;
  typedCopy.coefficient = coefficient_;
  typedCopy.hash_ = hash__;
}

@end
