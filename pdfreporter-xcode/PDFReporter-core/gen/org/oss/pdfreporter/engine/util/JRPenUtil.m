//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: pdfreporter-core/src/org/oss/pdfreporter/engine/util/JRPenUtil.java
//
//  Created by kendra on 9/27/13.
//

#include "IOSFloatArray.h"
#include "java/lang/Byte.h"
#include "java/lang/Float.h"
#include "org/oss/pdfreporter/engine/JRPen.h"
#include "org/oss/pdfreporter/engine/type/LineStyleEnum.h"
#include "org/oss/pdfreporter/engine/type/PenEnum.h"
#include "org/oss/pdfreporter/engine/util/JRPenUtil.h"
#include "org/oss/pdfreporter/geometry/IStroke.h"
#include "org/oss/pdfreporter/geometry/factory/IGeometryFactory.h"
#include "org/oss/pdfreporter/registry/ApiRegistry.h"

@implementation OrgOssPdfreporterEngineUtilJRPenUtil

+ (void)setLinePenFromPenWithJavaLangByte:(JavaLangByte *)pen
         withOrgOssPdfreporterEngineJRPen:(id<OrgOssPdfreporterEngineJRPen>)linePen {
  [OrgOssPdfreporterEngineUtilJRPenUtil setLinePenFromPenWithOrgOssPdfreporterEngineTypePenEnumEnum:[OrgOssPdfreporterEngineTypePenEnumEnum getByValueWithJavaLangByte:pen] withOrgOssPdfreporterEngineJRPen:linePen];
}

+ (void)setLinePenFromPenWithOrgOssPdfreporterEngineTypePenEnumEnum:(OrgOssPdfreporterEngineTypePenEnumEnum *)pen
                                   withOrgOssPdfreporterEngineJRPen:(id<OrgOssPdfreporterEngineJRPen>)linePen {
  if (pen != nil) {
    switch ([pen ordinal]) {
      case OrgOssPdfreporterEngineTypePenEnum_THIN:
      {
        [((id<OrgOssPdfreporterEngineJRPen>) nil_chk(linePen)) setLineWidthWithFloat:0.5f];
        [((id<OrgOssPdfreporterEngineJRPen>) nil_chk(linePen)) setLineStyleWithOrgOssPdfreporterEngineTypeLineStyleEnumEnum:[OrgOssPdfreporterEngineTypeLineStyleEnumEnum SOLID]];
        break;
      }
      case OrgOssPdfreporterEngineTypePenEnum_ONE_POINT:
      {
        [((id<OrgOssPdfreporterEngineJRPen>) nil_chk(linePen)) setLineWidthWithFloat:1.0f];
        [((id<OrgOssPdfreporterEngineJRPen>) nil_chk(linePen)) setLineStyleWithOrgOssPdfreporterEngineTypeLineStyleEnumEnum:[OrgOssPdfreporterEngineTypeLineStyleEnumEnum SOLID]];
        break;
      }
      case OrgOssPdfreporterEngineTypePenEnum_TWO_POINT:
      {
        [((id<OrgOssPdfreporterEngineJRPen>) nil_chk(linePen)) setLineWidthWithFloat:2.0f];
        [((id<OrgOssPdfreporterEngineJRPen>) nil_chk(linePen)) setLineStyleWithOrgOssPdfreporterEngineTypeLineStyleEnumEnum:[OrgOssPdfreporterEngineTypeLineStyleEnumEnum SOLID]];
        break;
      }
      case OrgOssPdfreporterEngineTypePenEnum_FOUR_POINT:
      {
        [((id<OrgOssPdfreporterEngineJRPen>) nil_chk(linePen)) setLineWidthWithFloat:4.0f];
        [((id<OrgOssPdfreporterEngineJRPen>) nil_chk(linePen)) setLineStyleWithOrgOssPdfreporterEngineTypeLineStyleEnumEnum:[OrgOssPdfreporterEngineTypeLineStyleEnumEnum SOLID]];
        break;
      }
      case OrgOssPdfreporterEngineTypePenEnum_DOTTED:
      {
        [((id<OrgOssPdfreporterEngineJRPen>) nil_chk(linePen)) setLineWidthWithFloat:1.0f];
        [((id<OrgOssPdfreporterEngineJRPen>) nil_chk(linePen)) setLineStyleWithOrgOssPdfreporterEngineTypeLineStyleEnumEnum:[OrgOssPdfreporterEngineTypeLineStyleEnumEnum DASHED]];
        break;
      }
      case OrgOssPdfreporterEngineTypePenEnum_NONE:
      {
        [((id<OrgOssPdfreporterEngineJRPen>) nil_chk(linePen)) setLineWidthWithFloat:0.0f];
        [((id<OrgOssPdfreporterEngineJRPen>) nil_chk(linePen)) setLineStyleWithOrgOssPdfreporterEngineTypeLineStyleEnumEnum:[OrgOssPdfreporterEngineTypeLineStyleEnumEnum SOLID]];
        break;
      }
    }
  }
}

+ (char)getPenFromLinePenWithOrgOssPdfreporterEngineJRPen:(id<OrgOssPdfreporterEngineJRPen>)linePen {
  float lineWidth = [((JavaLangFloat *) nil_chk([((id<OrgOssPdfreporterEngineJRPen>) nil_chk(linePen)) getLineWidth])) floatValue];
  if (lineWidth <= 0.0f) {
    return [((OrgOssPdfreporterEngineTypePenEnumEnum *) nil_chk([OrgOssPdfreporterEngineTypePenEnumEnum NONE])) getValue];
  }
  else if (0.0f < lineWidth && lineWidth < 1.0f) {
    return [((OrgOssPdfreporterEngineTypePenEnumEnum *) nil_chk([OrgOssPdfreporterEngineTypePenEnumEnum THIN])) getValue];
  }
  else if (1.0f <= lineWidth && lineWidth < 2.0f) {
    if ([((id<OrgOssPdfreporterEngineJRPen>) nil_chk(linePen)) getLineStyleValue] == [OrgOssPdfreporterEngineTypeLineStyleEnumEnum DASHED]) {
      return [((OrgOssPdfreporterEngineTypePenEnumEnum *) nil_chk([OrgOssPdfreporterEngineTypePenEnumEnum DOTTED])) getValue];
    }
    else {
      return [((OrgOssPdfreporterEngineTypePenEnumEnum *) nil_chk([OrgOssPdfreporterEngineTypePenEnumEnum ONE_POINT])) getValue];
    }
  }
  else if (2.0f <= lineWidth && lineWidth < 4.0f) {
    return [((OrgOssPdfreporterEngineTypePenEnumEnum *) nil_chk([OrgOssPdfreporterEngineTypePenEnumEnum TWO_POINT])) getValue];
  }
  return [((OrgOssPdfreporterEngineTypePenEnumEnum *) nil_chk([OrgOssPdfreporterEngineTypePenEnumEnum FOUR_POINT])) getValue];
}

+ (JavaLangByte *)getOwnPenFromLinePenWithOrgOssPdfreporterEngineJRPen:(id<OrgOssPdfreporterEngineJRPen>)linePen {
  if ([((id<OrgOssPdfreporterEngineJRPen>) nil_chk(linePen)) getOwnLineWidth] == nil && [((id<OrgOssPdfreporterEngineJRPen>) nil_chk(linePen)) getOwnLineStyleValue] == nil) {
    return nil;
  }
  return [[JavaLangByte alloc] initWithChar:[OrgOssPdfreporterEngineUtilJRPenUtil getPenFromLinePenWithOrgOssPdfreporterEngineJRPen:linePen]];
}

+ (id<OrgOssPdfreporterGeometryIStroke>)getStrokeWithOrgOssPdfreporterEngineJRPen:(id<OrgOssPdfreporterEngineJRPen>)pen
                                                                          withInt:(int)lineCap {
  float lineWidth = [((JavaLangFloat *) nil_chk([((id<OrgOssPdfreporterEngineJRPen>) nil_chk(pen)) getLineWidth])) floatValue];
  if (lineWidth > 0.0f) {
    OrgOssPdfreporterEngineTypeLineStyleEnumEnum *lineStyle = [((id<OrgOssPdfreporterEngineJRPen>) nil_chk(pen)) getLineStyleValue];
    switch ([lineStyle ordinal]) {
      case OrgOssPdfreporterEngineTypeLineStyleEnum_DOUBLE:
      {
        return [((id<OrgOssPdfreporterGeometryFactoryIGeometryFactory>) nil_chk([OrgOssPdfreporterRegistryApiRegistry getGeometryFactory])) newStrokeWithFloat:lineWidth / 3 withInt:lineCap withInt:OrgOssPdfreporterGeometryIStroke_JOIN_MITER];
      }
      case OrgOssPdfreporterEngineTypeLineStyleEnum_DOTTED:
      {
        switch (lineCap) {
          case OrgOssPdfreporterGeometryIStroke_CAP_SQUARE:
          {
            return [((id<OrgOssPdfreporterGeometryFactoryIGeometryFactory>) nil_chk([OrgOssPdfreporterRegistryApiRegistry getGeometryFactory])) newStrokeWithFloat:lineWidth withInt:lineCap withInt:OrgOssPdfreporterGeometryIStroke_JOIN_MITER withFloat:10.0f withFloatArray:[IOSFloatArray arrayWithFloats:(float[]){ 0, 2 * lineWidth } count:2] withFloat:0.0f];
          }
          case OrgOssPdfreporterGeometryIStroke_CAP_BUTT:
          {
            return [((id<OrgOssPdfreporterGeometryFactoryIGeometryFactory>) nil_chk([OrgOssPdfreporterRegistryApiRegistry getGeometryFactory])) newStrokeWithFloat:lineWidth withInt:lineCap withInt:OrgOssPdfreporterGeometryIStroke_JOIN_MITER withFloat:10.0f withFloatArray:[IOSFloatArray arrayWithFloats:(float[]){ lineWidth, lineWidth } count:2] withFloat:0.0f];
          }
        }
      }
      case OrgOssPdfreporterEngineTypeLineStyleEnum_DASHED:
      {
        switch (lineCap) {
          case OrgOssPdfreporterGeometryIStroke_CAP_SQUARE:
          {
            return [((id<OrgOssPdfreporterGeometryFactoryIGeometryFactory>) nil_chk([OrgOssPdfreporterRegistryApiRegistry getGeometryFactory])) newStrokeWithFloat:lineWidth withInt:lineCap withInt:OrgOssPdfreporterGeometryIStroke_JOIN_MITER withFloat:10.0f withFloatArray:[IOSFloatArray arrayWithFloats:(float[]){ 4 * lineWidth, 4 * lineWidth } count:2] withFloat:0.0f];
          }
          case OrgOssPdfreporterGeometryIStroke_CAP_BUTT:
          {
            return [((id<OrgOssPdfreporterGeometryFactoryIGeometryFactory>) nil_chk([OrgOssPdfreporterRegistryApiRegistry getGeometryFactory])) newStrokeWithFloat:lineWidth withInt:lineCap withInt:OrgOssPdfreporterGeometryIStroke_JOIN_MITER withFloat:10.0f withFloatArray:[IOSFloatArray arrayWithFloats:(float[]){ 5 * lineWidth, 3 * lineWidth } count:2] withFloat:0.0f];
          }
        }
      }
      case OrgOssPdfreporterEngineTypeLineStyleEnum_SOLID:
      default:
      {
        return [((id<OrgOssPdfreporterGeometryFactoryIGeometryFactory>) nil_chk([OrgOssPdfreporterRegistryApiRegistry getGeometryFactory])) newStrokeWithFloat:lineWidth withInt:lineCap withInt:OrgOssPdfreporterGeometryIStroke_JOIN_MITER];
      }
    }
  }
  return nil;
}

- (id)init {
  return [super init];
}

@end
