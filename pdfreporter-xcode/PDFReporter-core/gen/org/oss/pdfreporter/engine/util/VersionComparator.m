//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: pdfreporter-core/src/org/oss/pdfreporter/engine/util/VersionComparator.java
//
//  Created by kendra on 9/27/13.
//

#include "IOSObjectArray.h"
#include "java/lang/IllegalArgumentException.h"
#include "java/lang/Integer.h"
#include "java/lang/Math.h"
#include "java/lang/NumberFormatException.h"
#include "org/oss/pdfreporter/engine/util/VersionComparator.h"

@implementation OrgOssPdfreporterEngineUtilVersionComparator

- (int)compareWithId:(NSString *)currentVersion
              withId:(NSString *)oldVersion {
  if (oldVersion == nil) {
    @throw [[JavaLangIllegalArgumentException alloc] initWithNSString:@"Reference version can't be null."];
  }
  if (currentVersion == nil || [((NSString *) nil_chk(currentVersion)) hasPrefix:oldVersion]) {
    return 1;
  }
  else {
    IOSObjectArray *oldVersionChunks = [((NSString *) nil_chk(oldVersion)) split:@"\\."];
    IOSObjectArray *currentVersionChunks = [((NSString *) nil_chk(currentVersion)) split:@"\\."];
    int count = [JavaLangMath minWithInt:(int) [((IOSObjectArray *) nil_chk(oldVersionChunks)) count] withInt:(int) [((IOSObjectArray *) nil_chk(currentVersionChunks)) count]];
    for (int i = 0, old = 0, current = 0; i < count; i++) {
      @try {
        old = [[JavaLangInteger valueOfWithNSString:[((IOSObjectArray *) nil_chk(oldVersionChunks)) objectAtIndex:i]] intValue];
        current = [[JavaLangInteger valueOfWithNSString:[((IOSObjectArray *) nil_chk(currentVersionChunks)) objectAtIndex:i]] intValue];
        if (current != old) {
          return current - old;
        }
      }
      @catch (JavaLangNumberFormatException *e) {
        if ([((NSString *) nil_chk([((IOSObjectArray *) nil_chk(currentVersionChunks)) objectAtIndex:i])) compareToWithId:[((IOSObjectArray *) nil_chk(oldVersionChunks)) objectAtIndex:i]] != 0) {
          return [((NSString *) nil_chk([((IOSObjectArray *) nil_chk(currentVersionChunks)) objectAtIndex:i])) compareToWithId:[((IOSObjectArray *) nil_chk(oldVersionChunks)) objectAtIndex:i]];
        }
      }
    }
    return (int) [((IOSObjectArray *) nil_chk(currentVersionChunks)) count] - (int) [((IOSObjectArray *) nil_chk(oldVersionChunks)) count];
  }
}

- (id)init {
  return [super init];
}

@end
