//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: pdfreporter-core/src/org/oss/pdfreporter/engine/util/JRStyledTextParser.java
//
//  Created by kendra on 9/27/13.
//

#include "IOSClass.h"
#include "java/io/IOException.h"
#include "java/io/StringReader.h"
#include "java/lang/Boolean.h"
#include "java/lang/Float.h"
#include "java/lang/Integer.h"
#include "java/lang/StringBuffer.h"
#include "java/util/HashMap.h"
#include "java/util/HashSet.h"
#include "java/util/Iterator.h"
#include "java/util/List.h"
#include "java/util/Locale.h"
#include "java/util/Map.h"
#include "java/util/Set.h"
#include "java/util/StringTokenizer.h"
#include "org/oss/pdfreporter/engine/JRPrintHyperlink.h"
#include "org/oss/pdfreporter/engine/JRPrintHyperlinkParameter.h"
#include "org/oss/pdfreporter/engine/JRPrintHyperlinkParameters.h"
#include "org/oss/pdfreporter/engine/JRRuntimeException.h"
#include "org/oss/pdfreporter/engine/base/JRBasePrintHyperlink.h"
#include "org/oss/pdfreporter/engine/fonts/FontFamily.h"
#include "org/oss/pdfreporter/engine/type/HyperlinkTypeEnum.h"
#include "org/oss/pdfreporter/engine/util/JRColorUtil.h"
#include "org/oss/pdfreporter/engine/util/JRStringUtil.h"
#include "org/oss/pdfreporter/engine/util/JRStyledText.h"
#include "org/oss/pdfreporter/engine/util/JRStyledTextParser.h"
#include "org/oss/pdfreporter/engine/util/JRTextAttribute.h"
#include "org/oss/pdfreporter/engine/util/JRValueStringUtils.h"
#include "org/oss/pdfreporter/extensions/ExtensionsEnvironment.h"
#include "org/oss/pdfreporter/extensions/ExtensionsRegistry.h"
#include "org/oss/pdfreporter/font/IFontManager.h"
#include "org/oss/pdfreporter/font/factory/IFontFactory.h"
#include "org/oss/pdfreporter/font/text/TextAttribute.h"
#include "org/oss/pdfreporter/geometry/IColor.h"
#include "org/oss/pdfreporter/registry/ApiRegistry.h"
#include "org/oss/pdfreporter/registry/IRegistry.h"
#include "org/oss/pdfreporter/uses/java/awt/text/AttributedString.h"
#include "org/oss/pdfreporter/uses/java/awt/text/IAttributedCharacterIterator.h"
#include "org/oss/pdfreporter/uses/org/w3c/dom/Document.h"
#include "org/oss/pdfreporter/uses/org/w3c/dom/Element.h"
#include "org/oss/pdfreporter/uses/org/w3c/dom/NamedNodeMap.h"
#include "org/oss/pdfreporter/uses/org/w3c/dom/Node.h"
#include "org/oss/pdfreporter/uses/org/w3c/dom/NodeList.h"
#include "org/oss/pdfreporter/xml/parsers/IDocumentBuilder.h"
#include "org/oss/pdfreporter/xml/parsers/IDocumentBuilderFactory.h"
#include "org/oss/pdfreporter/xml/parsers/IInputSource.h"
#include "org/oss/pdfreporter/xml/parsers/ParserConfigurationException.h"
#include "org/oss/pdfreporter/xml/parsers/XMLParseException.h"
#include "org/oss/pdfreporter/xml/parsers/factory/IXmlParserFactory.h"

@implementation OrgOssPdfreporterEngineUtilJRStyledTextParser

static id<JavaUtilSet> OrgOssPdfreporterEngineUtilJRStyledTextParser_AVAILABLE_FONT_FACE_NAMES_;
static OrgOssPdfreporterEngineUtilJRStyledTextParser * OrgOssPdfreporterEngineUtilJRStyledTextParser_instance_;
static NSString * OrgOssPdfreporterEngineUtilJRStyledTextParser_ROOT_START_ = @"<st>";
static NSString * OrgOssPdfreporterEngineUtilJRStyledTextParser_ROOT_END_ = @"</st>";
static NSString * OrgOssPdfreporterEngineUtilJRStyledTextParser_NODE_style_ = @"style";
static NSString * OrgOssPdfreporterEngineUtilJRStyledTextParser_NODE_bold_ = @"b";
static NSString * OrgOssPdfreporterEngineUtilJRStyledTextParser_NODE_italic_ = @"i";
static NSString * OrgOssPdfreporterEngineUtilJRStyledTextParser_NODE_underline_ = @"u";
static NSString * OrgOssPdfreporterEngineUtilJRStyledTextParser_NODE_sup_ = @"sup";
static NSString * OrgOssPdfreporterEngineUtilJRStyledTextParser_NODE_sub_ = @"sub";
static NSString * OrgOssPdfreporterEngineUtilJRStyledTextParser_NODE_font_ = @"font";
static NSString * OrgOssPdfreporterEngineUtilJRStyledTextParser_NODE_br_ = @"br";
static NSString * OrgOssPdfreporterEngineUtilJRStyledTextParser_NODE_li_ = @"li";
static NSString * OrgOssPdfreporterEngineUtilJRStyledTextParser_NODE_a_ = @"a";
static NSString * OrgOssPdfreporterEngineUtilJRStyledTextParser_NODE_param_ = @"param";
static NSString * OrgOssPdfreporterEngineUtilJRStyledTextParser_ATTRIBUTE_fontName_ = @"fontName";
static NSString * OrgOssPdfreporterEngineUtilJRStyledTextParser_ATTRIBUTE_fontFace_ = @"face";
static NSString * OrgOssPdfreporterEngineUtilJRStyledTextParser_ATTRIBUTE_color_ = @"color";
static NSString * OrgOssPdfreporterEngineUtilJRStyledTextParser_ATTRIBUTE_size_ = @"size";
static NSString * OrgOssPdfreporterEngineUtilJRStyledTextParser_ATTRIBUTE_isBold_ = @"isBold";
static NSString * OrgOssPdfreporterEngineUtilJRStyledTextParser_ATTRIBUTE_isItalic_ = @"isItalic";
static NSString * OrgOssPdfreporterEngineUtilJRStyledTextParser_ATTRIBUTE_isUnderline_ = @"isUnderline";
static NSString * OrgOssPdfreporterEngineUtilJRStyledTextParser_ATTRIBUTE_isStrikeThrough_ = @"isStrikeThrough";
static NSString * OrgOssPdfreporterEngineUtilJRStyledTextParser_ATTRIBUTE_forecolor_ = @"forecolor";
static NSString * OrgOssPdfreporterEngineUtilJRStyledTextParser_ATTRIBUTE_backcolor_ = @"backcolor";
static NSString * OrgOssPdfreporterEngineUtilJRStyledTextParser_ATTRIBUTE_pdfFontName_ = @"pdfFontName";
static NSString * OrgOssPdfreporterEngineUtilJRStyledTextParser_ATTRIBUTE_pdfEncoding_ = @"pdfEncoding";
static NSString * OrgOssPdfreporterEngineUtilJRStyledTextParser_ATTRIBUTE_isPdfEmbedded_ = @"isPdfEmbedded";
static NSString * OrgOssPdfreporterEngineUtilJRStyledTextParser_ATTRIBUTE_type_ = @"type";
static NSString * OrgOssPdfreporterEngineUtilJRStyledTextParser_ATTRIBUTE_href_ = @"href";
static NSString * OrgOssPdfreporterEngineUtilJRStyledTextParser_ATTRIBUTE_target_ = @"target";
static NSString * OrgOssPdfreporterEngineUtilJRStyledTextParser_ATTRIBUTE_name_ = @"name";
static NSString * OrgOssPdfreporterEngineUtilJRStyledTextParser_ATTRIBUTE_valueClass_ = @"valueClass";
static NSString * OrgOssPdfreporterEngineUtilJRStyledTextParser_SPACE_ = @" ";
static NSString * OrgOssPdfreporterEngineUtilJRStyledTextParser_EQUAL_QUOTE_ = @"=\"";
static NSString * OrgOssPdfreporterEngineUtilJRStyledTextParser_QUOTE_ = @"\"";
static NSString * OrgOssPdfreporterEngineUtilJRStyledTextParser_SHARP_ = @"#";
static NSString * OrgOssPdfreporterEngineUtilJRStyledTextParser_LESS_ = @"<";
static NSString * OrgOssPdfreporterEngineUtilJRStyledTextParser_LESS_SLASH_ = @"</";
static NSString * OrgOssPdfreporterEngineUtilJRStyledTextParser_GREATER_ = @">";

@synthesize locale = locale_;
@synthesize documentBuilder = documentBuilder_;
@synthesize hyperlink = hyperlink_;

+ (id<JavaUtilSet>)AVAILABLE_FONT_FACE_NAMES {
  return OrgOssPdfreporterEngineUtilJRStyledTextParser_AVAILABLE_FONT_FACE_NAMES_;
}

+ (OrgOssPdfreporterEngineUtilJRStyledTextParser *)instance {
  return OrgOssPdfreporterEngineUtilJRStyledTextParser_instance_;
}

+ (NSString *)ROOT_START {
  return OrgOssPdfreporterEngineUtilJRStyledTextParser_ROOT_START_;
}

+ (NSString *)ROOT_END {
  return OrgOssPdfreporterEngineUtilJRStyledTextParser_ROOT_END_;
}

+ (NSString *)NODE_style {
  return OrgOssPdfreporterEngineUtilJRStyledTextParser_NODE_style_;
}

+ (NSString *)NODE_bold {
  return OrgOssPdfreporterEngineUtilJRStyledTextParser_NODE_bold_;
}

+ (NSString *)NODE_italic {
  return OrgOssPdfreporterEngineUtilJRStyledTextParser_NODE_italic_;
}

+ (NSString *)NODE_underline {
  return OrgOssPdfreporterEngineUtilJRStyledTextParser_NODE_underline_;
}

+ (NSString *)NODE_sup {
  return OrgOssPdfreporterEngineUtilJRStyledTextParser_NODE_sup_;
}

+ (NSString *)NODE_sub {
  return OrgOssPdfreporterEngineUtilJRStyledTextParser_NODE_sub_;
}

+ (NSString *)NODE_font {
  return OrgOssPdfreporterEngineUtilJRStyledTextParser_NODE_font_;
}

+ (NSString *)NODE_br {
  return OrgOssPdfreporterEngineUtilJRStyledTextParser_NODE_br_;
}

+ (NSString *)NODE_li {
  return OrgOssPdfreporterEngineUtilJRStyledTextParser_NODE_li_;
}

+ (NSString *)NODE_a {
  return OrgOssPdfreporterEngineUtilJRStyledTextParser_NODE_a_;
}

+ (NSString *)NODE_param {
  return OrgOssPdfreporterEngineUtilJRStyledTextParser_NODE_param_;
}

+ (NSString *)ATTRIBUTE_fontName {
  return OrgOssPdfreporterEngineUtilJRStyledTextParser_ATTRIBUTE_fontName_;
}

+ (NSString *)ATTRIBUTE_fontFace {
  return OrgOssPdfreporterEngineUtilJRStyledTextParser_ATTRIBUTE_fontFace_;
}

+ (NSString *)ATTRIBUTE_color {
  return OrgOssPdfreporterEngineUtilJRStyledTextParser_ATTRIBUTE_color_;
}

+ (NSString *)ATTRIBUTE_size {
  return OrgOssPdfreporterEngineUtilJRStyledTextParser_ATTRIBUTE_size_;
}

+ (NSString *)ATTRIBUTE_isBold {
  return OrgOssPdfreporterEngineUtilJRStyledTextParser_ATTRIBUTE_isBold_;
}

+ (NSString *)ATTRIBUTE_isItalic {
  return OrgOssPdfreporterEngineUtilJRStyledTextParser_ATTRIBUTE_isItalic_;
}

+ (NSString *)ATTRIBUTE_isUnderline {
  return OrgOssPdfreporterEngineUtilJRStyledTextParser_ATTRIBUTE_isUnderline_;
}

+ (NSString *)ATTRIBUTE_isStrikeThrough {
  return OrgOssPdfreporterEngineUtilJRStyledTextParser_ATTRIBUTE_isStrikeThrough_;
}

+ (NSString *)ATTRIBUTE_forecolor {
  return OrgOssPdfreporterEngineUtilJRStyledTextParser_ATTRIBUTE_forecolor_;
}

+ (NSString *)ATTRIBUTE_backcolor {
  return OrgOssPdfreporterEngineUtilJRStyledTextParser_ATTRIBUTE_backcolor_;
}

+ (NSString *)ATTRIBUTE_pdfFontName {
  return OrgOssPdfreporterEngineUtilJRStyledTextParser_ATTRIBUTE_pdfFontName_;
}

+ (NSString *)ATTRIBUTE_pdfEncoding {
  return OrgOssPdfreporterEngineUtilJRStyledTextParser_ATTRIBUTE_pdfEncoding_;
}

+ (NSString *)ATTRIBUTE_isPdfEmbedded {
  return OrgOssPdfreporterEngineUtilJRStyledTextParser_ATTRIBUTE_isPdfEmbedded_;
}

+ (NSString *)ATTRIBUTE_type {
  return OrgOssPdfreporterEngineUtilJRStyledTextParser_ATTRIBUTE_type_;
}

+ (NSString *)ATTRIBUTE_href {
  return OrgOssPdfreporterEngineUtilJRStyledTextParser_ATTRIBUTE_href_;
}

+ (NSString *)ATTRIBUTE_target {
  return OrgOssPdfreporterEngineUtilJRStyledTextParser_ATTRIBUTE_target_;
}

+ (NSString *)ATTRIBUTE_name {
  return OrgOssPdfreporterEngineUtilJRStyledTextParser_ATTRIBUTE_name_;
}

+ (NSString *)ATTRIBUTE_valueClass {
  return OrgOssPdfreporterEngineUtilJRStyledTextParser_ATTRIBUTE_valueClass_;
}

+ (NSString *)SPACE {
  return OrgOssPdfreporterEngineUtilJRStyledTextParser_SPACE_;
}

+ (NSString *)EQUAL_QUOTE {
  return OrgOssPdfreporterEngineUtilJRStyledTextParser_EQUAL_QUOTE_;
}

+ (NSString *)QUOTE {
  return OrgOssPdfreporterEngineUtilJRStyledTextParser_QUOTE_;
}

+ (NSString *)SHARP {
  return OrgOssPdfreporterEngineUtilJRStyledTextParser_SHARP_;
}

+ (NSString *)LESS {
  return OrgOssPdfreporterEngineUtilJRStyledTextParser_LESS_;
}

+ (NSString *)LESS_SLASH {
  return OrgOssPdfreporterEngineUtilJRStyledTextParser_LESS_SLASH_;
}

+ (NSString *)GREATER {
  return OrgOssPdfreporterEngineUtilJRStyledTextParser_GREATER_;
}

+ (OrgOssPdfreporterEngineUtilJRStyledTextParser *)getInstance {
  return OrgOssPdfreporterEngineUtilJRStyledTextParser_instance_;
}

+ (void)setLocaleWithJavaUtilLocale:(JavaUtilLocale *)locale {
  ((OrgOssPdfreporterEngineUtilJRStyledTextParser *) nil_chk(OrgOssPdfreporterEngineUtilJRStyledTextParser_instance_)).locale = locale;
}

+ (JavaUtilLocale *)getLocale {
  return ((OrgOssPdfreporterEngineUtilJRStyledTextParser *) nil_chk(OrgOssPdfreporterEngineUtilJRStyledTextParser_instance_)).locale;
}

- (id)init {
  if ((self = [super init])) {
    locale_ = nil;
    @try {
      id<OrgOssPdfreporterXmlParsersIDocumentBuilderFactory> factory = [((id<OrgOssPdfreporterXmlParsersFactoryIXmlParserFactory>) nil_chk([OrgOssPdfreporterRegistryIRegistry getIXmlParserFactory])) newDocumentBuilderFactory];
      documentBuilder_ = [((id<OrgOssPdfreporterXmlParsersIDocumentBuilderFactory>) nil_chk(factory)) newDocumentBuilder];
      [((id<OrgOssPdfreporterXmlParsersIDocumentBuilder>) nil_chk(documentBuilder_)) setErrorHandlerWithOrgOssPdfreporterXmlParsersXMLErrorHandler:self];
    }
    @catch (OrgOssPdfreporterXmlParsersParserConfigurationException *e) {
      @throw [[OrgOssPdfreporterEngineJRRuntimeException alloc] initWithJavaLangThrowable:e];
    }
  }
  return self;
}

- (OrgOssPdfreporterEngineUtilJRStyledText *)parseWithJavaUtilMap:(id<JavaUtilMap>)attributes
                                                     withNSString:(NSString *)text
                                               withJavaUtilLocale:(JavaUtilLocale *)locale {
  OrgOssPdfreporterEngineUtilJRStyledText *styledText = [[OrgOssPdfreporterEngineUtilJRStyledText alloc] initWithJavaUtilLocale:locale];
  id<OrgOssPdfreporterUsesOrgW3cDomDocument> document = nil;
  @try {
    document = [((id<OrgOssPdfreporterXmlParsersIDocumentBuilder>) nil_chk(documentBuilder_)) parseWithOrgOssPdfreporterXmlParsersIInputSource:[((id<OrgOssPdfreporterXmlParsersFactoryIXmlParserFactory>) nil_chk([OrgOssPdfreporterRegistryIRegistry getIXmlParserFactory])) newInputSourceWithJavaIoReader:[[JavaIoStringReader alloc] initWithNSString:[NSString stringWithFormat:@"<st>%@</st>", text]]]];
  }
  @catch (JavaIoIOException *e) {
    @throw [[OrgOssPdfreporterEngineJRRuntimeException alloc] initWithJavaLangThrowable:e];
  }
  hyperlink_ = nil;
  [self parseStyleWithOrgOssPdfreporterEngineUtilJRStyledText:styledText withOrgOssPdfreporterUsesOrgW3cDomNode:[((id<OrgOssPdfreporterUsesOrgW3cDomDocument>) nil_chk(document)) getDocumentElement]];
  [((OrgOssPdfreporterEngineUtilJRStyledText *) nil_chk(styledText)) setGlobalAttributesWithJavaUtilMap:attributes];
  return styledText;
}

- (OrgOssPdfreporterEngineUtilJRStyledText *)getStyledTextWithJavaUtilMap:(id<JavaUtilMap>)parentAttributes
                                                             withNSString:(NSString *)text
                                                                 withBOOL:(BOOL)isStyledText
                                                       withJavaUtilLocale:(JavaUtilLocale *)locale {
  OrgOssPdfreporterEngineUtilJRStyledText *styledText = nil;
  if (isStyledText) {
    @try {
      styledText = [self parseWithJavaUtilMap:parentAttributes withNSString:text withJavaUtilLocale:locale];
    }
    @catch (OrgOssPdfreporterXmlParsersXMLParseException *e) {
    }
  }
  if (styledText == nil) {
    styledText = [[OrgOssPdfreporterEngineUtilJRStyledText alloc] initWithJavaUtilLocale:locale];
    [styledText appendWithNSString:text];
    [styledText setGlobalAttributesWithJavaUtilMap:parentAttributes];
  }
  return styledText;
}

- (NSString *)writeWithOrgOssPdfreporterEngineUtilJRStyledText:(OrgOssPdfreporterEngineUtilJRStyledText *)styledText {
  return [self writeWithJavaUtilMap:[((OrgOssPdfreporterEngineUtilJRStyledText *) nil_chk(styledText)) getGlobalAttributes] withOrgOssPdfreporterUsesJavaAwtTextIAttributedCharacterIterator:[((OrgOssPdfreporterUsesJavaAwtTextAttributedString *) nil_chk([((OrgOssPdfreporterEngineUtilJRStyledText *) nil_chk(styledText)) getAttributedString])) getIterator] withNSString:[((OrgOssPdfreporterEngineUtilJRStyledText *) nil_chk(styledText)) getText]];
}

- (NSString *)writeWithJavaUtilMap:(id<JavaUtilMap>)parentAttrs
withOrgOssPdfreporterUsesJavaAwtTextIAttributedCharacterIterator:(id<OrgOssPdfreporterUsesJavaAwtTextIAttributedCharacterIterator>)iterator
                      withNSString:(NSString *)text {
  JavaLangStringBuffer *sbuffer = [[JavaLangStringBuffer alloc] init];
  int runLimit = 0;
  while (runLimit < [((id<OrgOssPdfreporterUsesJavaAwtTextIAttributedCharacterIterator>) nil_chk(iterator)) getEndIndex] && (runLimit = [((id<OrgOssPdfreporterUsesJavaAwtTextIAttributedCharacterIterator>) nil_chk(iterator)) getRunLimit]) <= [((id<OrgOssPdfreporterUsesJavaAwtTextIAttributedCharacterIterator>) nil_chk(iterator)) getEndIndex]) {
    NSString *chunk = [((NSString *) nil_chk(text)) substring:[((id<OrgOssPdfreporterUsesJavaAwtTextIAttributedCharacterIterator>) nil_chk(iterator)) getIndex] endIndex:runLimit];
    id<JavaUtilMap> attrs = [((id<OrgOssPdfreporterUsesJavaAwtTextIAttributedCharacterIterator>) nil_chk(iterator)) getAttributes];
    JavaLangStringBuffer *styleBuffer = [self writeStyleAttributesWithJavaUtilMap:parentAttrs withJavaUtilMap:attrs];
    if ([((JavaLangStringBuffer *) nil_chk(styleBuffer)) sequenceLength] > 0) {
      (void) [((JavaLangStringBuffer *) nil_chk(sbuffer)) appendWithNSString:OrgOssPdfreporterEngineUtilJRStyledTextParser_LESS_];
      (void) [((JavaLangStringBuffer *) nil_chk(sbuffer)) appendWithNSString:OrgOssPdfreporterEngineUtilJRStyledTextParser_NODE_style_];
      (void) [((JavaLangStringBuffer *) nil_chk(sbuffer)) appendWithNSString:[((JavaLangStringBuffer *) nil_chk(styleBuffer)) description]];
      (void) [((JavaLangStringBuffer *) nil_chk(sbuffer)) appendWithNSString:OrgOssPdfreporterEngineUtilJRStyledTextParser_GREATER_];
      [self writeChunkWithJavaLangStringBuffer:sbuffer withJavaUtilMap:parentAttrs withJavaUtilMap:attrs withNSString:chunk];
      (void) [((JavaLangStringBuffer *) nil_chk(sbuffer)) appendWithNSString:OrgOssPdfreporterEngineUtilJRStyledTextParser_LESS_SLASH_];
      (void) [((JavaLangStringBuffer *) nil_chk(sbuffer)) appendWithNSString:OrgOssPdfreporterEngineUtilJRStyledTextParser_NODE_style_];
      (void) [((JavaLangStringBuffer *) nil_chk(sbuffer)) appendWithNSString:OrgOssPdfreporterEngineUtilJRStyledTextParser_GREATER_];
    }
    else {
      [self writeChunkWithJavaLangStringBuffer:sbuffer withJavaUtilMap:parentAttrs withJavaUtilMap:attrs withNSString:chunk];
    }
    [((id<OrgOssPdfreporterUsesJavaAwtTextIAttributedCharacterIterator>) nil_chk(iterator)) setIndexWithInt:runLimit];
  }
  return [((JavaLangStringBuffer *) nil_chk(sbuffer)) description];
}

- (NSString *)writeWithOrgOssPdfreporterEngineUtilJRStyledText:(OrgOssPdfreporterEngineUtilJRStyledText *)styledText
                                                       withInt:(int)startIndex
                                                       withInt:(int)endIndex {
  id<OrgOssPdfreporterUsesJavaAwtTextIAttributedCharacterIterator> subIterator = [((OrgOssPdfreporterUsesJavaAwtTextAttributedString *) [[OrgOssPdfreporterUsesJavaAwtTextAttributedString alloc] initWithOrgOssPdfreporterUsesJavaAwtTextIAttributedCharacterIterator:[((OrgOssPdfreporterUsesJavaAwtTextAttributedString *) nil_chk([((OrgOssPdfreporterEngineUtilJRStyledText *) nil_chk(styledText)) getAttributedString])) getIterator] withInt:startIndex withInt:endIndex]) getIterator];
  NSString *subText = [((NSString *) nil_chk([((OrgOssPdfreporterEngineUtilJRStyledText *) nil_chk(styledText)) getText])) substring:startIndex endIndex:endIndex];
  return [self writeWithJavaUtilMap:[((OrgOssPdfreporterEngineUtilJRStyledText *) nil_chk(styledText)) getGlobalAttributes] withOrgOssPdfreporterUsesJavaAwtTextIAttributedCharacterIterator:subIterator withNSString:subText];
}

- (void)writeChunkWithJavaLangStringBuffer:(JavaLangStringBuffer *)sbuffer
                           withJavaUtilMap:(id<JavaUtilMap>)parentAttrs
                           withJavaUtilMap:(id<JavaUtilMap>)attrs
                              withNSString:(NSString *)chunk {
  id value = [((id<JavaUtilMap>) nil_chk(attrs)) getWithId:[OrgOssPdfreporterFontTextTextAttribute SUPERSCRIPT]];
  id oldValue = [((id<JavaUtilMap>) nil_chk(parentAttrs)) getWithId:[OrgOssPdfreporterFontTextTextAttribute SUPERSCRIPT]];
  BOOL isSuper = NO;
  BOOL isSub = NO;
  if (value != nil && ![nil_chk(value) isEqual:oldValue]) {
    isSuper = [((JavaLangInteger *) nil_chk([OrgOssPdfreporterFontTextTextAttribute SUPERSCRIPT_SUPER])) isEqual:value];
    isSub = [((JavaLangInteger *) nil_chk([OrgOssPdfreporterFontTextTextAttribute SUPERSCRIPT_SUB])) isEqual:value];
  }
  NSString *scriptNode = isSuper ? OrgOssPdfreporterEngineUtilJRStyledTextParser_NODE_sup_ : OrgOssPdfreporterEngineUtilJRStyledTextParser_NODE_sub_;
  if (isSuper || isSub) {
    (void) [((JavaLangStringBuffer *) nil_chk(sbuffer)) appendWithNSString:OrgOssPdfreporterEngineUtilJRStyledTextParser_LESS_];
    (void) [((JavaLangStringBuffer *) nil_chk(sbuffer)) appendWithNSString:scriptNode];
    (void) [((JavaLangStringBuffer *) nil_chk(sbuffer)) appendWithNSString:OrgOssPdfreporterEngineUtilJRStyledTextParser_GREATER_];
  }
  id<OrgOssPdfreporterEngineJRPrintHyperlink> hlink = (id<OrgOssPdfreporterEngineJRPrintHyperlink>) [((id<JavaUtilMap>) nil_chk(attrs)) getWithId:[OrgOssPdfreporterEngineUtilJRTextAttribute HYPERLINK]];
  if (hlink != nil) {
    (void) [((JavaLangStringBuffer *) nil_chk(sbuffer)) appendWithNSString:OrgOssPdfreporterEngineUtilJRStyledTextParser_LESS_];
    (void) [((JavaLangStringBuffer *) nil_chk(sbuffer)) appendWithNSString:OrgOssPdfreporterEngineUtilJRStyledTextParser_NODE_a_];
    NSString *href = [hlink getHyperlinkReference];
    if (href != nil && [((NSString *) nil_chk([((NSString *) nil_chk(href)) trim])) length] > 0) {
      (void) [((JavaLangStringBuffer *) nil_chk(sbuffer)) appendWithNSString:OrgOssPdfreporterEngineUtilJRStyledTextParser_SPACE_];
      (void) [((JavaLangStringBuffer *) nil_chk(sbuffer)) appendWithNSString:OrgOssPdfreporterEngineUtilJRStyledTextParser_ATTRIBUTE_href_];
      (void) [((JavaLangStringBuffer *) nil_chk(sbuffer)) appendWithNSString:OrgOssPdfreporterEngineUtilJRStyledTextParser_EQUAL_QUOTE_];
      (void) [((JavaLangStringBuffer *) nil_chk(sbuffer)) appendWithNSString:[OrgOssPdfreporterEngineUtilJRStringUtil htmlEncodeWithNSString:href]];
      (void) [((JavaLangStringBuffer *) nil_chk(sbuffer)) appendWithNSString:OrgOssPdfreporterEngineUtilJRStyledTextParser_QUOTE_];
    }
    NSString *type = [hlink getLinkType];
    if (type != nil && [((NSString *) nil_chk([((NSString *) nil_chk(type)) trim])) length] > 0) {
      (void) [((JavaLangStringBuffer *) nil_chk(sbuffer)) appendWithNSString:OrgOssPdfreporterEngineUtilJRStyledTextParser_SPACE_];
      (void) [((JavaLangStringBuffer *) nil_chk(sbuffer)) appendWithNSString:OrgOssPdfreporterEngineUtilJRStyledTextParser_ATTRIBUTE_type_];
      (void) [((JavaLangStringBuffer *) nil_chk(sbuffer)) appendWithNSString:OrgOssPdfreporterEngineUtilJRStyledTextParser_EQUAL_QUOTE_];
      (void) [((JavaLangStringBuffer *) nil_chk(sbuffer)) appendWithNSString:type];
      (void) [((JavaLangStringBuffer *) nil_chk(sbuffer)) appendWithNSString:OrgOssPdfreporterEngineUtilJRStyledTextParser_QUOTE_];
    }
    NSString *target = [hlink getLinkTarget];
    if (target != nil && [((NSString *) nil_chk([((NSString *) nil_chk(target)) trim])) length] > 0) {
      (void) [((JavaLangStringBuffer *) nil_chk(sbuffer)) appendWithNSString:OrgOssPdfreporterEngineUtilJRStyledTextParser_SPACE_];
      (void) [((JavaLangStringBuffer *) nil_chk(sbuffer)) appendWithNSString:OrgOssPdfreporterEngineUtilJRStyledTextParser_ATTRIBUTE_target_];
      (void) [((JavaLangStringBuffer *) nil_chk(sbuffer)) appendWithNSString:OrgOssPdfreporterEngineUtilJRStyledTextParser_EQUAL_QUOTE_];
      (void) [((JavaLangStringBuffer *) nil_chk(sbuffer)) appendWithNSString:target];
      (void) [((JavaLangStringBuffer *) nil_chk(sbuffer)) appendWithNSString:OrgOssPdfreporterEngineUtilJRStyledTextParser_QUOTE_];
    }
    (void) [((JavaLangStringBuffer *) nil_chk(sbuffer)) appendWithNSString:OrgOssPdfreporterEngineUtilJRStyledTextParser_GREATER_];
    OrgOssPdfreporterEngineJRPrintHyperlinkParameters *parameters = [hlink getHyperlinkParameters];
    if (parameters != nil && [((OrgOssPdfreporterEngineJRPrintHyperlinkParameters *) nil_chk(parameters)) getParameters] != nil) {
      {
        id<JavaUtilIterator> iter__ = [((id<JavaUtilList>) nil_chk([((OrgOssPdfreporterEngineJRPrintHyperlinkParameters *) nil_chk(parameters)) getParameters])) iterator];
        while ([((id<JavaUtilIterator>) nil_chk(iter__)) hasNext]) {
          OrgOssPdfreporterEngineJRPrintHyperlinkParameter *parameter = [((id<JavaUtilIterator>) nil_chk(iter__)) next];
          (void) [((JavaLangStringBuffer *) nil_chk(sbuffer)) appendWithNSString:OrgOssPdfreporterEngineUtilJRStyledTextParser_LESS_];
          (void) [((JavaLangStringBuffer *) nil_chk(sbuffer)) appendWithNSString:OrgOssPdfreporterEngineUtilJRStyledTextParser_NODE_param_];
          (void) [((JavaLangStringBuffer *) nil_chk(sbuffer)) appendWithNSString:OrgOssPdfreporterEngineUtilJRStyledTextParser_SPACE_];
          (void) [((JavaLangStringBuffer *) nil_chk(sbuffer)) appendWithNSString:OrgOssPdfreporterEngineUtilJRStyledTextParser_ATTRIBUTE_name_];
          (void) [((JavaLangStringBuffer *) nil_chk(sbuffer)) appendWithNSString:OrgOssPdfreporterEngineUtilJRStyledTextParser_EQUAL_QUOTE_];
          (void) [((JavaLangStringBuffer *) nil_chk(sbuffer)) appendWithNSString:[((OrgOssPdfreporterEngineJRPrintHyperlinkParameter *) nil_chk(parameter)) getName]];
          (void) [((JavaLangStringBuffer *) nil_chk(sbuffer)) appendWithNSString:OrgOssPdfreporterEngineUtilJRStyledTextParser_QUOTE_];
          (void) [((JavaLangStringBuffer *) nil_chk(sbuffer)) appendWithNSString:OrgOssPdfreporterEngineUtilJRStyledTextParser_GREATER_];
          if ([((OrgOssPdfreporterEngineJRPrintHyperlinkParameter *) nil_chk(parameter)) getValue] != nil) {
            NSString *strValue = [OrgOssPdfreporterEngineUtilJRValueStringUtils serializeWithNSString:[((OrgOssPdfreporterEngineJRPrintHyperlinkParameter *) nil_chk(parameter)) getValueClass] withId:[((OrgOssPdfreporterEngineJRPrintHyperlinkParameter *) nil_chk(parameter)) getValue]];
            (void) [((JavaLangStringBuffer *) nil_chk(sbuffer)) appendWithNSString:[OrgOssPdfreporterEngineUtilJRStringUtil xmlEncodeWithNSString:strValue]];
          }
          (void) [((JavaLangStringBuffer *) nil_chk(sbuffer)) appendWithNSString:OrgOssPdfreporterEngineUtilJRStyledTextParser_LESS_SLASH_];
          (void) [((JavaLangStringBuffer *) nil_chk(sbuffer)) appendWithNSString:OrgOssPdfreporterEngineUtilJRStyledTextParser_NODE_param_];
          (void) [((JavaLangStringBuffer *) nil_chk(sbuffer)) appendWithNSString:OrgOssPdfreporterEngineUtilJRStyledTextParser_GREATER_];
        }
      }
    }
  }
  (void) [((JavaLangStringBuffer *) nil_chk(sbuffer)) appendWithNSString:[OrgOssPdfreporterEngineUtilJRStringUtil xmlEncodeWithNSString:chunk]];
  if (hlink != nil) {
    (void) [((JavaLangStringBuffer *) nil_chk(sbuffer)) appendWithNSString:OrgOssPdfreporterEngineUtilJRStyledTextParser_LESS_SLASH_];
    (void) [((JavaLangStringBuffer *) nil_chk(sbuffer)) appendWithNSString:OrgOssPdfreporterEngineUtilJRStyledTextParser_NODE_a_];
    (void) [((JavaLangStringBuffer *) nil_chk(sbuffer)) appendWithNSString:OrgOssPdfreporterEngineUtilJRStyledTextParser_GREATER_];
  }
  if (isSuper || isSub) {
    (void) [((JavaLangStringBuffer *) nil_chk(sbuffer)) appendWithNSString:OrgOssPdfreporterEngineUtilJRStyledTextParser_LESS_SLASH_];
    (void) [((JavaLangStringBuffer *) nil_chk(sbuffer)) appendWithNSString:scriptNode];
    (void) [((JavaLangStringBuffer *) nil_chk(sbuffer)) appendWithNSString:OrgOssPdfreporterEngineUtilJRStyledTextParser_GREATER_];
  }
}

- (void)parseStyleWithOrgOssPdfreporterEngineUtilJRStyledText:(OrgOssPdfreporterEngineUtilJRStyledText *)styledText
                       withOrgOssPdfreporterUsesOrgW3cDomNode:(id<OrgOssPdfreporterUsesOrgW3cDomNode>)parentNode {
  id<OrgOssPdfreporterUsesOrgW3cDomNodeList> nodeList = [((id<OrgOssPdfreporterUsesOrgW3cDomNode>) nil_chk(parentNode)) getChildNodes];
  for (int i = 0; i < [((id<OrgOssPdfreporterUsesOrgW3cDomNodeList>) nil_chk(nodeList)) getLength]; i++) {
    id<OrgOssPdfreporterUsesOrgW3cDomNode> node = [((id<OrgOssPdfreporterUsesOrgW3cDomNodeList>) nil_chk(nodeList)) itemWithInt:i];
    if ([((id<OrgOssPdfreporterUsesOrgW3cDomNode>) nil_chk(node)) getNodeType] == OrgOssPdfreporterUsesOrgW3cDomNode_TEXT_NODE) {
      [((OrgOssPdfreporterEngineUtilJRStyledText *) nil_chk(styledText)) appendWithNSString:[((id<OrgOssPdfreporterUsesOrgW3cDomNode>) nil_chk(node)) getNodeValue]];
    }
    else if ([((id<OrgOssPdfreporterUsesOrgW3cDomNode>) nil_chk(node)) getNodeType] == OrgOssPdfreporterUsesOrgW3cDomNode_ELEMENT_NODE && [((NSString *) nil_chk(OrgOssPdfreporterEngineUtilJRStyledTextParser_NODE_style_)) isEqual:[((id<OrgOssPdfreporterUsesOrgW3cDomNode>) nil_chk(node)) getNodeName]]) {
      id<OrgOssPdfreporterUsesOrgW3cDomNamedNodeMap> nodeAttrs = [((id<OrgOssPdfreporterUsesOrgW3cDomNode>) nil_chk(node)) getAttributes];
      id<JavaUtilMap> styleAttrs = [[JavaUtilHashMap alloc] init];
      if ([((id<OrgOssPdfreporterUsesOrgW3cDomNamedNodeMap>) nil_chk(nodeAttrs)) getNamedItemWithNSString:OrgOssPdfreporterEngineUtilJRStyledTextParser_ATTRIBUTE_fontName_] != nil) {
        (void) [((id<JavaUtilMap>) nil_chk(styleAttrs)) putWithId:[OrgOssPdfreporterFontTextTextAttribute FAMILY] withId:[((id<OrgOssPdfreporterUsesOrgW3cDomNode>) nil_chk([((id<OrgOssPdfreporterUsesOrgW3cDomNamedNodeMap>) nil_chk(nodeAttrs)) getNamedItemWithNSString:OrgOssPdfreporterEngineUtilJRStyledTextParser_ATTRIBUTE_fontName_])) getNodeValue]];
      }
      if ([((id<OrgOssPdfreporterUsesOrgW3cDomNamedNodeMap>) nil_chk(nodeAttrs)) getNamedItemWithNSString:OrgOssPdfreporterEngineUtilJRStyledTextParser_ATTRIBUTE_isBold_] != nil) {
        (void) [((id<JavaUtilMap>) nil_chk(styleAttrs)) putWithId:[OrgOssPdfreporterFontTextTextAttribute WEIGHT] withId:[[JavaLangBoolean valueOfWithNSString:[((id<OrgOssPdfreporterUsesOrgW3cDomNode>) nil_chk([((id<OrgOssPdfreporterUsesOrgW3cDomNamedNodeMap>) nil_chk(nodeAttrs)) getNamedItemWithNSString:OrgOssPdfreporterEngineUtilJRStyledTextParser_ATTRIBUTE_isBold_])) getNodeValue]] booleanValue] ? [OrgOssPdfreporterFontTextTextAttribute WEIGHT_BOLD] : [OrgOssPdfreporterFontTextTextAttribute WEIGHT_REGULAR]];
      }
      if ([((id<OrgOssPdfreporterUsesOrgW3cDomNamedNodeMap>) nil_chk(nodeAttrs)) getNamedItemWithNSString:OrgOssPdfreporterEngineUtilJRStyledTextParser_ATTRIBUTE_isItalic_] != nil) {
        (void) [((id<JavaUtilMap>) nil_chk(styleAttrs)) putWithId:[OrgOssPdfreporterFontTextTextAttribute POSTURE] withId:[[JavaLangBoolean valueOfWithNSString:[((id<OrgOssPdfreporterUsesOrgW3cDomNode>) nil_chk([((id<OrgOssPdfreporterUsesOrgW3cDomNamedNodeMap>) nil_chk(nodeAttrs)) getNamedItemWithNSString:OrgOssPdfreporterEngineUtilJRStyledTextParser_ATTRIBUTE_isItalic_])) getNodeValue]] booleanValue] ? [OrgOssPdfreporterFontTextTextAttribute POSTURE_OBLIQUE] : [OrgOssPdfreporterFontTextTextAttribute POSTURE_REGULAR]];
      }
      if ([((id<OrgOssPdfreporterUsesOrgW3cDomNamedNodeMap>) nil_chk(nodeAttrs)) getNamedItemWithNSString:OrgOssPdfreporterEngineUtilJRStyledTextParser_ATTRIBUTE_isUnderline_] != nil) {
        (void) [((id<JavaUtilMap>) nil_chk(styleAttrs)) putWithId:[OrgOssPdfreporterFontTextTextAttribute UNDERLINE] withId:[[JavaLangBoolean valueOfWithNSString:[((id<OrgOssPdfreporterUsesOrgW3cDomNode>) nil_chk([((id<OrgOssPdfreporterUsesOrgW3cDomNamedNodeMap>) nil_chk(nodeAttrs)) getNamedItemWithNSString:OrgOssPdfreporterEngineUtilJRStyledTextParser_ATTRIBUTE_isUnderline_])) getNodeValue]] booleanValue] ? [OrgOssPdfreporterFontTextTextAttribute UNDERLINE_ON] : nil];
      }
      if ([((id<OrgOssPdfreporterUsesOrgW3cDomNamedNodeMap>) nil_chk(nodeAttrs)) getNamedItemWithNSString:OrgOssPdfreporterEngineUtilJRStyledTextParser_ATTRIBUTE_isStrikeThrough_] != nil) {
        (void) [((id<JavaUtilMap>) nil_chk(styleAttrs)) putWithId:[OrgOssPdfreporterFontTextTextAttribute STRIKETHROUGH] withId:[[JavaLangBoolean valueOfWithNSString:[((id<OrgOssPdfreporterUsesOrgW3cDomNode>) nil_chk([((id<OrgOssPdfreporterUsesOrgW3cDomNamedNodeMap>) nil_chk(nodeAttrs)) getNamedItemWithNSString:OrgOssPdfreporterEngineUtilJRStyledTextParser_ATTRIBUTE_isStrikeThrough_])) getNodeValue]] booleanValue] ? [OrgOssPdfreporterFontTextTextAttribute STRIKETHROUGH_ON] : nil];
      }
      if ([((id<OrgOssPdfreporterUsesOrgW3cDomNamedNodeMap>) nil_chk(nodeAttrs)) getNamedItemWithNSString:OrgOssPdfreporterEngineUtilJRStyledTextParser_ATTRIBUTE_size_] != nil) {
        (void) [((id<JavaUtilMap>) nil_chk(styleAttrs)) putWithId:[OrgOssPdfreporterFontTextTextAttribute SIZE] withId:[[JavaLangFloat alloc] initWithNSString:[((id<OrgOssPdfreporterUsesOrgW3cDomNode>) nil_chk([((id<OrgOssPdfreporterUsesOrgW3cDomNamedNodeMap>) nil_chk(nodeAttrs)) getNamedItemWithNSString:OrgOssPdfreporterEngineUtilJRStyledTextParser_ATTRIBUTE_size_])) getNodeValue]]];
      }
      if ([((id<OrgOssPdfreporterUsesOrgW3cDomNamedNodeMap>) nil_chk(nodeAttrs)) getNamedItemWithNSString:OrgOssPdfreporterEngineUtilJRStyledTextParser_ATTRIBUTE_pdfFontName_] != nil) {
        (void) [((id<JavaUtilMap>) nil_chk(styleAttrs)) putWithId:[OrgOssPdfreporterEngineUtilJRTextAttribute PDF_FONT_NAME] withId:[((id<OrgOssPdfreporterUsesOrgW3cDomNode>) nil_chk([((id<OrgOssPdfreporterUsesOrgW3cDomNamedNodeMap>) nil_chk(nodeAttrs)) getNamedItemWithNSString:OrgOssPdfreporterEngineUtilJRStyledTextParser_ATTRIBUTE_pdfFontName_])) getNodeValue]];
      }
      if ([((id<OrgOssPdfreporterUsesOrgW3cDomNamedNodeMap>) nil_chk(nodeAttrs)) getNamedItemWithNSString:OrgOssPdfreporterEngineUtilJRStyledTextParser_ATTRIBUTE_pdfEncoding_] != nil) {
        (void) [((id<JavaUtilMap>) nil_chk(styleAttrs)) putWithId:[OrgOssPdfreporterEngineUtilJRTextAttribute PDF_ENCODING] withId:[((id<OrgOssPdfreporterUsesOrgW3cDomNode>) nil_chk([((id<OrgOssPdfreporterUsesOrgW3cDomNamedNodeMap>) nil_chk(nodeAttrs)) getNamedItemWithNSString:OrgOssPdfreporterEngineUtilJRStyledTextParser_ATTRIBUTE_pdfEncoding_])) getNodeValue]];
      }
      if ([((id<OrgOssPdfreporterUsesOrgW3cDomNamedNodeMap>) nil_chk(nodeAttrs)) getNamedItemWithNSString:OrgOssPdfreporterEngineUtilJRStyledTextParser_ATTRIBUTE_isPdfEmbedded_] != nil) {
        (void) [((id<JavaUtilMap>) nil_chk(styleAttrs)) putWithId:[OrgOssPdfreporterEngineUtilJRTextAttribute IS_PDF_EMBEDDED] withId:[JavaLangBoolean valueOfWithNSString:[((id<OrgOssPdfreporterUsesOrgW3cDomNode>) nil_chk([((id<OrgOssPdfreporterUsesOrgW3cDomNamedNodeMap>) nil_chk(nodeAttrs)) getNamedItemWithNSString:OrgOssPdfreporterEngineUtilJRStyledTextParser_ATTRIBUTE_isPdfEmbedded_])) getNodeValue]]];
      }
      if ([((id<OrgOssPdfreporterUsesOrgW3cDomNamedNodeMap>) nil_chk(nodeAttrs)) getNamedItemWithNSString:OrgOssPdfreporterEngineUtilJRStyledTextParser_ATTRIBUTE_forecolor_] != nil) {
        id<OrgOssPdfreporterGeometryIColor> color = [OrgOssPdfreporterEngineUtilJRColorUtil getColorWithNSString:[((id<OrgOssPdfreporterUsesOrgW3cDomNode>) nil_chk([((id<OrgOssPdfreporterUsesOrgW3cDomNamedNodeMap>) nil_chk(nodeAttrs)) getNamedItemWithNSString:OrgOssPdfreporterEngineUtilJRStyledTextParser_ATTRIBUTE_forecolor_])) getNodeValue] withOrgOssPdfreporterGeometryIColor:[OrgOssPdfreporterGeometryIColor black]];
        (void) [((id<JavaUtilMap>) nil_chk(styleAttrs)) putWithId:[OrgOssPdfreporterFontTextTextAttribute FOREGROUND] withId:color];
      }
      if ([((id<OrgOssPdfreporterUsesOrgW3cDomNamedNodeMap>) nil_chk(nodeAttrs)) getNamedItemWithNSString:OrgOssPdfreporterEngineUtilJRStyledTextParser_ATTRIBUTE_backcolor_] != nil) {
        id<OrgOssPdfreporterGeometryIColor> color = [OrgOssPdfreporterEngineUtilJRColorUtil getColorWithNSString:[((id<OrgOssPdfreporterUsesOrgW3cDomNode>) nil_chk([((id<OrgOssPdfreporterUsesOrgW3cDomNamedNodeMap>) nil_chk(nodeAttrs)) getNamedItemWithNSString:OrgOssPdfreporterEngineUtilJRStyledTextParser_ATTRIBUTE_backcolor_])) getNodeValue] withOrgOssPdfreporterGeometryIColor:[OrgOssPdfreporterGeometryIColor black]];
        (void) [((id<JavaUtilMap>) nil_chk(styleAttrs)) putWithId:[OrgOssPdfreporterFontTextTextAttribute BACKGROUND] withId:color];
      }
      int startIndex = [((OrgOssPdfreporterEngineUtilJRStyledText *) nil_chk(styledText)) length];
      [self parseStyleWithOrgOssPdfreporterEngineUtilJRStyledText:styledText withOrgOssPdfreporterUsesOrgW3cDomNode:node];
      [((OrgOssPdfreporterEngineUtilJRStyledText *) nil_chk(styledText)) addRunWithOrgOssPdfreporterEngineUtilJRStyledText_Run:[[OrgOssPdfreporterEngineUtilJRStyledText_Run alloc] initWithJavaUtilMap:styleAttrs withInt:startIndex withInt:[((OrgOssPdfreporterEngineUtilJRStyledText *) nil_chk(styledText)) length]]];
    }
    else if ([((id<OrgOssPdfreporterUsesOrgW3cDomNode>) nil_chk(node)) getNodeType] == OrgOssPdfreporterUsesOrgW3cDomNode_ELEMENT_NODE && [((NSString *) nil_chk(OrgOssPdfreporterEngineUtilJRStyledTextParser_NODE_bold_)) equalsIgnoreCase:[((id<OrgOssPdfreporterUsesOrgW3cDomNode>) nil_chk(node)) getNodeName]]) {
      id<JavaUtilMap> styleAttrs = [[JavaUtilHashMap alloc] init];
      (void) [((id<JavaUtilMap>) nil_chk(styleAttrs)) putWithId:[OrgOssPdfreporterFontTextTextAttribute WEIGHT] withId:[OrgOssPdfreporterFontTextTextAttribute WEIGHT_BOLD]];
      int startIndex = [((OrgOssPdfreporterEngineUtilJRStyledText *) nil_chk(styledText)) length];
      [self parseStyleWithOrgOssPdfreporterEngineUtilJRStyledText:styledText withOrgOssPdfreporterUsesOrgW3cDomNode:node];
      [((OrgOssPdfreporterEngineUtilJRStyledText *) nil_chk(styledText)) addRunWithOrgOssPdfreporterEngineUtilJRStyledText_Run:[[OrgOssPdfreporterEngineUtilJRStyledText_Run alloc] initWithJavaUtilMap:styleAttrs withInt:startIndex withInt:[((OrgOssPdfreporterEngineUtilJRStyledText *) nil_chk(styledText)) length]]];
    }
    else if ([((id<OrgOssPdfreporterUsesOrgW3cDomNode>) nil_chk(node)) getNodeType] == OrgOssPdfreporterUsesOrgW3cDomNode_ELEMENT_NODE && [((NSString *) nil_chk(OrgOssPdfreporterEngineUtilJRStyledTextParser_NODE_italic_)) equalsIgnoreCase:[((id<OrgOssPdfreporterUsesOrgW3cDomNode>) nil_chk(node)) getNodeName]]) {
      id<JavaUtilMap> styleAttrs = [[JavaUtilHashMap alloc] init];
      (void) [((id<JavaUtilMap>) nil_chk(styleAttrs)) putWithId:[OrgOssPdfreporterFontTextTextAttribute POSTURE] withId:[OrgOssPdfreporterFontTextTextAttribute POSTURE_OBLIQUE]];
      int startIndex = [((OrgOssPdfreporterEngineUtilJRStyledText *) nil_chk(styledText)) length];
      [self parseStyleWithOrgOssPdfreporterEngineUtilJRStyledText:styledText withOrgOssPdfreporterUsesOrgW3cDomNode:node];
      [((OrgOssPdfreporterEngineUtilJRStyledText *) nil_chk(styledText)) addRunWithOrgOssPdfreporterEngineUtilJRStyledText_Run:[[OrgOssPdfreporterEngineUtilJRStyledText_Run alloc] initWithJavaUtilMap:styleAttrs withInt:startIndex withInt:[((OrgOssPdfreporterEngineUtilJRStyledText *) nil_chk(styledText)) length]]];
    }
    else if ([((id<OrgOssPdfreporterUsesOrgW3cDomNode>) nil_chk(node)) getNodeType] == OrgOssPdfreporterUsesOrgW3cDomNode_ELEMENT_NODE && [((NSString *) nil_chk(OrgOssPdfreporterEngineUtilJRStyledTextParser_NODE_underline_)) equalsIgnoreCase:[((id<OrgOssPdfreporterUsesOrgW3cDomNode>) nil_chk(node)) getNodeName]]) {
      id<JavaUtilMap> styleAttrs = [[JavaUtilHashMap alloc] init];
      (void) [((id<JavaUtilMap>) nil_chk(styleAttrs)) putWithId:[OrgOssPdfreporterFontTextTextAttribute UNDERLINE] withId:[OrgOssPdfreporterFontTextTextAttribute UNDERLINE_ON]];
      int startIndex = [((OrgOssPdfreporterEngineUtilJRStyledText *) nil_chk(styledText)) length];
      [self parseStyleWithOrgOssPdfreporterEngineUtilJRStyledText:styledText withOrgOssPdfreporterUsesOrgW3cDomNode:node];
      [((OrgOssPdfreporterEngineUtilJRStyledText *) nil_chk(styledText)) addRunWithOrgOssPdfreporterEngineUtilJRStyledText_Run:[[OrgOssPdfreporterEngineUtilJRStyledText_Run alloc] initWithJavaUtilMap:styleAttrs withInt:startIndex withInt:[((OrgOssPdfreporterEngineUtilJRStyledText *) nil_chk(styledText)) length]]];
    }
    else if ([((id<OrgOssPdfreporterUsesOrgW3cDomNode>) nil_chk(node)) getNodeType] == OrgOssPdfreporterUsesOrgW3cDomNode_ELEMENT_NODE && [((NSString *) nil_chk(OrgOssPdfreporterEngineUtilJRStyledTextParser_NODE_sup_)) equalsIgnoreCase:[((id<OrgOssPdfreporterUsesOrgW3cDomNode>) nil_chk(node)) getNodeName]]) {
      id<JavaUtilMap> styleAttrs = [[JavaUtilHashMap alloc] init];
      (void) [((id<JavaUtilMap>) nil_chk(styleAttrs)) putWithId:[OrgOssPdfreporterFontTextTextAttribute SUPERSCRIPT] withId:[OrgOssPdfreporterFontTextTextAttribute SUPERSCRIPT_SUPER]];
      int startIndex = [((OrgOssPdfreporterEngineUtilJRStyledText *) nil_chk(styledText)) length];
      [self parseStyleWithOrgOssPdfreporterEngineUtilJRStyledText:styledText withOrgOssPdfreporterUsesOrgW3cDomNode:node];
      [((OrgOssPdfreporterEngineUtilJRStyledText *) nil_chk(styledText)) addRunWithOrgOssPdfreporterEngineUtilJRStyledText_Run:[[OrgOssPdfreporterEngineUtilJRStyledText_Run alloc] initWithJavaUtilMap:styleAttrs withInt:startIndex withInt:[((OrgOssPdfreporterEngineUtilJRStyledText *) nil_chk(styledText)) length]]];
    }
    else if ([((id<OrgOssPdfreporterUsesOrgW3cDomNode>) nil_chk(node)) getNodeType] == OrgOssPdfreporterUsesOrgW3cDomNode_ELEMENT_NODE && [((NSString *) nil_chk(OrgOssPdfreporterEngineUtilJRStyledTextParser_NODE_sub_)) equalsIgnoreCase:[((id<OrgOssPdfreporterUsesOrgW3cDomNode>) nil_chk(node)) getNodeName]]) {
      id<JavaUtilMap> styleAttrs = [[JavaUtilHashMap alloc] init];
      (void) [((id<JavaUtilMap>) nil_chk(styleAttrs)) putWithId:[OrgOssPdfreporterFontTextTextAttribute SUPERSCRIPT] withId:[OrgOssPdfreporterFontTextTextAttribute SUPERSCRIPT_SUB]];
      int startIndex = [((OrgOssPdfreporterEngineUtilJRStyledText *) nil_chk(styledText)) length];
      [self parseStyleWithOrgOssPdfreporterEngineUtilJRStyledText:styledText withOrgOssPdfreporterUsesOrgW3cDomNode:node];
      [((OrgOssPdfreporterEngineUtilJRStyledText *) nil_chk(styledText)) addRunWithOrgOssPdfreporterEngineUtilJRStyledText_Run:[[OrgOssPdfreporterEngineUtilJRStyledText_Run alloc] initWithJavaUtilMap:styleAttrs withInt:startIndex withInt:[((OrgOssPdfreporterEngineUtilJRStyledText *) nil_chk(styledText)) length]]];
    }
    else if ([((id<OrgOssPdfreporterUsesOrgW3cDomNode>) nil_chk(node)) getNodeType] == OrgOssPdfreporterUsesOrgW3cDomNode_ELEMENT_NODE && [((NSString *) nil_chk(OrgOssPdfreporterEngineUtilJRStyledTextParser_NODE_font_)) equalsIgnoreCase:[((id<OrgOssPdfreporterUsesOrgW3cDomNode>) nil_chk(node)) getNodeName]]) {
      id<OrgOssPdfreporterUsesOrgW3cDomNamedNodeMap> nodeAttrs = [((id<OrgOssPdfreporterUsesOrgW3cDomNode>) nil_chk(node)) getAttributes];
      id<JavaUtilMap> styleAttrs = [[JavaUtilHashMap alloc] init];
      if ([((id<OrgOssPdfreporterUsesOrgW3cDomNamedNodeMap>) nil_chk(nodeAttrs)) getNamedItemWithNSString:OrgOssPdfreporterEngineUtilJRStyledTextParser_ATTRIBUTE_size_] != nil) {
        (void) [((id<JavaUtilMap>) nil_chk(styleAttrs)) putWithId:[OrgOssPdfreporterFontTextTextAttribute SIZE] withId:[[JavaLangFloat alloc] initWithNSString:[((id<OrgOssPdfreporterUsesOrgW3cDomNode>) nil_chk([((id<OrgOssPdfreporterUsesOrgW3cDomNamedNodeMap>) nil_chk(nodeAttrs)) getNamedItemWithNSString:OrgOssPdfreporterEngineUtilJRStyledTextParser_ATTRIBUTE_size_])) getNodeValue]]];
      }
      if ([((id<OrgOssPdfreporterUsesOrgW3cDomNamedNodeMap>) nil_chk(nodeAttrs)) getNamedItemWithNSString:OrgOssPdfreporterEngineUtilJRStyledTextParser_ATTRIBUTE_color_] != nil) {
        id<OrgOssPdfreporterGeometryIColor> color = [OrgOssPdfreporterEngineUtilJRColorUtil getColorWithNSString:[((id<OrgOssPdfreporterUsesOrgW3cDomNode>) nil_chk([((id<OrgOssPdfreporterUsesOrgW3cDomNamedNodeMap>) nil_chk(nodeAttrs)) getNamedItemWithNSString:OrgOssPdfreporterEngineUtilJRStyledTextParser_ATTRIBUTE_color_])) getNodeValue] withOrgOssPdfreporterGeometryIColor:[OrgOssPdfreporterGeometryIColor black]];
        (void) [((id<JavaUtilMap>) nil_chk(styleAttrs)) putWithId:[OrgOssPdfreporterFontTextTextAttribute FOREGROUND] withId:color];
      }
      if ([((id<OrgOssPdfreporterUsesOrgW3cDomNamedNodeMap>) nil_chk(nodeAttrs)) getNamedItemWithNSString:OrgOssPdfreporterEngineUtilJRStyledTextParser_ATTRIBUTE_fontFace_] != nil) {
        NSString *fontFaces = [((id<OrgOssPdfreporterUsesOrgW3cDomNode>) nil_chk([((id<OrgOssPdfreporterUsesOrgW3cDomNamedNodeMap>) nil_chk(nodeAttrs)) getNamedItemWithNSString:OrgOssPdfreporterEngineUtilJRStyledTextParser_ATTRIBUTE_fontFace_])) getNodeValue];
        JavaUtilStringTokenizer *t = [[JavaUtilStringTokenizer alloc] initWithNSString:fontFaces withNSString:@","];
        while ([((JavaUtilStringTokenizer *) nil_chk(t)) hasMoreTokens]) {
          NSString *face = [((NSString *) nil_chk([((JavaUtilStringTokenizer *) nil_chk(t)) nextToken])) trim];
          if ([((id<JavaUtilSet>) nil_chk(OrgOssPdfreporterEngineUtilJRStyledTextParser_AVAILABLE_FONT_FACE_NAMES_)) containsWithId:face]) {
            (void) [((id<JavaUtilMap>) nil_chk(styleAttrs)) putWithId:[OrgOssPdfreporterFontTextTextAttribute FAMILY] withId:face];
            break;
          }
        }
      }
      int startIndex = [((OrgOssPdfreporterEngineUtilJRStyledText *) nil_chk(styledText)) length];
      [self parseStyleWithOrgOssPdfreporterEngineUtilJRStyledText:styledText withOrgOssPdfreporterUsesOrgW3cDomNode:node];
      [((OrgOssPdfreporterEngineUtilJRStyledText *) nil_chk(styledText)) addRunWithOrgOssPdfreporterEngineUtilJRStyledText_Run:[[OrgOssPdfreporterEngineUtilJRStyledText_Run alloc] initWithJavaUtilMap:styleAttrs withInt:startIndex withInt:[((OrgOssPdfreporterEngineUtilJRStyledText *) nil_chk(styledText)) length]]];
    }
    else if ([((id<OrgOssPdfreporterUsesOrgW3cDomNode>) nil_chk(node)) getNodeType] == OrgOssPdfreporterUsesOrgW3cDomNode_ELEMENT_NODE && [((NSString *) nil_chk(OrgOssPdfreporterEngineUtilJRStyledTextParser_NODE_br_)) equalsIgnoreCase:[((id<OrgOssPdfreporterUsesOrgW3cDomNode>) nil_chk(node)) getNodeName]]) {
      [((OrgOssPdfreporterEngineUtilJRStyledText *) nil_chk(styledText)) appendWithNSString:@"\n"];
      int startIndex = [((OrgOssPdfreporterEngineUtilJRStyledText *) nil_chk(styledText)) length];
      [self resizeRunsWithJavaUtilList:[((OrgOssPdfreporterEngineUtilJRStyledText *) nil_chk(styledText)) getRuns] withInt:startIndex withInt:1];
      [self parseStyleWithOrgOssPdfreporterEngineUtilJRStyledText:styledText withOrgOssPdfreporterUsesOrgW3cDomNode:node];
      [((OrgOssPdfreporterEngineUtilJRStyledText *) nil_chk(styledText)) addRunWithOrgOssPdfreporterEngineUtilJRStyledText_Run:[[OrgOssPdfreporterEngineUtilJRStyledText_Run alloc] initWithJavaUtilMap:[[JavaUtilHashMap alloc] init] withInt:startIndex withInt:[((OrgOssPdfreporterEngineUtilJRStyledText *) nil_chk(styledText)) length]]];
      if (startIndex < [((OrgOssPdfreporterEngineUtilJRStyledText *) nil_chk(styledText)) length]) {
        [((OrgOssPdfreporterEngineUtilJRStyledText *) nil_chk(styledText)) appendWithNSString:@"\n"];
        [self resizeRunsWithJavaUtilList:[((OrgOssPdfreporterEngineUtilJRStyledText *) nil_chk(styledText)) getRuns] withInt:startIndex withInt:1];
      }
    }
    else if ([((id<OrgOssPdfreporterUsesOrgW3cDomNode>) nil_chk(node)) getNodeType] == OrgOssPdfreporterUsesOrgW3cDomNode_ELEMENT_NODE && [((NSString *) nil_chk(OrgOssPdfreporterEngineUtilJRStyledTextParser_NODE_li_)) equalsIgnoreCase:[((id<OrgOssPdfreporterUsesOrgW3cDomNode>) nil_chk(node)) getNodeName]]) {
      NSString *tmpText = [((OrgOssPdfreporterEngineUtilJRStyledText *) nil_chk(styledText)) getText];
      if ([((NSString *) nil_chk(tmpText)) length] > 0 && ![((NSString *) nil_chk(tmpText)) hasSuffix:@"\n"]) {
        [((OrgOssPdfreporterEngineUtilJRStyledText *) nil_chk(styledText)) appendWithNSString:@"\n"];
      }
      [((OrgOssPdfreporterEngineUtilJRStyledText *) nil_chk(styledText)) appendWithNSString:@" \u2022 "];
      int startIndex = [((OrgOssPdfreporterEngineUtilJRStyledText *) nil_chk(styledText)) length];
      [self resizeRunsWithJavaUtilList:[((OrgOssPdfreporterEngineUtilJRStyledText *) nil_chk(styledText)) getRuns] withInt:startIndex withInt:1];
      [self parseStyleWithOrgOssPdfreporterEngineUtilJRStyledText:styledText withOrgOssPdfreporterUsesOrgW3cDomNode:node];
      [((OrgOssPdfreporterEngineUtilJRStyledText *) nil_chk(styledText)) addRunWithOrgOssPdfreporterEngineUtilJRStyledText_Run:[[OrgOssPdfreporterEngineUtilJRStyledText_Run alloc] initWithJavaUtilMap:[[JavaUtilHashMap alloc] init] withInt:startIndex withInt:[((OrgOssPdfreporterEngineUtilJRStyledText *) nil_chk(styledText)) length]]];
      id<OrgOssPdfreporterUsesOrgW3cDomNode> nextNode = [((id<OrgOssPdfreporterUsesOrgW3cDomNode>) nil_chk(node)) getNextSibling];
      NSString *textContent = [self getFirstTextOccurenceWithOrgOssPdfreporterUsesOrgW3cDomNode:nextNode];
      if (nextNode != nil && !((([((id<OrgOssPdfreporterUsesOrgW3cDomNode>) nil_chk(nextNode)) getNodeType] == OrgOssPdfreporterUsesOrgW3cDomNode_ELEMENT_NODE && [((NSString *) nil_chk(OrgOssPdfreporterEngineUtilJRStyledTextParser_NODE_li_)) equalsIgnoreCase:[((id<OrgOssPdfreporterUsesOrgW3cDomNode>) nil_chk(nextNode)) getNodeName]]) || (textContent != nil && [((NSString *) nil_chk(textContent)) hasPrefix:@"\n"])))) {
        [((OrgOssPdfreporterEngineUtilJRStyledText *) nil_chk(styledText)) appendWithNSString:@"\n"];
        [self resizeRunsWithJavaUtilList:[((OrgOssPdfreporterEngineUtilJRStyledText *) nil_chk(styledText)) getRuns] withInt:startIndex withInt:1];
      }
    }
    else if ([((id<OrgOssPdfreporterUsesOrgW3cDomNode>) nil_chk(node)) getNodeType] == OrgOssPdfreporterUsesOrgW3cDomNode_ELEMENT_NODE && [((NSString *) nil_chk(OrgOssPdfreporterEngineUtilJRStyledTextParser_NODE_a_)) equalsIgnoreCase:[((id<OrgOssPdfreporterUsesOrgW3cDomNode>) nil_chk(node)) getNodeName]]) {
      if (hyperlink_ == nil) {
        id<OrgOssPdfreporterUsesOrgW3cDomNamedNodeMap> nodeAttrs = [((id<OrgOssPdfreporterUsesOrgW3cDomNode>) nil_chk(node)) getAttributes];
        id<JavaUtilMap> styleAttrs = [[JavaUtilHashMap alloc] init];
        hyperlink_ = [[OrgOssPdfreporterEngineBaseJRBasePrintHyperlink alloc] init];
        [hyperlink_ setHyperlinkTypeWithOrgOssPdfreporterEngineTypeHyperlinkTypeEnumEnum:[OrgOssPdfreporterEngineTypeHyperlinkTypeEnumEnum REFERENCE]];
        (void) [((id<JavaUtilMap>) nil_chk(styleAttrs)) putWithId:[OrgOssPdfreporterEngineUtilJRTextAttribute HYPERLINK] withId:hyperlink_];
        if ([((id<OrgOssPdfreporterUsesOrgW3cDomNamedNodeMap>) nil_chk(nodeAttrs)) getNamedItemWithNSString:OrgOssPdfreporterEngineUtilJRStyledTextParser_ATTRIBUTE_href_] != nil) {
          [((OrgOssPdfreporterEngineBaseJRBasePrintHyperlink *) nil_chk(hyperlink_)) setHyperlinkReferenceWithNSString:[((id<OrgOssPdfreporterUsesOrgW3cDomNode>) nil_chk([((id<OrgOssPdfreporterUsesOrgW3cDomNamedNodeMap>) nil_chk(nodeAttrs)) getNamedItemWithNSString:OrgOssPdfreporterEngineUtilJRStyledTextParser_ATTRIBUTE_href_])) getNodeValue]];
        }
        if ([((id<OrgOssPdfreporterUsesOrgW3cDomNamedNodeMap>) nil_chk(nodeAttrs)) getNamedItemWithNSString:OrgOssPdfreporterEngineUtilJRStyledTextParser_ATTRIBUTE_type_] != nil) {
          [((OrgOssPdfreporterEngineBaseJRBasePrintHyperlink *) nil_chk(hyperlink_)) setLinkTypeWithNSString:[((id<OrgOssPdfreporterUsesOrgW3cDomNode>) nil_chk([((id<OrgOssPdfreporterUsesOrgW3cDomNamedNodeMap>) nil_chk(nodeAttrs)) getNamedItemWithNSString:OrgOssPdfreporterEngineUtilJRStyledTextParser_ATTRIBUTE_type_])) getNodeValue]];
        }
        if ([((id<OrgOssPdfreporterUsesOrgW3cDomNamedNodeMap>) nil_chk(nodeAttrs)) getNamedItemWithNSString:OrgOssPdfreporterEngineUtilJRStyledTextParser_ATTRIBUTE_target_] != nil) {
          [((OrgOssPdfreporterEngineBaseJRBasePrintHyperlink *) nil_chk(hyperlink_)) setLinkTargetWithNSString:[((id<OrgOssPdfreporterUsesOrgW3cDomNode>) nil_chk([((id<OrgOssPdfreporterUsesOrgW3cDomNamedNodeMap>) nil_chk(nodeAttrs)) getNamedItemWithNSString:OrgOssPdfreporterEngineUtilJRStyledTextParser_ATTRIBUTE_target_])) getNodeValue]];
        }
        int startIndex = [((OrgOssPdfreporterEngineUtilJRStyledText *) nil_chk(styledText)) length];
        [self parseStyleWithOrgOssPdfreporterEngineUtilJRStyledText:styledText withOrgOssPdfreporterUsesOrgW3cDomNode:node];
        [((OrgOssPdfreporterEngineUtilJRStyledText *) nil_chk(styledText)) addRunWithOrgOssPdfreporterEngineUtilJRStyledText_Run:[[OrgOssPdfreporterEngineUtilJRStyledText_Run alloc] initWithJavaUtilMap:styleAttrs withInt:startIndex withInt:[((OrgOssPdfreporterEngineUtilJRStyledText *) nil_chk(styledText)) length]]];
        hyperlink_ = nil;
      }
      else {
        @throw [[OrgOssPdfreporterXmlParsersXMLParseException alloc] initWithNSString:@"Hyperlink <a> tags cannot be nested."];
      }
    }
    else if ([((id<OrgOssPdfreporterUsesOrgW3cDomNode>) nil_chk(node)) getNodeType] == OrgOssPdfreporterUsesOrgW3cDomNode_ELEMENT_NODE && [((NSString *) nil_chk(OrgOssPdfreporterEngineUtilJRStyledTextParser_NODE_param_)) equalsIgnoreCase:[((id<OrgOssPdfreporterUsesOrgW3cDomNode>) nil_chk(node)) getNodeName]]) {
      if (hyperlink_ == nil) {
        @throw [[OrgOssPdfreporterXmlParsersXMLParseException alloc] initWithNSString:@"Hyperlink <param> tags must appear inside an <a> tag only."];
      }
      else {
        id<OrgOssPdfreporterUsesOrgW3cDomNamedNodeMap> nodeAttrs = [((id<OrgOssPdfreporterUsesOrgW3cDomNode>) nil_chk(node)) getAttributes];
        OrgOssPdfreporterEngineJRPrintHyperlinkParameter *parameter = [[OrgOssPdfreporterEngineJRPrintHyperlinkParameter alloc] init];
        if ([((id<OrgOssPdfreporterUsesOrgW3cDomNamedNodeMap>) nil_chk(nodeAttrs)) getNamedItemWithNSString:OrgOssPdfreporterEngineUtilJRStyledTextParser_ATTRIBUTE_name_] != nil) {
          [((OrgOssPdfreporterEngineJRPrintHyperlinkParameter *) nil_chk(parameter)) setNameWithNSString:[((id<OrgOssPdfreporterUsesOrgW3cDomNode>) nil_chk([((id<OrgOssPdfreporterUsesOrgW3cDomNamedNodeMap>) nil_chk(nodeAttrs)) getNamedItemWithNSString:OrgOssPdfreporterEngineUtilJRStyledTextParser_ATTRIBUTE_name_])) getNodeValue]];
        }
        if ([((id<OrgOssPdfreporterUsesOrgW3cDomNamedNodeMap>) nil_chk(nodeAttrs)) getNamedItemWithNSString:OrgOssPdfreporterEngineUtilJRStyledTextParser_ATTRIBUTE_valueClass_] != nil) {
          [((OrgOssPdfreporterEngineJRPrintHyperlinkParameter *) nil_chk(parameter)) setValueClassWithNSString:[((id<OrgOssPdfreporterUsesOrgW3cDomNode>) nil_chk([((id<OrgOssPdfreporterUsesOrgW3cDomNamedNodeMap>) nil_chk(nodeAttrs)) getNamedItemWithNSString:OrgOssPdfreporterEngineUtilJRStyledTextParser_ATTRIBUTE_valueClass_])) getNodeValue]];
        }
        NSString *strValue = [((id<OrgOssPdfreporterUsesOrgW3cDomNode>) nil_chk(node)) getTextContent];
        if (strValue != nil) {
          id value = [OrgOssPdfreporterEngineUtilJRValueStringUtils deserializeWithNSString:[((OrgOssPdfreporterEngineJRPrintHyperlinkParameter *) nil_chk(parameter)) getValueClass] withNSString:strValue];
          [((OrgOssPdfreporterEngineJRPrintHyperlinkParameter *) nil_chk(parameter)) setValueWithId:value];
        }
        [hyperlink_ addHyperlinkParameterWithOrgOssPdfreporterEngineJRPrintHyperlinkParameter:parameter];
      }
    }
    else if ([((id<OrgOssPdfreporterUsesOrgW3cDomNode>) nil_chk(node)) getNodeType] == OrgOssPdfreporterUsesOrgW3cDomNode_ELEMENT_NODE) {
      NSString *nodeName = [NSString stringWithFormat:@"<%@>", [((id<OrgOssPdfreporterUsesOrgW3cDomNode>) nil_chk(node)) getNodeName]];
      @throw [[OrgOssPdfreporterXmlParsersXMLParseException alloc] initWithNSString:[NSString stringWithFormat:@"Tag %@ is not a valid styled text tag.", nodeName]];
    }
  }
}

- (void)resizeRunsWithJavaUtilList:(id<JavaUtilList>)runs
                           withInt:(int)startIndex
                           withInt:(int)count {
  for (int j = 0; j < [((id<JavaUtilList>) nil_chk(runs)) size]; j++) {
    OrgOssPdfreporterEngineUtilJRStyledText_Run *run = [((id<JavaUtilList>) nil_chk(runs)) getWithInt:j];
    if (((OrgOssPdfreporterEngineUtilJRStyledText_Run *) nil_chk(run)).startIndex <= startIndex && ((OrgOssPdfreporterEngineUtilJRStyledText_Run *) nil_chk(run)).endIndex > startIndex - count) {
      ((OrgOssPdfreporterEngineUtilJRStyledText_Run *) nil_chk(run)).endIndex += count;
    }
  }
}

- (JavaLangStringBuffer *)writeStyleAttributesWithJavaUtilMap:(id<JavaUtilMap>)parentAttrs
                                              withJavaUtilMap:(id<JavaUtilMap>)attrs {
  JavaLangStringBuffer *sbuffer = [[JavaLangStringBuffer alloc] init];
  id value = [((id<JavaUtilMap>) nil_chk(attrs)) getWithId:[OrgOssPdfreporterFontTextTextAttribute FAMILY]];
  id oldValue = [((id<JavaUtilMap>) nil_chk(parentAttrs)) getWithId:[OrgOssPdfreporterFontTextTextAttribute FAMILY]];
  if (value != nil && ![nil_chk(value) isEqual:oldValue]) {
    (void) [((JavaLangStringBuffer *) nil_chk(sbuffer)) appendWithNSString:OrgOssPdfreporterEngineUtilJRStyledTextParser_SPACE_];
    (void) [((JavaLangStringBuffer *) nil_chk(sbuffer)) appendWithNSString:OrgOssPdfreporterEngineUtilJRStyledTextParser_ATTRIBUTE_fontName_];
    (void) [((JavaLangStringBuffer *) nil_chk(sbuffer)) appendWithNSString:OrgOssPdfreporterEngineUtilJRStyledTextParser_EQUAL_QUOTE_];
    (void) [((JavaLangStringBuffer *) nil_chk(sbuffer)) appendWithId:value];
    (void) [((JavaLangStringBuffer *) nil_chk(sbuffer)) appendWithNSString:OrgOssPdfreporterEngineUtilJRStyledTextParser_QUOTE_];
  }
  value = [((id<JavaUtilMap>) nil_chk(attrs)) getWithId:[OrgOssPdfreporterFontTextTextAttribute WEIGHT]];
  oldValue = [((id<JavaUtilMap>) nil_chk(parentAttrs)) getWithId:[OrgOssPdfreporterFontTextTextAttribute WEIGHT]];
  if (value != nil && ![nil_chk(value) isEqual:oldValue]) {
    (void) [((JavaLangStringBuffer *) nil_chk(sbuffer)) appendWithNSString:OrgOssPdfreporterEngineUtilJRStyledTextParser_SPACE_];
    (void) [((JavaLangStringBuffer *) nil_chk(sbuffer)) appendWithNSString:OrgOssPdfreporterEngineUtilJRStyledTextParser_ATTRIBUTE_isBold_];
    (void) [((JavaLangStringBuffer *) nil_chk(sbuffer)) appendWithNSString:OrgOssPdfreporterEngineUtilJRStyledTextParser_EQUAL_QUOTE_];
    (void) [((JavaLangStringBuffer *) nil_chk(sbuffer)) appendWithBOOL:[nil_chk(value) isEqual:[OrgOssPdfreporterFontTextTextAttribute WEIGHT_BOLD]]];
    (void) [((JavaLangStringBuffer *) nil_chk(sbuffer)) appendWithNSString:OrgOssPdfreporterEngineUtilJRStyledTextParser_QUOTE_];
  }
  value = [((id<JavaUtilMap>) nil_chk(attrs)) getWithId:[OrgOssPdfreporterFontTextTextAttribute POSTURE]];
  oldValue = [((id<JavaUtilMap>) nil_chk(parentAttrs)) getWithId:[OrgOssPdfreporterFontTextTextAttribute POSTURE]];
  if (value != nil && ![nil_chk(value) isEqual:oldValue]) {
    (void) [((JavaLangStringBuffer *) nil_chk(sbuffer)) appendWithNSString:OrgOssPdfreporterEngineUtilJRStyledTextParser_SPACE_];
    (void) [((JavaLangStringBuffer *) nil_chk(sbuffer)) appendWithNSString:OrgOssPdfreporterEngineUtilJRStyledTextParser_ATTRIBUTE_isItalic_];
    (void) [((JavaLangStringBuffer *) nil_chk(sbuffer)) appendWithNSString:OrgOssPdfreporterEngineUtilJRStyledTextParser_EQUAL_QUOTE_];
    (void) [((JavaLangStringBuffer *) nil_chk(sbuffer)) appendWithBOOL:[nil_chk(value) isEqual:[OrgOssPdfreporterFontTextTextAttribute POSTURE_OBLIQUE]]];
    (void) [((JavaLangStringBuffer *) nil_chk(sbuffer)) appendWithNSString:OrgOssPdfreporterEngineUtilJRStyledTextParser_QUOTE_];
  }
  value = [((id<JavaUtilMap>) nil_chk(attrs)) getWithId:[OrgOssPdfreporterFontTextTextAttribute UNDERLINE]];
  oldValue = [((id<JavaUtilMap>) nil_chk(parentAttrs)) getWithId:[OrgOssPdfreporterFontTextTextAttribute UNDERLINE]];
  if ((value == nil && oldValue != nil) || (value != nil && ![nil_chk(value) isEqual:oldValue])) {
    (void) [((JavaLangStringBuffer *) nil_chk(sbuffer)) appendWithNSString:OrgOssPdfreporterEngineUtilJRStyledTextParser_SPACE_];
    (void) [((JavaLangStringBuffer *) nil_chk(sbuffer)) appendWithNSString:OrgOssPdfreporterEngineUtilJRStyledTextParser_ATTRIBUTE_isUnderline_];
    (void) [((JavaLangStringBuffer *) nil_chk(sbuffer)) appendWithNSString:OrgOssPdfreporterEngineUtilJRStyledTextParser_EQUAL_QUOTE_];
    (void) [((JavaLangStringBuffer *) nil_chk(sbuffer)) appendWithBOOL:value != nil];
    (void) [((JavaLangStringBuffer *) nil_chk(sbuffer)) appendWithNSString:OrgOssPdfreporterEngineUtilJRStyledTextParser_QUOTE_];
  }
  value = [((id<JavaUtilMap>) nil_chk(attrs)) getWithId:[OrgOssPdfreporterFontTextTextAttribute STRIKETHROUGH]];
  oldValue = [((id<JavaUtilMap>) nil_chk(parentAttrs)) getWithId:[OrgOssPdfreporterFontTextTextAttribute STRIKETHROUGH]];
  if ((value == nil && oldValue != nil) || (value != nil && ![nil_chk(value) isEqual:oldValue])) {
    (void) [((JavaLangStringBuffer *) nil_chk(sbuffer)) appendWithNSString:OrgOssPdfreporterEngineUtilJRStyledTextParser_SPACE_];
    (void) [((JavaLangStringBuffer *) nil_chk(sbuffer)) appendWithNSString:OrgOssPdfreporterEngineUtilJRStyledTextParser_ATTRIBUTE_isStrikeThrough_];
    (void) [((JavaLangStringBuffer *) nil_chk(sbuffer)) appendWithNSString:OrgOssPdfreporterEngineUtilJRStyledTextParser_EQUAL_QUOTE_];
    (void) [((JavaLangStringBuffer *) nil_chk(sbuffer)) appendWithBOOL:value != nil];
    (void) [((JavaLangStringBuffer *) nil_chk(sbuffer)) appendWithNSString:OrgOssPdfreporterEngineUtilJRStyledTextParser_QUOTE_];
  }
  value = [((id<JavaUtilMap>) nil_chk(attrs)) getWithId:[OrgOssPdfreporterFontTextTextAttribute SIZE]];
  oldValue = [((id<JavaUtilMap>) nil_chk(parentAttrs)) getWithId:[OrgOssPdfreporterFontTextTextAttribute SIZE]];
  if (value != nil && ![nil_chk(value) isEqual:oldValue]) {
    (void) [((JavaLangStringBuffer *) nil_chk(sbuffer)) appendWithNSString:OrgOssPdfreporterEngineUtilJRStyledTextParser_SPACE_];
    (void) [((JavaLangStringBuffer *) nil_chk(sbuffer)) appendWithNSString:OrgOssPdfreporterEngineUtilJRStyledTextParser_ATTRIBUTE_size_];
    (void) [((JavaLangStringBuffer *) nil_chk(sbuffer)) appendWithNSString:OrgOssPdfreporterEngineUtilJRStyledTextParser_EQUAL_QUOTE_];
    (void) [((JavaLangStringBuffer *) nil_chk(sbuffer)) appendWithInt:[((JavaLangFloat *) value) intValue]];
    (void) [((JavaLangStringBuffer *) nil_chk(sbuffer)) appendWithNSString:OrgOssPdfreporterEngineUtilJRStyledTextParser_QUOTE_];
  }
  value = [((id<JavaUtilMap>) nil_chk(attrs)) getWithId:[OrgOssPdfreporterEngineUtilJRTextAttribute PDF_FONT_NAME]];
  oldValue = [((id<JavaUtilMap>) nil_chk(parentAttrs)) getWithId:[OrgOssPdfreporterEngineUtilJRTextAttribute PDF_FONT_NAME]];
  if (value != nil && ![nil_chk(value) isEqual:oldValue]) {
    (void) [((JavaLangStringBuffer *) nil_chk(sbuffer)) appendWithNSString:OrgOssPdfreporterEngineUtilJRStyledTextParser_SPACE_];
    (void) [((JavaLangStringBuffer *) nil_chk(sbuffer)) appendWithNSString:OrgOssPdfreporterEngineUtilJRStyledTextParser_ATTRIBUTE_pdfFontName_];
    (void) [((JavaLangStringBuffer *) nil_chk(sbuffer)) appendWithNSString:OrgOssPdfreporterEngineUtilJRStyledTextParser_EQUAL_QUOTE_];
    (void) [((JavaLangStringBuffer *) nil_chk(sbuffer)) appendWithId:value];
    (void) [((JavaLangStringBuffer *) nil_chk(sbuffer)) appendWithNSString:OrgOssPdfreporterEngineUtilJRStyledTextParser_QUOTE_];
  }
  value = [((id<JavaUtilMap>) nil_chk(attrs)) getWithId:[OrgOssPdfreporterEngineUtilJRTextAttribute PDF_ENCODING]];
  oldValue = [((id<JavaUtilMap>) nil_chk(parentAttrs)) getWithId:[OrgOssPdfreporterEngineUtilJRTextAttribute PDF_ENCODING]];
  if (value != nil && ![nil_chk(value) isEqual:oldValue]) {
    (void) [((JavaLangStringBuffer *) nil_chk(sbuffer)) appendWithNSString:OrgOssPdfreporterEngineUtilJRStyledTextParser_SPACE_];
    (void) [((JavaLangStringBuffer *) nil_chk(sbuffer)) appendWithNSString:OrgOssPdfreporterEngineUtilJRStyledTextParser_ATTRIBUTE_pdfEncoding_];
    (void) [((JavaLangStringBuffer *) nil_chk(sbuffer)) appendWithNSString:OrgOssPdfreporterEngineUtilJRStyledTextParser_EQUAL_QUOTE_];
    (void) [((JavaLangStringBuffer *) nil_chk(sbuffer)) appendWithId:value];
    (void) [((JavaLangStringBuffer *) nil_chk(sbuffer)) appendWithNSString:OrgOssPdfreporterEngineUtilJRStyledTextParser_QUOTE_];
  }
  value = [((id<JavaUtilMap>) nil_chk(attrs)) getWithId:[OrgOssPdfreporterEngineUtilJRTextAttribute IS_PDF_EMBEDDED]];
  oldValue = [((id<JavaUtilMap>) nil_chk(parentAttrs)) getWithId:[OrgOssPdfreporterEngineUtilJRTextAttribute IS_PDF_EMBEDDED]];
  if (value != nil && ![nil_chk(value) isEqual:oldValue]) {
    (void) [((JavaLangStringBuffer *) nil_chk(sbuffer)) appendWithNSString:OrgOssPdfreporterEngineUtilJRStyledTextParser_SPACE_];
    (void) [((JavaLangStringBuffer *) nil_chk(sbuffer)) appendWithNSString:OrgOssPdfreporterEngineUtilJRStyledTextParser_ATTRIBUTE_isPdfEmbedded_];
    (void) [((JavaLangStringBuffer *) nil_chk(sbuffer)) appendWithNSString:OrgOssPdfreporterEngineUtilJRStyledTextParser_EQUAL_QUOTE_];
    (void) [((JavaLangStringBuffer *) nil_chk(sbuffer)) appendWithId:value];
    (void) [((JavaLangStringBuffer *) nil_chk(sbuffer)) appendWithNSString:OrgOssPdfreporterEngineUtilJRStyledTextParser_QUOTE_];
  }
  value = [((id<JavaUtilMap>) nil_chk(attrs)) getWithId:[OrgOssPdfreporterFontTextTextAttribute FOREGROUND]];
  oldValue = [((id<JavaUtilMap>) nil_chk(parentAttrs)) getWithId:[OrgOssPdfreporterFontTextTextAttribute FOREGROUND]];
  if (value != nil && ![nil_chk(value) isEqual:oldValue]) {
    (void) [((JavaLangStringBuffer *) nil_chk(sbuffer)) appendWithNSString:OrgOssPdfreporterEngineUtilJRStyledTextParser_SPACE_];
    (void) [((JavaLangStringBuffer *) nil_chk(sbuffer)) appendWithNSString:OrgOssPdfreporterEngineUtilJRStyledTextParser_ATTRIBUTE_forecolor_];
    (void) [((JavaLangStringBuffer *) nil_chk(sbuffer)) appendWithNSString:OrgOssPdfreporterEngineUtilJRStyledTextParser_EQUAL_QUOTE_];
    (void) [((JavaLangStringBuffer *) nil_chk(sbuffer)) appendWithNSString:OrgOssPdfreporterEngineUtilJRStyledTextParser_SHARP_];
    (void) [((JavaLangStringBuffer *) nil_chk(sbuffer)) appendWithNSString:[OrgOssPdfreporterEngineUtilJRColorUtil getColorHexaWithOrgOssPdfreporterGeometryIColor:(id<OrgOssPdfreporterGeometryIColor>) value]];
    (void) [((JavaLangStringBuffer *) nil_chk(sbuffer)) appendWithNSString:OrgOssPdfreporterEngineUtilJRStyledTextParser_QUOTE_];
  }
  value = [((id<JavaUtilMap>) nil_chk(attrs)) getWithId:[OrgOssPdfreporterFontTextTextAttribute BACKGROUND]];
  oldValue = [((id<JavaUtilMap>) nil_chk(parentAttrs)) getWithId:[OrgOssPdfreporterFontTextTextAttribute BACKGROUND]];
  if (value != nil && ![nil_chk(value) isEqual:oldValue]) {
    (void) [((JavaLangStringBuffer *) nil_chk(sbuffer)) appendWithNSString:OrgOssPdfreporterEngineUtilJRStyledTextParser_SPACE_];
    (void) [((JavaLangStringBuffer *) nil_chk(sbuffer)) appendWithNSString:OrgOssPdfreporterEngineUtilJRStyledTextParser_ATTRIBUTE_backcolor_];
    (void) [((JavaLangStringBuffer *) nil_chk(sbuffer)) appendWithNSString:OrgOssPdfreporterEngineUtilJRStyledTextParser_EQUAL_QUOTE_];
    (void) [((JavaLangStringBuffer *) nil_chk(sbuffer)) appendWithNSString:OrgOssPdfreporterEngineUtilJRStyledTextParser_SHARP_];
    (void) [((JavaLangStringBuffer *) nil_chk(sbuffer)) appendWithNSString:[OrgOssPdfreporterEngineUtilJRColorUtil getColorHexaWithOrgOssPdfreporterGeometryIColor:(id<OrgOssPdfreporterGeometryIColor>) value]];
    (void) [((JavaLangStringBuffer *) nil_chk(sbuffer)) appendWithNSString:OrgOssPdfreporterEngineUtilJRStyledTextParser_QUOTE_];
  }
  return sbuffer;
}

- (NSString *)getFirstTextOccurenceWithOrgOssPdfreporterUsesOrgW3cDomNode:(id<OrgOssPdfreporterUsesOrgW3cDomNode>)node {
  if (node != nil) {
    if ([((id<OrgOssPdfreporterUsesOrgW3cDomNode>) nil_chk(node)) getNodeValue] != nil) {
      return [((id<OrgOssPdfreporterUsesOrgW3cDomNode>) nil_chk(node)) getNodeValue];
    }
    id<OrgOssPdfreporterUsesOrgW3cDomNodeList> nodeList = [node getChildNodes];
    for (int i = 0; i < [((id<OrgOssPdfreporterUsesOrgW3cDomNodeList>) nil_chk(nodeList)) getLength]; i++) {
      NSString *firstOccurence = [self getFirstTextOccurenceWithOrgOssPdfreporterUsesOrgW3cDomNode:[((id<OrgOssPdfreporterUsesOrgW3cDomNodeList>) nil_chk(nodeList)) itemWithInt:i]];
      if (firstOccurence != nil) {
        return firstOccurence;
      }
    }
  }
  return nil;
}

- (void)errorWithOrgOssPdfreporterXmlParsersXMLParseException:(OrgOssPdfreporterXmlParsersXMLParseException *)e {
}

- (void)fatalErrorWithOrgOssPdfreporterXmlParsersXMLParseException:(OrgOssPdfreporterXmlParsersXMLParseException *)e {
}

- (void)warningWithOrgOssPdfreporterXmlParsersXMLParseException:(OrgOssPdfreporterXmlParsersXMLParseException *)e {
}

+ (void)initialize {
  if (self == [OrgOssPdfreporterEngineUtilJRStyledTextParser class]) {
    OrgOssPdfreporterEngineUtilJRStyledTextParser_AVAILABLE_FONT_FACE_NAMES_ = [[JavaUtilHashSet alloc] init];
    OrgOssPdfreporterEngineUtilJRStyledTextParser_instance_ = [[OrgOssPdfreporterEngineUtilJRStyledTextParser alloc] init];
    {
      id<JavaUtilList> families = [((id<OrgOssPdfreporterExtensionsExtensionsRegistry>) nil_chk([OrgOssPdfreporterExtensionsExtensionsEnvironment getExtensionsRegistry])) getExtensionsWithIOSClass:[IOSClass classWithProtocol:@protocol(OrgOssPdfreporterEngineFontsFontFamily)]];
      for (id<JavaUtilIterator> itf = [((id<JavaUtilList>) nil_chk(families)) iterator]; [((id<JavaUtilIterator>) nil_chk(itf)) hasNext]; ) {
        id<OrgOssPdfreporterEngineFontsFontFamily> family = [((id<JavaUtilIterator>) nil_chk(itf)) next];
        [((id<JavaUtilSet>) nil_chk(OrgOssPdfreporterEngineUtilJRStyledTextParser_AVAILABLE_FONT_FACE_NAMES_)) addWithId:[((id<OrgOssPdfreporterEngineFontsFontFamily>) nil_chk(family)) getName]];
      }
      [((id<JavaUtilSet>) nil_chk(OrgOssPdfreporterEngineUtilJRStyledTextParser_AVAILABLE_FONT_FACE_NAMES_)) addAllWithJavaUtilCollection:[((id<OrgOssPdfreporterFontIFontManager>) nil_chk([((id<OrgOssPdfreporterFontFactoryIFontFactory>) nil_chk([OrgOssPdfreporterRegistryApiRegistry getFontFactory])) getFontManager])) getFontFamilyNames]];
    }
  }
}

- (void)copyAllPropertiesTo:(id)copy {
  [super copyAllPropertiesTo:copy];
  OrgOssPdfreporterEngineUtilJRStyledTextParser *typedCopy = (OrgOssPdfreporterEngineUtilJRStyledTextParser *) copy;
  typedCopy.locale = locale_;
  typedCopy.documentBuilder = documentBuilder_;
  typedCopy.hyperlink = hyperlink_;
}

@end
