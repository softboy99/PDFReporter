//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: pdfreporter-core/src/org/oss/pdfreporter/engine/util/xml/JRXmlDocumentProducer.java
//
//  Created by kendra on 9/27/13.
//

#include "java/io/File.h"
#include "java/io/IOException.h"
#include "java/io/InputStream.h"
#include "org/oss/pdfreporter/engine/JRException.h"
#include "org/oss/pdfreporter/engine/util/JRXmlUtils.h"
#include "org/oss/pdfreporter/engine/util/xml/JRXmlDocumentProducer.h"
#include "org/oss/pdfreporter/uses/org/w3c/dom/Document.h"
#include "org/oss/pdfreporter/uses/org/w3c/dom/Element.h"
#include "org/oss/pdfreporter/uses/org/w3c/dom/Node.h"
#include "org/oss/pdfreporter/xml/parsers/IDocumentBuilder.h"
#include "org/oss/pdfreporter/xml/parsers/IDocumentBuilderFactory.h"
#include "org/oss/pdfreporter/xml/parsers/ParserConfigurationException.h"
#include "org/oss/pdfreporter/xml/parsers/XMLParseException.h"

@implementation OrgOssPdfreporterEngineUtilXmlJRXmlDocumentProducer

@synthesize file = file_;
@synthesize inputStream = inputStream_;
@synthesize uri = uri_;
@synthesize documentBuilderFactory = documentBuilderFactory_;

- (id)init {
  return [super init];
}

- (id)initWithJavaIoFile:(JavaIoFile *)file {
  if ((self = [super init])) {
    self.file = file;
  }
  return self;
}

- (id)initWithJavaIoInputStream:(JavaIoInputStream *)inputStream {
  if ((self = [super init])) {
    self.inputStream = inputStream;
  }
  return self;
}

- (id)initWithNSString:(NSString *)uri {
  if ((self = [super init])) {
    self.uri = uri;
  }
  return self;
}

- (id<OrgOssPdfreporterXmlParsersIDocumentBuilderFactory>)getDocumentBuilderFactory {
  return documentBuilderFactory_;
}

- (void)setDocumentBuilderFactoryWithOrgOssPdfreporterXmlParsersIDocumentBuilderFactory:(id<OrgOssPdfreporterXmlParsersIDocumentBuilderFactory>)documentBuilderFactory {
  self.documentBuilderFactory = documentBuilderFactory;
}

- (void)setFileWithJavaIoFile:(JavaIoFile *)file {
  self.file = file;
}

- (void)setInputStreamWithJavaIoInputStream:(JavaIoInputStream *)inputStream {
  self.inputStream = inputStream;
}

- (void)setUriWithNSString:(NSString *)uri {
  self.uri = uri;
}

- (id<OrgOssPdfreporterUsesOrgW3cDomDocument>)getDocument {
  @try {
    if (file_ != nil) {
      return [((id<OrgOssPdfreporterXmlParsersIDocumentBuilder>) nil_chk([self getDocumentBuilder])) parseWithJavaIoFile:file_];
    }
    else if (inputStream_ != nil) {
      return [((id<OrgOssPdfreporterXmlParsersIDocumentBuilder>) nil_chk([self getDocumentBuilder])) parseWithJavaIoInputStream:inputStream_];
    }
    else if (uri_ != nil) {
      return [((id<OrgOssPdfreporterXmlParsersIDocumentBuilder>) nil_chk([self getDocumentBuilder])) parseWithNSString:uri_];
    }
  }
  @catch (OrgOssPdfreporterXmlParsersXMLParseException *e) {
    @throw [[OrgOssPdfreporterEngineJRException alloc] initWithNSString:@"Failed to parse the xml document" withJavaLangThrowable:e];
  }
  @catch (JavaIoIOException *e) {
    @throw [[OrgOssPdfreporterEngineJRException alloc] initWithNSString:@"Failed to parse the xml document" withJavaLangThrowable:e];
  }
  return nil;
}

- (id<OrgOssPdfreporterUsesOrgW3cDomDocument>)getDocumentWithOrgOssPdfreporterUsesOrgW3cDomNode:(id<OrgOssPdfreporterUsesOrgW3cDomNode>)sourceNode {
  id<OrgOssPdfreporterUsesOrgW3cDomDocument> doc = [((id<OrgOssPdfreporterXmlParsersIDocumentBuilder>) nil_chk([self getDocumentBuilder])) newDocument];
  id<OrgOssPdfreporterUsesOrgW3cDomNode> source;
  if ([((id<OrgOssPdfreporterUsesOrgW3cDomNode>) nil_chk(sourceNode)) getNodeType] == OrgOssPdfreporterUsesOrgW3cDomNode_DOCUMENT_NODE) {
    source = [((id<OrgOssPdfreporterUsesOrgW3cDomDocument>) sourceNode) getDocumentElement];
  }
  else {
    source = sourceNode;
  }
  id<OrgOssPdfreporterUsesOrgW3cDomNode> node = [((id<OrgOssPdfreporterUsesOrgW3cDomDocument>) nil_chk(doc)) importNodeWithOrgOssPdfreporterUsesOrgW3cDomNode:source withBOOL:YES];
  (void) [((id<OrgOssPdfreporterUsesOrgW3cDomDocument>) nil_chk(doc)) appendChildWithOrgOssPdfreporterUsesOrgW3cDomNode:node];
  return doc;
}

- (id<OrgOssPdfreporterXmlParsersIDocumentBuilder>)getDocumentBuilder {
  @try {
    if (documentBuilderFactory_ != nil) {
      return [documentBuilderFactory_ newDocumentBuilder];
    }
    else {
      return [OrgOssPdfreporterEngineUtilJRXmlUtils createDocumentBuilder];
    }
  }
  @catch (OrgOssPdfreporterXmlParsersParserConfigurationException *e) {
    @throw [[OrgOssPdfreporterEngineJRException alloc] initWithNSString:@"Failed to create a document builder" withJavaLangThrowable:e];
  }
}

- (void)copyAllPropertiesTo:(id)copy {
  [super copyAllPropertiesTo:copy];
  OrgOssPdfreporterEngineUtilXmlJRXmlDocumentProducer *typedCopy = (OrgOssPdfreporterEngineUtilXmlJRXmlDocumentProducer *) copy;
  typedCopy.file = file_;
  typedCopy.inputStream = inputStream_;
  typedCopy.uri = uri_;
  typedCopy.documentBuilderFactory = documentBuilderFactory_;
}

@end
