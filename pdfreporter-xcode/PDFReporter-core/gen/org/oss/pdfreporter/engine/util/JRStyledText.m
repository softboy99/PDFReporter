//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: pdfreporter-core/src/org/oss/pdfreporter/engine/util/JRStyledText.java
//
//  Created by kendra on 9/27/13.
//

#include "IOSCharArray.h"
#include "IOSShortArray.h"
#include "java/lang/CloneNotSupportedException.h"
#include "java/lang/Float.h"
#include "java/lang/Integer.h"
#include "java/lang/StringBuffer.h"
#include "java/util/ArrayList.h"
#include "java/util/HashMap.h"
#include "java/util/HashSet.h"
#include "java/util/Iterator.h"
#include "java/util/List.h"
#include "java/util/Locale.h"
#include "java/util/Map.h"
#include "java/util/Set.h"
#include "org/oss/pdfreporter/engine/DefaultJasperReportsContext.h"
#include "org/oss/pdfreporter/engine/JRPropertiesUtil.h"
#include "org/oss/pdfreporter/engine/JRRuntimeException.h"
#include "org/oss/pdfreporter/engine/JasperReportsContext.h"
#include "org/oss/pdfreporter/engine/fonts/FontUtil.h"
#include "org/oss/pdfreporter/engine/util/JRStyledText.h"
#include "org/oss/pdfreporter/font/IFont.h"
#include "org/oss/pdfreporter/font/IFontManager.h"
#include "org/oss/pdfreporter/font/factory/IFontFactory.h"
#include "org/oss/pdfreporter/font/text/TextAttribute.h"
#include "org/oss/pdfreporter/registry/ApiRegistry.h"
#include "org/oss/pdfreporter/uses/java/awt/text/AttributedString.h"
#include "org/oss/pdfreporter/uses/java/awt/text/IAttributedCharacterIterator.h"

@implementation OrgOssPdfreporterEngineUtilJRStyledText

static NSString * OrgOssPdfreporterEngineUtilJRStyledText_PROPERTY_AWT_IGNORE_MISSING_FONT_ = @"net.sf.jasperreports.awt.ignore.missing.font";
static id<JavaUtilSet> OrgOssPdfreporterEngineUtilJRStyledText_FONT_ATTRS_;

@synthesize sbuffer = sbuffer_;
@synthesize runs = runs_;
@synthesize attributedString = attributedString_;
@synthesize awtAttributedString = awtAttributedString_;
@synthesize globalAttributes = globalAttributes_;
@synthesize locale = locale_;

+ (NSString *)PROPERTY_AWT_IGNORE_MISSING_FONT {
  return OrgOssPdfreporterEngineUtilJRStyledText_PROPERTY_AWT_IGNORE_MISSING_FONT_;
}

+ (id<JavaUtilSet>)FONT_ATTRS {
  return OrgOssPdfreporterEngineUtilJRStyledText_FONT_ATTRS_;
}

- (id)init {
  return [self initOrgOssPdfreporterEngineUtilJRStyledTextWithJavaUtilLocale:nil];
}

- (id)initOrgOssPdfreporterEngineUtilJRStyledTextWithJavaUtilLocale:(JavaUtilLocale *)locale {
  if ((self = [super init])) {
    sbuffer_ = [[JavaLangStringBuffer alloc] init];
    runs_ = [[JavaUtilArrayList alloc] init];
    self.locale = locale;
  }
  return self;
}

- (id)initWithJavaUtilLocale:(JavaUtilLocale *)locale {
  return [self initOrgOssPdfreporterEngineUtilJRStyledTextWithJavaUtilLocale:locale];
}

- (void)appendWithNSString:(NSString *)text {
  (void) [((JavaLangStringBuffer *) nil_chk(sbuffer_)) appendWithNSString:text];
  attributedString_ = nil;
  awtAttributedString_ = nil;
}

- (void)addRunWithOrgOssPdfreporterEngineUtilJRStyledText_Run:(OrgOssPdfreporterEngineUtilJRStyledText_Run *)run {
  [((id<JavaUtilList>) nil_chk(runs_)) addWithId:run];
  attributedString_ = nil;
  awtAttributedString_ = nil;
}

- (int)length {
  return [((JavaLangStringBuffer *) nil_chk(sbuffer_)) sequenceLength];
}

- (NSString *)getText {
  return [((JavaLangStringBuffer *) nil_chk(sbuffer_)) description];
}

- (JavaUtilLocale *)getLocale {
  return locale_;
}

- (OrgOssPdfreporterUsesJavaAwtTextAttributedString *)getAttributedString {
  if (attributedString_ == nil) {
    attributedString_ = [[OrgOssPdfreporterUsesJavaAwtTextAttributedString alloc] initWithNSString:[((JavaLangStringBuffer *) nil_chk(sbuffer_)) description]];
    for (int i = [((id<JavaUtilList>) nil_chk(runs_)) size] - 1; i >= 0; i--) {
      OrgOssPdfreporterEngineUtilJRStyledText_Run *run = [((id<JavaUtilList>) nil_chk(runs_)) getWithInt:i];
      if (((OrgOssPdfreporterEngineUtilJRStyledText_Run *) nil_chk(run)).startIndex != ((OrgOssPdfreporterEngineUtilJRStyledText_Run *) nil_chk(run)).endIndex && ((OrgOssPdfreporterEngineUtilJRStyledText_Run *) nil_chk(run)).attributes != nil) {
        [attributedString_ addAttributesWithJavaUtilMap:((OrgOssPdfreporterEngineUtilJRStyledText_Run *) nil_chk(run)).attributes withInt:((OrgOssPdfreporterEngineUtilJRStyledText_Run *) nil_chk(run)).startIndex withInt:((OrgOssPdfreporterEngineUtilJRStyledText_Run *) nil_chk(run)).endIndex];
      }
    }
  }
  return attributedString_;
}

- (OrgOssPdfreporterUsesJavaAwtTextAttributedString *)getAwtAttributedStringWithBOOL:(BOOL)ignoreMissingFont {
  return [self getAwtAttributedStringWithOrgOssPdfreporterEngineJasperReportsContext:[OrgOssPdfreporterEngineDefaultJasperReportsContext getInstance] withBOOL:ignoreMissingFont];
}

- (OrgOssPdfreporterUsesJavaAwtTextAttributedString *)getAwtAttributedStringWithOrgOssPdfreporterEngineJasperReportsContext:(id<OrgOssPdfreporterEngineJasperReportsContext>)jasperReportsContext
                                                                                                                   withBOOL:(BOOL)ignoreMissingFont {
  if (awtAttributedString_ == nil) {
    awtAttributedString_ = [[OrgOssPdfreporterUsesJavaAwtTextAttributedString alloc] initWithNSString:[((JavaLangStringBuffer *) nil_chk(sbuffer_)) description]];
    for (int i = [((id<JavaUtilList>) nil_chk(runs_)) size] - 1; i >= 0; i--) {
      OrgOssPdfreporterEngineUtilJRStyledText_Run *run = [((id<JavaUtilList>) nil_chk(runs_)) getWithInt:i];
      if (((OrgOssPdfreporterEngineUtilJRStyledText_Run *) nil_chk(run)).startIndex != ((OrgOssPdfreporterEngineUtilJRStyledText_Run *) nil_chk(run)).endIndex && ((OrgOssPdfreporterEngineUtilJRStyledText_Run *) nil_chk(run)).attributes != nil) {
        [awtAttributedString_ addAttributesWithJavaUtilMap:((OrgOssPdfreporterEngineUtilJRStyledText_Run *) nil_chk(run)).attributes withInt:((OrgOssPdfreporterEngineUtilJRStyledText_Run *) nil_chk(run)).startIndex withInt:((OrgOssPdfreporterEngineUtilJRStyledText_Run *) nil_chk(run)).endIndex];
      }
    }
    id<OrgOssPdfreporterUsesJavaAwtTextIAttributedCharacterIterator> iterator = [awtAttributedString_ getIterator];
    int runLimit = 0;
    while (runLimit < [((id<OrgOssPdfreporterUsesJavaAwtTextIAttributedCharacterIterator>) nil_chk(iterator)) getEndIndex] && (runLimit = [((id<OrgOssPdfreporterUsesJavaAwtTextIAttributedCharacterIterator>) nil_chk(iterator)) getRunLimitWithJavaUtilSet:OrgOssPdfreporterEngineUtilJRStyledText_FONT_ATTRS_]) <= [((id<OrgOssPdfreporterUsesJavaAwtTextIAttributedCharacterIterator>) nil_chk(iterator)) getEndIndex]) {
      id<JavaUtilMap> attrs = [((id<OrgOssPdfreporterUsesJavaAwtTextIAttributedCharacterIterator>) nil_chk(iterator)) getAttributes];
      NSString *familyName = (NSString *) [((id<JavaUtilMap>) nil_chk(attrs)) getWithId:[OrgOssPdfreporterFontTextTextAttribute FAMILY]];
      id<OrgOssPdfreporterFontIFont> awtFont = [((OrgOssPdfreporterEngineFontsFontUtil *) nil_chk([OrgOssPdfreporterEngineFontsFontUtil getInstanceWithOrgOssPdfreporterEngineJasperReportsContext:jasperReportsContext])) getAwtFontFromBundlesWithNSString:familyName withOrgOssPdfreporterFontIFont_FontStyleEnum:[self getFontStyleFromAttributesWithJavaUtilMap:attrs] withInt:[((JavaLangFloat *) [((id<JavaUtilMap>) nil_chk(attrs)) getWithId:[OrgOssPdfreporterFontTextTextAttribute SIZE]]) intValue] withJavaUtilLocale:locale_ withBOOL:ignoreMissingFont];
      if (awtFont == nil) {
        [((OrgOssPdfreporterEngineFontsFontUtil *) nil_chk([OrgOssPdfreporterEngineFontsFontUtil getInstanceWithOrgOssPdfreporterEngineJasperReportsContext:jasperReportsContext])) checkAwtFontWithNSString:familyName withBOOL:ignoreMissingFont];
      }
      else {
        id<OrgOssPdfreporterFontIFontManager> fontManager = [((id<OrgOssPdfreporterFontFactoryIFontFactory>) nil_chk([OrgOssPdfreporterRegistryApiRegistry getFontFactory])) getFontManager];
        JavaLangInteger *superscript = (JavaLangInteger *) [((id<JavaUtilMap>) nil_chk(attrs)) getWithId:[OrgOssPdfreporterFontTextTextAttribute SUPERSCRIPT]];
        if ([((JavaLangInteger *) nil_chk([OrgOssPdfreporterFontTextTextAttribute SUPERSCRIPT_SUPER])) isEqual:superscript]) {
          awtFont = [((id<OrgOssPdfreporterFontIFontManager>) nil_chk(fontManager)) getModifiedFontWithOrgOssPdfreporterFontIFont:awtFont withFloat:[awtFont getSize] withOrgOssPdfreporterFontIFont_FontDecorationEnum:[OrgOssPdfreporterFontIFont_FontDecorationEnum SUPERSCRIPT]];
        }
        else if ([((JavaLangInteger *) nil_chk([OrgOssPdfreporterFontTextTextAttribute SUPERSCRIPT_SUB])) isEqual:superscript]) {
          awtFont = [((id<OrgOssPdfreporterFontIFontManager>) nil_chk(fontManager)) getModifiedFontWithOrgOssPdfreporterFontIFont:awtFont withFloat:[awtFont getSize] withOrgOssPdfreporterFontIFont_FontDecorationEnum:[OrgOssPdfreporterFontIFont_FontDecorationEnum SUBSCRIPT]];
        }
        [((OrgOssPdfreporterUsesJavaAwtTextAttributedString *) nil_chk(awtAttributedString_)) addAttributeWithOrgOssPdfreporterUsesJavaAwtTextIAttributedCharacterIterator_Attribute:[OrgOssPdfreporterFontTextTextAttribute FONT] withId:awtFont withInt:[((id<OrgOssPdfreporterUsesJavaAwtTextIAttributedCharacterIterator>) nil_chk(iterator)) getIndex] withInt:runLimit];
      }
      [((id<OrgOssPdfreporterUsesJavaAwtTextIAttributedCharacterIterator>) nil_chk(iterator)) setIndexWithInt:runLimit];
    }
  }
  return awtAttributedString_;
}

- (OrgOssPdfreporterFontIFont_FontStyleEnum *)getFontStyleFromAttributesWithJavaUtilMap:(id<JavaUtilMap>)attrs {
  BOOL bold = [((JavaLangFloat *) nil_chk([OrgOssPdfreporterFontTextTextAttribute WEIGHT_BOLD])) isEqual:[((id<JavaUtilMap>) nil_chk(attrs)) getWithId:[OrgOssPdfreporterFontTextTextAttribute WEIGHT]]];
  BOOL italic = [((JavaLangFloat *) nil_chk([OrgOssPdfreporterFontTextTextAttribute POSTURE_OBLIQUE])) isEqual:[((id<JavaUtilMap>) nil_chk(attrs)) getWithId:[OrgOssPdfreporterFontTextTextAttribute POSTURE]]];
  return bold && italic ? [OrgOssPdfreporterFontIFont_FontStyleEnum BOLD_OBLIQUE] : bold ? [OrgOssPdfreporterFontIFont_FontStyleEnum BOLD] : italic ? [OrgOssPdfreporterFontIFont_FontStyleEnum OBLIQUE] : [OrgOssPdfreporterFontIFont_FontStyleEnum PLAIN];
}

- (id<JavaUtilList>)getRuns {
  return runs_;
}

- (void)setGlobalAttributesWithJavaUtilMap:(id<JavaUtilMap>)attributes {
  self.globalAttributes = attributes;
  [self addRunWithOrgOssPdfreporterEngineUtilJRStyledText_Run:[[OrgOssPdfreporterEngineUtilJRStyledText_Run alloc] initWithJavaUtilMap:attributes withInt:0 withInt:[self length]]];
}

- (id<JavaUtilMap>)getGlobalAttributes {
  return globalAttributes_;
}

- (id)clone {
  return [super clone];
}

+ (id<JavaUtilMap>)cloneAttributesMapWithJavaUtilMap:(id<JavaUtilMap>)attributes {
  return attributes == nil ? nil : [[JavaUtilHashMap alloc] initWithJavaUtilMap:attributes];
}

- (OrgOssPdfreporterEngineUtilJRStyledText *)cloneText {
  @try {
    OrgOssPdfreporterEngineUtilJRStyledText *clone = (OrgOssPdfreporterEngineUtilJRStyledText *) [super clone];
    ((OrgOssPdfreporterEngineUtilJRStyledText *) nil_chk(clone)).globalAttributes = [OrgOssPdfreporterEngineUtilJRStyledText cloneAttributesMapWithJavaUtilMap:globalAttributes_];
    ((OrgOssPdfreporterEngineUtilJRStyledText *) nil_chk(clone)).runs = [[JavaUtilArrayList alloc] initWithInt:[((id<JavaUtilList>) nil_chk(runs_)) size]];
    for (id<JavaUtilIterator> it = [((id<JavaUtilList>) nil_chk(runs_)) iterator]; [((id<JavaUtilIterator>) nil_chk(it)) hasNext]; ) {
      OrgOssPdfreporterEngineUtilJRStyledText_Run *run = [((id<JavaUtilIterator>) nil_chk(it)) next];
      OrgOssPdfreporterEngineUtilJRStyledText_Run *runClone = [((OrgOssPdfreporterEngineUtilJRStyledText_Run *) nil_chk(run)) cloneRun];
      [((id<JavaUtilList>) nil_chk(((OrgOssPdfreporterEngineUtilJRStyledText *) nil_chk(clone)).runs)) addWithId:runClone];
    }
    return clone;
  }
  @catch (JavaLangCloneNotSupportedException *e) {
    @throw [[OrgOssPdfreporterEngineJRRuntimeException alloc] initWithJavaLangThrowable:e];
  }
}

- (void)insertWithNSString:(NSString *)str
            withShortArray:(IOSShortArray *)offsets {
  int insertLength = [((NSString *) nil_chk(str)) length];
  JavaLangStringBuffer *newText = [[JavaLangStringBuffer alloc] initWithInt:[((JavaLangStringBuffer *) nil_chk(sbuffer_)) sequenceLength] + insertLength * (int) [((IOSShortArray *) nil_chk(offsets)) count]];
  IOSCharArray *buffer = nil;
  int offset = 0;
  for (int i = 0; i < (int) [((IOSShortArray *) nil_chk(offsets)) count]; i++) {
    int charCount = [((IOSShortArray *) nil_chk(offsets)) shortAtIndex:i];
    int prevOffset = offset;
    offset += [((IOSShortArray *) nil_chk(offsets)) shortAtIndex:i];
    if (buffer == nil || (int) [((IOSCharArray *) nil_chk(buffer)) count] < charCount) {
      buffer = [IOSCharArray arrayWithLength:charCount];
    }
    [((JavaLangStringBuffer *) nil_chk(sbuffer_)) getCharsWithInt:prevOffset withInt:offset withCharArray:buffer withInt:0];
    (void) [((JavaLangStringBuffer *) nil_chk(newText)) appendWithCharArray:buffer withInt:0 withInt:charCount];
    (void) [((JavaLangStringBuffer *) nil_chk(newText)) appendWithNSString:str];
    for (id<JavaUtilIterator> it = [((id<JavaUtilList>) nil_chk(runs_)) iterator]; [((id<JavaUtilIterator>) nil_chk(it)) hasNext]; ) {
      OrgOssPdfreporterEngineUtilJRStyledText_Run *run = [((id<JavaUtilIterator>) nil_chk(it)) next];
      if (((OrgOssPdfreporterEngineUtilJRStyledText_Run *) nil_chk(run)).startIndex >= offset) {
        ((OrgOssPdfreporterEngineUtilJRStyledText_Run *) nil_chk(run)).startIndex += insertLength;
        ((OrgOssPdfreporterEngineUtilJRStyledText_Run *) nil_chk(run)).endIndex += insertLength;
      }
      else if (((OrgOssPdfreporterEngineUtilJRStyledText_Run *) nil_chk(run)).endIndex >= offset) {
        ((OrgOssPdfreporterEngineUtilJRStyledText_Run *) nil_chk(run)).endIndex += insertLength;
      }
    }
  }
  int charCount = [((JavaLangStringBuffer *) nil_chk(sbuffer_)) sequenceLength] - offset;
  if (buffer == nil || (int) [((IOSCharArray *) nil_chk(buffer)) count] < charCount) {
    buffer = [IOSCharArray arrayWithLength:charCount];
  }
  [((JavaLangStringBuffer *) nil_chk(sbuffer_)) getCharsWithInt:offset withInt:[((JavaLangStringBuffer *) nil_chk(sbuffer_)) sequenceLength] withCharArray:buffer withInt:0];
  (void) [((JavaLangStringBuffer *) nil_chk(newText)) appendWithCharArray:buffer withInt:0 withInt:charCount];
  sbuffer_ = newText;
  attributedString_ = nil;
  awtAttributedString_ = nil;
}

+ (void)initialize {
  if (self == [OrgOssPdfreporterEngineUtilJRStyledText class]) {
    OrgOssPdfreporterEngineUtilJRStyledText_FONT_ATTRS_ = [[JavaUtilHashSet alloc] init];
    {
      [((id<JavaUtilSet>) nil_chk(OrgOssPdfreporterEngineUtilJRStyledText_FONT_ATTRS_)) addWithId:[OrgOssPdfreporterFontTextTextAttribute FAMILY]];
      [((id<JavaUtilSet>) nil_chk(OrgOssPdfreporterEngineUtilJRStyledText_FONT_ATTRS_)) addWithId:[OrgOssPdfreporterFontTextTextAttribute WEIGHT]];
      [((id<JavaUtilSet>) nil_chk(OrgOssPdfreporterEngineUtilJRStyledText_FONT_ATTRS_)) addWithId:[OrgOssPdfreporterFontTextTextAttribute POSTURE]];
      [((id<JavaUtilSet>) nil_chk(OrgOssPdfreporterEngineUtilJRStyledText_FONT_ATTRS_)) addWithId:[OrgOssPdfreporterFontTextTextAttribute SIZE]];
      [((id<JavaUtilSet>) nil_chk(OrgOssPdfreporterEngineUtilJRStyledText_FONT_ATTRS_)) addWithId:[OrgOssPdfreporterFontTextTextAttribute SUPERSCRIPT]];
    }
  }
}

- (id)copyWithZone:(NSZone *)zone {
  return [self clone];
}

- (void)copyAllPropertiesTo:(id)copy {
  [super copyAllPropertiesTo:copy];
  OrgOssPdfreporterEngineUtilJRStyledText *typedCopy = (OrgOssPdfreporterEngineUtilJRStyledText *) copy;
  typedCopy.sbuffer = sbuffer_;
  typedCopy.runs = runs_;
  typedCopy.attributedString = attributedString_;
  typedCopy.awtAttributedString = awtAttributedString_;
  typedCopy.globalAttributes = globalAttributes_;
  typedCopy.locale = locale_;
}

@end
@implementation OrgOssPdfreporterEngineUtilJRStyledText_Run

@synthesize attributes = attributes_;
@synthesize startIndex = startIndex_;
@synthesize endIndex = endIndex_;

- (id)initWithJavaUtilMap:(id<JavaUtilMap>)attributes
                  withInt:(int)startIndex
                  withInt:(int)endIndex {
  if ((self = [super init])) {
    self.attributes = attributes;
    self.startIndex = startIndex;
    self.endIndex = endIndex;
  }
  return self;
}

- (id)clone {
  return [self cloneRun];
}

- (OrgOssPdfreporterEngineUtilJRStyledText_Run *)cloneRun {
  @try {
    OrgOssPdfreporterEngineUtilJRStyledText_Run *clone = (OrgOssPdfreporterEngineUtilJRStyledText_Run *) [super clone];
    ((OrgOssPdfreporterEngineUtilJRStyledText_Run *) nil_chk(clone)).attributes = [OrgOssPdfreporterEngineUtilJRStyledText cloneAttributesMapWithJavaUtilMap:attributes_];
    return clone;
  }
  @catch (JavaLangCloneNotSupportedException *e) {
    @throw [[OrgOssPdfreporterEngineJRRuntimeException alloc] initWithJavaLangThrowable:e];
  }
}

- (id)copyWithZone:(NSZone *)zone {
  return [self clone];
}

- (void)copyAllPropertiesTo:(id)copy {
  [super copyAllPropertiesTo:copy];
  OrgOssPdfreporterEngineUtilJRStyledText_Run *typedCopy = (OrgOssPdfreporterEngineUtilJRStyledText_Run *) copy;
  typedCopy.attributes = attributes_;
  typedCopy.startIndex = startIndex_;
  typedCopy.endIndex = endIndex_;
}

@end
