//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: pdfreporter-core/src/org/oss/pdfreporter/engine/util/FileBufferedOutputStream.java
//
//  Created by kendra on 9/27/13.
//

#include "IOSByteArray.h"
#include "java/io/BufferedInputStream.h"
#include "java/io/BufferedOutputStream.h"
#include "java/io/ByteArrayOutputStream.h"
#include "java/io/File.h"
#include "java/io/FileInputStream.h"
#include "java/io/FileOutputStream.h"
#include "java/io/IOException.h"
#include "java/io/InputStream.h"
#include "java/io/OutputStream.h"
#include "java/lang/System.h"
#include "org/oss/pdfreporter/engine/JRPropertiesUtil.h"
#include "org/oss/pdfreporter/engine/JRRuntimeException.h"
#include "org/oss/pdfreporter/engine/util/FileBufferedOutputStream.h"
#include "org/oss/pdfreporter/engine/util/JRProperties.h"

@implementation OrgOssPdfreporterEngineUtilFileBufferedOutputStream

static NSString * OrgOssPdfreporterEngineUtilFileBufferedOutputStream_PROPERTY_MEMORY_THRESHOLD_ = @"net.sf.jasperreports.file.buffer.os.memory.threshold";

@synthesize memoryThreshold = memoryThreshold_;
@synthesize initialMemoryBufferSize = initialMemoryBufferSize_;
@synthesize inputBufferLength = inputBufferLength_;
@synthesize memoryOutput = memoryOutput_;
@synthesize size_ = size__;
@synthesize file = file_;
@synthesize fileOutput = fileOutput_;
@synthesize closed = closed_;
@synthesize disposed = disposed_;

+ (NSString *)PROPERTY_MEMORY_THRESHOLD {
  return OrgOssPdfreporterEngineUtilFileBufferedOutputStream_PROPERTY_MEMORY_THRESHOLD_;
}

+ (int)INFINIT_MEMORY_THRESHOLD {
  return OrgOssPdfreporterEngineUtilFileBufferedOutputStream_INFINIT_MEMORY_THRESHOLD;
}

+ (int)DEFAULT_INITIAL_MEMORY_BUFFER_SIZE {
  return OrgOssPdfreporterEngineUtilFileBufferedOutputStream_DEFAULT_INITIAL_MEMORY_BUFFER_SIZE;
}

+ (int)DEFAULT_INPUT_BUFFER_LENGTH {
  return OrgOssPdfreporterEngineUtilFileBufferedOutputStream_DEFAULT_INPUT_BUFFER_LENGTH;
}

- (id)init {
  return [self initOrgOssPdfreporterEngineUtilFileBufferedOutputStreamWithInt:[OrgOssPdfreporterEngineUtilJRProperties getIntegerPropertyWithNSString:OrgOssPdfreporterEngineUtilFileBufferedOutputStream_PROPERTY_MEMORY_THRESHOLD_ withInt:OrgOssPdfreporterEngineUtilFileBufferedOutputStream_INFINIT_MEMORY_THRESHOLD] withInt:OrgOssPdfreporterEngineUtilFileBufferedOutputStream_DEFAULT_INITIAL_MEMORY_BUFFER_SIZE withInt:OrgOssPdfreporterEngineUtilFileBufferedOutputStream_DEFAULT_INPUT_BUFFER_LENGTH];
}

- (id)initWithInt:(int)memoryThreshold {
  return [self initOrgOssPdfreporterEngineUtilFileBufferedOutputStreamWithInt:memoryThreshold withInt:OrgOssPdfreporterEngineUtilFileBufferedOutputStream_DEFAULT_INITIAL_MEMORY_BUFFER_SIZE withInt:OrgOssPdfreporterEngineUtilFileBufferedOutputStream_DEFAULT_INPUT_BUFFER_LENGTH];
}

- (id)initWithInt:(int)memoryThreshold
          withInt:(int)initialMemoryBufferSize {
  return [self initOrgOssPdfreporterEngineUtilFileBufferedOutputStreamWithInt:memoryThreshold withInt:initialMemoryBufferSize withInt:OrgOssPdfreporterEngineUtilFileBufferedOutputStream_DEFAULT_INPUT_BUFFER_LENGTH];
}

- (id)initOrgOssPdfreporterEngineUtilFileBufferedOutputStreamWithInt:(int)memoryThreshold
                                                             withInt:(int)initialMemoryBufferSize
                                                             withInt:(int)inputBufferLength {
  if ((self = [super init])) {
    self.memoryThreshold = memoryThreshold;
    self.initialMemoryBufferSize = initialMemoryBufferSize;
    self.inputBufferLength = inputBufferLength;
    size__ = 0;
    if (self.memoryThreshold == 0) {
      memoryOutput_ = nil;
    }
    else {
      int initialSize = self.initialMemoryBufferSize;
      if (initialSize > self.memoryThreshold) {
        initialSize = self.memoryThreshold;
      }
      memoryOutput_ = [[JavaIoByteArrayOutputStream alloc] initWithInt:initialSize];
    }
  }
  return self;
}

- (id)initWithInt:(int)memoryThreshold
          withInt:(int)initialMemoryBufferSize
          withInt:(int)inputBufferLength {
  return [self initOrgOssPdfreporterEngineUtilFileBufferedOutputStreamWithInt:memoryThreshold withInt:initialMemoryBufferSize withInt:inputBufferLength];
}

- (void)writeWithInt:(int)b {
  [self checkClosed];
  if ([self availableMemorySpace] > 0) {
    [((JavaIoByteArrayOutputStream *) nil_chk(memoryOutput_)) writeWithInt:b];
  }
  else {
    [((JavaIoBufferedOutputStream *) nil_chk([self ensureFileOutput])) writeWithInt:b];
  }
  ++size__;
}

- (int)availableMemorySpace {
  int availableMemorySpace;
  if (memoryOutput_ != nil && (memoryThreshold_ < 0 || [((JavaIoByteArrayOutputStream *) nil_chk(memoryOutput_)) size] < memoryThreshold_)) {
    availableMemorySpace = memoryThreshold_ - [((JavaIoByteArrayOutputStream *) nil_chk(memoryOutput_)) size];
  }
  else {
    availableMemorySpace = 0;
  }
  return availableMemorySpace;
}

- (JavaIoBufferedOutputStream *)ensureFileOutput {
  if (fileOutput_ == nil) {
    file_ = [JavaIoFile createTempFileWithNSString:@"file.buff.os." withNSString:@".tmp"];
    JavaIoFileOutputStream *fileOutputStream = [[JavaIoFileOutputStream alloc] initWithJavaIoFile:file_];
    fileOutput_ = [[JavaIoBufferedOutputStream alloc] initWithJavaIoOutputStream:fileOutputStream];
  }
  return fileOutput_;
}

- (void)writeWithByteArray:(IOSByteArray *)b
                   withInt:(int)off
                   withInt:(int)len {
  [self checkClosed];
  int memoryLen = [self availableMemorySpace];
  if (len < memoryLen) {
    memoryLen = len;
  }
  if (memoryLen > 0) {
    [((JavaIoByteArrayOutputStream *) nil_chk(memoryOutput_)) writeWithByteArray:b withInt:off withInt:memoryLen];
  }
  if (memoryLen < len) {
    [((JavaIoBufferedOutputStream *) nil_chk([self ensureFileOutput])) writeWithByteArray:b withInt:off + memoryLen withInt:len - memoryLen];
  }
  size__ += len;
}

- (void)checkClosed {
  if (closed_) {
    @throw [[OrgOssPdfreporterEngineJRRuntimeException alloc] initWithNSString:@"Output stream already closed."];
  }
}

- (void)close {
  if (!closed_ && fileOutput_ != nil) {
    [((JavaIoBufferedOutputStream *) nil_chk(fileOutput_)) flush];
    [((JavaIoBufferedOutputStream *) nil_chk(fileOutput_)) close];
  }
  closed_ = YES;
}

- (void)flush {
  if (fileOutput_ != nil) {
    [fileOutput_ flush];
  }
}

- (int)size {
  return size__;
}

- (void)writeDataWithJavaIoOutputStream:(JavaIoOutputStream *)outArg {
  if (!closed_) {
    [self close];
  }
  if (memoryOutput_ != nil) {
    [memoryOutput_ writeToWithJavaIoOutputStream:outArg];
  }
  if (file_ != nil) {
    JavaIoFileInputStream *fileInput = [[JavaIoFileInputStream alloc] initWithJavaIoFile:file_];
    BOOL inputClosed = NO;
    @try {
      IOSByteArray *buffer = [IOSByteArray arrayWithLength:inputBufferLength_];
      int read;
      while ((read = [((JavaIoFileInputStream *) nil_chk(fileInput)) readWithByteArray:buffer]) > 0) {
        [((JavaIoOutputStream *) nil_chk(outArg)) writeWithByteArray:buffer withInt:0 withInt:read];
      }
      [((JavaIoFileInputStream *) nil_chk(fileInput)) close];
      inputClosed = YES;
    }
    @finally {
      if (!inputClosed) {
        @try {
          [((JavaIoFileInputStream *) nil_chk(fileInput)) close];
        }
        @catch (JavaIoIOException *e) {
        }
      }
    }
  }
}

- (void)dispose {
  if (disposed_) {
    return;
  }
  BOOL success = YES;
  if (!closed_ && fileOutput_ != nil) {
    @try {
      [((JavaIoBufferedOutputStream *) nil_chk(fileOutput_)) close];
    }
    @catch (JavaIoIOException *e) {
      success = NO;
    }
  }
  if (file_ != nil && ![((JavaIoFile *) nil_chk(file_)) delete__]) {
    success = NO;
  }
  disposed_ = success;
}

- (void)dealloc {
  [self dispose];
  fileOutput_ = nil;
  file_ = nil;
  memoryOutput_ = nil;
}

- (JavaIoInputStream *)getDataInputStream {
  if (!closed_) {
    [self close];
  }
  return [[OrgOssPdfreporterEngineUtilFileBufferedOutputStream_DataStream alloc] initWithOrgOssPdfreporterEngineUtilFileBufferedOutputStream:self];
}

- (void)copyAllPropertiesTo:(id)copy {
  [super copyAllPropertiesTo:copy];
  OrgOssPdfreporterEngineUtilFileBufferedOutputStream *typedCopy = (OrgOssPdfreporterEngineUtilFileBufferedOutputStream *) copy;
  typedCopy.memoryThreshold = memoryThreshold_;
  typedCopy.initialMemoryBufferSize = initialMemoryBufferSize_;
  typedCopy.inputBufferLength = inputBufferLength_;
  typedCopy.memoryOutput = memoryOutput_;
  typedCopy.size_ = size__;
  typedCopy.file = file_;
  typedCopy.fileOutput = fileOutput_;
  typedCopy.closed = closed_;
  typedCopy.disposed = disposed_;
}

@end
@implementation OrgOssPdfreporterEngineUtilFileBufferedOutputStream_DataStream

@synthesize memoryIdx = memoryIdx_;
@synthesize memoryData = memoryData_;
@synthesize fileInput = fileInput_;

- (id)initWithOrgOssPdfreporterEngineUtilFileBufferedOutputStream:(OrgOssPdfreporterEngineUtilFileBufferedOutputStream *)outer$ {
  if ((self = [super init])) {
    memoryIdx_ = 0;
    memoryData_ = outer$.memoryOutput == nil ? [IOSByteArray arrayWithLength:0] : [((JavaIoByteArrayOutputStream *) nil_chk(outer$.memoryOutput)) toByteArray];
    fileInput_ = outer$.file == nil ? nil : [[JavaIoBufferedInputStream alloc] initWithJavaIoInputStream:[[JavaIoFileInputStream alloc] initWithJavaIoFile:outer$.file]];
  }
  return self;
}

- (int)read {
  @synchronized(self) {
    {
      int read;
      if (memoryIdx_ < (int) [((IOSByteArray *) nil_chk(memoryData_)) count]) {
        read = [((IOSByteArray *) nil_chk(memoryData_)) byteAtIndex:memoryIdx_] & (int) 0xff;
        ++memoryIdx_;
      }
      else if (fileInput_ != nil) {
        read = [fileInput_ read];
      }
      else {
        read = -1;
      }
      return read;
    }
  }
}

- (int)readWithByteArray:(IOSByteArray *)b
                 withInt:(int)off
                 withInt:(int)len {
  @synchronized(self) {
    {
      if (len <= 0) {
        return 0;
      }
      int read;
      if (memoryIdx_ < (int) [((IOSByteArray *) nil_chk(memoryData_)) count]) {
        read = len;
        if (read > (int) [((IOSByteArray *) nil_chk(memoryData_)) count] - memoryIdx_) {
          read = (int) [((IOSByteArray *) nil_chk(memoryData_)) count] - memoryIdx_;
        }
        [JavaLangSystem arraycopyWithId:memoryData_ withInt:memoryIdx_ withId:b withInt:off withInt:read];
        memoryIdx_ += read;
      }
      else {
        read = 0;
      }
      if (read < len && fileInput_ != nil) {
        int readFile = [((JavaIoInputStream *) nil_chk(fileInput_)) readWithByteArray:b withInt:off + read withInt:len - read];
        if (readFile > 0) {
          read += readFile;
        }
      }
      return read == 0 ? -1 : read;
    }
  }
}

- (void)close {
  if (fileInput_ != nil) {
    [fileInput_ close];
  }
}

- (int)available {
  @synchronized(self) {
    {
      int available = (int) [((IOSByteArray *) nil_chk(memoryData_)) count] - memoryIdx_;
      if (fileInput_ != nil) {
        available += [fileInput_ available];
      }
      return available;
    }
  }
}

- (long long int)skipWithLongInt:(long long int)n {
  @synchronized(self) {
    {
      if (n <= 0) {
        return 0;
      }
      long long int skipped;
      if (memoryIdx_ < (int) [((IOSByteArray *) nil_chk(memoryData_)) count]) {
        skipped = n;
        if (skipped > (int) [((IOSByteArray *) nil_chk(memoryData_)) count] - memoryIdx_) {
          skipped = (int) [((IOSByteArray *) nil_chk(memoryData_)) count] - memoryIdx_;
        }
        memoryIdx_ += skipped;
      }
      else {
        skipped = 0;
      }
      if (skipped < n && fileInput_ != nil) {
        skipped += [((JavaIoInputStream *) nil_chk(fileInput_)) skipWithLongInt:n - skipped];
      }
      return skipped;
    }
  }
}

- (void)copyAllPropertiesTo:(id)copy {
  [super copyAllPropertiesTo:copy];
  OrgOssPdfreporterEngineUtilFileBufferedOutputStream_DataStream *typedCopy = (OrgOssPdfreporterEngineUtilFileBufferedOutputStream_DataStream *) copy;
  typedCopy.memoryIdx = memoryIdx_;
  typedCopy.memoryData = memoryData_;
  typedCopy.fileInput = fileInput_;
}

@end
