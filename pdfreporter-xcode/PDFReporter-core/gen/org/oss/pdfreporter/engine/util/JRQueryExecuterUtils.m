//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: pdfreporter-core/src/org/oss/pdfreporter/engine/util/JRQueryExecuterUtils.java
//
//  Created by kendra on 9/27/13.
//

#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "java/util/Iterator.h"
#include "java/util/List.h"
#include "java/util/Map.h"
#include "org/oss/pdfreporter/engine/DefaultJasperReportsContext.h"
#include "org/oss/pdfreporter/engine/JRDataset.h"
#include "org/oss/pdfreporter/engine/JRRuntimeException.h"
#include "org/oss/pdfreporter/engine/JasperReportsContext.h"
#include "org/oss/pdfreporter/engine/query/JRQueryExecuter.h"
#include "org/oss/pdfreporter/engine/query/JRQueryExecuterFactory.h"
#include "org/oss/pdfreporter/engine/query/JRQueryExecuterFactoryBundle.h"
#include "org/oss/pdfreporter/engine/query/QueryExecuterFactory.h"
#include "org/oss/pdfreporter/engine/query/QueryExecuterFactoryBundle.h"
#include "org/oss/pdfreporter/engine/util/JRQueryExecuterUtils.h"

@implementation OrgOssPdfreporterEngineUtilJRQueryExecuterUtils

@synthesize jasperReportsContext = jasperReportsContext_;

- (id)initWithOrgOssPdfreporterEngineJasperReportsContext:(id<OrgOssPdfreporterEngineJasperReportsContext>)jasperReportsContext {
  if ((self = [super init])) {
    self.jasperReportsContext = jasperReportsContext;
  }
  return self;
}

+ (OrgOssPdfreporterEngineUtilJRQueryExecuterUtils *)getDefaultInstance {
  return [[OrgOssPdfreporterEngineUtilJRQueryExecuterUtils alloc] initWithOrgOssPdfreporterEngineJasperReportsContext:[OrgOssPdfreporterEngineDefaultJasperReportsContext getInstance]];
}

+ (OrgOssPdfreporterEngineUtilJRQueryExecuterUtils *)getInstanceWithOrgOssPdfreporterEngineJasperReportsContext:(id<OrgOssPdfreporterEngineJasperReportsContext>)jasperReportsContext {
  return [[OrgOssPdfreporterEngineUtilJRQueryExecuterUtils alloc] initWithOrgOssPdfreporterEngineJasperReportsContext:jasperReportsContext];
}

- (id<OrgOssPdfreporterEngineQueryQueryExecuterFactory>)getExecuterFactoryWithNSString:(NSString *)language {
  id<JavaUtilList> oldBundles = [((id<OrgOssPdfreporterEngineJasperReportsContext>) nil_chk(jasperReportsContext_)) getExtensionsWithIOSClass:[IOSClass classWithProtocol:@protocol(OrgOssPdfreporterEngineQueryQueryExecuterFactoryBundle)]];
  for (id<JavaUtilIterator> it = [((id<JavaUtilList>) nil_chk(oldBundles)) iterator]; [((id<JavaUtilIterator>) nil_chk(it)) hasNext]; ) {
    id<OrgOssPdfreporterEngineQueryQueryExecuterFactoryBundle> bundle = [((id<JavaUtilIterator>) nil_chk(it)) next];
    id<OrgOssPdfreporterEngineQueryJRQueryExecuterFactory> factory = [((id<OrgOssPdfreporterEngineQueryQueryExecuterFactoryBundle>) nil_chk(bundle)) getQueryExecuterFactoryWithNSString:language];
    if (factory != nil) {
      return [[OrgOssPdfreporterEngineUtilJRQueryExecuterUtils_WrappingQueryExecuterFactory alloc] initWithOrgOssPdfreporterEngineQueryJRQueryExecuterFactory:factory];
    }
  }
  id<JavaUtilList> bundles = [((id<OrgOssPdfreporterEngineJasperReportsContext>) nil_chk(jasperReportsContext_)) getExtensionsWithIOSClass:[IOSClass classWithProtocol:@protocol(OrgOssPdfreporterEngineQueryJRQueryExecuterFactoryBundle)]];
  for (id<JavaUtilIterator> it = [((id<JavaUtilList>) nil_chk(bundles)) iterator]; [((id<JavaUtilIterator>) nil_chk(it)) hasNext]; ) {
    id<OrgOssPdfreporterEngineQueryJRQueryExecuterFactoryBundle> bundle = [((id<JavaUtilIterator>) nil_chk(it)) next];
    id<OrgOssPdfreporterEngineQueryQueryExecuterFactory> factory = [((id<OrgOssPdfreporterEngineQueryJRQueryExecuterFactoryBundle>) nil_chk(bundle)) getQueryExecuterFactoryWithNSString:language];
    if (factory != nil) {
      return factory;
    }
  }
  @throw [[OrgOssPdfreporterEngineJRRuntimeException alloc] initWithNSString:[NSString stringWithFormat:@"No query executer factory registered for the '%@' language.", language]];
}

+ (id<OrgOssPdfreporterEngineQueryJRQueryExecuterFactory>)getQueryExecuterFactoryWithNSString:(NSString *)language {
  return [((OrgOssPdfreporterEngineUtilJRQueryExecuterUtils *) nil_chk([OrgOssPdfreporterEngineUtilJRQueryExecuterUtils getDefaultInstance])) getExecuterFactoryWithNSString:language];
}

- (void)copyAllPropertiesTo:(id)copy {
  [super copyAllPropertiesTo:copy];
  OrgOssPdfreporterEngineUtilJRQueryExecuterUtils *typedCopy = (OrgOssPdfreporterEngineUtilJRQueryExecuterUtils *) copy;
  typedCopy.jasperReportsContext = jasperReportsContext_;
}

@end
@implementation OrgOssPdfreporterEngineUtilJRQueryExecuterUtils_WrappingQueryExecuterFactory

@synthesize factory = factory_;

- (id)initWithOrgOssPdfreporterEngineQueryJRQueryExecuterFactory:(id<OrgOssPdfreporterEngineQueryJRQueryExecuterFactory>)factory {
  if ((self = [super init])) {
    self.factory = factory;
  }
  return self;
}

- (IOSObjectArray *)getBuiltinParameters {
  return [((id<OrgOssPdfreporterEngineQueryJRQueryExecuterFactory>) nil_chk(factory_)) getBuiltinParameters];
}

- (id<OrgOssPdfreporterEngineQueryJRQueryExecuter>)createQueryExecuterWithOrgOssPdfreporterEngineJasperReportsContext:(id<OrgOssPdfreporterEngineJasperReportsContext>)jasperReportsContext
                                                                                 withOrgOssPdfreporterEngineJRDataset:(id<OrgOssPdfreporterEngineJRDataset>)dataset
                                                                                                      withJavaUtilMap:(id<JavaUtilMap>)parameters {
  return [((id<OrgOssPdfreporterEngineQueryJRQueryExecuterFactory>) nil_chk(factory_)) createQueryExecuterWithOrgOssPdfreporterEngineJRDataset:dataset withJavaUtilMap:parameters];
}

- (id<OrgOssPdfreporterEngineQueryJRQueryExecuter>)createQueryExecuterWithOrgOssPdfreporterEngineJRDataset:(id<OrgOssPdfreporterEngineJRDataset>)dataset
                                                                                           withJavaUtilMap:(id<JavaUtilMap>)parameters {
  return [((id<OrgOssPdfreporterEngineQueryJRQueryExecuterFactory>) nil_chk(factory_)) createQueryExecuterWithOrgOssPdfreporterEngineJRDataset:dataset withJavaUtilMap:parameters];
}

- (BOOL)supportsQueryParameterTypeWithNSString:(NSString *)className_ {
  return [((id<OrgOssPdfreporterEngineQueryJRQueryExecuterFactory>) nil_chk(factory_)) supportsQueryParameterTypeWithNSString:className_];
}

- (void)copyAllPropertiesTo:(id)copy {
  [super copyAllPropertiesTo:copy];
  OrgOssPdfreporterEngineUtilJRQueryExecuterUtils_WrappingQueryExecuterFactory *typedCopy = (OrgOssPdfreporterEngineUtilJRQueryExecuterUtils_WrappingQueryExecuterFactory *) copy;
  typedCopy.factory = factory_;
}

@end
