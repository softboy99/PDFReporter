//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: pdfreporter-core/src/org/oss/pdfreporter/engine/util/JRProperties.java
//
//  Created by kendra on 9/27/13.
//

#include "IOSObjectArray.h"
#include "java/io/IOException.h"
#include "java/io/InputStream.h"
#include "java/lang/Boolean.h"
#include "java/lang/Character.h"
#include "java/lang/Float.h"
#include "java/lang/Integer.h"
#include "java/lang/Long.h"
#include "java/lang/SecurityException.h"
#include "java/lang/System.h"
#include "java/util/ArrayList.h"
#include "java/util/Enumeration.h"
#include "java/util/HashMap.h"
#include "java/util/HashSet.h"
#include "java/util/Iterator.h"
#include "java/util/List.h"
#include "java/util/Map.h"
#include "java/util/Set.h"
#include "org/oss/pdfreporter/engine/DefaultJasperReportsContext.h"
#include "org/oss/pdfreporter/engine/JRException.h"
#include "org/oss/pdfreporter/engine/JRPropertiesHolder.h"
#include "org/oss/pdfreporter/engine/JRPropertiesMap.h"
#include "org/oss/pdfreporter/engine/JRRuntimeException.h"
#include "org/oss/pdfreporter/engine/util/JRLoader.h"
#include "org/oss/pdfreporter/engine/util/JRProperties.h"
#include "org/oss/pdfreporter/uses/java/util/Properties.h"

@implementation OrgOssPdfreporterEngineUtilJRProperties

static NSString * OrgOssPdfreporterEngineUtilJRProperties_DEFAULT_PROPERTIES_FILE_ = @"jasperreports.properties";
static NSString * OrgOssPdfreporterEngineUtilJRProperties_PROPERTY_PREFIX_ = @"net.sf.jasperreports.";
static NSString * OrgOssPdfreporterEngineUtilJRProperties_PROPERTIES_FILE_ = @"net.sf.jasperreports.properties";
static NSString * OrgOssPdfreporterEngineUtilJRProperties_COMPILER_CLASS_ = @"net.sf.jasperreports.compiler.class";
static NSString * OrgOssPdfreporterEngineUtilJRProperties_COMPILER_XML_VALIDATION_ = @"net.sf.jasperreports.compiler.xml.validation";
static NSString * OrgOssPdfreporterEngineUtilJRProperties_COMPILER_KEEP_JAVA_FILE_ = @"net.sf.jasperreports.compiler.keep.java.file";
static NSString * OrgOssPdfreporterEngineUtilJRProperties_COMPILER_TEMP_DIR_ = @"net.sf.jasperreports.compiler.temp.dir";
static NSString * OrgOssPdfreporterEngineUtilJRProperties_COMPILER_CLASSPATH_ = @"net.sf.jasperreports.compiler.classpath";
static NSString * OrgOssPdfreporterEngineUtilJRProperties_EXPORT_XML_VALIDATION_ = @"net.sf.jasperreports.export.xml.validation";
static NSString * OrgOssPdfreporterEngineUtilJRProperties_PDF_FONT_FILES_PREFIX_ = @"net.sf.jasperreports.export.pdf.font.";
static NSString * OrgOssPdfreporterEngineUtilJRProperties_PDF_FONT_DIRS_PREFIX_ = @"net.sf.jasperreports.export.pdf.fontdir.";
static NSString * OrgOssPdfreporterEngineUtilJRProperties_QUERY_EXECUTER_FACTORY_PREFIX_ = @"net.sf.jasperreports.query.executer.factory.";
static id<JavaUtilMap> OrgOssPdfreporterEngineUtilJRProperties_properties_;
static id<JavaUtilMap> OrgOssPdfreporterEngineUtilJRProperties_savedProps_;

+ (NSString *)DEFAULT_PROPERTIES_FILE {
  return OrgOssPdfreporterEngineUtilJRProperties_DEFAULT_PROPERTIES_FILE_;
}

+ (NSString *)PROPERTY_PREFIX {
  return OrgOssPdfreporterEngineUtilJRProperties_PROPERTY_PREFIX_;
}

+ (NSString *)PROPERTIES_FILE {
  return OrgOssPdfreporterEngineUtilJRProperties_PROPERTIES_FILE_;
}

+ (NSString *)COMPILER_CLASS {
  return OrgOssPdfreporterEngineUtilJRProperties_COMPILER_CLASS_;
}

+ (NSString *)COMPILER_XML_VALIDATION {
  return OrgOssPdfreporterEngineUtilJRProperties_COMPILER_XML_VALIDATION_;
}

+ (NSString *)COMPILER_KEEP_JAVA_FILE {
  return OrgOssPdfreporterEngineUtilJRProperties_COMPILER_KEEP_JAVA_FILE_;
}

+ (NSString *)COMPILER_TEMP_DIR {
  return OrgOssPdfreporterEngineUtilJRProperties_COMPILER_TEMP_DIR_;
}

+ (NSString *)COMPILER_CLASSPATH {
  return OrgOssPdfreporterEngineUtilJRProperties_COMPILER_CLASSPATH_;
}

+ (NSString *)EXPORT_XML_VALIDATION {
  return OrgOssPdfreporterEngineUtilJRProperties_EXPORT_XML_VALIDATION_;
}

+ (NSString *)PDF_FONT_FILES_PREFIX {
  return OrgOssPdfreporterEngineUtilJRProperties_PDF_FONT_FILES_PREFIX_;
}

+ (NSString *)PDF_FONT_DIRS_PREFIX {
  return OrgOssPdfreporterEngineUtilJRProperties_PDF_FONT_DIRS_PREFIX_;
}

+ (NSString *)QUERY_EXECUTER_FACTORY_PREFIX {
  return OrgOssPdfreporterEngineUtilJRProperties_QUERY_EXECUTER_FACTORY_PREFIX_;
}

+ (id<JavaUtilMap>)properties {
  return OrgOssPdfreporterEngineUtilJRProperties_properties_;
}

+ (void)setProperties:(id<JavaUtilMap>)properties {
  OrgOssPdfreporterEngineUtilJRProperties_properties_ = properties;
}

+ (id<JavaUtilMap>)savedProps {
  return OrgOssPdfreporterEngineUtilJRProperties_savedProps_;
}

+ (void)setSavedProps:(id<JavaUtilMap>)savedProps {
  OrgOssPdfreporterEngineUtilJRProperties_savedProps_ = savedProps;
}

+ (void)reload {
  [((id<JavaUtilMap>) nil_chk(OrgOssPdfreporterEngineUtilJRProperties_properties_)) clear];
  [OrgOssPdfreporterEngineUtilJRProperties initProperties];
}

+ (void)initProperties OBJC_METHOD_FAMILY_NONE {
  @try {
    OrgOssPdfreporterUsesJavaUtilProperties *defaults = [OrgOssPdfreporterEngineUtilJRProperties getDefaults];
    NSString *propFile = [OrgOssPdfreporterEngineUtilJRProperties getSystemPropertyWithNSString:OrgOssPdfreporterEngineUtilJRProperties_PROPERTIES_FILE_];
    OrgOssPdfreporterUsesJavaUtilProperties *loadedProps;
    if (propFile == nil) {
      loadedProps = [OrgOssPdfreporterEngineUtilJRProperties loadPropertiesWithNSString:OrgOssPdfreporterEngineUtilJRProperties_DEFAULT_PROPERTIES_FILE_ withOrgOssPdfreporterUsesJavaUtilProperties:defaults];
      if (loadedProps == nil) {
        loadedProps = [[OrgOssPdfreporterUsesJavaUtilProperties alloc] initWithOrgOssPdfreporterUsesJavaUtilProperties:defaults];
      }
    }
    else {
      loadedProps = [OrgOssPdfreporterEngineUtilJRProperties loadPropertiesWithNSString:propFile withOrgOssPdfreporterUsesJavaUtilProperties:defaults];
      if (loadedProps == nil) {
        @throw [[OrgOssPdfreporterEngineJRRuntimeException alloc] initWithNSString:[NSString stringWithFormat:@"Could not load properties file \"%@\"", propFile]];
      }
    }
    OrgOssPdfreporterEngineUtilJRProperties_properties_ = [[JavaUtilHashMap alloc] init];
    for (id<JavaUtilEnumeration> names = [((OrgOssPdfreporterUsesJavaUtilProperties *) nil_chk(loadedProps)) propertyNames]; [((id<JavaUtilEnumeration>) nil_chk(names)) hasMoreElements]; ) {
      NSString *name = (NSString *) [((id<JavaUtilEnumeration>) nil_chk(names)) nextElement];
      NSString *value = [((OrgOssPdfreporterUsesJavaUtilProperties *) nil_chk(loadedProps)) getPropertyWithNSString:name];
      (void) [((id<JavaUtilMap>) nil_chk(OrgOssPdfreporterEngineUtilJRProperties_properties_)) putWithId:name withId:value];
    }
    [OrgOssPdfreporterEngineUtilJRProperties loadSystemProperties];
  }
  @catch (OrgOssPdfreporterEngineJRException *e) {
    @throw [[OrgOssPdfreporterEngineJRRuntimeException alloc] initWithNSString:@"Error loading the properties" withJavaLangThrowable:e];
  }
}

+ (void)loadSystemProperties {
  [OrgOssPdfreporterEngineUtilJRProperties loadSystemPropertyWithNSString:@"jasper.reports.compiler.class" withNSString:OrgOssPdfreporterEngineUtilJRProperties_COMPILER_CLASS_];
  [OrgOssPdfreporterEngineUtilJRProperties loadSystemPropertyWithNSString:@"jasper.reports.compile.xml.validation" withNSString:OrgOssPdfreporterEngineUtilJRProperties_COMPILER_XML_VALIDATION_];
  [OrgOssPdfreporterEngineUtilJRProperties loadSystemPropertyWithNSString:@"jasper.reports.export.xml.validation" withNSString:OrgOssPdfreporterEngineUtilJRProperties_EXPORT_XML_VALIDATION_];
  [OrgOssPdfreporterEngineUtilJRProperties loadSystemPropertyWithNSString:@"jasper.reports.compile.keep.java.file" withNSString:OrgOssPdfreporterEngineUtilJRProperties_COMPILER_KEEP_JAVA_FILE_];
  [OrgOssPdfreporterEngineUtilJRProperties loadSystemPropertyWithNSString:@"jasper.reports.compile.temp" withNSString:OrgOssPdfreporterEngineUtilJRProperties_COMPILER_TEMP_DIR_];
  [OrgOssPdfreporterEngineUtilJRProperties loadSystemPropertyWithNSString:@"jasper.reports.compile.class.path" withNSString:OrgOssPdfreporterEngineUtilJRProperties_COMPILER_CLASSPATH_];
}

+ (OrgOssPdfreporterUsesJavaUtilProperties *)getDefaults {
  OrgOssPdfreporterUsesJavaUtilProperties *defaults = [[OrgOssPdfreporterUsesJavaUtilProperties alloc] init];
  JavaIoInputStream *is = [OrgOssPdfreporterEngineUtilJRLoader getResourceInputStreamWithNSString:@"default.jasperreports.properties"];
  if (is == nil) {
    @throw [[OrgOssPdfreporterEngineJRException alloc] initWithNSString:@"Default properties file not found."];
  }
  @try {
    [((OrgOssPdfreporterUsesJavaUtilProperties *) nil_chk(defaults)) load__WithJavaIoInputStream:is];
  }
  @catch (JavaIoIOException *e) {
    @throw [[OrgOssPdfreporterEngineJRException alloc] initWithNSString:@"Failed to load default properties." withJavaLangThrowable:e];
  }
  @finally {
    @try {
      [((JavaIoInputStream *) nil_chk(is)) close];
    }
    @catch (JavaIoIOException *e) {
    }
  }
  NSString *userDir = [OrgOssPdfreporterEngineUtilJRProperties getSystemPropertyWithNSString:@"user.dir"];
  if (userDir != nil) {
    (void) [((OrgOssPdfreporterUsesJavaUtilProperties *) nil_chk(defaults)) setPropertyWithNSString:OrgOssPdfreporterEngineUtilJRProperties_COMPILER_TEMP_DIR_ withNSString:userDir];
  }
  NSString *classPath = [OrgOssPdfreporterEngineUtilJRProperties getSystemPropertyWithNSString:@"java.class.path"];
  if (classPath != nil) {
    (void) [((OrgOssPdfreporterUsesJavaUtilProperties *) nil_chk(defaults)) setPropertyWithNSString:OrgOssPdfreporterEngineUtilJRProperties_COMPILER_CLASSPATH_ withNSString:classPath];
  }
  return defaults;
}

+ (NSString *)getSystemPropertyWithNSString:(NSString *)propertyName {
  @try {
    return [JavaLangSystem getPropertyWithNSString:propertyName];
  }
  @catch (JavaLangSecurityException *e) {
    return nil;
  }
}

+ (void)loadSystemPropertyWithNSString:(NSString *)sysKey
                          withNSString:(NSString *)propKey {
  NSString *val = [OrgOssPdfreporterEngineUtilJRProperties getSystemPropertyWithNSString:sysKey];
  if (val != nil) {
    (void) [((id<JavaUtilMap>) nil_chk(OrgOssPdfreporterEngineUtilJRProperties_properties_)) putWithId:propKey withId:val];
  }
}

+ (OrgOssPdfreporterUsesJavaUtilProperties *)loadPropertiesWithNSString:(NSString *)name
                            withOrgOssPdfreporterUsesJavaUtilProperties:(OrgOssPdfreporterUsesJavaUtilProperties *)defaults {
  OrgOssPdfreporterUsesJavaUtilProperties *properties = nil;
  JavaIoInputStream *is = nil;
  @try {
    is = [OrgOssPdfreporterEngineUtilJRLoader getLocationInputStreamWithNSString:name];
  }
  @catch (JavaLangSecurityException *e) {
  }
  if (is != nil) {
    properties = [[OrgOssPdfreporterUsesJavaUtilProperties alloc] initWithOrgOssPdfreporterUsesJavaUtilProperties:defaults];
    @try {
      [((OrgOssPdfreporterUsesJavaUtilProperties *) nil_chk(properties)) load__WithJavaIoInputStream:is];
    }
    @catch (JavaIoIOException *e) {
      @throw [[OrgOssPdfreporterEngineJRException alloc] initWithNSString:[NSString stringWithFormat:@"Failed to load properties file \"%@\"", name] withJavaLangThrowable:e];
    }
    @finally {
      @try {
        [is close];
      }
      @catch (JavaIoIOException *e) {
      }
    }
  }
  return properties;
}

+ (NSString *)getPropertyWithNSString:(NSString *)key {
  return [((id<JavaUtilMap>) nil_chk(OrgOssPdfreporterEngineUtilJRProperties_properties_)) getWithId:key];
}

+ (BOOL)getBooleanPropertyWithNSString:(NSString *)key {
  return [OrgOssPdfreporterEngineUtilJRProperties asBooleanWithNSString:[((id<JavaUtilMap>) nil_chk(OrgOssPdfreporterEngineUtilJRProperties_properties_)) getWithId:key]];
}

+ (int)getIntegerPropertyWithNSString:(NSString *)key {
  return [OrgOssPdfreporterEngineUtilJRProperties asIntegerWithNSString:[((id<JavaUtilMap>) nil_chk(OrgOssPdfreporterEngineUtilJRProperties_properties_)) getWithId:key]];
}

+ (float)getFloatPropertyWithNSString:(NSString *)key {
  return [OrgOssPdfreporterEngineUtilJRProperties asFloatWithNSString:[((id<JavaUtilMap>) nil_chk(OrgOssPdfreporterEngineUtilJRProperties_properties_)) getWithId:key]];
}

+ (BOOL)asBooleanWithNSString:(NSString *)value {
  return [[JavaLangBoolean valueOfWithNSString:value] booleanValue];
}

+ (int)asIntegerWithNSString:(NSString *)value {
  return [JavaLangInteger parseIntWithNSString:value];
}

+ (float)asFloatWithNSString:(NSString *)value {
  return [JavaLangFloat parseFloatWithNSString:value];
}

+ (void)setPropertyWithNSString:(NSString *)key
                   withNSString:(NSString *)value {
  (void) [((id<JavaUtilMap>) nil_chk(OrgOssPdfreporterEngineUtilJRProperties_properties_)) putWithId:key withId:value];
  [((OrgOssPdfreporterEngineDefaultJasperReportsContext *) nil_chk([OrgOssPdfreporterEngineDefaultJasperReportsContext getInstance])) setPropertyWithNSString:key withNSString:value];
}

+ (void)setPropertyWithNSString:(NSString *)key
                       withBOOL:(BOOL)value {
  [OrgOssPdfreporterEngineUtilJRProperties setPropertyWithNSString:key withNSString:[NSString valueOfBool:value]];
}

+ (void)removePropertyValueWithNSString:(NSString *)key {
  (void) [((id<JavaUtilMap>) nil_chk(OrgOssPdfreporterEngineUtilJRProperties_properties_)) removeWithId:key];
}

+ (void)backupProperties {
  OrgOssPdfreporterEngineUtilJRProperties_savedProps_ = [[JavaUtilHashMap alloc] initWithJavaUtilMap:OrgOssPdfreporterEngineUtilJRProperties_properties_];
}

+ (void)restoreProperties {
  if (OrgOssPdfreporterEngineUtilJRProperties_savedProps_ != nil) {
    @try {
      id<JavaUtilMap> newProps = [[JavaUtilHashMap alloc] initWithJavaUtilMap:OrgOssPdfreporterEngineUtilJRProperties_savedProps_];
      OrgOssPdfreporterEngineUtilJRProperties_properties_ = newProps;
    }
    @finally {
      OrgOssPdfreporterEngineUtilJRProperties_savedProps_ = nil;
    }
  }
}

+ (id<JavaUtilList>)getPropertiesWithNSString:(NSString *)prefix {
  int prefixLength = [((NSString *) nil_chk(prefix)) length];
  id<JavaUtilList> values = [[JavaUtilArrayList alloc] init];
  {
    id<JavaUtilIterator> iter__ = [((id<JavaUtilSet>) nil_chk([((id<JavaUtilMap>) nil_chk(OrgOssPdfreporterEngineUtilJRProperties_properties_)) entrySet])) iterator];
    while ([((id<JavaUtilIterator>) nil_chk(iter__)) hasNext]) {
      id<JavaUtilMap_Entry> entry = [((id<JavaUtilIterator>) nil_chk(iter__)) next];
      NSString *name = [((id<JavaUtilMap_Entry>) nil_chk(entry)) getKey];
      if ([((NSString *) nil_chk(name)) hasPrefix:prefix]) {
        NSString *suffix = [((NSString *) nil_chk(name)) substring:prefixLength];
        NSString *value = [((id<JavaUtilMap_Entry>) nil_chk(entry)) getValue];
        [((id<JavaUtilList>) nil_chk(values)) addWithId:[[OrgOssPdfreporterEngineUtilJRProperties_PropertySuffix alloc] initWithNSString:name withNSString:suffix withNSString:value]];
      }
    }
  }
  return values;
}

+ (id<JavaUtilList>)getPropertiesWithOrgOssPdfreporterEngineJRPropertiesHolder:(id<OrgOssPdfreporterEngineJRPropertiesHolder>)propertiesHolder
                                                                  withNSString:(NSString *)prefix {
  return [OrgOssPdfreporterEngineUtilJRProperties getPropertiesWithOrgOssPdfreporterEngineJRPropertiesMap:[OrgOssPdfreporterEngineUtilJRProperties getOwnPropertiesWithOrgOssPdfreporterEngineJRPropertiesHolder:propertiesHolder] withNSString:prefix];
}

+ (id<JavaUtilList>)getAllPropertiesWithOrgOssPdfreporterEngineJRPropertiesHolder:(id<OrgOssPdfreporterEngineJRPropertiesHolder>)propertiesHolder
                                                                     withNSString:(NSString *)prefix {
  return [OrgOssPdfreporterEngineUtilJRProperties getAllPropertiesWithOrgOssPdfreporterEngineJRPropertiesMap:[OrgOssPdfreporterEngineUtilJRProperties getOwnPropertiesWithOrgOssPdfreporterEngineJRPropertiesHolder:propertiesHolder] withNSString:prefix];
}

+ (id<JavaUtilList>)getPropertiesWithOrgOssPdfreporterEngineJRPropertiesMap:(OrgOssPdfreporterEngineJRPropertiesMap *)propertiesMap
                                                               withNSString:(NSString *)prefix {
  int prefixLength = [((NSString *) nil_chk(prefix)) length];
  id<JavaUtilList> values = [[JavaUtilArrayList alloc] init];
  if (propertiesMap != nil) {
    IOSObjectArray *propertyNames = [propertiesMap getPropertyNames];
    for (int i = 0; i < (int) [((IOSObjectArray *) nil_chk(propertyNames)) count]; i++) {
      NSString *name = [((IOSObjectArray *) nil_chk(propertyNames)) objectAtIndex:i];
      if ([((NSString *) nil_chk(name)) hasPrefix:prefix]) {
        NSString *suffix = [((NSString *) nil_chk(name)) substring:prefixLength];
        NSString *value = [propertiesMap getPropertyWithNSString:name];
        [((id<JavaUtilList>) nil_chk(values)) addWithId:[[OrgOssPdfreporterEngineUtilJRProperties_PropertySuffix alloc] initWithNSString:name withNSString:suffix withNSString:value]];
      }
    }
  }
  return values;
}

+ (id<JavaUtilList>)getAllPropertiesWithOrgOssPdfreporterEngineJRPropertiesMap:(OrgOssPdfreporterEngineJRPropertiesMap *)propertiesMap
                                                                  withNSString:(NSString *)prefix {
  id<JavaUtilList> own = [OrgOssPdfreporterEngineUtilJRProperties getPropertiesWithOrgOssPdfreporterEngineJRPropertiesMap:propertiesMap withNSString:prefix];
  id<JavaUtilList> global = [OrgOssPdfreporterEngineUtilJRProperties getPropertiesWithNSString:prefix];
  id<JavaUtilList> collected;
  if ([((id<JavaUtilList>) nil_chk(own)) isEmpty]) {
    collected = global;
  }
  else {
    if (![((id<JavaUtilList>) nil_chk(global)) isEmpty]) {
      id<JavaUtilSet> ownSuffixes = [[JavaUtilHashSet alloc] init];
      for (id<JavaUtilIterator> it = [((id<JavaUtilList>) nil_chk(own)) iterator]; [((id<JavaUtilIterator>) nil_chk(it)) hasNext]; ) {
        OrgOssPdfreporterEngineUtilJRProperties_PropertySuffix *prop = [((id<JavaUtilIterator>) nil_chk(it)) next];
        [((id<JavaUtilSet>) nil_chk(ownSuffixes)) addWithId:[((OrgOssPdfreporterEngineUtilJRProperties_PropertySuffix *) nil_chk(prop)) getSuffix]];
      }
      for (id<JavaUtilIterator> it = [((id<JavaUtilList>) nil_chk(global)) iterator]; [((id<JavaUtilIterator>) nil_chk(it)) hasNext]; ) {
        OrgOssPdfreporterEngineUtilJRProperties_PropertySuffix *prop = [((id<JavaUtilIterator>) nil_chk(it)) next];
        if (![((id<JavaUtilSet>) nil_chk(ownSuffixes)) containsWithId:[((OrgOssPdfreporterEngineUtilJRProperties_PropertySuffix *) nil_chk(prop)) getSuffix]]) {
          [((id<JavaUtilList>) nil_chk(own)) addWithId:prop];
        }
      }
    }
    collected = own;
  }
  return collected;
}

+ (NSString *)getPropertyWithOrgOssPdfreporterEngineJRPropertiesHolder:(id<OrgOssPdfreporterEngineJRPropertiesHolder>)propertiesHolder
                                                          withNSString:(NSString *)key {
  NSString *value = nil;
  while (propertiesHolder != nil && value == nil) {
    if ([((id<OrgOssPdfreporterEngineJRPropertiesHolder>) nil_chk(propertiesHolder)) hasProperties]) {
      value = [((OrgOssPdfreporterEngineJRPropertiesMap *) nil_chk([((id<OrgOssPdfreporterEngineJRPropertiesHolder>) nil_chk(propertiesHolder)) getPropertiesMap])) getPropertyWithNSString:key];
    }
    propertiesHolder = [((id<OrgOssPdfreporterEngineJRPropertiesHolder>) nil_chk(propertiesHolder)) getParentProperties];
  }
  if (value == nil) {
    value = [((id<JavaUtilMap>) nil_chk(OrgOssPdfreporterEngineUtilJRProperties_properties_)) getWithId:key];
  }
  return value;
}

+ (NSString *)getPropertyWithNSString:(NSString *)key
withOrgOssPdfreporterEngineJRPropertiesHolderArray:(IOSObjectArray *)propertiesHolders {
  NSString *value = nil;
  main: {
    IOSObjectArray *a__ = propertiesHolders;
    int n__ = (int) [((IOSObjectArray *) nil_chk(a__)) count];
    for (int i__ = 0; i__ < n__; i__++) {
      id<OrgOssPdfreporterEngineJRPropertiesHolder> propertiesHolder = [((IOSObjectArray *) nil_chk(a__)) objectAtIndex:i__];
      while (propertiesHolder != nil) {
        if ([((id<OrgOssPdfreporterEngineJRPropertiesHolder>) nil_chk(propertiesHolder)) hasProperties]) {
          NSString *prop = [((OrgOssPdfreporterEngineJRPropertiesMap *) nil_chk([((id<OrgOssPdfreporterEngineJRPropertiesHolder>) nil_chk(propertiesHolder)) getPropertiesMap])) getPropertyWithNSString:key];
          if (prop != nil) {
            value = prop;
            return value;
          }
        }
        propertiesHolder = [((id<OrgOssPdfreporterEngineJRPropertiesHolder>) nil_chk(propertiesHolder)) getParentProperties];
      }
    }
  }
  if (value == nil) {
    value = [((id<JavaUtilMap>) nil_chk(OrgOssPdfreporterEngineUtilJRProperties_properties_)) getWithId:key];
  }
  return value;
}

+ (NSString *)getPropertyWithOrgOssPdfreporterEngineJRPropertiesMap:(OrgOssPdfreporterEngineJRPropertiesMap *)propertiesMap
                                                       withNSString:(NSString *)key {
  NSString *value = nil;
  if (propertiesMap != nil) {
    value = [propertiesMap getPropertyWithNSString:key];
  }
  if (value == nil) {
    value = [((id<JavaUtilMap>) nil_chk(OrgOssPdfreporterEngineUtilJRProperties_properties_)) getWithId:key];
  }
  return value;
}

+ (BOOL)getBooleanPropertyWithOrgOssPdfreporterEngineJRPropertiesHolder:(id<OrgOssPdfreporterEngineJRPropertiesHolder>)propertiesHolder
                                                           withNSString:(NSString *)key
                                                               withBOOL:(BOOL)defaultValue {
  NSString *value = [OrgOssPdfreporterEngineUtilJRProperties getPropertyWithOrgOssPdfreporterEngineJRPropertiesHolder:propertiesHolder withNSString:key];
  return value == nil ? defaultValue : [OrgOssPdfreporterEngineUtilJRProperties asBooleanWithNSString:value];
}

+ (JavaLangBoolean *)getBooleanPropertyWithOrgOssPdfreporterEngineJRPropertiesHolder:(id<OrgOssPdfreporterEngineJRPropertiesHolder>)propertiesHolder
                                                                        withNSString:(NSString *)key {
  NSString *value = [OrgOssPdfreporterEngineUtilJRProperties getPropertyWithOrgOssPdfreporterEngineJRPropertiesHolder:propertiesHolder withNSString:key];
  return value == nil ? nil : [JavaLangBoolean valueOfWithNSString:value];
}

+ (BOOL)getBooleanPropertyWithOrgOssPdfreporterEngineJRPropertiesMap:(OrgOssPdfreporterEngineJRPropertiesMap *)propertiesMap
                                                        withNSString:(NSString *)key
                                                            withBOOL:(BOOL)defaultValue {
  NSString *value = [OrgOssPdfreporterEngineUtilJRProperties getPropertyWithOrgOssPdfreporterEngineJRPropertiesMap:propertiesMap withNSString:key];
  return value == nil ? defaultValue : [OrgOssPdfreporterEngineUtilJRProperties asBooleanWithNSString:value];
}

+ (int)getIntegerPropertyWithOrgOssPdfreporterEngineJRPropertiesHolder:(id<OrgOssPdfreporterEngineJRPropertiesHolder>)propertiesHolder
                                                          withNSString:(NSString *)key
                                                               withInt:(int)defaultValue {
  NSString *value = [OrgOssPdfreporterEngineUtilJRProperties getPropertyWithOrgOssPdfreporterEngineJRPropertiesHolder:propertiesHolder withNSString:key];
  return value == nil ? defaultValue : [OrgOssPdfreporterEngineUtilJRProperties asIntegerWithNSString:value];
}

+ (int)getIntegerPropertyWithOrgOssPdfreporterEngineJRPropertiesMap:(OrgOssPdfreporterEngineJRPropertiesMap *)propertiesMap
                                                       withNSString:(NSString *)key
                                                            withInt:(int)defaultValue {
  NSString *value = [OrgOssPdfreporterEngineUtilJRProperties getPropertyWithOrgOssPdfreporterEngineJRPropertiesMap:propertiesMap withNSString:key];
  return value == nil ? defaultValue : [OrgOssPdfreporterEngineUtilJRProperties asIntegerWithNSString:value];
}

+ (int)getIntegerPropertyWithNSString:(NSString *)key
                              withInt:(int)defaultValue {
  NSString *value = [OrgOssPdfreporterEngineUtilJRProperties getPropertyWithNSString:key];
  return value == nil ? defaultValue : [OrgOssPdfreporterEngineUtilJRProperties asIntegerWithNSString:value];
}

+ (float)getFloatPropertyWithOrgOssPdfreporterEngineJRPropertiesHolder:(id<OrgOssPdfreporterEngineJRPropertiesHolder>)propertiesHolder
                                                          withNSString:(NSString *)key
                                                             withFloat:(float)defaultValue {
  NSString *value = [OrgOssPdfreporterEngineUtilJRProperties getPropertyWithOrgOssPdfreporterEngineJRPropertiesHolder:propertiesHolder withNSString:key];
  return value == nil ? defaultValue : [OrgOssPdfreporterEngineUtilJRProperties asFloatWithNSString:value];
}

+ (float)getFloatPropertyWithOrgOssPdfreporterEngineJRPropertiesMap:(OrgOssPdfreporterEngineJRPropertiesMap *)propertiesMap
                                                       withNSString:(NSString *)key
                                                          withFloat:(float)defaultValue {
  NSString *value = [OrgOssPdfreporterEngineUtilJRProperties getPropertyWithOrgOssPdfreporterEngineJRPropertiesMap:propertiesMap withNSString:key];
  return value == nil ? defaultValue : [OrgOssPdfreporterEngineUtilJRProperties asFloatWithNSString:value];
}

+ (float)getFloatPropertyWithNSString:(NSString *)key
                            withFloat:(float)defaultValue {
  NSString *value = [OrgOssPdfreporterEngineUtilJRProperties getPropertyWithNSString:key];
  return value == nil ? defaultValue : [OrgOssPdfreporterEngineUtilJRProperties asFloatWithNSString:value];
}

+ (long long int)asLongWithNSString:(NSString *)value {
  return [JavaLangLong parseLongWithNSString:value];
}

+ (long long int)getLongPropertyWithNSString:(NSString *)key {
  return [OrgOssPdfreporterEngineUtilJRProperties asLongWithNSString:[((id<JavaUtilMap>) nil_chk(OrgOssPdfreporterEngineUtilJRProperties_properties_)) getWithId:key]];
}

+ (long long int)getLongPropertyWithOrgOssPdfreporterEngineJRPropertiesMap:(OrgOssPdfreporterEngineJRPropertiesMap *)propertiesMap
                                                              withNSString:(NSString *)key
                                                                   withInt:(int)defaultValue {
  NSString *value = [OrgOssPdfreporterEngineUtilJRProperties getPropertyWithOrgOssPdfreporterEngineJRPropertiesMap:propertiesMap withNSString:key];
  return value == nil ? defaultValue : [OrgOssPdfreporterEngineUtilJRProperties asLongWithNSString:value];
}

+ (long long int)getLongPropertyWithOrgOssPdfreporterEngineJRPropertiesHolder:(id<OrgOssPdfreporterEngineJRPropertiesHolder>)propertiesHolder
                                                                 withNSString:(NSString *)key
                                                                      withInt:(int)defaultValue {
  NSString *value = [OrgOssPdfreporterEngineUtilJRProperties getPropertyWithOrgOssPdfreporterEngineJRPropertiesHolder:propertiesHolder withNSString:key];
  return value == nil ? defaultValue : [OrgOssPdfreporterEngineUtilJRProperties asLongWithNSString:value];
}

+ (OrgOssPdfreporterEngineJRPropertiesMap *)getOwnPropertiesWithOrgOssPdfreporterEngineJRPropertiesHolder:(id<OrgOssPdfreporterEngineJRPropertiesHolder>)propertiesHolder {
  return [((id<OrgOssPdfreporterEngineJRPropertiesHolder>) nil_chk(propertiesHolder)) hasProperties] ? [((id<OrgOssPdfreporterEngineJRPropertiesHolder>) nil_chk(propertiesHolder)) getPropertiesMap] : nil;
}

+ (void)transferPropertiesWithOrgOssPdfreporterEngineJRPropertiesHolder:(id<OrgOssPdfreporterEngineJRPropertiesHolder>)source
                          withOrgOssPdfreporterEngineJRPropertiesHolder:(id<OrgOssPdfreporterEngineJRPropertiesHolder>)destination
                                                           withNSString:(NSString *)tranferPropertiesPrefix {
  if (![((id<OrgOssPdfreporterEngineJRPropertiesHolder>) nil_chk(source)) hasProperties]) {
    return;
  }
  [OrgOssPdfreporterEngineUtilJRProperties transferWithOrgOssPdfreporterEngineJRPropertiesMap:[((id<OrgOssPdfreporterEngineJRPropertiesHolder>) nil_chk(source)) getPropertiesMap] withOrgOssPdfreporterEngineJRPropertiesHolder:destination withNSString:tranferPropertiesPrefix];
}

+ (void)transferPropertiesWithOrgOssPdfreporterEngineJRPropertiesMap:(OrgOssPdfreporterEngineJRPropertiesMap *)source
                       withOrgOssPdfreporterEngineJRPropertiesHolder:(id<OrgOssPdfreporterEngineJRPropertiesHolder>)destination
                                                        withNSString:(NSString *)tranferPropertiesPrefix {
  if (source == nil || ![((OrgOssPdfreporterEngineJRPropertiesMap *) nil_chk(source)) hasProperties]) {
    return;
  }
  [OrgOssPdfreporterEngineUtilJRProperties transferWithOrgOssPdfreporterEngineJRPropertiesMap:source withOrgOssPdfreporterEngineJRPropertiesHolder:destination withNSString:tranferPropertiesPrefix];
}

+ (void)transferWithOrgOssPdfreporterEngineJRPropertiesMap:(OrgOssPdfreporterEngineJRPropertiesMap *)source
             withOrgOssPdfreporterEngineJRPropertiesHolder:(id<OrgOssPdfreporterEngineJRPropertiesHolder>)destination
                                              withNSString:(NSString *)tranferPropertiesPrefix {
  id<JavaUtilList> transferPrefixProps = [OrgOssPdfreporterEngineUtilJRProperties getPropertiesWithNSString:tranferPropertiesPrefix];
  for (id<JavaUtilIterator> prefixIt = [((id<JavaUtilList>) nil_chk(transferPrefixProps)) iterator]; [((id<JavaUtilIterator>) nil_chk(prefixIt)) hasNext]; ) {
    OrgOssPdfreporterEngineUtilJRProperties_PropertySuffix *transferPrefixProp = [((id<JavaUtilIterator>) nil_chk(prefixIt)) next];
    NSString *transferPrefix = [((OrgOssPdfreporterEngineUtilJRProperties_PropertySuffix *) nil_chk(transferPrefixProp)) getValue];
    if (transferPrefix != nil && [((NSString *) nil_chk(transferPrefix)) length] > 0) {
      id<JavaUtilList> transferProps = [OrgOssPdfreporterEngineUtilJRProperties getPropertiesWithOrgOssPdfreporterEngineJRPropertiesMap:source withNSString:transferPrefix];
      for (id<JavaUtilIterator> propIt = [((id<JavaUtilList>) nil_chk(transferProps)) iterator]; [((id<JavaUtilIterator>) nil_chk(propIt)) hasNext]; ) {
        OrgOssPdfreporterEngineUtilJRProperties_PropertySuffix *property = [((id<JavaUtilIterator>) nil_chk(propIt)) next];
        NSString *value = [((OrgOssPdfreporterEngineUtilJRProperties_PropertySuffix *) nil_chk(property)) getValue];
        [((OrgOssPdfreporterEngineJRPropertiesMap *) nil_chk([((id<OrgOssPdfreporterEngineJRPropertiesHolder>) nil_chk(destination)) getPropertiesMap])) setPropertyWithNSString:[((OrgOssPdfreporterEngineUtilJRProperties_PropertySuffix *) nil_chk(property)) getKey] withNSString:value];
      }
    }
  }
}

+ (JavaLangCharacter *)getCharacterPropertyWithNSString:(NSString *)key {
  return [OrgOssPdfreporterEngineUtilJRProperties asCharacterWithNSString:[((id<JavaUtilMap>) nil_chk(OrgOssPdfreporterEngineUtilJRProperties_properties_)) getWithId:key]];
}

+ (JavaLangCharacter *)getCharacterPropertyWithOrgOssPdfreporterEngineJRPropertiesMap:(OrgOssPdfreporterEngineJRPropertiesMap *)propertiesMap
                                                                         withNSString:(NSString *)key {
  NSString *value = [OrgOssPdfreporterEngineUtilJRProperties getPropertyWithOrgOssPdfreporterEngineJRPropertiesMap:propertiesMap withNSString:key];
  return [OrgOssPdfreporterEngineUtilJRProperties asCharacterWithNSString:value];
}

+ (JavaLangCharacter *)asCharacterWithNSString:(NSString *)value {
  return value == nil || [((NSString *) nil_chk(value)) length] == 0 ? nil : [[JavaLangCharacter alloc] initWithUnichar:[((NSString *) nil_chk(value)) charAtWithInt:0]];
}

- (id)init {
  return [super init];
}

+ (void)initialize {
  if (self == [OrgOssPdfreporterEngineUtilJRProperties class]) {
    {
      [OrgOssPdfreporterEngineUtilJRProperties initProperties];
    }
  }
}

@end
@implementation OrgOssPdfreporterEngineUtilJRProperties_PropertySuffix

@synthesize key = key_;
@synthesize suffix = suffix_;
@synthesize value = value_;

- (id)initWithNSString:(NSString *)key
          withNSString:(NSString *)suffix
          withNSString:(NSString *)value {
  if ((self = [super init])) {
    self.key = key;
    self.suffix = suffix;
    self.value = value;
  }
  return self;
}

- (NSString *)getKey {
  return key_;
}

- (NSString *)getSuffix {
  return suffix_;
}

- (NSString *)getValue {
  return value_;
}

- (void)copyAllPropertiesTo:(id)copy {
  [super copyAllPropertiesTo:copy];
  OrgOssPdfreporterEngineUtilJRProperties_PropertySuffix *typedCopy = (OrgOssPdfreporterEngineUtilJRProperties_PropertySuffix *) copy;
  typedCopy.key = key_;
  typedCopy.suffix = suffix_;
  typedCopy.value = value_;
}

@end
