//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: pdfreporter-core/src/org/oss/pdfreporter/engine/util/JRExpressionUtil.java
//
//  Created by kendra on 9/27/13.
//

#include "IOSObjectArray.h"
#include "java/util/regex/Matcher.h"
#include "java/util/regex/Pattern.h"
#include "org/oss/pdfreporter/engine/JRExpression.h"
#include "org/oss/pdfreporter/engine/JRExpressionChunk.h"
#include "org/oss/pdfreporter/engine/JRRuntimeException.h"
#include "org/oss/pdfreporter/engine/util/ExpressionChunkVisitor.h"
#include "org/oss/pdfreporter/engine/util/JRExpressionUtil.h"

@implementation OrgOssPdfreporterEngineUtilJRExpressionUtil

static JavaUtilRegexPattern * OrgOssPdfreporterEngineUtilJRExpressionUtil_SIMPLE_EXPRESSION_PATTERN_;
static JavaUtilRegexPattern * OrgOssPdfreporterEngineUtilJRExpressionUtil_TEXT_QUOTE_PATTERN_;
static NSString * OrgOssPdfreporterEngineUtilJRExpressionUtil_TEXT_QUOTE_REPLACEMENT_ = @"\"";

+ (JavaUtilRegexPattern *)SIMPLE_EXPRESSION_PATTERN {
  return OrgOssPdfreporterEngineUtilJRExpressionUtil_SIMPLE_EXPRESSION_PATTERN_;
}

+ (JavaUtilRegexPattern *)TEXT_QUOTE_PATTERN {
  return OrgOssPdfreporterEngineUtilJRExpressionUtil_TEXT_QUOTE_PATTERN_;
}

+ (NSString *)TEXT_QUOTE_REPLACEMENT {
  return OrgOssPdfreporterEngineUtilJRExpressionUtil_TEXT_QUOTE_REPLACEMENT_;
}

+ (NSString *)getExpressionTextWithOrgOssPdfreporterEngineJRExpression:(id<OrgOssPdfreporterEngineJRExpression>)exp {
  return exp == nil ? nil : [((id<OrgOssPdfreporterEngineJRExpression>) nil_chk(exp)) getText];
}

+ (NSString *)getSimpleExpressionTextWithOrgOssPdfreporterEngineJRExpression:(id<OrgOssPdfreporterEngineJRExpression>)expression {
  NSString *value = nil;
  if (expression != nil) {
    IOSObjectArray *chunks = [expression getChunks];
    if (chunks != nil && (int) [((IOSObjectArray *) nil_chk(chunks)) count] == 1 && [((id<OrgOssPdfreporterEngineJRExpressionChunk>) nil_chk([((IOSObjectArray *) nil_chk(chunks)) objectAtIndex:0])) getType] == OrgOssPdfreporterEngineJRExpressionChunk_TYPE_TEXT) {
      NSString *chunk = [((id<OrgOssPdfreporterEngineJRExpressionChunk>) nil_chk([((IOSObjectArray *) nil_chk(chunks)) objectAtIndex:0])) getText];
      JavaUtilRegexMatcher *matcher = [((JavaUtilRegexPattern *) nil_chk(OrgOssPdfreporterEngineUtilJRExpressionUtil_SIMPLE_EXPRESSION_PATTERN_)) matcherWithJavaLangCharSequence:chunk];
      if ([((JavaUtilRegexMatcher *) nil_chk(matcher)) matches]) {
        NSString *text = [((JavaUtilRegexMatcher *) nil_chk(matcher)) groupWithInt:OrgOssPdfreporterEngineUtilJRExpressionUtil_SIMPLE_EXPRESSION_TEXT_GROUP];
        value = [((JavaUtilRegexMatcher *) nil_chk([((JavaUtilRegexPattern *) nil_chk(OrgOssPdfreporterEngineUtilJRExpressionUtil_TEXT_QUOTE_PATTERN_)) matcherWithJavaLangCharSequence:text])) replaceAllWithNSString:OrgOssPdfreporterEngineUtilJRExpressionUtil_TEXT_QUOTE_REPLACEMENT_];
      }
    }
  }
  return value;
}

+ (void)visitChunksWithOrgOssPdfreporterEngineJRExpression:(id<OrgOssPdfreporterEngineJRExpression>)expression
     withOrgOssPdfreporterEngineUtilExpressionChunkVisitor:(id<OrgOssPdfreporterEngineUtilExpressionChunkVisitor>)visitor {
  IOSObjectArray *chunks = [((id<OrgOssPdfreporterEngineJRExpression>) nil_chk(expression)) getChunks];
  if (chunks != nil) {
    {
      IOSObjectArray *a__ = chunks;
      int n__ = (int) [((IOSObjectArray *) nil_chk(a__)) count];
      for (int i__ = 0; i__ < n__; i__++) {
        id<OrgOssPdfreporterEngineJRExpressionChunk> chunk = [((IOSObjectArray *) nil_chk(a__)) objectAtIndex:i__];
        switch ([((id<OrgOssPdfreporterEngineJRExpressionChunk>) nil_chk(chunk)) getType]) {
          case OrgOssPdfreporterEngineJRExpressionChunk_TYPE_TEXT:
          [((id<OrgOssPdfreporterEngineUtilExpressionChunkVisitor>) nil_chk(visitor)) visitTextChunkWithOrgOssPdfreporterEngineJRExpressionChunk:chunk];
          break;
          case OrgOssPdfreporterEngineJRExpressionChunk_TYPE_PARAMETER:
          [((id<OrgOssPdfreporterEngineUtilExpressionChunkVisitor>) nil_chk(visitor)) visitParameterChunkWithOrgOssPdfreporterEngineJRExpressionChunk:chunk];
          break;
          case OrgOssPdfreporterEngineJRExpressionChunk_TYPE_FIELD:
          [((id<OrgOssPdfreporterEngineUtilExpressionChunkVisitor>) nil_chk(visitor)) visitFieldChunkWithOrgOssPdfreporterEngineJRExpressionChunk:chunk];
          break;
          case OrgOssPdfreporterEngineJRExpressionChunk_TYPE_VARIABLE:
          [((id<OrgOssPdfreporterEngineUtilExpressionChunkVisitor>) nil_chk(visitor)) visitVariableChunkWithOrgOssPdfreporterEngineJRExpressionChunk:chunk];
          break;
          case OrgOssPdfreporterEngineJRExpressionChunk_TYPE_RESOURCE:
          [((id<OrgOssPdfreporterEngineUtilExpressionChunkVisitor>) nil_chk(visitor)) visitResourceChunkWithOrgOssPdfreporterEngineJRExpressionChunk:chunk];
          break;
          default:
          @throw [[OrgOssPdfreporterEngineJRRuntimeException alloc] initWithNSString:[NSString stringWithFormat:@"Unknown expression chunk type %d", [((id<OrgOssPdfreporterEngineJRExpressionChunk>) nil_chk(chunk)) getType]]];
        }
      }
    }
  }
}

- (id)init {
  return [super init];
}

+ (void)initialize {
  if (self == [OrgOssPdfreporterEngineUtilJRExpressionUtil class]) {
    OrgOssPdfreporterEngineUtilJRExpressionUtil_SIMPLE_EXPRESSION_PATTERN_ = [JavaUtilRegexPattern compileWithNSString:@"\\s*\"([^\"]*((?<=\\\\)\"[^\"]*)*)\"\\s*"];
    OrgOssPdfreporterEngineUtilJRExpressionUtil_TEXT_QUOTE_PATTERN_ = [JavaUtilRegexPattern compileWithNSString:@"\\\\\""];
  }
}

@end
