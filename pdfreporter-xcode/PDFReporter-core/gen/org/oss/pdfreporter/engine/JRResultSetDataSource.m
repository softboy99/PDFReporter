//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: pdfreporter-core/src/org/oss/pdfreporter/engine/JRResultSetDataSource.java
//
//  Created by kendra on 9/27/13.
//

#include "IOSByteArray.h"
#include "IOSClass.h"
#include "java/io/ByteArrayInputStream.h"
#include "java/io/InputStream.h"
#include "java/lang/Boolean.h"
#include "java/lang/Byte.h"
#include "java/lang/Double.h"
#include "java/lang/Exception.h"
#include "java/lang/Float.h"
#include "java/lang/Integer.h"
#include "java/lang/Long.h"
#include "java/lang/Short.h"
#include "java/math/BigDecimal.h"
#include "java/sql/Date.h"
#include "java/sql/Time.h"
#include "java/sql/Timestamp.h"
#include "java/util/Calendar.h"
#include "java/util/Date.h"
#include "java/util/HashMap.h"
#include "java/util/Map.h"
#include "java/util/TimeZone.h"
#include "java/util/logging/Logger.h"
#include "org/oss/pdfreporter/engine/DefaultJasperReportsContext.h"
#include "org/oss/pdfreporter/engine/JRException.h"
#include "org/oss/pdfreporter/engine/JRField.h"
#include "org/oss/pdfreporter/engine/JRPropertiesMap.h"
#include "org/oss/pdfreporter/engine/JRPropertiesUtil.h"
#include "org/oss/pdfreporter/engine/JRResultSetDataSource.h"
#include "org/oss/pdfreporter/engine/JasperReportsContext.h"
#include "org/oss/pdfreporter/engine/query/JRJdbcQueryExecuterFactory.h"
#include "org/oss/pdfreporter/image/IImage.h"
#include "org/oss/pdfreporter/sql/IBlob.h"
#include "org/oss/pdfreporter/sql/IDate.h"
#include "org/oss/pdfreporter/sql/IResultMetaData.h"
#include "org/oss/pdfreporter/sql/IResultSet.h"
#include "org/oss/pdfreporter/sql/ITime.h"
#include "org/oss/pdfreporter/sql/ITimestamp.h"
#include "org/oss/pdfreporter/sql/SQLException.h"
#include "org/oss/pdfreporter/sql/SqlType.h"

@implementation OrgOssPdfreporterEngineJRResultSetDataSource

static JavaUtilLoggingLogger * OrgOssPdfreporterEngineJRResultSetDataSource_logger_;
static NSString * OrgOssPdfreporterEngineJRResultSetDataSource_INDEXED_COLUMN_PREFIX_ = @"COLUMN_";
static int OrgOssPdfreporterEngineJRResultSetDataSource_INDEXED_COLUMN_PREFIX_LENGTH_;

@synthesize jasperReportsContext = jasperReportsContext_;
@synthesize resultSet = resultSet_;
@synthesize columnIndexMap = columnIndexMap_;
@synthesize timeZone = timeZone_;
@synthesize timeZoneOverride = timeZoneOverride_;
@synthesize fieldCalendars = fieldCalendars_;

+ (JavaUtilLoggingLogger *)logger {
  return OrgOssPdfreporterEngineJRResultSetDataSource_logger_;
}

+ (NSString *)INDEXED_COLUMN_PREFIX {
  return OrgOssPdfreporterEngineJRResultSetDataSource_INDEXED_COLUMN_PREFIX_;
}

+ (int)INDEXED_COLUMN_PREFIX_LENGTH {
  return OrgOssPdfreporterEngineJRResultSetDataSource_INDEXED_COLUMN_PREFIX_LENGTH_;
}

- (id)initOrgOssPdfreporterEngineJRResultSetDataSourceWithOrgOssPdfreporterEngineJasperReportsContext:(id<OrgOssPdfreporterEngineJasperReportsContext>)jasperReportsContext
                                                                   withOrgOssPdfreporterSqlIResultSet:(id<OrgOssPdfreporterSqlIResultSet>)resultSet {
  if ((self = [super init])) {
    columnIndexMap_ = [[JavaUtilHashMap alloc] init];
    fieldCalendars_ = [[JavaUtilHashMap alloc] init];
    self.jasperReportsContext = jasperReportsContext;
    self.resultSet = resultSet;
  }
  return self;
}

- (id)initWithOrgOssPdfreporterEngineJasperReportsContext:(id<OrgOssPdfreporterEngineJasperReportsContext>)jasperReportsContext
                       withOrgOssPdfreporterSqlIResultSet:(id<OrgOssPdfreporterSqlIResultSet>)resultSet {
  return [self initOrgOssPdfreporterEngineJRResultSetDataSourceWithOrgOssPdfreporterEngineJasperReportsContext:jasperReportsContext withOrgOssPdfreporterSqlIResultSet:resultSet];
}

- (id)initWithOrgOssPdfreporterSqlIResultSet:(id<OrgOssPdfreporterSqlIResultSet>)resultSet {
  return [self initOrgOssPdfreporterEngineJRResultSetDataSourceWithOrgOssPdfreporterEngineJasperReportsContext:[OrgOssPdfreporterEngineDefaultJasperReportsContext getInstance] withOrgOssPdfreporterSqlIResultSet:resultSet];
}

- (BOOL)next {
  BOOL hasNext = NO;
  if (resultSet_ != nil) {
    @try {
      hasNext = [resultSet_ next];
    }
    @catch (OrgOssPdfreporterSqlSQLException *e) {
      @throw [[OrgOssPdfreporterEngineJRException alloc] initWithNSString:@"Unable to get next record." withJavaLangThrowable:e];
    }
  }
  return hasNext;
}

- (id)getFieldValueWithOrgOssPdfreporterEngineJRField:(id<OrgOssPdfreporterEngineJRField>)field {
  id objValue = nil;
  if (field != nil && resultSet_ != nil) {
    JavaLangInteger *columnIndex = [self getColumnIndexWithNSString:[((id<OrgOssPdfreporterEngineJRField>) nil_chk(field)) getName]];
    IOSClass *clazz = [((id<OrgOssPdfreporterEngineJRField>) nil_chk(field)) getValueClass];
    @try {
      if ([((IOSClass *) nil_chk(clazz)) isEqual:[IOSClass classWithClass:[JavaLangBoolean class]]]) {
        objValue = [((id<OrgOssPdfreporterSqlIResultSet>) nil_chk(resultSet_)) getBooleanWithInt:[((JavaLangInteger *) nil_chk(columnIndex)) intValue]] ? [JavaLangBoolean getTRUE] : [JavaLangBoolean getFALSE];
      }
      else if ([((IOSClass *) nil_chk(clazz)) isEqual:[IOSClass classWithClass:[JavaLangByte class]]]) {
        objValue = [[JavaLangByte alloc] initWithChar:[((id<OrgOssPdfreporterSqlIResultSet>) nil_chk(resultSet_)) getByteWithInt:[((JavaLangInteger *) nil_chk(columnIndex)) intValue]]];
        if ([((id<OrgOssPdfreporterSqlIResultSet>) nil_chk(resultSet_)) wasNull]) {
          objValue = nil;
        }
      }
      else if ([((IOSClass *) nil_chk(clazz)) isEqual:[IOSClass classWithClass:[JavaUtilDate class]]] || [((IOSClass *) nil_chk(clazz)) isEqual:[IOSClass classWithProtocol:@protocol(OrgOssPdfreporterSqlIDate)]] || [((IOSClass *) nil_chk(clazz)) isEqual:[IOSClass classWithClass:[JavaSqlDate class]]]) {
        objValue = [self readDateWithJavaLangInteger:columnIndex withOrgOssPdfreporterEngineJRField:field];
      }
      else if ([((IOSClass *) nil_chk(clazz)) isEqual:[IOSClass classWithProtocol:@protocol(OrgOssPdfreporterSqlITimestamp)]] || [((IOSClass *) nil_chk(clazz)) isEqual:[IOSClass classWithClass:[JavaSqlTimestamp class]]]) {
        objValue = [self readTimestampWithJavaLangInteger:columnIndex withOrgOssPdfreporterEngineJRField:field];
      }
      else if ([((IOSClass *) nil_chk(clazz)) isEqual:[IOSClass classWithProtocol:@protocol(OrgOssPdfreporterSqlITime)]] || [((IOSClass *) nil_chk(clazz)) isEqual:[IOSClass classWithClass:[JavaSqlTime class]]]) {
        objValue = [self readTimeWithJavaLangInteger:columnIndex withOrgOssPdfreporterEngineJRField:field];
      }
      else if ([((IOSClass *) nil_chk(clazz)) isEqual:[IOSClass classWithClass:[JavaLangDouble class]]]) {
        objValue = [[JavaLangDouble alloc] initWithDouble:[((id<OrgOssPdfreporterSqlIResultSet>) nil_chk(resultSet_)) getDoubleWithInt:[((JavaLangInteger *) nil_chk(columnIndex)) intValue]]];
        if ([((id<OrgOssPdfreporterSqlIResultSet>) nil_chk(resultSet_)) wasNull]) {
          objValue = nil;
        }
      }
      else if ([((IOSClass *) nil_chk(clazz)) isEqual:[IOSClass classWithClass:[JavaLangFloat class]]]) {
        objValue = [[JavaLangFloat alloc] initWithFloat:[((id<OrgOssPdfreporterSqlIResultSet>) nil_chk(resultSet_)) getFloatWithInt:[((JavaLangInteger *) nil_chk(columnIndex)) intValue]]];
        if ([((id<OrgOssPdfreporterSqlIResultSet>) nil_chk(resultSet_)) wasNull]) {
          objValue = nil;
        }
      }
      else if ([((IOSClass *) nil_chk(clazz)) isEqual:[IOSClass classWithClass:[JavaLangInteger class]]]) {
        objValue = [JavaLangInteger valueOfWithInt:[((id<OrgOssPdfreporterSqlIResultSet>) nil_chk(resultSet_)) getIntWithInt:[((JavaLangInteger *) nil_chk(columnIndex)) intValue]]];
        if ([((id<OrgOssPdfreporterSqlIResultSet>) nil_chk(resultSet_)) wasNull]) {
          objValue = nil;
        }
      }
      else if ([((IOSClass *) nil_chk(clazz)) isEqual:[IOSClass classWithClass:[JavaIoInputStream class]]]) {
        IOSByteArray *bytes = [self readBytesWithJavaLangInteger:columnIndex];
        if (bytes == nil) {
          objValue = nil;
        }
        else {
          objValue = [[JavaIoByteArrayInputStream alloc] initWithByteArray:bytes];
        }
      }
      else if ([((IOSClass *) nil_chk(clazz)) isEqual:[IOSClass classWithClass:[JavaLangLong class]]]) {
        objValue = [[JavaLangLong alloc] initWithLongInt:[((id<OrgOssPdfreporterSqlIResultSet>) nil_chk(resultSet_)) getLongWithInt:[((JavaLangInteger *) nil_chk(columnIndex)) intValue]]];
        if ([((id<OrgOssPdfreporterSqlIResultSet>) nil_chk(resultSet_)) wasNull]) {
          objValue = nil;
        }
      }
      else if ([((IOSClass *) nil_chk(clazz)) isEqual:[IOSClass classWithClass:[JavaLangShort class]]]) {
        objValue = [[JavaLangShort alloc] initWithShortInt:[((id<OrgOssPdfreporterSqlIResultSet>) nil_chk(resultSet_)) getShortWithInt:[((JavaLangInteger *) nil_chk(columnIndex)) intValue]]];
        if ([((id<OrgOssPdfreporterSqlIResultSet>) nil_chk(resultSet_)) wasNull]) {
          objValue = nil;
        }
      }
      else if ([((IOSClass *) nil_chk(clazz)) isEqual:[IOSClass classWithClass:[JavaMathBigDecimal class]]]) {
        objValue = [((id<OrgOssPdfreporterSqlIResultSet>) nil_chk(resultSet_)) getDecimalWithInt:[((JavaLangInteger *) nil_chk(columnIndex)) intValue]];
        if ([((id<OrgOssPdfreporterSqlIResultSet>) nil_chk(resultSet_)) wasNull]) {
          objValue = nil;
        }
      }
      else if ([((IOSClass *) nil_chk(clazz)) isEqual:[IOSClass classWithClass:[NSString class]]]) {
        OrgOssPdfreporterSqlSqlTypeEnum *columnType = [((id<OrgOssPdfreporterSqlIResultMetaData>) nil_chk([((id<OrgOssPdfreporterSqlIResultSet>) nil_chk(resultSet_)) getMetaData])) getColumnTypeWithInt:[((JavaLangInteger *) nil_chk(columnIndex)) intValue]];
        switch ([columnType ordinal]) {
          default:
          objValue = [((id<OrgOssPdfreporterSqlIResultSet>) nil_chk(resultSet_)) getStringWithInt:[((JavaLangInteger *) nil_chk(columnIndex)) intValue]];
          if ([((id<OrgOssPdfreporterSqlIResultSet>) nil_chk(resultSet_)) wasNull]) {
            objValue = nil;
          }
          break;
        }
      }
      else if ([((IOSClass *) nil_chk(clazz)) isEqual:[IOSClass classWithProtocol:@protocol(OrgOssPdfreporterSqlIBlob)]]) {
        objValue = [((id<OrgOssPdfreporterSqlIResultSet>) nil_chk(resultSet_)) getBlobWithInt:[((JavaLangInteger *) nil_chk(columnIndex)) intValue]];
        if ([((id<OrgOssPdfreporterSqlIResultSet>) nil_chk(resultSet_)) wasNull]) {
          objValue = nil;
        }
      }
      else if ([((IOSClass *) nil_chk(clazz)) isEqual:[IOSClass classWithProtocol:@protocol(OrgOssPdfreporterImageIImage)]]) {
        IOSByteArray *bytes = [self readBytesWithJavaLangInteger:columnIndex];
        if (bytes == nil) {
          objValue = nil;
        }
        else {
          [((JavaUtilLoggingLogger *) nil_chk(OrgOssPdfreporterEngineJRResultSetDataSource_logger_)) warningWithNSString:@"Images from Database are not supported."];
          objValue = nil;
        }
      }
      else {
        objValue = [((id<OrgOssPdfreporterSqlIResultSet>) nil_chk(resultSet_)) getObjectWithInt:[((JavaLangInteger *) nil_chk(columnIndex)) intValue]];
      }
    }
    @catch (JavaLangException *e) {
      @throw [[OrgOssPdfreporterEngineJRException alloc] initWithNSString:[NSString stringWithFormat:@"Unable to get value for field '%@' of class '%@'", [((id<OrgOssPdfreporterEngineJRField>) nil_chk(field)) getName], [((IOSClass *) nil_chk(clazz)) getName]] withJavaLangThrowable:e];
    }
  }
  return objValue;
}

- (id)readDateWithJavaLangInteger:(JavaLangInteger *)columnIndex
withOrgOssPdfreporterEngineJRField:(id<OrgOssPdfreporterEngineJRField>)field {
  id objValue = nil;
  id<OrgOssPdfreporterSqlIDate> value = [((id<OrgOssPdfreporterSqlIResultSet>) nil_chk(resultSet_)) getDateWithInt:[((JavaLangInteger *) nil_chk(columnIndex)) intValue]];
  if (![((id<OrgOssPdfreporterSqlIResultSet>) nil_chk(resultSet_)) wasNull]) {
    objValue = [((id<OrgOssPdfreporterSqlIDate>) nil_chk(value)) getDate];
  }
  return objValue;
}

- (id)readTimestampWithJavaLangInteger:(JavaLangInteger *)columnIndex
    withOrgOssPdfreporterEngineJRField:(id<OrgOssPdfreporterEngineJRField>)field {
  id objValue = nil;
  id<OrgOssPdfreporterSqlITimestamp> value = [((id<OrgOssPdfreporterSqlIResultSet>) nil_chk(resultSet_)) getTimestampWithInt:[((JavaLangInteger *) nil_chk(columnIndex)) intValue]];
  if (![((id<OrgOssPdfreporterSqlIResultSet>) nil_chk(resultSet_)) wasNull]) {
    objValue = [[JavaUtilDate alloc] initWithLongInt:[((id<OrgOssPdfreporterSqlITimestamp>) nil_chk(value)) getMilliseconds]];
  }
  return objValue;
}

- (id)readTimeWithJavaLangInteger:(JavaLangInteger *)columnIndex
withOrgOssPdfreporterEngineJRField:(id<OrgOssPdfreporterEngineJRField>)field {
  id objValue = nil;
  id<OrgOssPdfreporterSqlITime> value = [((id<OrgOssPdfreporterSqlIResultSet>) nil_chk(resultSet_)) getTimeWithInt:[((JavaLangInteger *) nil_chk(columnIndex)) intValue]];
  if (![((id<OrgOssPdfreporterSqlIResultSet>) nil_chk(resultSet_)) wasNull]) {
    objValue = [((id<OrgOssPdfreporterSqlITime>) nil_chk(value)) getDate];
  }
  return objValue;
}

- (JavaLangInteger *)getColumnIndexWithNSString:(NSString *)fieldName {
  JavaLangInteger *columnIndex = [((id<JavaUtilMap>) nil_chk(columnIndexMap_)) getWithId:fieldName];
  if (columnIndex == nil) {
    @try {
      columnIndex = [self searchColumnByNameWithNSString:fieldName];
      if (columnIndex == nil) {
        columnIndex = [self searchColumnByLabelWithNSString:fieldName];
      }
      if (columnIndex == nil && [((NSString *) nil_chk(fieldName)) hasPrefix:OrgOssPdfreporterEngineJRResultSetDataSource_INDEXED_COLUMN_PREFIX_]) {
        columnIndex = [JavaLangInteger valueOfWithNSString:[((NSString *) nil_chk(fieldName)) substring:OrgOssPdfreporterEngineJRResultSetDataSource_INDEXED_COLUMN_PREFIX_LENGTH_]];
        if ([columnIndex intValue] <= 0 || [columnIndex intValue] > [((id<OrgOssPdfreporterSqlIResultMetaData>) nil_chk([((id<OrgOssPdfreporterSqlIResultSet>) nil_chk(resultSet_)) getMetaData])) getColumnCount]) {
          @throw [[OrgOssPdfreporterEngineJRException alloc] initWithNSString:[NSString stringWithFormat:@"Column index out of range : %@", columnIndex]];
        }
      }
      if (columnIndex == nil) {
        @throw [[OrgOssPdfreporterEngineJRException alloc] initWithNSString:[NSString stringWithFormat:@"Unknown column name : %@", fieldName]];
      }
    }
    @catch (OrgOssPdfreporterSqlSQLException *e) {
      @throw [[OrgOssPdfreporterEngineJRException alloc] initWithNSString:@"Unable to retrieve result set metadata." withJavaLangThrowable:e];
    }
    (void) [((id<JavaUtilMap>) nil_chk(columnIndexMap_)) putWithId:fieldName withId:columnIndex];
  }
  return columnIndex;
}

- (JavaLangInteger *)searchColumnByNameWithNSString:(NSString *)fieldName {
  JavaLangInteger *columnIndex = nil;
  id<OrgOssPdfreporterSqlIResultMetaData> metadata = [((id<OrgOssPdfreporterSqlIResultSet>) nil_chk(resultSet_)) getMetaData];
  for (int i = 1; i <= [((id<OrgOssPdfreporterSqlIResultMetaData>) nil_chk(metadata)) getColumnCount]; i++) {
    NSString *columnName = [((id<OrgOssPdfreporterSqlIResultMetaData>) nil_chk(metadata)) getColumnNameWithInt:i];
    if ([((NSString *) nil_chk(fieldName)) equalsIgnoreCase:columnName]) {
      columnIndex = [JavaLangInteger valueOfWithInt:i];
      break;
    }
  }
  return columnIndex;
}

- (JavaLangInteger *)searchColumnByLabelWithNSString:(NSString *)fieldName {
  JavaLangInteger *columnIndex = nil;
  id<OrgOssPdfreporterSqlIResultMetaData> metadata = [((id<OrgOssPdfreporterSqlIResultSet>) nil_chk(resultSet_)) getMetaData];
  for (int i = 1; i <= [((id<OrgOssPdfreporterSqlIResultMetaData>) nil_chk(metadata)) getColumnCount]; i++) {
    NSString *columnLabel = [((id<OrgOssPdfreporterSqlIResultMetaData>) nil_chk(metadata)) getColumnLabelWithInt:i];
    if (columnLabel != nil && [((NSString *) nil_chk(fieldName)) equalsIgnoreCase:columnLabel]) {
      columnIndex = [JavaLangInteger valueOfWithInt:i];
      break;
    }
  }
  return columnIndex;
}

- (IOSByteArray *)readBytesWithJavaLangInteger:(JavaLangInteger *)columnIndex {
  IOSByteArray *bytes = nil;
  OrgOssPdfreporterSqlSqlTypeEnum *columnType = [((id<OrgOssPdfreporterSqlIResultMetaData>) nil_chk([((id<OrgOssPdfreporterSqlIResultSet>) nil_chk(resultSet_)) getMetaData])) getColumnTypeWithInt:[((JavaLangInteger *) nil_chk(columnIndex)) intValue]];
  switch ([columnType ordinal]) {
    case OrgOssPdfreporterSqlSqlType_BLOB:
    {
      id<OrgOssPdfreporterSqlIBlob> blob = [((id<OrgOssPdfreporterSqlIResultSet>) nil_chk(resultSet_)) getBlobWithInt:[((JavaLangInteger *) nil_chk(columnIndex)) intValue]];
      if (![((id<OrgOssPdfreporterSqlIResultSet>) nil_chk(resultSet_)) wasNull]) {
        bytes = [((id<OrgOssPdfreporterSqlIBlob>) nil_chk(blob)) getBytes];
      }
      break;
    }
    default:
    {
      @throw [[OrgOssPdfreporterSqlSQLException alloc] initWithNSString:@"Binary data requires BLOB column type to access."];
    }
  }
  return bytes;
}

- (void)setTimeZoneWithJavaUtilTimeZone:(JavaUtilTimeZone *)timeZone
                               withBOOL:(BOOL)override {
  self.timeZone = timeZone;
  self.timeZoneOverride = override;
}

- (JavaUtilCalendar *)getFieldCalendarWithOrgOssPdfreporterEngineJRField:(id<OrgOssPdfreporterEngineJRField>)field {
  if ([((id<JavaUtilMap>) nil_chk(fieldCalendars_)) containsKeyWithId:field]) {
    return [((id<JavaUtilMap>) nil_chk(fieldCalendars_)) getWithId:field];
  }
  JavaUtilCalendar *calendar = [self createFieldCalendarWithOrgOssPdfreporterEngineJRField:field];
  (void) [((id<JavaUtilMap>) nil_chk(fieldCalendars_)) putWithId:field withId:calendar];
  return calendar;
}

- (JavaUtilCalendar *)createFieldCalendarWithOrgOssPdfreporterEngineJRField:(id<OrgOssPdfreporterEngineJRField>)field {
  JavaUtilTimeZone *tz;
  if (timeZoneOverride_) {
    tz = timeZone_;
  }
  else {
    if ([((id<OrgOssPdfreporterEngineJRField>) nil_chk(field)) hasProperties] && [((OrgOssPdfreporterEngineJRPropertiesMap *) nil_chk([((id<OrgOssPdfreporterEngineJRField>) nil_chk(field)) getPropertiesMap])) containsPropertyWithNSString:[OrgOssPdfreporterEngineQueryJRJdbcQueryExecuterFactory PROPERTY_TIME_ZONE]]) {
      NSString *timezoneId = [((OrgOssPdfreporterEngineJRPropertiesUtil *) nil_chk([OrgOssPdfreporterEngineJRPropertiesUtil getInstanceWithOrgOssPdfreporterEngineJasperReportsContext:jasperReportsContext_])) getPropertyWithOrgOssPdfreporterEngineJRPropertiesHolder:field withNSString:[OrgOssPdfreporterEngineQueryJRJdbcQueryExecuterFactory PROPERTY_TIME_ZONE]];
      tz = (timezoneId == nil || [((NSString *) nil_chk(timezoneId)) length] == 0) ? nil : [JavaUtilTimeZone getTimeZoneWithNSString:timezoneId];
    }
    else {
      tz = timeZone_;
    }
  }
  JavaUtilCalendar *cal = tz == nil ? nil : [JavaUtilCalendar getInstanceWithJavaUtilTimeZone:tz];
  return cal;
}

+ (void)initialize {
  if (self == [OrgOssPdfreporterEngineJRResultSetDataSource class]) {
    OrgOssPdfreporterEngineJRResultSetDataSource_logger_ = [JavaUtilLoggingLogger getLoggerWithNSString:[[IOSClass classWithClass:[OrgOssPdfreporterEngineJRResultSetDataSource class]] getName]];
    OrgOssPdfreporterEngineJRResultSetDataSource_INDEXED_COLUMN_PREFIX_LENGTH_ = [((NSString *) nil_chk(OrgOssPdfreporterEngineJRResultSetDataSource_INDEXED_COLUMN_PREFIX_)) length];
  }
}

- (void)copyAllPropertiesTo:(id)copy {
  [super copyAllPropertiesTo:copy];
  OrgOssPdfreporterEngineJRResultSetDataSource *typedCopy = (OrgOssPdfreporterEngineJRResultSetDataSource *) copy;
  typedCopy.jasperReportsContext = jasperReportsContext_;
  typedCopy.resultSet = resultSet_;
  typedCopy.columnIndexMap = columnIndexMap_;
  typedCopy.timeZone = timeZone_;
  typedCopy.timeZoneOverride = timeZoneOverride_;
  typedCopy.fieldCalendars = fieldCalendars_;
}

@end
