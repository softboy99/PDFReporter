//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: pdfreporter-core/src/org/oss/pdfreporter/engine/JasperFillManager.java
//
//  Created by kendra on 9/27/13.
//

#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "java/io/File.h"
#include "java/io/InputStream.h"
#include "java/io/OutputStream.h"
#include "java/lang/System.h"
#include "java/util/Arrays.h"
#include "java/util/HashMap.h"
#include "java/util/List.h"
#include "java/util/Map.h"
#include "java/util/logging/Logger.h"
#include "org/oss/pdfreporter/engine/DefaultJasperReportsContext.h"
#include "org/oss/pdfreporter/engine/JRDataSource.h"
#include "org/oss/pdfreporter/engine/JasperFillManager.h"
#include "org/oss/pdfreporter/engine/JasperPrint.h"
#include "org/oss/pdfreporter/engine/JasperReport.h"
#include "org/oss/pdfreporter/engine/JasperReportsContext.h"
#include "org/oss/pdfreporter/engine/fill/JRFiller.h"
#include "org/oss/pdfreporter/engine/util/JRLoader.h"
#include "org/oss/pdfreporter/engine/util/JRSaver.h"
#include "org/oss/pdfreporter/engine/util/LocalJasperReportsContext.h"
#include "org/oss/pdfreporter/engine/util/SimpleFileResolver.h"
#include "org/oss/pdfreporter/progress/IProgressHandler.h"
#include "org/oss/pdfreporter/progress/ProgressManager.h"
#include "org/oss/pdfreporter/sql/IConnection.h"

@implementation OrgOssPdfreporterEngineJasperFillManager

static JavaUtilLoggingLogger * OrgOssPdfreporterEngineJasperFillManager_logger_;

@synthesize jasperReportsContext = jasperReportsContext_;

+ (JavaUtilLoggingLogger *)logger {
  return OrgOssPdfreporterEngineJasperFillManager_logger_;
}

- (id)initWithOrgOssPdfreporterEngineJasperReportsContext:(id<OrgOssPdfreporterEngineJasperReportsContext>)jasperReportsContext {
  if ((self = [super init])) {
    self.jasperReportsContext = jasperReportsContext;
  }
  return self;
}

+ (OrgOssPdfreporterEngineJasperFillManager *)getDefaultInstance {
  return [[OrgOssPdfreporterEngineJasperFillManager alloc] initWithOrgOssPdfreporterEngineJasperReportsContext:[OrgOssPdfreporterEngineDefaultJasperReportsContext getInstance]];
}

+ (OrgOssPdfreporterEngineJasperFillManager *)getInstanceWithOrgOssPdfreporterEngineJasperReportsContext:(id<OrgOssPdfreporterEngineJasperReportsContext>)jasperReportsContext {
  return [[OrgOssPdfreporterEngineJasperFillManager alloc] initWithOrgOssPdfreporterEngineJasperReportsContext:jasperReportsContext];
}

- (NSString *)fillToFileWithNSString:(NSString *)sourceFileName
                     withJavaUtilMap:(id<JavaUtilMap>)params
 withOrgOssPdfreporterSqlIConnection:(id<OrgOssPdfreporterSqlIConnection>)connection {
  JavaIoFile *sourceFile = [[JavaIoFile alloc] initWithNSString:sourceFileName];
  OrgOssPdfreporterEngineJasperReport *jasperReport = (OrgOssPdfreporterEngineJasperReport *) [OrgOssPdfreporterEngineUtilJRLoader loadObjectWithJavaIoFile:sourceFile];
  JavaIoFile *destFile = [[JavaIoFile alloc] initWithNSString:[((JavaIoFile *) nil_chk(sourceFile)) getParent] withNSString:[NSString stringWithFormat:@"%@.jrprint", [((OrgOssPdfreporterEngineJasperReport *) nil_chk(jasperReport)) getName]]];
  NSString *destFileName = [((JavaIoFile *) nil_chk(destFile)) description];
  id<JavaUtilMap> parameters = [self setFileResolverWithJavaIoFile:sourceFile withJavaUtilMap:params];
  [self fillToFileWithOrgOssPdfreporterEngineJasperReport:jasperReport withNSString:destFileName withJavaUtilMap:parameters withOrgOssPdfreporterSqlIConnection:connection];
  return destFileName;
}

- (NSString *)fillToFileWithNSString:(NSString *)sourceFileName
                     withJavaUtilMap:(id<JavaUtilMap>)params {
  JavaIoFile *sourceFile = [[JavaIoFile alloc] initWithNSString:sourceFileName];
  OrgOssPdfreporterEngineJasperReport *jasperReport = (OrgOssPdfreporterEngineJasperReport *) [OrgOssPdfreporterEngineUtilJRLoader loadObjectWithJavaIoFile:sourceFile];
  JavaIoFile *destFile = [[JavaIoFile alloc] initWithNSString:[((JavaIoFile *) nil_chk(sourceFile)) getParent] withNSString:[NSString stringWithFormat:@"%@.jrprint", [((OrgOssPdfreporterEngineJasperReport *) nil_chk(jasperReport)) getName]]];
  NSString *destFileName = [((JavaIoFile *) nil_chk(destFile)) description];
  id<JavaUtilMap> parameters = [self setFileResolverWithJavaIoFile:sourceFile withJavaUtilMap:params];
  [self fillToFileWithOrgOssPdfreporterEngineJasperReport:jasperReport withNSString:destFileName withJavaUtilMap:parameters];
  return destFileName;
}

- (void)fillToFileWithNSString:(NSString *)sourceFileName
                  withNSString:(NSString *)destFileName
               withJavaUtilMap:(id<JavaUtilMap>)params
withOrgOssPdfreporterSqlIConnection:(id<OrgOssPdfreporterSqlIConnection>)connection {
  JavaIoFile *sourceFile = [[JavaIoFile alloc] initWithNSString:sourceFileName];
  OrgOssPdfreporterEngineJasperReport *jasperReport = (OrgOssPdfreporterEngineJasperReport *) [OrgOssPdfreporterEngineUtilJRLoader loadObjectWithJavaIoFile:sourceFile];
  id<JavaUtilMap> parameters = [self setFileResolverWithJavaIoFile:sourceFile withJavaUtilMap:params];
  [self fillToFileWithOrgOssPdfreporterEngineJasperReport:jasperReport withNSString:destFileName withJavaUtilMap:parameters withOrgOssPdfreporterSqlIConnection:connection];
}

- (void)fillToFileWithNSString:(NSString *)sourceFileName
                  withNSString:(NSString *)destFileName
               withJavaUtilMap:(id<JavaUtilMap>)params {
  JavaIoFile *sourceFile = [[JavaIoFile alloc] initWithNSString:sourceFileName];
  OrgOssPdfreporterEngineJasperReport *jasperReport = (OrgOssPdfreporterEngineJasperReport *) [OrgOssPdfreporterEngineUtilJRLoader loadObjectWithJavaIoFile:sourceFile];
  id<JavaUtilMap> parameters = [self setFileResolverWithJavaIoFile:sourceFile withJavaUtilMap:params];
  [self fillToFileWithOrgOssPdfreporterEngineJasperReport:jasperReport withNSString:destFileName withJavaUtilMap:parameters];
}

- (void)fillToFileWithOrgOssPdfreporterEngineJasperReport:(OrgOssPdfreporterEngineJasperReport *)jasperReport
                                             withNSString:(NSString *)destFileName
                                          withJavaUtilMap:(id<JavaUtilMap>)parameters
                      withOrgOssPdfreporterSqlIConnection:(id<OrgOssPdfreporterSqlIConnection>)connection {
  OrgOssPdfreporterEngineJasperPrint *jasperPrint = [self fillWithOrgOssPdfreporterEngineJasperReport:jasperReport withJavaUtilMap:parameters withOrgOssPdfreporterSqlIConnection:connection];
  [OrgOssPdfreporterEngineUtilJRSaver saveObjectWithId:jasperPrint withNSString:destFileName];
}

- (void)fillToFileWithOrgOssPdfreporterEngineJasperReport:(OrgOssPdfreporterEngineJasperReport *)jasperReport
                                             withNSString:(NSString *)destFileName
                                          withJavaUtilMap:(id<JavaUtilMap>)parameters {
  OrgOssPdfreporterEngineJasperPrint *jasperPrint = [self fillWithOrgOssPdfreporterEngineJasperReport:jasperReport withJavaUtilMap:parameters];
  [OrgOssPdfreporterEngineUtilJRSaver saveObjectWithId:jasperPrint withNSString:destFileName];
}

- (OrgOssPdfreporterEngineJasperPrint *)fillWithNSString:(NSString *)sourceFileName
                                         withJavaUtilMap:(id<JavaUtilMap>)params
                     withOrgOssPdfreporterSqlIConnection:(id<OrgOssPdfreporterSqlIConnection>)connection {
  JavaIoFile *sourceFile = [[JavaIoFile alloc] initWithNSString:sourceFileName];
  OrgOssPdfreporterEngineJasperReport *jasperReport = (OrgOssPdfreporterEngineJasperReport *) [OrgOssPdfreporterEngineUtilJRLoader loadObjectWithJavaIoFile:sourceFile];
  id<JavaUtilMap> parameters = [self setFileResolverWithJavaIoFile:sourceFile withJavaUtilMap:params];
  return [self fillWithOrgOssPdfreporterEngineJasperReport:jasperReport withJavaUtilMap:parameters withOrgOssPdfreporterSqlIConnection:connection];
}

- (OrgOssPdfreporterEngineJasperPrint *)fillWithNSString:(NSString *)sourceFileName
                                         withJavaUtilMap:(id<JavaUtilMap>)params {
  JavaIoFile *sourceFile = [[JavaIoFile alloc] initWithNSString:sourceFileName];
  OrgOssPdfreporterEngineJasperReport *jasperReport = (OrgOssPdfreporterEngineJasperReport *) [OrgOssPdfreporterEngineUtilJRLoader loadObjectWithJavaIoFile:sourceFile];
  id<JavaUtilMap> parameters = [self setFileResolverWithJavaIoFile:sourceFile withJavaUtilMap:params];
  return [self fillWithOrgOssPdfreporterEngineJasperReport:jasperReport withJavaUtilMap:parameters];
}

- (void)fillToStreamWithJavaIoInputStream:(JavaIoInputStream *)inputStream
                   withJavaIoOutputStream:(JavaIoOutputStream *)outputStream
                          withJavaUtilMap:(id<JavaUtilMap>)parameters
      withOrgOssPdfreporterSqlIConnection:(id<OrgOssPdfreporterSqlIConnection>)connection {
  OrgOssPdfreporterEngineJasperReport *jasperReport = (OrgOssPdfreporterEngineJasperReport *) [OrgOssPdfreporterEngineUtilJRLoader loadObjectWithJavaIoInputStream:inputStream];
  [self fillToStreamWithOrgOssPdfreporterEngineJasperReport:jasperReport withJavaIoOutputStream:outputStream withJavaUtilMap:parameters withOrgOssPdfreporterSqlIConnection:connection];
}

- (void)fillToStreamWithJavaIoInputStream:(JavaIoInputStream *)inputStream
                   withJavaIoOutputStream:(JavaIoOutputStream *)outputStream
                          withJavaUtilMap:(id<JavaUtilMap>)parameters {
  OrgOssPdfreporterEngineJasperReport *jasperReport = (OrgOssPdfreporterEngineJasperReport *) [OrgOssPdfreporterEngineUtilJRLoader loadObjectWithJavaIoInputStream:inputStream];
  [self fillToStreamWithOrgOssPdfreporterEngineJasperReport:jasperReport withJavaIoOutputStream:outputStream withJavaUtilMap:parameters];
}

- (void)fillToStreamWithOrgOssPdfreporterEngineJasperReport:(OrgOssPdfreporterEngineJasperReport *)jasperReport
                                     withJavaIoOutputStream:(JavaIoOutputStream *)outputStream
                                            withJavaUtilMap:(id<JavaUtilMap>)parameters
                        withOrgOssPdfreporterSqlIConnection:(id<OrgOssPdfreporterSqlIConnection>)connection {
  OrgOssPdfreporterEngineJasperPrint *jasperPrint = [self fillWithOrgOssPdfreporterEngineJasperReport:jasperReport withJavaUtilMap:parameters withOrgOssPdfreporterSqlIConnection:connection];
  [OrgOssPdfreporterEngineUtilJRSaver saveObjectWithId:jasperPrint withJavaIoOutputStream:outputStream];
}

- (void)fillToStreamWithOrgOssPdfreporterEngineJasperReport:(OrgOssPdfreporterEngineJasperReport *)jasperReport
                                     withJavaIoOutputStream:(JavaIoOutputStream *)outputStream
                                            withJavaUtilMap:(id<JavaUtilMap>)parameters {
  OrgOssPdfreporterEngineJasperPrint *jasperPrint = [self fillWithOrgOssPdfreporterEngineJasperReport:jasperReport withJavaUtilMap:parameters];
  [OrgOssPdfreporterEngineUtilJRSaver saveObjectWithId:jasperPrint withJavaIoOutputStream:outputStream];
}

- (OrgOssPdfreporterEngineJasperPrint *)fillWithJavaIoInputStream:(JavaIoInputStream *)inputStream
                                                  withJavaUtilMap:(id<JavaUtilMap>)parameters
                              withOrgOssPdfreporterSqlIConnection:(id<OrgOssPdfreporterSqlIConnection>)connection {
  OrgOssPdfreporterEngineJasperReport *jasperReport = (OrgOssPdfreporterEngineJasperReport *) [OrgOssPdfreporterEngineUtilJRLoader loadObjectWithJavaIoInputStream:inputStream];
  return [self fillWithOrgOssPdfreporterEngineJasperReport:jasperReport withJavaUtilMap:parameters withOrgOssPdfreporterSqlIConnection:connection];
}

- (OrgOssPdfreporterEngineJasperPrint *)fillWithJavaIoInputStream:(JavaIoInputStream *)inputStream
                                                  withJavaUtilMap:(id<JavaUtilMap>)parameters {
  OrgOssPdfreporterEngineJasperReport *jasperReport = (OrgOssPdfreporterEngineJasperReport *) [OrgOssPdfreporterEngineUtilJRLoader loadObjectWithJavaIoInputStream:inputStream];
  return [self fillWithOrgOssPdfreporterEngineJasperReport:jasperReport withJavaUtilMap:parameters];
}

- (OrgOssPdfreporterEngineJasperPrint *)fillWithOrgOssPdfreporterEngineJasperReport:(OrgOssPdfreporterEngineJasperReport *)jasperReport
                                                                    withJavaUtilMap:(id<JavaUtilMap>)parameters
                                                withOrgOssPdfreporterSqlIConnection:(id<OrgOssPdfreporterSqlIConnection>)connection {
  return [OrgOssPdfreporterEngineFillJRFiller fillWithOrgOssPdfreporterEngineJasperReportsContext:jasperReportsContext_ withOrgOssPdfreporterEngineJasperReport:jasperReport withJavaUtilMap:parameters withOrgOssPdfreporterSqlIConnection:connection];
}

- (OrgOssPdfreporterEngineJasperPrint *)fillWithOrgOssPdfreporterEngineJasperReport:(OrgOssPdfreporterEngineJasperReport *)jasperReport
                                                                    withJavaUtilMap:(id<JavaUtilMap>)parameters {
  return [OrgOssPdfreporterEngineFillJRFiller fillWithOrgOssPdfreporterEngineJasperReportsContext:jasperReportsContext_ withOrgOssPdfreporterEngineJasperReport:jasperReport withJavaUtilMap:parameters];
}

- (NSString *)fillToFileWithNSString:(NSString *)sourceFileName
                     withJavaUtilMap:(id<JavaUtilMap>)params
withOrgOssPdfreporterEngineJRDataSource:(id<OrgOssPdfreporterEngineJRDataSource>)dataSource {
  JavaIoFile *sourceFile = [[JavaIoFile alloc] initWithNSString:sourceFileName];
  OrgOssPdfreporterEngineJasperReport *jasperReport = (OrgOssPdfreporterEngineJasperReport *) [OrgOssPdfreporterEngineUtilJRLoader loadObjectWithJavaIoFile:sourceFile];
  JavaIoFile *destFile = [[JavaIoFile alloc] initWithNSString:[((JavaIoFile *) nil_chk(sourceFile)) getParent] withNSString:[NSString stringWithFormat:@"%@.jrprint", [((OrgOssPdfreporterEngineJasperReport *) nil_chk(jasperReport)) getName]]];
  NSString *destFileName = [((JavaIoFile *) nil_chk(destFile)) description];
  id<JavaUtilMap> parameters = [self setFileResolverWithJavaIoFile:sourceFile withJavaUtilMap:params];
  [self fillToFileWithOrgOssPdfreporterEngineJasperReport:jasperReport withNSString:destFileName withJavaUtilMap:parameters withOrgOssPdfreporterEngineJRDataSource:dataSource];
  return destFileName;
}

- (void)fillToFileWithNSString:(NSString *)sourceFileName
                  withNSString:(NSString *)destFileName
               withJavaUtilMap:(id<JavaUtilMap>)params
withOrgOssPdfreporterEngineJRDataSource:(id<OrgOssPdfreporterEngineJRDataSource>)dataSource {
  JavaIoFile *sourceFile = [[JavaIoFile alloc] initWithNSString:sourceFileName];
  OrgOssPdfreporterEngineJasperReport *jasperReport = (OrgOssPdfreporterEngineJasperReport *) [OrgOssPdfreporterEngineUtilJRLoader loadObjectWithJavaIoFile:sourceFile];
  id<JavaUtilMap> parameters = [self setFileResolverWithJavaIoFile:sourceFile withJavaUtilMap:params];
  [self fillToFileWithOrgOssPdfreporterEngineJasperReport:jasperReport withNSString:destFileName withJavaUtilMap:parameters withOrgOssPdfreporterEngineJRDataSource:dataSource];
}

- (void)fillToFileWithOrgOssPdfreporterEngineJasperReport:(OrgOssPdfreporterEngineJasperReport *)jasperReport
                                             withNSString:(NSString *)destFileName
                                          withJavaUtilMap:(id<JavaUtilMap>)parameters
                  withOrgOssPdfreporterEngineJRDataSource:(id<OrgOssPdfreporterEngineJRDataSource>)dataSource {
  OrgOssPdfreporterEngineJasperPrint *jasperPrint = [self fillWithOrgOssPdfreporterEngineJasperReport:jasperReport withJavaUtilMap:parameters withOrgOssPdfreporterEngineJRDataSource:dataSource];
  [OrgOssPdfreporterEngineUtilJRSaver saveObjectWithId:jasperPrint withNSString:destFileName];
}

- (OrgOssPdfreporterEngineJasperPrint *)fillWithNSString:(NSString *)sourceFileName
                                         withJavaUtilMap:(id<JavaUtilMap>)params
                 withOrgOssPdfreporterEngineJRDataSource:(id<OrgOssPdfreporterEngineJRDataSource>)dataSource {
  JavaIoFile *sourceFile = [[JavaIoFile alloc] initWithNSString:sourceFileName];
  OrgOssPdfreporterEngineJasperReport *jasperReport = (OrgOssPdfreporterEngineJasperReport *) [OrgOssPdfreporterEngineUtilJRLoader loadObjectWithJavaIoFile:sourceFile];
  id<JavaUtilMap> parameters = [self setFileResolverWithJavaIoFile:sourceFile withJavaUtilMap:params];
  return [self fillWithOrgOssPdfreporterEngineJasperReport:jasperReport withJavaUtilMap:parameters withOrgOssPdfreporterEngineJRDataSource:dataSource];
}

- (void)fillToStreamWithJavaIoInputStream:(JavaIoInputStream *)inputStream
                   withJavaIoOutputStream:(JavaIoOutputStream *)outputStream
                          withJavaUtilMap:(id<JavaUtilMap>)parameters
  withOrgOssPdfreporterEngineJRDataSource:(id<OrgOssPdfreporterEngineJRDataSource>)dataSource {
  OrgOssPdfreporterEngineJasperReport *jasperReport = (OrgOssPdfreporterEngineJasperReport *) [OrgOssPdfreporterEngineUtilJRLoader loadObjectWithJavaIoInputStream:inputStream];
  [self fillToStreamWithOrgOssPdfreporterEngineJasperReport:jasperReport withJavaIoOutputStream:outputStream withJavaUtilMap:parameters withOrgOssPdfreporterEngineJRDataSource:dataSource];
}

- (void)fillToStreamWithOrgOssPdfreporterEngineJasperReport:(OrgOssPdfreporterEngineJasperReport *)jasperReport
                                     withJavaIoOutputStream:(JavaIoOutputStream *)outputStream
                                            withJavaUtilMap:(id<JavaUtilMap>)parameters
                    withOrgOssPdfreporterEngineJRDataSource:(id<OrgOssPdfreporterEngineJRDataSource>)dataSource {
  OrgOssPdfreporterEngineJasperPrint *jasperPrint = [self fillWithOrgOssPdfreporterEngineJasperReport:jasperReport withJavaUtilMap:parameters withOrgOssPdfreporterEngineJRDataSource:dataSource];
  [OrgOssPdfreporterEngineUtilJRSaver saveObjectWithId:jasperPrint withJavaIoOutputStream:outputStream];
}

- (OrgOssPdfreporterEngineJasperPrint *)fillWithJavaIoInputStream:(JavaIoInputStream *)inputStream
                                                  withJavaUtilMap:(id<JavaUtilMap>)parameters
                          withOrgOssPdfreporterEngineJRDataSource:(id<OrgOssPdfreporterEngineJRDataSource>)dataSource {
  OrgOssPdfreporterEngineJasperReport *jasperReport = (OrgOssPdfreporterEngineJasperReport *) [OrgOssPdfreporterEngineUtilJRLoader loadObjectWithJavaIoInputStream:inputStream];
  return [self fillWithOrgOssPdfreporterEngineJasperReport:jasperReport withJavaUtilMap:parameters withOrgOssPdfreporterEngineJRDataSource:dataSource];
}

- (OrgOssPdfreporterEngineJasperPrint *)fillWithOrgOssPdfreporterEngineJasperReport:(OrgOssPdfreporterEngineJasperReport *)jasperReport
                                                                    withJavaUtilMap:(id<JavaUtilMap>)parameters
                                            withOrgOssPdfreporterEngineJRDataSource:(id<OrgOssPdfreporterEngineJRDataSource>)dataSource {
  return [OrgOssPdfreporterEngineFillJRFiller fillWithOrgOssPdfreporterEngineJasperReportsContext:jasperReportsContext_ withOrgOssPdfreporterEngineJasperReport:jasperReport withJavaUtilMap:parameters withOrgOssPdfreporterEngineJRDataSource:dataSource];
}

+ (NSString *)fillReportToFileWithNSString:(NSString *)sourceFileName
                           withJavaUtilMap:(id<JavaUtilMap>)params
       withOrgOssPdfreporterSqlIConnection:(id<OrgOssPdfreporterSqlIConnection>)connection {
  return [((OrgOssPdfreporterEngineJasperFillManager *) nil_chk([OrgOssPdfreporterEngineJasperFillManager getDefaultInstance])) fillToFileWithNSString:sourceFileName withJavaUtilMap:params withOrgOssPdfreporterSqlIConnection:connection];
}

+ (NSString *)fillReportToFileWithNSString:(NSString *)sourceFileName
                           withJavaUtilMap:(id<JavaUtilMap>)params {
  return [((OrgOssPdfreporterEngineJasperFillManager *) nil_chk([OrgOssPdfreporterEngineJasperFillManager getDefaultInstance])) fillToFileWithNSString:sourceFileName withJavaUtilMap:params];
}

+ (void)fillReportToFileWithNSString:(NSString *)sourceFileName
                        withNSString:(NSString *)destFileName
                     withJavaUtilMap:(id<JavaUtilMap>)params
 withOrgOssPdfreporterSqlIConnection:(id<OrgOssPdfreporterSqlIConnection>)connection {
  [((OrgOssPdfreporterEngineJasperFillManager *) nil_chk([OrgOssPdfreporterEngineJasperFillManager getDefaultInstance])) fillToFileWithNSString:sourceFileName withNSString:destFileName withJavaUtilMap:params withOrgOssPdfreporterSqlIConnection:connection];
}

+ (void)fillReportToFileWithNSString:(NSString *)sourceFileName
                        withNSString:(NSString *)destFileName
                     withJavaUtilMap:(id<JavaUtilMap>)params {
  [((OrgOssPdfreporterEngineJasperFillManager *) nil_chk([OrgOssPdfreporterEngineJasperFillManager getDefaultInstance])) fillToFileWithNSString:sourceFileName withNSString:destFileName withJavaUtilMap:params];
}

+ (void)fillReportToFileWithOrgOssPdfreporterEngineJasperReport:(OrgOssPdfreporterEngineJasperReport *)jasperReport
                                                   withNSString:(NSString *)destFileName
                                                withJavaUtilMap:(id<JavaUtilMap>)parameters
                            withOrgOssPdfreporterSqlIConnection:(id<OrgOssPdfreporterSqlIConnection>)connection {
  [((OrgOssPdfreporterEngineJasperFillManager *) nil_chk([OrgOssPdfreporterEngineJasperFillManager getDefaultInstance])) fillToFileWithOrgOssPdfreporterEngineJasperReport:jasperReport withNSString:destFileName withJavaUtilMap:parameters withOrgOssPdfreporterSqlIConnection:connection];
}

+ (void)fillReportToFileWithOrgOssPdfreporterEngineJasperReport:(OrgOssPdfreporterEngineJasperReport *)jasperReport
                                                   withNSString:(NSString *)destFileName
                                                withJavaUtilMap:(id<JavaUtilMap>)parameters {
  [((OrgOssPdfreporterEngineJasperFillManager *) nil_chk([OrgOssPdfreporterEngineJasperFillManager getDefaultInstance])) fillToFileWithOrgOssPdfreporterEngineJasperReport:jasperReport withNSString:destFileName withJavaUtilMap:parameters];
}

+ (OrgOssPdfreporterEngineJasperPrint *)fillReportWithNSString:(NSString *)sourceFileName
                                               withJavaUtilMap:(id<JavaUtilMap>)params
                           withOrgOssPdfreporterSqlIConnection:(id<OrgOssPdfreporterSqlIConnection>)connection {
  return [((OrgOssPdfreporterEngineJasperFillManager *) nil_chk([OrgOssPdfreporterEngineJasperFillManager getDefaultInstance])) fillWithNSString:sourceFileName withJavaUtilMap:params withOrgOssPdfreporterSqlIConnection:connection];
}

+ (OrgOssPdfreporterEngineJasperPrint *)fillReportWithNSString:(NSString *)sourceFileName
                                               withJavaUtilMap:(id<JavaUtilMap>)params {
  return [((OrgOssPdfreporterEngineJasperFillManager *) nil_chk([OrgOssPdfreporterEngineJasperFillManager getDefaultInstance])) fillWithNSString:sourceFileName withJavaUtilMap:params];
}

+ (void)fillReportToStreamWithJavaIoInputStream:(JavaIoInputStream *)inputStream
                         withJavaIoOutputStream:(JavaIoOutputStream *)outputStream
                                withJavaUtilMap:(id<JavaUtilMap>)parameters
            withOrgOssPdfreporterSqlIConnection:(id<OrgOssPdfreporterSqlIConnection>)connection {
  [((OrgOssPdfreporterEngineJasperFillManager *) nil_chk([OrgOssPdfreporterEngineJasperFillManager getDefaultInstance])) fillToStreamWithJavaIoInputStream:inputStream withJavaIoOutputStream:outputStream withJavaUtilMap:parameters withOrgOssPdfreporterSqlIConnection:connection];
}

+ (void)fillReportToStreamWithJavaIoInputStream:(JavaIoInputStream *)inputStream
                         withJavaIoOutputStream:(JavaIoOutputStream *)outputStream
                                withJavaUtilMap:(id<JavaUtilMap>)parameters {
  [((OrgOssPdfreporterEngineJasperFillManager *) nil_chk([OrgOssPdfreporterEngineJasperFillManager getDefaultInstance])) fillToStreamWithJavaIoInputStream:inputStream withJavaIoOutputStream:outputStream withJavaUtilMap:parameters];
}

+ (void)fillReportToStreamWithOrgOssPdfreporterEngineJasperReport:(OrgOssPdfreporterEngineJasperReport *)jasperReport
                                           withJavaIoOutputStream:(JavaIoOutputStream *)outputStream
                                                  withJavaUtilMap:(id<JavaUtilMap>)parameters
                              withOrgOssPdfreporterSqlIConnection:(id<OrgOssPdfreporterSqlIConnection>)connection {
  [((OrgOssPdfreporterEngineJasperFillManager *) nil_chk([OrgOssPdfreporterEngineJasperFillManager getDefaultInstance])) fillToStreamWithOrgOssPdfreporterEngineJasperReport:jasperReport withJavaIoOutputStream:outputStream withJavaUtilMap:parameters withOrgOssPdfreporterSqlIConnection:connection];
}

+ (void)fillReportToStreamWithOrgOssPdfreporterEngineJasperReport:(OrgOssPdfreporterEngineJasperReport *)jasperReport
                                           withJavaIoOutputStream:(JavaIoOutputStream *)outputStream
                                                  withJavaUtilMap:(id<JavaUtilMap>)parameters {
  [((OrgOssPdfreporterEngineJasperFillManager *) nil_chk([OrgOssPdfreporterEngineJasperFillManager getDefaultInstance])) fillToStreamWithOrgOssPdfreporterEngineJasperReport:jasperReport withJavaIoOutputStream:outputStream withJavaUtilMap:parameters];
}

+ (OrgOssPdfreporterEngineJasperPrint *)fillReportWithJavaIoInputStream:(JavaIoInputStream *)inputStream
                                                        withJavaUtilMap:(id<JavaUtilMap>)parameters
                                    withOrgOssPdfreporterSqlIConnection:(id<OrgOssPdfreporterSqlIConnection>)connection {
  return [((OrgOssPdfreporterEngineJasperFillManager *) nil_chk([OrgOssPdfreporterEngineJasperFillManager getDefaultInstance])) fillWithJavaIoInputStream:inputStream withJavaUtilMap:parameters withOrgOssPdfreporterSqlIConnection:connection];
}

+ (OrgOssPdfreporterEngineJasperPrint *)fillReportWithJavaIoInputStream:(JavaIoInputStream *)inputStream
                                                        withJavaUtilMap:(id<JavaUtilMap>)parameters {
  return [((OrgOssPdfreporterEngineJasperFillManager *) nil_chk([OrgOssPdfreporterEngineJasperFillManager getDefaultInstance])) fillWithJavaIoInputStream:inputStream withJavaUtilMap:parameters];
}

+ (OrgOssPdfreporterEngineJasperPrint *)fillReportWithOrgOssPdfreporterEngineJasperReport:(OrgOssPdfreporterEngineJasperReport *)jasperReport
                                                                          withJavaUtilMap:(id<JavaUtilMap>)parameters
                                                      withOrgOssPdfreporterSqlIConnection:(id<OrgOssPdfreporterSqlIConnection>)connection {
  long long int time = [JavaLangSystem currentTimeMillis];
  @try {
    return [((OrgOssPdfreporterEngineJasperFillManager *) nil_chk([OrgOssPdfreporterEngineJasperFillManager getDefaultInstance])) fillWithOrgOssPdfreporterEngineJasperReport:jasperReport withJavaUtilMap:parameters withOrgOssPdfreporterSqlIConnection:connection];
  }
  @finally {
    [((JavaUtilLoggingLogger *) nil_chk(OrgOssPdfreporterEngineJasperFillManager_logger_)) infoWithNSString:[NSString stringWithFormat:@"Time for filling Report: %@", [NSString stringWithFormat:@"%1$TM:%1$T@.%1$TL" , [JavaLangSystem currentTimeMillis] - time, nil]]];
  }
}

+ (OrgOssPdfreporterEngineJasperPrint *)fillReportWithOrgOssPdfreporterEngineJasperReport:(OrgOssPdfreporterEngineJasperReport *)jasperReport
                                                                          withJavaUtilMap:(id<JavaUtilMap>)parameters {
  return [((OrgOssPdfreporterEngineJasperFillManager *) nil_chk([OrgOssPdfreporterEngineJasperFillManager getDefaultInstance])) fillWithOrgOssPdfreporterEngineJasperReport:jasperReport withJavaUtilMap:parameters];
}

+ (NSString *)fillReportToFileWithNSString:(NSString *)sourceFileName
                           withJavaUtilMap:(id<JavaUtilMap>)params
   withOrgOssPdfreporterEngineJRDataSource:(id<OrgOssPdfreporterEngineJRDataSource>)dataSource {
  return [((OrgOssPdfreporterEngineJasperFillManager *) nil_chk([OrgOssPdfreporterEngineJasperFillManager getDefaultInstance])) fillToFileWithNSString:sourceFileName withJavaUtilMap:params withOrgOssPdfreporterEngineJRDataSource:dataSource];
}

+ (void)fillReportToFileWithNSString:(NSString *)sourceFileName
                        withNSString:(NSString *)destFileName
                     withJavaUtilMap:(id<JavaUtilMap>)params
withOrgOssPdfreporterEngineJRDataSource:(id<OrgOssPdfreporterEngineJRDataSource>)dataSource {
  [((OrgOssPdfreporterEngineJasperFillManager *) nil_chk([OrgOssPdfreporterEngineJasperFillManager getDefaultInstance])) fillToFileWithNSString:sourceFileName withNSString:destFileName withJavaUtilMap:params withOrgOssPdfreporterEngineJRDataSource:dataSource];
}

+ (void)fillReportToFileWithOrgOssPdfreporterEngineJasperReport:(OrgOssPdfreporterEngineJasperReport *)jasperReport
                                                   withNSString:(NSString *)destFileName
                                                withJavaUtilMap:(id<JavaUtilMap>)parameters
                        withOrgOssPdfreporterEngineJRDataSource:(id<OrgOssPdfreporterEngineJRDataSource>)dataSource {
  [((OrgOssPdfreporterEngineJasperFillManager *) nil_chk([OrgOssPdfreporterEngineJasperFillManager getDefaultInstance])) fillToFileWithOrgOssPdfreporterEngineJasperReport:jasperReport withNSString:destFileName withJavaUtilMap:parameters withOrgOssPdfreporterEngineJRDataSource:dataSource];
}

+ (OrgOssPdfreporterEngineJasperPrint *)fillReportWithNSString:(NSString *)sourceFileName
                                               withJavaUtilMap:(id<JavaUtilMap>)params
                       withOrgOssPdfreporterEngineJRDataSource:(id<OrgOssPdfreporterEngineJRDataSource>)dataSource {
  return [((OrgOssPdfreporterEngineJasperFillManager *) nil_chk([OrgOssPdfreporterEngineJasperFillManager getDefaultInstance])) fillWithNSString:sourceFileName withJavaUtilMap:params withOrgOssPdfreporterEngineJRDataSource:dataSource];
}

+ (void)fillReportToStreamWithJavaIoInputStream:(JavaIoInputStream *)inputStream
                         withJavaIoOutputStream:(JavaIoOutputStream *)outputStream
                                withJavaUtilMap:(id<JavaUtilMap>)parameters
        withOrgOssPdfreporterEngineJRDataSource:(id<OrgOssPdfreporterEngineJRDataSource>)dataSource {
  [((OrgOssPdfreporterEngineJasperFillManager *) nil_chk([OrgOssPdfreporterEngineJasperFillManager getDefaultInstance])) fillToStreamWithJavaIoInputStream:inputStream withJavaIoOutputStream:outputStream withJavaUtilMap:parameters withOrgOssPdfreporterEngineJRDataSource:dataSource];
}

+ (void)fillReportToStreamWithOrgOssPdfreporterEngineJasperReport:(OrgOssPdfreporterEngineJasperReport *)jasperReport
                                           withJavaIoOutputStream:(JavaIoOutputStream *)outputStream
                                                  withJavaUtilMap:(id<JavaUtilMap>)parameters
                          withOrgOssPdfreporterEngineJRDataSource:(id<OrgOssPdfreporterEngineJRDataSource>)dataSource {
  [((OrgOssPdfreporterEngineJasperFillManager *) nil_chk([OrgOssPdfreporterEngineJasperFillManager getDefaultInstance])) fillToStreamWithOrgOssPdfreporterEngineJasperReport:jasperReport withJavaIoOutputStream:outputStream withJavaUtilMap:parameters withOrgOssPdfreporterEngineJRDataSource:dataSource];
}

+ (OrgOssPdfreporterEngineJasperPrint *)fillReportWithJavaIoInputStream:(JavaIoInputStream *)inputStream
                                                        withJavaUtilMap:(id<JavaUtilMap>)parameters
                                withOrgOssPdfreporterEngineJRDataSource:(id<OrgOssPdfreporterEngineJRDataSource>)dataSource {
  return [((OrgOssPdfreporterEngineJasperFillManager *) nil_chk([OrgOssPdfreporterEngineJasperFillManager getDefaultInstance])) fillWithJavaIoInputStream:inputStream withJavaUtilMap:parameters withOrgOssPdfreporterEngineJRDataSource:dataSource];
}

+ (OrgOssPdfreporterEngineJasperPrint *)fillReportWithOrgOssPdfreporterEngineJasperReport:(OrgOssPdfreporterEngineJasperReport *)jasperReport
                                                                          withJavaUtilMap:(id<JavaUtilMap>)parameters
                                                  withOrgOssPdfreporterEngineJRDataSource:(id<OrgOssPdfreporterEngineJRDataSource>)dataSource {
  OrgOssPdfreporterProgressProgressManager *pm = [[OrgOssPdfreporterProgressProgressManager alloc] initWithOrgOssPdfreporterProgressIProgressHandler_ProgressStateEnum:[OrgOssPdfreporterProgressIProgressHandler_ProgressStateEnum FILLING]];
  @try {
    return [((OrgOssPdfreporterEngineJasperFillManager *) nil_chk([OrgOssPdfreporterEngineJasperFillManager getDefaultInstance])) fillWithOrgOssPdfreporterEngineJasperReport:jasperReport withJavaUtilMap:parameters withOrgOssPdfreporterEngineJRDataSource:dataSource];
  }
  @finally {
    [((OrgOssPdfreporterProgressProgressManager *) nil_chk(pm)) done];
  }
}

- (id<JavaUtilMap>)setFileResolverWithJavaIoFile:(JavaIoFile *)file
                                 withJavaUtilMap:(id<JavaUtilMap>)params {
  OrgOssPdfreporterEngineUtilSimpleFileResolver *fileResolver = [[OrgOssPdfreporterEngineUtilSimpleFileResolver alloc] initWithJavaUtilList:[JavaUtilArrays asListWithNSObjectArray:[IOSObjectArray arrayWithObjects:(id[]){ [((JavaIoFile *) nil_chk(file)) getParentFile], [[JavaIoFile alloc] initWithNSString:@"."] } count:2 type:[IOSClass classWithClass:[JavaIoFile class]]]]];
  [((OrgOssPdfreporterEngineUtilSimpleFileResolver *) nil_chk(fileResolver)) setResolveAbsolutePathWithBOOL:YES];
  OrgOssPdfreporterEngineUtilLocalJasperReportsContext *localJasperReportsContext = [[OrgOssPdfreporterEngineUtilLocalJasperReportsContext alloc] initWithOrgOssPdfreporterEngineJasperReportsContext:jasperReportsContext_];
  jasperReportsContext_ = localJasperReportsContext;
  id<JavaUtilMap> parameters = params;
  if (parameters == nil) {
    parameters = [[JavaUtilHashMap alloc] init];
  }
  return parameters;
}

+ (void)initialize {
  if (self == [OrgOssPdfreporterEngineJasperFillManager class]) {
    OrgOssPdfreporterEngineJasperFillManager_logger_ = [JavaUtilLoggingLogger getLoggerWithNSString:[[IOSClass classWithClass:[OrgOssPdfreporterEngineJasperFillManager class]] getName]];
  }
}

- (void)copyAllPropertiesTo:(id)copy {
  [super copyAllPropertiesTo:copy];
  OrgOssPdfreporterEngineJasperFillManager *typedCopy = (OrgOssPdfreporterEngineJasperFillManager *) copy;
  typedCopy.jasperReportsContext = jasperReportsContext_;
}

@end
