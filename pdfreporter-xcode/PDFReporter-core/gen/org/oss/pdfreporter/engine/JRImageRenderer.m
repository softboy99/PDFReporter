//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: pdfreporter-core/src/org/oss/pdfreporter/engine/JRImageRenderer.java
//
//  Created by kendra on 9/27/13.
//

#include "java/io/IOException.h"
#include "java/lang/RuntimeException.h"
#include "org/oss/pdfreporter/engine/JRException.h"
#include "org/oss/pdfreporter/engine/JRImageRenderer.h"
#include "org/oss/pdfreporter/engine/JasperReportsContext.h"
#include "org/oss/pdfreporter/engine/type/ImageTypeEnum.h"
#include "org/oss/pdfreporter/engine/type/RenderableTypeEnum.h"
#include "org/oss/pdfreporter/geometry/IDimension.h"
#include "org/oss/pdfreporter/geometry/IRectangle.h"
#include "org/oss/pdfreporter/geometry/factory/IGeometryFactory.h"
#include "org/oss/pdfreporter/image/IImage.h"
#include "org/oss/pdfreporter/image/IImageManager.h"
#include "org/oss/pdfreporter/image/factory/IImageFactory.h"
#include "org/oss/pdfreporter/net/IURL.h"
#include "org/oss/pdfreporter/pdf/DocumentException.h"
#include "org/oss/pdfreporter/pdf/IPage.h"
#include "org/oss/pdfreporter/registry/ApiRegistry.h"
#include "org/oss/pdfreporter/repo/DigireportFileResourceLoader.h"

@implementation OrgOssPdfreporterEngineJRImageRenderer

@synthesize image = image_;
@synthesize imageLocation = imageLocation_;
@synthesize imageTypeValue = imageTypeValue_;

- (id)initWithOrgOssPdfreporterImageIImage:(id<OrgOssPdfreporterImageIImage>)image {
  if ((self = [super init])) {
    image_ = nil;
    imageLocation_ = nil;
    imageTypeValue_ = [OrgOssPdfreporterEngineTypeImageTypeEnumEnum UNKNOWN];
    self.image = image;
  }
  return self;
}

- (id)initWithNSString:(NSString *)imageLocation {
  if ((self = [super init])) {
    image_ = nil;
    imageLocation_ = nil;
    imageTypeValue_ = [OrgOssPdfreporterEngineTypeImageTypeEnumEnum UNKNOWN];
    self.imageLocation = imageLocation;
  }
  return self;
}

+ (OrgOssPdfreporterEngineJRImageRenderer *)getInstanceWithOrgOssPdfreporterImageIImage:(id<OrgOssPdfreporterImageIImage>)image {
  return [[OrgOssPdfreporterEngineJRImageRenderer alloc] initWithOrgOssPdfreporterImageIImage:image];
}

+ (OrgOssPdfreporterEngineJRImageRenderer *)getInstanceWithNSString:(NSString *)location {
  return [[OrgOssPdfreporterEngineJRImageRenderer alloc] initWithNSString:location];
}

- (NSString *)getImageLocation {
  return imageLocation_;
}

- (OrgOssPdfreporterEngineTypeRenderableTypeEnumEnum *)getTypeValue {
  return [OrgOssPdfreporterEngineTypeRenderableTypeEnumEnum IMAGE];
}

- (OrgOssPdfreporterEngineTypeImageTypeEnumEnum *)getImageTypeValue {
  return imageTypeValue_;
}

- (id<OrgOssPdfreporterGeometryIDimension>)getDimensionWithOrgOssPdfreporterEngineJasperReportsContext:(id<OrgOssPdfreporterEngineJasperReportsContext>)jasperReportsContext {
  id<OrgOssPdfreporterImageIImage> img = [self getImageWithOrgOssPdfreporterEngineJasperReportsContext:jasperReportsContext];
  return [((id<OrgOssPdfreporterGeometryFactoryIGeometryFactory>) nil_chk([OrgOssPdfreporterRegistryApiRegistry getGeometryFactory])) newDimensionWithFloat:[((id<OrgOssPdfreporterImageIImage>) nil_chk(img)) getWidth] withFloat:[((id<OrgOssPdfreporterImageIImage>) nil_chk(img)) getHeight]];
}

- (id<OrgOssPdfreporterImageIImage>)getImageWithOrgOssPdfreporterEngineJasperReportsContext:(id<OrgOssPdfreporterEngineJasperReportsContext>)jasperReportsContext {
  if (image_ == nil) {
    @try {
      id<OrgOssPdfreporterNetIURL> url = [OrgOssPdfreporterRepoDigireportFileResourceLoader getURLWithNSString:imageLocation_];
      if (url == nil) {
        @throw [[JavaLangRuntimeException alloc] initWithNSString:[NSString stringWithFormat:@"Image file: %@ not found.", imageLocation_]];
      }
      image_ = [((id<OrgOssPdfreporterImageIImageManager>) nil_chk([((id<OrgOssPdfreporterImageFactoryIImageFactory>) nil_chk([OrgOssPdfreporterRegistryApiRegistry getImageFactory])) getImageManager])) loadImageWithNSString:[((id<OrgOssPdfreporterNetIURL>) nil_chk(url)) getPath]];
    }
    @catch (JavaIoIOException *e) {
      @throw [[OrgOssPdfreporterEngineJRException alloc] initWithJavaLangThrowable:e];
    }
  }
  return image_;
}

- (void)renderWithOrgOssPdfreporterEngineJasperReportsContext:(id<OrgOssPdfreporterEngineJasperReportsContext>)jasperReportsContext
                                withOrgOssPdfreporterPdfIPage:(id<OrgOssPdfreporterPdfIPage>)page
                      withOrgOssPdfreporterGeometryIRectangle:(id<OrgOssPdfreporterGeometryIRectangle>)rectangle {
  id<OrgOssPdfreporterImageIImage> img = [self getImageWithOrgOssPdfreporterEngineJasperReportsContext:jasperReportsContext];
  @try {
    [((id<OrgOssPdfreporterPdfIPage>) nil_chk(page)) drawWithOrgOssPdfreporterImageIImage:img withFloat:[((id<OrgOssPdfreporterGeometryIRectangle>) nil_chk(rectangle)) getX] withFloat:[((id<OrgOssPdfreporterGeometryIRectangle>) nil_chk(rectangle)) getY] withFloat:[((id<OrgOssPdfreporterGeometryIRectangle>) nil_chk(rectangle)) getWidth] withFloat:[((id<OrgOssPdfreporterGeometryIRectangle>) nil_chk(rectangle)) getHeight] withOrgOssPdfreporterPdfIPage_ScaleModeEnum:[OrgOssPdfreporterPdfIPage_ScaleModeEnum NONE]];
  }
  @catch (OrgOssPdfreporterPdfDocumentException *e) {
    @throw [[OrgOssPdfreporterEngineJRException alloc] initWithJavaLangThrowable:e];
  }
}

- (void)copyAllPropertiesTo:(id)copy {
  [super copyAllPropertiesTo:copy];
  OrgOssPdfreporterEngineJRImageRenderer *typedCopy = (OrgOssPdfreporterEngineJRImageRenderer *) copy;
  typedCopy.image = image_;
  typedCopy.imageLocation = imageLocation_;
  typedCopy.imageTypeValue = imageTypeValue_;
}

@end
