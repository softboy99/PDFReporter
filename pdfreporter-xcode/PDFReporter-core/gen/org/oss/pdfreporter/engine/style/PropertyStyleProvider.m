//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: pdfreporter-core/src/org/oss/pdfreporter/engine/style/PropertyStyleProvider.java
//
//  Created by kendra on 9/27/13.
//

#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "java/lang/Boolean.h"
#include "java/lang/Float.h"
#include "java/lang/Integer.h"
#include "java/util/ArrayList.h"
#include "java/util/Collection.h"
#include "java/util/Iterator.h"
#include "java/util/List.h"
#include "java/util/Map.h"
#include "org/oss/pdfreporter/engine/JRElement.h"
#include "org/oss/pdfreporter/engine/JREvaluation.h"
#include "org/oss/pdfreporter/engine/JRExpression.h"
#include "org/oss/pdfreporter/engine/JRExpressionChunk.h"
#include "org/oss/pdfreporter/engine/JRLineBox.h"
#include "org/oss/pdfreporter/engine/JRParagraph.h"
#include "org/oss/pdfreporter/engine/JRPen.h"
#include "org/oss/pdfreporter/engine/JRPropertiesMap.h"
#include "org/oss/pdfreporter/engine/JRPropertiesUtil.h"
#include "org/oss/pdfreporter/engine/JRPropertyExpression.h"
#include "org/oss/pdfreporter/engine/JRStyle.h"
#include "org/oss/pdfreporter/engine/base/JRBaseStyle.h"
#include "org/oss/pdfreporter/engine/base/JRBoxPen.h"
#include "org/oss/pdfreporter/engine/style/PropertyStyleProvider.h"
#include "org/oss/pdfreporter/engine/style/StyleProviderContext.h"
#include "org/oss/pdfreporter/engine/type/EvaluationTimeEnum.h"
#include "org/oss/pdfreporter/engine/type/FillEnum.h"
#include "org/oss/pdfreporter/engine/type/HorizontalAlignEnum.h"
#include "org/oss/pdfreporter/engine/type/LineSpacingEnum.h"
#include "org/oss/pdfreporter/engine/type/LineStyleEnum.h"
#include "org/oss/pdfreporter/engine/type/ModeEnum.h"
#include "org/oss/pdfreporter/engine/type/RotationEnum.h"
#include "org/oss/pdfreporter/engine/type/ScaleImageEnum.h"
#include "org/oss/pdfreporter/engine/type/VerticalAlignEnum.h"
#include "org/oss/pdfreporter/engine/util/JRColorUtil.h"
#include "org/oss/pdfreporter/engine/xml/JRXmlConstants.h"
#include "org/oss/pdfreporter/geometry/IColor.h"

@implementation OrgOssPdfreporterEngineStylePropertyStyleProvider

static NSString * OrgOssPdfreporterEngineStylePropertyStyleProvider_STYLE_PROPERTY_PREFIX_ = @"net.sf.jasperreports.style.";
static NSString * OrgOssPdfreporterEngineStylePropertyStyleProvider_STYLE_PROPERTY_PEN_PREFIX_ = @"net.sf.jasperreports.style.pen.";
static NSString * OrgOssPdfreporterEngineStylePropertyStyleProvider_STYLE_PROPERTY_BOX_PREFIX_ = @"net.sf.jasperreports.style.box.";
static NSString * OrgOssPdfreporterEngineStylePropertyStyleProvider_STYLE_PROPERTY_BOX_PEN_PREFIX_ = @"net.sf.jasperreports.style.box.pen.";
static NSString * OrgOssPdfreporterEngineStylePropertyStyleProvider_STYLE_PROPERTY_BOX_LEFT_PEN_PREFIX_ = @"net.sf.jasperreports.style.box.left.pen.";
static NSString * OrgOssPdfreporterEngineStylePropertyStyleProvider_STYLE_PROPERTY_BOX_TOP_PEN_PREFIX_ = @"net.sf.jasperreports.style.box.top.pen.";
static NSString * OrgOssPdfreporterEngineStylePropertyStyleProvider_STYLE_PROPERTY_BOX_RIGHT_PEN_PREFIX_ = @"net.sf.jasperreports.style.box.right.pen.";
static NSString * OrgOssPdfreporterEngineStylePropertyStyleProvider_STYLE_PROPERTY_BOX_BOTTOM_PEN_PREFIX_ = @"net.sf.jasperreports.style.box.bottom.pen.";
static NSString * OrgOssPdfreporterEngineStylePropertyStyleProvider_STYLE_PROPERTY_PARAGRAPH_PREFIX_ = @"net.sf.jasperreports.style.paragraph.";
static NSString * OrgOssPdfreporterEngineStylePropertyStyleProvider_STYLE_PROPERTY_MODE_ = @"net.sf.jasperreports.style.mode";
static NSString * OrgOssPdfreporterEngineStylePropertyStyleProvider_STYLE_PROPERTY_BACKCOLOR_ = @"net.sf.jasperreports.style.backcolor";
static NSString * OrgOssPdfreporterEngineStylePropertyStyleProvider_STYLE_PROPERTY_FORECOLOR_ = @"net.sf.jasperreports.style.forecolor";
static NSString * OrgOssPdfreporterEngineStylePropertyStyleProvider_STYLE_PROPERTY_FILL_ = @"net.sf.jasperreports.style.fill";
static NSString * OrgOssPdfreporterEngineStylePropertyStyleProvider_STYLE_PROPERTY_RADIUS_ = @"net.sf.jasperreports.style.radius";
static NSString * OrgOssPdfreporterEngineStylePropertyStyleProvider_STYLE_PROPERTY_SCALE_IMAGE_ = @"net.sf.jasperreports.style.scaleImage";
static NSString * OrgOssPdfreporterEngineStylePropertyStyleProvider_STYLE_PROPERTY_HALIGN_ = @"net.sf.jasperreports.style.hAlign";
static NSString * OrgOssPdfreporterEngineStylePropertyStyleProvider_STYLE_PROPERTY_VALIGN_ = @"net.sf.jasperreports.style.vAlign";
static NSString * OrgOssPdfreporterEngineStylePropertyStyleProvider_STYLE_PROPERTY_ROTATION_ = @"net.sf.jasperreports.style.rotation";
static NSString * OrgOssPdfreporterEngineStylePropertyStyleProvider_STYLE_PROPERTY_MARKUP_ = @"net.sf.jasperreports.style.markup";
static NSString * OrgOssPdfreporterEngineStylePropertyStyleProvider_STYLE_PROPERTY_PATTERN_ = @"net.sf.jasperreports.style.pattern";
static NSString * OrgOssPdfreporterEngineStylePropertyStyleProvider_STYLE_PROPERTY_BLANK_WHEN_NULL_ = @"net.sf.jasperreports.style.isBlankWhenNull";
static NSString * OrgOssPdfreporterEngineStylePropertyStyleProvider_STYLE_PROPERTY_FONT_NAME_ = @"net.sf.jasperreports.style.fontName";
static NSString * OrgOssPdfreporterEngineStylePropertyStyleProvider_STYLE_PROPERTY_FONT_SIZE_ = @"net.sf.jasperreports.style.fontSize";
static NSString * OrgOssPdfreporterEngineStylePropertyStyleProvider_STYLE_PROPERTY_FONT_BOLD_ = @"net.sf.jasperreports.style.isBold";
static NSString * OrgOssPdfreporterEngineStylePropertyStyleProvider_STYLE_PROPERTY_FONT_ITALIC_ = @"net.sf.jasperreports.style.isItalic";
static NSString * OrgOssPdfreporterEngineStylePropertyStyleProvider_STYLE_PROPERTY_FONT_UNDERLINE_ = @"net.sf.jasperreports.style.isUnderline";
static NSString * OrgOssPdfreporterEngineStylePropertyStyleProvider_STYLE_PROPERTY_FONT_STRIKETHROUGH_ = @"net.sf.jasperreports.style.isStrikeThrough";
static NSString * OrgOssPdfreporterEngineStylePropertyStyleProvider_STYLE_PROPERTY_PDF_FONT_NAME_ = @"net.sf.jasperreports.style.pdfFontName";
static NSString * OrgOssPdfreporterEngineStylePropertyStyleProvider_STYLE_PROPERTY_PDF_ENCODING_ = @"net.sf.jasperreports.style.pdfEncoding";
static NSString * OrgOssPdfreporterEngineStylePropertyStyleProvider_STYLE_PROPERTY_PDF_EMBEDDED_ = @"net.sf.jasperreports.style.isPdfEmbedded";
static NSString * OrgOssPdfreporterEngineStylePropertyStyleProvider_STYLE_PROPERTY_PEN_LINE_WIDTH_ = @"net.sf.jasperreports.style.pen.lineWidth";
static NSString * OrgOssPdfreporterEngineStylePropertyStyleProvider_STYLE_PROPERTY_PEN_LINE_STYLE_ = @"net.sf.jasperreports.style.pen.lineStyle";
static NSString * OrgOssPdfreporterEngineStylePropertyStyleProvider_STYLE_PROPERTY_PEN_LINE_COLOR_ = @"net.sf.jasperreports.style.pen.lineColor";
static NSString * OrgOssPdfreporterEngineStylePropertyStyleProvider_STYLE_PROPERTY_BOX_PADDING_ = @"net.sf.jasperreports.style.box.padding";
static NSString * OrgOssPdfreporterEngineStylePropertyStyleProvider_STYLE_PROPERTY_BOX_TOP_PADDING_ = @"net.sf.jasperreports.style.box.topPadding";
static NSString * OrgOssPdfreporterEngineStylePropertyStyleProvider_STYLE_PROPERTY_BOX_LEFT_PADDING_ = @"net.sf.jasperreports.style.box.leftPadding";
static NSString * OrgOssPdfreporterEngineStylePropertyStyleProvider_STYLE_PROPERTY_BOX_RIGHT_PADDING_ = @"net.sf.jasperreports.style.box.rightPadding";
static NSString * OrgOssPdfreporterEngineStylePropertyStyleProvider_STYLE_PROPERTY_BOX_BOTTOM_PADDING_ = @"net.sf.jasperreports.style.box.bottomPadding";
static NSString * OrgOssPdfreporterEngineStylePropertyStyleProvider_STYLE_PROPERTY_BOX_PEN_LINE_WIDTH_ = @"net.sf.jasperreports.style.box.pen.lineWidth";
static NSString * OrgOssPdfreporterEngineStylePropertyStyleProvider_STYLE_PROPERTY_BOX_PEN_LINE_STYLE_ = @"net.sf.jasperreports.style.box.pen.lineStyle";
static NSString * OrgOssPdfreporterEngineStylePropertyStyleProvider_STYLE_PROPERTY_BOX_PEN_LINE_COLOR_ = @"net.sf.jasperreports.style.box.pen.lineColor";
static NSString * OrgOssPdfreporterEngineStylePropertyStyleProvider_STYLE_PROPERTY_BOX_LEFT_PEN_LINE_WIDTH_ = @"net.sf.jasperreports.style.box.left.pen.lineWidth";
static NSString * OrgOssPdfreporterEngineStylePropertyStyleProvider_STYLE_PROPERTY_BOX_LEFT_PEN_LINE_STYLE_ = @"net.sf.jasperreports.style.box.left.pen.lineStyle";
static NSString * OrgOssPdfreporterEngineStylePropertyStyleProvider_STYLE_PROPERTY_BOX_LEFT_PEN_LINE_COLOR_ = @"net.sf.jasperreports.style.box.left.pen.lineColor";
static NSString * OrgOssPdfreporterEngineStylePropertyStyleProvider_STYLE_PROPERTY_BOX_TOP_PEN_LINE_WIDTH_ = @"net.sf.jasperreports.style.box.top.pen.lineWidth";
static NSString * OrgOssPdfreporterEngineStylePropertyStyleProvider_STYLE_PROPERTY_BOX_TOP_PEN_LINE_STYLE_ = @"net.sf.jasperreports.style.box.top.pen.lineStyle";
static NSString * OrgOssPdfreporterEngineStylePropertyStyleProvider_STYLE_PROPERTY_BOX_TOP_PEN_LINE_COLOR_ = @"net.sf.jasperreports.style.box.top.pen.lineColor";
static NSString * OrgOssPdfreporterEngineStylePropertyStyleProvider_STYLE_PROPERTY_BOX_RIGHT_PEN_LINE_WIDTH_ = @"net.sf.jasperreports.style.box.right.pen.lineWidth";
static NSString * OrgOssPdfreporterEngineStylePropertyStyleProvider_STYLE_PROPERTY_BOX_RIGHT_PEN_LINE_STYLE_ = @"net.sf.jasperreports.style.box.right.pen.lineStyle";
static NSString * OrgOssPdfreporterEngineStylePropertyStyleProvider_STYLE_PROPERTY_BOX_RIGHT_PEN_LINE_COLOR_ = @"net.sf.jasperreports.style.box.right.pen.lineColor";
static NSString * OrgOssPdfreporterEngineStylePropertyStyleProvider_STYLE_PROPERTY_BOX_BOTTOM_PEN_LINE_WIDTH_ = @"net.sf.jasperreports.style.box.bottom.pen.lineWidth";
static NSString * OrgOssPdfreporterEngineStylePropertyStyleProvider_STYLE_PROPERTY_BOX_BOTTOM_PEN_LINE_STYLE_ = @"net.sf.jasperreports.style.box.bottom.pen.lineStyle";
static NSString * OrgOssPdfreporterEngineStylePropertyStyleProvider_STYLE_PROPERTY_BOX_BOTTOM_PEN_LINE_COLOR_ = @"net.sf.jasperreports.style.box.bottom.pen.lineColor";
static NSString * OrgOssPdfreporterEngineStylePropertyStyleProvider_STYLE_PROPERTY_LINE_SPACING_ = @"net.sf.jasperreports.style.paragraph.lineSpacing";
static NSString * OrgOssPdfreporterEngineStylePropertyStyleProvider_STYLE_PROPERTY_LINE_SPACING_SIZE_ = @"net.sf.jasperreports.style.paragraph.lineSpacingSize";
static NSString * OrgOssPdfreporterEngineStylePropertyStyleProvider_STYLE_PROPERTY_FIRST_LINE_INDENT_ = @"net.sf.jasperreports.style.paragraph.firstLineIndent";
static NSString * OrgOssPdfreporterEngineStylePropertyStyleProvider_STYLE_PROPERTY_LEFT_INDENT_ = @"net.sf.jasperreports.style.paragraph.leftIndent";
static NSString * OrgOssPdfreporterEngineStylePropertyStyleProvider_STYLE_PROPERTY_RIGHT_INDENT_ = @"net.sf.jasperreports.style.paragraph.rightIndent";
static NSString * OrgOssPdfreporterEngineStylePropertyStyleProvider_STYLE_PROPERTY_SPACING_BEFORE_ = @"net.sf.jasperreports.style.paragraph.spacingBefore";
static NSString * OrgOssPdfreporterEngineStylePropertyStyleProvider_STYLE_PROPERTY_SPACING_AFTER_ = @"net.sf.jasperreports.style.paragraph.spacingAfter";
static NSString * OrgOssPdfreporterEngineStylePropertyStyleProvider_STYLE_PROPERTY_TABSTOP_WIDTH_ = @"net.sf.jasperreports.style.paragraph.tabStopWidth";

@synthesize context = context_;
@synthesize stylePropertyExpressions = stylePropertyExpressions_;
@synthesize fields = fields_;
@synthesize variables = variables_;
@synthesize lateEvaluated = lateEvaluated_;

+ (NSString *)STYLE_PROPERTY_PREFIX {
  return OrgOssPdfreporterEngineStylePropertyStyleProvider_STYLE_PROPERTY_PREFIX_;
}

+ (NSString *)STYLE_PROPERTY_PEN_PREFIX {
  return OrgOssPdfreporterEngineStylePropertyStyleProvider_STYLE_PROPERTY_PEN_PREFIX_;
}

+ (NSString *)STYLE_PROPERTY_BOX_PREFIX {
  return OrgOssPdfreporterEngineStylePropertyStyleProvider_STYLE_PROPERTY_BOX_PREFIX_;
}

+ (NSString *)STYLE_PROPERTY_BOX_PEN_PREFIX {
  return OrgOssPdfreporterEngineStylePropertyStyleProvider_STYLE_PROPERTY_BOX_PEN_PREFIX_;
}

+ (NSString *)STYLE_PROPERTY_BOX_LEFT_PEN_PREFIX {
  return OrgOssPdfreporterEngineStylePropertyStyleProvider_STYLE_PROPERTY_BOX_LEFT_PEN_PREFIX_;
}

+ (NSString *)STYLE_PROPERTY_BOX_TOP_PEN_PREFIX {
  return OrgOssPdfreporterEngineStylePropertyStyleProvider_STYLE_PROPERTY_BOX_TOP_PEN_PREFIX_;
}

+ (NSString *)STYLE_PROPERTY_BOX_RIGHT_PEN_PREFIX {
  return OrgOssPdfreporterEngineStylePropertyStyleProvider_STYLE_PROPERTY_BOX_RIGHT_PEN_PREFIX_;
}

+ (NSString *)STYLE_PROPERTY_BOX_BOTTOM_PEN_PREFIX {
  return OrgOssPdfreporterEngineStylePropertyStyleProvider_STYLE_PROPERTY_BOX_BOTTOM_PEN_PREFIX_;
}

+ (NSString *)STYLE_PROPERTY_PARAGRAPH_PREFIX {
  return OrgOssPdfreporterEngineStylePropertyStyleProvider_STYLE_PROPERTY_PARAGRAPH_PREFIX_;
}

+ (NSString *)STYLE_PROPERTY_MODE {
  return OrgOssPdfreporterEngineStylePropertyStyleProvider_STYLE_PROPERTY_MODE_;
}

+ (NSString *)STYLE_PROPERTY_BACKCOLOR {
  return OrgOssPdfreporterEngineStylePropertyStyleProvider_STYLE_PROPERTY_BACKCOLOR_;
}

+ (NSString *)STYLE_PROPERTY_FORECOLOR {
  return OrgOssPdfreporterEngineStylePropertyStyleProvider_STYLE_PROPERTY_FORECOLOR_;
}

+ (NSString *)STYLE_PROPERTY_FILL {
  return OrgOssPdfreporterEngineStylePropertyStyleProvider_STYLE_PROPERTY_FILL_;
}

+ (NSString *)STYLE_PROPERTY_RADIUS {
  return OrgOssPdfreporterEngineStylePropertyStyleProvider_STYLE_PROPERTY_RADIUS_;
}

+ (NSString *)STYLE_PROPERTY_SCALE_IMAGE {
  return OrgOssPdfreporterEngineStylePropertyStyleProvider_STYLE_PROPERTY_SCALE_IMAGE_;
}

+ (NSString *)STYLE_PROPERTY_HALIGN {
  return OrgOssPdfreporterEngineStylePropertyStyleProvider_STYLE_PROPERTY_HALIGN_;
}

+ (NSString *)STYLE_PROPERTY_VALIGN {
  return OrgOssPdfreporterEngineStylePropertyStyleProvider_STYLE_PROPERTY_VALIGN_;
}

+ (NSString *)STYLE_PROPERTY_ROTATION {
  return OrgOssPdfreporterEngineStylePropertyStyleProvider_STYLE_PROPERTY_ROTATION_;
}

+ (NSString *)STYLE_PROPERTY_MARKUP {
  return OrgOssPdfreporterEngineStylePropertyStyleProvider_STYLE_PROPERTY_MARKUP_;
}

+ (NSString *)STYLE_PROPERTY_PATTERN {
  return OrgOssPdfreporterEngineStylePropertyStyleProvider_STYLE_PROPERTY_PATTERN_;
}

+ (NSString *)STYLE_PROPERTY_BLANK_WHEN_NULL {
  return OrgOssPdfreporterEngineStylePropertyStyleProvider_STYLE_PROPERTY_BLANK_WHEN_NULL_;
}

+ (NSString *)STYLE_PROPERTY_FONT_NAME {
  return OrgOssPdfreporterEngineStylePropertyStyleProvider_STYLE_PROPERTY_FONT_NAME_;
}

+ (NSString *)STYLE_PROPERTY_FONT_SIZE {
  return OrgOssPdfreporterEngineStylePropertyStyleProvider_STYLE_PROPERTY_FONT_SIZE_;
}

+ (NSString *)STYLE_PROPERTY_FONT_BOLD {
  return OrgOssPdfreporterEngineStylePropertyStyleProvider_STYLE_PROPERTY_FONT_BOLD_;
}

+ (NSString *)STYLE_PROPERTY_FONT_ITALIC {
  return OrgOssPdfreporterEngineStylePropertyStyleProvider_STYLE_PROPERTY_FONT_ITALIC_;
}

+ (NSString *)STYLE_PROPERTY_FONT_UNDERLINE {
  return OrgOssPdfreporterEngineStylePropertyStyleProvider_STYLE_PROPERTY_FONT_UNDERLINE_;
}

+ (NSString *)STYLE_PROPERTY_FONT_STRIKETHROUGH {
  return OrgOssPdfreporterEngineStylePropertyStyleProvider_STYLE_PROPERTY_FONT_STRIKETHROUGH_;
}

+ (NSString *)STYLE_PROPERTY_PDF_FONT_NAME {
  return OrgOssPdfreporterEngineStylePropertyStyleProvider_STYLE_PROPERTY_PDF_FONT_NAME_;
}

+ (NSString *)STYLE_PROPERTY_PDF_ENCODING {
  return OrgOssPdfreporterEngineStylePropertyStyleProvider_STYLE_PROPERTY_PDF_ENCODING_;
}

+ (NSString *)STYLE_PROPERTY_PDF_EMBEDDED {
  return OrgOssPdfreporterEngineStylePropertyStyleProvider_STYLE_PROPERTY_PDF_EMBEDDED_;
}

+ (NSString *)STYLE_PROPERTY_PEN_LINE_WIDTH {
  return OrgOssPdfreporterEngineStylePropertyStyleProvider_STYLE_PROPERTY_PEN_LINE_WIDTH_;
}

+ (NSString *)STYLE_PROPERTY_PEN_LINE_STYLE {
  return OrgOssPdfreporterEngineStylePropertyStyleProvider_STYLE_PROPERTY_PEN_LINE_STYLE_;
}

+ (NSString *)STYLE_PROPERTY_PEN_LINE_COLOR {
  return OrgOssPdfreporterEngineStylePropertyStyleProvider_STYLE_PROPERTY_PEN_LINE_COLOR_;
}

+ (NSString *)STYLE_PROPERTY_BOX_PADDING {
  return OrgOssPdfreporterEngineStylePropertyStyleProvider_STYLE_PROPERTY_BOX_PADDING_;
}

+ (NSString *)STYLE_PROPERTY_BOX_TOP_PADDING {
  return OrgOssPdfreporterEngineStylePropertyStyleProvider_STYLE_PROPERTY_BOX_TOP_PADDING_;
}

+ (NSString *)STYLE_PROPERTY_BOX_LEFT_PADDING {
  return OrgOssPdfreporterEngineStylePropertyStyleProvider_STYLE_PROPERTY_BOX_LEFT_PADDING_;
}

+ (NSString *)STYLE_PROPERTY_BOX_RIGHT_PADDING {
  return OrgOssPdfreporterEngineStylePropertyStyleProvider_STYLE_PROPERTY_BOX_RIGHT_PADDING_;
}

+ (NSString *)STYLE_PROPERTY_BOX_BOTTOM_PADDING {
  return OrgOssPdfreporterEngineStylePropertyStyleProvider_STYLE_PROPERTY_BOX_BOTTOM_PADDING_;
}

+ (NSString *)STYLE_PROPERTY_BOX_PEN_LINE_WIDTH {
  return OrgOssPdfreporterEngineStylePropertyStyleProvider_STYLE_PROPERTY_BOX_PEN_LINE_WIDTH_;
}

+ (NSString *)STYLE_PROPERTY_BOX_PEN_LINE_STYLE {
  return OrgOssPdfreporterEngineStylePropertyStyleProvider_STYLE_PROPERTY_BOX_PEN_LINE_STYLE_;
}

+ (NSString *)STYLE_PROPERTY_BOX_PEN_LINE_COLOR {
  return OrgOssPdfreporterEngineStylePropertyStyleProvider_STYLE_PROPERTY_BOX_PEN_LINE_COLOR_;
}

+ (NSString *)STYLE_PROPERTY_BOX_LEFT_PEN_LINE_WIDTH {
  return OrgOssPdfreporterEngineStylePropertyStyleProvider_STYLE_PROPERTY_BOX_LEFT_PEN_LINE_WIDTH_;
}

+ (NSString *)STYLE_PROPERTY_BOX_LEFT_PEN_LINE_STYLE {
  return OrgOssPdfreporterEngineStylePropertyStyleProvider_STYLE_PROPERTY_BOX_LEFT_PEN_LINE_STYLE_;
}

+ (NSString *)STYLE_PROPERTY_BOX_LEFT_PEN_LINE_COLOR {
  return OrgOssPdfreporterEngineStylePropertyStyleProvider_STYLE_PROPERTY_BOX_LEFT_PEN_LINE_COLOR_;
}

+ (NSString *)STYLE_PROPERTY_BOX_TOP_PEN_LINE_WIDTH {
  return OrgOssPdfreporterEngineStylePropertyStyleProvider_STYLE_PROPERTY_BOX_TOP_PEN_LINE_WIDTH_;
}

+ (NSString *)STYLE_PROPERTY_BOX_TOP_PEN_LINE_STYLE {
  return OrgOssPdfreporterEngineStylePropertyStyleProvider_STYLE_PROPERTY_BOX_TOP_PEN_LINE_STYLE_;
}

+ (NSString *)STYLE_PROPERTY_BOX_TOP_PEN_LINE_COLOR {
  return OrgOssPdfreporterEngineStylePropertyStyleProvider_STYLE_PROPERTY_BOX_TOP_PEN_LINE_COLOR_;
}

+ (NSString *)STYLE_PROPERTY_BOX_RIGHT_PEN_LINE_WIDTH {
  return OrgOssPdfreporterEngineStylePropertyStyleProvider_STYLE_PROPERTY_BOX_RIGHT_PEN_LINE_WIDTH_;
}

+ (NSString *)STYLE_PROPERTY_BOX_RIGHT_PEN_LINE_STYLE {
  return OrgOssPdfreporterEngineStylePropertyStyleProvider_STYLE_PROPERTY_BOX_RIGHT_PEN_LINE_STYLE_;
}

+ (NSString *)STYLE_PROPERTY_BOX_RIGHT_PEN_LINE_COLOR {
  return OrgOssPdfreporterEngineStylePropertyStyleProvider_STYLE_PROPERTY_BOX_RIGHT_PEN_LINE_COLOR_;
}

+ (NSString *)STYLE_PROPERTY_BOX_BOTTOM_PEN_LINE_WIDTH {
  return OrgOssPdfreporterEngineStylePropertyStyleProvider_STYLE_PROPERTY_BOX_BOTTOM_PEN_LINE_WIDTH_;
}

+ (NSString *)STYLE_PROPERTY_BOX_BOTTOM_PEN_LINE_STYLE {
  return OrgOssPdfreporterEngineStylePropertyStyleProvider_STYLE_PROPERTY_BOX_BOTTOM_PEN_LINE_STYLE_;
}

+ (NSString *)STYLE_PROPERTY_BOX_BOTTOM_PEN_LINE_COLOR {
  return OrgOssPdfreporterEngineStylePropertyStyleProvider_STYLE_PROPERTY_BOX_BOTTOM_PEN_LINE_COLOR_;
}

+ (NSString *)STYLE_PROPERTY_LINE_SPACING {
  return OrgOssPdfreporterEngineStylePropertyStyleProvider_STYLE_PROPERTY_LINE_SPACING_;
}

+ (NSString *)STYLE_PROPERTY_LINE_SPACING_SIZE {
  return OrgOssPdfreporterEngineStylePropertyStyleProvider_STYLE_PROPERTY_LINE_SPACING_SIZE_;
}

+ (NSString *)STYLE_PROPERTY_FIRST_LINE_INDENT {
  return OrgOssPdfreporterEngineStylePropertyStyleProvider_STYLE_PROPERTY_FIRST_LINE_INDENT_;
}

+ (NSString *)STYLE_PROPERTY_LEFT_INDENT {
  return OrgOssPdfreporterEngineStylePropertyStyleProvider_STYLE_PROPERTY_LEFT_INDENT_;
}

+ (NSString *)STYLE_PROPERTY_RIGHT_INDENT {
  return OrgOssPdfreporterEngineStylePropertyStyleProvider_STYLE_PROPERTY_RIGHT_INDENT_;
}

+ (NSString *)STYLE_PROPERTY_SPACING_BEFORE {
  return OrgOssPdfreporterEngineStylePropertyStyleProvider_STYLE_PROPERTY_SPACING_BEFORE_;
}

+ (NSString *)STYLE_PROPERTY_SPACING_AFTER {
  return OrgOssPdfreporterEngineStylePropertyStyleProvider_STYLE_PROPERTY_SPACING_AFTER_;
}

+ (NSString *)STYLE_PROPERTY_TABSTOP_WIDTH {
  return OrgOssPdfreporterEngineStylePropertyStyleProvider_STYLE_PROPERTY_TABSTOP_WIDTH_;
}

- (id)initWithOrgOssPdfreporterEngineStyleStyleProviderContext:(id<OrgOssPdfreporterEngineStyleStyleProviderContext>)context
                                               withJavaUtilMap:(id<JavaUtilMap>)stylePropertyExpressions {
  if ((self = [super init])) {
    self.context = context;
    self.stylePropertyExpressions = stylePropertyExpressions;
    id<JavaUtilList> fieldsList = [[JavaUtilArrayList alloc] init];
    id<JavaUtilList> variablesList = [[JavaUtilArrayList alloc] init];
    if (stylePropertyExpressions != nil) {
      {
        id<JavaUtilIterator> iter__ = [((id<JavaUtilCollection>) nil_chk([stylePropertyExpressions values])) iterator];
        while ([((id<JavaUtilIterator>) nil_chk(iter__)) hasNext]) {
          id<OrgOssPdfreporterEngineJRPropertyExpression> stylePropertyExpression = [((id<JavaUtilIterator>) nil_chk(iter__)) next];
          id<OrgOssPdfreporterEngineJRExpression> expression = [((id<OrgOssPdfreporterEngineJRPropertyExpression>) nil_chk(stylePropertyExpression)) getValueExpression];
          if (expression != nil) {
            IOSObjectArray *chunks = [expression getChunks];
            if (chunks != nil) {
              for (int i = 0; i < (int) [chunks count]; i++) {
                id<OrgOssPdfreporterEngineJRExpressionChunk> chunk = [chunks objectAtIndex:i];
                switch ([((id<OrgOssPdfreporterEngineJRExpressionChunk>) nil_chk(chunk)) getType]) {
                  case OrgOssPdfreporterEngineJRExpressionChunk_TYPE_FIELD:
                  {
                    [((id<JavaUtilList>) nil_chk(fieldsList)) addWithId:[((id<OrgOssPdfreporterEngineJRExpressionChunk>) nil_chk(chunk)) getText]];
                    break;
                  }
                  case OrgOssPdfreporterEngineJRExpressionChunk_TYPE_VARIABLE:
                  {
                    [((id<JavaUtilList>) nil_chk(variablesList)) addWithId:[((id<OrgOssPdfreporterEngineJRExpressionChunk>) nil_chk(chunk)) getText]];
                    break;
                  }
                }
              }
            }
          }
        }
      }
    }
    fields_ = [((id<JavaUtilList>) nil_chk(fieldsList)) size] > 0 ? (IOSObjectArray *) [((id<JavaUtilList>) nil_chk(fieldsList)) toArrayWithNSObjectArray:[IOSObjectArray arrayWithLength:[((id<JavaUtilList>) nil_chk(fieldsList)) size] type:[IOSClass classWithClass:[NSString class]]]] : nil;
    variables_ = [((id<JavaUtilList>) nil_chk(variablesList)) size] > 0 ? (IOSObjectArray *) [((id<JavaUtilList>) nil_chk(variablesList)) toArrayWithNSObjectArray:[IOSObjectArray arrayWithLength:[((id<JavaUtilList>) nil_chk(variablesList)) size] type:[IOSClass classWithClass:[NSString class]]]] : nil;
    id<OrgOssPdfreporterEngineJRElement> element = [((id<OrgOssPdfreporterEngineStyleStyleProviderContext>) nil_chk(context)) getElement];
    id<OrgOssPdfreporterEngineJREvaluation> evaluation = [(id) element conformsToProtocol: @protocol(OrgOssPdfreporterEngineJREvaluation)] ? (id<OrgOssPdfreporterEngineJREvaluation>) element : nil;
    lateEvaluated_ = evaluation != nil && [((id<OrgOssPdfreporterEngineJREvaluation>) nil_chk(evaluation)) getEvaluationTimeValue] != [OrgOssPdfreporterEngineTypeEvaluationTimeEnumEnum NOW];
  }
  return self;
}

- (id<OrgOssPdfreporterEngineJRStyle>)getStyleWithChar:(char)evaluation {
  id<OrgOssPdfreporterEngineJRStyle> style = [[OrgOssPdfreporterEngineBaseJRBaseStyle alloc] init];
  NSString *mode = [self getPropertyValueWithNSString:OrgOssPdfreporterEngineStylePropertyStyleProvider_STYLE_PROPERTY_MODE_ withChar:evaluation];
  if (mode != nil) {
    [((id<OrgOssPdfreporterEngineJRStyle>) nil_chk(style)) setModeWithOrgOssPdfreporterEngineTypeModeEnumEnum:[OrgOssPdfreporterEngineTypeModeEnumEnum getByNameWithNSString:mode]];
  }
  NSString *backcolor = [self getPropertyValueWithNSString:OrgOssPdfreporterEngineStylePropertyStyleProvider_STYLE_PROPERTY_BACKCOLOR_ withChar:evaluation];
  if (backcolor != nil) {
    [((id<OrgOssPdfreporterEngineJRStyle>) nil_chk(style)) setBackcolorWithOrgOssPdfreporterGeometryIColor:[OrgOssPdfreporterEngineUtilJRColorUtil getColorWithNSString:backcolor withOrgOssPdfreporterGeometryIColor:nil]];
  }
  NSString *forecolor = [self getPropertyValueWithNSString:OrgOssPdfreporterEngineStylePropertyStyleProvider_STYLE_PROPERTY_FORECOLOR_ withChar:evaluation];
  if (forecolor != nil) {
    [((id<OrgOssPdfreporterEngineJRStyle>) nil_chk(style)) setForecolorWithOrgOssPdfreporterGeometryIColor:[OrgOssPdfreporterEngineUtilJRColorUtil getColorWithNSString:forecolor withOrgOssPdfreporterGeometryIColor:nil]];
  }
  NSString *fill = [self getPropertyValueWithNSString:OrgOssPdfreporterEngineStylePropertyStyleProvider_STYLE_PROPERTY_FILL_ withChar:evaluation];
  if (fill != nil) {
    [((id<OrgOssPdfreporterEngineJRStyle>) nil_chk(style)) setFillWithOrgOssPdfreporterEngineTypeFillEnumEnum:[OrgOssPdfreporterEngineTypeFillEnumEnum getByNameWithNSString:fill]];
  }
  NSString *radius = [self getPropertyValueWithNSString:OrgOssPdfreporterEngineStylePropertyStyleProvider_STYLE_PROPERTY_RADIUS_ withChar:evaluation];
  if (radius != nil) {
    [((id<OrgOssPdfreporterEngineJRStyle>) nil_chk(style)) setRadiusWithJavaLangInteger:[JavaLangInteger valueOfWithNSString:radius]];
  }
  NSString *scaleImage = [self getPropertyValueWithNSString:OrgOssPdfreporterEngineStylePropertyStyleProvider_STYLE_PROPERTY_SCALE_IMAGE_ withChar:evaluation];
  if (scaleImage != nil) {
    [((id<OrgOssPdfreporterEngineJRStyle>) nil_chk(style)) setScaleImageWithOrgOssPdfreporterEngineTypeScaleImageEnumEnum:[OrgOssPdfreporterEngineTypeScaleImageEnumEnum getByNameWithNSString:scaleImage]];
  }
  NSString *hAlign = [self getPropertyValueWithNSString:OrgOssPdfreporterEngineStylePropertyStyleProvider_STYLE_PROPERTY_HALIGN_ withChar:evaluation];
  if (hAlign != nil) {
    [((id<OrgOssPdfreporterEngineJRStyle>) nil_chk(style)) setHorizontalAlignmentWithOrgOssPdfreporterEngineTypeHorizontalAlignEnumEnum:[OrgOssPdfreporterEngineTypeHorizontalAlignEnumEnum getByNameWithNSString:hAlign]];
  }
  NSString *vAlign = [self getPropertyValueWithNSString:OrgOssPdfreporterEngineStylePropertyStyleProvider_STYLE_PROPERTY_VALIGN_ withChar:evaluation];
  if (vAlign != nil) {
    [((id<OrgOssPdfreporterEngineJRStyle>) nil_chk(style)) setVerticalAlignmentWithOrgOssPdfreporterEngineTypeVerticalAlignEnumEnum:[OrgOssPdfreporterEngineTypeVerticalAlignEnumEnum getByNameWithNSString:vAlign]];
  }
  NSString *rotation = [self getPropertyValueWithNSString:OrgOssPdfreporterEngineStylePropertyStyleProvider_STYLE_PROPERTY_ROTATION_ withChar:evaluation];
  if (rotation != nil) {
    [((id<OrgOssPdfreporterEngineJRStyle>) nil_chk(style)) setRotationWithOrgOssPdfreporterEngineTypeRotationEnumEnum:[OrgOssPdfreporterEngineTypeRotationEnumEnum getByNameWithNSString:rotation]];
  }
  NSString *markup = [self getPropertyValueWithNSString:OrgOssPdfreporterEngineStylePropertyStyleProvider_STYLE_PROPERTY_MARKUP_ withChar:evaluation];
  if (markup != nil) {
    [((id<OrgOssPdfreporterEngineJRStyle>) nil_chk(style)) setMarkupWithNSString:markup];
  }
  NSString *pattern = [self getPropertyValueWithNSString:OrgOssPdfreporterEngineStylePropertyStyleProvider_STYLE_PROPERTY_PATTERN_ withChar:evaluation];
  if (pattern != nil) {
    [((id<OrgOssPdfreporterEngineJRStyle>) nil_chk(style)) setPatternWithNSString:pattern];
  }
  NSString *blankWhenNull = [self getPropertyValueWithNSString:OrgOssPdfreporterEngineStylePropertyStyleProvider_STYLE_PROPERTY_BLANK_WHEN_NULL_ withChar:evaluation];
  if (blankWhenNull != nil) {
    [((id<OrgOssPdfreporterEngineJRStyle>) nil_chk(style)) setBlankWhenNullWithJavaLangBoolean:[JavaLangBoolean valueOfWithNSString:blankWhenNull]];
  }
  NSString *fontName = [self getPropertyValueWithNSString:OrgOssPdfreporterEngineStylePropertyStyleProvider_STYLE_PROPERTY_FONT_NAME_ withChar:evaluation];
  if (fontName != nil) {
    [((id<OrgOssPdfreporterEngineJRStyle>) nil_chk(style)) setFontNameWithNSString:fontName];
  }
  NSString *fontSize = [self getPropertyValueWithNSString:OrgOssPdfreporterEngineStylePropertyStyleProvider_STYLE_PROPERTY_FONT_SIZE_ withChar:evaluation];
  if (fontSize != nil) {
    [((id<OrgOssPdfreporterEngineJRStyle>) nil_chk(style)) setFontSizeWithJavaLangInteger:[JavaLangInteger valueOfWithNSString:fontSize]];
  }
  NSString *bold = [self getPropertyValueWithNSString:OrgOssPdfreporterEngineStylePropertyStyleProvider_STYLE_PROPERTY_FONT_BOLD_ withChar:evaluation];
  if (bold != nil) {
    [((id<OrgOssPdfreporterEngineJRStyle>) nil_chk(style)) setBoldWithJavaLangBoolean:[JavaLangBoolean valueOfWithNSString:bold]];
  }
  NSString *italic = [self getPropertyValueWithNSString:OrgOssPdfreporterEngineStylePropertyStyleProvider_STYLE_PROPERTY_FONT_ITALIC_ withChar:evaluation];
  if (italic != nil) {
    [((id<OrgOssPdfreporterEngineJRStyle>) nil_chk(style)) setItalicWithJavaLangBoolean:[JavaLangBoolean valueOfWithNSString:italic]];
  }
  NSString *underline = [self getPropertyValueWithNSString:OrgOssPdfreporterEngineStylePropertyStyleProvider_STYLE_PROPERTY_FONT_UNDERLINE_ withChar:evaluation];
  if (underline != nil) {
    [((id<OrgOssPdfreporterEngineJRStyle>) nil_chk(style)) setUnderlineWithJavaLangBoolean:[JavaLangBoolean valueOfWithNSString:underline]];
  }
  NSString *strikethrough = [self getPropertyValueWithNSString:OrgOssPdfreporterEngineStylePropertyStyleProvider_STYLE_PROPERTY_FONT_STRIKETHROUGH_ withChar:evaluation];
  if (strikethrough != nil) {
    [((id<OrgOssPdfreporterEngineJRStyle>) nil_chk(style)) setStrikeThroughWithJavaLangBoolean:[JavaLangBoolean valueOfWithNSString:strikethrough]];
  }
  NSString *pdfFontName = [self getPropertyValueWithNSString:OrgOssPdfreporterEngineStylePropertyStyleProvider_STYLE_PROPERTY_PDF_FONT_NAME_ withChar:evaluation];
  if (pdfFontName != nil) {
    [((id<OrgOssPdfreporterEngineJRStyle>) nil_chk(style)) setPdfFontNameWithNSString:pdfFontName];
  }
  NSString *pdfEncoding = [self getPropertyValueWithNSString:OrgOssPdfreporterEngineStylePropertyStyleProvider_STYLE_PROPERTY_PDF_ENCODING_ withChar:evaluation];
  if (pdfEncoding != nil) {
    [((id<OrgOssPdfreporterEngineJRStyle>) nil_chk(style)) setPdfEncodingWithNSString:pdfEncoding];
  }
  NSString *pdfEmbedded = [self getPropertyValueWithNSString:OrgOssPdfreporterEngineStylePropertyStyleProvider_STYLE_PROPERTY_PDF_EMBEDDED_ withChar:evaluation];
  if (pdfEmbedded != nil) {
    [((id<OrgOssPdfreporterEngineJRStyle>) nil_chk(style)) setPdfEmbeddedWithJavaLangBoolean:[JavaLangBoolean valueOfWithNSString:pdfEmbedded]];
  }
  NSString *penLineWidth = [self getPropertyValueWithNSString:OrgOssPdfreporterEngineStylePropertyStyleProvider_STYLE_PROPERTY_PEN_LINE_WIDTH_ withChar:evaluation];
  if (penLineWidth != nil) {
    [((id<OrgOssPdfreporterEngineJRPen>) nil_chk([((id<OrgOssPdfreporterEngineJRStyle>) nil_chk(style)) getLinePen])) setLineWidthWithJavaLangFloat:[JavaLangFloat valueOfWithNSString:penLineWidth]];
  }
  NSString *penLineStyle = [self getPropertyValueWithNSString:OrgOssPdfreporterEngineStylePropertyStyleProvider_STYLE_PROPERTY_PEN_LINE_STYLE_ withChar:evaluation];
  if (penLineStyle != nil) {
    [((id<OrgOssPdfreporterEngineJRPen>) nil_chk([((id<OrgOssPdfreporterEngineJRStyle>) nil_chk(style)) getLinePen])) setLineStyleWithOrgOssPdfreporterEngineTypeLineStyleEnumEnum:[OrgOssPdfreporterEngineTypeLineStyleEnumEnum getByNameWithNSString:penLineStyle]];
  }
  NSString *penLineColor = [self getPropertyValueWithNSString:OrgOssPdfreporterEngineStylePropertyStyleProvider_STYLE_PROPERTY_PEN_LINE_COLOR_ withChar:evaluation];
  if (penLineColor != nil) {
    [((id<OrgOssPdfreporterEngineJRPen>) nil_chk([((id<OrgOssPdfreporterEngineJRStyle>) nil_chk(style)) getLinePen])) setLineColorWithOrgOssPdfreporterGeometryIColor:[OrgOssPdfreporterEngineUtilJRColorUtil getColorWithNSString:penLineColor withOrgOssPdfreporterGeometryIColor:nil]];
  }
  NSString *boxPadding = [self getPropertyValueWithNSString:OrgOssPdfreporterEngineStylePropertyStyleProvider_STYLE_PROPERTY_BOX_PADDING_ withChar:evaluation];
  if (boxPadding != nil) {
    [((id<OrgOssPdfreporterEngineJRLineBox>) nil_chk([((id<OrgOssPdfreporterEngineJRStyle>) nil_chk(style)) getLineBox])) setPaddingWithJavaLangInteger:[JavaLangInteger valueOfWithNSString:boxPadding]];
  }
  NSString *boxLeftPadding = [self getPropertyValueWithNSString:OrgOssPdfreporterEngineStylePropertyStyleProvider_STYLE_PROPERTY_BOX_LEFT_PADDING_ withChar:evaluation];
  if (boxLeftPadding != nil) {
    [((id<OrgOssPdfreporterEngineJRLineBox>) nil_chk([((id<OrgOssPdfreporterEngineJRStyle>) nil_chk(style)) getLineBox])) setLeftPaddingWithJavaLangInteger:[JavaLangInteger valueOfWithNSString:boxLeftPadding]];
  }
  NSString *boxTopPadding = [self getPropertyValueWithNSString:OrgOssPdfreporterEngineStylePropertyStyleProvider_STYLE_PROPERTY_BOX_TOP_PADDING_ withChar:evaluation];
  if (boxTopPadding != nil) {
    [((id<OrgOssPdfreporterEngineJRLineBox>) nil_chk([((id<OrgOssPdfreporterEngineJRStyle>) nil_chk(style)) getLineBox])) setTopPaddingWithJavaLangInteger:[JavaLangInteger valueOfWithNSString:boxTopPadding]];
  }
  NSString *boxRightPadding = [self getPropertyValueWithNSString:OrgOssPdfreporterEngineStylePropertyStyleProvider_STYLE_PROPERTY_BOX_RIGHT_PADDING_ withChar:evaluation];
  if (boxRightPadding != nil) {
    [((id<OrgOssPdfreporterEngineJRLineBox>) nil_chk([((id<OrgOssPdfreporterEngineJRStyle>) nil_chk(style)) getLineBox])) setRightPaddingWithJavaLangInteger:[JavaLangInteger valueOfWithNSString:boxRightPadding]];
  }
  NSString *boxBottomPadding = [self getPropertyValueWithNSString:OrgOssPdfreporterEngineStylePropertyStyleProvider_STYLE_PROPERTY_BOX_BOTTOM_PADDING_ withChar:evaluation];
  if (boxBottomPadding != nil) {
    [((id<OrgOssPdfreporterEngineJRLineBox>) nil_chk([((id<OrgOssPdfreporterEngineJRStyle>) nil_chk(style)) getLineBox])) setBottomPaddingWithJavaLangInteger:[JavaLangInteger valueOfWithNSString:boxBottomPadding]];
  }
  NSString *boxPenLineWidth = [self getPropertyValueWithNSString:OrgOssPdfreporterEngineStylePropertyStyleProvider_STYLE_PROPERTY_BOX_PEN_LINE_WIDTH_ withChar:evaluation];
  if (boxPenLineWidth != nil) {
    [((id<OrgOssPdfreporterEngineBaseJRBoxPen>) nil_chk([((id<OrgOssPdfreporterEngineJRLineBox>) nil_chk([((id<OrgOssPdfreporterEngineJRStyle>) nil_chk(style)) getLineBox])) getPen])) setLineWidthWithJavaLangFloat:[JavaLangFloat valueOfWithNSString:boxPenLineWidth]];
  }
  NSString *boxPenLineStyle = [self getPropertyValueWithNSString:OrgOssPdfreporterEngineStylePropertyStyleProvider_STYLE_PROPERTY_BOX_PEN_LINE_STYLE_ withChar:evaluation];
  if (boxPenLineStyle != nil) {
    [((id<OrgOssPdfreporterEngineBaseJRBoxPen>) nil_chk([((id<OrgOssPdfreporterEngineJRLineBox>) nil_chk([((id<OrgOssPdfreporterEngineJRStyle>) nil_chk(style)) getLineBox])) getPen])) setLineStyleWithOrgOssPdfreporterEngineTypeLineStyleEnumEnum:[OrgOssPdfreporterEngineTypeLineStyleEnumEnum getByNameWithNSString:boxPenLineStyle]];
  }
  NSString *boxPenLineColor = [self getPropertyValueWithNSString:OrgOssPdfreporterEngineStylePropertyStyleProvider_STYLE_PROPERTY_BOX_PEN_LINE_COLOR_ withChar:evaluation];
  if (boxPenLineColor != nil) {
    [((id<OrgOssPdfreporterEngineBaseJRBoxPen>) nil_chk([((id<OrgOssPdfreporterEngineJRLineBox>) nil_chk([((id<OrgOssPdfreporterEngineJRStyle>) nil_chk(style)) getLineBox])) getPen])) setLineColorWithOrgOssPdfreporterGeometryIColor:[OrgOssPdfreporterEngineUtilJRColorUtil getColorWithNSString:boxPenLineColor withOrgOssPdfreporterGeometryIColor:nil]];
  }
  NSString *boxLeftPenLineWidth = [self getPropertyValueWithNSString:OrgOssPdfreporterEngineStylePropertyStyleProvider_STYLE_PROPERTY_BOX_LEFT_PEN_LINE_WIDTH_ withChar:evaluation];
  if (boxLeftPenLineWidth != nil) {
    [((id<OrgOssPdfreporterEngineBaseJRBoxPen>) nil_chk([((id<OrgOssPdfreporterEngineJRLineBox>) nil_chk([((id<OrgOssPdfreporterEngineJRStyle>) nil_chk(style)) getLineBox])) getLeftPen])) setLineWidthWithJavaLangFloat:[JavaLangFloat valueOfWithNSString:boxLeftPenLineWidth]];
  }
  NSString *boxLeftPenLineStyle = [self getPropertyValueWithNSString:OrgOssPdfreporterEngineStylePropertyStyleProvider_STYLE_PROPERTY_BOX_LEFT_PEN_LINE_STYLE_ withChar:evaluation];
  if (boxLeftPenLineStyle != nil) {
    [((id<OrgOssPdfreporterEngineBaseJRBoxPen>) nil_chk([((id<OrgOssPdfreporterEngineJRLineBox>) nil_chk([((id<OrgOssPdfreporterEngineJRStyle>) nil_chk(style)) getLineBox])) getLeftPen])) setLineStyleWithOrgOssPdfreporterEngineTypeLineStyleEnumEnum:[OrgOssPdfreporterEngineTypeLineStyleEnumEnum getByNameWithNSString:boxLeftPenLineStyle]];
  }
  NSString *boxLeftPenLineColor = [self getPropertyValueWithNSString:OrgOssPdfreporterEngineStylePropertyStyleProvider_STYLE_PROPERTY_BOX_LEFT_PEN_LINE_COLOR_ withChar:evaluation];
  if (boxLeftPenLineColor != nil) {
    [((id<OrgOssPdfreporterEngineBaseJRBoxPen>) nil_chk([((id<OrgOssPdfreporterEngineJRLineBox>) nil_chk([((id<OrgOssPdfreporterEngineJRStyle>) nil_chk(style)) getLineBox])) getLeftPen])) setLineColorWithOrgOssPdfreporterGeometryIColor:[OrgOssPdfreporterEngineUtilJRColorUtil getColorWithNSString:boxLeftPenLineColor withOrgOssPdfreporterGeometryIColor:nil]];
  }
  NSString *boxTopPenLineWidth = [self getPropertyValueWithNSString:OrgOssPdfreporterEngineStylePropertyStyleProvider_STYLE_PROPERTY_BOX_TOP_PEN_LINE_WIDTH_ withChar:evaluation];
  if (boxTopPenLineWidth != nil) {
    [((id<OrgOssPdfreporterEngineBaseJRBoxPen>) nil_chk([((id<OrgOssPdfreporterEngineJRLineBox>) nil_chk([((id<OrgOssPdfreporterEngineJRStyle>) nil_chk(style)) getLineBox])) getTopPen])) setLineWidthWithJavaLangFloat:[JavaLangFloat valueOfWithNSString:boxTopPenLineWidth]];
  }
  NSString *boxTopPenLineStyle = [self getPropertyValueWithNSString:OrgOssPdfreporterEngineStylePropertyStyleProvider_STYLE_PROPERTY_BOX_TOP_PEN_LINE_STYLE_ withChar:evaluation];
  if (boxTopPenLineStyle != nil) {
    [((id<OrgOssPdfreporterEngineBaseJRBoxPen>) nil_chk([((id<OrgOssPdfreporterEngineJRLineBox>) nil_chk([((id<OrgOssPdfreporterEngineJRStyle>) nil_chk(style)) getLineBox])) getTopPen])) setLineStyleWithOrgOssPdfreporterEngineTypeLineStyleEnumEnum:[OrgOssPdfreporterEngineTypeLineStyleEnumEnum getByNameWithNSString:boxTopPenLineStyle]];
  }
  NSString *boxTopPenLineColor = [self getPropertyValueWithNSString:OrgOssPdfreporterEngineStylePropertyStyleProvider_STYLE_PROPERTY_BOX_TOP_PEN_LINE_COLOR_ withChar:evaluation];
  if (boxTopPenLineColor != nil) {
    [((id<OrgOssPdfreporterEngineBaseJRBoxPen>) nil_chk([((id<OrgOssPdfreporterEngineJRLineBox>) nil_chk([((id<OrgOssPdfreporterEngineJRStyle>) nil_chk(style)) getLineBox])) getTopPen])) setLineColorWithOrgOssPdfreporterGeometryIColor:[OrgOssPdfreporterEngineUtilJRColorUtil getColorWithNSString:boxTopPenLineColor withOrgOssPdfreporterGeometryIColor:nil]];
  }
  NSString *boxRightPenLineWidth = [self getPropertyValueWithNSString:OrgOssPdfreporterEngineStylePropertyStyleProvider_STYLE_PROPERTY_BOX_RIGHT_PEN_LINE_WIDTH_ withChar:evaluation];
  if (boxRightPenLineWidth != nil) {
    [((id<OrgOssPdfreporterEngineBaseJRBoxPen>) nil_chk([((id<OrgOssPdfreporterEngineJRLineBox>) nil_chk([((id<OrgOssPdfreporterEngineJRStyle>) nil_chk(style)) getLineBox])) getRightPen])) setLineWidthWithJavaLangFloat:[JavaLangFloat valueOfWithNSString:boxRightPenLineWidth]];
  }
  NSString *boxRightPenLineStyle = [self getPropertyValueWithNSString:OrgOssPdfreporterEngineStylePropertyStyleProvider_STYLE_PROPERTY_BOX_RIGHT_PEN_LINE_STYLE_ withChar:evaluation];
  if (boxRightPenLineStyle != nil) {
    [((id<OrgOssPdfreporterEngineBaseJRBoxPen>) nil_chk([((id<OrgOssPdfreporterEngineJRLineBox>) nil_chk([((id<OrgOssPdfreporterEngineJRStyle>) nil_chk(style)) getLineBox])) getRightPen])) setLineStyleWithOrgOssPdfreporterEngineTypeLineStyleEnumEnum:[OrgOssPdfreporterEngineTypeLineStyleEnumEnum getByNameWithNSString:boxRightPenLineStyle]];
  }
  NSString *boxRightPenLineColor = [self getPropertyValueWithNSString:OrgOssPdfreporterEngineStylePropertyStyleProvider_STYLE_PROPERTY_BOX_RIGHT_PEN_LINE_COLOR_ withChar:evaluation];
  if (boxRightPenLineColor != nil) {
    [((id<OrgOssPdfreporterEngineBaseJRBoxPen>) nil_chk([((id<OrgOssPdfreporterEngineJRLineBox>) nil_chk([((id<OrgOssPdfreporterEngineJRStyle>) nil_chk(style)) getLineBox])) getRightPen])) setLineColorWithOrgOssPdfreporterGeometryIColor:[OrgOssPdfreporterEngineUtilJRColorUtil getColorWithNSString:boxRightPenLineColor withOrgOssPdfreporterGeometryIColor:nil]];
  }
  NSString *boxBottomPenLineWidth = [self getPropertyValueWithNSString:OrgOssPdfreporterEngineStylePropertyStyleProvider_STYLE_PROPERTY_BOX_BOTTOM_PEN_LINE_WIDTH_ withChar:evaluation];
  if (boxBottomPenLineWidth != nil) {
    [((id<OrgOssPdfreporterEngineBaseJRBoxPen>) nil_chk([((id<OrgOssPdfreporterEngineJRLineBox>) nil_chk([((id<OrgOssPdfreporterEngineJRStyle>) nil_chk(style)) getLineBox])) getBottomPen])) setLineWidthWithJavaLangFloat:[JavaLangFloat valueOfWithNSString:boxBottomPenLineWidth]];
  }
  NSString *boxBottomPenLineStyle = [self getPropertyValueWithNSString:OrgOssPdfreporterEngineStylePropertyStyleProvider_STYLE_PROPERTY_BOX_BOTTOM_PEN_LINE_STYLE_ withChar:evaluation];
  if (boxBottomPenLineStyle != nil) {
    [((id<OrgOssPdfreporterEngineBaseJRBoxPen>) nil_chk([((id<OrgOssPdfreporterEngineJRLineBox>) nil_chk([((id<OrgOssPdfreporterEngineJRStyle>) nil_chk(style)) getLineBox])) getBottomPen])) setLineStyleWithOrgOssPdfreporterEngineTypeLineStyleEnumEnum:[OrgOssPdfreporterEngineTypeLineStyleEnumEnum getByNameWithNSString:boxBottomPenLineStyle]];
  }
  NSString *boxBottomPenLineColor = [self getPropertyValueWithNSString:OrgOssPdfreporterEngineStylePropertyStyleProvider_STYLE_PROPERTY_BOX_BOTTOM_PEN_LINE_COLOR_ withChar:evaluation];
  if (boxBottomPenLineColor != nil) {
    [((id<OrgOssPdfreporterEngineBaseJRBoxPen>) nil_chk([((id<OrgOssPdfreporterEngineJRLineBox>) nil_chk([((id<OrgOssPdfreporterEngineJRStyle>) nil_chk(style)) getLineBox])) getBottomPen])) setLineColorWithOrgOssPdfreporterGeometryIColor:[OrgOssPdfreporterEngineUtilJRColorUtil getColorWithNSString:boxBottomPenLineColor withOrgOssPdfreporterGeometryIColor:nil]];
  }
  NSString *lineSpacing = [self getPropertyValueWithNSString:OrgOssPdfreporterEngineStylePropertyStyleProvider_STYLE_PROPERTY_LINE_SPACING_ withChar:evaluation];
  if (lineSpacing != nil) {
    [((id<OrgOssPdfreporterEngineJRParagraph>) nil_chk([((id<OrgOssPdfreporterEngineJRStyle>) nil_chk(style)) getParagraph])) setLineSpacingWithOrgOssPdfreporterEngineTypeLineSpacingEnumEnum:[OrgOssPdfreporterEngineTypeLineSpacingEnumEnum getByNameWithNSString:lineSpacing]];
  }
  NSString *lineSpacingSize = [self getPropertyValueWithNSString:OrgOssPdfreporterEngineStylePropertyStyleProvider_STYLE_PROPERTY_LINE_SPACING_SIZE_ withChar:evaluation];
  if (lineSpacingSize != nil) {
    [((id<OrgOssPdfreporterEngineJRParagraph>) nil_chk([((id<OrgOssPdfreporterEngineJRStyle>) nil_chk(style)) getParagraph])) setLineSpacingSizeWithJavaLangFloat:[JavaLangFloat valueOfWithNSString:lineSpacingSize]];
  }
  NSString *firstLineIndent = [self getPropertyValueWithNSString:OrgOssPdfreporterEngineStylePropertyStyleProvider_STYLE_PROPERTY_FIRST_LINE_INDENT_ withChar:evaluation];
  if (firstLineIndent != nil) {
    [((id<OrgOssPdfreporterEngineJRParagraph>) nil_chk([((id<OrgOssPdfreporterEngineJRStyle>) nil_chk(style)) getParagraph])) setFirstLineIndentWithJavaLangInteger:[JavaLangInteger valueOfWithNSString:firstLineIndent]];
  }
  NSString *leftIndent = [self getPropertyValueWithNSString:OrgOssPdfreporterEngineStylePropertyStyleProvider_STYLE_PROPERTY_LEFT_INDENT_ withChar:evaluation];
  if (leftIndent != nil) {
    [((id<OrgOssPdfreporterEngineJRParagraph>) nil_chk([((id<OrgOssPdfreporterEngineJRStyle>) nil_chk(style)) getParagraph])) setLeftIndentWithJavaLangInteger:[JavaLangInteger valueOfWithNSString:leftIndent]];
  }
  NSString *rightIndent = [self getPropertyValueWithNSString:OrgOssPdfreporterEngineStylePropertyStyleProvider_STYLE_PROPERTY_RIGHT_INDENT_ withChar:evaluation];
  if (rightIndent != nil) {
    [((id<OrgOssPdfreporterEngineJRParagraph>) nil_chk([((id<OrgOssPdfreporterEngineJRStyle>) nil_chk(style)) getParagraph])) setRightIndentWithJavaLangInteger:[JavaLangInteger valueOfWithNSString:rightIndent]];
  }
  NSString *spacingBefore = [self getPropertyValueWithNSString:OrgOssPdfreporterEngineStylePropertyStyleProvider_STYLE_PROPERTY_SPACING_BEFORE_ withChar:evaluation];
  if (spacingBefore != nil) {
    [((id<OrgOssPdfreporterEngineJRParagraph>) nil_chk([((id<OrgOssPdfreporterEngineJRStyle>) nil_chk(style)) getParagraph])) setSpacingBeforeWithJavaLangInteger:[JavaLangInteger valueOfWithNSString:spacingBefore]];
  }
  NSString *spacingAfter = [self getPropertyValueWithNSString:OrgOssPdfreporterEngineStylePropertyStyleProvider_STYLE_PROPERTY_SPACING_AFTER_ withChar:evaluation];
  if (spacingAfter != nil) {
    [((id<OrgOssPdfreporterEngineJRParagraph>) nil_chk([((id<OrgOssPdfreporterEngineJRStyle>) nil_chk(style)) getParagraph])) setSpacingAfterWithJavaLangInteger:[JavaLangInteger valueOfWithNSString:spacingAfter]];
  }
  NSString *tabStopWidth = [self getPropertyValueWithNSString:OrgOssPdfreporterEngineStylePropertyStyleProvider_STYLE_PROPERTY_TABSTOP_WIDTH_ withChar:evaluation];
  if (tabStopWidth != nil) {
    [((id<OrgOssPdfreporterEngineJRParagraph>) nil_chk([((id<OrgOssPdfreporterEngineJRStyle>) nil_chk(style)) getParagraph])) setTabStopWidthWithJavaLangInteger:[JavaLangInteger valueOfWithNSString:spacingAfter]];
  }
  return style;
}

- (IOSObjectArray *)getFields {
  return fields_;
}

- (IOSObjectArray *)getVariables {
  return variables_;
}

- (NSString *)getPropertyValueWithNSString:(NSString *)propertyName
                                  withChar:(char)evaluation {
  NSString *value = nil;
  if (lateEvaluated_ && [((id<JavaUtilMap>) nil_chk(stylePropertyExpressions_)) containsKeyWithId:propertyName]) {
    id<OrgOssPdfreporterEngineJRPropertyExpression> stylePropertyExpression = [((id<JavaUtilMap>) nil_chk(stylePropertyExpressions_)) getWithId:propertyName];
    id<OrgOssPdfreporterEngineJRExpression> expression = [((id<OrgOssPdfreporterEngineJRPropertyExpression>) nil_chk(stylePropertyExpression)) getValueExpression];
    if (expression != nil) {
      value = (NSString *) [((id<OrgOssPdfreporterEngineStyleStyleProviderContext>) nil_chk(context_)) evaluateExpressionWithOrgOssPdfreporterEngineJRExpression:expression withChar:evaluation];
    }
  }
  else {
    value = [((OrgOssPdfreporterEngineJRPropertiesMap *) nil_chk([((id<OrgOssPdfreporterEngineJRElement>) nil_chk([((id<OrgOssPdfreporterEngineStyleStyleProviderContext>) nil_chk(context_)) getElement])) getPropertiesMap])) getPropertyWithNSString:propertyName];
  }
  return value;
}

- (void)copyAllPropertiesTo:(id)copy {
  [super copyAllPropertiesTo:copy];
  OrgOssPdfreporterEngineStylePropertyStyleProvider *typedCopy = (OrgOssPdfreporterEngineStylePropertyStyleProvider *) copy;
  typedCopy.context = context_;
  typedCopy.stylePropertyExpressions = stylePropertyExpressions_;
  typedCopy.fields = fields_;
  typedCopy.variables = variables_;
  typedCopy.lateEvaluated = lateEvaluated_;
}

@end
