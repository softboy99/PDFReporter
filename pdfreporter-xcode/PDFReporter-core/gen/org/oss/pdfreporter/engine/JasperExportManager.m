//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: pdfreporter-core/src/org/oss/pdfreporter/engine/JasperExportManager.java
//
//  Created by kendra on 9/27/13.
//

#include "IOSClass.h"
#include "java/util/Map.h"
#include "java/util/logging/Logger.h"
#include "org/oss/pdfreporter/engine/DefaultJasperReportsContext.h"
#include "org/oss/pdfreporter/engine/JRExporterParameter.h"
#include "org/oss/pdfreporter/engine/JasperExportManager.h"
#include "org/oss/pdfreporter/engine/JasperPrint.h"
#include "org/oss/pdfreporter/engine/JasperReportsContext.h"
#include "org/oss/pdfreporter/engine/export/JRPdfExporter.h"
#include "org/oss/pdfreporter/progress/IProgressHandler.h"
#include "org/oss/pdfreporter/progress/ProgressManager.h"

@implementation OrgOssPdfreporterEngineJasperExportManager

static JavaUtilLoggingLogger * OrgOssPdfreporterEngineJasperExportManager_logger_;

@synthesize jasperReportsContext = jasperReportsContext_;

+ (JavaUtilLoggingLogger *)logger {
  return OrgOssPdfreporterEngineJasperExportManager_logger_;
}

- (id)initWithOrgOssPdfreporterEngineJasperReportsContext:(id<OrgOssPdfreporterEngineJasperReportsContext>)jasperReportsContext {
  if ((self = [super init])) {
    self.jasperReportsContext = jasperReportsContext;
  }
  return self;
}

+ (OrgOssPdfreporterEngineJasperExportManager *)getDefaultInstance {
  return [[OrgOssPdfreporterEngineJasperExportManager alloc] initWithOrgOssPdfreporterEngineJasperReportsContext:[OrgOssPdfreporterEngineDefaultJasperReportsContext getInstance]];
}

+ (OrgOssPdfreporterEngineJasperExportManager *)getInstanceWithOrgOssPdfreporterEngineJasperReportsContext:(id<OrgOssPdfreporterEngineJasperReportsContext>)jasperReportsContext {
  return [[OrgOssPdfreporterEngineJasperExportManager alloc] initWithOrgOssPdfreporterEngineJasperReportsContext:jasperReportsContext];
}

- (void)exportToPdfFileWithOrgOssPdfreporterEngineJasperPrint:(OrgOssPdfreporterEngineJasperPrint *)jasperPrint
                                                 withNSString:(NSString *)destFileName {
  [self exportToPdfFileWithOrgOssPdfreporterEngineJasperPrint:jasperPrint withNSString:destFileName withJavaUtilMap:nil];
}

- (void)exportToPdfFileWithOrgOssPdfreporterEngineJasperPrint:(OrgOssPdfreporterEngineJasperPrint *)jasperPrint
                                                 withNSString:(NSString *)destFileName
                                              withJavaUtilMap:(id<JavaUtilMap>)exportParameters {
  OrgOssPdfreporterEngineExportJRPdfExporter *exporter = [[OrgOssPdfreporterEngineExportJRPdfExporter alloc] initWithOrgOssPdfreporterEngineJasperReportsContext:jasperReportsContext_];
  if (exportParameters != nil) {
    [((id<JavaUtilMap>) nil_chk([((OrgOssPdfreporterEngineExportJRPdfExporter *) nil_chk(exporter)) getParameters])) putAllWithJavaUtilMap:exportParameters];
  }
  [((OrgOssPdfreporterEngineExportJRPdfExporter *) nil_chk(exporter)) setParameterWithOrgOssPdfreporterEngineJRExporterParameter:[OrgOssPdfreporterEngineJRExporterParameter JASPER_PRINT] withId:jasperPrint];
  [((OrgOssPdfreporterEngineExportJRPdfExporter *) nil_chk(exporter)) setParameterWithOrgOssPdfreporterEngineJRExporterParameter:[OrgOssPdfreporterEngineJRExporterParameter OUTPUT_FILE_NAME] withId:destFileName];
  [((OrgOssPdfreporterEngineExportJRPdfExporter *) nil_chk(exporter)) exportReport];
}

+ (void)exportReportToPdfFileWithOrgOssPdfreporterEngineJasperPrint:(OrgOssPdfreporterEngineJasperPrint *)jasperPrint
                                                       withNSString:(NSString *)destFileName {
  [OrgOssPdfreporterEngineJasperExportManager exportReportToPdfFileWithOrgOssPdfreporterEngineJasperPrint:jasperPrint withNSString:destFileName withJavaUtilMap:nil];
}

+ (void)exportReportToPdfFileWithOrgOssPdfreporterEngineJasperPrint:(OrgOssPdfreporterEngineJasperPrint *)jasperPrint
                                                       withNSString:(NSString *)destFileName
                                                    withJavaUtilMap:(id<JavaUtilMap>)exportParameters {
  OrgOssPdfreporterProgressProgressManager *pm = [[OrgOssPdfreporterProgressProgressManager alloc] initWithOrgOssPdfreporterProgressIProgressHandler_ProgressStateEnum:[OrgOssPdfreporterProgressIProgressHandler_ProgressStateEnum EXPORTING]];
  @try {
    [((OrgOssPdfreporterEngineJasperExportManager *) nil_chk([OrgOssPdfreporterEngineJasperExportManager getDefaultInstance])) exportToPdfFileWithOrgOssPdfreporterEngineJasperPrint:jasperPrint withNSString:destFileName withJavaUtilMap:exportParameters];
  }
  @finally {
    [((OrgOssPdfreporterProgressProgressManager *) nil_chk(pm)) done];
  }
}

+ (void)initialize {
  if (self == [OrgOssPdfreporterEngineJasperExportManager class]) {
    OrgOssPdfreporterEngineJasperExportManager_logger_ = [JavaUtilLoggingLogger getLoggerWithNSString:[[IOSClass classWithClass:[OrgOssPdfreporterEngineJasperExportManager class]] getName]];
  }
}

- (void)copyAllPropertiesTo:(id)copy {
  [super copyAllPropertiesTo:copy];
  OrgOssPdfreporterEngineJasperExportManager *typedCopy = (OrgOssPdfreporterEngineJasperExportManager *) copy;
  typedCopy.jasperReportsContext = jasperReportsContext_;
}

@end
