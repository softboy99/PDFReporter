//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: pdfreporter-core/src/org/oss/pdfreporter/engine/JRPrintElementIndex.java
//
//  Created by kendra on 9/27/13.
//

#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "java/lang/Integer.h"
#include "java/lang/StringBuffer.h"
#include "java/util/StringTokenizer.h"
#include "org/oss/pdfreporter/engine/JRPrintElementIndex.h"

@implementation OrgOssPdfreporterEngineJRPrintElementIndex

@synthesize reportIndex = reportIndex_;
@synthesize pageIndex = pageIndex_;
@synthesize address = address_;

- (id)initWithInt:(int)reportIndex
          withInt:(int)pageIndex
     withNSString:(NSString *)address {
  if ((self = [super init])) {
    self.reportIndex = reportIndex;
    self.pageIndex = pageIndex;
    self.address = address;
  }
  return self;
}

- (int)getReportIndex {
  return self.reportIndex;
}

- (int)getPageIndex {
  return self.pageIndex;
}

- (NSString *)description {
  JavaLangStringBuffer *str = [[JavaLangStringBuffer alloc] init];
  (void) [((JavaLangStringBuffer *) nil_chk(str)) appendWithInt:reportIndex_];
  (void) [((JavaLangStringBuffer *) nil_chk(str)) appendWithUnichar:'_'];
  (void) [((JavaLangStringBuffer *) nil_chk(str)) appendWithInt:pageIndex_];
  (void) [((JavaLangStringBuffer *) nil_chk(str)) appendWithUnichar:'_'];
  (void) [((JavaLangStringBuffer *) nil_chk(str)) appendWithNSString:address_];
  return [((JavaLangStringBuffer *) nil_chk(str)) description];
}

- (IOSObjectArray *)getAddressArray {
  JavaUtilStringTokenizer *tkzer = [[JavaUtilStringTokenizer alloc] initWithNSString:address_ withNSString:@"_"];
  IOSObjectArray *elementIndexes = [IOSObjectArray arrayWithLength:[((JavaUtilStringTokenizer *) nil_chk(tkzer)) countTokens] type:[IOSClass classWithClass:[JavaLangInteger class]]];
  int c = 0;
  while ([((JavaUtilStringTokenizer *) nil_chk(tkzer)) hasMoreTokens]) {
    (void) [((IOSObjectArray *) nil_chk(elementIndexes)) replaceObjectAtIndex:c++ withObject:[JavaLangInteger valueOfWithNSString:[((JavaUtilStringTokenizer *) nil_chk(tkzer)) nextToken]]];
  }
  return elementIndexes;
}

+ (OrgOssPdfreporterEngineJRPrintElementIndex *)parsePrintElementIndexWithNSString:(NSString *)indexStr {
  JavaUtilStringTokenizer *tkzer = [[JavaUtilStringTokenizer alloc] initWithNSString:indexStr withNSString:@"_"];
  NSString *reportIndexToken = [((JavaUtilStringTokenizer *) nil_chk(tkzer)) nextToken];
  NSString *pageIndexToken = [((JavaUtilStringTokenizer *) nil_chk(tkzer)) nextToken];
  return [[OrgOssPdfreporterEngineJRPrintElementIndex alloc] initWithInt:[JavaLangInteger parseIntWithNSString:reportIndexToken] withInt:[JavaLangInteger parseIntWithNSString:pageIndexToken] withNSString:[((NSString *) nil_chk(indexStr)) substring:[((NSString *) nil_chk(reportIndexToken)) length] + [((NSString *) nil_chk(pageIndexToken)) length] + 2]];
}

- (void)copyAllPropertiesTo:(id)copy {
  [super copyAllPropertiesTo:copy];
  OrgOssPdfreporterEngineJRPrintElementIndex *typedCopy = (OrgOssPdfreporterEngineJRPrintElementIndex *) copy;
  typedCopy.reportIndex = reportIndex_;
  typedCopy.pageIndex = pageIndex_;
  typedCopy.address = address_;
}

@end
