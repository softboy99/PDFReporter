//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: pdfreporter-core/src/org/oss/pdfreporter/engine/query/JRXPathQueryExecuter.java
//
//  Created by kendra on 9/27/13.
//

#include "java/io/File.h"
#include "java/io/InputStream.h"
#include "java/util/Locale.h"
#include "java/util/Map.h"
#include "java/util/TimeZone.h"
#include "org/oss/pdfreporter/engine/DefaultJasperReportsContext.h"
#include "org/oss/pdfreporter/engine/JRDataSource.h"
#include "org/oss/pdfreporter/engine/JRDataset.h"
#include "org/oss/pdfreporter/engine/JasperReportsContext.h"
#include "org/oss/pdfreporter/engine/data/JRXmlDataSource.h"
#include "org/oss/pdfreporter/engine/query/JRAbstractQueryExecuter.h"
#include "org/oss/pdfreporter/engine/query/JRXPathQueryExecuter.h"
#include "org/oss/pdfreporter/engine/query/JRXPathQueryExecuterFactory.h"
#include "org/oss/pdfreporter/uses/org/w3c/dom/Document.h"

@implementation OrgOssPdfreporterEngineQueryJRXPathQueryExecuter

static NSString * OrgOssPdfreporterEngineQueryJRXPathQueryExecuter_CANONICAL_LANGUAGE_ = @"XPath";

@synthesize datasource = datasource_;

+ (NSString *)CANONICAL_LANGUAGE {
  return OrgOssPdfreporterEngineQueryJRXPathQueryExecuter_CANONICAL_LANGUAGE_;
}

- (id)initOrgOssPdfreporterEngineQueryJRXPathQueryExecuterWithOrgOssPdfreporterEngineJasperReportsContext:(id<OrgOssPdfreporterEngineJasperReportsContext>)jasperReportsContext
                                                                     withOrgOssPdfreporterEngineJRDataset:(id<OrgOssPdfreporterEngineJRDataset>)dataset
                                                                                          withJavaUtilMap:(id<JavaUtilMap>)parametersMap {
  if ((self = [super initWithOrgOssPdfreporterEngineJasperReportsContext:jasperReportsContext withOrgOssPdfreporterEngineJRDataset:dataset withJavaUtilMap:parametersMap])) {
    [self parseQuery];
  }
  return self;
}

- (id)initWithOrgOssPdfreporterEngineJasperReportsContext:(id<OrgOssPdfreporterEngineJasperReportsContext>)jasperReportsContext
                     withOrgOssPdfreporterEngineJRDataset:(id<OrgOssPdfreporterEngineJRDataset>)dataset
                                          withJavaUtilMap:(id<JavaUtilMap>)parametersMap {
  return [self initOrgOssPdfreporterEngineQueryJRXPathQueryExecuterWithOrgOssPdfreporterEngineJasperReportsContext:jasperReportsContext withOrgOssPdfreporterEngineJRDataset:dataset withJavaUtilMap:parametersMap];
}

- (id)initWithOrgOssPdfreporterEngineJRDataset:(id<OrgOssPdfreporterEngineJRDataset>)dataset
                               withJavaUtilMap:(id<JavaUtilMap>)parametersMap {
  return [self initOrgOssPdfreporterEngineQueryJRXPathQueryExecuterWithOrgOssPdfreporterEngineJasperReportsContext:[OrgOssPdfreporterEngineDefaultJasperReportsContext getInstance] withOrgOssPdfreporterEngineJRDataset:dataset withJavaUtilMap:parametersMap];
}

- (NSString *)getCanonicalQueryLanguage {
  return OrgOssPdfreporterEngineQueryJRXPathQueryExecuter_CANONICAL_LANGUAGE_;
}

- (NSString *)getParameterReplacementWithNSString:(NSString *)parameterName {
  return [NSString valueOf:[self getParameterValueWithNSString:parameterName]];
}

- (id<OrgOssPdfreporterEngineJRDataSource>)createDatasource {
  OrgOssPdfreporterEngineDataJRXmlDataSource *datasource = nil;
  NSString *xPath = [self getQueryString];
  if (xPath != nil) {
    id<OrgOssPdfreporterUsesOrgW3cDomDocument> document = (id<OrgOssPdfreporterUsesOrgW3cDomDocument>) [self getParameterValueWithNSString:[OrgOssPdfreporterEngineQueryJRXPathQueryExecuterFactory PARAMETER_XML_DATA_DOCUMENT]];
    if (document != nil) {
      datasource = [[OrgOssPdfreporterEngineDataJRXmlDataSource alloc] initWithOrgOssPdfreporterEngineJasperReportsContext:[self getJasperReportsContext] withOrgOssPdfreporterUsesOrgW3cDomDocument:document withNSString:xPath];
    }
    else {
      JavaIoInputStream *xmlInputStream = (JavaIoInputStream *) [self getParameterValueWithNSString:[OrgOssPdfreporterEngineQueryJRXPathQueryExecuterFactory XML_INPUT_STREAM]];
      if (xmlInputStream != nil) {
        datasource = [[OrgOssPdfreporterEngineDataJRXmlDataSource alloc] initWithOrgOssPdfreporterEngineJasperReportsContext:[self getJasperReportsContext] withJavaIoInputStream:xmlInputStream withNSString:xPath];
      }
      else {
        JavaIoFile *xmlFile = (JavaIoFile *) [self getParameterValueWithNSString:[OrgOssPdfreporterEngineQueryJRXPathQueryExecuterFactory XML_FILE]];
        if (xmlFile != nil) {
          datasource = [[OrgOssPdfreporterEngineDataJRXmlDataSource alloc] initWithOrgOssPdfreporterEngineJasperReportsContext:[self getJasperReportsContext] withJavaIoFile:xmlFile withNSString:xPath];
        }
        else {
          NSString *xmlSource = [self getStringParameterOrPropertyWithNSString:[OrgOssPdfreporterEngineQueryJRXPathQueryExecuterFactory XML_SOURCE]];
          if (xmlSource != nil) {
            datasource = [[OrgOssPdfreporterEngineDataJRXmlDataSource alloc] initWithOrgOssPdfreporterEngineJasperReportsContext:[self getJasperReportsContext] withNSString:xmlSource withNSString:xPath];
          }
          else {
          }
        }
      }
    }
    if (datasource != nil) {
      [datasource setLocaleWithJavaUtilLocale:(JavaUtilLocale *) [self getParameterValueWithNSString:[OrgOssPdfreporterEngineQueryJRXPathQueryExecuterFactory XML_LOCALE] withBOOL:YES]];
      [datasource setDatePatternWithNSString:[self getStringParameterWithNSString:[OrgOssPdfreporterEngineQueryJRXPathQueryExecuterFactory XML_DATE_PATTERN] withNSString:[OrgOssPdfreporterEngineQueryJRXPathQueryExecuterFactory PROPERTY_XML_DATE_PATTERN]]];
      [datasource setNumberPatternWithNSString:[self getStringParameterWithNSString:[OrgOssPdfreporterEngineQueryJRXPathQueryExecuterFactory XML_NUMBER_PATTERN] withNSString:[OrgOssPdfreporterEngineQueryJRXPathQueryExecuterFactory PROPERTY_XML_NUMBER_PATTERN]]];
      [datasource setTimeZoneWithJavaUtilTimeZone:(JavaUtilTimeZone *) [self getParameterValueWithNSString:[OrgOssPdfreporterEngineQueryJRXPathQueryExecuterFactory XML_TIME_ZONE] withBOOL:YES]];
    }
  }
  return datasource;
}

- (void)close {
  if (datasource_ != nil) {
    [datasource_ close];
  }
}

- (BOOL)cancelQuery {
  return NO;
}

- (void)copyAllPropertiesTo:(id)copy {
  [super copyAllPropertiesTo:copy];
  OrgOssPdfreporterEngineQueryJRXPathQueryExecuter *typedCopy = (OrgOssPdfreporterEngineQueryJRXPathQueryExecuter *) copy;
  typedCopy.datasource = datasource_;
}

@end
