//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: pdfreporter-core/src/org/oss/pdfreporter/engine/query/DefaultQueryExecuterFactoryBundle.java
//
//  Created by kendra on 9/27/13.
//

#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "java/util/ArrayList.h"
#include "java/util/Iterator.h"
#include "java/util/List.h"
#include "org/oss/pdfreporter/engine/DefaultJasperReportsContext.h"
#include "org/oss/pdfreporter/engine/JRPropertiesUtil.h"
#include "org/oss/pdfreporter/engine/query/DefaultQueryExecuterFactoryBundle.h"
#include "org/oss/pdfreporter/engine/query/JRQueryExecuterFactory.h"
#include "org/oss/pdfreporter/engine/query/QueryExecuterFactory.h"
#include "org/oss/pdfreporter/engine/util/JRQueryExecuterUtils.h"
#include "org/oss/pdfreporter/engine/util/JRSingletonCache.h"

@implementation OrgOssPdfreporterEngineQueryDefaultQueryExecuterFactoryBundle

static OrgOssPdfreporterEngineUtilJRSingletonCache * OrgOssPdfreporterEngineQueryDefaultQueryExecuterFactoryBundle_cache_;
static OrgOssPdfreporterEngineQueryDefaultQueryExecuterFactoryBundle * OrgOssPdfreporterEngineQueryDefaultQueryExecuterFactoryBundle_INSTANCE_;

+ (OrgOssPdfreporterEngineUtilJRSingletonCache *)cache {
  return OrgOssPdfreporterEngineQueryDefaultQueryExecuterFactoryBundle_cache_;
}

+ (OrgOssPdfreporterEngineQueryDefaultQueryExecuterFactoryBundle *)INSTANCE {
  return OrgOssPdfreporterEngineQueryDefaultQueryExecuterFactoryBundle_INSTANCE_;
}

- (id)init {
  return [super init];
}

+ (OrgOssPdfreporterEngineQueryDefaultQueryExecuterFactoryBundle *)getInstance {
  return OrgOssPdfreporterEngineQueryDefaultQueryExecuterFactoryBundle_INSTANCE_;
}

- (IOSObjectArray *)getLanguages {
  id<JavaUtilList> languages = [[JavaUtilArrayList alloc] init];
  id<JavaUtilList> properties = [((OrgOssPdfreporterEngineJRPropertiesUtil *) nil_chk([OrgOssPdfreporterEngineJRPropertiesUtil getInstanceWithOrgOssPdfreporterEngineJasperReportsContext:[OrgOssPdfreporterEngineDefaultJasperReportsContext getInstance]])) getPropertiesWithNSString:[OrgOssPdfreporterEngineQueryQueryExecuterFactory QUERY_EXECUTER_FACTORY_PREFIX]];
  for (id<JavaUtilIterator> it = [((id<JavaUtilList>) nil_chk(properties)) iterator]; [((id<JavaUtilIterator>) nil_chk(it)) hasNext]; ) {
    OrgOssPdfreporterEngineJRPropertiesUtil_PropertySuffix *property = [((id<JavaUtilIterator>) nil_chk(it)) next];
    [((id<JavaUtilList>) nil_chk(languages)) addWithId:[((OrgOssPdfreporterEngineJRPropertiesUtil_PropertySuffix *) nil_chk(property)) getSuffix]];
  }
  return [((id<JavaUtilList>) nil_chk(languages)) toArrayWithNSObjectArray:[IOSObjectArray arrayWithLength:[((id<JavaUtilList>) nil_chk(languages)) size] type:[IOSClass classWithClass:[NSString class]]]];
}

- (id<OrgOssPdfreporterEngineQueryQueryExecuterFactory>)getQueryExecuterFactoryWithNSString:(NSString *)language {
  NSString *factoryClassName = [((OrgOssPdfreporterEngineJRPropertiesUtil *) nil_chk([OrgOssPdfreporterEngineJRPropertiesUtil getInstanceWithOrgOssPdfreporterEngineJasperReportsContext:[OrgOssPdfreporterEngineDefaultJasperReportsContext getInstance]])) getPropertyWithNSString:[NSString stringWithFormat:@"net.sf.jasperreports.query.executer.factory.%@", language]];
  if (factoryClassName == nil) {
    return nil;
  }
  id<OrgOssPdfreporterEngineQueryJRQueryExecuterFactory> factory = [((OrgOssPdfreporterEngineUtilJRSingletonCache *) nil_chk(OrgOssPdfreporterEngineQueryDefaultQueryExecuterFactoryBundle_cache_)) getCachedInstanceWithNSString:factoryClassName];
  if ([(id) factory conformsToProtocol: @protocol(OrgOssPdfreporterEngineQueryQueryExecuterFactory)]) {
    return (id<OrgOssPdfreporterEngineQueryQueryExecuterFactory>) factory;
  }
  return [[OrgOssPdfreporterEngineUtilJRQueryExecuterUtils_WrappingQueryExecuterFactory alloc] initWithOrgOssPdfreporterEngineQueryJRQueryExecuterFactory:factory];
}

+ (void)initialize {
  if (self == [OrgOssPdfreporterEngineQueryDefaultQueryExecuterFactoryBundle class]) {
    OrgOssPdfreporterEngineQueryDefaultQueryExecuterFactoryBundle_cache_ = [[OrgOssPdfreporterEngineUtilJRSingletonCache alloc] initWithIOSClass:[IOSClass classWithProtocol:@protocol(OrgOssPdfreporterEngineQueryJRQueryExecuterFactory)]];
    OrgOssPdfreporterEngineQueryDefaultQueryExecuterFactoryBundle_INSTANCE_ = [[OrgOssPdfreporterEngineQueryDefaultQueryExecuterFactoryBundle alloc] init];
  }
}

@end
