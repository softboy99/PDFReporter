//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: pdfreporter-core/src/org/oss/pdfreporter/engine/query/JRJdbcQueryExecuter.java
//
//  Created by kendra on 9/27/13.
//

#include "IOSClass.h"
#include "java/io/IOException.h"
#include "java/lang/Boolean.h"
#include "java/lang/Byte.h"
#include "java/lang/Double.h"
#include "java/lang/Exception.h"
#include "java/lang/Float.h"
#include "java/lang/Integer.h"
#include "java/lang/Long.h"
#include "java/lang/Short.h"
#include "java/lang/Throwable.h"
#include "java/lang/reflect/Array.h"
#include "java/math/BigDecimal.h"
#include "java/util/Calendar.h"
#include "java/util/Collection.h"
#include "java/util/Iterator.h"
#include "java/util/Map.h"
#include "java/util/TimeZone.h"
#include "java/util/logging/Level.h"
#include "java/util/logging/Logger.h"
#include "org/oss/pdfreporter/engine/DefaultJasperReportsContext.h"
#include "org/oss/pdfreporter/engine/JRDataSource.h"
#include "org/oss/pdfreporter/engine/JRDataset.h"
#include "org/oss/pdfreporter/engine/JRException.h"
#include "org/oss/pdfreporter/engine/JRParameter.h"
#include "org/oss/pdfreporter/engine/JRPropertiesHolder.h"
#include "org/oss/pdfreporter/engine/JRPropertiesMap.h"
#include "org/oss/pdfreporter/engine/JRPropertiesUtil.h"
#include "org/oss/pdfreporter/engine/JRResultSetDataSource.h"
#include "org/oss/pdfreporter/engine/JRRuntimeException.h"
#include "org/oss/pdfreporter/engine/JRValueParameter.h"
#include "org/oss/pdfreporter/engine/JasperReportsContext.h"
#include "org/oss/pdfreporter/engine/query/JRAbstractQueryExecuter.h"
#include "org/oss/pdfreporter/engine/query/JRJdbcQueryExecuter.h"
#include "org/oss/pdfreporter/engine/query/JRJdbcQueryExecuterFactory.h"
#include "org/oss/pdfreporter/sql/IConnection.h"
#include "org/oss/pdfreporter/sql/IDate.h"
#include "org/oss/pdfreporter/sql/IPreparedStatement.h"
#include "org/oss/pdfreporter/sql/IResultSet.h"
#include "org/oss/pdfreporter/sql/ITime.h"
#include "org/oss/pdfreporter/sql/ITimestamp.h"
#include "org/oss/pdfreporter/sql/SQLException.h"
#include "org/oss/pdfreporter/sql/SqlType.h"

@implementation OrgOssPdfreporterEngineQueryJRJdbcQueryExecuter

static JavaUtilLoggingLogger * OrgOssPdfreporterEngineQueryJRJdbcQueryExecuter_logger_;
static NSString * OrgOssPdfreporterEngineQueryJRJdbcQueryExecuter_CANONICAL_LANGUAGE_ = @"SQL";
static NSString * OrgOssPdfreporterEngineQueryJRJdbcQueryExecuter_CLAUSE_ID_IN_ = @"IN";
static NSString * OrgOssPdfreporterEngineQueryJRJdbcQueryExecuter_CLAUSE_ID_NOTIN_ = @"NOTIN";
static NSString * OrgOssPdfreporterEngineQueryJRJdbcQueryExecuter_CLAUSE_ID_EQUAL_ = @"EQUAL";
static NSString * OrgOssPdfreporterEngineQueryJRJdbcQueryExecuter_CLAUSE_ID_NOTEQUAL_ = @"NOTEQUAL";
static NSString * OrgOssPdfreporterEngineQueryJRJdbcQueryExecuter_CLAUSE_ID_LESS_ = @"LESS";
static NSString * OrgOssPdfreporterEngineQueryJRJdbcQueryExecuter_CLAUSE_ID_GREATER_ = @"GREATER";
static NSString * OrgOssPdfreporterEngineQueryJRJdbcQueryExecuter_CLAUSE_ID_LESS_OR_EQUAL_ = @"LESS]";
static NSString * OrgOssPdfreporterEngineQueryJRJdbcQueryExecuter_CLAUSE_ID_GREATER_OR_EQUAL_ = @"[GREATER";
static NSString * OrgOssPdfreporterEngineQueryJRJdbcQueryExecuter_CLAUSE_ID_BETWEEN_ = @"BETWEEN";
static NSString * OrgOssPdfreporterEngineQueryJRJdbcQueryExecuter_CLAUSE_ID_BETWEEN_CLOSED_ = @"[BETWEEN]";
static NSString * OrgOssPdfreporterEngineQueryJRJdbcQueryExecuter_CLAUSE_ID_BETWEEN_LEFT_CLOSED_ = @"[BETWEEN";
static NSString * OrgOssPdfreporterEngineQueryJRJdbcQueryExecuter_CLAUSE_ID_BETWEEN_RIGHT_CLOSED_ = @"BETWEEN]";
static NSString * OrgOssPdfreporterEngineQueryJRJdbcQueryExecuter_TYPE_FORWARD_ONLY_ = @"forwardOnly";
static NSString * OrgOssPdfreporterEngineQueryJRJdbcQueryExecuter_TYPE_SCROLL_INSENSITIVE_ = @"scrollInsensitive";
static NSString * OrgOssPdfreporterEngineQueryJRJdbcQueryExecuter_TYPE_SCROLL_SENSITIVE_ = @"scrollSensitive";
static NSString * OrgOssPdfreporterEngineQueryJRJdbcQueryExecuter_CONCUR_READ_ONLY_ = @"readOnly";
static NSString * OrgOssPdfreporterEngineQueryJRJdbcQueryExecuter_CONCUR_UPDATABLE_ = @"updatable";
static NSString * OrgOssPdfreporterEngineQueryJRJdbcQueryExecuter_HOLD_CURSORS_OVER_COMMIT_ = @"hold";
static NSString * OrgOssPdfreporterEngineQueryJRJdbcQueryExecuter_CLOSE_CURSORS_AT_COMMIT_ = @"close";
static NSString * OrgOssPdfreporterEngineQueryJRJdbcQueryExecuter_CACHED_ROWSET_CLASS_ = @"com.sun.rowset.CachedRowSetImpl";

@synthesize connection = connection_;
@synthesize statement = statement_;
@synthesize resultSet = resultSet_;
@synthesize isCachedRowSet = isCachedRowSet_;
@synthesize timeZone = timeZone_;
@synthesize timeZoneOverride = timeZoneOverride_;

+ (JavaUtilLoggingLogger *)logger {
  return OrgOssPdfreporterEngineQueryJRJdbcQueryExecuter_logger_;
}

+ (NSString *)CANONICAL_LANGUAGE {
  return OrgOssPdfreporterEngineQueryJRJdbcQueryExecuter_CANONICAL_LANGUAGE_;
}

+ (NSString *)CLAUSE_ID_IN {
  return OrgOssPdfreporterEngineQueryJRJdbcQueryExecuter_CLAUSE_ID_IN_;
}

+ (NSString *)CLAUSE_ID_NOTIN {
  return OrgOssPdfreporterEngineQueryJRJdbcQueryExecuter_CLAUSE_ID_NOTIN_;
}

+ (NSString *)CLAUSE_ID_EQUAL {
  return OrgOssPdfreporterEngineQueryJRJdbcQueryExecuter_CLAUSE_ID_EQUAL_;
}

+ (NSString *)CLAUSE_ID_NOTEQUAL {
  return OrgOssPdfreporterEngineQueryJRJdbcQueryExecuter_CLAUSE_ID_NOTEQUAL_;
}

+ (NSString *)CLAUSE_ID_LESS {
  return OrgOssPdfreporterEngineQueryJRJdbcQueryExecuter_CLAUSE_ID_LESS_;
}

+ (NSString *)CLAUSE_ID_GREATER {
  return OrgOssPdfreporterEngineQueryJRJdbcQueryExecuter_CLAUSE_ID_GREATER_;
}

+ (NSString *)CLAUSE_ID_LESS_OR_EQUAL {
  return OrgOssPdfreporterEngineQueryJRJdbcQueryExecuter_CLAUSE_ID_LESS_OR_EQUAL_;
}

+ (NSString *)CLAUSE_ID_GREATER_OR_EQUAL {
  return OrgOssPdfreporterEngineQueryJRJdbcQueryExecuter_CLAUSE_ID_GREATER_OR_EQUAL_;
}

+ (NSString *)CLAUSE_ID_BETWEEN {
  return OrgOssPdfreporterEngineQueryJRJdbcQueryExecuter_CLAUSE_ID_BETWEEN_;
}

+ (NSString *)CLAUSE_ID_BETWEEN_CLOSED {
  return OrgOssPdfreporterEngineQueryJRJdbcQueryExecuter_CLAUSE_ID_BETWEEN_CLOSED_;
}

+ (NSString *)CLAUSE_ID_BETWEEN_LEFT_CLOSED {
  return OrgOssPdfreporterEngineQueryJRJdbcQueryExecuter_CLAUSE_ID_BETWEEN_LEFT_CLOSED_;
}

+ (NSString *)CLAUSE_ID_BETWEEN_RIGHT_CLOSED {
  return OrgOssPdfreporterEngineQueryJRJdbcQueryExecuter_CLAUSE_ID_BETWEEN_RIGHT_CLOSED_;
}

+ (NSString *)TYPE_FORWARD_ONLY {
  return OrgOssPdfreporterEngineQueryJRJdbcQueryExecuter_TYPE_FORWARD_ONLY_;
}

+ (NSString *)TYPE_SCROLL_INSENSITIVE {
  return OrgOssPdfreporterEngineQueryJRJdbcQueryExecuter_TYPE_SCROLL_INSENSITIVE_;
}

+ (NSString *)TYPE_SCROLL_SENSITIVE {
  return OrgOssPdfreporterEngineQueryJRJdbcQueryExecuter_TYPE_SCROLL_SENSITIVE_;
}

+ (NSString *)CONCUR_READ_ONLY {
  return OrgOssPdfreporterEngineQueryJRJdbcQueryExecuter_CONCUR_READ_ONLY_;
}

+ (NSString *)CONCUR_UPDATABLE {
  return OrgOssPdfreporterEngineQueryJRJdbcQueryExecuter_CONCUR_UPDATABLE_;
}

+ (NSString *)HOLD_CURSORS_OVER_COMMIT {
  return OrgOssPdfreporterEngineQueryJRJdbcQueryExecuter_HOLD_CURSORS_OVER_COMMIT_;
}

+ (NSString *)CLOSE_CURSORS_AT_COMMIT {
  return OrgOssPdfreporterEngineQueryJRJdbcQueryExecuter_CLOSE_CURSORS_AT_COMMIT_;
}

+ (NSString *)CACHED_ROWSET_CLASS {
  return OrgOssPdfreporterEngineQueryJRJdbcQueryExecuter_CACHED_ROWSET_CLASS_;
}

- (id)initOrgOssPdfreporterEngineQueryJRJdbcQueryExecuterWithOrgOssPdfreporterEngineJasperReportsContext:(id<OrgOssPdfreporterEngineJasperReportsContext>)jasperReportsContext
                                                                    withOrgOssPdfreporterEngineJRDataset:(id<OrgOssPdfreporterEngineJRDataset>)dataset
                                                                                         withJavaUtilMap:(id<JavaUtilMap>)parameters {
  if ((self = [super initWithOrgOssPdfreporterEngineJasperReportsContext:jasperReportsContext withOrgOssPdfreporterEngineJRDataset:dataset withJavaUtilMap:parameters])) {
    connection_ = (id<OrgOssPdfreporterSqlIConnection>) [self getParameterValueWithNSString:[OrgOssPdfreporterEngineJRParameter REPORT_CONNECTION]];
    if (connection_ == nil) {
      if ([((JavaUtilLoggingLogger *) nil_chk(OrgOssPdfreporterEngineQueryJRJdbcQueryExecuter_logger_)) isLoggableWithJavaUtilLoggingLevel:[JavaUtilLoggingLevel WARNING]]) {
        [((JavaUtilLoggingLogger *) nil_chk(OrgOssPdfreporterEngineQueryJRJdbcQueryExecuter_logger_)) warningWithNSString:@"The supplied java.sql.Connection object is null."];
      }
    }
    isCachedRowSet_ = [self getBooleanParameterOrPropertyWithNSString:[OrgOssPdfreporterEngineQueryJRJdbcQueryExecuterFactory PROPERTY_CACHED_ROWSET] withBOOL:NO];
    [self setTimeZone];
    [self registerFunctions];
    [self parseQuery];
  }
  return self;
}

- (id)initWithOrgOssPdfreporterEngineJasperReportsContext:(id<OrgOssPdfreporterEngineJasperReportsContext>)jasperReportsContext
                     withOrgOssPdfreporterEngineJRDataset:(id<OrgOssPdfreporterEngineJRDataset>)dataset
                                          withJavaUtilMap:(id<JavaUtilMap>)parameters {
  return [self initOrgOssPdfreporterEngineQueryJRJdbcQueryExecuterWithOrgOssPdfreporterEngineJasperReportsContext:jasperReportsContext withOrgOssPdfreporterEngineJRDataset:dataset withJavaUtilMap:parameters];
}

- (id)initWithOrgOssPdfreporterEngineJRDataset:(id<OrgOssPdfreporterEngineJRDataset>)dataset
                               withJavaUtilMap:(id<JavaUtilMap>)parameters {
  return [self initOrgOssPdfreporterEngineQueryJRJdbcQueryExecuterWithOrgOssPdfreporterEngineJasperReportsContext:[OrgOssPdfreporterEngineDefaultJasperReportsContext getInstance] withOrgOssPdfreporterEngineJRDataset:dataset withJavaUtilMap:parameters];
}

- (void)registerFunctions {
}

- (NSString *)getCanonicalQueryLanguage {
  return OrgOssPdfreporterEngineQueryJRJdbcQueryExecuter_CANONICAL_LANGUAGE_;
}

- (void)setTimeZone {
  NSString *timezoneId = (NSString *) [self getParameterValueWithNSString:[OrgOssPdfreporterEngineQueryJRJdbcQueryExecuterFactory PROPERTY_TIME_ZONE] withBOOL:YES];
  if (timezoneId != nil) {
    timeZoneOverride_ = YES;
  }
  else {
    timezoneId = [((OrgOssPdfreporterEngineJRPropertiesUtil *) nil_chk([self getPropertiesUtil])) getPropertyWithOrgOssPdfreporterEngineJRPropertiesHolder:dataset_ withNSString:[OrgOssPdfreporterEngineQueryJRJdbcQueryExecuterFactory PROPERTY_TIME_ZONE]];
  }
  timeZone_ = timezoneId == nil || [((NSString *) nil_chk(timezoneId)) length] == 0 ? nil : [JavaUtilTimeZone getTimeZoneWithNSString:timezoneId];
}

- (NSString *)getParameterReplacementWithNSString:(NSString *)parameterName {
  return @"?";
}

- (id<OrgOssPdfreporterEngineJRDataSource>)createDatasource {
  OrgOssPdfreporterEngineJRResultSetDataSource *dataSource = nil;
  [self createStatement];
  if (statement_ != nil) {
    @try {
      resultSet_ = [statement_ executeQuery];
      dataSource = [[OrgOssPdfreporterEngineJRResultSetDataSource alloc] initWithOrgOssPdfreporterEngineJasperReportsContext:[self getJasperReportsContext] withOrgOssPdfreporterSqlIResultSet:resultSet_];
      [((OrgOssPdfreporterEngineJRResultSetDataSource *) nil_chk(dataSource)) setTimeZoneWithJavaUtilTimeZone:timeZone_ withBOOL:timeZoneOverride_];
    }
    @catch (OrgOssPdfreporterSqlSQLException *e) {
      @throw [[OrgOssPdfreporterEngineJRException alloc] initWithNSString:[NSString stringWithFormat:@"Error executing SQL statement for : %@", [((id<OrgOssPdfreporterEngineJRDataset>) nil_chk(dataset_)) getName]] withJavaLangThrowable:e];
    }
  }
  return dataSource;
}

- (void)createStatement {
  NSString *queryString = [self getQueryString];
  if ([((JavaUtilLoggingLogger *) nil_chk(OrgOssPdfreporterEngineQueryJRJdbcQueryExecuter_logger_)) isLoggableWithJavaUtilLoggingLevel:[JavaUtilLoggingLevel FINE]]) {
    [((JavaUtilLoggingLogger *) nil_chk(OrgOssPdfreporterEngineQueryJRJdbcQueryExecuter_logger_)) fineWithNSString:[NSString stringWithFormat:@"SQL query string: %@", queryString]];
  }
  if (connection_ != nil && queryString != nil && [((NSString *) nil_chk([((NSString *) nil_chk(queryString)) trim])) length] > 0) {
    @try {
      statement_ = [((id<OrgOssPdfreporterSqlIConnection>) nil_chk(connection_)) prepareStatementWithNSString:queryString];
      [self visitQueryParametersWithOrgOssPdfreporterEngineQueryJRAbstractQueryExecuter_QueryParameterVisitor:[[OrgOssPdfreporterEngineQueryJRJdbcQueryExecuter_$1 alloc] initWithOrgOssPdfreporterEngineQueryJRJdbcQueryExecuter:self]];
    }
    @catch (OrgOssPdfreporterEngineQueryJRAbstractQueryExecuter_VisitExceptionWrapper *e) {
      @throw [[OrgOssPdfreporterEngineJRException alloc] initWithNSString:[NSString stringWithFormat:@"%@%@\n\n", @"Error preparing statement for executing the report query : \n\n", queryString] withJavaLangThrowable:[((OrgOssPdfreporterEngineQueryJRAbstractQueryExecuter_VisitExceptionWrapper *) nil_chk(e)) getCause]];
    }
    @catch (OrgOssPdfreporterSqlSQLException *e) {
      @throw [[OrgOssPdfreporterEngineJRException alloc] initWithNSString:[NSString stringWithFormat:@"%@%@\n\n", @"Error preparing statement for executing the report query : \n\n", queryString] withJavaLangThrowable:e];
    }
  }
}

- (id<OrgOssPdfreporterSqlIResultSet>)getResultSet {
  return resultSet_;
}

- (void)setStatementParameterWithInt:(int)parameterIndex
                        withNSString:(NSString *)parameterName {
  id<OrgOssPdfreporterEngineJRValueParameter> parameter = [self getValueParameterWithNSString:parameterName];
  IOSClass *clazz = [((id<OrgOssPdfreporterEngineJRValueParameter>) nil_chk(parameter)) getValueClass];
  id parameterValue = [((id<OrgOssPdfreporterEngineJRValueParameter>) nil_chk(parameter)) getValue];
  if ([((JavaUtilLoggingLogger *) nil_chk(OrgOssPdfreporterEngineQueryJRJdbcQueryExecuter_logger_)) isLoggableWithJavaUtilLoggingLevel:[JavaUtilLoggingLevel FINE]]) {
    [((JavaUtilLoggingLogger *) nil_chk(OrgOssPdfreporterEngineQueryJRJdbcQueryExecuter_logger_)) fineWithNSString:[NSString stringWithFormat:@"Parameter #%d (%@ of type %@): %@", parameterIndex, parameterName, [((IOSClass *) nil_chk(clazz)) getName], parameterValue]];
  }
  [self setStatementParameterWithInt:parameterIndex withIOSClass:clazz withId:parameterValue];
}

- (int)setStatementMultiParametersWithInt:(int)parameterIndex
                             withNSString:(NSString *)parameterName
                                 withBOOL:(BOOL)ignoreNulls {
  id<OrgOssPdfreporterEngineJRValueParameter> parameter = [self getValueParameterWithNSString:parameterName];
  id paramValue = [((id<OrgOssPdfreporterEngineJRValueParameter>) nil_chk(parameter)) getValue];
  int count;
  int index = 0;
  if ([[nil_chk(paramValue) getClass] isArray]) {
    int arrayCount = [JavaLangReflectArray getLengthWithId:paramValue];
    for (count = 0; count < arrayCount; ++count) {
      id value = [JavaLangReflectArray getWithId:paramValue withInt:count];
      if (!ignoreNulls || value != nil) {
        [self setStatementMultiParameterWithInt:parameterIndex + index withNSString:parameterName withInt:count withId:value withOrgOssPdfreporterEngineJRPropertiesHolder:parameter];
        ++index;
      }
    }
  }
  else if ([paramValue conformsToProtocol: @protocol(JavaUtilCollection)]) {
    id<JavaUtilCollection> values = (id<JavaUtilCollection>) paramValue;
    count = 0;
    for (id<JavaUtilIterator> it = [((id<JavaUtilCollection>) nil_chk(values)) iterator]; [((id<JavaUtilIterator>) nil_chk(it)) hasNext]; ++count) {
      id value = [((id<JavaUtilIterator>) nil_chk(it)) next];
      if (!ignoreNulls || value != nil) {
        [self setStatementMultiParameterWithInt:parameterIndex + index withNSString:parameterName withInt:count withId:value withOrgOssPdfreporterEngineJRPropertiesHolder:parameter];
        ++index;
      }
    }
  }
  else {
    @throw [[OrgOssPdfreporterEngineJRRuntimeException alloc] initWithNSString:@"Multi parameter value is not array nor collection."];
  }
  return index;
}

- (void)setStatementMultiParameterWithInt:(int)parameterIndex
                             withNSString:(NSString *)parameterName
                                  withInt:(int)valueIndex
                                   withId:(id)value
withOrgOssPdfreporterEngineJRPropertiesHolder:(id<OrgOssPdfreporterEngineJRPropertiesHolder>)properties {
  if (value == nil) {
    @throw [[OrgOssPdfreporterEngineJRRuntimeException alloc] initWithNSString:@"Multi parameters cannot contain null values."];
  }
  IOSClass *type = [nil_chk(value) getClass];
  if ([((JavaUtilLoggingLogger *) nil_chk(OrgOssPdfreporterEngineQueryJRJdbcQueryExecuter_logger_)) isLoggableWithJavaUtilLoggingLevel:[JavaUtilLoggingLevel FINE]]) {
    [((JavaUtilLoggingLogger *) nil_chk(OrgOssPdfreporterEngineQueryJRJdbcQueryExecuter_logger_)) fineWithNSString:[NSString stringWithFormat:@"Parameter #%d (%@[%d] of type %@): %@", parameterIndex, parameterName, valueIndex, [((IOSClass *) nil_chk(type)) getName], value]];
  }
  [self setStatementParameterWithInt:parameterIndex withIOSClass:type withId:value];
}

- (void)setStatementParameterWithInt:(int)parameterIndex
                        withIOSClass:(IOSClass *)parameterType
                              withId:(id)parameterValue {
  if ([[IOSClass classWithClass:[JavaLangBoolean class]] isAssignableFrom:parameterType]) {
    if (parameterValue == nil) {
      [((id<OrgOssPdfreporterSqlIPreparedStatement>) nil_chk(statement_)) setNullWithInt:parameterIndex withOrgOssPdfreporterSqlSqlTypeEnum:[OrgOssPdfreporterSqlSqlTypeEnum CHAR]];
    }
    else {
      [((id<OrgOssPdfreporterSqlIPreparedStatement>) nil_chk(statement_)) setBooleanWithInt:parameterIndex withBOOL:[((JavaLangBoolean *) parameterValue) booleanValue]];
    }
  }
  else if ([[IOSClass classWithClass:[JavaLangByte class]] isAssignableFrom:parameterType]) {
    if (parameterValue == nil) {
      [((id<OrgOssPdfreporterSqlIPreparedStatement>) nil_chk(statement_)) setNullWithInt:parameterIndex withOrgOssPdfreporterSqlSqlTypeEnum:[OrgOssPdfreporterSqlSqlTypeEnum TINYINT]];
    }
    else {
      [((id<OrgOssPdfreporterSqlIPreparedStatement>) nil_chk(statement_)) setByteWithInt:parameterIndex withChar:[((JavaLangByte *) parameterValue) byteValue]];
    }
  }
  else if ([[IOSClass classWithClass:[JavaLangDouble class]] isAssignableFrom:parameterType]) {
    if (parameterValue == nil) {
      [((id<OrgOssPdfreporterSqlIPreparedStatement>) nil_chk(statement_)) setNullWithInt:parameterIndex withOrgOssPdfreporterSqlSqlTypeEnum:[OrgOssPdfreporterSqlSqlTypeEnum DOUBLE]];
    }
    else {
      [((id<OrgOssPdfreporterSqlIPreparedStatement>) nil_chk(statement_)) setDoubleWithInt:parameterIndex withDouble:[((JavaLangDouble *) parameterValue) doubleValue]];
    }
  }
  else if ([[IOSClass classWithClass:[JavaLangFloat class]] isAssignableFrom:parameterType]) {
    if (parameterValue == nil) {
      [((id<OrgOssPdfreporterSqlIPreparedStatement>) nil_chk(statement_)) setNullWithInt:parameterIndex withOrgOssPdfreporterSqlSqlTypeEnum:[OrgOssPdfreporterSqlSqlTypeEnum FLOAT]];
    }
    else {
      [((id<OrgOssPdfreporterSqlIPreparedStatement>) nil_chk(statement_)) setFloatWithInt:parameterIndex withFloat:[((JavaLangFloat *) parameterValue) floatValue]];
    }
  }
  else if ([[IOSClass classWithClass:[JavaLangInteger class]] isAssignableFrom:parameterType]) {
    if (parameterValue == nil) {
      [((id<OrgOssPdfreporterSqlIPreparedStatement>) nil_chk(statement_)) setNullWithInt:parameterIndex withOrgOssPdfreporterSqlSqlTypeEnum:[OrgOssPdfreporterSqlSqlTypeEnum INTEGER]];
    }
    else {
      [((id<OrgOssPdfreporterSqlIPreparedStatement>) nil_chk(statement_)) setIntWithInt:parameterIndex withInt:[((JavaLangInteger *) parameterValue) intValue]];
    }
  }
  else if ([[IOSClass classWithClass:[JavaLangLong class]] isAssignableFrom:parameterType]) {
    if (parameterValue == nil) {
      [((id<OrgOssPdfreporterSqlIPreparedStatement>) nil_chk(statement_)) setNullWithInt:parameterIndex withOrgOssPdfreporterSqlSqlTypeEnum:[OrgOssPdfreporterSqlSqlTypeEnum BIGINT]];
    }
    else {
      [((id<OrgOssPdfreporterSqlIPreparedStatement>) nil_chk(statement_)) setLongWithInt:parameterIndex withLongInt:[((JavaLangLong *) parameterValue) longLongValue]];
    }
  }
  else if ([[IOSClass classWithClass:[JavaLangShort class]] isAssignableFrom:parameterType]) {
    if (parameterValue == nil) {
      [((id<OrgOssPdfreporterSqlIPreparedStatement>) nil_chk(statement_)) setNullWithInt:parameterIndex withOrgOssPdfreporterSqlSqlTypeEnum:[OrgOssPdfreporterSqlSqlTypeEnum SMALLINT]];
    }
    else {
      [((id<OrgOssPdfreporterSqlIPreparedStatement>) nil_chk(statement_)) setShortWithInt:parameterIndex withShortInt:[((JavaLangShort *) parameterValue) shortValue]];
    }
  }
  else if ([[IOSClass classWithClass:[JavaMathBigDecimal class]] isAssignableFrom:parameterType]) {
    if (parameterValue == nil) {
      [((id<OrgOssPdfreporterSqlIPreparedStatement>) nil_chk(statement_)) setNullWithInt:parameterIndex withOrgOssPdfreporterSqlSqlTypeEnum:[OrgOssPdfreporterSqlSqlTypeEnum DECIMAL]];
    }
    else {
      [((id<OrgOssPdfreporterSqlIPreparedStatement>) nil_chk(statement_)) setDecimalWithInt:parameterIndex withJavaMathBigDecimal:(JavaMathBigDecimal *) parameterValue];
    }
  }
  else if ([[IOSClass classWithClass:[NSString class]] isAssignableFrom:parameterType]) {
    if (parameterValue == nil) {
      [((id<OrgOssPdfreporterSqlIPreparedStatement>) nil_chk(statement_)) setNullWithInt:parameterIndex withOrgOssPdfreporterSqlSqlTypeEnum:[OrgOssPdfreporterSqlSqlTypeEnum VARCHAR]];
    }
    else {
      [((id<OrgOssPdfreporterSqlIPreparedStatement>) nil_chk(statement_)) setStringWithInt:parameterIndex withNSString:[parameterValue description]];
    }
  }
  else if ([[IOSClass classWithProtocol:@protocol(OrgOssPdfreporterSqlITimestamp)] isAssignableFrom:parameterType]) {
    [((id<OrgOssPdfreporterSqlIPreparedStatement>) nil_chk(statement_)) setNullWithInt:parameterIndex withOrgOssPdfreporterSqlSqlTypeEnum:[OrgOssPdfreporterSqlSqlTypeEnum TIMESTAMP]];
  }
  else if ([[IOSClass classWithProtocol:@protocol(OrgOssPdfreporterSqlITime)] isAssignableFrom:parameterType]) {
    [((id<OrgOssPdfreporterSqlIPreparedStatement>) nil_chk(statement_)) setNullWithInt:parameterIndex withOrgOssPdfreporterSqlSqlTypeEnum:[OrgOssPdfreporterSqlSqlTypeEnum TIME]];
  }
  else if ([[IOSClass classWithProtocol:@protocol(OrgOssPdfreporterSqlIDate)] isAssignableFrom:parameterType]) {
    [((id<OrgOssPdfreporterSqlIPreparedStatement>) nil_chk(statement_)) setNullWithInt:parameterIndex withOrgOssPdfreporterSqlSqlTypeEnum:[OrgOssPdfreporterSqlSqlTypeEnum DATE]];
  }
}

- (JavaUtilCalendar *)getParameterCalendarWithOrgOssPdfreporterEngineJRPropertiesHolder:(id<OrgOssPdfreporterEngineJRPropertiesHolder>)properties {
  JavaUtilTimeZone *tz;
  if (timeZoneOverride_) {
    tz = timeZone_;
  }
  else {
    if ([((id<OrgOssPdfreporterEngineJRPropertiesHolder>) nil_chk(properties)) hasProperties] && [((OrgOssPdfreporterEngineJRPropertiesMap *) nil_chk([((id<OrgOssPdfreporterEngineJRPropertiesHolder>) nil_chk(properties)) getPropertiesMap])) containsPropertyWithNSString:[OrgOssPdfreporterEngineQueryJRJdbcQueryExecuterFactory PROPERTY_TIME_ZONE]]) {
      NSString *timezoneId = [((OrgOssPdfreporterEngineJRPropertiesUtil *) nil_chk([self getPropertiesUtil])) getPropertyWithOrgOssPdfreporterEngineJRPropertiesHolder:properties withNSString:[OrgOssPdfreporterEngineQueryJRJdbcQueryExecuterFactory PROPERTY_TIME_ZONE]];
      tz = (timezoneId == nil || [((NSString *) nil_chk(timezoneId)) length] == 0) ? nil : [JavaUtilTimeZone getTimeZoneWithNSString:timezoneId];
    }
    else {
      tz = timeZone_;
    }
  }
  JavaUtilCalendar *cal = tz == nil ? nil : [JavaUtilCalendar getInstanceWithJavaUtilTimeZone:tz];
  return cal;
}

- (void)close {
  @synchronized(self) {
    {
      if (resultSet_ != nil) {
        @try {
          [resultSet_ close];
        }
        @catch (JavaIoIOException *e) {
          [((JavaUtilLoggingLogger *) nil_chk(OrgOssPdfreporterEngineQueryJRJdbcQueryExecuter_logger_)) logWithJavaUtilLoggingLevel:[JavaUtilLoggingLevel SEVERE] withNSString:@"Error while closing result set." withJavaLangThrowable:e];
        }
        @finally {
          resultSet_ = nil;
        }
      }
      if (statement_ != nil) {
        @try {
          [statement_ close];
        }
        @catch (JavaIoIOException *e) {
          [((JavaUtilLoggingLogger *) nil_chk(OrgOssPdfreporterEngineQueryJRJdbcQueryExecuter_logger_)) logWithJavaUtilLoggingLevel:[JavaUtilLoggingLevel SEVERE] withNSString:@"Error while closing statement." withJavaLangThrowable:e];
        }
        @finally {
          statement_ = nil;
        }
      }
    }
  }
}

- (BOOL)cancelQuery {
  @synchronized(self) {
    {
      if (statement_ != nil) {
        @try {
          [statement_ cancel];
          return YES;
        }
        @catch (JavaLangException *e) {
          @throw [[OrgOssPdfreporterEngineJRException alloc] initWithNSString:@"Error cancelling SQL statement" withJavaLangThrowable:e];
        }
      }
      return NO;
    }
  }
}

+ (void)initialize {
  if (self == [OrgOssPdfreporterEngineQueryJRJdbcQueryExecuter class]) {
    OrgOssPdfreporterEngineQueryJRJdbcQueryExecuter_logger_ = [JavaUtilLoggingLogger getLoggerWithNSString:[[IOSClass classWithClass:[OrgOssPdfreporterEngineQueryJRJdbcQueryExecuter class]] getName]];
  }
}

- (void)copyAllPropertiesTo:(id)copy {
  [super copyAllPropertiesTo:copy];
  OrgOssPdfreporterEngineQueryJRJdbcQueryExecuter *typedCopy = (OrgOssPdfreporterEngineQueryJRJdbcQueryExecuter *) copy;
  typedCopy.connection = connection_;
  typedCopy.statement = statement_;
  typedCopy.resultSet = resultSet_;
  typedCopy.isCachedRowSet = isCachedRowSet_;
  typedCopy.timeZone = timeZone_;
  typedCopy.timeZoneOverride = timeZoneOverride_;
}

@end
@implementation OrgOssPdfreporterEngineQueryJRJdbcQueryExecuter_$1

@synthesize this$0 = this$0_;
@synthesize paramIdx = paramIdx_;

- (void)visitWithOrgOssPdfreporterEngineQueryJRAbstractQueryExecuter_QueryParameter:(OrgOssPdfreporterEngineQueryJRAbstractQueryExecuter_QueryParameter *)queryParameter {
  @try {
    if ([((OrgOssPdfreporterEngineQueryJRAbstractQueryExecuter_QueryParameter *) nil_chk(queryParameter)) isMulti]) {
      paramIdx_ += [this$0_ setStatementMultiParametersWithInt:paramIdx_ withNSString:[((OrgOssPdfreporterEngineQueryJRAbstractQueryExecuter_QueryParameter *) nil_chk(queryParameter)) getName] withBOOL:[((OrgOssPdfreporterEngineQueryJRAbstractQueryExecuter_QueryParameter *) nil_chk(queryParameter)) isIgnoreNulls]];
    }
    else {
      [this$0_ setStatementParameterWithInt:paramIdx_ withNSString:[((OrgOssPdfreporterEngineQueryJRAbstractQueryExecuter_QueryParameter *) nil_chk(queryParameter)) getName]];
      ++paramIdx_;
    }
  }
  @catch (OrgOssPdfreporterSqlSQLException *e) {
    @throw [[OrgOssPdfreporterEngineQueryJRAbstractQueryExecuter_VisitExceptionWrapper alloc] initWithOrgOssPdfreporterEngineQueryJRAbstractQueryExecuter:this$0_ withJavaLangException:e];
  }
}

- (void)visitWithOrgOssPdfreporterEngineQueryJRAbstractQueryExecuter_ValuedQueryParameter:(OrgOssPdfreporterEngineQueryJRAbstractQueryExecuter_ValuedQueryParameter *)valuedQueryParameter {
  IOSClass *type = [((OrgOssPdfreporterEngineQueryJRAbstractQueryExecuter_ValuedQueryParameter *) nil_chk(valuedQueryParameter)) getType];
  id value = [((OrgOssPdfreporterEngineQueryJRAbstractQueryExecuter_ValuedQueryParameter *) nil_chk(valuedQueryParameter)) getValue];
  if (type == nil) {
    type = value == nil ? [IOSClass classWithClass:[NSObject class]] : [nil_chk(value) getClass];
  }
  if ([((JavaUtilLoggingLogger *) nil_chk([OrgOssPdfreporterEngineQueryJRJdbcQueryExecuter logger])) isLoggableWithJavaUtilLoggingLevel:[JavaUtilLoggingLevel FINE]]) {
    [((JavaUtilLoggingLogger *) nil_chk([OrgOssPdfreporterEngineQueryJRJdbcQueryExecuter logger])) fineWithNSString:[NSString stringWithFormat:@"Parameter #%d (of type %@): %@", paramIdx_, [((IOSClass *) nil_chk(type)) getName], value]];
  }
  @try {
    [this$0_ setStatementParameterWithInt:paramIdx_ withIOSClass:type withId:value];
    ++paramIdx_;
  }
  @catch (OrgOssPdfreporterSqlSQLException *e) {
    @throw [[OrgOssPdfreporterEngineQueryJRAbstractQueryExecuter_VisitExceptionWrapper alloc] initWithOrgOssPdfreporterEngineQueryJRAbstractQueryExecuter:this$0_ withJavaLangException:e];
  }
}

- (id)initWithOrgOssPdfreporterEngineQueryJRJdbcQueryExecuter:(OrgOssPdfreporterEngineQueryJRJdbcQueryExecuter *)outer$ {
  if ((self = [super init])) {
    this$0_ = outer$;
    paramIdx_ = 1;
  }
  return self;
}

- (void)copyAllPropertiesTo:(id)copy {
  [super copyAllPropertiesTo:copy];
  OrgOssPdfreporterEngineQueryJRJdbcQueryExecuter_$1 *typedCopy = (OrgOssPdfreporterEngineQueryJRJdbcQueryExecuter_$1 *) copy;
  typedCopy.this$0 = this$0_;
  typedCopy.paramIdx = paramIdx_;
}

@end
