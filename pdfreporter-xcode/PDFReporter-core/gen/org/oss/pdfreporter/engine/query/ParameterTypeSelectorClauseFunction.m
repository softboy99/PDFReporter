//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: pdfreporter-core/src/org/oss/pdfreporter/engine/query/ParameterTypeSelectorClauseFunction.java
//
//  Created by kendra on 9/27/13.
//

#include "IOSClass.h"
#include "IOSIntArray.h"
#include "java/util/ArrayList.h"
#include "java/util/Collection.h"
#include "java/util/Collections.h"
#include "java/util/HashMap.h"
#include "java/util/Iterator.h"
#include "java/util/List.h"
#include "java/util/Map.h"
#include "org/oss/pdfreporter/engine/JRRuntimeException.h"
#include "org/oss/pdfreporter/engine/JRValueParameter.h"
#include "org/oss/pdfreporter/engine/JasperReportsContext.h"
#include "org/oss/pdfreporter/engine/query/JRClauseFunction.h"
#include "org/oss/pdfreporter/engine/query/JRClauseTokens.h"
#include "org/oss/pdfreporter/engine/query/JRQueryClauseContext.h"
#include "org/oss/pdfreporter/engine/query/ParameterTypeSelectorClauseFunction.h"
#include "org/oss/pdfreporter/engine/query/ParameterTypesClauseFunction.h"
#include "org/oss/pdfreporter/engine/query/ParameterTypesClauseFunctionBundle.h"
#include "org/oss/pdfreporter/engine/util/Pair.h"

@implementation OrgOssPdfreporterEngineQueryParameterTypeSelectorClauseFunction

static NSString * OrgOssPdfreporterEngineQueryParameterTypeSelectorClauseFunction_CONTEXT_KEY_FUNCTION_PER_TYPES_CACHE_ = @"net.sf.jasperreports.engine.query.ParameterTypeSelectorClauseFunction.cache";

@synthesize parameterPositions = parameterPositions_;

+ (NSString *)CONTEXT_KEY_FUNCTION_PER_TYPES_CACHE {
  return OrgOssPdfreporterEngineQueryParameterTypeSelectorClauseFunction_CONTEXT_KEY_FUNCTION_PER_TYPES_CACHE_;
}

- (id)initWithIntArray:(IOSIntArray *)parameterPositions {
  if ((self = [super init])) {
    self.parameterPositions = parameterPositions;
  }
  return self;
}

- (void)applyWithOrgOssPdfreporterEngineQueryJRClauseTokens:(OrgOssPdfreporterEngineQueryJRClauseTokens *)clauseTokens
       withOrgOssPdfreporterEngineQueryJRQueryClauseContext:(id<OrgOssPdfreporterEngineQueryJRQueryClauseContext>)queryContext {
  id<JavaUtilList> parameterTypes = [[JavaUtilArrayList alloc] initWithInt:(int) [((IOSIntArray *) nil_chk(parameterPositions_)) count]];
  {
    IOSIntArray *a__ = parameterPositions_;
    int n__ = (int) [((IOSIntArray *) nil_chk(a__)) count];
    for (int i__ = 0; i__ < n__; i__++) {
      int position = [((IOSIntArray *) nil_chk(a__)) intAtIndex:i__];
      IOSClass *parameterType = [self determineParameterTypeWithOrgOssPdfreporterEngineQueryJRClauseTokens:clauseTokens withOrgOssPdfreporterEngineQueryJRQueryClauseContext:queryContext withInt:position];
      [((id<JavaUtilList>) nil_chk(parameterTypes)) addWithId:parameterType];
    }
  }
  id<OrgOssPdfreporterEngineQueryJRClauseFunction> function = [self getForParameterTypesWithOrgOssPdfreporterEngineQueryJRClauseTokens:clauseTokens withOrgOssPdfreporterEngineQueryJRQueryClauseContext:queryContext withJavaUtilList:parameterTypes];
  if (function == nil) {
    @throw [[OrgOssPdfreporterEngineJRRuntimeException alloc] initWithNSString:[NSString stringWithFormat:@"No clause function implementation found for clause %@ and parameter types %@", [((OrgOssPdfreporterEngineQueryJRClauseTokens *) nil_chk(clauseTokens)) getClauseId], parameterTypes]];
  }
  [((id<OrgOssPdfreporterEngineQueryJRClauseFunction>) nil_chk(function)) applyWithOrgOssPdfreporterEngineQueryJRClauseTokens:clauseTokens withOrgOssPdfreporterEngineQueryJRQueryClauseContext:queryContext];
}

- (IOSClass *)determineParameterTypeWithOrgOssPdfreporterEngineQueryJRClauseTokens:(OrgOssPdfreporterEngineQueryJRClauseTokens *)clauseTokens
                              withOrgOssPdfreporterEngineQueryJRQueryClauseContext:(id<OrgOssPdfreporterEngineQueryJRQueryClauseContext>)queryContext
                                                                           withInt:(int)parameterPosition {
  NSString *parameterName = [((OrgOssPdfreporterEngineQueryJRClauseTokens *) nil_chk(clauseTokens)) getTokenWithInt:parameterPosition];
  if (parameterName == nil) {
    @throw [[OrgOssPdfreporterEngineJRRuntimeException alloc] initWithNSString:[NSString stringWithFormat:@"Required token at position %d for query clause %@ not found", parameterPosition, [((OrgOssPdfreporterEngineQueryJRClauseTokens *) nil_chk(clauseTokens)) getClauseId]]];
  }
  id<OrgOssPdfreporterEngineJRValueParameter> parameter = [((id<OrgOssPdfreporterEngineQueryJRQueryClauseContext>) nil_chk(queryContext)) getValueParameterWithNSString:parameterName];
  IOSClass *parameterType;
  id parameterValue = [((id<OrgOssPdfreporterEngineJRValueParameter>) nil_chk(parameter)) getValue];
  if (parameterValue == nil) {
    parameterType = [((id<OrgOssPdfreporterEngineJRValueParameter>) nil_chk(parameter)) getValueClass];
  }
  else {
    parameterType = [parameterValue getClass];
  }
  return parameterType;
}

- (id<OrgOssPdfreporterEngineQueryJRClauseFunction>)getForParameterTypesWithOrgOssPdfreporterEngineQueryJRClauseTokens:(OrgOssPdfreporterEngineQueryJRClauseTokens *)clauseTokens
                                                                  withOrgOssPdfreporterEngineQueryJRQueryClauseContext:(id<OrgOssPdfreporterEngineQueryJRQueryClauseContext>)queryContext
                                                                                                      withJavaUtilList:(id<JavaUtilList>)parameterTypes {
  id<JavaUtilMap> cache = [self getCacheWithOrgOssPdfreporterEngineQueryJRQueryClauseContext:queryContext];
  id typesKey = [self parameterTypesFunctionCacheKeyWithOrgOssPdfreporterEngineQueryJRClauseTokens:clauseTokens withOrgOssPdfreporterEngineQueryJRQueryClauseContext:queryContext withJavaUtilList:parameterTypes];
  id<OrgOssPdfreporterEngineQueryJRClauseFunction> function = [((id<JavaUtilMap>) nil_chk(cache)) getWithId:typesKey];
  if (function == nil) {
    function = [self selectForParameterTypesWithOrgOssPdfreporterEngineQueryJRClauseTokens:clauseTokens withOrgOssPdfreporterEngineQueryJRQueryClauseContext:queryContext withJavaUtilList:parameterTypes];
    (void) [((id<JavaUtilMap>) nil_chk(cache)) putWithId:typesKey withId:function];
  }
  else {
  }
  return function;
}

- (id<JavaUtilMap>)getCacheWithOrgOssPdfreporterEngineQueryJRQueryClauseContext:(id<OrgOssPdfreporterEngineQueryJRQueryClauseContext>)queryContext {
  id<JavaUtilMap> cache = (id<JavaUtilMap>) [((id<OrgOssPdfreporterEngineJasperReportsContext>) nil_chk([((id<OrgOssPdfreporterEngineQueryJRQueryClauseContext>) nil_chk(queryContext)) getJasperReportsContext])) getValueWithNSString:OrgOssPdfreporterEngineQueryParameterTypeSelectorClauseFunction_CONTEXT_KEY_FUNCTION_PER_TYPES_CACHE_];
  if (cache == nil) {
    cache = [[JavaUtilHashMap alloc] init];
    [((id<OrgOssPdfreporterEngineJasperReportsContext>) nil_chk([((id<OrgOssPdfreporterEngineQueryJRQueryClauseContext>) nil_chk(queryContext)) getJasperReportsContext])) setValueWithNSString:OrgOssPdfreporterEngineQueryParameterTypeSelectorClauseFunction_CONTEXT_KEY_FUNCTION_PER_TYPES_CACHE_ withId:cache];
  }
  return cache;
}

- (id)parameterTypesFunctionCacheKeyWithOrgOssPdfreporterEngineQueryJRClauseTokens:(OrgOssPdfreporterEngineQueryJRClauseTokens *)clauseTokens
                              withOrgOssPdfreporterEngineQueryJRQueryClauseContext:(id<OrgOssPdfreporterEngineQueryJRQueryClauseContext>)queryContext
                                                                  withJavaUtilList:(id<JavaUtilList>)parameterTypes {
  id typesKey;
  int size = [((id<JavaUtilList>) nil_chk(parameterTypes)) size];
  if (size == 1) {
    typesKey = [((id<JavaUtilList>) nil_chk(parameterTypes)) getWithInt:0];
  }
  else if (size == 2) {
    typesKey = [[OrgOssPdfreporterEngineUtilPair alloc] initWithId:[((id<JavaUtilList>) nil_chk(parameterTypes)) getWithInt:0] withId:[((id<JavaUtilList>) nil_chk(parameterTypes)) getWithInt:1]];
  }
  else {
    typesKey = parameterTypes;
  }
  OrgOssPdfreporterEngineUtilPair *clauseKey = [[OrgOssPdfreporterEngineUtilPair alloc] initWithId:[((id<OrgOssPdfreporterEngineQueryJRQueryClauseContext>) nil_chk(queryContext)) getCanonicalQueryLanguage] withId:[((OrgOssPdfreporterEngineQueryJRClauseTokens *) nil_chk(clauseTokens)) getClauseId]];
  return [[OrgOssPdfreporterEngineUtilPair alloc] initWithId:clauseKey withId:typesKey];
}

- (id<OrgOssPdfreporterEngineQueryJRClauseFunction>)selectForParameterTypesWithOrgOssPdfreporterEngineQueryJRClauseTokens:(OrgOssPdfreporterEngineQueryJRClauseTokens *)clauseTokens
                                                                     withOrgOssPdfreporterEngineQueryJRQueryClauseContext:(id<OrgOssPdfreporterEngineQueryJRQueryClauseContext>)queryContext
                                                                                                         withJavaUtilList:(id<JavaUtilList>)parameterTypes {
  NSString *queryLanguage = [((id<OrgOssPdfreporterEngineQueryJRQueryClauseContext>) nil_chk(queryContext)) getCanonicalQueryLanguage];
  NSString *clauseId = [((OrgOssPdfreporterEngineQueryJRClauseTokens *) nil_chk(clauseTokens)) getClauseId];
  id<JavaUtilList> functionsBundles = [((id<OrgOssPdfreporterEngineJasperReportsContext>) nil_chk([((id<OrgOssPdfreporterEngineQueryJRQueryClauseContext>) nil_chk(queryContext)) getJasperReportsContext])) getExtensionsWithIOSClass:[IOSClass classWithProtocol:@protocol(OrgOssPdfreporterEngineQueryParameterTypesClauseFunctionBundle)]];
  id<JavaUtilList> candidateFunctions = [[JavaUtilArrayList alloc] init];
  {
    id<JavaUtilIterator> iter__ = [((id<JavaUtilList>) nil_chk(functionsBundles)) iterator];
    while ([((id<JavaUtilIterator>) nil_chk(iter__)) hasNext]) {
      id<OrgOssPdfreporterEngineQueryParameterTypesClauseFunctionBundle> functionsBundle = [((id<JavaUtilIterator>) nil_chk(iter__)) next];
      id<JavaUtilCollection> functions = [((id<OrgOssPdfreporterEngineQueryParameterTypesClauseFunctionBundle>) nil_chk(functionsBundle)) getTypeFunctionsWithNSString:queryLanguage withNSString:clauseId];
      if (functions != nil) {
        {
          id<JavaUtilIterator> iter__ = [functions iterator];
          while ([((id<JavaUtilIterator>) nil_chk(iter__)) hasNext]) {
            id<OrgOssPdfreporterEngineQueryParameterTypesClauseFunction> typesFunction = [((id<JavaUtilIterator>) nil_chk(iter__)) next];
            id<JavaUtilList> supportedTypes = [self findSupportedTypesWithOrgOssPdfreporterEngineQueryParameterTypesClauseFunction:typesFunction withJavaUtilList:parameterTypes];
            if (supportedTypes != nil) {
              id<OrgOssPdfreporterEngineQueryJRClauseFunction> function = [((id<OrgOssPdfreporterEngineQueryParameterTypesClauseFunction>) nil_chk(typesFunction)) getFunction];
              OrgOssPdfreporterEngineUtilPair *candidate = [[OrgOssPdfreporterEngineUtilPair alloc] initWithId:supportedTypes withId:function];
              [((id<JavaUtilList>) nil_chk(candidateFunctions)) addWithId:candidate];
            }
          }
        }
      }
    }
  }
  return [self selectFromCandidatesWithJavaUtilList:candidateFunctions];
}

- (id<OrgOssPdfreporterEngineQueryJRClauseFunction>)selectFromCandidatesWithJavaUtilList:(id<JavaUtilList>)candidateFunctions {
  if ([((id<JavaUtilList>) nil_chk(candidateFunctions)) isEmpty]) {
    return nil;
  }
  if ([((id<JavaUtilList>) nil_chk(candidateFunctions)) size] == 1) {
    return [((OrgOssPdfreporterEngineUtilPair *) nil_chk([((id<JavaUtilList>) nil_chk(candidateFunctions)) getWithInt:0])) second];
  }
  [JavaUtilCollections sortWithJavaUtilList:candidateFunctions withJavaUtilComparator:[OrgOssPdfreporterEngineQueryTypesCandidateComparator INSTANCE]];
  id<OrgOssPdfreporterEngineQueryJRClauseFunction> function = [((OrgOssPdfreporterEngineUtilPair *) nil_chk([((id<JavaUtilList>) nil_chk(candidateFunctions)) getWithInt:0])) second];
  return function;
}

- (id<JavaUtilList>)findSupportedTypesWithOrgOssPdfreporterEngineQueryParameterTypesClauseFunction:(id<OrgOssPdfreporterEngineQueryParameterTypesClauseFunction>)typesFunction
                                                                                  withJavaUtilList:(id<JavaUtilList>)parameterTypes {
  id<JavaUtilCollection> functionTypes = [((id<OrgOssPdfreporterEngineQueryParameterTypesClauseFunction>) nil_chk(typesFunction)) getSupportedTypes];
  id<JavaUtilList> supportedTypes = [[JavaUtilArrayList alloc] initWithInt:[((id<JavaUtilList>) nil_chk(parameterTypes)) size]];
  {
    id<JavaUtilIterator> iter__ = [((id<JavaUtilList>) nil_chk(parameterTypes)) iterator];
    while ([((id<JavaUtilIterator>) nil_chk(iter__)) hasNext]) {
      IOSClass *paramType = [((id<JavaUtilIterator>) nil_chk(iter__)) next];
      IOSClass *supportedType = [self findSupportedTypeWithJavaUtilCollection:functionTypes withIOSClass:paramType];
      if (supportedType == nil) {
        break;
      }
      else {
        [((id<JavaUtilList>) nil_chk(supportedTypes)) addWithId:supportedType];
      }
    }
  }
  if ([((id<JavaUtilList>) nil_chk(supportedTypes)) size] == [((id<JavaUtilList>) nil_chk(parameterTypes)) size]) {
    return supportedTypes;
  }
  return nil;
}

- (IOSClass *)findSupportedTypeWithJavaUtilCollection:(id<JavaUtilCollection>)supportedTypes
                                         withIOSClass:(IOSClass *)parameterType {
  {
    id<JavaUtilIterator> iter__ = [((id<JavaUtilCollection>) nil_chk(supportedTypes)) iterator];
    while ([((id<JavaUtilIterator>) nil_chk(iter__)) hasNext]) {
      IOSClass *supportedType = [((id<JavaUtilIterator>) nil_chk(iter__)) next];
      if ([nil_chk(supportedType) isAssignableFrom:parameterType]) {
        return supportedType;
      }
    }
  }
  return nil;
}

- (void)copyAllPropertiesTo:(id)copy {
  [super copyAllPropertiesTo:copy];
  OrgOssPdfreporterEngineQueryParameterTypeSelectorClauseFunction *typedCopy = (OrgOssPdfreporterEngineQueryParameterTypeSelectorClauseFunction *) copy;
  typedCopy.parameterPositions = parameterPositions_;
}

@end
@implementation OrgOssPdfreporterEngineQueryTypesCandidateComparator

static OrgOssPdfreporterEngineQueryTypesCandidateComparator * OrgOssPdfreporterEngineQueryTypesCandidateComparator_INSTANCE_;

+ (OrgOssPdfreporterEngineQueryTypesCandidateComparator *)INSTANCE {
  return OrgOssPdfreporterEngineQueryTypesCandidateComparator_INSTANCE_;
}

- (id)init {
  return [super init];
}

- (int)compareWithId:(OrgOssPdfreporterEngineUtilPair *)o1
              withId:(OrgOssPdfreporterEngineUtilPair *)o2 {
  id<JavaUtilList> types1 = [((OrgOssPdfreporterEngineUtilPair *) nil_chk(o1)) first];
  id<JavaUtilList> types2 = [((OrgOssPdfreporterEngineUtilPair *) nil_chk(o2)) first];
  if ([((id<JavaUtilList>) nil_chk(types1)) size] != [((id<JavaUtilList>) nil_chk(types2)) size]) {
    @throw [[OrgOssPdfreporterEngineJRRuntimeException alloc] initWithNSString:[NSString stringWithFormat:@"Candidate types sizes do not match: %d vs %d", [((id<JavaUtilList>) nil_chk(types1)) size], [((id<JavaUtilList>) nil_chk(types2)) size]]];
  }
  int order = 0;
  for (id<JavaUtilIterator> it1 = [((id<JavaUtilList>) nil_chk(types1)) iterator], it2 = [((id<JavaUtilList>) nil_chk(types2)) iterator]; [((id<JavaUtilIterator>) nil_chk(it1)) hasNext] && [((id<JavaUtilIterator>) nil_chk(it2)) hasNext]; ) {
    IOSClass *type1 = [((id<JavaUtilIterator>) nil_chk(it1)) next];
    IOSClass *type2 = [((id<JavaUtilIterator>) nil_chk(it2)) next];
    int typesOrder = [self compareTypesWithIOSClass:type1 withIOSClass:type2];
    if (typesOrder != 0) {
      order = typesOrder;
      break;
    }
  }
  return order;
}

- (int)compareTypesWithIOSClass:(IOSClass *)type1
                   withIOSClass:(IOSClass *)type2 {
  if ([((IOSClass *) nil_chk(type1)) isEqual:type2]) {
    return 0;
  }
  if ([nil_chk(type1) isAssignableFrom:type2]) {
    return 1;
  }
  if ([nil_chk(type2) isAssignableFrom:type1]) {
    return -1;
  }
  return [((NSString *) nil_chk([((IOSClass *) nil_chk(type1)) getName])) compareToWithId:[((IOSClass *) nil_chk(type2)) getName]];
}

+ (void)initialize {
  if (self == [OrgOssPdfreporterEngineQueryTypesCandidateComparator class]) {
    OrgOssPdfreporterEngineQueryTypesCandidateComparator_INSTANCE_ = [[OrgOssPdfreporterEngineQueryTypesCandidateComparator alloc] init];
  }
}

@end
