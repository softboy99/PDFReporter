//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: pdfreporter-core/src/org/oss/pdfreporter/engine/query/JRAbstractQueryExecuter.java
//
//  Created by kendra on 9/27/13.
//

#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "java/lang/Boolean.h"
#include "java/lang/Exception.h"
#include "java/lang/StringBuffer.h"
#include "java/util/ArrayList.h"
#include "java/util/Collections.h"
#include "java/util/HashMap.h"
#include "java/util/HashSet.h"
#include "java/util/Iterator.h"
#include "java/util/List.h"
#include "java/util/Map.h"
#include "java/util/Set.h"
#include "org/oss/pdfreporter/engine/DefaultJasperReportsContext.h"
#include "org/oss/pdfreporter/engine/JRDataSource.h"
#include "org/oss/pdfreporter/engine/JRDataset.h"
#include "org/oss/pdfreporter/engine/JRParameter.h"
#include "org/oss/pdfreporter/engine/JRPropertiesMap.h"
#include "org/oss/pdfreporter/engine/JRPropertiesUtil.h"
#include "org/oss/pdfreporter/engine/JRQuery.h"
#include "org/oss/pdfreporter/engine/JRQueryChunk.h"
#include "org/oss/pdfreporter/engine/JRRuntimeException.h"
#include "org/oss/pdfreporter/engine/JRValueParameter.h"
#include "org/oss/pdfreporter/engine/JasperReportsContext.h"
#include "org/oss/pdfreporter/engine/fill/IJRFillParameter.h"
#include "org/oss/pdfreporter/engine/query/JRAbstractQueryExecuter.h"
#include "org/oss/pdfreporter/engine/query/JRClauseFunction.h"
#include "org/oss/pdfreporter/engine/query/JRClauseTokens.h"
#include "org/oss/pdfreporter/engine/query/QueryClauseFunctionBundle.h"
#include "org/oss/pdfreporter/engine/util/JRQueryChunkHandler.h"
#include "org/oss/pdfreporter/engine/util/JRQueryParser.h"

@implementation OrgOssPdfreporterEngineQueryJRAbstractQueryExecuter

@synthesize clauseFunctions = clauseFunctions_;
@synthesize jasperReportsContext = jasperReportsContext_;
@synthesize propertiesUtil = propertiesUtil_;
@synthesize dataset = dataset_;
@synthesize parametersMap = parametersMap_;
@synthesize queryString = queryString_;
@synthesize queryParameters = queryParameters_;
@synthesize parameterClauseStack = parameterClauseStack_;

+ (int)CLAUSE_POSITION_ID {
  return OrgOssPdfreporterEngineQueryJRAbstractQueryExecuter_CLAUSE_POSITION_ID;
}

- (id)initOrgOssPdfreporterEngineQueryJRAbstractQueryExecuterWithOrgOssPdfreporterEngineJasperReportsContext:(id<OrgOssPdfreporterEngineJasperReportsContext>)jasperReportsContext
                                                                        withOrgOssPdfreporterEngineJRDataset:(id<OrgOssPdfreporterEngineJRDataset>)dataset
                                                                                             withJavaUtilMap:(id<JavaUtilMap>)parametersMap {
  if ((self = [super init])) {
    clauseFunctions_ = [[JavaUtilHashMap alloc] init];
    self.jasperReportsContext = jasperReportsContext;
    self.propertiesUtil = [OrgOssPdfreporterEngineJRPropertiesUtil getInstanceWithOrgOssPdfreporterEngineJasperReportsContext:jasperReportsContext];
    self.dataset = dataset;
    self.parametersMap = parametersMap;
    queryString_ = @"";
    queryParameters_ = [[JavaUtilArrayList alloc] init];
  }
  return self;
}

- (id)initWithOrgOssPdfreporterEngineJasperReportsContext:(id<OrgOssPdfreporterEngineJasperReportsContext>)jasperReportsContext
                     withOrgOssPdfreporterEngineJRDataset:(id<OrgOssPdfreporterEngineJRDataset>)dataset
                                          withJavaUtilMap:(id<JavaUtilMap>)parametersMap {
  return [self initOrgOssPdfreporterEngineQueryJRAbstractQueryExecuterWithOrgOssPdfreporterEngineJasperReportsContext:jasperReportsContext withOrgOssPdfreporterEngineJRDataset:dataset withJavaUtilMap:parametersMap];
}

- (id)initWithOrgOssPdfreporterEngineJRDataset:(id<OrgOssPdfreporterEngineJRDataset>)dataset
                               withJavaUtilMap:(id<JavaUtilMap>)parametersMap {
  return [self initOrgOssPdfreporterEngineQueryJRAbstractQueryExecuterWithOrgOssPdfreporterEngineJasperReportsContext:[OrgOssPdfreporterEngineDefaultJasperReportsContext getInstance] withOrgOssPdfreporterEngineJRDataset:dataset withJavaUtilMap:parametersMap];
}

- (id<OrgOssPdfreporterEngineJasperReportsContext>)getJasperReportsContext {
  return jasperReportsContext_;
}

- (OrgOssPdfreporterEngineJRPropertiesUtil *)getPropertiesUtil {
  return propertiesUtil_;
}

- (void)registerClauseFunctionWithNSString:(NSString *)id_
withOrgOssPdfreporterEngineQueryJRClauseFunction:(id<OrgOssPdfreporterEngineQueryJRClauseFunction>)function {
  (void) [((id<JavaUtilMap>) nil_chk(clauseFunctions_)) putWithId:id_ withId:function];
}

- (void)unregisterClauseFunctionWithNSString:(NSString *)id_ {
  (void) [((id<JavaUtilMap>) nil_chk(clauseFunctions_)) removeWithId:id_];
}

- (id<OrgOssPdfreporterEngineQueryJRClauseFunction>)resolveFunctionWithNSString:(NSString *)id_ {
  id<OrgOssPdfreporterEngineQueryJRClauseFunction> function = [((id<JavaUtilMap>) nil_chk(clauseFunctions_)) getWithId:id_];
  if (function == nil) {
    function = [self findExtensionQueryFunctionWithNSString:id_];
    if (function == nil) {
      @throw [[OrgOssPdfreporterEngineJRRuntimeException alloc] initWithNSString:[NSString stringWithFormat:@"No clause function for id %@ found", id_]];
    }
  }
  return function;
}

- (id<OrgOssPdfreporterEngineQueryJRClauseFunction>)findExtensionQueryFunctionWithNSString:(NSString *)id_ {
  id<OrgOssPdfreporterEngineQueryJRClauseFunction> function = nil;
  NSString *queryLanguage = [self getCanonicalQueryLanguage];
  id<JavaUtilList> functionBundles = [((id<OrgOssPdfreporterEngineJasperReportsContext>) nil_chk(jasperReportsContext_)) getExtensionsWithIOSClass:[IOSClass classWithProtocol:@protocol(OrgOssPdfreporterEngineQueryQueryClauseFunctionBundle)]];
  {
    id<JavaUtilIterator> iter__ = [((id<JavaUtilList>) nil_chk(functionBundles)) iterator];
    while ([((id<JavaUtilIterator>) nil_chk(iter__)) hasNext]) {
      id<OrgOssPdfreporterEngineQueryQueryClauseFunctionBundle> functionBundle = [((id<JavaUtilIterator>) nil_chk(iter__)) next];
      function = [((id<OrgOssPdfreporterEngineQueryQueryClauseFunctionBundle>) nil_chk(functionBundle)) getFunctionWithNSString:queryLanguage withNSString:id_];
      if (function != nil) {
        break;
      }
    }
  }
  return function;
}

- (NSString *)getCanonicalQueryLanguage {
  return [((id<OrgOssPdfreporterEngineJRQuery>) nil_chk([((id<OrgOssPdfreporterEngineJRDataset>) nil_chk(dataset_)) getQuery])) getLanguage];
}

- (void)parseQuery {
  parameterClauseStack_ = [[JavaUtilHashSet alloc] init];
  id<OrgOssPdfreporterEngineJRQuery> query = [((id<OrgOssPdfreporterEngineJRDataset>) nil_chk(dataset_)) getQuery];
  if (query != nil) {
    IOSObjectArray *chunks = [query getChunks];
    if (chunks != nil && (int) [((IOSObjectArray *) nil_chk(chunks)) count] > 0) {
      JavaLangStringBuffer *sbuffer = [[JavaLangStringBuffer alloc] init];
      for (int i = 0; i < (int) [((IOSObjectArray *) nil_chk(chunks)) count]; i++) {
        id<OrgOssPdfreporterEngineJRQueryChunk> chunk = [((IOSObjectArray *) nil_chk(chunks)) objectAtIndex:i];
        [self appendQueryChunkWithJavaLangStringBuffer:sbuffer withOrgOssPdfreporterEngineJRQueryChunk:chunk];
      }
      queryString_ = [((JavaLangStringBuffer *) nil_chk(sbuffer)) description];
    }
  }
}

- (void)appendQueryChunkWithJavaLangStringBuffer:(JavaLangStringBuffer *)sbuffer
         withOrgOssPdfreporterEngineJRQueryChunk:(id<OrgOssPdfreporterEngineJRQueryChunk>)chunk {
  switch ([((id<OrgOssPdfreporterEngineJRQueryChunk>) nil_chk(chunk)) getType]) {
    case OrgOssPdfreporterEngineJRQueryChunk_TYPE_PARAMETER_CLAUSE:
    {
      [self appendParameterClauseChunkWithJavaLangStringBuffer:sbuffer withNSString:[((id<OrgOssPdfreporterEngineJRQueryChunk>) nil_chk(chunk)) getText]];
      break;
    }
    case OrgOssPdfreporterEngineJRQueryChunk_TYPE_PARAMETER:
    {
      [self appendParameterChunkWithJavaLangStringBuffer:sbuffer withNSString:[((id<OrgOssPdfreporterEngineJRQueryChunk>) nil_chk(chunk)) getText]];
      break;
    }
    case OrgOssPdfreporterEngineJRQueryChunk_TYPE_CLAUSE_TOKENS:
    {
      [self appendClauseChunkWithJavaLangStringBuffer:sbuffer withNSStringArray:[((id<OrgOssPdfreporterEngineJRQueryChunk>) nil_chk(chunk)) getTokens]];
      break;
    }
    case OrgOssPdfreporterEngineJRQueryChunk_TYPE_TEXT:
    default:
    {
      [self appendTextChunkWithJavaLangStringBuffer:sbuffer withNSString:[((id<OrgOssPdfreporterEngineJRQueryChunk>) nil_chk(chunk)) getText]];
      break;
    }
  }
}

- (void)appendTextChunkWithJavaLangStringBuffer:(JavaLangStringBuffer *)sbuffer
                                   withNSString:(NSString *)text {
  (void) [((JavaLangStringBuffer *) nil_chk(sbuffer)) appendWithNSString:text];
}

- (void)appendParameterChunkWithJavaLangStringBuffer:(JavaLangStringBuffer *)sbuffer
                                        withNSString:(NSString *)chunkText {
  NSString *parameterName = chunkText;
  [self checkParameterWithNSString:parameterName];
  (void) [((JavaLangStringBuffer *) nil_chk(sbuffer)) appendWithNSString:[self getParameterReplacementWithNSString:parameterName]];
  [self addQueryParameterWithNSString:chunkText];
}

- (void)addQueryParameterWithNSString:(NSString *)parameterName {
  OrgOssPdfreporterEngineQueryJRAbstractQueryExecuter_QueryParameter *param = [[OrgOssPdfreporterEngineQueryJRAbstractQueryExecuter_QueryParameter alloc] initWithNSString:parameterName];
  [((id<JavaUtilList>) nil_chk(queryParameters_)) addWithId:param];
}

- (void)addQueryMultiParametersWithNSString:(NSString *)parameterName
                                    withInt:(int)count {
  OrgOssPdfreporterEngineQueryJRAbstractQueryExecuter_QueryParameter *param = [[OrgOssPdfreporterEngineQueryJRAbstractQueryExecuter_QueryParameter alloc] initWithNSString:parameterName withInt:count];
  [((id<JavaUtilList>) nil_chk(queryParameters_)) addWithId:param];
}

- (void)addQueryMultiParametersWithNSString:(NSString *)parameterName
                                    withInt:(int)count
                                   withBOOL:(BOOL)ignoreNulls {
  OrgOssPdfreporterEngineQueryJRAbstractQueryExecuter_QueryParameter *param = [[OrgOssPdfreporterEngineQueryJRAbstractQueryExecuter_QueryParameter alloc] initWithNSString:parameterName withInt:count withBOOL:ignoreNulls];
  [((id<JavaUtilList>) nil_chk(queryParameters_)) addWithId:param];
}

- (void)addQueryParameterWithIOSClass:(IOSClass *)type
                               withId:(id)value {
  OrgOssPdfreporterEngineQueryJRAbstractQueryExecuter_ValuedQueryParameter *param = [[OrgOssPdfreporterEngineQueryJRAbstractQueryExecuter_ValuedQueryParameter alloc] initWithIOSClass:type withId:value];
  [((id<JavaUtilList>) nil_chk(queryParameters_)) addWithId:param];
}

- (void)appendParameterClauseChunkWithJavaLangStringBuffer:(JavaLangStringBuffer *)sbuffer
                                              withNSString:(NSString *)chunkText {
  NSString *parameterName = chunkText;
  [self checkParameterWithNSString:parameterName];
  if (![((id<JavaUtilSet>) nil_chk(parameterClauseStack_)) addWithId:parameterName]) {
    @throw [[OrgOssPdfreporterEngineJRRuntimeException alloc] initWithNSString:[NSString stringWithFormat:@"The query contains circularly nested parameter clauses starting with %@", parameterName]];
  }
  @try {
    id parameterValue = [self getParameterValueWithNSString:parameterName];
    NSString *clauseText = [NSString valueOf:parameterValue];
    id<OrgOssPdfreporterEngineUtilJRQueryChunkHandler> nestedChunkHandler = [[OrgOssPdfreporterEngineQueryJRAbstractQueryExecuter_$1 alloc] initWithOrgOssPdfreporterEngineQueryJRAbstractQueryExecuter:self withJavaLangStringBuffer:sbuffer];
    [((OrgOssPdfreporterEngineUtilJRQueryParser *) nil_chk([OrgOssPdfreporterEngineUtilJRQueryParser instance])) parseWithNSString:clauseText withOrgOssPdfreporterEngineUtilJRQueryChunkHandler:nestedChunkHandler];
  }
  @finally {
    [((id<JavaUtilSet>) nil_chk(parameterClauseStack_)) removeWithId:parameterName];
  }
}

- (void)appendClauseChunkWithJavaLangStringBuffer:(JavaLangStringBuffer *)sbuffer
                                withNSStringArray:(IOSObjectArray *)clauseTokens {
  OrgOssPdfreporterEngineQueryJRClauseTokens *tokens = [[OrgOssPdfreporterEngineQueryJRClauseTokens alloc] initWithNSStringArray:clauseTokens];
  NSString *id_ = [((OrgOssPdfreporterEngineQueryJRClauseTokens *) nil_chk(tokens)) getClauseId];
  if (id_ == nil) {
    @throw [[OrgOssPdfreporterEngineJRRuntimeException alloc] initWithNSString:@"Query clause ID/first token missing"];
  }
  id<OrgOssPdfreporterEngineQueryJRClauseFunction> function = [self resolveFunctionWithNSString:id_];
  [self applyClauseWithOrgOssPdfreporterEngineQueryJRClauseFunction:function withOrgOssPdfreporterEngineQueryJRClauseTokens:tokens withJavaLangStringBuffer:sbuffer];
}

- (void)applyClauseWithOrgOssPdfreporterEngineQueryJRClauseFunction:(id<OrgOssPdfreporterEngineQueryJRClauseFunction>)function
                     withOrgOssPdfreporterEngineQueryJRClauseTokens:(OrgOssPdfreporterEngineQueryJRClauseTokens *)tokens
                                           withJavaLangStringBuffer:(JavaLangStringBuffer *)sbuffer {
  [((id<OrgOssPdfreporterEngineQueryJRClauseFunction>) nil_chk(function)) applyWithOrgOssPdfreporterEngineQueryJRClauseTokens:tokens withOrgOssPdfreporterEngineQueryJRQueryClauseContext:[[OrgOssPdfreporterEngineQueryJRAbstractQueryExecuter_$2 alloc] initWithOrgOssPdfreporterEngineQueryJRAbstractQueryExecuter:self withJavaLangStringBuffer:sbuffer]];
}

- (NSString *)getQueryString {
  return queryString_;
}

- (id<JavaUtilList>)getCollectedParameterNames {
  id<JavaUtilList> parameterNames = [[JavaUtilArrayList alloc] initWithInt:[((id<JavaUtilList>) nil_chk(queryParameters_)) size]];
  for (id<JavaUtilIterator> it = [((id<JavaUtilList>) nil_chk(queryParameters_)) iterator]; [((id<JavaUtilIterator>) nil_chk(it)) hasNext]; ) {
    id<OrgOssPdfreporterEngineQueryJRAbstractQueryExecuter_QueryParameterEntry> paramEntry = [((id<JavaUtilIterator>) nil_chk(it)) next];
    if (!([(id) paramEntry isKindOfClass:[OrgOssPdfreporterEngineQueryJRAbstractQueryExecuter_QueryParameter class]])) {
      @throw [[OrgOssPdfreporterEngineJRRuntimeException alloc] initWithNSString:[NSString stringWithFormat:@"getCollectedParameterNames found unsupported query parameter type %@", [[((id<OrgOssPdfreporterEngineQueryJRAbstractQueryExecuter_QueryParameterEntry>) nil_chk(paramEntry)) getClass] getName]]];
    }
    OrgOssPdfreporterEngineQueryJRAbstractQueryExecuter_QueryParameter *param = (OrgOssPdfreporterEngineQueryJRAbstractQueryExecuter_QueryParameter *) paramEntry;
    [((id<JavaUtilList>) nil_chk(parameterNames)) addWithId:[((OrgOssPdfreporterEngineQueryJRAbstractQueryExecuter_QueryParameter *) nil_chk(param)) getName]];
  }
  return parameterNames;
}

- (id<JavaUtilList>)getCollectedParameters {
  id<JavaUtilList> params = [[JavaUtilArrayList alloc] initWithInt:[((id<JavaUtilList>) nil_chk(queryParameters_)) size]];
  {
    id<JavaUtilIterator> iter__ = [((id<JavaUtilList>) nil_chk(queryParameters_)) iterator];
    while ([((id<JavaUtilIterator>) nil_chk(iter__)) hasNext]) {
      id<OrgOssPdfreporterEngineQueryJRAbstractQueryExecuter_QueryParameterEntry> parameterEntry = [((id<JavaUtilIterator>) nil_chk(iter__)) next];
      if (!([(id) parameterEntry isKindOfClass:[OrgOssPdfreporterEngineQueryJRAbstractQueryExecuter_QueryParameter class]])) {
        @throw [[OrgOssPdfreporterEngineJRRuntimeException alloc] initWithNSString:[NSString stringWithFormat:@"getCollectedParameterNames found unsupported query parameter type %@", [[((id<OrgOssPdfreporterEngineQueryJRAbstractQueryExecuter_QueryParameterEntry>) nil_chk(parameterEntry)) getClass] getName]]];
      }
      [((id<JavaUtilList>) nil_chk(params)) addWithId:(OrgOssPdfreporterEngineQueryJRAbstractQueryExecuter_QueryParameter *) parameterEntry];
    }
  }
  return [JavaUtilCollections unmodifiableListWithJavaUtilList:params];
}

- (void)visitQueryParametersWithOrgOssPdfreporterEngineQueryJRAbstractQueryExecuter_QueryParameterVisitor:(id<OrgOssPdfreporterEngineQueryJRAbstractQueryExecuter_QueryParameterVisitor>)visitor {
  {
    id<JavaUtilIterator> iter__ = [((id<JavaUtilList>) nil_chk(queryParameters_)) iterator];
    while ([((id<JavaUtilIterator>) nil_chk(iter__)) hasNext]) {
      id<OrgOssPdfreporterEngineQueryJRAbstractQueryExecuter_QueryParameterEntry> queryParameter = [((id<JavaUtilIterator>) nil_chk(iter__)) next];
      [((id<OrgOssPdfreporterEngineQueryJRAbstractQueryExecuter_QueryParameterEntry>) nil_chk(queryParameter)) acceptWithOrgOssPdfreporterEngineQueryJRAbstractQueryExecuter_QueryParameterVisitor:visitor];
    }
  }
}

- (id)getParameterValueWithNSString:(NSString *)parameterName
                           withBOOL:(BOOL)ignoreMissing {
  if (ignoreMissing) {
    id<OrgOssPdfreporterEngineJRValueParameter> parameter = [self getValueParameterWithNSString:[OrgOssPdfreporterEngineJRParameter REPORT_PARAMETERS_MAP] withBOOL:NO];
    id<JavaUtilMap> parametersMap = (id<JavaUtilMap>) [((id<OrgOssPdfreporterEngineJRValueParameter>) nil_chk(parameter)) getValue];
    return [((id<JavaUtilMap>) nil_chk(parametersMap)) getWithId:parameterName];
  }
  id<OrgOssPdfreporterEngineJRValueParameter> parameter = [self getValueParameterWithNSString:parameterName withBOOL:ignoreMissing];
  return parameter == nil ? nil : [((id<OrgOssPdfreporterEngineJRValueParameter>) nil_chk(parameter)) getValue];
}

- (id)getParameterValueWithNSString:(NSString *)parameterName {
  return [self getParameterValueWithNSString:parameterName withBOOL:NO];
}

- (BOOL)parameterHasValueWithNSString:(NSString *)parameter {
  id<OrgOssPdfreporterEngineJRValueParameter> reportParametersMap = [self getValueParameterWithNSString:[OrgOssPdfreporterEngineJRParameter REPORT_PARAMETERS_MAP] withBOOL:NO];
  id<JavaUtilMap> parametersMap = (id<JavaUtilMap>) [((id<OrgOssPdfreporterEngineJRValueParameter>) nil_chk(reportParametersMap)) getValue];
  return [((id<JavaUtilMap>) nil_chk(parametersMap)) containsKeyWithId:parameter];
}

- (NSString *)getStringParameterWithNSString:(NSString *)parameter
                                withNSString:(NSString *)property {
  if ([self parameterHasValueWithNSString:parameter]) {
    return (NSString *) [self getParameterValueWithNSString:parameter withBOOL:YES];
  }
  else {
    return [((OrgOssPdfreporterEngineJRPropertiesUtil *) nil_chk([self getPropertiesUtil])) getPropertyWithOrgOssPdfreporterEngineJRPropertiesMap:[((id<OrgOssPdfreporterEngineJRDataset>) nil_chk(dataset_)) getPropertiesMap] withNSString:property];
  }
}

- (NSString *)getStringParameterOrPropertyWithNSString:(NSString *)name {
  return [self getStringParameterWithNSString:name withNSString:name];
}

- (BOOL)getBooleanParameterWithNSString:(NSString *)parameter
                           withNSString:(NSString *)property
                               withBOOL:(BOOL)defaultValue {
  if ([self parameterHasValueWithNSString:parameter]) {
    JavaLangBoolean *booleanValue = (JavaLangBoolean *) [self getParameterValueWithNSString:parameter withBOOL:YES];
    if (booleanValue == nil) {
      return [((OrgOssPdfreporterEngineJRPropertiesUtil *) nil_chk([self getPropertiesUtil])) getBooleanPropertyWithNSString:property];
    }
    else {
      return [booleanValue booleanValue];
    }
  }
  else {
    return [((OrgOssPdfreporterEngineJRPropertiesUtil *) nil_chk([self getPropertiesUtil])) getBooleanPropertyWithOrgOssPdfreporterEngineJRPropertiesMap:[((id<OrgOssPdfreporterEngineJRDataset>) nil_chk(dataset_)) getPropertiesMap] withNSString:property withBOOL:defaultValue];
  }
}

- (BOOL)getBooleanParameterOrPropertyWithNSString:(NSString *)name
                                         withBOOL:(BOOL)defaultValue {
  return [self getBooleanParameterWithNSString:name withNSString:name withBOOL:defaultValue];
}

- (id<OrgOssPdfreporterEngineFillIJRFillParameter>)getParameterWithNSString:(NSString *)parameterName {
  id<OrgOssPdfreporterEngineFillIJRFillParameter> parameter = (id<OrgOssPdfreporterEngineFillIJRFillParameter>) [((id<JavaUtilMap>) nil_chk(parametersMap_)) getWithId:parameterName];
  if (parameter == nil) {
    @throw [[OrgOssPdfreporterEngineJRRuntimeException alloc] initWithNSString:[NSString stringWithFormat:@"Parameter \"%@\" does not exist.", parameterName]];
  }
  return parameter;
}

- (void)checkParameterWithNSString:(NSString *)parameterName {
  if (![((id<JavaUtilMap>) nil_chk(parametersMap_)) containsKeyWithId:parameterName]) {
    @throw [[OrgOssPdfreporterEngineJRRuntimeException alloc] initWithNSString:[NSString stringWithFormat:@"Parameter \"%@\" does not exist.", parameterName]];
  }
}

- (id<OrgOssPdfreporterEngineJRValueParameter>)getValueParameterWithNSString:(NSString *)parameterName
                                                                    withBOOL:(BOOL)ignoreMissing {
  id<OrgOssPdfreporterEngineJRValueParameter> parameter = [((id<JavaUtilMap>) nil_chk(parametersMap_)) getWithId:parameterName];
  if (parameter == nil && !ignoreMissing) {
    @throw [[OrgOssPdfreporterEngineJRRuntimeException alloc] initWithNSString:[NSString stringWithFormat:@"Parameter \"%@\" does not exist.", parameterName]];
  }
  return parameter;
}

- (id<OrgOssPdfreporterEngineJRValueParameter>)getValueParameterWithNSString:(NSString *)parameterName {
  return [self getValueParameterWithNSString:parameterName withBOOL:NO];
}

- (NSString *)getParameterReplacementWithNSString:(NSString *)parameterName {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}

- (BOOL)cancelQuery {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}

- (void)close {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
}

- (id<OrgOssPdfreporterEngineJRDataSource>)createDatasource {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}

- (void)copyAllPropertiesTo:(id)copy {
  [super copyAllPropertiesTo:copy];
  OrgOssPdfreporterEngineQueryJRAbstractQueryExecuter *typedCopy = (OrgOssPdfreporterEngineQueryJRAbstractQueryExecuter *) copy;
  typedCopy.clauseFunctions = clauseFunctions_;
  typedCopy.jasperReportsContext = jasperReportsContext_;
  typedCopy.propertiesUtil = propertiesUtil_;
  typedCopy.dataset = dataset_;
  typedCopy.parametersMap = parametersMap_;
  typedCopy.queryString = queryString_;
  typedCopy.queryParameters = queryParameters_;
  typedCopy.parameterClauseStack = parameterClauseStack_;
}

@end
@implementation OrgOssPdfreporterEngineQueryJRAbstractQueryExecuter_VisitExceptionWrapper

- (id)initWithOrgOssPdfreporterEngineQueryJRAbstractQueryExecuter:(OrgOssPdfreporterEngineQueryJRAbstractQueryExecuter *)outer$
                                            withJavaLangException:(JavaLangException *)cause {
  return [super initWithJavaLangThrowable:cause];
}

@end
@implementation OrgOssPdfreporterEngineQueryJRAbstractQueryExecuter_QueryParameter

@synthesize name = name_;
@synthesize count = count_;
@synthesize ignoreNulls = ignoreNulls_;

+ (int)COUNT_SINGLE {
  return OrgOssPdfreporterEngineQueryJRAbstractQueryExecuter_QueryParameter_COUNT_SINGLE;
}

- (id)initWithNSString:(NSString *)name {
  return [self initOrgOssPdfreporterEngineQueryJRAbstractQueryExecuter_QueryParameterWithNSString:name withInt:OrgOssPdfreporterEngineQueryJRAbstractQueryExecuter_QueryParameter_COUNT_SINGLE withBOOL:NO];
}

- (id)initWithNSString:(NSString *)name
               withInt:(int)count {
  return [self initOrgOssPdfreporterEngineQueryJRAbstractQueryExecuter_QueryParameterWithNSString:name withInt:count withBOOL:NO];
}

- (id)initOrgOssPdfreporterEngineQueryJRAbstractQueryExecuter_QueryParameterWithNSString:(NSString *)name
                                                                                 withInt:(int)count
                                                                                withBOOL:(BOOL)ignoreNulls {
  if ((self = [super init])) {
    self.name = name;
    self.count = count;
    self.ignoreNulls = ignoreNulls;
  }
  return self;
}

- (id)initWithNSString:(NSString *)name
               withInt:(int)count
              withBOOL:(BOOL)ignoreNulls {
  return [self initOrgOssPdfreporterEngineQueryJRAbstractQueryExecuter_QueryParameterWithNSString:name withInt:count withBOOL:ignoreNulls];
}

- (BOOL)isMulti {
  return count_ != OrgOssPdfreporterEngineQueryJRAbstractQueryExecuter_QueryParameter_COUNT_SINGLE;
}

- (int)getCount {
  return count_;
}

- (NSString *)getName {
  return name_;
}

- (BOOL)isIgnoreNulls {
  return ignoreNulls_;
}

- (void)acceptWithOrgOssPdfreporterEngineQueryJRAbstractQueryExecuter_QueryParameterVisitor:(id<OrgOssPdfreporterEngineQueryJRAbstractQueryExecuter_QueryParameterVisitor>)visitor {
  [((id<OrgOssPdfreporterEngineQueryJRAbstractQueryExecuter_QueryParameterVisitor>) nil_chk(visitor)) visitWithOrgOssPdfreporterEngineQueryJRAbstractQueryExecuter_QueryParameter:self];
}

- (void)copyAllPropertiesTo:(id)copy {
  [super copyAllPropertiesTo:copy];
  OrgOssPdfreporterEngineQueryJRAbstractQueryExecuter_QueryParameter *typedCopy = (OrgOssPdfreporterEngineQueryJRAbstractQueryExecuter_QueryParameter *) copy;
  typedCopy.name = name_;
  typedCopy.count = count_;
  typedCopy.ignoreNulls = ignoreNulls_;
}

@end
@implementation OrgOssPdfreporterEngineQueryJRAbstractQueryExecuter_ValuedQueryParameter

@synthesize type = type_;
@synthesize value = value_;

- (id)initWithIOSClass:(IOSClass *)type
                withId:(id)value {
  if ((self = [super init])) {
    self.type = type;
    self.value = value;
  }
  return self;
}

- (void)acceptWithOrgOssPdfreporterEngineQueryJRAbstractQueryExecuter_QueryParameterVisitor:(id<OrgOssPdfreporterEngineQueryJRAbstractQueryExecuter_QueryParameterVisitor>)visitor {
  [((id<OrgOssPdfreporterEngineQueryJRAbstractQueryExecuter_QueryParameterVisitor>) nil_chk(visitor)) visitWithOrgOssPdfreporterEngineQueryJRAbstractQueryExecuter_ValuedQueryParameter:self];
}

- (IOSClass *)getType {
  return type_;
}

- (id)getValue {
  return value_;
}

- (void)copyAllPropertiesTo:(id)copy {
  [super copyAllPropertiesTo:copy];
  OrgOssPdfreporterEngineQueryJRAbstractQueryExecuter_ValuedQueryParameter *typedCopy = (OrgOssPdfreporterEngineQueryJRAbstractQueryExecuter_ValuedQueryParameter *) copy;
  typedCopy.type = type_;
  typedCopy.value = value_;
}

@end
@implementation OrgOssPdfreporterEngineQueryJRAbstractQueryExecuter_$1

@synthesize this$0 = this$0_;
@synthesize val$sbuffer = val$sbuffer_;

- (void)handleParameterChunkWithNSString:(NSString *)text {
  [this$0_ appendParameterChunkWithJavaLangStringBuffer:val$sbuffer_ withNSString:text];
}

- (void)handleParameterClauseChunkWithNSString:(NSString *)text {
  [this$0_ appendParameterClauseChunkWithJavaLangStringBuffer:val$sbuffer_ withNSString:text];
}

- (void)handleTextChunkWithNSString:(NSString *)text {
  [this$0_ appendTextChunkWithJavaLangStringBuffer:val$sbuffer_ withNSString:text];
}

- (void)handleClauseChunkWithNSStringArray:(IOSObjectArray *)tokens {
  [this$0_ appendClauseChunkWithJavaLangStringBuffer:val$sbuffer_ withNSStringArray:tokens];
}

- (id)initWithOrgOssPdfreporterEngineQueryJRAbstractQueryExecuter:(OrgOssPdfreporterEngineQueryJRAbstractQueryExecuter *)outer$
                                         withJavaLangStringBuffer:(JavaLangStringBuffer *)capture$0 {
  if ((self = [super init])) {
    this$0_ = outer$;
    val$sbuffer_ = capture$0;
  }
  return self;
}

- (void)copyAllPropertiesTo:(id)copy {
  [super copyAllPropertiesTo:copy];
  OrgOssPdfreporterEngineQueryJRAbstractQueryExecuter_$1 *typedCopy = (OrgOssPdfreporterEngineQueryJRAbstractQueryExecuter_$1 *) copy;
  typedCopy.this$0 = this$0_;
  typedCopy.val$sbuffer = val$sbuffer_;
}

@end
@implementation OrgOssPdfreporterEngineQueryJRAbstractQueryExecuter_$2

@synthesize this$0 = this$0_;
@synthesize val$sbuffer = val$sbuffer_;

- (void)addQueryMultiParametersWithNSString:(NSString *)parameterName
                                    withInt:(int)count {
  [self addQueryMultiParametersWithNSString:parameterName withInt:count withBOOL:NO];
}

- (void)addQueryMultiParametersWithNSString:(NSString *)parameterName
                                    withInt:(int)count
                                   withBOOL:(BOOL)ignoreNulls {
  [this$0_ addQueryMultiParametersWithNSString:parameterName withInt:count withBOOL:ignoreNulls];
}

- (void)addQueryParameterWithNSString:(NSString *)parameterName {
  [this$0_ addQueryParameterWithNSString:parameterName];
}

- (void)addQueryParameterWithIOSClass:(IOSClass *)type
                               withId:(id)value {
  [this$0_ addQueryParameterWithIOSClass:type withId:value];
}

- (id<OrgOssPdfreporterEngineJRValueParameter>)getValueParameterWithNSString:(NSString *)parameterName {
  return [this$0_ getValueParameterWithNSString:parameterName];
}

- (JavaLangStringBuffer *)queryBuffer {
  return val$sbuffer_;
}

- (id<OrgOssPdfreporterEngineJasperReportsContext>)getJasperReportsContext {
  return this$0_.jasperReportsContext;
}

- (NSString *)getCanonicalQueryLanguage {
  return [this$0_ getCanonicalQueryLanguage];
}

- (id)initWithOrgOssPdfreporterEngineQueryJRAbstractQueryExecuter:(OrgOssPdfreporterEngineQueryJRAbstractQueryExecuter *)outer$
                                         withJavaLangStringBuffer:(JavaLangStringBuffer *)capture$0 {
  if ((self = [super init])) {
    this$0_ = outer$;
    val$sbuffer_ = capture$0;
  }
  return self;
}

- (void)copyAllPropertiesTo:(id)copy {
  [super copyAllPropertiesTo:copy];
  OrgOssPdfreporterEngineQueryJRAbstractQueryExecuter_$2 *typedCopy = (OrgOssPdfreporterEngineQueryJRAbstractQueryExecuter_$2 *) copy;
  typedCopy.this$0 = this$0_;
  typedCopy.val$sbuffer = val$sbuffer_;
}

@end
