//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: pdfreporter-core/src/org/oss/pdfreporter/progress/ProgressManager.java
//
//  Created by kendra on 9/27/13.
//

#include "IOSClass.h"
#include "java/lang/RuntimeException.h"
#include "java/lang/System.h"
#include "java/util/List.h"
#include "java/util/logging/Level.h"
#include "java/util/logging/Logger.h"
#include "org/oss/pdfreporter/extensions/ExtensionsEnvironment.h"
#include "org/oss/pdfreporter/extensions/ExtensionsRegistry.h"
#include "org/oss/pdfreporter/progress/IProgressHandler.h"
#include "org/oss/pdfreporter/progress/ProgressManager.h"

@implementation OrgOssPdfreporterProgressProgressManager

static JavaUtilLoggingLogger * OrgOssPdfreporterProgressProgressManager_logger_;

@synthesize handler = handler_;
@synthesize state = state_;
@synthesize maxRecords = maxRecords_;
@synthesize logTriggerRecordsInterval = logTriggerRecordsInterval_;
@synthesize startTime = startTime_;
@synthesize timeElapsed = timeElapsed_;
@synthesize recordsComplete = recordsComplete_;

+ (JavaUtilLoggingLogger *)logger {
  return OrgOssPdfreporterProgressProgressManager_logger_;
}

- (id)initOrgOssPdfreporterProgressProgressManagerWithOrgOssPdfreporterProgressIProgressHandler_ProgressStateEnum:(OrgOssPdfreporterProgressIProgressHandler_ProgressStateEnum *)state
                                                                                                          withInt:(int)maxRecords {
  if ((self = [super init])) {
    id<JavaUtilList> handlers = [((id<OrgOssPdfreporterExtensionsExtensionsRegistry>) nil_chk([OrgOssPdfreporterExtensionsExtensionsEnvironment getExtensionsRegistry])) getExtensionsWithIOSClass:[IOSClass classWithProtocol:@protocol(OrgOssPdfreporterProgressIProgressHandler)]];
    self.handler = [((id<JavaUtilList>) nil_chk(handlers)) isEmpty] ? nil : [((id<JavaUtilList>) nil_chk(handlers)) getWithInt:0];
    self.state = state;
    self.maxRecords = maxRecords;
    self.logTriggerRecordsInterval = maxRecords * OrgOssPdfreporterProgressProgressManager_LOG_TRIGGER_PERCENT_INTERVALL / 100;
    self.recordsComplete = 0;
    self.startTime = [JavaLangSystem currentTimeMillis];
  }
  return self;
}

- (id)initWithOrgOssPdfreporterProgressIProgressHandler_ProgressStateEnum:(OrgOssPdfreporterProgressIProgressHandler_ProgressStateEnum *)state
                                                                  withInt:(int)maxRecords {
  return [self initOrgOssPdfreporterProgressProgressManagerWithOrgOssPdfreporterProgressIProgressHandler_ProgressStateEnum:state withInt:maxRecords];
}

- (id)initWithOrgOssPdfreporterProgressIProgressHandler_ProgressStateEnum:(OrgOssPdfreporterProgressIProgressHandler_ProgressStateEnum *)state {
  return [self initOrgOssPdfreporterProgressProgressManagerWithOrgOssPdfreporterProgressIProgressHandler_ProgressStateEnum:state withInt:-1];
}

- (void)progress {
  [self progressWithBOOL:NO];
}

- (void)progressWithInt:(int)recordCount {
  if (maxRecords_ == -1) {
    @throw [[JavaLangRuntimeException alloc] initWithNSString:@"Cannot calculate percentage without knowing total record count."];
  }
  if (recordCount - recordsComplete_ >= logTriggerRecordsInterval_) {
    recordsComplete_ = recordCount;
    [self progressWithBOOL:YES];
  }
}

- (void)done {
  recordsComplete_ = maxRecords_;
  timeElapsed_ = [JavaLangSystem currentTimeMillis] - startTime_;
  [self notifyProgress];
}

- (void)progressWithBOOL:(BOOL)force {
  long long int elapsed = [JavaLangSystem currentTimeMillis] - startTime_;
  if (elapsed - timeElapsed_ >= OrgOssPdfreporterProgressProgressManager_LOG_TRIGGER_TIME_INTERVALL || force) {
    timeElapsed_ = elapsed;
    [self notifyProgress];
  }
}

- (void)notifyProgress {
  float percentComplete = 100.0f * recordsComplete_ / maxRecords_;
  if (handler_ != nil) {
    [handler_ progressWithOrgOssPdfreporterProgressIProgressHandler_ProgressStateEnum:state_ withFloat:percentComplete withLongInt:timeElapsed_];
  }
  if ([((JavaUtilLoggingLogger *) nil_chk(OrgOssPdfreporterProgressProgressManager_logger_)) isLoggableWithJavaUtilLoggingLevel:[JavaUtilLoggingLevel FINER]]) {
    NSString *stateString = [((OrgOssPdfreporterProgressIProgressHandler_ProgressStateEnum *) nil_chk(state_)) description];
    [((JavaUtilLoggingLogger *) nil_chk(OrgOssPdfreporterProgressProgressManager_logger_)) finerWithNSString:[NSString stringWithFormat:@"Progress %@%@", state_, [NSString stringWithFormat:[NSString stringWithFormat:@"%%1$%dc %%2$,.2f%%%% done, time elapsed: %%3$TM:%%3$TS.%%3$TL", (10 - [((NSString *) nil_chk(stateString)) length])] , ':', percentComplete, timeElapsed_, nil]]];
  }
}

+ (void)initialize {
  if (self == [OrgOssPdfreporterProgressProgressManager class]) {
    OrgOssPdfreporterProgressProgressManager_logger_ = [JavaUtilLoggingLogger getLoggerWithNSString:[[IOSClass classWithClass:[OrgOssPdfreporterProgressProgressManager class]] getName]];
  }
}

- (void)copyAllPropertiesTo:(id)copy {
  [super copyAllPropertiesTo:copy];
  OrgOssPdfreporterProgressProgressManager *typedCopy = (OrgOssPdfreporterProgressProgressManager *) copy;
  typedCopy.handler = handler_;
  typedCopy.state = state_;
  typedCopy.maxRecords = maxRecords_;
  typedCopy.logTriggerRecordsInterval = logTriggerRecordsInterval_;
  typedCopy.startTime = startTime_;
  typedCopy.timeElapsed = timeElapsed_;
  typedCopy.recordsComplete = recordsComplete_;
}

@end
