//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: pdfreporter-core/src/org/oss/pdfreporter/crosstabs/design/JRDesignCrosstab.java
//
//  Created by kendra on 9/27/13.
//

#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "java/lang/Boolean.h"
#include "java/lang/Integer.h"
#include "java/lang/StringBuffer.h"
#include "java/lang/Thread.h"
#include "java/util/ArrayList.h"
#include "java/util/Collection.h"
#include "java/util/HashMap.h"
#include "java/util/Iterator.h"
#include "java/util/List.h"
#include "java/util/ListIterator.h"
#include "java/util/Locale.h"
#include "java/util/Map.h"
#include "java/util/TimeZone.h"
#include "java/util/logging/Logger.h"
#include "org/oss/pdfreporter/commons/arrays/Array2D.h"
#include "org/oss/pdfreporter/commons/arrays/Array2DImpl.h"
#include "org/oss/pdfreporter/crosstabs/JRCellContents.h"
#include "org/oss/pdfreporter/crosstabs/JRCrosstab.h"
#include "org/oss/pdfreporter/crosstabs/JRCrosstabBucket.h"
#include "org/oss/pdfreporter/crosstabs/JRCrosstabCell.h"
#include "org/oss/pdfreporter/crosstabs/JRCrosstabColumnGroup.h"
#include "org/oss/pdfreporter/crosstabs/JRCrosstabDataset.h"
#include "org/oss/pdfreporter/crosstabs/JRCrosstabMeasure.h"
#include "org/oss/pdfreporter/crosstabs/JRCrosstabParameter.h"
#include "org/oss/pdfreporter/crosstabs/JRCrosstabRowGroup.h"
#include "org/oss/pdfreporter/crosstabs/base/JRBaseCrosstab.h"
#include "org/oss/pdfreporter/crosstabs/design/JRCrosstabOrigin.h"
#include "org/oss/pdfreporter/crosstabs/design/JRDesignCellContents.h"
#include "org/oss/pdfreporter/crosstabs/design/JRDesignCrosstab.h"
#include "org/oss/pdfreporter/crosstabs/design/JRDesignCrosstabCell.h"
#include "org/oss/pdfreporter/crosstabs/design/JRDesignCrosstabColumnGroup.h"
#include "org/oss/pdfreporter/crosstabs/design/JRDesignCrosstabDataset.h"
#include "org/oss/pdfreporter/crosstabs/design/JRDesignCrosstabGroup.h"
#include "org/oss/pdfreporter/crosstabs/design/JRDesignCrosstabMeasure.h"
#include "org/oss/pdfreporter/crosstabs/design/JRDesignCrosstabParameter.h"
#include "org/oss/pdfreporter/crosstabs/design/JRDesignCrosstabRowGroup.h"
#include "org/oss/pdfreporter/engine/JRDefaultStyleProvider.h"
#include "org/oss/pdfreporter/engine/JRElement.h"
#include "org/oss/pdfreporter/engine/JRException.h"
#include "org/oss/pdfreporter/engine/JRExpression.h"
#include "org/oss/pdfreporter/engine/JRExpressionCollector.h"
#include "org/oss/pdfreporter/engine/JRLineBox.h"
#include "org/oss/pdfreporter/engine/JRParameter.h"
#include "org/oss/pdfreporter/engine/JRVariable.h"
#include "org/oss/pdfreporter/engine/JRVisitor.h"
#include "org/oss/pdfreporter/engine/ReportContext.h"
#include "org/oss/pdfreporter/engine/base/JRBaseElement.h"
#include "org/oss/pdfreporter/engine/base/JRBaseLineBox.h"
#include "org/oss/pdfreporter/engine/design/JRDesignVariable.h"
#include "org/oss/pdfreporter/engine/design/events/JRPropertyChangeSupport.h"
#include "org/oss/pdfreporter/engine/type/CalculationEnum.h"
#include "org/oss/pdfreporter/engine/type/ModeEnum.h"
#include "org/oss/pdfreporter/engine/type/RunDirectionEnum.h"
#include "org/oss/pdfreporter/engine/util/FileResolver.h"
#include "org/oss/pdfreporter/engine/util/JRCloneUtils.h"
#include "org/oss/pdfreporter/engine/util/JRStyleResolver.h"
#include "org/oss/pdfreporter/engine/util/Pair.h"
#include "org/oss/pdfreporter/geometry/IColor.h"
#include "org/oss/pdfreporter/text/format/factory/IFormatFactory.h"
#include "org/oss/pdfreporter/uses/org/apache/commons/collections/SequencedHashMap.h"

@implementation OrgOssPdfreporterCrosstabsDesignJRDesignCrosstab

static JavaUtilLoggingLogger * OrgOssPdfreporterCrosstabsDesignJRDesignCrosstab_logger_;
static NSString * OrgOssPdfreporterCrosstabsDesignJRDesignCrosstab_PROPERTY_COLUMN_BREAK_OFFSET_ = @"columnBreakOffset";
static NSString * OrgOssPdfreporterCrosstabsDesignJRDesignCrosstab_PROPERTY_DATASET_ = @"dataset";
static NSString * OrgOssPdfreporterCrosstabsDesignJRDesignCrosstab_PROPERTY_HEADER_CELL_ = @"headerCell";
static NSString * OrgOssPdfreporterCrosstabsDesignJRDesignCrosstab_PROPERTY_PARAMETERS_MAP_EXPRESSION_ = @"parametersMapExpression";
static NSString * OrgOssPdfreporterCrosstabsDesignJRDesignCrosstab_PROPERTY_REPEAT_COLUMN_HEADERS_ = @"repeatColumnHeaders";
static NSString * OrgOssPdfreporterCrosstabsDesignJRDesignCrosstab_PROPERTY_REPEAT_ROW_HEADERS_ = @"repeatRowHeaders";
static NSString * OrgOssPdfreporterCrosstabsDesignJRDesignCrosstab_PROPERTY_WHEN_NO_DATA_CELL_ = @"whenNoDataCell";
static NSString * OrgOssPdfreporterCrosstabsDesignJRDesignCrosstab_PROPERTY_CELLS_ = @"cells";
static NSString * OrgOssPdfreporterCrosstabsDesignJRDesignCrosstab_PROPERTY_ROW_GROUPS_ = @"rowGroups";
static NSString * OrgOssPdfreporterCrosstabsDesignJRDesignCrosstab_PROPERTY_COLUMN_GROUPS_ = @"columnGroups";
static NSString * OrgOssPdfreporterCrosstabsDesignJRDesignCrosstab_PROPERTY_MEASURES_ = @"measures";
static NSString * OrgOssPdfreporterCrosstabsDesignJRDesignCrosstab_PROPERTY_PARAMETERS_ = @"parameters";
static NSString * OrgOssPdfreporterCrosstabsDesignJRDesignCrosstab_PROPERTY_IGNORE_WIDTH_ = @"ignoreWidth";
static IOSObjectArray * OrgOssPdfreporterCrosstabsDesignJRDesignCrosstab_BUILT_IN_PARAMETERS_;
static IOSObjectArray * OrgOssPdfreporterCrosstabsDesignJRDesignCrosstab_BUILT_IN_VARIABLES_;

@synthesize parametersList = parametersList_;
@synthesize parametersMap = parametersMap_;
@synthesize variablesList = variablesList_;
@synthesize parametersMapExpression = parametersMapExpression_;
@synthesize dataset = dataset_;
@synthesize rowGroups = rowGroups_;
@synthesize columnGroups = columnGroups_;
@synthesize measures = measures_;
@synthesize rowGroupsMap = rowGroupsMap_;
@synthesize columnGroupsMap = columnGroupsMap_;
@synthesize measuresMap = measuresMap_;
@synthesize columnBreakOffset = columnBreakOffset_;
@synthesize repeatColumnHeaders = repeatColumnHeaders_;
@synthesize repeatRowHeaders = repeatRowHeaders_;
@synthesize runDirectionValue = runDirectionValue_;
@synthesize cellsList = cellsList_;
@synthesize cellsMap = cellsMap_;
@synthesize crossCells = crossCells_;
@synthesize whenNoDataCell = whenNoDataCell_;
@synthesize headerCell = headerCell_;
@synthesize ignoreWidth = ignoreWidth_;
@synthesize lineBox = lineBox_;

+ (JavaUtilLoggingLogger *)logger {
  return OrgOssPdfreporterCrosstabsDesignJRDesignCrosstab_logger_;
}

+ (NSString *)PROPERTY_COLUMN_BREAK_OFFSET {
  return OrgOssPdfreporterCrosstabsDesignJRDesignCrosstab_PROPERTY_COLUMN_BREAK_OFFSET_;
}

+ (NSString *)PROPERTY_DATASET {
  return OrgOssPdfreporterCrosstabsDesignJRDesignCrosstab_PROPERTY_DATASET_;
}

+ (NSString *)PROPERTY_HEADER_CELL {
  return OrgOssPdfreporterCrosstabsDesignJRDesignCrosstab_PROPERTY_HEADER_CELL_;
}

+ (NSString *)PROPERTY_PARAMETERS_MAP_EXPRESSION {
  return OrgOssPdfreporterCrosstabsDesignJRDesignCrosstab_PROPERTY_PARAMETERS_MAP_EXPRESSION_;
}

+ (NSString *)PROPERTY_REPEAT_COLUMN_HEADERS {
  return OrgOssPdfreporterCrosstabsDesignJRDesignCrosstab_PROPERTY_REPEAT_COLUMN_HEADERS_;
}

+ (NSString *)PROPERTY_REPEAT_ROW_HEADERS {
  return OrgOssPdfreporterCrosstabsDesignJRDesignCrosstab_PROPERTY_REPEAT_ROW_HEADERS_;
}

+ (NSString *)PROPERTY_WHEN_NO_DATA_CELL {
  return OrgOssPdfreporterCrosstabsDesignJRDesignCrosstab_PROPERTY_WHEN_NO_DATA_CELL_;
}

+ (NSString *)PROPERTY_CELLS {
  return OrgOssPdfreporterCrosstabsDesignJRDesignCrosstab_PROPERTY_CELLS_;
}

+ (NSString *)PROPERTY_ROW_GROUPS {
  return OrgOssPdfreporterCrosstabsDesignJRDesignCrosstab_PROPERTY_ROW_GROUPS_;
}

+ (NSString *)PROPERTY_COLUMN_GROUPS {
  return OrgOssPdfreporterCrosstabsDesignJRDesignCrosstab_PROPERTY_COLUMN_GROUPS_;
}

+ (NSString *)PROPERTY_MEASURES {
  return OrgOssPdfreporterCrosstabsDesignJRDesignCrosstab_PROPERTY_MEASURES_;
}

+ (NSString *)PROPERTY_PARAMETERS {
  return OrgOssPdfreporterCrosstabsDesignJRDesignCrosstab_PROPERTY_PARAMETERS_;
}

+ (NSString *)PROPERTY_IGNORE_WIDTH {
  return OrgOssPdfreporterCrosstabsDesignJRDesignCrosstab_PROPERTY_IGNORE_WIDTH_;
}

+ (IOSObjectArray *)BUILT_IN_PARAMETERS {
  return OrgOssPdfreporterCrosstabsDesignJRDesignCrosstab_BUILT_IN_PARAMETERS_;
}

+ (IOSObjectArray *)BUILT_IN_VARIABLES {
  return OrgOssPdfreporterCrosstabsDesignJRDesignCrosstab_BUILT_IN_VARIABLES_;
}

- (id)initOrgOssPdfreporterCrosstabsDesignJRDesignCrosstabWithOrgOssPdfreporterEngineJRDefaultStyleProvider:(id<OrgOssPdfreporterEngineJRDefaultStyleProvider>)defaultStyleProvider {
  if ((self = [super initWithOrgOssPdfreporterEngineJRDefaultStyleProvider:defaultStyleProvider])) {
    columnBreakOffset_ = OrgOssPdfreporterCrosstabsJRCrosstab_DEFAULT_COLUMN_BREAK_OFFSET;
    repeatColumnHeaders_ = YES;
    repeatRowHeaders_ = YES;
    parametersList_ = [[JavaUtilArrayList alloc] init];
    parametersMap_ = [[JavaUtilHashMap alloc] init];
    rowGroupsMap_ = [[JavaUtilHashMap alloc] init];
    rowGroups_ = [[JavaUtilArrayList alloc] init];
    columnGroupsMap_ = [[JavaUtilHashMap alloc] init];
    columnGroups_ = [[JavaUtilArrayList alloc] init];
    measuresMap_ = [[JavaUtilHashMap alloc] init];
    measures_ = [[JavaUtilArrayList alloc] init];
    cellsMap_ = [[JavaUtilHashMap alloc] init];
    cellsList_ = [[JavaUtilArrayList alloc] init];
    [self addBuiltinParameters];
    variablesList_ = [[OrgOssPdfreporterUsesOrgApacheCommonsCollectionsSequencedHashMap alloc] init];
    [self addBuiltinVariables];
    dataset_ = [[OrgOssPdfreporterCrosstabsDesignJRDesignCrosstabDataset alloc] init];
    lineBox_ = [[OrgOssPdfreporterEngineBaseJRBaseLineBox alloc] initWithOrgOssPdfreporterEngineJRBoxContainer:self];
  }
  return self;
}

- (id)initWithOrgOssPdfreporterEngineJRDefaultStyleProvider:(id<OrgOssPdfreporterEngineJRDefaultStyleProvider>)defaultStyleProvider {
  return [self initOrgOssPdfreporterCrosstabsDesignJRDesignCrosstabWithOrgOssPdfreporterEngineJRDefaultStyleProvider:defaultStyleProvider];
}

- (void)addBuiltinParameters {
  for (int i = 0; i < (int) [((IOSObjectArray *) nil_chk(OrgOssPdfreporterCrosstabsDesignJRDesignCrosstab_BUILT_IN_PARAMETERS_)) count]; i++) {
    OrgOssPdfreporterCrosstabsDesignJRDesignCrosstabParameter *parameter = [[OrgOssPdfreporterCrosstabsDesignJRDesignCrosstabParameter alloc] init];
    [((OrgOssPdfreporterCrosstabsDesignJRDesignCrosstabParameter *) nil_chk(parameter)) setNameWithNSString:(NSString *) [((IOSObjectArray *) nil_chk(OrgOssPdfreporterCrosstabsDesignJRDesignCrosstab_BUILT_IN_PARAMETERS_)) objectAtIndex:i++]];
    [((OrgOssPdfreporterCrosstabsDesignJRDesignCrosstabParameter *) nil_chk(parameter)) setValueClassWithIOSClass:(IOSClass *) [((IOSObjectArray *) nil_chk(OrgOssPdfreporterCrosstabsDesignJRDesignCrosstab_BUILT_IN_PARAMETERS_)) objectAtIndex:i]];
    [((OrgOssPdfreporterCrosstabsDesignJRDesignCrosstabParameter *) nil_chk(parameter)) setSystemDefinedWithBOOL:YES];
    @try {
      [self addParameterWithOrgOssPdfreporterCrosstabsJRCrosstabParameter:parameter];
    }
    @catch (OrgOssPdfreporterEngineJRException *e) {
    }
  }
}

- (void)addBuiltinVariables {
  for (int i = 0; i < (int) [((IOSObjectArray *) nil_chk(OrgOssPdfreporterCrosstabsDesignJRDesignCrosstab_BUILT_IN_VARIABLES_)) count]; ++i) {
    OrgOssPdfreporterEngineDesignJRDesignVariable *variable = [[OrgOssPdfreporterEngineDesignJRDesignVariable alloc] init];
    [((OrgOssPdfreporterEngineDesignJRDesignVariable *) nil_chk(variable)) setNameWithNSString:(NSString *) [((IOSObjectArray *) nil_chk(OrgOssPdfreporterCrosstabsDesignJRDesignCrosstab_BUILT_IN_VARIABLES_)) objectAtIndex:i]];
    [((OrgOssPdfreporterEngineDesignJRDesignVariable *) nil_chk(variable)) setValueClassWithIOSClass:(IOSClass *) [((IOSObjectArray *) nil_chk(OrgOssPdfreporterCrosstabsDesignJRDesignCrosstab_BUILT_IN_VARIABLES_)) objectAtIndex:++i]];
    [((OrgOssPdfreporterEngineDesignJRDesignVariable *) nil_chk(variable)) setCalculationWithOrgOssPdfreporterEngineTypeCalculationEnumEnum:[OrgOssPdfreporterEngineTypeCalculationEnumEnum SYSTEM]];
    [((OrgOssPdfreporterEngineDesignJRDesignVariable *) nil_chk(variable)) setSystemDefinedWithBOOL:YES];
    [self addVariableWithOrgOssPdfreporterEngineJRVariable:variable];
  }
}

- (id)init {
  return [self initOrgOssPdfreporterCrosstabsDesignJRDesignCrosstabWithOrgOssPdfreporterEngineJRDefaultStyleProvider:nil];
}

- (int)getId {
  return 0;
}

- (id<OrgOssPdfreporterCrosstabsJRCrosstabDataset>)getDataset {
  return dataset_;
}

- (OrgOssPdfreporterCrosstabsDesignJRDesignCrosstabDataset *)getDesignDataset {
  return dataset_;
}

- (IOSObjectArray *)getRowGroups {
  IOSObjectArray *groups = [IOSObjectArray arrayWithLength:[((id<JavaUtilList>) nil_chk(rowGroups_)) size] type:[IOSClass classWithProtocol:@protocol(OrgOssPdfreporterCrosstabsJRCrosstabRowGroup)]];
  (void) [((id<JavaUtilList>) nil_chk(rowGroups_)) toArrayWithNSObjectArray:groups];
  return groups;
}

- (IOSObjectArray *)getColumnGroups {
  IOSObjectArray *groups = [IOSObjectArray arrayWithLength:[((id<JavaUtilList>) nil_chk(columnGroups_)) size] type:[IOSClass classWithProtocol:@protocol(OrgOssPdfreporterCrosstabsJRCrosstabColumnGroup)]];
  (void) [((id<JavaUtilList>) nil_chk(columnGroups_)) toArrayWithNSObjectArray:groups];
  return groups;
}

- (IOSObjectArray *)getMeasures {
  IOSObjectArray *measureArray = [IOSObjectArray arrayWithLength:[((id<JavaUtilList>) nil_chk(measures_)) size] type:[IOSClass classWithProtocol:@protocol(OrgOssPdfreporterCrosstabsJRCrosstabMeasure)]];
  (void) [((id<JavaUtilList>) nil_chk(measures_)) toArrayWithNSObjectArray:measureArray];
  return measureArray;
}

- (void)collectExpressionsWithOrgOssPdfreporterEngineJRExpressionCollector:(OrgOssPdfreporterEngineJRExpressionCollector *)collector {
  [((OrgOssPdfreporterEngineJRExpressionCollector *) nil_chk(collector)) collectWithOrgOssPdfreporterCrosstabsJRCrosstab:self];
}

- (void)visitWithOrgOssPdfreporterEngineJRVisitor:(id<OrgOssPdfreporterEngineJRVisitor>)visitor {
  [((id<OrgOssPdfreporterEngineJRVisitor>) nil_chk(visitor)) visitCrosstabWithOrgOssPdfreporterCrosstabsJRCrosstab:self];
}

- (void)setDatasetWithOrgOssPdfreporterCrosstabsDesignJRDesignCrosstabDataset:(OrgOssPdfreporterCrosstabsDesignJRDesignCrosstabDataset *)dataset {
  id old = self.dataset;
  self.dataset = dataset;
  [((OrgOssPdfreporterEngineDesignEventsJRPropertyChangeSupport *) nil_chk([self getEventSupport])) firePropertyChangeWithNSString:OrgOssPdfreporterCrosstabsDesignJRDesignCrosstab_PROPERTY_DATASET_ withId:old withId:self.dataset];
}

- (void)addRowGroupWithOrgOssPdfreporterCrosstabsDesignJRDesignCrosstabRowGroup:(OrgOssPdfreporterCrosstabsDesignJRDesignCrosstabRowGroup *)group {
  NSString *groupName = [((OrgOssPdfreporterCrosstabsDesignJRDesignCrosstabRowGroup *) nil_chk(group)) getName];
  if ([((id<JavaUtilMap>) nil_chk(rowGroupsMap_)) containsKeyWithId:groupName] || [((id<JavaUtilMap>) nil_chk(columnGroupsMap_)) containsKeyWithId:groupName] || [((id<JavaUtilMap>) nil_chk(measuresMap_)) containsKeyWithId:groupName]) {
    @throw [[OrgOssPdfreporterEngineJRException alloc] initWithNSString:@"A group or measure having the same name already exists in the crosstab."];
  }
  (void) [((id<JavaUtilMap>) nil_chk(rowGroupsMap_)) putWithId:groupName withId:[JavaLangInteger valueOfWithInt:[((id<JavaUtilList>) nil_chk(rowGroups_)) size]]];
  [((id<JavaUtilList>) nil_chk(rowGroups_)) addWithId:group];
  [self addRowGroupVarsWithOrgOssPdfreporterCrosstabsDesignJRDesignCrosstabRowGroup:group];
  [self setParentWithOrgOssPdfreporterCrosstabsDesignJRDesignCrosstabGroup:group];
  [((OrgOssPdfreporterEngineDesignEventsJRPropertyChangeSupport *) nil_chk([self getEventSupport])) fireCollectionElementAddedEventWithNSString:OrgOssPdfreporterCrosstabsDesignJRDesignCrosstab_PROPERTY_ROW_GROUPS_ withId:group withInt:[((id<JavaUtilList>) nil_chk(rowGroups_)) size] - 1];
}

- (void)addRowGroupWithInt:(int)index
withOrgOssPdfreporterCrosstabsDesignJRDesignCrosstabRowGroup:(OrgOssPdfreporterCrosstabsDesignJRDesignCrosstabRowGroup *)group {
  NSString *groupName = [((OrgOssPdfreporterCrosstabsDesignJRDesignCrosstabRowGroup *) nil_chk(group)) getName];
  if ([((id<JavaUtilMap>) nil_chk(rowGroupsMap_)) containsKeyWithId:groupName] || [((id<JavaUtilMap>) nil_chk(columnGroupsMap_)) containsKeyWithId:groupName] || [((id<JavaUtilMap>) nil_chk(measuresMap_)) containsKeyWithId:groupName]) {
    @throw [[OrgOssPdfreporterEngineJRException alloc] initWithNSString:@"A group or measure having the same name already exists in the crosstab."];
  }
  (void) [((id<JavaUtilMap>) nil_chk(rowGroupsMap_)) putWithId:groupName withId:[JavaLangInteger valueOfWithInt:[((id<JavaUtilList>) nil_chk(rowGroups_)) size]]];
  [((id<JavaUtilList>) nil_chk(rowGroups_)) addWithInt:index withId:group];
  [self addRowGroupVarsWithOrgOssPdfreporterCrosstabsDesignJRDesignCrosstabRowGroup:group];
  [self setParentWithOrgOssPdfreporterCrosstabsDesignJRDesignCrosstabGroup:group];
  [((OrgOssPdfreporterEngineDesignEventsJRPropertyChangeSupport *) nil_chk([self getEventSupport])) fireCollectionElementAddedEventWithNSString:OrgOssPdfreporterCrosstabsDesignJRDesignCrosstab_PROPERTY_ROW_GROUPS_ withId:group withInt:index];
}

- (void)addRowGroupVarsWithOrgOssPdfreporterCrosstabsDesignJRDesignCrosstabRowGroup:(OrgOssPdfreporterCrosstabsDesignJRDesignCrosstabRowGroup *)rowGroup {
  [self addVariableWithOrgOssPdfreporterEngineJRVariable:[((OrgOssPdfreporterCrosstabsDesignJRDesignCrosstabRowGroup *) nil_chk(rowGroup)) getVariable]];
  for (id<JavaUtilIterator> measureIt = [((id<JavaUtilList>) nil_chk(measures_)) iterator]; [((id<JavaUtilIterator>) nil_chk(measureIt)) hasNext]; ) {
    id<OrgOssPdfreporterCrosstabsJRCrosstabMeasure> measure = [((id<JavaUtilIterator>) nil_chk(measureIt)) next];
    [self addTotalVarWithOrgOssPdfreporterCrosstabsJRCrosstabMeasure:measure withOrgOssPdfreporterCrosstabsJRCrosstabRowGroup:rowGroup withOrgOssPdfreporterCrosstabsJRCrosstabColumnGroup:nil];
    for (id<JavaUtilIterator> colIt = [((id<JavaUtilList>) nil_chk(columnGroups_)) iterator]; [((id<JavaUtilIterator>) nil_chk(colIt)) hasNext]; ) {
      id<OrgOssPdfreporterCrosstabsJRCrosstabColumnGroup> colGroup = [((id<JavaUtilIterator>) nil_chk(colIt)) next];
      [self addTotalVarWithOrgOssPdfreporterCrosstabsJRCrosstabMeasure:measure withOrgOssPdfreporterCrosstabsJRCrosstabRowGroup:rowGroup withOrgOssPdfreporterCrosstabsJRCrosstabColumnGroup:colGroup];
    }
  }
}

- (void)addColumnGroupWithOrgOssPdfreporterCrosstabsDesignJRDesignCrosstabColumnGroup:(OrgOssPdfreporterCrosstabsDesignJRDesignCrosstabColumnGroup *)group {
  NSString *groupName = [((OrgOssPdfreporterCrosstabsDesignJRDesignCrosstabColumnGroup *) nil_chk(group)) getName];
  if ([((id<JavaUtilMap>) nil_chk(rowGroupsMap_)) containsKeyWithId:groupName] || [((id<JavaUtilMap>) nil_chk(columnGroupsMap_)) containsKeyWithId:groupName] || [((id<JavaUtilMap>) nil_chk(measuresMap_)) containsKeyWithId:groupName]) {
    @throw [[OrgOssPdfreporterEngineJRException alloc] initWithNSString:@"A group or measure having the same name already exists in the crosstab."];
  }
  (void) [((id<JavaUtilMap>) nil_chk(columnGroupsMap_)) putWithId:groupName withId:[JavaLangInteger valueOfWithInt:[((id<JavaUtilList>) nil_chk(columnGroups_)) size]]];
  [((id<JavaUtilList>) nil_chk(columnGroups_)) addWithId:group];
  [self addColGroupVarsWithOrgOssPdfreporterCrosstabsDesignJRDesignCrosstabColumnGroup:group];
  [self setParentWithOrgOssPdfreporterCrosstabsDesignJRDesignCrosstabGroup:group];
  [((OrgOssPdfreporterEngineDesignEventsJRPropertyChangeSupport *) nil_chk([self getEventSupport])) fireCollectionElementAddedEventWithNSString:OrgOssPdfreporterCrosstabsDesignJRDesignCrosstab_PROPERTY_COLUMN_GROUPS_ withId:group withInt:[((id<JavaUtilList>) nil_chk(columnGroups_)) size] - 1];
}

- (void)addColumnGroupWithInt:(int)index
withOrgOssPdfreporterCrosstabsDesignJRDesignCrosstabColumnGroup:(OrgOssPdfreporterCrosstabsDesignJRDesignCrosstabColumnGroup *)group {
  NSString *groupName = [((OrgOssPdfreporterCrosstabsDesignJRDesignCrosstabColumnGroup *) nil_chk(group)) getName];
  if ([((id<JavaUtilMap>) nil_chk(rowGroupsMap_)) containsKeyWithId:groupName] || [((id<JavaUtilMap>) nil_chk(columnGroupsMap_)) containsKeyWithId:groupName] || [((id<JavaUtilMap>) nil_chk(measuresMap_)) containsKeyWithId:groupName]) {
    @throw [[OrgOssPdfreporterEngineJRException alloc] initWithNSString:@"A group or measure having the same name already exists in the crosstab."];
  }
  (void) [((id<JavaUtilMap>) nil_chk(columnGroupsMap_)) putWithId:groupName withId:[JavaLangInteger valueOfWithInt:[((id<JavaUtilList>) nil_chk(columnGroups_)) size]]];
  [((id<JavaUtilList>) nil_chk(columnGroups_)) addWithInt:index withId:group];
  [self addColGroupVarsWithOrgOssPdfreporterCrosstabsDesignJRDesignCrosstabColumnGroup:group];
  [self setParentWithOrgOssPdfreporterCrosstabsDesignJRDesignCrosstabGroup:group];
  [((OrgOssPdfreporterEngineDesignEventsJRPropertyChangeSupport *) nil_chk([self getEventSupport])) fireCollectionElementAddedEventWithNSString:OrgOssPdfreporterCrosstabsDesignJRDesignCrosstab_PROPERTY_COLUMN_GROUPS_ withId:group withInt:index];
}

- (void)addColGroupVarsWithOrgOssPdfreporterCrosstabsDesignJRDesignCrosstabColumnGroup:(OrgOssPdfreporterCrosstabsDesignJRDesignCrosstabColumnGroup *)colGroup {
  [self addVariableWithOrgOssPdfreporterEngineJRVariable:[((OrgOssPdfreporterCrosstabsDesignJRDesignCrosstabColumnGroup *) nil_chk(colGroup)) getVariable]];
  for (id<JavaUtilIterator> measureIt = [((id<JavaUtilList>) nil_chk(measures_)) iterator]; [((id<JavaUtilIterator>) nil_chk(measureIt)) hasNext]; ) {
    id<OrgOssPdfreporterCrosstabsJRCrosstabMeasure> measure = [((id<JavaUtilIterator>) nil_chk(measureIt)) next];
    [self addTotalVarWithOrgOssPdfreporterCrosstabsJRCrosstabMeasure:measure withOrgOssPdfreporterCrosstabsJRCrosstabRowGroup:nil withOrgOssPdfreporterCrosstabsJRCrosstabColumnGroup:colGroup];
    for (id<JavaUtilIterator> rowIt = [((id<JavaUtilList>) nil_chk(rowGroups_)) iterator]; [((id<JavaUtilIterator>) nil_chk(rowIt)) hasNext]; ) {
      id<OrgOssPdfreporterCrosstabsJRCrosstabRowGroup> rowGroup = [((id<JavaUtilIterator>) nil_chk(rowIt)) next];
      [self addTotalVarWithOrgOssPdfreporterCrosstabsJRCrosstabMeasure:measure withOrgOssPdfreporterCrosstabsJRCrosstabRowGroup:rowGroup withOrgOssPdfreporterCrosstabsJRCrosstabColumnGroup:colGroup];
    }
  }
}

- (void)addMeasureWithOrgOssPdfreporterCrosstabsDesignJRDesignCrosstabMeasure:(OrgOssPdfreporterCrosstabsDesignJRDesignCrosstabMeasure *)measure {
  NSString *measureName = [((OrgOssPdfreporterCrosstabsDesignJRDesignCrosstabMeasure *) nil_chk(measure)) getName];
  if ([((id<JavaUtilMap>) nil_chk(rowGroupsMap_)) containsKeyWithId:measureName] || [((id<JavaUtilMap>) nil_chk(columnGroupsMap_)) containsKeyWithId:measureName] || [((id<JavaUtilMap>) nil_chk(measuresMap_)) containsKeyWithId:measureName]) {
    @throw [[OrgOssPdfreporterEngineJRException alloc] initWithNSString:@"A group or measure having the same name already exists in the crosstab."];
  }
  (void) [((id<JavaUtilMap>) nil_chk(measuresMap_)) putWithId:measureName withId:[JavaLangInteger valueOfWithInt:[((id<JavaUtilList>) nil_chk(measures_)) size]]];
  [((id<JavaUtilList>) nil_chk(measures_)) addWithId:measure];
  [self addMeasureVarsWithOrgOssPdfreporterCrosstabsDesignJRDesignCrosstabMeasure:measure];
  [((OrgOssPdfreporterEngineDesignEventsJRPropertyChangeSupport *) nil_chk([self getEventSupport])) fireCollectionElementAddedEventWithNSString:OrgOssPdfreporterCrosstabsDesignJRDesignCrosstab_PROPERTY_MEASURES_ withId:measure withInt:[((id<JavaUtilList>) nil_chk(measures_)) size] - 1];
}

- (void)addMeasureWithInt:(int)index
withOrgOssPdfreporterCrosstabsDesignJRDesignCrosstabMeasure:(OrgOssPdfreporterCrosstabsDesignJRDesignCrosstabMeasure *)measure {
  NSString *measureName = [((OrgOssPdfreporterCrosstabsDesignJRDesignCrosstabMeasure *) nil_chk(measure)) getName];
  if ([((id<JavaUtilMap>) nil_chk(rowGroupsMap_)) containsKeyWithId:measureName] || [((id<JavaUtilMap>) nil_chk(columnGroupsMap_)) containsKeyWithId:measureName] || [((id<JavaUtilMap>) nil_chk(measuresMap_)) containsKeyWithId:measureName]) {
    @throw [[OrgOssPdfreporterEngineJRException alloc] initWithNSString:@"A group or measure having the same name already exists in the crosstab."];
  }
  (void) [((id<JavaUtilMap>) nil_chk(measuresMap_)) putWithId:measureName withId:[JavaLangInteger valueOfWithInt:[((id<JavaUtilList>) nil_chk(measures_)) size]]];
  [((id<JavaUtilList>) nil_chk(measures_)) addWithInt:index withId:measure];
  [self addMeasureVarsWithOrgOssPdfreporterCrosstabsDesignJRDesignCrosstabMeasure:measure];
  [((OrgOssPdfreporterEngineDesignEventsJRPropertyChangeSupport *) nil_chk([self getEventSupport])) fireCollectionElementAddedEventWithNSString:OrgOssPdfreporterCrosstabsDesignJRDesignCrosstab_PROPERTY_MEASURES_ withId:measure withInt:index];
}

- (void)addMeasureVarsWithOrgOssPdfreporterCrosstabsDesignJRDesignCrosstabMeasure:(OrgOssPdfreporterCrosstabsDesignJRDesignCrosstabMeasure *)measure {
  [self addVariableWithOrgOssPdfreporterEngineJRVariable:[((OrgOssPdfreporterCrosstabsDesignJRDesignCrosstabMeasure *) nil_chk(measure)) getVariable]];
  for (id<JavaUtilIterator> colIt = [((id<JavaUtilList>) nil_chk(columnGroups_)) iterator]; [((id<JavaUtilIterator>) nil_chk(colIt)) hasNext]; ) {
    id<OrgOssPdfreporterCrosstabsJRCrosstabColumnGroup> colGroup = [((id<JavaUtilIterator>) nil_chk(colIt)) next];
    [self addTotalVarWithOrgOssPdfreporterCrosstabsJRCrosstabMeasure:measure withOrgOssPdfreporterCrosstabsJRCrosstabRowGroup:nil withOrgOssPdfreporterCrosstabsJRCrosstabColumnGroup:colGroup];
  }
  for (id<JavaUtilIterator> rowIt = [((id<JavaUtilList>) nil_chk(rowGroups_)) iterator]; [((id<JavaUtilIterator>) nil_chk(rowIt)) hasNext]; ) {
    id<OrgOssPdfreporterCrosstabsJRCrosstabRowGroup> rowGroup = [((id<JavaUtilIterator>) nil_chk(rowIt)) next];
    [self addTotalVarWithOrgOssPdfreporterCrosstabsJRCrosstabMeasure:measure withOrgOssPdfreporterCrosstabsJRCrosstabRowGroup:rowGroup withOrgOssPdfreporterCrosstabsJRCrosstabColumnGroup:nil];
    for (id<JavaUtilIterator> colIt = [((id<JavaUtilList>) nil_chk(columnGroups_)) iterator]; [((id<JavaUtilIterator>) nil_chk(colIt)) hasNext]; ) {
      id<OrgOssPdfreporterCrosstabsJRCrosstabColumnGroup> colGroup = [((id<JavaUtilIterator>) nil_chk(colIt)) next];
      [self addTotalVarWithOrgOssPdfreporterCrosstabsJRCrosstabMeasure:measure withOrgOssPdfreporterCrosstabsJRCrosstabRowGroup:rowGroup withOrgOssPdfreporterCrosstabsJRCrosstabColumnGroup:colGroup];
    }
  }
}

- (void)addTotalVarWithOrgOssPdfreporterCrosstabsJRCrosstabMeasure:(id<OrgOssPdfreporterCrosstabsJRCrosstabMeasure>)measure
                  withOrgOssPdfreporterCrosstabsJRCrosstabRowGroup:(id<OrgOssPdfreporterCrosstabsJRCrosstabRowGroup>)rowGroup
               withOrgOssPdfreporterCrosstabsJRCrosstabColumnGroup:(id<OrgOssPdfreporterCrosstabsJRCrosstabColumnGroup>)colGroup {
  OrgOssPdfreporterEngineDesignJRDesignVariable *var = [[OrgOssPdfreporterEngineDesignJRDesignVariable alloc] init];
  [((OrgOssPdfreporterEngineDesignJRDesignVariable *) nil_chk(var)) setCalculationWithOrgOssPdfreporterEngineTypeCalculationEnumEnum:[OrgOssPdfreporterEngineTypeCalculationEnumEnum SYSTEM]];
  [((OrgOssPdfreporterEngineDesignJRDesignVariable *) nil_chk(var)) setSystemDefinedWithBOOL:YES];
  [((OrgOssPdfreporterEngineDesignJRDesignVariable *) nil_chk(var)) setNameWithNSString:[OrgOssPdfreporterCrosstabsDesignJRDesignCrosstab getTotalVariableNameWithOrgOssPdfreporterCrosstabsJRCrosstabMeasure:measure withOrgOssPdfreporterCrosstabsJRCrosstabRowGroup:rowGroup withOrgOssPdfreporterCrosstabsJRCrosstabColumnGroup:colGroup]];
  [((OrgOssPdfreporterEngineDesignJRDesignVariable *) nil_chk(var)) setValueClassNameWithNSString:[((id<OrgOssPdfreporterCrosstabsJRCrosstabMeasure>) nil_chk(measure)) getValueClassName]];
  [self addVariableWithOrgOssPdfreporterEngineJRVariable:var];
}

- (void)removeTotalVarWithOrgOssPdfreporterCrosstabsJRCrosstabMeasure:(id<OrgOssPdfreporterCrosstabsJRCrosstabMeasure>)measure
                     withOrgOssPdfreporterCrosstabsJRCrosstabRowGroup:(id<OrgOssPdfreporterCrosstabsJRCrosstabRowGroup>)rowGroup
                  withOrgOssPdfreporterCrosstabsJRCrosstabColumnGroup:(id<OrgOssPdfreporterCrosstabsJRCrosstabColumnGroup>)colGroup {
  NSString *varName = [OrgOssPdfreporterCrosstabsDesignJRDesignCrosstab getTotalVariableNameWithOrgOssPdfreporterCrosstabsJRCrosstabMeasure:measure withOrgOssPdfreporterCrosstabsJRCrosstabRowGroup:rowGroup withOrgOssPdfreporterCrosstabsJRCrosstabColumnGroup:colGroup];
  [self removeVariableWithNSString:varName];
}

+ (NSString *)getTotalVariableNameWithOrgOssPdfreporterCrosstabsJRCrosstabMeasure:(id<OrgOssPdfreporterCrosstabsJRCrosstabMeasure>)measure
                                 withOrgOssPdfreporterCrosstabsJRCrosstabRowGroup:(id<OrgOssPdfreporterCrosstabsJRCrosstabRowGroup>)rowGroup
                              withOrgOssPdfreporterCrosstabsJRCrosstabColumnGroup:(id<OrgOssPdfreporterCrosstabsJRCrosstabColumnGroup>)colGroup {
  JavaLangStringBuffer *name = [[JavaLangStringBuffer alloc] init];
  (void) [((JavaLangStringBuffer *) nil_chk(name)) appendWithNSString:[((id<OrgOssPdfreporterCrosstabsJRCrosstabMeasure>) nil_chk(measure)) getName]];
  if (rowGroup != nil) {
    (void) [((JavaLangStringBuffer *) nil_chk(name)) appendWithUnichar:'_'];
    (void) [((JavaLangStringBuffer *) nil_chk(name)) appendWithNSString:[rowGroup getName]];
  }
  if (colGroup != nil) {
    (void) [((JavaLangStringBuffer *) nil_chk(name)) appendWithUnichar:'_'];
    (void) [((JavaLangStringBuffer *) nil_chk(name)) appendWithNSString:[colGroup getName]];
  }
  (void) [((JavaLangStringBuffer *) nil_chk(name)) appendWithNSString:@"_ALL"];
  return [((JavaLangStringBuffer *) nil_chk(name)) description];
}

- (id<OrgOssPdfreporterCrosstabsJRCrosstabRowGroup>)removeRowGroupWithNSString:(NSString *)groupName {
  id<OrgOssPdfreporterCrosstabsJRCrosstabRowGroup> removed = nil;
  JavaLangInteger *idx = [((id<JavaUtilMap>) nil_chk(rowGroupsMap_)) removeWithId:groupName];
  if (idx != nil) {
    removed = [((id<JavaUtilList>) nil_chk(rowGroups_)) removeWithInt:[idx intValue]];
    for (id<JavaUtilListIterator> it = [((id<JavaUtilList>) nil_chk(rowGroups_)) listIteratorWithInt:[idx intValue]]; [((id<JavaUtilListIterator>) nil_chk(it)) hasNext]; ) {
      id<OrgOssPdfreporterCrosstabsJRCrosstabRowGroup> group = [((id<JavaUtilListIterator>) nil_chk(it)) next];
      (void) [((id<JavaUtilMap>) nil_chk(rowGroupsMap_)) putWithId:[((id<OrgOssPdfreporterCrosstabsJRCrosstabRowGroup>) nil_chk(group)) getName] withId:[JavaLangInteger valueOfWithInt:[((id<JavaUtilListIterator>) nil_chk(it)) previousIndex]]];
    }
    for (id<JavaUtilIterator> it = [((id<JavaUtilList>) nil_chk(cellsList_)) iterator]; [((id<JavaUtilIterator>) nil_chk(it)) hasNext]; ) {
      id<OrgOssPdfreporterCrosstabsJRCrosstabCell> cell = [((id<JavaUtilIterator>) nil_chk(it)) next];
      NSString *rowTotalGroup = [((id<OrgOssPdfreporterCrosstabsJRCrosstabCell>) nil_chk(cell)) getRowTotalGroup];
      if (rowTotalGroup != nil && [((NSString *) nil_chk(rowTotalGroup)) isEqual:groupName]) {
        [((id<JavaUtilIterator>) nil_chk(it)) remove];
        (void) [((id<JavaUtilMap>) nil_chk(cellsMap_)) removeWithId:[[OrgOssPdfreporterEngineUtilPair alloc] initWithId:rowTotalGroup withId:[((id<OrgOssPdfreporterCrosstabsJRCrosstabCell>) nil_chk(cell)) getColumnTotalGroup]]];
        [((OrgOssPdfreporterEngineDesignEventsJRPropertyChangeSupport *) nil_chk([self getEventSupport])) fireCollectionElementRemovedEventWithNSString:OrgOssPdfreporterCrosstabsDesignJRDesignCrosstab_PROPERTY_CELLS_ withId:cell withInt:-1];
      }
    }
    [self removeRowGroupVarsWithOrgOssPdfreporterCrosstabsJRCrosstabRowGroup:removed];
    [((OrgOssPdfreporterEngineDesignEventsJRPropertyChangeSupport *) nil_chk([self getEventSupport])) fireCollectionElementRemovedEventWithNSString:OrgOssPdfreporterCrosstabsDesignJRDesignCrosstab_PROPERTY_ROW_GROUPS_ withId:removed withInt:[idx intValue]];
  }
  return removed;
}

- (void)removeRowGroupVarsWithOrgOssPdfreporterCrosstabsJRCrosstabRowGroup:(id<OrgOssPdfreporterCrosstabsJRCrosstabRowGroup>)rowGroup {
  [self removeVariableWithOrgOssPdfreporterEngineJRVariable:[((id<OrgOssPdfreporterCrosstabsJRCrosstabRowGroup>) nil_chk(rowGroup)) getVariable]];
  for (id<JavaUtilIterator> measureIt = [((id<JavaUtilList>) nil_chk(measures_)) iterator]; [((id<JavaUtilIterator>) nil_chk(measureIt)) hasNext]; ) {
    id<OrgOssPdfreporterCrosstabsJRCrosstabMeasure> measure = [((id<JavaUtilIterator>) nil_chk(measureIt)) next];
    [self removeTotalVarWithOrgOssPdfreporterCrosstabsJRCrosstabMeasure:measure withOrgOssPdfreporterCrosstabsJRCrosstabRowGroup:rowGroup withOrgOssPdfreporterCrosstabsJRCrosstabColumnGroup:nil];
    for (id<JavaUtilIterator> colIt = [((id<JavaUtilList>) nil_chk(columnGroups_)) iterator]; [((id<JavaUtilIterator>) nil_chk(colIt)) hasNext]; ) {
      id<OrgOssPdfreporterCrosstabsJRCrosstabColumnGroup> colGroup = [((id<JavaUtilIterator>) nil_chk(colIt)) next];
      [self removeTotalVarWithOrgOssPdfreporterCrosstabsJRCrosstabMeasure:measure withOrgOssPdfreporterCrosstabsJRCrosstabRowGroup:rowGroup withOrgOssPdfreporterCrosstabsJRCrosstabColumnGroup:colGroup];
    }
  }
}

- (id<OrgOssPdfreporterCrosstabsJRCrosstabRowGroup>)removeRowGroupWithOrgOssPdfreporterCrosstabsJRCrosstabRowGroup:(id<OrgOssPdfreporterCrosstabsJRCrosstabRowGroup>)group {
  return [self removeRowGroupWithNSString:[((id<OrgOssPdfreporterCrosstabsJRCrosstabRowGroup>) nil_chk(group)) getName]];
}

- (id<OrgOssPdfreporterCrosstabsJRCrosstabColumnGroup>)removeColumnGroupWithNSString:(NSString *)groupName {
  id<OrgOssPdfreporterCrosstabsJRCrosstabColumnGroup> removed = nil;
  JavaLangInteger *idx = [((id<JavaUtilMap>) nil_chk(columnGroupsMap_)) removeWithId:groupName];
  if (idx != nil) {
    removed = [((id<JavaUtilList>) nil_chk(columnGroups_)) removeWithInt:[idx intValue]];
    for (id<JavaUtilListIterator> it = [((id<JavaUtilList>) nil_chk(columnGroups_)) listIteratorWithInt:[idx intValue]]; [((id<JavaUtilListIterator>) nil_chk(it)) hasNext]; ) {
      id<OrgOssPdfreporterCrosstabsJRCrosstabColumnGroup> group = [((id<JavaUtilListIterator>) nil_chk(it)) next];
      (void) [((id<JavaUtilMap>) nil_chk(columnGroupsMap_)) putWithId:[((id<OrgOssPdfreporterCrosstabsJRCrosstabColumnGroup>) nil_chk(group)) getName] withId:[JavaLangInteger valueOfWithInt:[((id<JavaUtilListIterator>) nil_chk(it)) previousIndex]]];
    }
    for (id<JavaUtilIterator> it = [((id<JavaUtilList>) nil_chk(cellsList_)) iterator]; [((id<JavaUtilIterator>) nil_chk(it)) hasNext]; ) {
      id<OrgOssPdfreporterCrosstabsJRCrosstabCell> cell = [((id<JavaUtilIterator>) nil_chk(it)) next];
      NSString *columnTotalGroup = [((id<OrgOssPdfreporterCrosstabsJRCrosstabCell>) nil_chk(cell)) getColumnTotalGroup];
      if (columnTotalGroup != nil && [((NSString *) nil_chk(columnTotalGroup)) isEqual:groupName]) {
        [((id<JavaUtilIterator>) nil_chk(it)) remove];
        (void) [((id<JavaUtilMap>) nil_chk(cellsMap_)) removeWithId:[[OrgOssPdfreporterEngineUtilPair alloc] initWithId:[((id<OrgOssPdfreporterCrosstabsJRCrosstabCell>) nil_chk(cell)) getRowTotalGroup] withId:columnTotalGroup]];
        [((OrgOssPdfreporterEngineDesignEventsJRPropertyChangeSupport *) nil_chk([self getEventSupport])) fireCollectionElementRemovedEventWithNSString:OrgOssPdfreporterCrosstabsDesignJRDesignCrosstab_PROPERTY_CELLS_ withId:cell withInt:-1];
      }
    }
    [self removeColGroupVarsWithOrgOssPdfreporterCrosstabsJRCrosstabColumnGroup:removed];
    [((OrgOssPdfreporterEngineDesignEventsJRPropertyChangeSupport *) nil_chk([self getEventSupport])) fireCollectionElementRemovedEventWithNSString:OrgOssPdfreporterCrosstabsDesignJRDesignCrosstab_PROPERTY_COLUMN_GROUPS_ withId:removed withInt:[idx intValue]];
  }
  return removed;
}

- (void)removeColGroupVarsWithOrgOssPdfreporterCrosstabsJRCrosstabColumnGroup:(id<OrgOssPdfreporterCrosstabsJRCrosstabColumnGroup>)colGroup {
  [self removeVariableWithOrgOssPdfreporterEngineJRVariable:[((id<OrgOssPdfreporterCrosstabsJRCrosstabColumnGroup>) nil_chk(colGroup)) getVariable]];
  for (id<JavaUtilIterator> measureIt = [((id<JavaUtilList>) nil_chk(measures_)) iterator]; [((id<JavaUtilIterator>) nil_chk(measureIt)) hasNext]; ) {
    id<OrgOssPdfreporterCrosstabsJRCrosstabMeasure> measure = [((id<JavaUtilIterator>) nil_chk(measureIt)) next];
    [self removeTotalVarWithOrgOssPdfreporterCrosstabsJRCrosstabMeasure:measure withOrgOssPdfreporterCrosstabsJRCrosstabRowGroup:nil withOrgOssPdfreporterCrosstabsJRCrosstabColumnGroup:colGroup];
    for (id<JavaUtilIterator> rowIt = [((id<JavaUtilList>) nil_chk(rowGroups_)) iterator]; [((id<JavaUtilIterator>) nil_chk(rowIt)) hasNext]; ) {
      id<OrgOssPdfreporterCrosstabsJRCrosstabRowGroup> rowGroup = [((id<JavaUtilIterator>) nil_chk(rowIt)) next];
      [self removeTotalVarWithOrgOssPdfreporterCrosstabsJRCrosstabMeasure:measure withOrgOssPdfreporterCrosstabsJRCrosstabRowGroup:rowGroup withOrgOssPdfreporterCrosstabsJRCrosstabColumnGroup:colGroup];
    }
  }
}

- (id<OrgOssPdfreporterCrosstabsJRCrosstabColumnGroup>)removeColumnGroupWithOrgOssPdfreporterCrosstabsJRCrosstabColumnGroup:(id<OrgOssPdfreporterCrosstabsJRCrosstabColumnGroup>)group {
  return [self removeColumnGroupWithNSString:[((id<OrgOssPdfreporterCrosstabsJRCrosstabColumnGroup>) nil_chk(group)) getName]];
}

- (id<OrgOssPdfreporterCrosstabsJRCrosstabMeasure>)removeMeasureWithNSString:(NSString *)measureName {
  OrgOssPdfreporterCrosstabsDesignJRDesignCrosstabMeasure *removed = nil;
  JavaLangInteger *idx = [((id<JavaUtilMap>) nil_chk(measuresMap_)) removeWithId:measureName];
  if (idx != nil) {
    removed = (OrgOssPdfreporterCrosstabsDesignJRDesignCrosstabMeasure *) [((id<JavaUtilList>) nil_chk(measures_)) removeWithInt:[idx intValue]];
    for (id<JavaUtilListIterator> it = [((id<JavaUtilList>) nil_chk(measures_)) listIteratorWithInt:[idx intValue]]; [((id<JavaUtilListIterator>) nil_chk(it)) hasNext]; ) {
      id<OrgOssPdfreporterCrosstabsJRCrosstabMeasure> group = [((id<JavaUtilListIterator>) nil_chk(it)) next];
      (void) [((id<JavaUtilMap>) nil_chk(measuresMap_)) putWithId:[((id<OrgOssPdfreporterCrosstabsJRCrosstabMeasure>) nil_chk(group)) getName] withId:[JavaLangInteger valueOfWithInt:[((id<JavaUtilListIterator>) nil_chk(it)) previousIndex]]];
    }
    [self removeMeasureVarsWithOrgOssPdfreporterCrosstabsDesignJRDesignCrosstabMeasure:removed];
    [((OrgOssPdfreporterEngineDesignEventsJRPropertyChangeSupport *) nil_chk([self getEventSupport])) fireCollectionElementRemovedEventWithNSString:OrgOssPdfreporterCrosstabsDesignJRDesignCrosstab_PROPERTY_MEASURES_ withId:removed withInt:[idx intValue]];
  }
  return removed;
}

- (void)removeMeasureVarsWithOrgOssPdfreporterCrosstabsDesignJRDesignCrosstabMeasure:(OrgOssPdfreporterCrosstabsDesignJRDesignCrosstabMeasure *)measure {
  [self removeVariableWithOrgOssPdfreporterEngineJRVariable:[((OrgOssPdfreporterCrosstabsDesignJRDesignCrosstabMeasure *) nil_chk(measure)) getVariable]];
  for (id<JavaUtilIterator> colIt = [((id<JavaUtilList>) nil_chk(columnGroups_)) iterator]; [((id<JavaUtilIterator>) nil_chk(colIt)) hasNext]; ) {
    id<OrgOssPdfreporterCrosstabsJRCrosstabColumnGroup> colGroup = [((id<JavaUtilIterator>) nil_chk(colIt)) next];
    [self removeTotalVarWithOrgOssPdfreporterCrosstabsJRCrosstabMeasure:measure withOrgOssPdfreporterCrosstabsJRCrosstabRowGroup:nil withOrgOssPdfreporterCrosstabsJRCrosstabColumnGroup:colGroup];
  }
  for (id<JavaUtilIterator> rowIt = [((id<JavaUtilList>) nil_chk(rowGroups_)) iterator]; [((id<JavaUtilIterator>) nil_chk(rowIt)) hasNext]; ) {
    id<OrgOssPdfreporterCrosstabsJRCrosstabRowGroup> rowGroup = [((id<JavaUtilIterator>) nil_chk(rowIt)) next];
    [self removeTotalVarWithOrgOssPdfreporterCrosstabsJRCrosstabMeasure:measure withOrgOssPdfreporterCrosstabsJRCrosstabRowGroup:rowGroup withOrgOssPdfreporterCrosstabsJRCrosstabColumnGroup:nil];
    for (id<JavaUtilIterator> colIt = [((id<JavaUtilList>) nil_chk(columnGroups_)) iterator]; [((id<JavaUtilIterator>) nil_chk(colIt)) hasNext]; ) {
      id<OrgOssPdfreporterCrosstabsJRCrosstabColumnGroup> colGroup = [((id<JavaUtilIterator>) nil_chk(colIt)) next];
      [self removeTotalVarWithOrgOssPdfreporterCrosstabsJRCrosstabMeasure:measure withOrgOssPdfreporterCrosstabsJRCrosstabRowGroup:rowGroup withOrgOssPdfreporterCrosstabsJRCrosstabColumnGroup:colGroup];
    }
  }
}

- (id<OrgOssPdfreporterCrosstabsJRCrosstabMeasure>)removeMeasureWithOrgOssPdfreporterCrosstabsJRCrosstabMeasure:(id<OrgOssPdfreporterCrosstabsJRCrosstabMeasure>)measure {
  return [self removeMeasureWithNSString:[((id<OrgOssPdfreporterCrosstabsJRCrosstabMeasure>) nil_chk(measure)) getName]];
}

- (BOOL)isRepeatColumnHeaders {
  return repeatColumnHeaders_;
}

- (void)setRepeatColumnHeadersWithBOOL:(BOOL)repeatColumnHeaders {
  BOOL old = self.repeatColumnHeaders;
  self.repeatColumnHeaders = repeatColumnHeaders;
  [((OrgOssPdfreporterEngineDesignEventsJRPropertyChangeSupport *) nil_chk([self getEventSupport])) firePropertyChangeWithNSString:OrgOssPdfreporterCrosstabsDesignJRDesignCrosstab_PROPERTY_REPEAT_COLUMN_HEADERS_ withBOOL:old withBOOL:self.repeatColumnHeaders];
}

- (BOOL)isRepeatRowHeaders {
  return repeatRowHeaders_;
}

- (void)setRepeatRowHeadersWithBOOL:(BOOL)repeatRowHeaders {
  BOOL old = self.repeatRowHeaders;
  self.repeatRowHeaders = repeatRowHeaders;
  [((OrgOssPdfreporterEngineDesignEventsJRPropertyChangeSupport *) nil_chk([self getEventSupport])) firePropertyChangeWithNSString:OrgOssPdfreporterCrosstabsDesignJRDesignCrosstab_PROPERTY_REPEAT_ROW_HEADERS_ withBOOL:old withBOOL:self.repeatRowHeaders];
}

- (id<OrgOssPdfreporterCommonsArraysArray2D>)getCells {
  return crossCells_;
}

- (id<JavaUtilList>)getCellsList {
  return cellsList_;
}

- (id<JavaUtilMap>)getCellsMap {
  return cellsMap_;
}

- (void)addCellWithOrgOssPdfreporterCrosstabsDesignJRDesignCrosstabCell:(OrgOssPdfreporterCrosstabsDesignJRDesignCrosstabCell *)cell {
  NSString *rowTotalGroup = [((OrgOssPdfreporterCrosstabsDesignJRDesignCrosstabCell *) nil_chk(cell)) getRowTotalGroup];
  if (rowTotalGroup != nil && ![((id<JavaUtilMap>) nil_chk(rowGroupsMap_)) containsKeyWithId:rowTotalGroup]) {
    @throw [[OrgOssPdfreporterEngineJRException alloc] initWithNSString:[NSString stringWithFormat:@"Row group %@ does not exist.", rowTotalGroup]];
  }
  NSString *columnTotalGroup = [((OrgOssPdfreporterCrosstabsDesignJRDesignCrosstabCell *) nil_chk(cell)) getColumnTotalGroup];
  if (columnTotalGroup != nil && ![((id<JavaUtilMap>) nil_chk(columnGroupsMap_)) containsKeyWithId:columnTotalGroup]) {
    @throw [[OrgOssPdfreporterEngineJRException alloc] initWithNSString:[NSString stringWithFormat:@"Row group %@ does not exist.", columnTotalGroup]];
  }
  OrgOssPdfreporterEngineUtilPair *cellKey = [[OrgOssPdfreporterEngineUtilPair alloc] initWithId:rowTotalGroup withId:columnTotalGroup];
  if ([((id<JavaUtilMap>) nil_chk(cellsMap_)) containsKeyWithId:cellKey]) {
    @throw [[OrgOssPdfreporterEngineJRException alloc] initWithNSString:@"Duplicate cell in crosstab."];
  }
  (void) [((id<JavaUtilMap>) nil_chk(cellsMap_)) putWithId:cellKey withId:cell];
  [((id<JavaUtilList>) nil_chk(cellsList_)) addWithId:cell];
  [self setCellOriginWithOrgOssPdfreporterCrosstabsJRCellContents:[((OrgOssPdfreporterCrosstabsDesignJRDesignCrosstabCell *) nil_chk(cell)) getContents] withOrgOssPdfreporterCrosstabsDesignJRCrosstabOrigin:[[OrgOssPdfreporterCrosstabsDesignJRCrosstabOrigin alloc] initWithOrgOssPdfreporterCrosstabsDesignJRDesignCrosstab:self withChar:OrgOssPdfreporterCrosstabsDesignJRCrosstabOrigin_TYPE_DATA_CELL withNSString:rowTotalGroup withNSString:columnTotalGroup]];
  [((OrgOssPdfreporterEngineDesignEventsJRPropertyChangeSupport *) nil_chk([self getEventSupport])) fireCollectionElementAddedEventWithNSString:OrgOssPdfreporterCrosstabsDesignJRDesignCrosstab_PROPERTY_CELLS_ withId:cell withInt:[((id<JavaUtilList>) nil_chk(cellsList_)) size] - 1];
}

- (id<OrgOssPdfreporterCrosstabsJRCrosstabCell>)removeCellWithNSString:(NSString *)rowTotalGroup
                                                          withNSString:(NSString *)columnTotalGroup {
  id cellKey = [[OrgOssPdfreporterEngineUtilPair alloc] initWithId:rowTotalGroup withId:columnTotalGroup];
  id<OrgOssPdfreporterCrosstabsJRCrosstabCell> cell = [((id<JavaUtilMap>) nil_chk(cellsMap_)) removeWithId:cellKey];
  if (cell != nil) {
    [((id<JavaUtilList>) nil_chk(cellsList_)) removeWithId:cell];
    [((OrgOssPdfreporterEngineDesignEventsJRPropertyChangeSupport *) nil_chk([self getEventSupport])) fireCollectionElementRemovedEventWithNSString:OrgOssPdfreporterCrosstabsDesignJRDesignCrosstab_PROPERTY_CELLS_ withId:cell withInt:-1];
  }
  return cell;
}

- (id<OrgOssPdfreporterCrosstabsJRCrosstabCell>)removeCellWithOrgOssPdfreporterCrosstabsJRCrosstabCell:(id<OrgOssPdfreporterCrosstabsJRCrosstabCell>)cell {
  return [self removeCellWithNSString:[((id<OrgOssPdfreporterCrosstabsJRCrosstabCell>) nil_chk(cell)) getRowTotalGroup] withNSString:[((id<OrgOssPdfreporterCrosstabsJRCrosstabCell>) nil_chk(cell)) getColumnTotalGroup]];
}

- (IOSObjectArray *)getParameters {
  IOSObjectArray *parameters = [IOSObjectArray arrayWithLength:[((id<JavaUtilList>) nil_chk(parametersList_)) size] type:[IOSClass classWithProtocol:@protocol(OrgOssPdfreporterCrosstabsJRCrosstabParameter)]];
  (void) [((id<JavaUtilList>) nil_chk(parametersList_)) toArrayWithNSObjectArray:parameters];
  return parameters;
}

- (id<JavaUtilList>)getParametersList {
  return parametersList_;
}

- (id<JavaUtilMap>)getParametersMap {
  return parametersMap_;
}

- (id<OrgOssPdfreporterEngineJRExpression>)getParametersMapExpression {
  return parametersMapExpression_;
}

- (void)addParameterWithOrgOssPdfreporterCrosstabsJRCrosstabParameter:(id<OrgOssPdfreporterCrosstabsJRCrosstabParameter>)parameter {
  if ([((id<JavaUtilMap>) nil_chk(parametersMap_)) containsKeyWithId:[((id<OrgOssPdfreporterCrosstabsJRCrosstabParameter>) nil_chk(parameter)) getName]]) {
    if ([((id<JavaUtilMap>) nil_chk(parametersMap_)) containsKeyWithId:[((id<OrgOssPdfreporterCrosstabsJRCrosstabParameter>) nil_chk(parameter)) getName]]) {
      @throw [[OrgOssPdfreporterEngineJRException alloc] initWithNSString:[NSString stringWithFormat:@"Duplicate declaration of parameter : %@", [((id<OrgOssPdfreporterCrosstabsJRCrosstabParameter>) nil_chk(parameter)) getName]]];
    }
  }
  (void) [((id<JavaUtilMap>) nil_chk(parametersMap_)) putWithId:[((id<OrgOssPdfreporterCrosstabsJRCrosstabParameter>) nil_chk(parameter)) getName] withId:parameter];
  [((id<JavaUtilList>) nil_chk(parametersList_)) addWithId:parameter];
  [((OrgOssPdfreporterEngineDesignEventsJRPropertyChangeSupport *) nil_chk([self getEventSupport])) fireCollectionElementAddedEventWithNSString:OrgOssPdfreporterCrosstabsDesignJRDesignCrosstab_PROPERTY_PARAMETERS_ withId:parameter withInt:[((id<JavaUtilList>) nil_chk(parametersList_)) size] - 1];
}

- (void)addParameterWithInt:(int)index
withOrgOssPdfreporterCrosstabsJRCrosstabParameter:(id<OrgOssPdfreporterCrosstabsJRCrosstabParameter>)parameter {
  if ([((id<JavaUtilMap>) nil_chk(parametersMap_)) containsKeyWithId:[((id<OrgOssPdfreporterCrosstabsJRCrosstabParameter>) nil_chk(parameter)) getName]]) {
    if ([((id<JavaUtilMap>) nil_chk(parametersMap_)) containsKeyWithId:[((id<OrgOssPdfreporterCrosstabsJRCrosstabParameter>) nil_chk(parameter)) getName]]) {
      @throw [[OrgOssPdfreporterEngineJRException alloc] initWithNSString:[NSString stringWithFormat:@"Duplicate declaration of parameter : %@", [((id<OrgOssPdfreporterCrosstabsJRCrosstabParameter>) nil_chk(parameter)) getName]]];
    }
  }
  (void) [((id<JavaUtilMap>) nil_chk(parametersMap_)) putWithId:[((id<OrgOssPdfreporterCrosstabsJRCrosstabParameter>) nil_chk(parameter)) getName] withId:parameter];
  [((id<JavaUtilList>) nil_chk(parametersList_)) addWithInt:index withId:parameter];
  [((OrgOssPdfreporterEngineDesignEventsJRPropertyChangeSupport *) nil_chk([self getEventSupport])) fireCollectionElementAddedEventWithNSString:OrgOssPdfreporterCrosstabsDesignJRDesignCrosstab_PROPERTY_PARAMETERS_ withId:parameter withInt:index];
}

- (id<OrgOssPdfreporterCrosstabsJRCrosstabParameter>)removeParameterWithNSString:(NSString *)parameterName {
  id<OrgOssPdfreporterCrosstabsJRCrosstabParameter> param = [((id<JavaUtilMap>) nil_chk(parametersMap_)) removeWithId:parameterName];
  if (param != nil) {
    int idx = [((id<JavaUtilList>) nil_chk(parametersList_)) indexOfWithId:param];
    if (idx >= 0) {
      (void) [((id<JavaUtilList>) nil_chk(parametersList_)) removeWithInt:idx];
    }
    [((OrgOssPdfreporterEngineDesignEventsJRPropertyChangeSupport *) nil_chk([self getEventSupport])) fireCollectionElementRemovedEventWithNSString:OrgOssPdfreporterCrosstabsDesignJRDesignCrosstab_PROPERTY_PARAMETERS_ withId:param withInt:idx];
  }
  return param;
}

- (id<OrgOssPdfreporterCrosstabsJRCrosstabParameter>)removeParameterWithOrgOssPdfreporterCrosstabsJRCrosstabParameter:(id<OrgOssPdfreporterCrosstabsJRCrosstabParameter>)parameter {
  return [self removeParameterWithNSString:[((id<OrgOssPdfreporterCrosstabsJRCrosstabParameter>) nil_chk(parameter)) getName]];
}

- (void)setParametersMapExpressionWithOrgOssPdfreporterEngineJRExpression:(id<OrgOssPdfreporterEngineJRExpression>)expression {
  id old = self.parametersMapExpression;
  self.parametersMapExpression = expression;
  [((OrgOssPdfreporterEngineDesignEventsJRPropertyChangeSupport *) nil_chk([self getEventSupport])) firePropertyChangeWithNSString:OrgOssPdfreporterCrosstabsDesignJRDesignCrosstab_PROPERTY_PARAMETERS_MAP_EXPRESSION_ withId:old withId:self.parametersMapExpression];
}

- (id<JavaUtilMap>)getVariablesMap {
  IOSObjectArray *variables = [self getVariables];
  id<JavaUtilMap> variablesMap = [[JavaUtilHashMap alloc] init];
  for (int i = 0; i < (int) [((IOSObjectArray *) nil_chk(variables)) count]; i++) {
    (void) [((id<JavaUtilMap>) nil_chk(variablesMap)) putWithId:[((id<OrgOssPdfreporterEngineJRVariable>) nil_chk([((IOSObjectArray *) nil_chk(variables)) objectAtIndex:i])) getName] withId:[((IOSObjectArray *) nil_chk(variables)) objectAtIndex:i]];
  }
  return variablesMap;
}

- (IOSObjectArray *)getVariables {
  IOSObjectArray *variables = [IOSObjectArray arrayWithLength:[((OrgOssPdfreporterUsesOrgApacheCommonsCollectionsSequencedHashMap *) nil_chk(variablesList_)) size] type:[IOSClass classWithProtocol:@protocol(OrgOssPdfreporterEngineJRVariable)]];
  (void) [((id<JavaUtilCollection>) nil_chk([((OrgOssPdfreporterUsesOrgApacheCommonsCollectionsSequencedHashMap *) nil_chk(variablesList_)) values])) toArrayWithNSObjectArray:variables];
  return variables;
}

- (int)getColumnBreakOffset {
  return columnBreakOffset_;
}

- (void)setColumnBreakOffsetWithInt:(int)columnBreakOffset {
  int old = self.columnBreakOffset;
  self.columnBreakOffset = columnBreakOffset;
  [((OrgOssPdfreporterEngineDesignEventsJRPropertyChangeSupport *) nil_chk([self getEventSupport])) firePropertyChangeWithNSString:OrgOssPdfreporterCrosstabsDesignJRDesignCrosstab_PROPERTY_COLUMN_BREAK_OFFSET_ withInt:old withInt:self.columnBreakOffset];
}

- (void)preprocess {
  [self setGroupVariablesClassWithJavaUtilList:rowGroups_];
  [self setGroupVariablesClassWithJavaUtilList:columnGroups_];
  [self calculateSizes];
}

- (void)setGroupVariablesClassWithJavaUtilList:(id<JavaUtilList>)groups {
  for (id<JavaUtilIterator> it = [((id<JavaUtilList>) nil_chk(groups)) iterator]; [((id<JavaUtilIterator>) nil_chk(it)) hasNext]; ) {
    OrgOssPdfreporterCrosstabsDesignJRDesignCrosstabGroup *group = (OrgOssPdfreporterCrosstabsDesignJRDesignCrosstabGroup *) [((id<JavaUtilIterator>) nil_chk(it)) next];
    id<OrgOssPdfreporterCrosstabsJRCrosstabBucket> bucket = [((OrgOssPdfreporterCrosstabsDesignJRDesignCrosstabGroup *) nil_chk(group)) getBucket];
    if (bucket != nil) {
      id<OrgOssPdfreporterEngineJRExpression> expression = [bucket getExpression];
      if (expression != nil) {
        [((OrgOssPdfreporterEngineDesignJRDesignVariable *) nil_chk(((OrgOssPdfreporterCrosstabsDesignJRDesignCrosstabGroup *) nil_chk(group)).designVariable)) setValueClassNameWithNSString:[((id<OrgOssPdfreporterCrosstabsJRCrosstabBucket>) nil_chk(bucket)) getValueClassName]];
      }
    }
  }
}

- (void)calculateSizes {
  [self setWhenNoDataCellSize];
  [self createCellMatrix];
  int rowHeadersWidth = [self calculateRowHeadersSizes];
  int colHeadersHeight = [self calculateColumnHeadersSizes];
  if (headerCell_ != nil) {
    [headerCell_ setWidthWithInt:rowHeadersWidth];
    [headerCell_ setHeightWithInt:colHeadersHeight];
  }
}

- (void)setWhenNoDataCellSize {
  if (whenNoDataCell_ != nil) {
    [whenNoDataCell_ setWidthWithInt:[self getWidth]];
    [whenNoDataCell_ setHeightWithInt:[self getHeight]];
  }
}

- (void)createCellMatrix {
  [((JavaUtilLoggingLogger *) nil_chk(OrgOssPdfreporterCrosstabsDesignJRDesignCrosstab_logger_)) infoWithNSString:[NSString stringWithFormat:@"Create JRDesignCrosstabCell [%d][%d], thread: %@", ([((id<JavaUtilList>) nil_chk(rowGroups_)) size] + 1), ([((id<JavaUtilList>) nil_chk(columnGroups_)) size] + 1), [JavaLangThread currentThread]]];
  crossCells_ = [[OrgOssPdfreporterCommonsArraysArray2DImpl alloc] initWithInt:[((id<JavaUtilList>) nil_chk(rowGroups_)) size] + 1 withInt:[((id<JavaUtilList>) nil_chk(columnGroups_)) size] + 1];
  for (id<JavaUtilIterator> it = [((id<JavaUtilList>) nil_chk(cellsList_)) iterator]; [((id<JavaUtilIterator>) nil_chk(it)) hasNext]; ) {
    OrgOssPdfreporterCrosstabsDesignJRDesignCrosstabCell *crosstabCell = (OrgOssPdfreporterCrosstabsDesignJRDesignCrosstabCell *) [((id<JavaUtilIterator>) nil_chk(it)) next];
    OrgOssPdfreporterCrosstabsDesignJRDesignCellContents *contents = (OrgOssPdfreporterCrosstabsDesignJRDesignCellContents *) [((OrgOssPdfreporterCrosstabsDesignJRDesignCrosstabCell *) nil_chk(crosstabCell)) getContents];
    NSString *rowTotalGroup = [((OrgOssPdfreporterCrosstabsDesignJRDesignCrosstabCell *) nil_chk(crosstabCell)) getRowTotalGroup];
    int rowGroupIndex = rowTotalGroup == nil ? [((id<JavaUtilList>) nil_chk(rowGroups_)) size] : [([((id<JavaUtilMap>) nil_chk(rowGroupsMap_)) getWithId:rowTotalGroup]) intValue];
    JavaLangInteger *cellWidth = [((OrgOssPdfreporterCrosstabsDesignJRDesignCrosstabCell *) nil_chk(crosstabCell)) getWidth];
    if (cellWidth != nil) {
      [((OrgOssPdfreporterCrosstabsDesignJRDesignCellContents *) nil_chk(contents)) setWidthWithInt:[cellWidth intValue]];
    }
    NSString *columnTotalGroup = [((OrgOssPdfreporterCrosstabsDesignJRDesignCrosstabCell *) nil_chk(crosstabCell)) getColumnTotalGroup];
    int columnGroupIndex = columnTotalGroup == nil ? [((id<JavaUtilList>) nil_chk(columnGroups_)) size] : [([((id<JavaUtilMap>) nil_chk(columnGroupsMap_)) getWithId:columnTotalGroup]) intValue];
    JavaLangInteger *cellHeight = [((OrgOssPdfreporterCrosstabsDesignJRDesignCrosstabCell *) nil_chk(crosstabCell)) getHeight];
    if (cellHeight != nil) {
      [((OrgOssPdfreporterCrosstabsDesignJRDesignCellContents *) nil_chk(contents)) setHeightWithInt:[cellHeight intValue]];
    }
    [((id<OrgOssPdfreporterCommonsArraysArray2D>) nil_chk(crossCells_)) setWithInt:rowGroupIndex withInt:columnGroupIndex withId:crosstabCell];
  }
  [self inheritCells];
}

- (OrgOssPdfreporterCrosstabsDesignJRDesignCrosstabRowGroup *)getRowGroupWithInt:(int)rowGroupIndex {
  return (OrgOssPdfreporterCrosstabsDesignJRDesignCrosstabRowGroup *) [((id<JavaUtilList>) nil_chk(rowGroups_)) getWithInt:rowGroupIndex];
}

- (OrgOssPdfreporterCrosstabsDesignJRDesignCrosstabColumnGroup *)getColumnGroupWithInt:(int)columnGroupIndex {
  return (OrgOssPdfreporterCrosstabsDesignJRDesignCrosstabColumnGroup *) [((id<JavaUtilList>) nil_chk(columnGroups_)) getWithInt:columnGroupIndex];
}

- (void)inheritCells {
  for (int i = [((id<JavaUtilList>) nil_chk(rowGroups_)) size]; i >= 0; --i) {
    for (int j = [((id<JavaUtilList>) nil_chk(columnGroups_)) size]; j >= 0; --j) {
      BOOL used = (i == [((id<JavaUtilList>) nil_chk(rowGroups_)) size] || [((OrgOssPdfreporterCrosstabsDesignJRDesignCrosstabRowGroup *) nil_chk([self getRowGroupWithInt:i])) hasTotal]) && (j == [((id<JavaUtilList>) nil_chk(columnGroups_)) size] || [((OrgOssPdfreporterCrosstabsDesignJRDesignCrosstabColumnGroup *) nil_chk([self getColumnGroupWithInt:j])) hasTotal]);
      if (used) {
        if ([((id<OrgOssPdfreporterCommonsArraysArray2D>) nil_chk(crossCells_)) getWithInt:i withInt:j] == nil) {
          [self inheritCellWithInt:i withInt:j];
          if ([((id<OrgOssPdfreporterCommonsArraysArray2D>) nil_chk(crossCells_)) getWithInt:i withInt:j] == nil) {
            [((id<OrgOssPdfreporterCommonsArraysArray2D>) nil_chk(crossCells_)) setWithInt:i withInt:j withId:[self emptyCellWithInt:i withInt:j]];
            [self inheritCellSizeWithInt:i withInt:j];
          }
        }
        else {
          [self inheritCellSizeWithInt:i withInt:j];
        }
      }
      else {
        [((id<OrgOssPdfreporterCommonsArraysArray2D>) nil_chk(crossCells_)) setWithInt:i withInt:j withId:nil];
      }
    }
  }
}

- (OrgOssPdfreporterCrosstabsDesignJRDesignCrosstabCell *)emptyCellWithInt:(int)i
                                                                   withInt:(int)j {
  OrgOssPdfreporterCrosstabsDesignJRDesignCrosstabCell *emptyCell = [[OrgOssPdfreporterCrosstabsDesignJRDesignCrosstabCell alloc] init];
  if (i < [((id<JavaUtilList>) nil_chk(rowGroups_)) size]) {
    [((OrgOssPdfreporterCrosstabsDesignJRDesignCrosstabCell *) nil_chk(emptyCell)) setRowTotalGroupWithNSString:[([((id<JavaUtilList>) nil_chk(rowGroups_)) getWithInt:i]) getName]];
  }
  if (j < [((id<JavaUtilList>) nil_chk(columnGroups_)) size]) {
    [((OrgOssPdfreporterCrosstabsDesignJRDesignCrosstabCell *) nil_chk(emptyCell)) setColumnTotalGroupWithNSString:[([((id<JavaUtilList>) nil_chk(columnGroups_)) getWithInt:j]) getName]];
  }
  return emptyCell;
}

- (void)inheritCellSizeWithInt:(int)i
                       withInt:(int)j {
  OrgOssPdfreporterCrosstabsDesignJRDesignCrosstabCell *cell = [((id<OrgOssPdfreporterCommonsArraysArray2D>) nil_chk(crossCells_)) getWithInt:i withInt:j];
  OrgOssPdfreporterCrosstabsDesignJRDesignCellContents *contents = (OrgOssPdfreporterCrosstabsDesignJRDesignCellContents *) [((OrgOssPdfreporterCrosstabsDesignJRDesignCrosstabCell *) nil_chk(cell)) getContents];
  if ([((OrgOssPdfreporterCrosstabsDesignJRDesignCellContents *) nil_chk(contents)) getWidth] == OrgOssPdfreporterCrosstabsJRCellContents_NOT_CALCULATED) {
    if (i < [((id<JavaUtilList>) nil_chk(rowGroups_)) size]) {
      OrgOssPdfreporterCrosstabsDesignJRDesignCrosstabCell *rowCell = [((id<OrgOssPdfreporterCommonsArraysArray2D>) nil_chk(crossCells_)) getWithInt:[((id<JavaUtilList>) nil_chk(rowGroups_)) size] withInt:j];
      if (rowCell != nil) {
        [((OrgOssPdfreporterCrosstabsDesignJRDesignCellContents *) nil_chk(contents)) setWidthWithInt:[((id<OrgOssPdfreporterCrosstabsJRCellContents>) nil_chk([rowCell getContents])) getWidth]];
      }
    }
    else {
      for (int k = j + 1; k <= [((id<JavaUtilList>) nil_chk(columnGroups_)) size]; ++k) {
        if ([((id<OrgOssPdfreporterCommonsArraysArray2D>) nil_chk(crossCells_)) getWithInt:i withInt:k] != nil) {
          [((OrgOssPdfreporterCrosstabsDesignJRDesignCellContents *) nil_chk(contents)) setWidthWithInt:[((id<OrgOssPdfreporterCrosstabsJRCellContents>) nil_chk([((OrgOssPdfreporterCrosstabsDesignJRDesignCrosstabCell *) nil_chk([((id<OrgOssPdfreporterCommonsArraysArray2D>) nil_chk(crossCells_)) getWithInt:i withInt:k])) getContents])) getWidth]];
          break;
        }
      }
    }
  }
  if ([((OrgOssPdfreporterCrosstabsDesignJRDesignCellContents *) nil_chk(contents)) getHeight] == OrgOssPdfreporterCrosstabsJRCellContents_NOT_CALCULATED) {
    if (j < [((id<JavaUtilList>) nil_chk(columnGroups_)) size]) {
      OrgOssPdfreporterCrosstabsDesignJRDesignCrosstabCell *colCell = [((id<OrgOssPdfreporterCommonsArraysArray2D>) nil_chk(crossCells_)) getWithInt:i withInt:[((id<JavaUtilList>) nil_chk(columnGroups_)) size]];
      if (colCell != nil) {
        [((OrgOssPdfreporterCrosstabsDesignJRDesignCellContents *) nil_chk(contents)) setHeightWithInt:[((id<OrgOssPdfreporterCrosstabsJRCellContents>) nil_chk([colCell getContents])) getHeight]];
      }
    }
    else {
      for (int k = i + 1; k <= [((id<JavaUtilList>) nil_chk(rowGroups_)) size]; ++k) {
        if ([((id<OrgOssPdfreporterCommonsArraysArray2D>) nil_chk(crossCells_)) getWithInt:k withInt:j] != nil) {
          [((OrgOssPdfreporterCrosstabsDesignJRDesignCellContents *) nil_chk(contents)) setHeightWithInt:[((id<OrgOssPdfreporterCrosstabsJRCellContents>) nil_chk([((OrgOssPdfreporterCrosstabsDesignJRDesignCrosstabCell *) nil_chk([((id<OrgOssPdfreporterCommonsArraysArray2D>) nil_chk(crossCells_)) getWithInt:k withInt:j])) getContents])) getHeight]];
        }
      }
    }
  }
}

- (void)inheritCellWithInt:(int)i
                   withInt:(int)j {
  OrgOssPdfreporterCrosstabsDesignJRDesignCrosstabCell *inheritedCell = nil;
  if (j < [((id<JavaUtilList>) nil_chk(columnGroups_)) size]) {
    OrgOssPdfreporterCrosstabsDesignJRDesignCrosstabCell *colCell = [((id<OrgOssPdfreporterCommonsArraysArray2D>) nil_chk(crossCells_)) getWithInt:[((id<JavaUtilList>) nil_chk(rowGroups_)) size] withInt:j];
    OrgOssPdfreporterCrosstabsDesignJRDesignCellContents *colContents = colCell == nil ? nil : (OrgOssPdfreporterCrosstabsDesignJRDesignCellContents *) [((OrgOssPdfreporterCrosstabsDesignJRDesignCrosstabCell *) nil_chk(colCell)) getContents];
    for (int k = j + 1; inheritedCell == nil && k <= [((id<JavaUtilList>) nil_chk(columnGroups_)) size]; ++k) {
      OrgOssPdfreporterCrosstabsDesignJRDesignCrosstabCell *cell = [((id<OrgOssPdfreporterCommonsArraysArray2D>) nil_chk(crossCells_)) getWithInt:i withInt:k];
      if (cell != nil) {
        OrgOssPdfreporterCrosstabsDesignJRDesignCellContents *contents = (OrgOssPdfreporterCrosstabsDesignJRDesignCellContents *) [cell getContents];
        if (colContents == nil || [((OrgOssPdfreporterCrosstabsDesignJRDesignCellContents *) nil_chk(contents)) getWidth] == [((OrgOssPdfreporterCrosstabsDesignJRDesignCellContents *) nil_chk(colContents)) getWidth]) {
          inheritedCell = cell;
        }
      }
    }
  }
  if (inheritedCell == nil && i < [((id<JavaUtilList>) nil_chk(rowGroups_)) size]) {
    OrgOssPdfreporterCrosstabsDesignJRDesignCrosstabCell *rowCell = [((id<OrgOssPdfreporterCommonsArraysArray2D>) nil_chk(crossCells_)) getWithInt:i withInt:[((id<JavaUtilList>) nil_chk(columnGroups_)) size]];
    OrgOssPdfreporterCrosstabsDesignJRDesignCellContents *rowContents = rowCell == nil ? nil : (OrgOssPdfreporterCrosstabsDesignJRDesignCellContents *) [((OrgOssPdfreporterCrosstabsDesignJRDesignCrosstabCell *) nil_chk(rowCell)) getContents];
    for (int k = i + 1; inheritedCell == nil && k <= [((id<JavaUtilList>) nil_chk(rowGroups_)) size]; ++k) {
      OrgOssPdfreporterCrosstabsDesignJRDesignCrosstabCell *cell = [((id<OrgOssPdfreporterCommonsArraysArray2D>) nil_chk(crossCells_)) getWithInt:k withInt:j];
      if (cell != nil) {
        OrgOssPdfreporterCrosstabsDesignJRDesignCellContents *contents = (OrgOssPdfreporterCrosstabsDesignJRDesignCellContents *) [cell getContents];
        if (rowContents == nil || [((OrgOssPdfreporterCrosstabsDesignJRDesignCellContents *) nil_chk(contents)) getHeight] == [((OrgOssPdfreporterCrosstabsDesignJRDesignCellContents *) nil_chk(rowContents)) getHeight]) {
          inheritedCell = cell;
        }
      }
    }
  }
  [((id<OrgOssPdfreporterCommonsArraysArray2D>) nil_chk(crossCells_)) setWithInt:i withInt:j withId:inheritedCell];
}

- (int)calculateRowHeadersSizes {
  int widthSum = 0;
  for (int i = [((id<JavaUtilList>) nil_chk(rowGroups_)) size] - 1, heightSum = 0; i >= 0; --i) {
    OrgOssPdfreporterCrosstabsDesignJRDesignCrosstabRowGroup *group = (OrgOssPdfreporterCrosstabsDesignJRDesignCrosstabRowGroup *) [((id<JavaUtilList>) nil_chk(rowGroups_)) getWithInt:i];
    widthSum += [((OrgOssPdfreporterCrosstabsDesignJRDesignCrosstabRowGroup *) nil_chk(group)) getWidth];
    OrgOssPdfreporterCrosstabsDesignJRDesignCrosstabCell *cell = [((id<OrgOssPdfreporterCommonsArraysArray2D>) nil_chk(crossCells_)) getWithInt:i + 1 withInt:[((id<JavaUtilList>) nil_chk(columnGroups_)) size]];
    if (cell != nil) {
      heightSum += [((id<OrgOssPdfreporterCrosstabsJRCellContents>) nil_chk([cell getContents])) getHeight];
    }
    OrgOssPdfreporterCrosstabsDesignJRDesignCellContents *header = (OrgOssPdfreporterCrosstabsDesignJRDesignCellContents *) [((OrgOssPdfreporterCrosstabsDesignJRDesignCrosstabRowGroup *) nil_chk(group)) getHeader];
    [((OrgOssPdfreporterCrosstabsDesignJRDesignCellContents *) nil_chk(header)) setHeightWithInt:heightSum];
    [((OrgOssPdfreporterCrosstabsDesignJRDesignCellContents *) nil_chk(header)) setWidthWithInt:[((OrgOssPdfreporterCrosstabsDesignJRDesignCrosstabRowGroup *) nil_chk(group)) getWidth]];
    if ([((OrgOssPdfreporterCrosstabsDesignJRDesignCrosstabRowGroup *) nil_chk(group)) hasTotal]) {
      OrgOssPdfreporterCrosstabsDesignJRDesignCellContents *totalHeader = (OrgOssPdfreporterCrosstabsDesignJRDesignCellContents *) [((OrgOssPdfreporterCrosstabsDesignJRDesignCrosstabRowGroup *) nil_chk(group)) getTotalHeader];
      [((OrgOssPdfreporterCrosstabsDesignJRDesignCellContents *) nil_chk(totalHeader)) setWidthWithInt:widthSum];
      OrgOssPdfreporterCrosstabsDesignJRDesignCrosstabCell *totalCell = [((id<OrgOssPdfreporterCommonsArraysArray2D>) nil_chk(crossCells_)) getWithInt:i withInt:[((id<JavaUtilList>) nil_chk(columnGroups_)) size]];
      if (totalCell != nil) {
        [((OrgOssPdfreporterCrosstabsDesignJRDesignCellContents *) nil_chk(totalHeader)) setHeightWithInt:[((id<OrgOssPdfreporterCrosstabsJRCellContents>) nil_chk([totalCell getContents])) getHeight]];
      }
    }
  }
  return widthSum;
}

- (int)calculateColumnHeadersSizes {
  int heightSum = 0;
  for (int i = [((id<JavaUtilList>) nil_chk(columnGroups_)) size] - 1, widthSum = 0; i >= 0; --i) {
    OrgOssPdfreporterCrosstabsDesignJRDesignCrosstabColumnGroup *group = (OrgOssPdfreporterCrosstabsDesignJRDesignCrosstabColumnGroup *) [((id<JavaUtilList>) nil_chk(columnGroups_)) getWithInt:i];
    heightSum += [((OrgOssPdfreporterCrosstabsDesignJRDesignCrosstabColumnGroup *) nil_chk(group)) getHeight];
    OrgOssPdfreporterCrosstabsDesignJRDesignCrosstabCell *cell = [((id<OrgOssPdfreporterCommonsArraysArray2D>) nil_chk(crossCells_)) getWithInt:[((id<JavaUtilList>) nil_chk(rowGroups_)) size] withInt:i + 1];
    if (cell != nil) {
      widthSum += [((id<OrgOssPdfreporterCrosstabsJRCellContents>) nil_chk([cell getContents])) getWidth];
    }
    OrgOssPdfreporterCrosstabsDesignJRDesignCellContents *header = (OrgOssPdfreporterCrosstabsDesignJRDesignCellContents *) [((OrgOssPdfreporterCrosstabsDesignJRDesignCrosstabColumnGroup *) nil_chk(group)) getHeader];
    [((OrgOssPdfreporterCrosstabsDesignJRDesignCellContents *) nil_chk(header)) setHeightWithInt:[((OrgOssPdfreporterCrosstabsDesignJRDesignCrosstabColumnGroup *) nil_chk(group)) getHeight]];
    [((OrgOssPdfreporterCrosstabsDesignJRDesignCellContents *) nil_chk(header)) setWidthWithInt:widthSum];
    if ([((OrgOssPdfreporterCrosstabsDesignJRDesignCrosstabColumnGroup *) nil_chk(group)) hasTotal]) {
      OrgOssPdfreporterCrosstabsDesignJRDesignCellContents *totalHeader = (OrgOssPdfreporterCrosstabsDesignJRDesignCellContents *) [((OrgOssPdfreporterCrosstabsDesignJRDesignCrosstabColumnGroup *) nil_chk(group)) getTotalHeader];
      [((OrgOssPdfreporterCrosstabsDesignJRDesignCellContents *) nil_chk(totalHeader)) setHeightWithInt:heightSum];
      OrgOssPdfreporterCrosstabsDesignJRDesignCrosstabCell *totalCell = [((id<OrgOssPdfreporterCommonsArraysArray2D>) nil_chk(crossCells_)) getWithInt:[((id<JavaUtilList>) nil_chk(rowGroups_)) size] withInt:i];
      if (totalCell != nil) {
        [((OrgOssPdfreporterCrosstabsDesignJRDesignCellContents *) nil_chk(totalHeader)) setWidthWithInt:[((id<OrgOssPdfreporterCrosstabsJRCellContents>) nil_chk([totalCell getContents])) getWidth]];
      }
    }
  }
  return heightSum;
}

- (id<OrgOssPdfreporterCrosstabsJRCellContents>)getWhenNoDataCell {
  return whenNoDataCell_;
}

- (void)setWhenNoDataCellWithOrgOssPdfreporterCrosstabsDesignJRDesignCellContents:(OrgOssPdfreporterCrosstabsDesignJRDesignCellContents *)whenNoDataCell {
  id old = self.whenNoDataCell;
  self.whenNoDataCell = whenNoDataCell;
  [self setCellOriginWithOrgOssPdfreporterCrosstabsDesignJRDesignCellContents:self.whenNoDataCell withOrgOssPdfreporterCrosstabsDesignJRCrosstabOrigin:[[OrgOssPdfreporterCrosstabsDesignJRCrosstabOrigin alloc] initWithOrgOssPdfreporterCrosstabsDesignJRDesignCrosstab:self withChar:OrgOssPdfreporterCrosstabsDesignJRCrosstabOrigin_TYPE_WHEN_NO_DATA_CELL]];
  [((OrgOssPdfreporterEngineDesignEventsJRPropertyChangeSupport *) nil_chk([self getEventSupport])) firePropertyChangeWithNSString:OrgOssPdfreporterCrosstabsDesignJRDesignCrosstab_PROPERTY_WHEN_NO_DATA_CELL_ withId:old withId:self.whenNoDataCell];
}

- (id<OrgOssPdfreporterEngineJRElement>)getElementByKeyWithNSString:(NSString *)elementKey {
  return [OrgOssPdfreporterCrosstabsBaseJRBaseCrosstab getElementByKeyWithOrgOssPdfreporterCrosstabsJRCrosstab:self withNSString:elementKey];
}

- (OrgOssPdfreporterEngineTypeModeEnumEnum *)getModeValue {
  return [OrgOssPdfreporterEngineUtilJRStyleResolver getModeWithOrgOssPdfreporterEngineJRCommonElement:self withOrgOssPdfreporterEngineTypeModeEnumEnum:[OrgOssPdfreporterEngineTypeModeEnumEnum TRANSPARENT]];
}

- (id<OrgOssPdfreporterCrosstabsJRCellContents>)getHeaderCell {
  return headerCell_;
}

- (void)setHeaderCellWithOrgOssPdfreporterCrosstabsDesignJRDesignCellContents:(OrgOssPdfreporterCrosstabsDesignJRDesignCellContents *)headerCell {
  id old = self.headerCell;
  self.headerCell = headerCell;
  [self setCellOriginWithOrgOssPdfreporterCrosstabsDesignJRDesignCellContents:self.headerCell withOrgOssPdfreporterCrosstabsDesignJRCrosstabOrigin:[[OrgOssPdfreporterCrosstabsDesignJRCrosstabOrigin alloc] initWithOrgOssPdfreporterCrosstabsDesignJRDesignCrosstab:self withChar:OrgOssPdfreporterCrosstabsDesignJRCrosstabOrigin_TYPE_HEADER_CELL]];
  [((OrgOssPdfreporterEngineDesignEventsJRPropertyChangeSupport *) nil_chk([self getEventSupport])) firePropertyChangeWithNSString:OrgOssPdfreporterCrosstabsDesignJRDesignCrosstab_PROPERTY_HEADER_CELL_ withId:old withId:self.headerCell];
}

- (void)measureClassChangedWithOrgOssPdfreporterCrosstabsDesignJRDesignCrosstabMeasure:(OrgOssPdfreporterCrosstabsDesignJRDesignCrosstabMeasure *)measure
                                                                          withNSString:(NSString *)valueClassName {
  for (id<JavaUtilIterator> colIt = [((id<JavaUtilList>) nil_chk(columnGroups_)) iterator]; [((id<JavaUtilIterator>) nil_chk(colIt)) hasNext]; ) {
    id<OrgOssPdfreporterCrosstabsJRCrosstabColumnGroup> colGroup = [((id<JavaUtilIterator>) nil_chk(colIt)) next];
    [self setTotalVarClassWithOrgOssPdfreporterCrosstabsJRCrosstabMeasure:measure withOrgOssPdfreporterCrosstabsJRCrosstabRowGroup:nil withOrgOssPdfreporterCrosstabsJRCrosstabColumnGroup:colGroup withNSString:valueClassName];
  }
  for (id<JavaUtilIterator> rowIt = [((id<JavaUtilList>) nil_chk(rowGroups_)) iterator]; [((id<JavaUtilIterator>) nil_chk(rowIt)) hasNext]; ) {
    id<OrgOssPdfreporterCrosstabsJRCrosstabRowGroup> rowGroup = [((id<JavaUtilIterator>) nil_chk(rowIt)) next];
    [self setTotalVarClassWithOrgOssPdfreporterCrosstabsJRCrosstabMeasure:measure withOrgOssPdfreporterCrosstabsJRCrosstabRowGroup:rowGroup withOrgOssPdfreporterCrosstabsJRCrosstabColumnGroup:nil withNSString:valueClassName];
    for (id<JavaUtilIterator> colIt = [((id<JavaUtilList>) nil_chk(columnGroups_)) iterator]; [((id<JavaUtilIterator>) nil_chk(colIt)) hasNext]; ) {
      id<OrgOssPdfreporterCrosstabsJRCrosstabColumnGroup> colGroup = [((id<JavaUtilIterator>) nil_chk(colIt)) next];
      [self setTotalVarClassWithOrgOssPdfreporterCrosstabsJRCrosstabMeasure:measure withOrgOssPdfreporterCrosstabsJRCrosstabRowGroup:rowGroup withOrgOssPdfreporterCrosstabsJRCrosstabColumnGroup:colGroup withNSString:valueClassName];
    }
  }
}

- (void)setTotalVarClassWithOrgOssPdfreporterCrosstabsJRCrosstabMeasure:(id<OrgOssPdfreporterCrosstabsJRCrosstabMeasure>)measure
                       withOrgOssPdfreporterCrosstabsJRCrosstabRowGroup:(id<OrgOssPdfreporterCrosstabsJRCrosstabRowGroup>)rowGroup
                    withOrgOssPdfreporterCrosstabsJRCrosstabColumnGroup:(id<OrgOssPdfreporterCrosstabsJRCrosstabColumnGroup>)colGroup
                                                           withNSString:(NSString *)valueClassName {
  OrgOssPdfreporterEngineDesignJRDesignVariable *variable = [self getVariableWithNSString:[OrgOssPdfreporterCrosstabsDesignJRDesignCrosstab getTotalVariableNameWithOrgOssPdfreporterCrosstabsJRCrosstabMeasure:measure withOrgOssPdfreporterCrosstabsJRCrosstabRowGroup:rowGroup withOrgOssPdfreporterCrosstabsJRCrosstabColumnGroup:colGroup]];
  [((OrgOssPdfreporterEngineDesignJRDesignVariable *) nil_chk(variable)) setValueClassNameWithNSString:valueClassName];
}

- (void)addVariableWithOrgOssPdfreporterEngineJRVariable:(id<OrgOssPdfreporterEngineJRVariable>)variable {
  (void) [((OrgOssPdfreporterUsesOrgApacheCommonsCollectionsSequencedHashMap *) nil_chk(variablesList_)) putWithId:[((id<OrgOssPdfreporterEngineJRVariable>) nil_chk(variable)) getName] withId:variable];
}

- (void)removeVariableWithOrgOssPdfreporterEngineJRVariable:(id<OrgOssPdfreporterEngineJRVariable>)variable {
  [self removeVariableWithNSString:[((id<OrgOssPdfreporterEngineJRVariable>) nil_chk(variable)) getName]];
}

- (void)removeVariableWithNSString:(NSString *)varName {
  (void) [((OrgOssPdfreporterUsesOrgApacheCommonsCollectionsSequencedHashMap *) nil_chk(variablesList_)) removeWithId:varName];
}

- (OrgOssPdfreporterEngineDesignJRDesignVariable *)getVariableWithNSString:(NSString *)varName {
  return (OrgOssPdfreporterEngineDesignJRDesignVariable *) [((OrgOssPdfreporterUsesOrgApacheCommonsCollectionsSequencedHashMap *) nil_chk(variablesList_)) getWithId:varName];
}

- (OrgOssPdfreporterEngineTypeRunDirectionEnumEnum *)getRunDirectionValue {
  return self.runDirectionValue;
}

- (void)setRunDirectionWithOrgOssPdfreporterEngineTypeRunDirectionEnumEnum:(OrgOssPdfreporterEngineTypeRunDirectionEnumEnum *)runDirectionValue {
  OrgOssPdfreporterEngineTypeRunDirectionEnumEnum *old = self.runDirectionValue;
  self.runDirectionValue = runDirectionValue;
  [((OrgOssPdfreporterEngineDesignEventsJRPropertyChangeSupport *) nil_chk([self getEventSupport])) firePropertyChangeWithNSString:[OrgOssPdfreporterCrosstabsBaseJRBaseCrosstab PROPERTY_RUN_DIRECTION] withId:old withId:self.runDirectionValue];
}

- (void)setCellOriginWithOrgOssPdfreporterCrosstabsJRCellContents:(id<OrgOssPdfreporterCrosstabsJRCellContents>)cell
             withOrgOssPdfreporterCrosstabsDesignJRCrosstabOrigin:(OrgOssPdfreporterCrosstabsDesignJRCrosstabOrigin *)origin {
  if ([(id) cell isKindOfClass:[OrgOssPdfreporterCrosstabsDesignJRDesignCellContents class]]) {
    [self setCellOriginWithOrgOssPdfreporterCrosstabsDesignJRDesignCellContents:(OrgOssPdfreporterCrosstabsDesignJRDesignCellContents *) cell withOrgOssPdfreporterCrosstabsDesignJRCrosstabOrigin:origin];
  }
}

- (void)setCellOriginWithOrgOssPdfreporterCrosstabsDesignJRDesignCellContents:(OrgOssPdfreporterCrosstabsDesignJRDesignCellContents *)cell
                         withOrgOssPdfreporterCrosstabsDesignJRCrosstabOrigin:(OrgOssPdfreporterCrosstabsDesignJRCrosstabOrigin *)origin {
  if (cell != nil) {
    [cell setOriginWithOrgOssPdfreporterCrosstabsDesignJRCrosstabOrigin:origin];
  }
}

- (void)setParentWithOrgOssPdfreporterCrosstabsDesignJRDesignCrosstabGroup:(OrgOssPdfreporterCrosstabsDesignJRDesignCrosstabGroup *)group {
  if (group != nil) {
    [group setParentWithOrgOssPdfreporterCrosstabsDesignJRDesignCrosstab:self];
  }
}

- (id)clone {
  OrgOssPdfreporterCrosstabsDesignJRDesignCrosstab *clone = (OrgOssPdfreporterCrosstabsDesignJRDesignCrosstab *) [super clone];
  if (parametersList_ != nil) {
    ((OrgOssPdfreporterCrosstabsDesignJRDesignCrosstab *) nil_chk(clone)).parametersList = [[JavaUtilArrayList alloc] initWithInt:[parametersList_ size]];
    ((OrgOssPdfreporterCrosstabsDesignJRDesignCrosstab *) nil_chk(clone)).parametersMap = [[JavaUtilHashMap alloc] initWithInt:[parametersList_ size]];
    for (int i = 0; i < [parametersList_ size]; i++) {
      id<OrgOssPdfreporterCrosstabsJRCrosstabParameter> parameter = [OrgOssPdfreporterEngineUtilJRCloneUtils nullSafeCloneWithId:[parametersList_ getWithInt:i]];
      [((OrgOssPdfreporterCrosstabsDesignJRDesignCrosstab *) nil_chk(clone)).parametersList addWithId:parameter];
      (void) [((id<JavaUtilMap>) nil_chk(((OrgOssPdfreporterCrosstabsDesignJRDesignCrosstab *) nil_chk(clone)).parametersMap)) putWithId:[((id<OrgOssPdfreporterCrosstabsJRCrosstabParameter>) nil_chk(parameter)) getName] withId:parameter];
    }
  }
  ((OrgOssPdfreporterCrosstabsDesignJRDesignCrosstab *) nil_chk(clone)).parametersMapExpression = [OrgOssPdfreporterEngineUtilJRCloneUtils nullSafeCloneWithId:parametersMapExpression_];
  ((OrgOssPdfreporterCrosstabsDesignJRDesignCrosstab *) nil_chk(clone)).dataset = [OrgOssPdfreporterEngineUtilJRCloneUtils nullSafeCloneWithId:dataset_];
  ((OrgOssPdfreporterCrosstabsDesignJRDesignCrosstab *) nil_chk(clone)).lineBox = [((id<OrgOssPdfreporterEngineJRLineBox>) nil_chk(lineBox_)) cloneWithOrgOssPdfreporterEngineJRBoxContainer:clone];
  id<JavaUtilMap> clonedVariables = [[JavaUtilHashMap alloc] init];
  if (rowGroups_ != nil) {
    ((OrgOssPdfreporterCrosstabsDesignJRDesignCrosstab *) nil_chk(clone)).rowGroups = [[JavaUtilArrayList alloc] initWithInt:[rowGroups_ size]];
    ((OrgOssPdfreporterCrosstabsDesignJRDesignCrosstab *) nil_chk(clone)).rowGroupsMap = [[JavaUtilHashMap alloc] initWithInt:[rowGroups_ size]];
    for (int i = 0; i < [rowGroups_ size]; i++) {
      OrgOssPdfreporterCrosstabsDesignJRDesignCrosstabRowGroup *group = (OrgOssPdfreporterCrosstabsDesignJRDesignCrosstabRowGroup *) [rowGroups_ getWithInt:i];
      OrgOssPdfreporterCrosstabsDesignJRDesignCrosstabRowGroup *groupClone = (OrgOssPdfreporterCrosstabsDesignJRDesignCrosstabRowGroup *) [((OrgOssPdfreporterCrosstabsDesignJRDesignCrosstabRowGroup *) nil_chk(group)) cloneWithOrgOssPdfreporterCrosstabsDesignJRDesignCrosstab:clone];
      [((OrgOssPdfreporterCrosstabsDesignJRDesignCrosstab *) nil_chk(clone)).rowGroups addWithId:groupClone];
      (void) [((id<JavaUtilMap>) nil_chk(((OrgOssPdfreporterCrosstabsDesignJRDesignCrosstab *) nil_chk(clone)).rowGroupsMap)) putWithId:[((OrgOssPdfreporterCrosstabsDesignJRDesignCrosstabRowGroup *) nil_chk(groupClone)) getName] withId:[JavaLangInteger valueOfWithInt:i]];
      [self adjustCrosstabReferenceWithOrgOssPdfreporterCrosstabsDesignJRDesignCrosstab:clone withOrgOssPdfreporterCrosstabsDesignJRDesignCellContents:(OrgOssPdfreporterCrosstabsDesignJRDesignCellContents *) [((OrgOssPdfreporterCrosstabsDesignJRDesignCrosstabRowGroup *) nil_chk(groupClone)) getTotalHeader]];
      [self adjustCrosstabReferenceWithOrgOssPdfreporterCrosstabsDesignJRDesignCrosstab:clone withOrgOssPdfreporterCrosstabsDesignJRDesignCellContents:(OrgOssPdfreporterCrosstabsDesignJRDesignCellContents *) [((OrgOssPdfreporterCrosstabsDesignJRDesignCrosstabRowGroup *) nil_chk(groupClone)) getHeader]];
      if (((OrgOssPdfreporterCrosstabsDesignJRDesignCrosstabRowGroup *) nil_chk(group)).designVariable != nil) {
        (void) [((id<JavaUtilMap>) nil_chk(clonedVariables)) putWithId:((OrgOssPdfreporterCrosstabsDesignJRDesignCrosstabRowGroup *) nil_chk(group)).designVariable withId:((OrgOssPdfreporterCrosstabsDesignJRDesignCrosstabRowGroup *) nil_chk(groupClone)).designVariable];
      }
    }
  }
  if (columnGroups_ != nil) {
    ((OrgOssPdfreporterCrosstabsDesignJRDesignCrosstab *) nil_chk(clone)).columnGroups = [[JavaUtilArrayList alloc] initWithInt:[columnGroups_ size]];
    ((OrgOssPdfreporterCrosstabsDesignJRDesignCrosstab *) nil_chk(clone)).columnGroupsMap = [[JavaUtilHashMap alloc] initWithInt:[columnGroups_ size]];
    for (int i = 0; i < [columnGroups_ size]; i++) {
      OrgOssPdfreporterCrosstabsDesignJRDesignCrosstabColumnGroup *group = (OrgOssPdfreporterCrosstabsDesignJRDesignCrosstabColumnGroup *) [columnGroups_ getWithInt:i];
      OrgOssPdfreporterCrosstabsDesignJRDesignCrosstabColumnGroup *groupClone = (OrgOssPdfreporterCrosstabsDesignJRDesignCrosstabColumnGroup *) [((OrgOssPdfreporterCrosstabsDesignJRDesignCrosstabColumnGroup *) nil_chk(group)) cloneWithOrgOssPdfreporterCrosstabsDesignJRDesignCrosstab:clone];
      [((OrgOssPdfreporterCrosstabsDesignJRDesignCrosstab *) nil_chk(clone)).columnGroups addWithId:groupClone];
      (void) [((id<JavaUtilMap>) nil_chk(((OrgOssPdfreporterCrosstabsDesignJRDesignCrosstab *) nil_chk(clone)).columnGroupsMap)) putWithId:[((OrgOssPdfreporterCrosstabsDesignJRDesignCrosstabColumnGroup *) nil_chk(groupClone)) getName] withId:[JavaLangInteger valueOfWithInt:i]];
      [self adjustCrosstabReferenceWithOrgOssPdfreporterCrosstabsDesignJRDesignCrosstab:clone withOrgOssPdfreporterCrosstabsDesignJRDesignCellContents:(OrgOssPdfreporterCrosstabsDesignJRDesignCellContents *) [((OrgOssPdfreporterCrosstabsDesignJRDesignCrosstabColumnGroup *) nil_chk(groupClone)) getTotalHeader]];
      [self adjustCrosstabReferenceWithOrgOssPdfreporterCrosstabsDesignJRDesignCrosstab:clone withOrgOssPdfreporterCrosstabsDesignJRDesignCellContents:(OrgOssPdfreporterCrosstabsDesignJRDesignCellContents *) [((OrgOssPdfreporterCrosstabsDesignJRDesignCrosstabColumnGroup *) nil_chk(groupClone)) getHeader]];
      if (((OrgOssPdfreporterCrosstabsDesignJRDesignCrosstabColumnGroup *) nil_chk(group)).designVariable != nil) {
        (void) [((id<JavaUtilMap>) nil_chk(clonedVariables)) putWithId:((OrgOssPdfreporterCrosstabsDesignJRDesignCrosstabColumnGroup *) nil_chk(group)).designVariable withId:((OrgOssPdfreporterCrosstabsDesignJRDesignCrosstabColumnGroup *) nil_chk(groupClone)).designVariable];
      }
    }
  }
  if (measures_ != nil) {
    ((OrgOssPdfreporterCrosstabsDesignJRDesignCrosstab *) nil_chk(clone)).measures = [[JavaUtilArrayList alloc] initWithInt:[measures_ size]];
    ((OrgOssPdfreporterCrosstabsDesignJRDesignCrosstab *) nil_chk(clone)).measuresMap = [[JavaUtilHashMap alloc] initWithInt:[measures_ size]];
    for (int i = 0; i < [measures_ size]; i++) {
      OrgOssPdfreporterCrosstabsDesignJRDesignCrosstabMeasure *measure = (OrgOssPdfreporterCrosstabsDesignJRDesignCrosstabMeasure *) [measures_ getWithInt:i];
      OrgOssPdfreporterCrosstabsDesignJRDesignCrosstabMeasure *clonedMeasure = [OrgOssPdfreporterEngineUtilJRCloneUtils nullSafeCloneWithId:measure];
      [((OrgOssPdfreporterCrosstabsDesignJRDesignCrosstab *) nil_chk(clone)).measures addWithId:clonedMeasure];
      (void) [((id<JavaUtilMap>) nil_chk(((OrgOssPdfreporterCrosstabsDesignJRDesignCrosstab *) nil_chk(clone)).measuresMap)) putWithId:[((OrgOssPdfreporterCrosstabsDesignJRDesignCrosstabMeasure *) nil_chk(clonedMeasure)) getName] withId:[JavaLangInteger valueOfWithInt:i]];
      if (((OrgOssPdfreporterCrosstabsDesignJRDesignCrosstabMeasure *) nil_chk(clonedMeasure)).designVariable != nil) {
        (void) [((id<JavaUtilMap>) nil_chk(clonedVariables)) putWithId:((OrgOssPdfreporterCrosstabsDesignJRDesignCrosstabMeasure *) nil_chk(measure)).designVariable withId:((OrgOssPdfreporterCrosstabsDesignJRDesignCrosstabMeasure *) nil_chk(clonedMeasure)).designVariable];
      }
    }
  }
  if (variablesList_ != nil) {
    ((OrgOssPdfreporterCrosstabsDesignJRDesignCrosstab *) nil_chk(clone)).variablesList = [[OrgOssPdfreporterUsesOrgApacheCommonsCollectionsSequencedHashMap alloc] initWithInt:[variablesList_ size]];
    for (id<JavaUtilIterator> it = [((id<JavaUtilCollection>) nil_chk([variablesList_ values])) iterator]; [((id<JavaUtilIterator>) nil_chk(it)) hasNext]; ) {
      id<OrgOssPdfreporterEngineJRVariable> variable = (id<OrgOssPdfreporterEngineJRVariable>) [((id<JavaUtilIterator>) nil_chk(it)) next];
      id<OrgOssPdfreporterEngineJRVariable> variableClone = [((id<JavaUtilMap>) nil_chk(clonedVariables)) getWithId:variable];
      variableClone = [OrgOssPdfreporterEngineUtilJRCloneUtils nullSafeCloneWithId:variable];
      (void) [((OrgOssPdfreporterCrosstabsDesignJRDesignCrosstab *) nil_chk(clone)).variablesList putWithId:[((id<OrgOssPdfreporterEngineJRVariable>) nil_chk(variableClone)) getName] withId:variableClone];
    }
  }
  if (cellsList_ != nil) {
    ((OrgOssPdfreporterCrosstabsDesignJRDesignCrosstab *) nil_chk(clone)).cellsList = [[JavaUtilArrayList alloc] initWithInt:[cellsList_ size]];
    ((OrgOssPdfreporterCrosstabsDesignJRDesignCrosstab *) nil_chk(clone)).cellsMap = [[JavaUtilHashMap alloc] initWithInt:[cellsList_ size]];
    for (int i = 0; i < [cellsList_ size]; i++) {
      id<OrgOssPdfreporterCrosstabsJRCrosstabCell> cell = [OrgOssPdfreporterEngineUtilJRCloneUtils nullSafeCloneWithId:[cellsList_ getWithInt:i]];
      [self adjustCrosstabReferenceWithOrgOssPdfreporterCrosstabsDesignJRDesignCrosstab:clone withOrgOssPdfreporterCrosstabsDesignJRDesignCellContents:(OrgOssPdfreporterCrosstabsDesignJRDesignCellContents *) [((id<OrgOssPdfreporterCrosstabsJRCrosstabCell>) nil_chk(cell)) getContents]];
      [((OrgOssPdfreporterCrosstabsDesignJRDesignCrosstab *) nil_chk(clone)).cellsList addWithId:cell];
      (void) [((id<JavaUtilMap>) nil_chk(((OrgOssPdfreporterCrosstabsDesignJRDesignCrosstab *) nil_chk(clone)).cellsMap)) putWithId:[[OrgOssPdfreporterEngineUtilPair alloc] initWithId:[((id<OrgOssPdfreporterCrosstabsJRCrosstabCell>) nil_chk(cell)) getRowTotalGroup] withId:[((id<OrgOssPdfreporterCrosstabsJRCrosstabCell>) nil_chk(cell)) getColumnTotalGroup]] withId:cell];
    }
  }
  ((OrgOssPdfreporterCrosstabsDesignJRDesignCrosstab *) nil_chk(clone)).crossCells = nil;
  ((OrgOssPdfreporterCrosstabsDesignJRDesignCrosstab *) nil_chk(clone)).whenNoDataCell = [OrgOssPdfreporterEngineUtilJRCloneUtils nullSafeCloneWithId:whenNoDataCell_];
  [self adjustCrosstabReferenceWithOrgOssPdfreporterCrosstabsDesignJRDesignCrosstab:clone withOrgOssPdfreporterCrosstabsDesignJRDesignCellContents:((OrgOssPdfreporterCrosstabsDesignJRDesignCrosstab *) nil_chk(clone)).whenNoDataCell];
  ((OrgOssPdfreporterCrosstabsDesignJRDesignCrosstab *) nil_chk(clone)).headerCell = [OrgOssPdfreporterEngineUtilJRCloneUtils nullSafeCloneWithId:headerCell_];
  [self adjustCrosstabReferenceWithOrgOssPdfreporterCrosstabsDesignJRDesignCrosstab:clone withOrgOssPdfreporterCrosstabsDesignJRDesignCellContents:((OrgOssPdfreporterCrosstabsDesignJRDesignCrosstab *) nil_chk(clone)).headerCell];
  return clone;
}

- (void)adjustCrosstabReferenceWithOrgOssPdfreporterCrosstabsDesignJRDesignCrosstab:(OrgOssPdfreporterCrosstabsDesignJRDesignCrosstab *)clone
                           withOrgOssPdfreporterCrosstabsDesignJRDesignCellContents:(OrgOssPdfreporterCrosstabsDesignJRDesignCellContents *)contents {
  if (contents == nil) {
    return;
  }
  [((OrgOssPdfreporterCrosstabsDesignJRDesignCellContents *) nil_chk(contents)) setOriginWithOrgOssPdfreporterCrosstabsDesignJRCrosstabOrigin:[[OrgOssPdfreporterCrosstabsDesignJRCrosstabOrigin alloc] initWithOrgOssPdfreporterCrosstabsDesignJRDesignCrosstab:clone withChar:[((OrgOssPdfreporterCrosstabsDesignJRCrosstabOrigin *) nil_chk([((OrgOssPdfreporterCrosstabsDesignJRDesignCellContents *) nil_chk(contents)) getOrigin])) getType] withNSString:[((OrgOssPdfreporterCrosstabsDesignJRCrosstabOrigin *) nil_chk([((OrgOssPdfreporterCrosstabsDesignJRDesignCellContents *) nil_chk(contents)) getOrigin])) getRowGroupName] withNSString:[((OrgOssPdfreporterCrosstabsDesignJRCrosstabOrigin *) nil_chk([((OrgOssPdfreporterCrosstabsDesignJRDesignCellContents *) nil_chk(contents)) getOrigin])) getColumnGroupName]]];
}

- (id<JavaUtilList>)getRowGroupsList {
  return rowGroups_;
}

- (id<JavaUtilMap>)getRowGroupIndicesMap {
  return rowGroupsMap_;
}

- (id<JavaUtilList>)getColumnGroupsList {
  return columnGroups_;
}

- (id<JavaUtilMap>)getColumnGroupIndicesMap {
  return columnGroupsMap_;
}

- (id<JavaUtilList>)getMesuresList {
  return measures_;
}

- (id<JavaUtilMap>)getMeasureIndicesMap {
  return measuresMap_;
}

- (JavaLangBoolean *)getIgnoreWidth {
  return ignoreWidth_;
}

- (void)setIgnoreWidthWithJavaLangBoolean:(JavaLangBoolean *)ignoreWidth {
  id old = self.ignoreWidth;
  self.ignoreWidth = ignoreWidth;
  [((OrgOssPdfreporterEngineDesignEventsJRPropertyChangeSupport *) nil_chk([self getEventSupport])) firePropertyChangeWithNSString:OrgOssPdfreporterCrosstabsDesignJRDesignCrosstab_PROPERTY_IGNORE_WIDTH_ withId:old withId:self.ignoreWidth];
}

- (void)setIgnoreWidthWithBOOL:(BOOL)ignoreWidth {
  [self setIgnoreWidthWithJavaLangBoolean:[JavaLangBoolean valueOfWithBOOL:ignoreWidth]];
}

- (id<OrgOssPdfreporterGeometryIColor>)getDefaultLineColor {
  return [self getForecolor];
}

- (id<OrgOssPdfreporterEngineJRLineBox>)getLineBox {
  return lineBox_;
}

+ (void)initialize {
  if (self == [OrgOssPdfreporterCrosstabsDesignJRDesignCrosstab class]) {
    OrgOssPdfreporterCrosstabsDesignJRDesignCrosstab_logger_ = [JavaUtilLoggingLogger getLoggerWithNSString:[[IOSClass classWithClass:[OrgOssPdfreporterCrosstabsDesignJRDesignCrosstab class]] getName]];
    OrgOssPdfreporterCrosstabsDesignJRDesignCrosstab_BUILT_IN_PARAMETERS_ = [IOSObjectArray arrayWithObjects:(id[]){ [OrgOssPdfreporterEngineJRParameter REPORT_CONTEXT], [IOSClass classWithProtocol:@protocol(OrgOssPdfreporterEngineReportContext)], [OrgOssPdfreporterEngineJRParameter REPORT_PARAMETERS_MAP], [IOSClass classWithProtocol:@protocol(JavaUtilMap)], [OrgOssPdfreporterEngineJRParameter REPORT_LOCALE], [IOSClass classWithClass:[JavaUtilLocale class]], [OrgOssPdfreporterEngineJRParameter REPORT_TIME_ZONE], [IOSClass classWithClass:[JavaUtilTimeZone class]], [OrgOssPdfreporterEngineJRParameter REPORT_FORMAT_FACTORY], [IOSClass classWithProtocol:@protocol(OrgOssPdfreporterTextFormatFactoryIFormatFactory)], [OrgOssPdfreporterEngineJRParameter REPORT_FILE_RESOLVER], [IOSClass classWithProtocol:@protocol(OrgOssPdfreporterEngineUtilFileResolver)] } count:12 type:[IOSClass classWithClass:[NSObject class]]];
    OrgOssPdfreporterCrosstabsDesignJRDesignCrosstab_BUILT_IN_VARIABLES_ = [IOSObjectArray arrayWithObjects:(id[]){ [OrgOssPdfreporterCrosstabsJRCrosstab VARIABLE_ROW_COUNT], [IOSClass classWithClass:[JavaLangInteger class]], [OrgOssPdfreporterCrosstabsJRCrosstab VARIABLE_COLUMN_COUNT], [IOSClass classWithClass:[JavaLangInteger class]] } count:4 type:[IOSClass classWithClass:[NSObject class]]];
  }
}

- (void)copyAllPropertiesTo:(id)copy {
  [super copyAllPropertiesTo:copy];
  OrgOssPdfreporterCrosstabsDesignJRDesignCrosstab *typedCopy = (OrgOssPdfreporterCrosstabsDesignJRDesignCrosstab *) copy;
  typedCopy.parametersList = parametersList_;
  typedCopy.parametersMap = parametersMap_;
  typedCopy.variablesList = variablesList_;
  typedCopy.parametersMapExpression = parametersMapExpression_;
  typedCopy.dataset = dataset_;
  typedCopy.rowGroups = rowGroups_;
  typedCopy.columnGroups = columnGroups_;
  typedCopy.measures = measures_;
  typedCopy.rowGroupsMap = rowGroupsMap_;
  typedCopy.columnGroupsMap = columnGroupsMap_;
  typedCopy.measuresMap = measuresMap_;
  typedCopy.columnBreakOffset = columnBreakOffset_;
  typedCopy.repeatColumnHeaders = repeatColumnHeaders_;
  typedCopy.repeatRowHeaders = repeatRowHeaders_;
  typedCopy.runDirectionValue = runDirectionValue_;
  typedCopy.cellsList = cellsList_;
  typedCopy.cellsMap = cellsMap_;
  typedCopy.crossCells = crossCells_;
  typedCopy.whenNoDataCell = whenNoDataCell_;
  typedCopy.headerCell = headerCell_;
  typedCopy.ignoreWidth = ignoreWidth_;
  typedCopy.lineBox = lineBox_;
}

@end
