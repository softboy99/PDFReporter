//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: pdfreporter-core/src/org/oss/pdfreporter/crosstabs/base/JRBaseCrosstabMeasure.java
//
//  Created by kendra on 9/27/13.
//

#include "IOSClass.h"
#include "java/lang/ClassNotFoundException.h"
#include "java/lang/CloneNotSupportedException.h"
#include "org/oss/pdfreporter/crosstabs/JRCrosstabMeasure.h"
#include "org/oss/pdfreporter/crosstabs/base/JRBaseCrosstabMeasure.h"
#include "org/oss/pdfreporter/crosstabs/type/CrosstabPercentageEnum.h"
#include "org/oss/pdfreporter/engine/JRExpression.h"
#include "org/oss/pdfreporter/engine/JRRuntimeException.h"
#include "org/oss/pdfreporter/engine/JRVariable.h"
#include "org/oss/pdfreporter/engine/base/JRBaseObjectFactory.h"
#include "org/oss/pdfreporter/engine/base/JRBaseVariable.h"
#include "org/oss/pdfreporter/engine/type/CalculationEnum.h"
#include "org/oss/pdfreporter/engine/util/JRClassLoader.h"
#include "org/oss/pdfreporter/engine/util/JRCloneUtils.h"

@implementation OrgOssPdfreporterCrosstabsBaseJRBaseCrosstabMeasure

@synthesize name = name_;
@synthesize valueClassName = valueClassName_;
@synthesize valueClassRealName = valueClassRealName_;
@synthesize valueClass = valueClass_;
@synthesize expression = expression_;
@synthesize calculationValue = calculationValue_;
@synthesize incrementerFactoryClassName = incrementerFactoryClassName_;
@synthesize incrementerFactoryClassRealName = incrementerFactoryClassRealName_;
@synthesize incrementerFactoryClass = incrementerFactoryClass_;
@synthesize percentageType = percentageType_;
@synthesize percentageCalculatorClassName = percentageCalculatorClassName_;
@synthesize percentageCalculatorClassRealName = percentageCalculatorClassRealName_;
@synthesize percentageCalculatorClass = percentageCalculatorClass_;
@synthesize variable = variable_;

- (id)init {
  if ((self = [super init])) {
    calculationValue_ = [OrgOssPdfreporterEngineTypeCalculationEnumEnum COUNT];
    percentageType_ = [OrgOssPdfreporterCrosstabsTypeCrosstabPercentageEnumEnum NONE];
  }
  return self;
}

- (id)initWithOrgOssPdfreporterCrosstabsJRCrosstabMeasure:(id<OrgOssPdfreporterCrosstabsJRCrosstabMeasure>)measure
       withOrgOssPdfreporterEngineBaseJRBaseObjectFactory:(OrgOssPdfreporterEngineBaseJRBaseObjectFactory *)factory {
  if ((self = [super init])) {
    calculationValue_ = [OrgOssPdfreporterEngineTypeCalculationEnumEnum COUNT];
    percentageType_ = [OrgOssPdfreporterCrosstabsTypeCrosstabPercentageEnumEnum NONE];
    [((OrgOssPdfreporterEngineBaseJRBaseObjectFactory *) nil_chk(factory)) putWithId:measure withId:self];
    self.name = [((id<OrgOssPdfreporterCrosstabsJRCrosstabMeasure>) nil_chk(measure)) getName];
    self.valueClassName = [((id<OrgOssPdfreporterCrosstabsJRCrosstabMeasure>) nil_chk(measure)) getValueClassName];
    self.expression = [((OrgOssPdfreporterEngineBaseJRBaseObjectFactory *) nil_chk(factory)) getExpressionWithOrgOssPdfreporterEngineJRExpression:[((id<OrgOssPdfreporterCrosstabsJRCrosstabMeasure>) nil_chk(measure)) getValueExpression]];
    self.calculationValue = [((id<OrgOssPdfreporterCrosstabsJRCrosstabMeasure>) nil_chk(measure)) getCalculationValue];
    self.incrementerFactoryClassName = [((id<OrgOssPdfreporterCrosstabsJRCrosstabMeasure>) nil_chk(measure)) getIncrementerFactoryClassName];
    self.percentageType = [((id<OrgOssPdfreporterCrosstabsJRCrosstabMeasure>) nil_chk(measure)) getPercentageType];
    self.percentageCalculatorClassName = [((id<OrgOssPdfreporterCrosstabsJRCrosstabMeasure>) nil_chk(measure)) getPercentageCalculatorClassName];
    self.variable = [((OrgOssPdfreporterEngineBaseJRBaseObjectFactory *) nil_chk(factory)) getVariableWithOrgOssPdfreporterEngineJRVariable:[((id<OrgOssPdfreporterCrosstabsJRCrosstabMeasure>) nil_chk(measure)) getVariable]];
  }
  return self;
}

- (NSString *)getName {
  return name_;
}

- (NSString *)getValueClassName {
  return valueClassName_;
}

- (id<OrgOssPdfreporterEngineJRExpression>)getValueExpression {
  return expression_;
}

- (OrgOssPdfreporterEngineTypeCalculationEnumEnum *)getCalculationValue {
  return calculationValue_;
}

- (NSString *)getIncrementerFactoryClassName {
  return incrementerFactoryClassName_;
}

- (OrgOssPdfreporterCrosstabsTypeCrosstabPercentageEnumEnum *)getPercentageType {
  return percentageType_;
}

- (IOSClass *)getIncrementerFactoryClass {
  if (incrementerFactoryClass_ == nil) {
    NSString *className_ = [self getIncrementerFactoryClassRealName];
    if (className_ != nil) {
      @try {
        incrementerFactoryClass_ = [OrgOssPdfreporterEngineUtilJRClassLoader loadClassForNameWithNSString:className_];
      }
      @catch (JavaLangClassNotFoundException *e) {
        @throw [[OrgOssPdfreporterEngineJRRuntimeException alloc] initWithNSString:@"Could not load measure incrementer class" withJavaLangThrowable:e];
      }
    }
  }
  return incrementerFactoryClass_;
}

- (NSString *)getIncrementerFactoryClassRealName {
  if (incrementerFactoryClassRealName_ == nil) {
    incrementerFactoryClassRealName_ = [OrgOssPdfreporterEngineUtilJRClassLoader getClassRealNameWithNSString:incrementerFactoryClassName_];
  }
  return incrementerFactoryClassRealName_;
}

- (IOSClass *)getValueClass {
  if (valueClass_ == nil) {
    NSString *className_ = [self getValueClassRealName];
    if (className_ != nil) {
      @try {
        valueClass_ = [OrgOssPdfreporterEngineUtilJRClassLoader loadClassForNameWithNSString:className_];
      }
      @catch (JavaLangClassNotFoundException *e) {
        @throw [[OrgOssPdfreporterEngineJRRuntimeException alloc] initWithNSString:@"Could not load measure value class" withJavaLangThrowable:e];
      }
    }
  }
  return valueClass_;
}

- (NSString *)getValueClassRealName {
  if (valueClassRealName_ == nil) {
    valueClassRealName_ = [OrgOssPdfreporterEngineUtilJRClassLoader getClassRealNameWithNSString:valueClassName_];
  }
  return valueClassRealName_;
}

- (id<OrgOssPdfreporterEngineJRVariable>)getVariable {
  return variable_;
}

- (NSString *)getPercentageCalculatorClassName {
  return percentageCalculatorClassName_;
}

- (IOSClass *)getPercentageCalculatorClass {
  if (percentageCalculatorClass_ == nil) {
    NSString *className_ = [self getPercentageCalculatorClassRealName];
    if (className_ != nil) {
      @try {
        percentageCalculatorClass_ = [OrgOssPdfreporterEngineUtilJRClassLoader loadClassForNameWithNSString:className_];
      }
      @catch (JavaLangClassNotFoundException *e) {
        @throw [[OrgOssPdfreporterEngineJRRuntimeException alloc] initWithNSString:@"Could not load measure percentage calculator class" withJavaLangThrowable:e];
      }
    }
  }
  return percentageCalculatorClass_;
}

- (NSString *)getPercentageCalculatorClassRealName {
  if (percentageCalculatorClassRealName_ == nil) {
    percentageCalculatorClassRealName_ = [OrgOssPdfreporterEngineUtilJRClassLoader getClassRealNameWithNSString:percentageCalculatorClassName_];
  }
  return percentageCalculatorClassRealName_;
}

- (id)clone {
  OrgOssPdfreporterCrosstabsBaseJRBaseCrosstabMeasure *clone = nil;
  @try {
    clone = (OrgOssPdfreporterCrosstabsBaseJRBaseCrosstabMeasure *) [super clone];
  }
  @catch (JavaLangCloneNotSupportedException *e) {
    @throw [[OrgOssPdfreporterEngineJRRuntimeException alloc] initWithJavaLangThrowable:e];
  }
  ((OrgOssPdfreporterCrosstabsBaseJRBaseCrosstabMeasure *) nil_chk(clone)).expression = [OrgOssPdfreporterEngineUtilJRCloneUtils nullSafeCloneWithId:expression_];
  ((OrgOssPdfreporterCrosstabsBaseJRBaseCrosstabMeasure *) nil_chk(clone)).variable = [OrgOssPdfreporterEngineUtilJRCloneUtils nullSafeCloneWithId:variable_];
  return clone;
}

- (id)copyWithZone:(NSZone *)zone {
  return [self clone];
}

- (void)copyAllPropertiesTo:(id)copy {
  [super copyAllPropertiesTo:copy];
  OrgOssPdfreporterCrosstabsBaseJRBaseCrosstabMeasure *typedCopy = (OrgOssPdfreporterCrosstabsBaseJRBaseCrosstabMeasure *) copy;
  typedCopy.name = name_;
  typedCopy.valueClassName = valueClassName_;
  typedCopy.valueClassRealName = valueClassRealName_;
  typedCopy.valueClass = valueClass_;
  typedCopy.expression = expression_;
  typedCopy.calculationValue = calculationValue_;
  typedCopy.incrementerFactoryClassName = incrementerFactoryClassName_;
  typedCopy.incrementerFactoryClassRealName = incrementerFactoryClassRealName_;
  typedCopy.incrementerFactoryClass = incrementerFactoryClass_;
  typedCopy.percentageType = percentageType_;
  typedCopy.percentageCalculatorClassName = percentageCalculatorClassName_;
  typedCopy.percentageCalculatorClassRealName = percentageCalculatorClassRealName_;
  typedCopy.percentageCalculatorClass = percentageCalculatorClass_;
  typedCopy.variable = variable_;
}

@end
