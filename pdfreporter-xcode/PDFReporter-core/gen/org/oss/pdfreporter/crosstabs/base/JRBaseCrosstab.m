//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: pdfreporter-core/src/org/oss/pdfreporter/crosstabs/base/JRBaseCrosstab.java
//
//  Created by kendra on 9/27/13.
//

#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "java/lang/Boolean.h"
#include "java/lang/UnsupportedOperationException.h"
#include "java/util/Iterator.h"
#include "java/util/List.h"
#include "org/oss/pdfreporter/commons/arrays/Array2D.h"
#include "org/oss/pdfreporter/commons/arrays/Array2DImpl.h"
#include "org/oss/pdfreporter/crosstabs/JRCellContents.h"
#include "org/oss/pdfreporter/crosstabs/JRCrosstab.h"
#include "org/oss/pdfreporter/crosstabs/JRCrosstabCell.h"
#include "org/oss/pdfreporter/crosstabs/JRCrosstabColumnGroup.h"
#include "org/oss/pdfreporter/crosstabs/JRCrosstabDataset.h"
#include "org/oss/pdfreporter/crosstabs/JRCrosstabGroup.h"
#include "org/oss/pdfreporter/crosstabs/JRCrosstabMeasure.h"
#include "org/oss/pdfreporter/crosstabs/JRCrosstabParameter.h"
#include "org/oss/pdfreporter/crosstabs/JRCrosstabRowGroup.h"
#include "org/oss/pdfreporter/crosstabs/base/JRBaseCellContents.h"
#include "org/oss/pdfreporter/crosstabs/base/JRBaseCrosstab.h"
#include "org/oss/pdfreporter/crosstabs/base/JRBaseCrosstabColumnGroup.h"
#include "org/oss/pdfreporter/crosstabs/base/JRBaseCrosstabDataset.h"
#include "org/oss/pdfreporter/crosstabs/base/JRBaseCrosstabMeasure.h"
#include "org/oss/pdfreporter/crosstabs/base/JRBaseCrosstabParameter.h"
#include "org/oss/pdfreporter/crosstabs/base/JRBaseCrosstabRowGroup.h"
#include "org/oss/pdfreporter/crosstabs/design/JRDesignCrosstab.h"
#include "org/oss/pdfreporter/engine/JRElement.h"
#include "org/oss/pdfreporter/engine/JRExpression.h"
#include "org/oss/pdfreporter/engine/JRExpressionCollector.h"
#include "org/oss/pdfreporter/engine/JRLineBox.h"
#include "org/oss/pdfreporter/engine/JRVariable.h"
#include "org/oss/pdfreporter/engine/JRVisitor.h"
#include "org/oss/pdfreporter/engine/base/JRBaseElement.h"
#include "org/oss/pdfreporter/engine/base/JRBaseObjectFactory.h"
#include "org/oss/pdfreporter/engine/base/JRBaseVariable.h"
#include "org/oss/pdfreporter/engine/design/events/JRPropertyChangeSupport.h"
#include "org/oss/pdfreporter/engine/type/ModeEnum.h"
#include "org/oss/pdfreporter/engine/type/RunDirectionEnum.h"
#include "org/oss/pdfreporter/engine/util/JRStyleResolver.h"
#include "org/oss/pdfreporter/geometry/IColor.h"

@implementation OrgOssPdfreporterCrosstabsBaseJRBaseCrosstab

static NSString * OrgOssPdfreporterCrosstabsBaseJRBaseCrosstab_PROPERTY_RUN_DIRECTION_ = @"runDirection";
static NSString * OrgOssPdfreporterCrosstabsBaseJRBaseCrosstab_PROPERTY_IGNORE_WIDTH_ = @"ignoreWidth";

@synthesize id_ = id__;
@synthesize parameters = parameters_;
@synthesize variables = variables_;
@synthesize parametersMapExpression = parametersMapExpression_;
@synthesize dataset = dataset_;
@synthesize rowGroups = rowGroups_;
@synthesize columnGroups = columnGroups_;
@synthesize measures = measures_;
@synthesize columnBreakOffset = columnBreakOffset_;
@synthesize repeatColumnHeaders = repeatColumnHeaders_;
@synthesize repeatRowHeaders = repeatRowHeaders_;
@synthesize runDirectionValue = runDirectionValue_;
@synthesize cells = cells_;
@synthesize whenNoDataCell = whenNoDataCell_;
@synthesize headerCell = headerCell_;
@synthesize ignoreWidth = ignoreWidth_;
@synthesize lineBox = lineBox_;

+ (NSString *)PROPERTY_RUN_DIRECTION {
  return OrgOssPdfreporterCrosstabsBaseJRBaseCrosstab_PROPERTY_RUN_DIRECTION_;
}

+ (NSString *)PROPERTY_IGNORE_WIDTH {
  return OrgOssPdfreporterCrosstabsBaseJRBaseCrosstab_PROPERTY_IGNORE_WIDTH_;
}

- (id)initWithOrgOssPdfreporterCrosstabsJRCrosstab:(id<OrgOssPdfreporterCrosstabsJRCrosstab>)crosstab
withOrgOssPdfreporterEngineBaseJRBaseObjectFactory:(OrgOssPdfreporterEngineBaseJRBaseObjectFactory *)factory
                                           withInt:(int)id_ {
  if ((self = [super initWithOrgOssPdfreporterEngineJRElement:crosstab withOrgOssPdfreporterEngineBaseJRBaseObjectFactory:factory])) {
    repeatColumnHeaders_ = YES;
    repeatRowHeaders_ = YES;
    self.id_ = id_;
    self.columnBreakOffset = [((id<OrgOssPdfreporterCrosstabsJRCrosstab>) nil_chk(crosstab)) getColumnBreakOffset];
    self.repeatColumnHeaders = [((id<OrgOssPdfreporterCrosstabsJRCrosstab>) nil_chk(crosstab)) isRepeatColumnHeaders];
    self.repeatRowHeaders = [((id<OrgOssPdfreporterCrosstabsJRCrosstab>) nil_chk(crosstab)) isRepeatRowHeaders];
    self.runDirectionValue = [((id<OrgOssPdfreporterCrosstabsJRCrosstab>) nil_chk(crosstab)) getRunDirectionValue];
    self.ignoreWidth = [((id<OrgOssPdfreporterCrosstabsJRCrosstab>) nil_chk(crosstab)) getIgnoreWidth];
    self.dataset = [((OrgOssPdfreporterEngineBaseJRBaseObjectFactory *) nil_chk(factory)) getCrosstabDatasetWithOrgOssPdfreporterCrosstabsJRCrosstabDataset:[((id<OrgOssPdfreporterCrosstabsJRCrosstab>) nil_chk(crosstab)) getDataset]];
    [self copyParametersWithOrgOssPdfreporterCrosstabsJRCrosstab:crosstab withOrgOssPdfreporterEngineBaseJRBaseObjectFactory:factory];
    [self copyVariablesWithOrgOssPdfreporterCrosstabsJRCrosstab:crosstab withOrgOssPdfreporterEngineBaseJRBaseObjectFactory:factory];
    headerCell_ = [((OrgOssPdfreporterEngineBaseJRBaseObjectFactory *) nil_chk(factory)) getCellWithOrgOssPdfreporterCrosstabsJRCellContents:[((id<OrgOssPdfreporterCrosstabsJRCrosstab>) nil_chk(crosstab)) getHeaderCell]];
    [self copyRowGroupsWithOrgOssPdfreporterCrosstabsJRCrosstab:crosstab withOrgOssPdfreporterEngineBaseJRBaseObjectFactory:factory];
    [self copyColumnGroupsWithOrgOssPdfreporterCrosstabsJRCrosstab:crosstab withOrgOssPdfreporterEngineBaseJRBaseObjectFactory:factory];
    [self copyMeasuresWithOrgOssPdfreporterCrosstabsJRCrosstab:crosstab withOrgOssPdfreporterEngineBaseJRBaseObjectFactory:factory];
    [self copyCellsWithOrgOssPdfreporterCrosstabsJRCrosstab:crosstab withOrgOssPdfreporterEngineBaseJRBaseObjectFactory:factory];
    whenNoDataCell_ = [((OrgOssPdfreporterEngineBaseJRBaseObjectFactory *) nil_chk(factory)) getCellWithOrgOssPdfreporterCrosstabsJRCellContents:[((id<OrgOssPdfreporterCrosstabsJRCrosstab>) nil_chk(crosstab)) getWhenNoDataCell]];
    lineBox_ = [((id<OrgOssPdfreporterEngineJRLineBox>) nil_chk([((id<OrgOssPdfreporterCrosstabsJRCrosstab>) nil_chk(crosstab)) getLineBox])) cloneWithOrgOssPdfreporterEngineJRBoxContainer:self];
  }
  return self;
}

- (OrgOssPdfreporterEngineTypeModeEnumEnum *)getModeValue {
  return [OrgOssPdfreporterEngineUtilJRStyleResolver getModeWithOrgOssPdfreporterEngineJRCommonElement:self withOrgOssPdfreporterEngineTypeModeEnumEnum:[OrgOssPdfreporterEngineTypeModeEnumEnum TRANSPARENT]];
}

- (void)copyParametersWithOrgOssPdfreporterCrosstabsJRCrosstab:(id<OrgOssPdfreporterCrosstabsJRCrosstab>)crosstab
            withOrgOssPdfreporterEngineBaseJRBaseObjectFactory:(OrgOssPdfreporterEngineBaseJRBaseObjectFactory *)factory OBJC_METHOD_FAMILY_NONE {
  IOSObjectArray *crossParameters = [((id<OrgOssPdfreporterCrosstabsJRCrosstab>) nil_chk(crosstab)) getParameters];
  if (crossParameters != nil) {
    parameters_ = [IOSObjectArray arrayWithLength:(int) [crossParameters count] type:[IOSClass classWithProtocol:@protocol(OrgOssPdfreporterCrosstabsJRCrosstabParameter)]];
    for (int i = 0; i < (int) [((IOSObjectArray *) nil_chk(parameters_)) count]; i++) {
      (void) [((IOSObjectArray *) nil_chk(parameters_)) replaceObjectAtIndex:i withObject:[((OrgOssPdfreporterEngineBaseJRBaseObjectFactory *) nil_chk(factory)) getCrosstabParameterWithOrgOssPdfreporterCrosstabsJRCrosstabParameter:[crossParameters objectAtIndex:i]]];
    }
  }
  parametersMapExpression_ = [((OrgOssPdfreporterEngineBaseJRBaseObjectFactory *) nil_chk(factory)) getExpressionWithOrgOssPdfreporterEngineJRExpression:[((id<OrgOssPdfreporterCrosstabsJRCrosstab>) nil_chk(crosstab)) getParametersMapExpression]];
}

- (void)copyVariablesWithOrgOssPdfreporterCrosstabsJRCrosstab:(id<OrgOssPdfreporterCrosstabsJRCrosstab>)crosstab
           withOrgOssPdfreporterEngineBaseJRBaseObjectFactory:(OrgOssPdfreporterEngineBaseJRBaseObjectFactory *)factory OBJC_METHOD_FAMILY_NONE {
  IOSObjectArray *vars = [((id<OrgOssPdfreporterCrosstabsJRCrosstab>) nil_chk(crosstab)) getVariables];
  if (vars != nil) {
    variables_ = [IOSObjectArray arrayWithLength:(int) [vars count] type:[IOSClass classWithProtocol:@protocol(OrgOssPdfreporterEngineJRVariable)]];
    for (int i = 0; i < (int) [vars count]; i++) {
      (void) [((IOSObjectArray *) nil_chk(variables_)) replaceObjectAtIndex:i withObject:[((OrgOssPdfreporterEngineBaseJRBaseObjectFactory *) nil_chk(factory)) getVariableWithOrgOssPdfreporterEngineJRVariable:[vars objectAtIndex:i]]];
    }
  }
}

- (void)copyRowGroupsWithOrgOssPdfreporterCrosstabsJRCrosstab:(id<OrgOssPdfreporterCrosstabsJRCrosstab>)crosstab
           withOrgOssPdfreporterEngineBaseJRBaseObjectFactory:(OrgOssPdfreporterEngineBaseJRBaseObjectFactory *)factory OBJC_METHOD_FAMILY_NONE {
  IOSObjectArray *crossRowGroups = [((id<OrgOssPdfreporterCrosstabsJRCrosstab>) nil_chk(crosstab)) getRowGroups];
  if (crossRowGroups != nil) {
    self.rowGroups = [IOSObjectArray arrayWithLength:(int) [crossRowGroups count] type:[IOSClass classWithProtocol:@protocol(OrgOssPdfreporterCrosstabsJRCrosstabRowGroup)]];
    for (int i = 0; i < (int) [crossRowGroups count]; ++i) {
      (void) [((IOSObjectArray *) nil_chk(self.rowGroups)) replaceObjectAtIndex:i withObject:[((OrgOssPdfreporterEngineBaseJRBaseObjectFactory *) nil_chk(factory)) getCrosstabRowGroupWithOrgOssPdfreporterCrosstabsJRCrosstabRowGroup:[crossRowGroups objectAtIndex:i]]];
    }
  }
}

- (void)copyColumnGroupsWithOrgOssPdfreporterCrosstabsJRCrosstab:(id<OrgOssPdfreporterCrosstabsJRCrosstab>)crosstab
              withOrgOssPdfreporterEngineBaseJRBaseObjectFactory:(OrgOssPdfreporterEngineBaseJRBaseObjectFactory *)factory OBJC_METHOD_FAMILY_NONE {
  IOSObjectArray *crossColumnGroups = [((id<OrgOssPdfreporterCrosstabsJRCrosstab>) nil_chk(crosstab)) getColumnGroups];
  if (crossColumnGroups != nil) {
    self.columnGroups = [IOSObjectArray arrayWithLength:(int) [crossColumnGroups count] type:[IOSClass classWithProtocol:@protocol(OrgOssPdfreporterCrosstabsJRCrosstabColumnGroup)]];
    for (int i = 0; i < (int) [crossColumnGroups count]; ++i) {
      (void) [((IOSObjectArray *) nil_chk(self.columnGroups)) replaceObjectAtIndex:i withObject:[((OrgOssPdfreporterEngineBaseJRBaseObjectFactory *) nil_chk(factory)) getCrosstabColumnGroupWithOrgOssPdfreporterCrosstabsJRCrosstabColumnGroup:[crossColumnGroups objectAtIndex:i]]];
    }
  }
}

- (void)copyMeasuresWithOrgOssPdfreporterCrosstabsJRCrosstab:(id<OrgOssPdfreporterCrosstabsJRCrosstab>)crosstab
          withOrgOssPdfreporterEngineBaseJRBaseObjectFactory:(OrgOssPdfreporterEngineBaseJRBaseObjectFactory *)factory OBJC_METHOD_FAMILY_NONE {
  IOSObjectArray *crossMeasures = [((id<OrgOssPdfreporterCrosstabsJRCrosstab>) nil_chk(crosstab)) getMeasures];
  if (crossMeasures != nil) {
    self.measures = [IOSObjectArray arrayWithLength:(int) [crossMeasures count] type:[IOSClass classWithProtocol:@protocol(OrgOssPdfreporterCrosstabsJRCrosstabMeasure)]];
    for (int i = 0; i < (int) [crossMeasures count]; ++i) {
      (void) [((IOSObjectArray *) nil_chk(self.measures)) replaceObjectAtIndex:i withObject:[((OrgOssPdfreporterEngineBaseJRBaseObjectFactory *) nil_chk(factory)) getCrosstabMeasureWithOrgOssPdfreporterCrosstabsJRCrosstabMeasure:[crossMeasures objectAtIndex:i]]];
    }
  }
}

- (void)copyCellsWithOrgOssPdfreporterCrosstabsJRCrosstab:(id<OrgOssPdfreporterCrosstabsJRCrosstab>)crosstab
       withOrgOssPdfreporterEngineBaseJRBaseObjectFactory:(OrgOssPdfreporterEngineBaseJRBaseObjectFactory *)factory OBJC_METHOD_FAMILY_NONE {
  id<OrgOssPdfreporterCommonsArraysArray2D> crossCells = [((id<OrgOssPdfreporterCrosstabsJRCrosstab>) nil_chk(crosstab)) getCells];
  if (crossCells != nil) {
    self.cells = [[OrgOssPdfreporterCommonsArraysArray2DImpl alloc] initWithInt:(int) [((IOSObjectArray *) nil_chk(rowGroups_)) count] + 1 withInt:(int) [((IOSObjectArray *) nil_chk(columnGroups_)) count] + 1];
    for (int i = 0; i <= (int) [((IOSObjectArray *) nil_chk(rowGroups_)) count]; i++) {
      for (int j = 0; j <= (int) [((IOSObjectArray *) nil_chk(columnGroups_)) count]; ++j) {
        [((id<OrgOssPdfreporterCommonsArraysArray2D>) nil_chk(self.cells)) setWithInt:i withInt:j withId:[((OrgOssPdfreporterEngineBaseJRBaseObjectFactory *) nil_chk(factory)) getCrosstabCellWithOrgOssPdfreporterCrosstabsJRCrosstabCell:[crossCells getWithInt:i withInt:j]]];
      }
    }
  }
}

- (int)getId {
  return id__;
}

- (id<OrgOssPdfreporterCrosstabsJRCrosstabDataset>)getDataset {
  return dataset_;
}

- (IOSObjectArray *)getRowGroups {
  return rowGroups_;
}

- (IOSObjectArray *)getColumnGroups {
  return columnGroups_;
}

- (IOSObjectArray *)getMeasures {
  return measures_;
}

- (void)collectExpressionsWithOrgOssPdfreporterEngineJRExpressionCollector:(OrgOssPdfreporterEngineJRExpressionCollector *)collector {
  [((OrgOssPdfreporterEngineJRExpressionCollector *) nil_chk(collector)) collectWithOrgOssPdfreporterCrosstabsJRCrosstab:self];
}

- (void)visitWithOrgOssPdfreporterEngineJRVisitor:(id<OrgOssPdfreporterEngineJRVisitor>)visitor {
  [((id<OrgOssPdfreporterEngineJRVisitor>) nil_chk(visitor)) visitCrosstabWithOrgOssPdfreporterCrosstabsJRCrosstab:self];
}

- (int)getColumnBreakOffset {
  return columnBreakOffset_;
}

- (BOOL)isRepeatColumnHeaders {
  return repeatColumnHeaders_;
}

- (BOOL)isRepeatRowHeaders {
  return repeatRowHeaders_;
}

- (id<OrgOssPdfreporterCommonsArraysArray2D>)getCells {
  return cells_;
}

- (IOSObjectArray *)getParameters {
  return parameters_;
}

- (id<OrgOssPdfreporterEngineJRExpression>)getParametersMapExpression {
  return parametersMapExpression_;
}

- (id<OrgOssPdfreporterCrosstabsJRCellContents>)getWhenNoDataCell {
  return whenNoDataCell_;
}

+ (id<OrgOssPdfreporterEngineJRElement>)getElementByKeyWithOrgOssPdfreporterCrosstabsJRCrosstab:(id<OrgOssPdfreporterCrosstabsJRCrosstab>)crosstab
                                                                                   withNSString:(NSString *)key {
  id<OrgOssPdfreporterEngineJRElement> element = nil;
  if ([((id<OrgOssPdfreporterCrosstabsJRCrosstab>) nil_chk(crosstab)) getHeaderCell] != nil) {
    element = [((id<OrgOssPdfreporterCrosstabsJRCellContents>) nil_chk([((id<OrgOssPdfreporterCrosstabsJRCrosstab>) nil_chk(crosstab)) getHeaderCell])) getElementByKeyWithNSString:key];
  }
  if (element == nil) {
    element = [OrgOssPdfreporterCrosstabsBaseJRBaseCrosstab getHeadersElementWithOrgOssPdfreporterCrosstabsJRCrosstabGroupArray:[((id<OrgOssPdfreporterCrosstabsJRCrosstab>) nil_chk(crosstab)) getRowGroups] withNSString:key];
  }
  if (element == nil) {
    element = [OrgOssPdfreporterCrosstabsBaseJRBaseCrosstab getHeadersElementWithOrgOssPdfreporterCrosstabsJRCrosstabGroupArray:[((id<OrgOssPdfreporterCrosstabsJRCrosstab>) nil_chk(crosstab)) getColumnGroups] withNSString:key];
  }
  if (element == nil) {
    if ([(id) crosstab isKindOfClass:[OrgOssPdfreporterCrosstabsDesignJRDesignCrosstab class]]) {
      id<JavaUtilList> cellsList = [((OrgOssPdfreporterCrosstabsDesignJRDesignCrosstab *) crosstab) getCellsList];
      for (id<JavaUtilIterator> it = [((id<JavaUtilList>) nil_chk(cellsList)) iterator]; element == nil && [((id<JavaUtilIterator>) nil_chk(it)) hasNext]; ) {
        id<OrgOssPdfreporterCrosstabsJRCrosstabCell> cell = [((id<JavaUtilIterator>) nil_chk(it)) next];
        element = [((id<OrgOssPdfreporterCrosstabsJRCellContents>) nil_chk([((id<OrgOssPdfreporterCrosstabsJRCrosstabCell>) nil_chk(cell)) getContents])) getElementByKeyWithNSString:key];
      }
    }
    else {
      id<OrgOssPdfreporterCommonsArraysArray2D> cells = [((id<OrgOssPdfreporterCrosstabsJRCrosstab>) nil_chk(crosstab)) getCells];
      for (int i = [((id<OrgOssPdfreporterCommonsArraysArray2D>) nil_chk(cells)) getLengthI] - 1; element == nil && i >= 0; --i) {
        for (int j = [((id<OrgOssPdfreporterCommonsArraysArray2D>) nil_chk(cells)) getLengthJ] - 1; element == nil && j >= 0; --j) {
          id<OrgOssPdfreporterCrosstabsJRCrosstabCell> cell = [((id<OrgOssPdfreporterCommonsArraysArray2D>) nil_chk(cells)) getWithInt:i withInt:j];
          if (cell != nil) {
            element = [((id<OrgOssPdfreporterCrosstabsJRCellContents>) nil_chk([cell getContents])) getElementByKeyWithNSString:key];
          }
        }
      }
    }
  }
  if (element == nil && [((id<OrgOssPdfreporterCrosstabsJRCrosstab>) nil_chk(crosstab)) getWhenNoDataCell] != nil) {
    element = [((id<OrgOssPdfreporterCrosstabsJRCellContents>) nil_chk([((id<OrgOssPdfreporterCrosstabsJRCrosstab>) nil_chk(crosstab)) getWhenNoDataCell])) getElementByKeyWithNSString:key];
  }
  return element;
}

+ (id<OrgOssPdfreporterEngineJRElement>)getHeadersElementWithOrgOssPdfreporterCrosstabsJRCrosstabGroupArray:(IOSObjectArray *)groups
                                                                                               withNSString:(NSString *)key {
  id<OrgOssPdfreporterEngineJRElement> element = nil;
  if (groups != nil) {
    for (int i = 0; element == nil && i < (int) [groups count]; i++) {
      id<OrgOssPdfreporterCrosstabsJRCellContents> header = [((id<OrgOssPdfreporterCrosstabsJRCrosstabGroup>) nil_chk([groups objectAtIndex:i])) getHeader];
      element = [((id<OrgOssPdfreporterCrosstabsJRCellContents>) nil_chk(header)) getElementByKeyWithNSString:key];
      if (element == nil) {
        id<OrgOssPdfreporterCrosstabsJRCellContents> totalHeader = [((id<OrgOssPdfreporterCrosstabsJRCrosstabGroup>) nil_chk([((IOSObjectArray *) nil_chk(groups)) objectAtIndex:i])) getTotalHeader];
        element = [((id<OrgOssPdfreporterCrosstabsJRCellContents>) nil_chk(totalHeader)) getElementByKeyWithNSString:key];
      }
    }
  }
  return element;
}

- (id<OrgOssPdfreporterEngineJRElement>)getElementByKeyWithNSString:(NSString *)elementKey {
  return [OrgOssPdfreporterCrosstabsBaseJRBaseCrosstab getElementByKeyWithOrgOssPdfreporterCrosstabsJRCrosstab:self withNSString:elementKey];
}

- (id<OrgOssPdfreporterCrosstabsJRCellContents>)getHeaderCell {
  return headerCell_;
}

- (IOSObjectArray *)getVariables {
  return variables_;
}

- (OrgOssPdfreporterEngineTypeRunDirectionEnumEnum *)getRunDirectionValue {
  return self.runDirectionValue;
}

- (void)setRunDirectionWithOrgOssPdfreporterEngineTypeRunDirectionEnumEnum:(OrgOssPdfreporterEngineTypeRunDirectionEnumEnum *)runDirectionValue {
  OrgOssPdfreporterEngineTypeRunDirectionEnumEnum *old = self.runDirectionValue;
  self.runDirectionValue = runDirectionValue;
  [((OrgOssPdfreporterEngineDesignEventsJRPropertyChangeSupport *) nil_chk([self getEventSupport])) firePropertyChangeWithNSString:OrgOssPdfreporterCrosstabsBaseJRBaseCrosstab_PROPERTY_RUN_DIRECTION_ withId:old withId:self.runDirectionValue];
}

- (id)clone {
  @throw [[JavaLangUnsupportedOperationException alloc] init];
}

- (JavaLangBoolean *)getIgnoreWidth {
  return ignoreWidth_;
}

- (void)setIgnoreWidthWithJavaLangBoolean:(JavaLangBoolean *)ignoreWidth {
  id old = self.ignoreWidth;
  self.ignoreWidth = ignoreWidth;
  [((OrgOssPdfreporterEngineDesignEventsJRPropertyChangeSupport *) nil_chk([self getEventSupport])) firePropertyChangeWithNSString:OrgOssPdfreporterCrosstabsBaseJRBaseCrosstab_PROPERTY_IGNORE_WIDTH_ withId:old withId:self.ignoreWidth];
}

- (void)setIgnoreWidthWithBOOL:(BOOL)ignoreWidth {
  [self setIgnoreWidthWithJavaLangBoolean:[JavaLangBoolean valueOfWithBOOL:ignoreWidth]];
}

- (id<OrgOssPdfreporterGeometryIColor>)getDefaultLineColor {
  return [self getForecolor];
}

- (id<OrgOssPdfreporterEngineJRLineBox>)getLineBox {
  return lineBox_;
}

- (void)copyAllPropertiesTo:(id)copy {
  [super copyAllPropertiesTo:copy];
  OrgOssPdfreporterCrosstabsBaseJRBaseCrosstab *typedCopy = (OrgOssPdfreporterCrosstabsBaseJRBaseCrosstab *) copy;
  typedCopy.id_ = id__;
  typedCopy.parameters = parameters_;
  typedCopy.variables = variables_;
  typedCopy.parametersMapExpression = parametersMapExpression_;
  typedCopy.dataset = dataset_;
  typedCopy.rowGroups = rowGroups_;
  typedCopy.columnGroups = columnGroups_;
  typedCopy.measures = measures_;
  typedCopy.columnBreakOffset = columnBreakOffset_;
  typedCopy.repeatColumnHeaders = repeatColumnHeaders_;
  typedCopy.repeatRowHeaders = repeatRowHeaders_;
  typedCopy.runDirectionValue = runDirectionValue_;
  typedCopy.cells = cells_;
  typedCopy.whenNoDataCell = whenNoDataCell_;
  typedCopy.headerCell = headerCell_;
  typedCopy.ignoreWidth = ignoreWidth_;
  typedCopy.lineBox = lineBox_;
}

@end
