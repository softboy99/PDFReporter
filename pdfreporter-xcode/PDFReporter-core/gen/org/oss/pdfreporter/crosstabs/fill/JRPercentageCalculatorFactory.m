//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: pdfreporter-core/src/org/oss/pdfreporter/crosstabs/fill/JRPercentageCalculatorFactory.java
//
//  Created by kendra on 9/27/13.
//

#include "IOSClass.h"
#include "java/lang/Byte.h"
#include "java/lang/Double.h"
#include "java/lang/Float.h"
#include "java/lang/IllegalAccessException.h"
#include "java/lang/InstantiationException.h"
#include "java/lang/Integer.h"
#include "java/lang/Long.h"
#include "java/lang/Short.h"
#include "java/math/BigDecimal.h"
#include "java/math/BigInteger.h"
#include "java/util/HashMap.h"
#include "java/util/Map.h"
#include "org/oss/pdfreporter/crosstabs/fill/JRPercentageCalculator.h"
#include "org/oss/pdfreporter/crosstabs/fill/JRPercentageCalculatorFactory.h"
#include "org/oss/pdfreporter/engine/JRRuntimeException.h"
#include "org/oss/pdfreporter/engine/fill/JRCalculable.h"

@implementation OrgOssPdfreporterCrosstabsFillJRPercentageCalculatorFactory

static id<JavaUtilMap> OrgOssPdfreporterCrosstabsFillJRPercentageCalculatorFactory_builtInCalculators_;
static id<JavaUtilMap> OrgOssPdfreporterCrosstabsFillJRPercentageCalculatorFactory_cachedCalculators_;

+ (id<JavaUtilMap>)builtInCalculators {
  return OrgOssPdfreporterCrosstabsFillJRPercentageCalculatorFactory_builtInCalculators_;
}

+ (id<JavaUtilMap>)cachedCalculators {
  return OrgOssPdfreporterCrosstabsFillJRPercentageCalculatorFactory_cachedCalculators_;
}

+ (BOOL)hasBuiltInCalculatorWithIOSClass:(IOSClass *)valueClass {
  return [((id<JavaUtilMap>) nil_chk(OrgOssPdfreporterCrosstabsFillJRPercentageCalculatorFactory_builtInCalculators_)) containsKeyWithId:[((IOSClass *) nil_chk(valueClass)) getName]];
}

+ (id<OrgOssPdfreporterCrosstabsFillJRPercentageCalculator>)getPercentageCalculatorWithIOSClass:(IOSClass *)percentageCalculatorClass
                                                                                   withIOSClass:(IOSClass *)valueClass {
  id<OrgOssPdfreporterCrosstabsFillJRPercentageCalculator> calculator;
  if (percentageCalculatorClass == nil) {
    calculator = [((id<JavaUtilMap>) nil_chk(OrgOssPdfreporterCrosstabsFillJRPercentageCalculatorFactory_builtInCalculators_)) getWithId:[((IOSClass *) nil_chk(valueClass)) getName]];
    if (calculator == nil) {
      @throw [[OrgOssPdfreporterEngineJRRuntimeException alloc] initWithNSString:[NSString stringWithFormat:@"Measure with type %@ should specify a percentage calculator class.", [((IOSClass *) nil_chk(valueClass)) getName]]];
    }
  }
  else {
    calculator = [((id<JavaUtilMap>) nil_chk(OrgOssPdfreporterCrosstabsFillJRPercentageCalculatorFactory_cachedCalculators_)) getWithId:[percentageCalculatorClass getName]];
    if (calculator == nil) {
      @try {
        calculator = (id<OrgOssPdfreporterCrosstabsFillJRPercentageCalculator>) [((IOSClass *) nil_chk(percentageCalculatorClass)) newInstance];
        (void) [((id<JavaUtilMap>) nil_chk(OrgOssPdfreporterCrosstabsFillJRPercentageCalculatorFactory_cachedCalculators_)) putWithId:[((IOSClass *) nil_chk(percentageCalculatorClass)) getName] withId:calculator];
      }
      @catch (JavaLangInstantiationException *e) {
        @throw [[OrgOssPdfreporterEngineJRRuntimeException alloc] initWithNSString:[NSString stringWithFormat:@"Error while creating percentage calculator instance of %@.", percentageCalculatorClass] withJavaLangThrowable:e];
      }
      @catch (JavaLangIllegalAccessException *e) {
        @throw [[OrgOssPdfreporterEngineJRRuntimeException alloc] initWithNSString:[NSString stringWithFormat:@"Error while creating percentage calculator instance of %@.", percentageCalculatorClass] withJavaLangThrowable:e];
      }
    }
  }
  return calculator;
}

- (id)init {
  return [super init];
}

+ (void)initialize {
  if (self == [OrgOssPdfreporterCrosstabsFillJRPercentageCalculatorFactory class]) {
    {
      OrgOssPdfreporterCrosstabsFillJRPercentageCalculatorFactory_builtInCalculators_ = [[JavaUtilHashMap alloc] init];
      (void) [((id<JavaUtilMap>) nil_chk(OrgOssPdfreporterCrosstabsFillJRPercentageCalculatorFactory_builtInCalculators_)) putWithId:[[IOSClass classWithClass:[JavaLangFloat class]] getName] withId:[[OrgOssPdfreporterCrosstabsFillJRPercentageCalculatorFactory_FloatPercentageCalculator alloc] init]];
      (void) [((id<JavaUtilMap>) nil_chk(OrgOssPdfreporterCrosstabsFillJRPercentageCalculatorFactory_builtInCalculators_)) putWithId:[[IOSClass classWithClass:[JavaLangDouble class]] getName] withId:[[OrgOssPdfreporterCrosstabsFillJRPercentageCalculatorFactory_DoublePercentageCalculator alloc] init]];
      (void) [((id<JavaUtilMap>) nil_chk(OrgOssPdfreporterCrosstabsFillJRPercentageCalculatorFactory_builtInCalculators_)) putWithId:[[IOSClass classWithClass:[JavaLangInteger class]] getName] withId:[[OrgOssPdfreporterCrosstabsFillJRPercentageCalculatorFactory_IntegerPercentageCalculator alloc] init]];
      (void) [((id<JavaUtilMap>) nil_chk(OrgOssPdfreporterCrosstabsFillJRPercentageCalculatorFactory_builtInCalculators_)) putWithId:[[IOSClass classWithClass:[JavaLangLong class]] getName] withId:[[OrgOssPdfreporterCrosstabsFillJRPercentageCalculatorFactory_LongPercentageCalculator alloc] init]];
      (void) [((id<JavaUtilMap>) nil_chk(OrgOssPdfreporterCrosstabsFillJRPercentageCalculatorFactory_builtInCalculators_)) putWithId:[[IOSClass classWithClass:[JavaLangShort class]] getName] withId:[[OrgOssPdfreporterCrosstabsFillJRPercentageCalculatorFactory_ShortPercentageCalculator alloc] init]];
      (void) [((id<JavaUtilMap>) nil_chk(OrgOssPdfreporterCrosstabsFillJRPercentageCalculatorFactory_builtInCalculators_)) putWithId:[[IOSClass classWithClass:[JavaLangByte class]] getName] withId:[[OrgOssPdfreporterCrosstabsFillJRPercentageCalculatorFactory_BytePercentageCalculator alloc] init]];
      (void) [((id<JavaUtilMap>) nil_chk(OrgOssPdfreporterCrosstabsFillJRPercentageCalculatorFactory_builtInCalculators_)) putWithId:[[IOSClass classWithClass:[JavaMathBigDecimal class]] getName] withId:[[OrgOssPdfreporterCrosstabsFillJRPercentageCalculatorFactory_BigDecimalPercentageCalculator alloc] init]];
      (void) [((id<JavaUtilMap>) nil_chk(OrgOssPdfreporterCrosstabsFillJRPercentageCalculatorFactory_builtInCalculators_)) putWithId:[[IOSClass classWithClass:[JavaMathBigInteger class]] getName] withId:[[OrgOssPdfreporterCrosstabsFillJRPercentageCalculatorFactory_BigIntegerPercentageCalculator alloc] init]];
      OrgOssPdfreporterCrosstabsFillJRPercentageCalculatorFactory_cachedCalculators_ = [[JavaUtilHashMap alloc] init];
    }
  }
}

@end
@implementation OrgOssPdfreporterCrosstabsFillJRPercentageCalculatorFactory_BytePercentageCalculator

- (id)calculatePercentageWithOrgOssPdfreporterEngineFillJRCalculable:(id<OrgOssPdfreporterEngineFillJRCalculable>)value
                         withOrgOssPdfreporterEngineFillJRCalculable:(id<OrgOssPdfreporterEngineFillJRCalculable>)total {
  JavaLangByte *totalVal = (JavaLangByte *) [((id<OrgOssPdfreporterEngineFillJRCalculable>) nil_chk(total)) getValue];
  JavaLangByte *val = (JavaLangByte *) [((id<OrgOssPdfreporterEngineFillJRCalculable>) nil_chk(value)) getValue];
  char percentage = 0;
  if (totalVal != nil && [((JavaLangByte *) nil_chk(totalVal)) byteValue] != 0) {
    percentage = (char) (100 * [((JavaLangByte *) nil_chk(val)) byteValue] / [((JavaLangByte *) nil_chk(totalVal)) byteValue]);
  }
  return [[JavaLangByte alloc] initWithChar:percentage];
}

- (id)init {
  return [super init];
}

@end
@implementation OrgOssPdfreporterCrosstabsFillJRPercentageCalculatorFactory_ShortPercentageCalculator

- (id)calculatePercentageWithOrgOssPdfreporterEngineFillJRCalculable:(id<OrgOssPdfreporterEngineFillJRCalculable>)value
                         withOrgOssPdfreporterEngineFillJRCalculable:(id<OrgOssPdfreporterEngineFillJRCalculable>)total {
  JavaLangShort *totalVal = (JavaLangShort *) [((id<OrgOssPdfreporterEngineFillJRCalculable>) nil_chk(total)) getValue];
  JavaLangShort *val = (JavaLangShort *) [((id<OrgOssPdfreporterEngineFillJRCalculable>) nil_chk(value)) getValue];
  short int percentage = 0;
  if (totalVal != nil && [((JavaLangShort *) nil_chk(totalVal)) shortValue] != 0) {
    percentage = (short int) (100 * [((JavaLangShort *) nil_chk(val)) shortValue] / [((JavaLangShort *) nil_chk(totalVal)) shortValue]);
  }
  return [[JavaLangShort alloc] initWithShortInt:percentage];
}

- (id)init {
  return [super init];
}

@end
@implementation OrgOssPdfreporterCrosstabsFillJRPercentageCalculatorFactory_IntegerPercentageCalculator

- (id)calculatePercentageWithOrgOssPdfreporterEngineFillJRCalculable:(id<OrgOssPdfreporterEngineFillJRCalculable>)value
                         withOrgOssPdfreporterEngineFillJRCalculable:(id<OrgOssPdfreporterEngineFillJRCalculable>)total {
  JavaLangInteger *totalVal = (JavaLangInteger *) [((id<OrgOssPdfreporterEngineFillJRCalculable>) nil_chk(total)) getValue];
  JavaLangInteger *val = (JavaLangInteger *) [((id<OrgOssPdfreporterEngineFillJRCalculable>) nil_chk(value)) getValue];
  int percentage = 0;
  if (totalVal != nil && [((JavaLangInteger *) nil_chk(totalVal)) intValue] != 0) {
    percentage = 100 * [((JavaLangInteger *) nil_chk(val)) intValue] / [((JavaLangInteger *) nil_chk(totalVal)) intValue];
  }
  return [JavaLangInteger valueOfWithInt:percentage];
}

- (id)init {
  return [super init];
}

@end
@implementation OrgOssPdfreporterCrosstabsFillJRPercentageCalculatorFactory_LongPercentageCalculator

- (id)calculatePercentageWithOrgOssPdfreporterEngineFillJRCalculable:(id<OrgOssPdfreporterEngineFillJRCalculable>)value
                         withOrgOssPdfreporterEngineFillJRCalculable:(id<OrgOssPdfreporterEngineFillJRCalculable>)total {
  JavaLangLong *totalVal = (JavaLangLong *) [((id<OrgOssPdfreporterEngineFillJRCalculable>) nil_chk(total)) getValue];
  JavaLangLong *val = (JavaLangLong *) [((id<OrgOssPdfreporterEngineFillJRCalculable>) nil_chk(value)) getValue];
  long long int percentage = 0LL;
  if (totalVal != nil && [((JavaLangLong *) nil_chk(totalVal)) longLongValue] != 0) {
    percentage = 100LL * [((JavaLangLong *) nil_chk(val)) longLongValue] / [((JavaLangLong *) nil_chk(totalVal)) longLongValue];
  }
  return [[JavaLangLong alloc] initWithLongInt:percentage];
}

- (id)init {
  return [super init];
}

@end
@implementation OrgOssPdfreporterCrosstabsFillJRPercentageCalculatorFactory_FloatPercentageCalculator

- (id)calculatePercentageWithOrgOssPdfreporterEngineFillJRCalculable:(id<OrgOssPdfreporterEngineFillJRCalculable>)value
                         withOrgOssPdfreporterEngineFillJRCalculable:(id<OrgOssPdfreporterEngineFillJRCalculable>)total {
  JavaLangFloat *totalVal = (JavaLangFloat *) [((id<OrgOssPdfreporterEngineFillJRCalculable>) nil_chk(total)) getValue];
  JavaLangFloat *val = (JavaLangFloat *) [((id<OrgOssPdfreporterEngineFillJRCalculable>) nil_chk(value)) getValue];
  float percentage = 0.0f;
  if (totalVal != nil && [((JavaLangFloat *) nil_chk(totalVal)) floatValue] != 0) {
    percentage = 100.0f * [((JavaLangFloat *) nil_chk(val)) floatValue] / [((JavaLangFloat *) nil_chk(totalVal)) floatValue];
  }
  return [[JavaLangFloat alloc] initWithFloat:percentage];
}

- (id)init {
  return [super init];
}

@end
@implementation OrgOssPdfreporterCrosstabsFillJRPercentageCalculatorFactory_DoublePercentageCalculator

- (id)calculatePercentageWithOrgOssPdfreporterEngineFillJRCalculable:(id<OrgOssPdfreporterEngineFillJRCalculable>)value
                         withOrgOssPdfreporterEngineFillJRCalculable:(id<OrgOssPdfreporterEngineFillJRCalculable>)total {
  JavaLangDouble *totalVal = (JavaLangDouble *) [((id<OrgOssPdfreporterEngineFillJRCalculable>) nil_chk(total)) getValue];
  JavaLangDouble *val = (JavaLangDouble *) [((id<OrgOssPdfreporterEngineFillJRCalculable>) nil_chk(value)) getValue];
  double percentage = 0.0;
  if (totalVal != nil && [((JavaLangDouble *) nil_chk(totalVal)) doubleValue] != 0) {
    percentage = 100.0 * [((JavaLangDouble *) nil_chk(val)) doubleValue] / [((JavaLangDouble *) nil_chk(totalVal)) doubleValue];
  }
  return [[JavaLangDouble alloc] initWithDouble:percentage];
}

- (id)init {
  return [super init];
}

@end
@implementation OrgOssPdfreporterCrosstabsFillJRPercentageCalculatorFactory_BigDecimalPercentageCalculator

- (id)calculatePercentageWithOrgOssPdfreporterEngineFillJRCalculable:(id<OrgOssPdfreporterEngineFillJRCalculable>)value
                         withOrgOssPdfreporterEngineFillJRCalculable:(id<OrgOssPdfreporterEngineFillJRCalculable>)total {
  JavaMathBigDecimal *totalVal = (JavaMathBigDecimal *) [((id<OrgOssPdfreporterEngineFillJRCalculable>) nil_chk(total)) getValue];
  JavaMathBigDecimal *val = (JavaMathBigDecimal *) [((id<OrgOssPdfreporterEngineFillJRCalculable>) nil_chk(value)) getValue];
  JavaMathBigDecimal *percentage;
  if (totalVal != nil && [((JavaMathBigDecimal *) nil_chk(totalVal)) doubleValue] != 0) {
    percentage = [((JavaMathBigDecimal *) nil_chk([((JavaMathBigDecimal *) nil_chk(val)) multiplyWithJavaMathBigDecimal:[JavaMathBigDecimal valueOfWithLongInt:100LL]])) divideWithJavaMathBigDecimal:totalVal withInt:JavaMathBigDecimal_ROUND_HALF_UP];
  }
  else {
    percentage = [JavaMathBigDecimal valueOfWithLongInt:0];
  }
  return percentage;
}

- (id)init {
  return [super init];
}

@end
@implementation OrgOssPdfreporterCrosstabsFillJRPercentageCalculatorFactory_BigIntegerPercentageCalculator

- (id)calculatePercentageWithOrgOssPdfreporterEngineFillJRCalculable:(id<OrgOssPdfreporterEngineFillJRCalculable>)value
                         withOrgOssPdfreporterEngineFillJRCalculable:(id<OrgOssPdfreporterEngineFillJRCalculable>)total {
  JavaMathBigInteger *totalVal = (JavaMathBigInteger *) [((id<OrgOssPdfreporterEngineFillJRCalculable>) nil_chk(total)) getValue];
  JavaMathBigInteger *val = (JavaMathBigInteger *) [((id<OrgOssPdfreporterEngineFillJRCalculable>) nil_chk(value)) getValue];
  JavaMathBigInteger *percentage;
  if (totalVal != nil && [((JavaMathBigInteger *) nil_chk(totalVal)) doubleValue] != 0) {
    percentage = [((JavaMathBigInteger *) nil_chk([((JavaMathBigInteger *) nil_chk(val)) multiplyWithJavaMathBigInteger:[JavaMathBigInteger valueOfWithLongInt:100LL]])) divideWithJavaMathBigInteger:totalVal];
  }
  else {
    percentage = [JavaMathBigInteger valueOfWithLongInt:0];
  }
  return percentage;
}

- (id)init {
  return [super init];
}

@end
