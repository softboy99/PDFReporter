//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: pdfreporter-core/src/org/oss/pdfreporter/crosstabs/fill/JRFillCrosstabObjectFactory.java
//
//  Created by kendra on 9/27/13.
//

#include "org/oss/pdfreporter/crosstabs/JRCellContents.h"
#include "org/oss/pdfreporter/crosstabs/JRCrosstabCell.h"
#include "org/oss/pdfreporter/crosstabs/JRCrosstabColumnGroup.h"
#include "org/oss/pdfreporter/crosstabs/JRCrosstabMeasure.h"
#include "org/oss/pdfreporter/crosstabs/JRCrosstabRowGroup.h"
#include "org/oss/pdfreporter/crosstabs/fill/JRFillCrosstabCell.h"
#include "org/oss/pdfreporter/crosstabs/fill/JRFillCrosstabColumnGroup.h"
#include "org/oss/pdfreporter/crosstabs/fill/JRFillCrosstabMeasure.h"
#include "org/oss/pdfreporter/crosstabs/fill/JRFillCrosstabObjectFactory.h"
#include "org/oss/pdfreporter/crosstabs/fill/JRFillCrosstabRowGroup.h"
#include "org/oss/pdfreporter/engine/JRAbstractObjectFactory.h"
#include "org/oss/pdfreporter/engine/fill/JRBaseFiller.h"
#include "org/oss/pdfreporter/engine/fill/JRFillCellContents.h"
#include "org/oss/pdfreporter/engine/fill/JRFillExpressionEvaluator.h"
#include "org/oss/pdfreporter/engine/fill/JRFillObjectFactory.h"
#include "org/oss/pdfreporter/engine/fill/JROriginProvider.h"

@implementation OrgOssPdfreporterCrosstabsFillJRFillCrosstabObjectFactory

@synthesize parentOriginProvider = parentOriginProvider_;

- (id)initWithOrgOssPdfreporterEngineFillJRFillObjectFactory:(OrgOssPdfreporterEngineFillJRFillObjectFactory *)parent
    withOrgOssPdfreporterEngineFillJRFillExpressionEvaluator:(id<OrgOssPdfreporterEngineFillJRFillExpressionEvaluator>)expressionEvaluator {
  return [super initWithOrgOssPdfreporterEngineFillJRFillObjectFactory:parent withOrgOssPdfreporterEngineFillJRFillExpressionEvaluator:expressionEvaluator];
}

- (id<OrgOssPdfreporterEngineFillJROriginProvider>)getParentOriginProvider {
  return parentOriginProvider_;
}

- (void)setParentOriginProviderWithOrgOssPdfreporterEngineFillJROriginProvider:(id<OrgOssPdfreporterEngineFillJROriginProvider>)parentOriginProvider {
  self.parentOriginProvider = parentOriginProvider;
}

- (OrgOssPdfreporterEngineFillJRFillCellContents *)getCellWithOrgOssPdfreporterCrosstabsJRCellContents:(id<OrgOssPdfreporterCrosstabsJRCellContents>)cell
                                                                                          withNSString:(NSString *)cellType {
  OrgOssPdfreporterEngineFillJRFillCellContents *fillCell = nil;
  if (cell != nil) {
    fillCell = (OrgOssPdfreporterEngineFillJRFillCellContents *) [self getWithId:cell];
    if (fillCell == nil) {
      fillCell = [[OrgOssPdfreporterEngineFillJRFillCellContents alloc] initWithOrgOssPdfreporterEngineFillJRBaseFiller:filler_ withOrgOssPdfreporterCrosstabsJRCellContents:cell withNSString:cellType withOrgOssPdfreporterCrosstabsFillJRFillCrosstabObjectFactory:self];
    }
  }
  return fillCell;
}

- (OrgOssPdfreporterCrosstabsFillJRFillCrosstabRowGroup *)getCrosstabRowGroupWithOrgOssPdfreporterCrosstabsJRCrosstabRowGroup:(id<OrgOssPdfreporterCrosstabsJRCrosstabRowGroup>)group {
  OrgOssPdfreporterCrosstabsFillJRFillCrosstabRowGroup *fillGroup = nil;
  if (group != nil) {
    fillGroup = (OrgOssPdfreporterCrosstabsFillJRFillCrosstabRowGroup *) [self getWithId:group];
    if (fillGroup == nil) {
      fillGroup = [[OrgOssPdfreporterCrosstabsFillJRFillCrosstabRowGroup alloc] initWithOrgOssPdfreporterCrosstabsJRCrosstabRowGroup:group withOrgOssPdfreporterCrosstabsFillJRFillCrosstabObjectFactory:self];
    }
  }
  return fillGroup;
}

- (OrgOssPdfreporterCrosstabsFillJRFillCrosstabColumnGroup *)getCrosstabColumnGroupWithOrgOssPdfreporterCrosstabsJRCrosstabColumnGroup:(id<OrgOssPdfreporterCrosstabsJRCrosstabColumnGroup>)group {
  OrgOssPdfreporterCrosstabsFillJRFillCrosstabColumnGroup *fillGroup = nil;
  if (group != nil) {
    fillGroup = (OrgOssPdfreporterCrosstabsFillJRFillCrosstabColumnGroup *) [self getWithId:group];
    if (fillGroup == nil) {
      fillGroup = [[OrgOssPdfreporterCrosstabsFillJRFillCrosstabColumnGroup alloc] initWithOrgOssPdfreporterCrosstabsJRCrosstabColumnGroup:group withOrgOssPdfreporterCrosstabsFillJRFillCrosstabObjectFactory:self];
    }
  }
  return fillGroup;
}

- (OrgOssPdfreporterCrosstabsFillJRFillCrosstabCell *)getCrosstabCellWithOrgOssPdfreporterCrosstabsJRCrosstabCell:(id<OrgOssPdfreporterCrosstabsJRCrosstabCell>)cell {
  OrgOssPdfreporterCrosstabsFillJRFillCrosstabCell *fillCell = nil;
  if (cell != nil) {
    fillCell = (OrgOssPdfreporterCrosstabsFillJRFillCrosstabCell *) [self getWithId:cell];
    if (fillCell == nil) {
      fillCell = [[OrgOssPdfreporterCrosstabsFillJRFillCrosstabCell alloc] initWithOrgOssPdfreporterCrosstabsJRCrosstabCell:cell withOrgOssPdfreporterCrosstabsFillJRFillCrosstabObjectFactory:self];
    }
  }
  return fillCell;
}

- (OrgOssPdfreporterCrosstabsFillJRFillCrosstabMeasure *)getCrosstabMeasureWithOrgOssPdfreporterCrosstabsJRCrosstabMeasure:(id<OrgOssPdfreporterCrosstabsJRCrosstabMeasure>)measure {
  OrgOssPdfreporterCrosstabsFillJRFillCrosstabMeasure *fillMeasure = nil;
  if (measure != nil) {
    fillMeasure = (OrgOssPdfreporterCrosstabsFillJRFillCrosstabMeasure *) [self getWithId:measure];
    if (fillMeasure == nil) {
      fillMeasure = [[OrgOssPdfreporterCrosstabsFillJRFillCrosstabMeasure alloc] initWithOrgOssPdfreporterCrosstabsJRCrosstabMeasure:measure withOrgOssPdfreporterCrosstabsFillJRFillCrosstabObjectFactory:self];
    }
  }
  return fillMeasure;
}

- (void)copyAllPropertiesTo:(id)copy {
  [super copyAllPropertiesTo:copy];
  OrgOssPdfreporterCrosstabsFillJRFillCrosstabObjectFactory *typedCopy = (OrgOssPdfreporterCrosstabsFillJRFillCrosstabObjectFactory *) copy;
  typedCopy.parentOriginProvider = parentOriginProvider_;
}

@end
