//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: pdfreporter-core/src/org/oss/pdfreporter/crosstabs/fill/calculation/BucketingService.java
//
//  Created by kendra on 9/27/13.
//

#include "IOSBooleanArray.h"
#include "IOSClass.h"
#include "IOSIntArray.h"
#include "IOSObjectArray.h"
#include "java/lang/ClassCastException.h"
#include "java/lang/Integer.h"
#include "java/lang/StringBuffer.h"
#include "java/lang/System.h"
#include "java/lang/UnsupportedOperationException.h"
#include "java/util/ArrayList.h"
#include "java/util/HashMap.h"
#include "java/util/Iterator.h"
#include "java/util/LinkedList.h"
#include "java/util/List.h"
#include "java/util/ListIterator.h"
#include "java/util/Map.h"
#include "java/util/Set.h"
#include "java/util/TreeMap.h"
#include "org/oss/pdfreporter/crosstabs/fill/calculation/BucketDefinition.h"
#include "org/oss/pdfreporter/crosstabs/fill/calculation/BucketingService.h"
#include "org/oss/pdfreporter/crosstabs/fill/calculation/BucketingServiceContext.h"
#include "org/oss/pdfreporter/crosstabs/fill/calculation/MeasureDefinition.h"
#include "org/oss/pdfreporter/engine/JRException.h"
#include "org/oss/pdfreporter/engine/JRPropertiesUtil.h"
#include "org/oss/pdfreporter/engine/JRRuntimeException.h"
#include "org/oss/pdfreporter/engine/JasperReportsContext.h"
#include "org/oss/pdfreporter/engine/fill/JRCalculable.h"
#include "org/oss/pdfreporter/engine/type/CalculationEnum.h"

@implementation OrgOssPdfreporterCrosstabsFillCalculationBucketingService

static NSString * OrgOssPdfreporterCrosstabsFillCalculationBucketingService_PROPERTY_BUCKET_MEASURE_LIMIT_ = @"net.sf.jasperreports.crosstab.bucket.measure.limit";

@synthesize serviceContext = serviceContext_;
@synthesize allBuckets = allBuckets_;
@synthesize buckets = buckets_;
@synthesize rowBucketCount = rowBucketCount_;
@synthesize colBucketCount = colBucketCount_;
@synthesize retrieveTotal = retrieveTotal_;
@synthesize rowRetrTotals = rowRetrTotals_;
@synthesize rowRetrTotalMin = rowRetrTotalMin_;
@synthesize rowRetrTotalMax = rowRetrTotalMax_;
@synthesize rowRetrColMax = rowRetrColMax_;
@synthesize measures = measures_;
@synthesize origMeasureCount = origMeasureCount_;
@synthesize measureIndexes = measureIndexes_;
@synthesize sorted = sorted_;
@synthesize bucketValueMap = bucketValueMap_;
@synthesize dataCount = dataCount_;
@synthesize processed = processed_;
@synthesize zeroUserMeasureValues = zeroUserMeasureValues_;
@synthesize bucketMeasureLimit = bucketMeasureLimit_;
@synthesize runningBucketMeasureCount = runningBucketMeasureCount_;

+ (NSString *)PROPERTY_BUCKET_MEASURE_LIMIT {
  return OrgOssPdfreporterCrosstabsFillCalculationBucketingService_PROPERTY_BUCKET_MEASURE_LIMIT_;
}

+ (char)DIMENSION_ROW {
  return OrgOssPdfreporterCrosstabsFillCalculationBucketingService_DIMENSION_ROW;
}

+ (char)DIMENSION_COLUMN {
  return OrgOssPdfreporterCrosstabsFillCalculationBucketingService_DIMENSION_COLUMN;
}

+ (int)DIMENSIONS {
  return OrgOssPdfreporterCrosstabsFillCalculationBucketingService_DIMENSIONS;
}

- (id)initWithOrgOssPdfreporterCrosstabsFillCalculationBucketingServiceContext:(id<OrgOssPdfreporterCrosstabsFillCalculationBucketingServiceContext>)serviceContext
                                                              withJavaUtilList:(id<JavaUtilList>)rowBuckets
                                                              withJavaUtilList:(id<JavaUtilList>)columnBuckets
                                                              withJavaUtilList:(id<JavaUtilList>)measures
                                                                      withBOOL:(BOOL)sorted
                                                             withBooleanArray2:(IOSObjectArray *)retrieveTotal {
  if ((self = [super init])) {
    self.serviceContext = serviceContext;
    self.sorted = sorted;
    buckets_ = [IOSObjectArray arrayWithLength:OrgOssPdfreporterCrosstabsFillCalculationBucketingService_DIMENSIONS type:[IOSObjectArray iosClassWithType:[IOSClass classWithClass:[OrgOssPdfreporterCrosstabsFillCalculationBucketDefinition class]]]];
    rowBucketCount_ = [((id<JavaUtilList>) nil_chk(rowBuckets)) size];
    (void) [((IOSObjectArray *) nil_chk(buckets_)) replaceObjectAtIndex:OrgOssPdfreporterCrosstabsFillCalculationBucketingService_DIMENSION_ROW withObject:[IOSObjectArray arrayWithLength:rowBucketCount_ type:[IOSClass classWithClass:[OrgOssPdfreporterCrosstabsFillCalculationBucketDefinition class]]]];
    (void) [((id<JavaUtilList>) nil_chk(rowBuckets)) toArrayWithNSObjectArray:[((IOSObjectArray *) nil_chk(buckets_)) objectAtIndex:OrgOssPdfreporterCrosstabsFillCalculationBucketingService_DIMENSION_ROW]];
    colBucketCount_ = [((id<JavaUtilList>) nil_chk(columnBuckets)) size];
    (void) [((IOSObjectArray *) nil_chk(buckets_)) replaceObjectAtIndex:OrgOssPdfreporterCrosstabsFillCalculationBucketingService_DIMENSION_COLUMN withObject:[IOSObjectArray arrayWithLength:colBucketCount_ type:[IOSClass classWithClass:[OrgOssPdfreporterCrosstabsFillCalculationBucketDefinition class]]]];
    (void) [((id<JavaUtilList>) nil_chk(columnBuckets)) toArrayWithNSObjectArray:[((IOSObjectArray *) nil_chk(buckets_)) objectAtIndex:OrgOssPdfreporterCrosstabsFillCalculationBucketingService_DIMENSION_COLUMN]];
    allBuckets_ = [IOSObjectArray arrayWithLength:rowBucketCount_ + colBucketCount_ type:[IOSClass classWithClass:[OrgOssPdfreporterCrosstabsFillCalculationBucketDefinition class]]];
    [JavaLangSystem arraycopyWithId:[((IOSObjectArray *) nil_chk(buckets_)) objectAtIndex:OrgOssPdfreporterCrosstabsFillCalculationBucketingService_DIMENSION_ROW] withInt:0 withId:allBuckets_ withInt:0 withInt:rowBucketCount_];
    [JavaLangSystem arraycopyWithId:[((IOSObjectArray *) nil_chk(buckets_)) objectAtIndex:OrgOssPdfreporterCrosstabsFillCalculationBucketingService_DIMENSION_COLUMN] withInt:0 withId:allBuckets_ withInt:rowBucketCount_ withInt:colBucketCount_];
    origMeasureCount_ = [((id<JavaUtilList>) nil_chk(measures)) size];
    id<JavaUtilList> measuresList = [[JavaUtilArrayList alloc] initWithInt:[((id<JavaUtilList>) nil_chk(measures)) size] * 2];
    id<JavaUtilList> measureIndexList = [[JavaUtilArrayList alloc] initWithInt:[((id<JavaUtilList>) nil_chk(measures)) size] * 2];
    for (int i = 0; i < [((id<JavaUtilList>) nil_chk(measures)) size]; ++i) {
      OrgOssPdfreporterCrosstabsFillCalculationMeasureDefinition *measure = [((id<JavaUtilList>) nil_chk(measures)) getWithInt:i];
      [self addMeasureWithOrgOssPdfreporterCrosstabsFillCalculationMeasureDefinition:measure withInt:i withJavaUtilList:measuresList withJavaUtilList:measureIndexList];
    }
    self.measures = [IOSObjectArray arrayWithLength:[((id<JavaUtilList>) nil_chk(measuresList)) size] type:[IOSClass classWithClass:[OrgOssPdfreporterCrosstabsFillCalculationMeasureDefinition class]]];
    (void) [((id<JavaUtilList>) nil_chk(measuresList)) toArrayWithNSObjectArray:self.measures];
    self.measureIndexes = [IOSIntArray arrayWithLength:[((id<JavaUtilList>) nil_chk(measureIndexList)) size]];
    for (int i = 0; i < (int) [((IOSIntArray *) nil_chk(measureIndexes_)) count]; ++i) {
      (*[((IOSIntArray *) nil_chk(measureIndexes_)) intRefAtIndex:i]) = [((JavaLangInteger *) nil_chk([((id<JavaUtilList>) nil_chk(measureIndexList)) getWithInt:i])) intValue];
    }
    self.retrieveTotal = retrieveTotal;
    [self checkTotals];
    bucketValueMap_ = [self createBucketMapWithInt:0];
    zeroUserMeasureValues_ = [self initUserMeasureValues];
    bucketMeasureLimit_ = [((OrgOssPdfreporterEngineJRPropertiesUtil *) nil_chk([OrgOssPdfreporterEngineJRPropertiesUtil getInstanceWithOrgOssPdfreporterEngineJasperReportsContext:[((id<OrgOssPdfreporterCrosstabsFillCalculationBucketingServiceContext>) nil_chk(serviceContext)) getJasperReportsContext]])) getIntegerPropertyWithNSString:OrgOssPdfreporterCrosstabsFillCalculationBucketingService_PROPERTY_BUCKET_MEASURE_LIMIT_ withInt:0];
  }
  return self;
}

- (void)checkTotals {
  rowRetrTotalMin_ = rowBucketCount_ + 1;
  rowRetrTotalMax_ = -1;
  rowRetrTotals_ = [IOSBooleanArray arrayWithLength:rowBucketCount_ + 1];
  rowRetrColMax_ = [IOSIntArray arrayWithLength:rowBucketCount_ + 1];
  for (int row = 0; row <= rowBucketCount_; ++row) {
    (*[((IOSIntArray *) nil_chk(rowRetrColMax_)) intRefAtIndex:row]) = -1;
    BOOL total = NO;
    for (int col = 0; col <= colBucketCount_; ++col) {
      if ([((IOSBooleanArray *) nil_chk([((IOSObjectArray *) nil_chk(retrieveTotal_)) objectAtIndex:row])) booleanAtIndex:col]) {
        total = YES;
        (*[((IOSIntArray *) nil_chk(rowRetrColMax_)) intRefAtIndex:row]) = col;
      }
    }
    (*[((IOSBooleanArray *) nil_chk(rowRetrTotals_)) booleanRefAtIndex:row]) = total;
    if (total) {
      if (row < rowRetrTotalMin_) {
        rowRetrTotalMin_ = row;
      }
      rowRetrTotalMax_ = row;
      if (row < rowBucketCount_) {
        [((OrgOssPdfreporterCrosstabsFillCalculationBucketDefinition *) nil_chk([((IOSObjectArray *) nil_chk(allBuckets_)) objectAtIndex:row])) setComputeTotal];
      }
    }
  }
  for (int col = 0; col < colBucketCount_; ++col) {
    OrgOssPdfreporterCrosstabsFillCalculationBucketDefinition *colBucket = [((IOSObjectArray *) nil_chk(allBuckets_)) objectAtIndex:rowBucketCount_ + col];
    if (![((OrgOssPdfreporterCrosstabsFillCalculationBucketDefinition *) nil_chk(colBucket)) computeTotal]) {
      BOOL total = NO;
      for (int row = 0; !total && row <= rowBucketCount_; ++row) {
        total = [((IOSBooleanArray *) nil_chk([((IOSObjectArray *) nil_chk(retrieveTotal_)) objectAtIndex:row])) booleanAtIndex:col];
      }
      if (total) {
        [((OrgOssPdfreporterCrosstabsFillCalculationBucketDefinition *) nil_chk(colBucket)) setComputeTotal];
      }
    }
  }
  for (int d = 0; d < OrgOssPdfreporterCrosstabsFillCalculationBucketingService_DIMENSIONS; ++d) {
    BOOL dTotal = NO;
    for (int i = 0; i < (int) [((IOSObjectArray *) nil_chk([((IOSObjectArray *) nil_chk(buckets_)) objectAtIndex:d])) count]; ++i) {
      if (dTotal) {
        [((OrgOssPdfreporterCrosstabsFillCalculationBucketDefinition *) nil_chk([((IOSObjectArray *) nil_chk([((IOSObjectArray *) nil_chk(buckets_)) objectAtIndex:d])) objectAtIndex:i])) setComputeTotal];
      }
      else {
        dTotal = [((OrgOssPdfreporterCrosstabsFillCalculationBucketDefinition *) nil_chk([((IOSObjectArray *) nil_chk([((IOSObjectArray *) nil_chk(buckets_)) objectAtIndex:d])) objectAtIndex:i])) computeTotal];
      }
    }
  }
}

- (void)clear {
  [((OrgOssPdfreporterCrosstabsFillCalculationBucketingService_BucketMap *) nil_chk(bucketValueMap_)) clear];
  processed_ = NO;
  dataCount_ = 0;
  runningBucketMeasureCount_ = 0;
}

- (OrgOssPdfreporterCrosstabsFillCalculationBucketingService_BucketMap *)createBucketMapWithInt:(int)level {
  OrgOssPdfreporterCrosstabsFillCalculationBucketingService_BucketMap *map;
  if (sorted_) {
    map = [[OrgOssPdfreporterCrosstabsFillCalculationBucketingService_BucketListMap alloc] initWithOrgOssPdfreporterCrosstabsFillCalculationBucketingService:self withInt:level withBOOL:NO];
  }
  else {
    map = [[OrgOssPdfreporterCrosstabsFillCalculationBucketingService_BucketTreeMap alloc] initWithOrgOssPdfreporterCrosstabsFillCalculationBucketingService:self withInt:level];
  }
  return map;
}

- (OrgOssPdfreporterCrosstabsFillCalculationBucketingService_BucketListMap *)createCollectBucketMapWithInt:(int)level {
  return [[OrgOssPdfreporterCrosstabsFillCalculationBucketingService_BucketListMap alloc] initWithOrgOssPdfreporterCrosstabsFillCalculationBucketingService:self withInt:level withBOOL:YES];
}

- (void)addMeasureWithOrgOssPdfreporterCrosstabsFillCalculationMeasureDefinition:(OrgOssPdfreporterCrosstabsFillCalculationMeasureDefinition *)measure
                                                                         withInt:(int)index
                                                                withJavaUtilList:(id<JavaUtilList>)measuresList
                                                                withJavaUtilList:(id<JavaUtilList>)measureIndexList {
  switch ([[((OrgOssPdfreporterCrosstabsFillCalculationMeasureDefinition *) nil_chk(measure)) getCalculation] ordinal]) {
    case OrgOssPdfreporterEngineTypeCalculationEnum_AVERAGE:
    case OrgOssPdfreporterEngineTypeCalculationEnum_VARIANCE:
    {
      OrgOssPdfreporterCrosstabsFillCalculationMeasureDefinition *sumMeasure = [OrgOssPdfreporterCrosstabsFillCalculationMeasureDefinition createHelperMeasureWithOrgOssPdfreporterCrosstabsFillCalculationMeasureDefinition:measure withOrgOssPdfreporterEngineTypeCalculationEnumEnum:[OrgOssPdfreporterEngineTypeCalculationEnumEnum SUM]];
      [self addMeasureWithOrgOssPdfreporterCrosstabsFillCalculationMeasureDefinition:sumMeasure withInt:index withJavaUtilList:measuresList withJavaUtilList:measureIndexList];
      OrgOssPdfreporterCrosstabsFillCalculationMeasureDefinition *countMeasure = [OrgOssPdfreporterCrosstabsFillCalculationMeasureDefinition createHelperMeasureWithOrgOssPdfreporterCrosstabsFillCalculationMeasureDefinition:measure withOrgOssPdfreporterEngineTypeCalculationEnumEnum:[OrgOssPdfreporterEngineTypeCalculationEnumEnum COUNT]];
      [self addMeasureWithOrgOssPdfreporterCrosstabsFillCalculationMeasureDefinition:countMeasure withInt:index withJavaUtilList:measuresList withJavaUtilList:measureIndexList];
      break;
    }
    case OrgOssPdfreporterEngineTypeCalculationEnum_STANDARD_DEVIATION:
    {
      OrgOssPdfreporterCrosstabsFillCalculationMeasureDefinition *varianceMeasure = [OrgOssPdfreporterCrosstabsFillCalculationMeasureDefinition createHelperMeasureWithOrgOssPdfreporterCrosstabsFillCalculationMeasureDefinition:measure withOrgOssPdfreporterEngineTypeCalculationEnumEnum:[OrgOssPdfreporterEngineTypeCalculationEnumEnum VARIANCE]];
      [self addMeasureWithOrgOssPdfreporterCrosstabsFillCalculationMeasureDefinition:varianceMeasure withInt:index withJavaUtilList:measuresList withJavaUtilList:measureIndexList];
      break;
    }
    case OrgOssPdfreporterEngineTypeCalculationEnum_DISTINCT_COUNT:
    {
      OrgOssPdfreporterCrosstabsFillCalculationMeasureDefinition *countMeasure = [OrgOssPdfreporterCrosstabsFillCalculationMeasureDefinition createDistinctCountHelperMeasureWithOrgOssPdfreporterCrosstabsFillCalculationMeasureDefinition:measure];
      [self addMeasureWithOrgOssPdfreporterCrosstabsFillCalculationMeasureDefinition:countMeasure withInt:index withJavaUtilList:measuresList withJavaUtilList:measureIndexList];
      break;
    }
  }
  [((id<JavaUtilList>) nil_chk(measuresList)) addWithId:measure];
  [((id<JavaUtilList>) nil_chk(measureIndexList)) addWithId:[JavaLangInteger valueOfWithInt:index]];
}

- (void)addDataWithNSObjectArray:(IOSObjectArray *)bucketValues
               withNSObjectArray:(IOSObjectArray *)measureValues {
  if (processed_) {
    @throw [[OrgOssPdfreporterEngineJRException alloc] initWithNSString:@"Crosstab data has already been processed."];
  }
  ++dataCount_;
  IOSObjectArray *bucketVals = [self getBucketValuesWithNSObjectArray:bucketValues];
  IOSObjectArray *values = [((OrgOssPdfreporterCrosstabsFillCalculationBucketingService_BucketMap *) nil_chk(bucketValueMap_)) insertMeasureValuesWithOrgOssPdfreporterCrosstabsFillCalculationBucketDefinition_BucketArray:bucketVals];
  for (int i = 0; i < (int) [((IOSObjectArray *) nil_chk(measures_)) count]; ++i) {
    id measureValue = [((IOSObjectArray *) nil_chk(measureValues)) objectAtIndex:[((IOSIntArray *) nil_chk(measureIndexes_)) intAtIndex:i]];
    [((OrgOssPdfreporterCrosstabsFillCalculationMeasureDefinition_MeasureValue *) nil_chk([((IOSObjectArray *) nil_chk(values)) objectAtIndex:i])) addValueWithId:measureValue];
  }
}

- (void)bucketMeasuresCreated {
  runningBucketMeasureCount_ += origMeasureCount_;
  [self checkBucketMeasureCountWithInt:runningBucketMeasureCount_];
}

- (IOSObjectArray *)getBucketValuesWithNSObjectArray:(IOSObjectArray *)bucketValues {
  IOSObjectArray *bucketVals = [IOSObjectArray arrayWithLength:(int) [((IOSObjectArray *) nil_chk(allBuckets_)) count] type:[IOSClass classWithClass:[OrgOssPdfreporterCrosstabsFillCalculationBucketDefinition_Bucket class]]];
  for (int i = 0; i < (int) [((IOSObjectArray *) nil_chk(allBuckets_)) count]; ++i) {
    OrgOssPdfreporterCrosstabsFillCalculationBucketDefinition *bucket = [((IOSObjectArray *) nil_chk(allBuckets_)) objectAtIndex:i];
    id value = [((IOSObjectArray *) nil_chk(bucketValues)) objectAtIndex:i];
    (void) [((IOSObjectArray *) nil_chk(bucketVals)) replaceObjectAtIndex:i withObject:[((OrgOssPdfreporterCrosstabsFillCalculationBucketDefinition *) nil_chk(bucket)) createWithId:value]];
  }
  return bucketVals;
}

- (IOSObjectArray *)initMeasureValues OBJC_METHOD_FAMILY_NONE {
  IOSObjectArray *values;
  values = [IOSObjectArray arrayWithLength:(int) [((IOSObjectArray *) nil_chk(measures_)) count] type:[IOSClass classWithClass:[OrgOssPdfreporterCrosstabsFillCalculationMeasureDefinition_MeasureValue class]]];
  for (int i = 0; i < (int) [((IOSObjectArray *) nil_chk(measures_)) count]; ++i) {
    OrgOssPdfreporterCrosstabsFillCalculationMeasureDefinition *measure = [((IOSObjectArray *) nil_chk(measures_)) objectAtIndex:i];
    (void) [((IOSObjectArray *) nil_chk(values)) replaceObjectAtIndex:i withObject:[[OrgOssPdfreporterCrosstabsFillCalculationMeasureDefinition_MeasureValue alloc] initWithOrgOssPdfreporterCrosstabsFillCalculationMeasureDefinition:measure]];
    switch ([[((OrgOssPdfreporterCrosstabsFillCalculationMeasureDefinition *) nil_chk(measure)) getCalculation] ordinal]) {
      case OrgOssPdfreporterEngineTypeCalculationEnum_AVERAGE:
      case OrgOssPdfreporterEngineTypeCalculationEnum_VARIANCE:
      {
        (void) [((OrgOssPdfreporterCrosstabsFillCalculationMeasureDefinition_MeasureValue *) nil_chk([((IOSObjectArray *) nil_chk(values)) objectAtIndex:i])) setHelperWithOrgOssPdfreporterCrosstabsFillCalculationMeasureDefinition_MeasureValue:[((IOSObjectArray *) nil_chk(values)) objectAtIndex:i - 2] withChar:OrgOssPdfreporterEngineFillJRCalculable_HELPER_SUM];
        (void) [((OrgOssPdfreporterCrosstabsFillCalculationMeasureDefinition_MeasureValue *) nil_chk([((IOSObjectArray *) nil_chk(values)) objectAtIndex:i])) setHelperWithOrgOssPdfreporterCrosstabsFillCalculationMeasureDefinition_MeasureValue:[((IOSObjectArray *) nil_chk(values)) objectAtIndex:i - 1] withChar:OrgOssPdfreporterEngineFillJRCalculable_HELPER_COUNT];
        break;
      }
      case OrgOssPdfreporterEngineTypeCalculationEnum_STANDARD_DEVIATION:
      {
        (void) [((OrgOssPdfreporterCrosstabsFillCalculationMeasureDefinition_MeasureValue *) nil_chk([((IOSObjectArray *) nil_chk(values)) objectAtIndex:i])) setHelperWithOrgOssPdfreporterCrosstabsFillCalculationMeasureDefinition_MeasureValue:[((IOSObjectArray *) nil_chk(values)) objectAtIndex:i - 1] withChar:OrgOssPdfreporterEngineFillJRCalculable_HELPER_VARIANCE];
      }
      case OrgOssPdfreporterEngineTypeCalculationEnum_DISTINCT_COUNT:
      {
        (void) [((OrgOssPdfreporterCrosstabsFillCalculationMeasureDefinition_MeasureValue *) nil_chk([((IOSObjectArray *) nil_chk(values)) objectAtIndex:i])) setHelperWithOrgOssPdfreporterCrosstabsFillCalculationMeasureDefinition_MeasureValue:[((IOSObjectArray *) nil_chk(values)) objectAtIndex:i - 1] withChar:OrgOssPdfreporterEngineFillJRCalculable_HELPER_COUNT];
      }
    }
  }
  return values;
}

- (IOSObjectArray *)initUserMeasureValues OBJC_METHOD_FAMILY_NONE {
  IOSObjectArray *vals = [IOSObjectArray arrayWithLength:origMeasureCount_ type:[IOSClass classWithClass:[OrgOssPdfreporterCrosstabsFillCalculationMeasureDefinition_MeasureValue class]]];
  for (int c = 0, i = 0; i < (int) [((IOSObjectArray *) nil_chk(measures_)) count]; ++i) {
    if (![((OrgOssPdfreporterCrosstabsFillCalculationMeasureDefinition *) nil_chk([((IOSObjectArray *) nil_chk(measures_)) objectAtIndex:i])) isSystemDefined]) {
      (void) [((IOSObjectArray *) nil_chk(vals)) replaceObjectAtIndex:c withObject:[[OrgOssPdfreporterCrosstabsFillCalculationMeasureDefinition_MeasureValue alloc] initWithOrgOssPdfreporterCrosstabsFillCalculationMeasureDefinition:[((IOSObjectArray *) nil_chk(measures_)) objectAtIndex:i]]];
      ++c;
    }
  }
  return vals;
}

- (void)processData {
  if (!processed_) {
    if (dataCount_ > 0) {
      if ([((OrgOssPdfreporterCrosstabsFillCalculationBucketDefinition *) nil_chk([((IOSObjectArray *) nil_chk(allBuckets_)) objectAtIndex:rowBucketCount_ - 1])) computeTotal] || [((OrgOssPdfreporterCrosstabsFillCalculationBucketDefinition *) nil_chk([((IOSObjectArray *) nil_chk(allBuckets_)) objectAtIndex:(int) [((IOSObjectArray *) nil_chk(allBuckets_)) count] - 1])) computeTotal]) {
        [self computeTotalsWithOrgOssPdfreporterCrosstabsFillCalculationBucketingService_BucketMap:bucketValueMap_];
      }
    }
    processed_ = YES;
  }
}

- (BOOL)hasData {
  return dataCount_ > 0;
}

- (IOSObjectArray *)getMeasureValuesWithOrgOssPdfreporterCrosstabsFillCalculationBucketDefinition_BucketArray:(IOSObjectArray *)bucketValues {
  OrgOssPdfreporterCrosstabsFillCalculationBucketingService_BucketMap *map = bucketValueMap_;
  for (int i = 0; map != nil && i < (int) [((IOSObjectArray *) nil_chk(allBuckets_)) count] - 1; ++i) {
    map = (OrgOssPdfreporterCrosstabsFillCalculationBucketingService_BucketMap *) [((OrgOssPdfreporterCrosstabsFillCalculationBucketingService_BucketMap *) nil_chk(map)) getWithOrgOssPdfreporterCrosstabsFillCalculationBucketDefinition_Bucket:[((IOSObjectArray *) nil_chk(bucketValues)) objectAtIndex:i]];
  }
  return map == nil ? nil : (IOSObjectArray *) [((OrgOssPdfreporterCrosstabsFillCalculationBucketingService_BucketMap *) nil_chk(map)) getWithOrgOssPdfreporterCrosstabsFillCalculationBucketDefinition_Bucket:[((IOSObjectArray *) nil_chk(bucketValues)) objectAtIndex:(int) [((IOSObjectArray *) nil_chk(allBuckets_)) count] - 1]];
}

- (IOSObjectArray *)getUserMeasureValuesWithOrgOssPdfreporterCrosstabsFillCalculationMeasureDefinition_MeasureValueArray:(IOSObjectArray *)values {
  IOSObjectArray *vals = [IOSObjectArray arrayWithLength:origMeasureCount_ type:[IOSClass classWithClass:[OrgOssPdfreporterCrosstabsFillCalculationMeasureDefinition_MeasureValue class]]];
  for (int c = 0, i = 0; i < (int) [((IOSObjectArray *) nil_chk(measures_)) count]; ++i) {
    if (![((OrgOssPdfreporterCrosstabsFillCalculationMeasureDefinition *) nil_chk([((IOSObjectArray *) nil_chk(measures_)) objectAtIndex:i])) isSystemDefined]) {
      (void) [((IOSObjectArray *) nil_chk(vals)) replaceObjectAtIndex:c withObject:[((IOSObjectArray *) nil_chk(values)) objectAtIndex:i]];
      ++c;
    }
  }
  return vals;
}

- (IOSObjectArray *)getZeroUserMeasureValues {
  return zeroUserMeasureValues_;
}

- (IOSObjectArray *)getGrandTotals {
  OrgOssPdfreporterCrosstabsFillCalculationBucketingService_BucketMap *map = bucketValueMap_;
  for (int i = 0; map != nil && i < (int) [((IOSObjectArray *) nil_chk(allBuckets_)) count] - 1; ++i) {
    map = (OrgOssPdfreporterCrosstabsFillCalculationBucketingService_BucketMap *) [((OrgOssPdfreporterCrosstabsFillCalculationBucketingService_MapEntry *) nil_chk([((OrgOssPdfreporterCrosstabsFillCalculationBucketingService_BucketMap *) nil_chk(map)) getTotalEntry])) getValue];
  }
  return map == nil ? nil : (IOSObjectArray *) [((OrgOssPdfreporterCrosstabsFillCalculationBucketingService_MapEntry *) nil_chk([((OrgOssPdfreporterCrosstabsFillCalculationBucketingService_BucketMap *) nil_chk(map)) getTotalEntry])) getValue];
}

- (void)computeTotalsWithOrgOssPdfreporterCrosstabsFillCalculationBucketingService_BucketMap:(OrgOssPdfreporterCrosstabsFillCalculationBucketingService_BucketMap *)bucketMap {
  char dimension = ((OrgOssPdfreporterCrosstabsFillCalculationBucketingService_BucketMap *) nil_chk(bucketMap)).level < rowBucketCount_ ? OrgOssPdfreporterCrosstabsFillCalculationBucketingService_DIMENSION_ROW : OrgOssPdfreporterCrosstabsFillCalculationBucketingService_DIMENSION_COLUMN;
  if (dimension == OrgOssPdfreporterCrosstabsFillCalculationBucketingService_DIMENSION_COLUMN && ![((OrgOssPdfreporterCrosstabsFillCalculationBucketDefinition *) nil_chk([((IOSObjectArray *) nil_chk(allBuckets_)) objectAtIndex:(int) [((IOSObjectArray *) nil_chk(allBuckets_)) count] - 1])) computeTotal]) {
    return;
  }
  if (!((OrgOssPdfreporterCrosstabsFillCalculationBucketingService_BucketMap *) nil_chk(bucketMap)).last) {
    for (id<JavaUtilIterator> it = [((OrgOssPdfreporterCrosstabsFillCalculationBucketingService_BucketMap *) nil_chk(bucketMap)) entryIterator]; [((id<JavaUtilIterator>) nil_chk(it)) hasNext]; ) {
      id<JavaUtilMap_Entry> entry = [((id<JavaUtilIterator>) nil_chk(it)) next];
      [self computeTotalsWithOrgOssPdfreporterCrosstabsFillCalculationBucketingService_BucketMap:(OrgOssPdfreporterCrosstabsFillCalculationBucketingService_BucketMap *) [((id<JavaUtilMap_Entry>) nil_chk(entry)) getValue]];
    }
  }
  if ([((OrgOssPdfreporterCrosstabsFillCalculationBucketDefinition *) nil_chk([((IOSObjectArray *) nil_chk(allBuckets_)) objectAtIndex:((OrgOssPdfreporterCrosstabsFillCalculationBucketingService_BucketMap *) nil_chk(bucketMap)).level])) computeTotal]) {
    if (dimension == OrgOssPdfreporterCrosstabsFillCalculationBucketingService_DIMENSION_COLUMN) {
      [self computeColumnTotalWithOrgOssPdfreporterCrosstabsFillCalculationBucketingService_BucketMap:bucketMap];
    }
    else {
      [self computeRowTotalsWithOrgOssPdfreporterCrosstabsFillCalculationBucketingService_BucketMap:bucketMap];
    }
  }
}

- (void)sumValsWithOrgOssPdfreporterCrosstabsFillCalculationMeasureDefinition_MeasureValueArray:(IOSObjectArray *)totals
               withOrgOssPdfreporterCrosstabsFillCalculationMeasureDefinition_MeasureValueArray:(IOSObjectArray *)vals {
  for (int i = 0; i < (int) [((IOSObjectArray *) nil_chk(measures_)) count]; i++) {
    [((OrgOssPdfreporterCrosstabsFillCalculationMeasureDefinition_MeasureValue *) nil_chk([((IOSObjectArray *) nil_chk(totals)) objectAtIndex:i])) addValueWithOrgOssPdfreporterCrosstabsFillCalculationMeasureDefinition_MeasureValue:[((IOSObjectArray *) nil_chk(vals)) objectAtIndex:i]];
  }
}

- (void)computeColumnTotalWithOrgOssPdfreporterCrosstabsFillCalculationBucketingService_BucketMap:(OrgOssPdfreporterCrosstabsFillCalculationBucketingService_BucketMap *)bucketMap {
  IOSObjectArray *totals = [self initMeasureValues];
  for (id<JavaUtilIterator> it = [((OrgOssPdfreporterCrosstabsFillCalculationBucketingService_BucketMap *) nil_chk(bucketMap)) entryIterator]; [((id<JavaUtilIterator>) nil_chk(it)) hasNext]; ) {
    id<JavaUtilMap_Entry> entry = [((id<JavaUtilIterator>) nil_chk(it)) next];
    for (int i = ((OrgOssPdfreporterCrosstabsFillCalculationBucketingService_BucketMap *) nil_chk(bucketMap)).level + 1; i < (int) [((IOSObjectArray *) nil_chk(allBuckets_)) count]; ++i) {
      entry = [((OrgOssPdfreporterCrosstabsFillCalculationBucketingService_BucketMap *) [((id<JavaUtilMap_Entry>) nil_chk(entry)) getValue]) getTotalEntry];
    }
    [self sumValsWithOrgOssPdfreporterCrosstabsFillCalculationMeasureDefinition_MeasureValueArray:totals withOrgOssPdfreporterCrosstabsFillCalculationMeasureDefinition_MeasureValueArray:(IOSObjectArray *) [((id<JavaUtilMap_Entry>) nil_chk(entry)) getValue]];
  }
  for (int i = ((OrgOssPdfreporterCrosstabsFillCalculationBucketingService_BucketMap *) nil_chk(bucketMap)).level + 1; i < (int) [((IOSObjectArray *) nil_chk(allBuckets_)) count]; ++i) {
    bucketMap = [((OrgOssPdfreporterCrosstabsFillCalculationBucketingService_BucketMap *) nil_chk(bucketMap)) addTotalNextMap];
  }
  [((OrgOssPdfreporterCrosstabsFillCalculationBucketingService_BucketMap *) nil_chk(bucketMap)) addTotalEntryWithId:totals];
}

- (void)computeRowTotalsWithOrgOssPdfreporterCrosstabsFillCalculationBucketingService_BucketMap:(OrgOssPdfreporterCrosstabsFillCalculationBucketingService_BucketMap *)bucketMap {
  OrgOssPdfreporterCrosstabsFillCalculationBucketingService_BucketListMap *totals = [self createCollectBucketMapWithInt:rowBucketCount_];
  for (id<JavaUtilIterator> it = [((OrgOssPdfreporterCrosstabsFillCalculationBucketingService_BucketMap *) nil_chk(bucketMap)) entryIterator]; [((id<JavaUtilIterator>) nil_chk(it)) hasNext]; ) {
    id<JavaUtilMap_Entry> entry = [((id<JavaUtilIterator>) nil_chk(it)) next];
    for (int i = ((OrgOssPdfreporterCrosstabsFillCalculationBucketingService_BucketMap *) nil_chk(bucketMap)).level + 1; i < rowBucketCount_; ++i) {
      entry = [((OrgOssPdfreporterCrosstabsFillCalculationBucketingService_BucketMap *) [((id<JavaUtilMap_Entry>) nil_chk(entry)) getValue]) getTotalEntry];
    }
    [((OrgOssPdfreporterCrosstabsFillCalculationBucketingService_BucketListMap *) nil_chk(totals)) collectValsWithOrgOssPdfreporterCrosstabsFillCalculationBucketingService_BucketMap:(OrgOssPdfreporterCrosstabsFillCalculationBucketingService_BucketMap *) [((id<JavaUtilMap_Entry>) nil_chk(entry)) getValue] withBOOL:YES];
  }
  OrgOssPdfreporterCrosstabsFillCalculationBucketingService_BucketMap *totalBucketMap = bucketMap;
  for (int i = ((OrgOssPdfreporterCrosstabsFillCalculationBucketingService_BucketMap *) nil_chk(bucketMap)).level + 1; i < rowBucketCount_; ++i) {
    totalBucketMap = [((OrgOssPdfreporterCrosstabsFillCalculationBucketingService_BucketMap *) nil_chk(totalBucketMap)) addTotalNextMap];
  }
  [((OrgOssPdfreporterCrosstabsFillCalculationBucketingService_BucketMap *) nil_chk(totalBucketMap)) addTotalEntryWithId:totals];
}

- (void)checkBucketMeasureCountWithInt:(int)bucketMeasureCount {
  if (bucketMeasureLimit_ > 0 && bucketMeasureCount > bucketMeasureLimit_) {
    @throw [[OrgOssPdfreporterEngineJRRuntimeException alloc] initWithNSString:[NSString stringWithFormat:@"Crosstab bucket/measure limit (%d) exceeded.", bucketMeasureLimit_]];
  }
}

- (void)copyAllPropertiesTo:(id)copy {
  [super copyAllPropertiesTo:copy];
  OrgOssPdfreporterCrosstabsFillCalculationBucketingService *typedCopy = (OrgOssPdfreporterCrosstabsFillCalculationBucketingService *) copy;
  typedCopy.serviceContext = serviceContext_;
  typedCopy.allBuckets = allBuckets_;
  typedCopy.buckets = buckets_;
  typedCopy.rowBucketCount = rowBucketCount_;
  typedCopy.colBucketCount = colBucketCount_;
  typedCopy.retrieveTotal = retrieveTotal_;
  typedCopy.rowRetrTotals = rowRetrTotals_;
  typedCopy.rowRetrTotalMin = rowRetrTotalMin_;
  typedCopy.rowRetrTotalMax = rowRetrTotalMax_;
  typedCopy.rowRetrColMax = rowRetrColMax_;
  typedCopy.measures = measures_;
  typedCopy.origMeasureCount = origMeasureCount_;
  typedCopy.measureIndexes = measureIndexes_;
  typedCopy.sorted = sorted_;
  typedCopy.bucketValueMap = bucketValueMap_;
  typedCopy.dataCount = dataCount_;
  typedCopy.processed = processed_;
  typedCopy.zeroUserMeasureValues = zeroUserMeasureValues_;
  typedCopy.bucketMeasureLimit = bucketMeasureLimit_;
  typedCopy.runningBucketMeasureCount = runningBucketMeasureCount_;
}

@end
@implementation OrgOssPdfreporterCrosstabsFillCalculationBucketingService_MapEntry

@synthesize key = key_;
@synthesize value = value_;

- (id)initWithOrgOssPdfreporterCrosstabsFillCalculationBucketDefinition_Bucket:(OrgOssPdfreporterCrosstabsFillCalculationBucketDefinition_Bucket *)key
                                                                        withId:(id)value {
  if ((self = [super init])) {
    self.key = key;
    self.value = value;
  }
  return self;
}

- (OrgOssPdfreporterCrosstabsFillCalculationBucketDefinition_Bucket *)getKey {
  return key_;
}

- (id)getValue {
  return value_;
}

- (id)setValueWithId:(id)value {
  @throw [[JavaLangUnsupportedOperationException alloc] init];
}

- (int)compareToWithId:(OrgOssPdfreporterCrosstabsFillCalculationBucketingService_MapEntry *)o {
  if (o != nil && ![o isKindOfClass:[OrgOssPdfreporterCrosstabsFillCalculationBucketingService_MapEntry class]]) {
    @throw [[JavaLangClassCastException alloc] init];
  }
  return [((OrgOssPdfreporterCrosstabsFillCalculationBucketDefinition_Bucket *) nil_chk(key_)) compareToWithId:((OrgOssPdfreporterCrosstabsFillCalculationBucketingService_MapEntry *) nil_chk(o)).key];
}

- (NSString *)description {
  return [NSString stringWithFormat:@"%@=%@", key_, value_];
}

- (void)copyAllPropertiesTo:(id)copy {
  [super copyAllPropertiesTo:copy];
  OrgOssPdfreporterCrosstabsFillCalculationBucketingService_MapEntry *typedCopy = (OrgOssPdfreporterCrosstabsFillCalculationBucketingService_MapEntry *) copy;
  typedCopy.key = key_;
  typedCopy.value = value_;
}

@end
@implementation OrgOssPdfreporterCrosstabsFillCalculationBucketingService_BucketMap

@synthesize this$0 = this$0_;
@synthesize level = level_;
@synthesize last = last_;
@synthesize totalKey = totalKey_;

- (id)initWithOrgOssPdfreporterCrosstabsFillCalculationBucketingService:(OrgOssPdfreporterCrosstabsFillCalculationBucketingService *)outer$
                                                                withInt:(int)level {
  if ((self = [super init])) {
    this$0_ = outer$;
    self.level = level;
    self.last = level == (int) [((IOSObjectArray *) nil_chk(outer$.allBuckets)) count] - 1;
    totalKey_ = ((OrgOssPdfreporterCrosstabsFillCalculationBucketDefinition *) nil_chk([((IOSObjectArray *) nil_chk(outer$.allBuckets)) objectAtIndex:level])).VALUE_TOTAL;
  }
  return self;
}

- (OrgOssPdfreporterCrosstabsFillCalculationBucketingService_BucketMap *)addTotalNextMap {
  OrgOssPdfreporterCrosstabsFillCalculationBucketingService_BucketMap *nextMap = [this$0_ createBucketMapWithInt:level_ + 1];
  [self addTotalEntryWithId:nextMap];
  return nextMap;
}

- (void)clear {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
}

- (id<JavaUtilIterator>)entryIterator {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}

- (id)getWithOrgOssPdfreporterCrosstabsFillCalculationBucketDefinition_Bucket:(OrgOssPdfreporterCrosstabsFillCalculationBucketDefinition_Bucket *)key {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}

- (IOSObjectArray *)insertMeasureValuesWithOrgOssPdfreporterCrosstabsFillCalculationBucketDefinition_BucketArray:(IOSObjectArray *)bucketValues {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}

- (void)addTotalEntryWithId:(id)val {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
}

- (int)size {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}

- (id)getTotal {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}

- (OrgOssPdfreporterCrosstabsFillCalculationBucketingService_MapEntry *)getTotalEntry {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}

- (void)copyAllPropertiesTo:(id)copy {
  [super copyAllPropertiesTo:copy];
  OrgOssPdfreporterCrosstabsFillCalculationBucketingService_BucketMap *typedCopy = (OrgOssPdfreporterCrosstabsFillCalculationBucketingService_BucketMap *) copy;
  typedCopy.this$0 = this$0_;
  typedCopy.level = level_;
  typedCopy.last = last_;
  typedCopy.totalKey = totalKey_;
}

@end
@implementation OrgOssPdfreporterCrosstabsFillCalculationBucketingService_BucketTreeMap

@synthesize this$1 = this$1_;
@synthesize map = map_;

- (id)initWithOrgOssPdfreporterCrosstabsFillCalculationBucketingService:(OrgOssPdfreporterCrosstabsFillCalculationBucketingService *)outer$
                                                                withInt:(int)level {
  if ((self = [super initWithOrgOssPdfreporterCrosstabsFillCalculationBucketingService:outer$ withInt:level])) {
    this$1_ = outer$;
    map_ = [[JavaUtilTreeMap alloc] init];
  }
  return self;
}

- (void)clear {
  [((JavaUtilTreeMap *) nil_chk(map_)) clear];
}

- (id<JavaUtilIterator>)entryIterator {
  return [((id<JavaUtilSet>) nil_chk([((JavaUtilTreeMap *) nil_chk(map_)) entrySet])) iterator];
}

- (id)getWithOrgOssPdfreporterCrosstabsFillCalculationBucketDefinition_Bucket:(OrgOssPdfreporterCrosstabsFillCalculationBucketDefinition_Bucket *)key {
  return [((JavaUtilTreeMap *) nil_chk(map_)) getWithId:key];
}

- (IOSObjectArray *)insertMeasureValuesWithOrgOssPdfreporterCrosstabsFillCalculationBucketDefinition_BucketArray:(IOSObjectArray *)bucketValues {
  OrgOssPdfreporterCrosstabsFillCalculationBucketingService_BucketTreeMap *levelMap = (OrgOssPdfreporterCrosstabsFillCalculationBucketingService_BucketTreeMap *) this$1_.bucketValueMap;
  for (int i = 0; i < (int) [((IOSObjectArray *) nil_chk(bucketValues)) count] - 1; i++) {
    OrgOssPdfreporterCrosstabsFillCalculationBucketingService_BucketTreeMap *nextMap = (OrgOssPdfreporterCrosstabsFillCalculationBucketingService_BucketTreeMap *) [((OrgOssPdfreporterCrosstabsFillCalculationBucketingService_BucketTreeMap *) nil_chk(levelMap)) getWithOrgOssPdfreporterCrosstabsFillCalculationBucketDefinition_Bucket:[((IOSObjectArray *) nil_chk(bucketValues)) objectAtIndex:i]];
    if (nextMap == nil) {
      nextMap = [[OrgOssPdfreporterCrosstabsFillCalculationBucketingService_BucketTreeMap alloc] initWithOrgOssPdfreporterCrosstabsFillCalculationBucketingService:this$1_ withInt:i + 1];
      (void) [((JavaUtilTreeMap *) nil_chk(((OrgOssPdfreporterCrosstabsFillCalculationBucketingService_BucketTreeMap *) nil_chk(levelMap)).map)) putWithId:[((IOSObjectArray *) nil_chk(bucketValues)) objectAtIndex:i] withId:nextMap];
    }
    levelMap = nextMap;
  }
  IOSObjectArray *values = (IOSObjectArray *) [((OrgOssPdfreporterCrosstabsFillCalculationBucketingService_BucketTreeMap *) nil_chk(levelMap)) getWithOrgOssPdfreporterCrosstabsFillCalculationBucketDefinition_Bucket:[((IOSObjectArray *) nil_chk(bucketValues)) objectAtIndex:(int) [((IOSObjectArray *) nil_chk(bucketValues)) count] - 1]];
  if (values == nil) {
    values = [this$1_ initMeasureValues];
    (void) [((JavaUtilTreeMap *) nil_chk(((OrgOssPdfreporterCrosstabsFillCalculationBucketingService_BucketTreeMap *) nil_chk(levelMap)).map)) putWithId:[((IOSObjectArray *) nil_chk(bucketValues)) objectAtIndex:(int) [((IOSObjectArray *) nil_chk(bucketValues)) count] - 1] withId:values];
    [this$1_ bucketMeasuresCreated];
  }
  return values;
}

- (int)size {
  return [((JavaUtilTreeMap *) nil_chk(map_)) size];
}

- (void)addTotalEntryWithId:(id)value {
  (void) [((JavaUtilTreeMap *) nil_chk(map_)) putWithId:totalKey_ withId:value];
}

- (id)getTotal {
  return [self getWithOrgOssPdfreporterCrosstabsFillCalculationBucketDefinition_Bucket:totalKey_];
}

- (OrgOssPdfreporterCrosstabsFillCalculationBucketingService_MapEntry *)getTotalEntry {
  id value = [self getWithOrgOssPdfreporterCrosstabsFillCalculationBucketDefinition_Bucket:totalKey_];
  return value == nil ? nil : [[OrgOssPdfreporterCrosstabsFillCalculationBucketingService_MapEntry alloc] initWithOrgOssPdfreporterCrosstabsFillCalculationBucketDefinition_Bucket:totalKey_ withId:value];
}

- (NSString *)description {
  return [((JavaUtilTreeMap *) nil_chk(map_)) description];
}

- (void)copyAllPropertiesTo:(id)copy {
  [super copyAllPropertiesTo:copy];
  OrgOssPdfreporterCrosstabsFillCalculationBucketingService_BucketTreeMap *typedCopy = (OrgOssPdfreporterCrosstabsFillCalculationBucketingService_BucketTreeMap *) copy;
  typedCopy.this$1 = this$1_;
  typedCopy.map = map_;
}

@end
@implementation OrgOssPdfreporterCrosstabsFillCalculationBucketingService_BucketListMap

@synthesize this$1 = this$1_;
@synthesize entries = entries_;
@synthesize entryMap = entryMap_;

- (id)initWithOrgOssPdfreporterCrosstabsFillCalculationBucketingService:(OrgOssPdfreporterCrosstabsFillCalculationBucketingService *)outer$
                                                                withInt:(int)level
                                                               withBOOL:(BOOL)linked {
  if ((self = [super initWithOrgOssPdfreporterCrosstabsFillCalculationBucketingService:outer$ withInt:level])) {
    this$1_ = outer$;
    if (linked) {
      entries_ = [[JavaUtilLinkedList alloc] init];
    }
    else {
      entries_ = [[JavaUtilArrayList alloc] init];
    }
    entryMap_ = [[JavaUtilHashMap alloc] init];
  }
  return self;
}

- (void)clear {
  [((id<JavaUtilList>) nil_chk(entries_)) clear];
  [((id<JavaUtilMap>) nil_chk(entryMap_)) clear];
}

- (id<JavaUtilIterator>)entryIterator {
  return [((id<JavaUtilList>) nil_chk(entries_)) iterator];
}

- (void)addWithOrgOssPdfreporterCrosstabsFillCalculationBucketDefinition_Bucket:(OrgOssPdfreporterCrosstabsFillCalculationBucketDefinition_Bucket *)key
                                                                         withId:(id)value {
  [((id<JavaUtilList>) nil_chk(entries_)) addWithId:[[OrgOssPdfreporterCrosstabsFillCalculationBucketingService_MapEntry alloc] initWithOrgOssPdfreporterCrosstabsFillCalculationBucketDefinition_Bucket:key withId:value]];
  (void) [((id<JavaUtilMap>) nil_chk(entryMap_)) putWithId:key withId:value];
}

- (id)getWithOrgOssPdfreporterCrosstabsFillCalculationBucketDefinition_Bucket:(OrgOssPdfreporterCrosstabsFillCalculationBucketDefinition_Bucket *)key {
  return [((id<JavaUtilMap>) nil_chk(entryMap_)) getWithId:key];
}

- (IOSObjectArray *)insertMeasureValuesWithOrgOssPdfreporterCrosstabsFillCalculationBucketDefinition_BucketArray:(IOSObjectArray *)bucketValues {
  int i = 0;
  id levelObj = self;
  OrgOssPdfreporterCrosstabsFillCalculationBucketingService_BucketListMap *map = nil;
  while (i < (int) [((IOSObjectArray *) nil_chk(this$1_.allBuckets)) count]) {
    map = (OrgOssPdfreporterCrosstabsFillCalculationBucketingService_BucketListMap *) levelObj;
    int size = [((id<JavaUtilList>) nil_chk(((OrgOssPdfreporterCrosstabsFillCalculationBucketingService_BucketListMap *) nil_chk(map)).entries)) size];
    if (size == 0) {
      break;
    }
    OrgOssPdfreporterCrosstabsFillCalculationBucketingService_MapEntry *lastEntry = (OrgOssPdfreporterCrosstabsFillCalculationBucketingService_MapEntry *) [((id<JavaUtilList>) nil_chk(((OrgOssPdfreporterCrosstabsFillCalculationBucketingService_BucketListMap *) nil_chk(map)).entries)) getWithInt:size - 1];
    if (![((OrgOssPdfreporterCrosstabsFillCalculationBucketDefinition_Bucket *) nil_chk(((OrgOssPdfreporterCrosstabsFillCalculationBucketingService_MapEntry *) nil_chk(lastEntry)).key)) isEqual:[((IOSObjectArray *) nil_chk(bucketValues)) objectAtIndex:i]]) {
      break;
    }
    ++i;
    levelObj = ((OrgOssPdfreporterCrosstabsFillCalculationBucketingService_MapEntry *) nil_chk(lastEntry)).value;
  }
  if (i == (int) [((IOSObjectArray *) nil_chk(this$1_.allBuckets)) count]) {
    return (IOSObjectArray *) levelObj;
  }
  while (i < (int) [((IOSObjectArray *) nil_chk(this$1_.allBuckets)) count] - 1) {
    OrgOssPdfreporterCrosstabsFillCalculationBucketingService_BucketListMap *nextMap = [[OrgOssPdfreporterCrosstabsFillCalculationBucketingService_BucketListMap alloc] initWithOrgOssPdfreporterCrosstabsFillCalculationBucketingService:this$1_ withInt:i + 1 withBOOL:NO];
    [((OrgOssPdfreporterCrosstabsFillCalculationBucketingService_BucketListMap *) nil_chk(map)) addWithOrgOssPdfreporterCrosstabsFillCalculationBucketDefinition_Bucket:[((IOSObjectArray *) nil_chk(bucketValues)) objectAtIndex:i] withId:nextMap];
    map = nextMap;
    ++i;
  }
  IOSObjectArray *values = [this$1_ initMeasureValues];
  [((OrgOssPdfreporterCrosstabsFillCalculationBucketingService_BucketListMap *) nil_chk(map)) addWithOrgOssPdfreporterCrosstabsFillCalculationBucketDefinition_Bucket:[((IOSObjectArray *) nil_chk(bucketValues)) objectAtIndex:i] withId:values];
  [this$1_ bucketMeasuresCreated];
  return values;
}

- (int)size {
  return [((id<JavaUtilList>) nil_chk(entries_)) size];
}

- (void)addTotalEntryWithId:(id)value {
  [self addWithOrgOssPdfreporterCrosstabsFillCalculationBucketDefinition_Bucket:totalKey_ withId:value];
}

- (id)getTotal {
  OrgOssPdfreporterCrosstabsFillCalculationBucketingService_MapEntry *totalEntry = [self getTotalEntry];
  return totalEntry == nil ? nil : [((OrgOssPdfreporterCrosstabsFillCalculationBucketingService_MapEntry *) nil_chk(totalEntry)) getValue];
}

- (OrgOssPdfreporterCrosstabsFillCalculationBucketingService_MapEntry *)getTotalEntry {
  OrgOssPdfreporterCrosstabsFillCalculationBucketingService_MapEntry *lastEntry = (OrgOssPdfreporterCrosstabsFillCalculationBucketingService_MapEntry *) [((id<JavaUtilList>) nil_chk(entries_)) getWithInt:[((id<JavaUtilList>) nil_chk(entries_)) size] - 1];
  if ([((OrgOssPdfreporterCrosstabsFillCalculationBucketDefinition_Bucket *) nil_chk(((OrgOssPdfreporterCrosstabsFillCalculationBucketingService_MapEntry *) nil_chk(lastEntry)).key)) isTotal]) {
    return lastEntry;
  }
  return nil;
}

- (void)collectValsWithOrgOssPdfreporterCrosstabsFillCalculationBucketingService_BucketMap:(OrgOssPdfreporterCrosstabsFillCalculationBucketingService_BucketMap *)map
                                                                                  withBOOL:(BOOL)sum {
  id<JavaUtilListIterator> totalIt = [((id<JavaUtilList>) nil_chk(entries_)) listIterator];
  OrgOssPdfreporterCrosstabsFillCalculationBucketingService_MapEntry *totalItEntry = [((id<JavaUtilListIterator>) nil_chk(totalIt)) hasNext] ? (OrgOssPdfreporterCrosstabsFillCalculationBucketingService_MapEntry *) [((id<JavaUtilListIterator>) nil_chk(totalIt)) next] : nil;
  id<JavaUtilIterator> it = [((OrgOssPdfreporterCrosstabsFillCalculationBucketingService_BucketMap *) nil_chk(map)) entryIterator];
  id<JavaUtilMap_Entry> entry = [((id<JavaUtilIterator>) nil_chk(it)) hasNext] ? [((id<JavaUtilIterator>) nil_chk(it)) next] : nil;
  while (entry != nil) {
    OrgOssPdfreporterCrosstabsFillCalculationBucketDefinition_Bucket *key = [((id<JavaUtilMap_Entry>) nil_chk(entry)) getKey];
    int compare = totalItEntry == nil ? -1 : [((OrgOssPdfreporterCrosstabsFillCalculationBucketDefinition_Bucket *) nil_chk(key)) compareToWithId:((OrgOssPdfreporterCrosstabsFillCalculationBucketingService_MapEntry *) nil_chk(totalItEntry)).key];
    if (compare <= 0) {
      id addVal = nil;
      if (last_) {
        if (sum) {
          IOSObjectArray *totalVals = compare == 0 ? (IOSObjectArray *) ((OrgOssPdfreporterCrosstabsFillCalculationBucketingService_MapEntry *) nil_chk(totalItEntry)).value : nil;
          if (totalVals == nil) {
            totalVals = [this$1_ initMeasureValues];
            addVal = totalVals;
          }
          [this$1_ sumValsWithOrgOssPdfreporterCrosstabsFillCalculationMeasureDefinition_MeasureValueArray:totalVals withOrgOssPdfreporterCrosstabsFillCalculationMeasureDefinition_MeasureValueArray:(IOSObjectArray *) [((id<JavaUtilMap_Entry>) nil_chk(entry)) getValue]];
        }
      }
      else {
        OrgOssPdfreporterCrosstabsFillCalculationBucketingService_BucketListMap *nextTotals = compare == 0 ? (OrgOssPdfreporterCrosstabsFillCalculationBucketingService_BucketListMap *) ((OrgOssPdfreporterCrosstabsFillCalculationBucketingService_MapEntry *) nil_chk(totalItEntry)).value : nil;
        if (nextTotals == nil) {
          nextTotals = [this$1_ createCollectBucketMapWithInt:level_ + 1];
          addVal = nextTotals;
        }
        [((OrgOssPdfreporterCrosstabsFillCalculationBucketingService_BucketListMap *) nil_chk(nextTotals)) collectValsWithOrgOssPdfreporterCrosstabsFillCalculationBucketingService_BucketMap:(OrgOssPdfreporterCrosstabsFillCalculationBucketingService_BucketMap *) [((id<JavaUtilMap_Entry>) nil_chk(entry)) getValue] withBOOL:sum];
      }
      if (compare < 0) {
        if (totalItEntry != nil) {
          (void) [((id<JavaUtilListIterator>) nil_chk(totalIt)) previous];
        }
        [((id<JavaUtilListIterator>) nil_chk(totalIt)) addWithId:[[OrgOssPdfreporterCrosstabsFillCalculationBucketingService_MapEntry alloc] initWithOrgOssPdfreporterCrosstabsFillCalculationBucketDefinition_Bucket:key withId:addVal]];
        (void) [((id<JavaUtilMap>) nil_chk(entryMap_)) putWithId:key withId:addVal];
        if (totalItEntry != nil) {
          (void) [((id<JavaUtilListIterator>) nil_chk(totalIt)) next];
        }
      }
      entry = [((id<JavaUtilIterator>) nil_chk(it)) hasNext] ? [((id<JavaUtilIterator>) nil_chk(it)) next] : nil;
    }
    if (compare >= 0) {
      totalItEntry = [((id<JavaUtilListIterator>) nil_chk(totalIt)) hasNext] ? (OrgOssPdfreporterCrosstabsFillCalculationBucketingService_MapEntry *) [((id<JavaUtilListIterator>) nil_chk(totalIt)) next] : nil;
    }
  }
}

- (NSString *)description {
  JavaLangStringBuffer *sb = [[JavaLangStringBuffer alloc] init];
  (void) [((JavaLangStringBuffer *) nil_chk(sb)) appendWithUnichar:'{'];
  for (id<JavaUtilIterator> it = [((id<JavaUtilList>) nil_chk(entries_)) iterator]; [((id<JavaUtilIterator>) nil_chk(it)) hasNext]; ) {
    id<JavaUtilMap_Entry> entry = [((id<JavaUtilIterator>) nil_chk(it)) next];
    (void) [((JavaLangStringBuffer *) nil_chk(sb)) appendWithId:entry];
    if ([((id<JavaUtilIterator>) nil_chk(it)) hasNext]) {
      (void) [((JavaLangStringBuffer *) nil_chk(sb)) appendWithNSString:@", "];
    }
  }
  (void) [((JavaLangStringBuffer *) nil_chk(sb)) appendWithUnichar:'}'];
  return [((JavaLangStringBuffer *) nil_chk(sb)) description];
}

- (void)copyAllPropertiesTo:(id)copy {
  [super copyAllPropertiesTo:copy];
  OrgOssPdfreporterCrosstabsFillCalculationBucketingService_BucketListMap *typedCopy = (OrgOssPdfreporterCrosstabsFillCalculationBucketingService_BucketListMap *) copy;
  typedCopy.this$1 = this$1_;
  typedCopy.entries = entries_;
  typedCopy.entryMap = entryMap_;
}

@end
