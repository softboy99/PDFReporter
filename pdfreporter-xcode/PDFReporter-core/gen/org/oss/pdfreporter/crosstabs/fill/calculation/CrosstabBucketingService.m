//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: pdfreporter-core/src/org/oss/pdfreporter/crosstabs/fill/calculation/CrosstabBucketingService.java
//
//  Created by kendra on 9/27/13.
//

#include "IOSBooleanArray.h"
#include "IOSClass.h"
#include "IOSIntArray.h"
#include "IOSObjectArray.h"
#include "java/util/ArrayList.h"
#include "java/util/Iterator.h"
#include "java/util/LinkedList.h"
#include "java/util/List.h"
#include "java/util/Map.h"
#include "java/util/TreeSet.h"
#include "org/oss/pdfreporter/crosstabs/fill/calculation/BucketDefinition.h"
#include "org/oss/pdfreporter/crosstabs/fill/calculation/BucketingService.h"
#include "org/oss/pdfreporter/crosstabs/fill/calculation/BucketingServiceContext.h"
#include "org/oss/pdfreporter/crosstabs/fill/calculation/CrosstabBucketingService.h"
#include "org/oss/pdfreporter/crosstabs/fill/calculation/CrosstabCell.h"
#include "org/oss/pdfreporter/crosstabs/fill/calculation/HeaderCell.h"
#include "org/oss/pdfreporter/crosstabs/fill/calculation/MeasureDefinition.h"
#include "org/oss/pdfreporter/crosstabs/type/CrosstabTotalPositionEnum.h"
#include "org/oss/pdfreporter/engine/JRExpression.h"
#include "org/oss/pdfreporter/engine/JRRuntimeException.h"

@implementation OrgOssPdfreporterCrosstabsFillCalculationCrosstabBucketingService

@synthesize colHeaders = colHeaders_;
@synthesize rowHeaders = rowHeaders_;
@synthesize cells = cells_;

- (id)initWithOrgOssPdfreporterCrosstabsFillCalculationBucketingServiceContext:(id<OrgOssPdfreporterCrosstabsFillCalculationBucketingServiceContext>)serviceContext
                                                              withJavaUtilList:(id<JavaUtilList>)rowBuckets
                                                              withJavaUtilList:(id<JavaUtilList>)columnBuckets
                                                              withJavaUtilList:(id<JavaUtilList>)measures
                                                                      withBOOL:(BOOL)sorted
                                                             withBooleanArray2:(IOSObjectArray *)retrieveTotal {
  return [super initWithOrgOssPdfreporterCrosstabsFillCalculationBucketingServiceContext:serviceContext withJavaUtilList:rowBuckets withJavaUtilList:columnBuckets withJavaUtilList:measures withBOOL:sorted withBooleanArray2:retrieveTotal];
}

- (void)createCrosstab {
  if (!processed_) {
    @throw [[OrgOssPdfreporterEngineJRRuntimeException alloc] initWithNSString:@"Crosstab data needs to be processed first"];
  }
  if (![self hasData]) {
    return;
  }
  IOSObjectArray *collectedHeaders = [IOSObjectArray arrayWithLength:OrgOssPdfreporterCrosstabsFillCalculationBucketingService_DIMENSIONS type:[IOSClass classWithClass:[OrgOssPdfreporterCrosstabsFillCalculationCrosstabBucketingService_CollectedList class]]];
  (void) [((IOSObjectArray *) nil_chk(collectedHeaders)) replaceObjectAtIndex:OrgOssPdfreporterCrosstabsFillCalculationBucketingService_DIMENSION_ROW withObject:[self createHeadersListWithChar:OrgOssPdfreporterCrosstabsFillCalculationBucketingService_DIMENSION_ROW withOrgOssPdfreporterCrosstabsFillCalculationBucketingService_BucketMap:bucketValueMap_ withInt:0 withBOOL:NO]];
  OrgOssPdfreporterCrosstabsFillCalculationBucketingService_BucketMap *columnTotalsMap = nil;
  OrgOssPdfreporterCrosstabsFillCalculationBucketingService_BucketListMap *collectedCols;
  if ([((OrgOssPdfreporterCrosstabsFillCalculationBucketDefinition *) nil_chk([((IOSObjectArray *) nil_chk(allBuckets_)) objectAtIndex:0])) computeTotal]) {
    columnTotalsMap = bucketValueMap_;
    for (int i = 0; i < rowBucketCount_; ++i) {
      columnTotalsMap = (OrgOssPdfreporterCrosstabsFillCalculationBucketingService_BucketMap *) [((OrgOssPdfreporterCrosstabsFillCalculationBucketingService_MapEntry *) nil_chk([((OrgOssPdfreporterCrosstabsFillCalculationBucketingService_BucketMap *) nil_chk(columnTotalsMap)) getTotalEntry])) getValue];
    }
    collectedCols = (OrgOssPdfreporterCrosstabsFillCalculationBucketingService_BucketListMap *) columnTotalsMap;
  }
  else {
    collectedCols = [self createCollectBucketMapWithInt:rowBucketCount_];
    [self collectColsWithOrgOssPdfreporterCrosstabsFillCalculationBucketingService_BucketListMap:collectedCols withOrgOssPdfreporterCrosstabsFillCalculationBucketingService_BucketMap:bucketValueMap_];
  }
  (void) [((IOSObjectArray *) nil_chk(collectedHeaders)) replaceObjectAtIndex:OrgOssPdfreporterCrosstabsFillCalculationBucketingService_DIMENSION_COLUMN withObject:[self createHeadersListWithChar:OrgOssPdfreporterCrosstabsFillCalculationBucketingService_DIMENSION_COLUMN withOrgOssPdfreporterCrosstabsFillCalculationBucketingService_BucketMap:collectedCols withInt:0 withBOOL:NO]];
  int rowBuckets = ((OrgOssPdfreporterCrosstabsFillCalculationCrosstabBucketingService_CollectedList *) nil_chk([((IOSObjectArray *) nil_chk(collectedHeaders)) objectAtIndex:OrgOssPdfreporterCrosstabsFillCalculationBucketingService_DIMENSION_ROW])).span;
  int colBuckets = ((OrgOssPdfreporterCrosstabsFillCalculationCrosstabBucketingService_CollectedList *) nil_chk([((IOSObjectArray *) nil_chk(collectedHeaders)) objectAtIndex:OrgOssPdfreporterCrosstabsFillCalculationBucketingService_DIMENSION_COLUMN])).span;
  int bucketMeasureCount = rowBuckets * colBuckets * origMeasureCount_;
  [self checkBucketMeasureCountWithInt:bucketMeasureCount];
  colHeaders_ = [self createHeadersWithChar:OrgOssPdfreporterCrosstabsFillCalculationBucketingService_DIMENSION_COLUMN withOrgOssPdfreporterCrosstabsFillCalculationCrosstabBucketingService_CollectedListArray:collectedHeaders withOrgOssPdfreporterCrosstabsFillCalculationBucketingService_BucketMap:columnTotalsMap];
  rowHeaders_ = [self createHeadersWithChar:OrgOssPdfreporterCrosstabsFillCalculationBucketingService_DIMENSION_ROW withOrgOssPdfreporterCrosstabsFillCalculationCrosstabBucketingService_CollectedListArray:collectedHeaders withOrgOssPdfreporterCrosstabsFillCalculationBucketingService_BucketMap:bucketValueMap_];
  cells_ = [IOSObjectArray arrayWithDimensions:2 lengths:(int[]){ rowBuckets, colBuckets } type:[IOSClass classWithClass:[OrgOssPdfreporterCrosstabsFillCalculationCrosstabCell class]]];
  [self fillCellsWithOrgOssPdfreporterCrosstabsFillCalculationCrosstabBucketingService_CollectedListArray:collectedHeaders withOrgOssPdfreporterCrosstabsFillCalculationBucketingService_BucketMap:bucketValueMap_ withInt:0 withIntArray:[IOSIntArray arrayWithInts:(int[]){ 0, 0 } count:2] withJavaUtilList:[[JavaUtilArrayList alloc] init] withJavaUtilList:[[JavaUtilArrayList alloc] init]];
}

- (void)collectColsWithOrgOssPdfreporterCrosstabsFillCalculationBucketingService_BucketListMap:(OrgOssPdfreporterCrosstabsFillCalculationBucketingService_BucketListMap *)collectedCols
                       withOrgOssPdfreporterCrosstabsFillCalculationBucketingService_BucketMap:(OrgOssPdfreporterCrosstabsFillCalculationBucketingService_BucketMap *)bucketMap {
  if ([((OrgOssPdfreporterCrosstabsFillCalculationBucketDefinition *) nil_chk([((IOSObjectArray *) nil_chk(allBuckets_)) objectAtIndex:((OrgOssPdfreporterCrosstabsFillCalculationBucketingService_BucketMap *) nil_chk(bucketMap)).level])) computeTotal]) {
    OrgOssPdfreporterCrosstabsFillCalculationBucketingService_BucketMap *map = bucketMap;
    for (int i = ((OrgOssPdfreporterCrosstabsFillCalculationBucketingService_BucketMap *) nil_chk(bucketMap)).level; i < rowBucketCount_; ++i) {
      map = (OrgOssPdfreporterCrosstabsFillCalculationBucketingService_BucketMap *) [((OrgOssPdfreporterCrosstabsFillCalculationBucketingService_MapEntry *) nil_chk([((OrgOssPdfreporterCrosstabsFillCalculationBucketingService_BucketMap *) nil_chk(map)) getTotalEntry])) getValue];
    }
    [((OrgOssPdfreporterCrosstabsFillCalculationBucketingService_BucketListMap *) nil_chk(collectedCols)) collectValsWithOrgOssPdfreporterCrosstabsFillCalculationBucketingService_BucketMap:map withBOOL:NO];
    return;
  }
  for (id<JavaUtilIterator> it = [((OrgOssPdfreporterCrosstabsFillCalculationBucketingService_BucketMap *) nil_chk(bucketMap)) entryIterator]; [((id<JavaUtilIterator>) nil_chk(it)) hasNext]; ) {
    id<JavaUtilMap_Entry> entry = [((id<JavaUtilIterator>) nil_chk(it)) next];
    OrgOssPdfreporterCrosstabsFillCalculationBucketingService_BucketMap *nextMap = (OrgOssPdfreporterCrosstabsFillCalculationBucketingService_BucketMap *) [((id<JavaUtilMap_Entry>) nil_chk(entry)) getValue];
    if (((OrgOssPdfreporterCrosstabsFillCalculationBucketingService_BucketMap *) nil_chk(bucketMap)).level == rowBucketCount_ - 1) {
      [((OrgOssPdfreporterCrosstabsFillCalculationBucketingService_BucketListMap *) nil_chk(collectedCols)) collectValsWithOrgOssPdfreporterCrosstabsFillCalculationBucketingService_BucketMap:nextMap withBOOL:NO];
    }
    else {
      [self collectColsWithOrgOssPdfreporterCrosstabsFillCalculationBucketingService_BucketListMap:collectedCols withOrgOssPdfreporterCrosstabsFillCalculationBucketingService_BucketMap:nextMap];
    }
  }
}

- (IOSObjectArray *)createHeadersWithChar:(char)dimension
withOrgOssPdfreporterCrosstabsFillCalculationCrosstabBucketingService_CollectedListArray:(IOSObjectArray *)headersLists
withOrgOssPdfreporterCrosstabsFillCalculationBucketingService_BucketMap:(OrgOssPdfreporterCrosstabsFillCalculationBucketingService_BucketMap *)totalsMap {
  IOSObjectArray *headers = [IOSObjectArray arrayWithDimensions:2 lengths:(int[]){ (int) [((IOSObjectArray *) nil_chk([((IOSObjectArray *) nil_chk(buckets_)) objectAtIndex:dimension])) count], ((OrgOssPdfreporterCrosstabsFillCalculationCrosstabBucketingService_CollectedList *) nil_chk([((IOSObjectArray *) nil_chk(headersLists)) objectAtIndex:dimension])).span } type:[IOSClass classWithClass:[OrgOssPdfreporterCrosstabsFillCalculationHeaderCell class]]];
  id<JavaUtilList> vals = [[JavaUtilArrayList alloc] init];
  [self fillHeadersWithChar:dimension withOrgOssPdfreporterCrosstabsFillCalculationHeaderCellArray2:headers withInt:0 withInt:0 withOrgOssPdfreporterCrosstabsFillCalculationCrosstabBucketingService_CollectedList:[((IOSObjectArray *) nil_chk(headersLists)) objectAtIndex:dimension] withJavaUtilList:vals withOrgOssPdfreporterCrosstabsFillCalculationBucketingService_BucketMap:totalsMap];
  return headers;
}

- (OrgOssPdfreporterCrosstabsFillCalculationCrosstabBucketingService_CollectedList *)createHeadersListWithChar:(char)dimension
                                       withOrgOssPdfreporterCrosstabsFillCalculationBucketingService_BucketMap:(OrgOssPdfreporterCrosstabsFillCalculationBucketingService_BucketMap *)bucketMap
                                                                                                       withInt:(int)level
                                                                                                      withBOOL:(BOOL)total {
  OrgOssPdfreporterCrosstabsFillCalculationBucketDefinition *bucketDefinition = [((IOSObjectArray *) nil_chk(allBuckets_)) objectAtIndex:((OrgOssPdfreporterCrosstabsFillCalculationBucketingService_BucketMap *) nil_chk(bucketMap)).level];
  OrgOssPdfreporterCrosstabsTypeCrosstabTotalPositionEnumEnum *totalPosition = [((OrgOssPdfreporterCrosstabsFillCalculationBucketDefinition *) nil_chk(bucketDefinition)) getTotalPosition];
  OrgOssPdfreporterCrosstabsFillCalculationCrosstabBucketingService_CollectedList *headers;
  if ([((OrgOssPdfreporterCrosstabsFillCalculationBucketDefinition *) nil_chk(bucketDefinition)) hasOrderValues]) {
    headers = [[OrgOssPdfreporterCrosstabsFillCalculationCrosstabBucketingService_OrderedCollectedList alloc] initWithOrgOssPdfreporterCrosstabsFillCalculationBucketDefinition:bucketDefinition];
  }
  else {
    headers = [[OrgOssPdfreporterCrosstabsFillCalculationCrosstabBucketingService_SequentialCollectedList alloc] initWithOrgOssPdfreporterCrosstabsTypeCrosstabTotalPositionEnumEnum:totalPosition];
  }
  for (id<JavaUtilIterator> it = [((OrgOssPdfreporterCrosstabsFillCalculationBucketingService_BucketMap *) nil_chk(bucketMap)) entryIterator]; [((id<JavaUtilIterator>) nil_chk(it)) hasNext]; ) {
    id<JavaUtilMap_Entry> entry = [((id<JavaUtilIterator>) nil_chk(it)) next];
    OrgOssPdfreporterCrosstabsFillCalculationBucketDefinition_Bucket *bucketValue = [((id<JavaUtilMap_Entry>) nil_chk(entry)) getKey];
    BOOL totalBucket = [((OrgOssPdfreporterCrosstabsFillCalculationBucketDefinition_Bucket *) nil_chk(bucketValue)) isTotal];
    BOOL createHeader = !totalBucket || total || totalPosition != [OrgOssPdfreporterCrosstabsTypeCrosstabTotalPositionEnumEnum NONE];
    if (createHeader) {
      OrgOssPdfreporterCrosstabsFillCalculationCrosstabBucketingService_CollectedList *nextHeaders;
      if (level + 1 < (int) [((IOSObjectArray *) nil_chk([((IOSObjectArray *) nil_chk(buckets_)) objectAtIndex:dimension])) count]) {
        OrgOssPdfreporterCrosstabsFillCalculationBucketingService_BucketMap *nextMap = (OrgOssPdfreporterCrosstabsFillCalculationBucketingService_BucketMap *) [((id<JavaUtilMap_Entry>) nil_chk(entry)) getValue];
        nextHeaders = [self createHeadersListWithChar:dimension withOrgOssPdfreporterCrosstabsFillCalculationBucketingService_BucketMap:nextMap withInt:level + 1 withBOOL:total || totalBucket];
      }
      else {
        nextHeaders = [[OrgOssPdfreporterCrosstabsFillCalculationCrosstabBucketingService_SequentialCollectedList alloc] initWithOrgOssPdfreporterCrosstabsTypeCrosstabTotalPositionEnumEnum:[OrgOssPdfreporterCrosstabsTypeCrosstabTotalPositionEnumEnum NONE]];
        ((OrgOssPdfreporterCrosstabsFillCalculationCrosstabBucketingService_CollectedList *) nil_chk(nextHeaders)).span = 1;
      }
      ((OrgOssPdfreporterCrosstabsFillCalculationCrosstabBucketingService_CollectedList *) nil_chk(nextHeaders)).key = bucketValue;
      if ([((OrgOssPdfreporterCrosstabsFillCalculationBucketDefinition *) nil_chk(bucketDefinition)) hasOrderValues]) {
        id orderValue = [self evaluateOrderValueWithOrgOssPdfreporterCrosstabsFillCalculationBucketingService_BucketMap:bucketMap withOrgOssPdfreporterCrosstabsFillCalculationBucketDefinition_Bucket:bucketValue];
        ((OrgOssPdfreporterCrosstabsFillCalculationCrosstabBucketingService_CollectedList *) nil_chk(nextHeaders)).orderValue = orderValue;
      }
      [((OrgOssPdfreporterCrosstabsFillCalculationCrosstabBucketingService_CollectedList *) nil_chk(headers)) addWithOrgOssPdfreporterCrosstabsFillCalculationCrosstabBucketingService_CollectedList:nextHeaders];
    }
  }
  if (((OrgOssPdfreporterCrosstabsFillCalculationCrosstabBucketingService_CollectedList *) nil_chk(headers)).span == 0) {
    ((OrgOssPdfreporterCrosstabsFillCalculationCrosstabBucketingService_CollectedList *) nil_chk(headers)).span = 1;
  }
  return headers;
}

- (id)evaluateOrderValueWithOrgOssPdfreporterCrosstabsFillCalculationBucketingService_BucketMap:(OrgOssPdfreporterCrosstabsFillCalculationBucketingService_BucketMap *)bucketMap
                           withOrgOssPdfreporterCrosstabsFillCalculationBucketDefinition_Bucket:(OrgOssPdfreporterCrosstabsFillCalculationBucketDefinition_Bucket *)bucket {
  id bucketValue = [((OrgOssPdfreporterCrosstabsFillCalculationBucketingService_BucketMap *) nil_chk(bucketMap)) getWithOrgOssPdfreporterCrosstabsFillCalculationBucketDefinition_Bucket:bucket];
  for (int idx = ((OrgOssPdfreporterCrosstabsFillCalculationBucketingService_BucketMap *) nil_chk(bucketMap)).level + 1; idx < rowBucketCount_ + colBucketCount_; ++idx) {
    bucketValue = [((OrgOssPdfreporterCrosstabsFillCalculationBucketingService_MapEntry *) nil_chk([((OrgOssPdfreporterCrosstabsFillCalculationBucketingService_BucketMap *) bucketValue) getTotalEntry])) getValue];
  }
  IOSObjectArray *totals = (IOSObjectArray *) bucketValue;
  IOSObjectArray *userTotals = [self getUserMeasureValuesWithOrgOssPdfreporterCrosstabsFillCalculationMeasureDefinition_MeasureValueArray:totals];
  return [((id<OrgOssPdfreporterCrosstabsFillCalculationBucketingServiceContext>) nil_chk(serviceContext_)) evaluateMeasuresExpressionWithOrgOssPdfreporterEngineJRExpression:[((OrgOssPdfreporterCrosstabsFillCalculationBucketDefinition *) nil_chk([((IOSObjectArray *) nil_chk(allBuckets_)) objectAtIndex:((OrgOssPdfreporterCrosstabsFillCalculationBucketingService_BucketMap *) nil_chk(bucketMap)).level])) getOrderByExpression] withOrgOssPdfreporterCrosstabsFillCalculationMeasureDefinition_MeasureValueArray:userTotals];
}

- (void)fillHeadersWithChar:(char)dimension
withOrgOssPdfreporterCrosstabsFillCalculationHeaderCellArray2:(IOSObjectArray *)headers
                    withInt:(int)level
                    withInt:(int)col
withOrgOssPdfreporterCrosstabsFillCalculationCrosstabBucketingService_CollectedList:(OrgOssPdfreporterCrosstabsFillCalculationCrosstabBucketingService_CollectedList *)list
           withJavaUtilList:(id<JavaUtilList>)vals
withOrgOssPdfreporterCrosstabsFillCalculationBucketingService_BucketMap:(OrgOssPdfreporterCrosstabsFillCalculationBucketingService_BucketMap *)totalsMap {
  if (level == (int) [((IOSObjectArray *) nil_chk([((IOSObjectArray *) nil_chk(buckets_)) objectAtIndex:dimension])) count]) {
    return;
  }
  for (id<JavaUtilIterator> it = [((OrgOssPdfreporterCrosstabsFillCalculationCrosstabBucketingService_CollectedList *) nil_chk(list)) iterator]; [((id<JavaUtilIterator>) nil_chk(it)) hasNext]; ) {
    OrgOssPdfreporterCrosstabsFillCalculationCrosstabBucketingService_CollectedList *subList = [((id<JavaUtilIterator>) nil_chk(it)) next];
    [((id<JavaUtilList>) nil_chk(vals)) addWithId:((OrgOssPdfreporterCrosstabsFillCalculationCrosstabBucketingService_CollectedList *) nil_chk(subList)).key];
    int depthSpan = [((OrgOssPdfreporterCrosstabsFillCalculationBucketDefinition_Bucket *) nil_chk(((OrgOssPdfreporterCrosstabsFillCalculationCrosstabBucketingService_CollectedList *) nil_chk(subList)).key)) isTotal] ? (int) [((IOSObjectArray *) nil_chk([((IOSObjectArray *) nil_chk(buckets_)) objectAtIndex:dimension])) count] - level : 1;
    IOSObjectArray *values = [IOSObjectArray arrayWithLength:(int) [((IOSObjectArray *) nil_chk([((IOSObjectArray *) nil_chk(buckets_)) objectAtIndex:dimension])) count] type:[IOSClass classWithClass:[OrgOssPdfreporterCrosstabsFillCalculationBucketDefinition_Bucket class]]];
    (void) [((id<JavaUtilList>) nil_chk(vals)) toArrayWithNSObjectArray:values];
    IOSObjectArray *totals = [self retrieveHeaderTotalsWithChar:dimension withOrgOssPdfreporterCrosstabsFillCalculationBucketDefinition_BucketArray:values withOrgOssPdfreporterCrosstabsFillCalculationBucketingService_BucketMap:totalsMap];
    (void) [((IOSObjectArray *) nil_chk([((IOSObjectArray *) nil_chk(headers)) objectAtIndex:level])) replaceObjectAtIndex:col withObject:[[OrgOssPdfreporterCrosstabsFillCalculationHeaderCell alloc] initWithOrgOssPdfreporterCrosstabsFillCalculationBucketDefinition_BucketArray:values withInt:((OrgOssPdfreporterCrosstabsFillCalculationCrosstabBucketingService_CollectedList *) nil_chk(subList)).span withInt:depthSpan withOrgOssPdfreporterCrosstabsFillCalculationMeasureDefinition_MeasureValueArray2:totals]];
    if (![((OrgOssPdfreporterCrosstabsFillCalculationBucketDefinition_Bucket *) nil_chk(((OrgOssPdfreporterCrosstabsFillCalculationCrosstabBucketingService_CollectedList *) nil_chk(subList)).key)) isTotal]) {
      [self fillHeadersWithChar:dimension withOrgOssPdfreporterCrosstabsFillCalculationHeaderCellArray2:headers withInt:level + 1 withInt:col withOrgOssPdfreporterCrosstabsFillCalculationCrosstabBucketingService_CollectedList:subList withJavaUtilList:vals withOrgOssPdfreporterCrosstabsFillCalculationBucketingService_BucketMap:totalsMap];
    }
    col += ((OrgOssPdfreporterCrosstabsFillCalculationCrosstabBucketingService_CollectedList *) nil_chk(subList)).span;
    (void) [((id<JavaUtilList>) nil_chk(vals)) removeWithInt:[((id<JavaUtilList>) nil_chk(vals)) size] - 1];
  }
}

- (IOSObjectArray *)retrieveHeaderTotalsWithChar:(char)dimension
withOrgOssPdfreporterCrosstabsFillCalculationBucketDefinition_BucketArray:(IOSObjectArray *)values
withOrgOssPdfreporterCrosstabsFillCalculationBucketingService_BucketMap:(OrgOssPdfreporterCrosstabsFillCalculationBucketingService_BucketMap *)totalsMap {
  int levelCount = (int) [((IOSObjectArray *) nil_chk([((IOSObjectArray *) nil_chk(buckets_)) objectAtIndex:dimension])) count];
  IOSObjectArray *levelBuckets = [IOSObjectArray arrayWithLength:levelCount + 1 type:[IOSClass classWithClass:[NSObject class]]];
  (void) [((IOSObjectArray *) nil_chk(levelBuckets)) replaceObjectAtIndex:0 withObject:totalsMap];
  for (int idx = 0; idx < levelCount; ++idx) {
    id valueBucket = [((IOSObjectArray *) nil_chk(levelBuckets)) objectAtIndex:idx];
    for (int lIdx = 0; lIdx <= idx; ++lIdx) {
      if ([((IOSObjectArray *) nil_chk(levelBuckets)) objectAtIndex:lIdx] != nil) {
        OrgOssPdfreporterCrosstabsFillCalculationBucketingService_MapEntry *entry = [((OrgOssPdfreporterCrosstabsFillCalculationBucketingService_BucketMap *) [((IOSObjectArray *) nil_chk(levelBuckets)) objectAtIndex:lIdx]) getTotalEntry];
        (void) [((IOSObjectArray *) nil_chk(levelBuckets)) replaceObjectAtIndex:lIdx withObject:entry == nil ? nil : [((OrgOssPdfreporterCrosstabsFillCalculationBucketingService_MapEntry *) nil_chk(entry)) getValue]];
      }
    }
    if (valueBucket != nil) {
      if (idx < (int) [((IOSObjectArray *) nil_chk(values)) count] && [((IOSObjectArray *) nil_chk(values)) objectAtIndex:idx] != nil) {
        (void) [((IOSObjectArray *) nil_chk(levelBuckets)) replaceObjectAtIndex:idx + 1 withObject:[((OrgOssPdfreporterCrosstabsFillCalculationBucketingService_BucketMap *) valueBucket) getWithOrgOssPdfreporterCrosstabsFillCalculationBucketDefinition_Bucket:[((IOSObjectArray *) nil_chk(values)) objectAtIndex:idx]]];
      }
      else {
        (void) [((IOSObjectArray *) nil_chk(levelBuckets)) replaceObjectAtIndex:idx + 1 withObject:[((IOSObjectArray *) nil_chk(levelBuckets)) objectAtIndex:idx]];
      }
    }
  }
  if (dimension == OrgOssPdfreporterCrosstabsFillCalculationBucketingService_DIMENSION_ROW) {
    for (int idx = 0; idx < colBucketCount_; ++idx) {
      for (int lIdx = 0; lIdx <= levelCount; ++lIdx) {
        if ([((IOSObjectArray *) nil_chk(levelBuckets)) objectAtIndex:lIdx] != nil) {
          OrgOssPdfreporterCrosstabsFillCalculationBucketingService_MapEntry *entry = [((OrgOssPdfreporterCrosstabsFillCalculationBucketingService_BucketMap *) [((IOSObjectArray *) nil_chk(levelBuckets)) objectAtIndex:lIdx]) getTotalEntry];
          (void) [((IOSObjectArray *) nil_chk(levelBuckets)) replaceObjectAtIndex:lIdx withObject:entry == nil ? nil : [((OrgOssPdfreporterCrosstabsFillCalculationBucketingService_MapEntry *) nil_chk(entry)) getValue]];
        }
      }
    }
  }
  IOSObjectArray *totals = [IOSObjectArray arrayWithLength:levelCount + 1 type:[IOSObjectArray iosClassWithType:[IOSClass classWithClass:[OrgOssPdfreporterCrosstabsFillCalculationMeasureDefinition_MeasureValue class]]]];
  for (int lIdx = 0; lIdx <= levelCount; ++lIdx) {
    IOSObjectArray *measureValues = (IOSObjectArray *) [((IOSObjectArray *) nil_chk(levelBuckets)) objectAtIndex:lIdx];
    if (measureValues != nil) {
      (void) [((IOSObjectArray *) nil_chk(totals)) replaceObjectAtIndex:lIdx withObject:[self getUserMeasureValuesWithOrgOssPdfreporterCrosstabsFillCalculationMeasureDefinition_MeasureValueArray:measureValues]];
    }
  }
  return totals;
}

- (void)fillCellsWithOrgOssPdfreporterCrosstabsFillCalculationCrosstabBucketingService_CollectedListArray:(IOSObjectArray *)collectedHeaders
                                  withOrgOssPdfreporterCrosstabsFillCalculationBucketingService_BucketMap:(OrgOssPdfreporterCrosstabsFillCalculationBucketingService_BucketMap *)bucketMap
                                                                                                  withInt:(int)level
                                                                                             withIntArray:(IOSIntArray *)pos
                                                                                         withJavaUtilList:(id<JavaUtilList>)vals
                                                                                         withJavaUtilList:(id<JavaUtilList>)bucketMaps {
  [((id<JavaUtilList>) nil_chk(bucketMaps)) addWithId:bucketMap];
  char dimension = level < rowBucketCount_ ? OrgOssPdfreporterCrosstabsFillCalculationBucketingService_DIMENSION_ROW : OrgOssPdfreporterCrosstabsFillCalculationBucketingService_DIMENSION_COLUMN;
  BOOL last = level == (int) [((IOSObjectArray *) nil_chk(allBuckets_)) count] - 1;
  IOSObjectArray *nextCollected = nil;
  if (!last) {
    nextCollected = [IOSObjectArray arrayWithLength:OrgOssPdfreporterCrosstabsFillCalculationBucketingService_DIMENSIONS type:[IOSClass classWithClass:[OrgOssPdfreporterCrosstabsFillCalculationCrosstabBucketingService_CollectedList class]]];
    for (int d = 0; d < OrgOssPdfreporterCrosstabsFillCalculationBucketingService_DIMENSIONS; ++d) {
      if (d != dimension) {
        (void) [((IOSObjectArray *) nil_chk(nextCollected)) replaceObjectAtIndex:d withObject:[((IOSObjectArray *) nil_chk(collectedHeaders)) objectAtIndex:d]];
      }
    }
  }
  BOOL incrementRow = level == (int) [((IOSObjectArray *) nil_chk([((IOSObjectArray *) nil_chk(buckets_)) objectAtIndex:OrgOssPdfreporterCrosstabsFillCalculationBucketingService_DIMENSION_ROW])) count] - 1;
  OrgOssPdfreporterCrosstabsFillCalculationCrosstabBucketingService_CollectedList *collectedList = [((IOSObjectArray *) nil_chk(collectedHeaders)) objectAtIndex:dimension];
  for (id<JavaUtilIterator> it = [((OrgOssPdfreporterCrosstabsFillCalculationCrosstabBucketingService_CollectedList *) nil_chk(collectedList)) iterator]; [((id<JavaUtilIterator>) nil_chk(it)) hasNext]; ) {
    OrgOssPdfreporterCrosstabsFillCalculationCrosstabBucketingService_CollectedList *list = [((id<JavaUtilIterator>) nil_chk(it)) next];
    id bucketValue = bucketMap == nil ? nil : [((OrgOssPdfreporterCrosstabsFillCalculationBucketingService_BucketMap *) nil_chk(bucketMap)) getWithOrgOssPdfreporterCrosstabsFillCalculationBucketDefinition_Bucket:((OrgOssPdfreporterCrosstabsFillCalculationCrosstabBucketingService_CollectedList *) nil_chk(list)).key];
    [((id<JavaUtilList>) nil_chk(vals)) addWithId:((OrgOssPdfreporterCrosstabsFillCalculationCrosstabBucketingService_CollectedList *) nil_chk(list)).key];
    if (last) {
      [self fillCellWithIntArray:pos withJavaUtilList:vals withJavaUtilList:bucketMaps withOrgOssPdfreporterCrosstabsFillCalculationMeasureDefinition_MeasureValueArray:(IOSObjectArray *) bucketValue];
    }
    else {
      (void) [((IOSObjectArray *) nil_chk(nextCollected)) replaceObjectAtIndex:dimension withObject:list];
      OrgOssPdfreporterCrosstabsFillCalculationBucketingService_BucketMap *nextMap = bucketValue == nil ? nil : (OrgOssPdfreporterCrosstabsFillCalculationBucketingService_BucketMap *) bucketValue;
      [self fillCellsWithOrgOssPdfreporterCrosstabsFillCalculationCrosstabBucketingService_CollectedListArray:nextCollected withOrgOssPdfreporterCrosstabsFillCalculationBucketingService_BucketMap:nextMap withInt:level + 1 withIntArray:pos withJavaUtilList:vals withJavaUtilList:bucketMaps];
    }
    (void) [((id<JavaUtilList>) nil_chk(vals)) removeWithInt:[((id<JavaUtilList>) nil_chk(vals)) size] - 1];
    if (incrementRow) {
      ++(*[((IOSIntArray *) nil_chk(pos)) intRefAtIndex:0]);
      (*[((IOSIntArray *) nil_chk(pos)) intRefAtIndex:1]) = 0;
    }
  }
  (void) [((id<JavaUtilList>) nil_chk(bucketMaps)) removeWithInt:[((id<JavaUtilList>) nil_chk(bucketMaps)) size] - 1];
}

- (void)fillCellWithIntArray:(IOSIntArray *)pos
            withJavaUtilList:(id<JavaUtilList>)vals
            withJavaUtilList:(id<JavaUtilList>)bucketMaps
withOrgOssPdfreporterCrosstabsFillCalculationMeasureDefinition_MeasureValueArray:(IOSObjectArray *)values {
  id<JavaUtilIterator> valsIt = [((id<JavaUtilList>) nil_chk(vals)) iterator];
  IOSObjectArray *rowValues = [IOSObjectArray arrayWithLength:(int) [((IOSObjectArray *) nil_chk([((IOSObjectArray *) nil_chk(buckets_)) objectAtIndex:OrgOssPdfreporterCrosstabsFillCalculationBucketingService_DIMENSION_ROW])) count] type:[IOSClass classWithClass:[OrgOssPdfreporterCrosstabsFillCalculationBucketDefinition_Bucket class]]];
  for (int i = 0; i < (int) [((IOSObjectArray *) nil_chk(rowValues)) count]; i++) {
    (void) [((IOSObjectArray *) nil_chk(rowValues)) replaceObjectAtIndex:i withObject:[((id<JavaUtilIterator>) nil_chk(valsIt)) next]];
  }
  IOSObjectArray *columnValues = [IOSObjectArray arrayWithLength:(int) [((IOSObjectArray *) nil_chk([((IOSObjectArray *) nil_chk(buckets_)) objectAtIndex:OrgOssPdfreporterCrosstabsFillCalculationBucketingService_DIMENSION_COLUMN])) count] type:[IOSClass classWithClass:[OrgOssPdfreporterCrosstabsFillCalculationBucketDefinition_Bucket class]]];
  for (int i = 0; i < (int) [((IOSObjectArray *) nil_chk(columnValues)) count]; i++) {
    (void) [((IOSObjectArray *) nil_chk(columnValues)) replaceObjectAtIndex:i withObject:[((id<JavaUtilIterator>) nil_chk(valsIt)) next]];
  }
  IOSObjectArray *measureVals = values == nil ? zeroUserMeasureValues_ : [self getUserMeasureValuesWithOrgOssPdfreporterCrosstabsFillCalculationMeasureDefinition_MeasureValueArray:values];
  IOSObjectArray *totals = [self retrieveTotalsWithJavaUtilList:vals withJavaUtilList:bucketMaps];
  (void) [((IOSObjectArray *) nil_chk([((IOSObjectArray *) nil_chk(cells_)) objectAtIndex:[((IOSIntArray *) nil_chk(pos)) intAtIndex:0]])) replaceObjectAtIndex:[((IOSIntArray *) nil_chk(pos)) intAtIndex:1] withObject:[[OrgOssPdfreporterCrosstabsFillCalculationCrosstabCell alloc] initWithOrgOssPdfreporterCrosstabsFillCalculationBucketDefinition_BucketArray:rowValues withOrgOssPdfreporterCrosstabsFillCalculationBucketDefinition_BucketArray:columnValues withOrgOssPdfreporterCrosstabsFillCalculationMeasureDefinition_MeasureValueArray:measureVals withOrgOssPdfreporterCrosstabsFillCalculationMeasureDefinition_MeasureValueArray3:totals]];
  ++(*[((IOSIntArray *) nil_chk(pos)) intRefAtIndex:1]);
}

- (IOSObjectArray *)retrieveTotalsWithJavaUtilList:(id<JavaUtilList>)vals
                                  withJavaUtilList:(id<JavaUtilList>)bucketMaps {
  IOSObjectArray *totals = [IOSObjectArray arrayWithDimensions:2 lengths:(int[]){ rowBucketCount_ + 1, colBucketCount_ + 1 } type:[IOSObjectArray iosClassWithType:[IOSClass classWithClass:[OrgOssPdfreporterCrosstabsFillCalculationMeasureDefinition_MeasureValue class]]]];
  for (int row = rowRetrTotalMax_; row >= rowRetrTotalMin_; --row) {
    if (![((IOSBooleanArray *) nil_chk(rowRetrTotals_)) booleanAtIndex:row]) {
      continue;
    }
    OrgOssPdfreporterCrosstabsFillCalculationBucketingService_BucketMap *rowMap = [((id<JavaUtilList>) nil_chk(bucketMaps)) getWithInt:row];
    for (int i = row; rowMap != nil && i < rowBucketCount_; ++i) {
      OrgOssPdfreporterCrosstabsFillCalculationBucketingService_MapEntry *totalEntry = [((OrgOssPdfreporterCrosstabsFillCalculationBucketingService_BucketMap *) nil_chk(rowMap)) getTotalEntry];
      rowMap = totalEntry == nil ? nil : (OrgOssPdfreporterCrosstabsFillCalculationBucketingService_BucketMap *) [((OrgOssPdfreporterCrosstabsFillCalculationBucketingService_MapEntry *) nil_chk(totalEntry)) getValue];
    }
    for (int col = 0; col <= [((IOSIntArray *) nil_chk(rowRetrColMax_)) intAtIndex:row]; ++col) {
      OrgOssPdfreporterCrosstabsFillCalculationBucketingService_BucketMap *colMap = rowMap;
      if (col < colBucketCount_ - 1) {
        if (row == rowBucketCount_) {
          rowMap = [((id<JavaUtilList>) nil_chk(bucketMaps)) getWithInt:rowBucketCount_ + col + 1];
        }
        else if (rowMap != nil) {
          rowMap = (OrgOssPdfreporterCrosstabsFillCalculationBucketingService_BucketMap *) [rowMap getWithOrgOssPdfreporterCrosstabsFillCalculationBucketDefinition_Bucket:[((id<JavaUtilList>) nil_chk(vals)) getWithInt:rowBucketCount_ + col]];
        }
      }
      if (![((IOSBooleanArray *) nil_chk([((IOSObjectArray *) nil_chk(retrieveTotal_)) objectAtIndex:row])) booleanAtIndex:col]) {
        continue;
      }
      for (int i = col + 1; colMap != nil && i < colBucketCount_; ++i) {
        colMap = (OrgOssPdfreporterCrosstabsFillCalculationBucketingService_BucketMap *) [((OrgOssPdfreporterCrosstabsFillCalculationBucketingService_MapEntry *) nil_chk([((OrgOssPdfreporterCrosstabsFillCalculationBucketingService_BucketMap *) nil_chk(colMap)) getTotalEntry])) getValue];
      }
      if (colMap != nil) {
        if (col == colBucketCount_) {
          IOSObjectArray *measureValues = (IOSObjectArray *) [colMap getWithOrgOssPdfreporterCrosstabsFillCalculationBucketDefinition_Bucket:[((id<JavaUtilList>) nil_chk(vals)) getWithInt:rowBucketCount_ + colBucketCount_ - 1]];
          if (measureValues != nil) {
            (void) [((IOSObjectArray *) nil_chk([((IOSObjectArray *) nil_chk(totals)) objectAtIndex:row])) replaceObjectAtIndex:col withObject:[self getUserMeasureValuesWithOrgOssPdfreporterCrosstabsFillCalculationMeasureDefinition_MeasureValueArray:measureValues]];
          }
        }
        else {
          OrgOssPdfreporterCrosstabsFillCalculationBucketingService_MapEntry *totalEntry = [colMap getTotalEntry];
          if (totalEntry != nil) {
            IOSObjectArray *totalValues = (IOSObjectArray *) [totalEntry getValue];
            (void) [((IOSObjectArray *) nil_chk([((IOSObjectArray *) nil_chk(totals)) objectAtIndex:row])) replaceObjectAtIndex:col withObject:[self getUserMeasureValuesWithOrgOssPdfreporterCrosstabsFillCalculationMeasureDefinition_MeasureValueArray:totalValues]];
          }
        }
      }
      if ([((IOSObjectArray *) nil_chk([((IOSObjectArray *) nil_chk(totals)) objectAtIndex:row])) objectAtIndex:col] == nil) {
        (void) [((IOSObjectArray *) nil_chk([((IOSObjectArray *) nil_chk(totals)) objectAtIndex:row])) replaceObjectAtIndex:col withObject:zeroUserMeasureValues_];
      }
    }
  }
  return totals;
}

- (IOSObjectArray *)getColumnHeaders {
  return colHeaders_;
}

- (IOSObjectArray *)getRowHeaders {
  return rowHeaders_;
}

- (IOSObjectArray *)getCrosstabCells {
  return cells_;
}

- (void)copyAllPropertiesTo:(id)copy {
  [super copyAllPropertiesTo:copy];
  OrgOssPdfreporterCrosstabsFillCalculationCrosstabBucketingService *typedCopy = (OrgOssPdfreporterCrosstabsFillCalculationCrosstabBucketingService *) copy;
  typedCopy.colHeaders = colHeaders_;
  typedCopy.rowHeaders = rowHeaders_;
  typedCopy.cells = cells_;
}

@end
@implementation OrgOssPdfreporterCrosstabsFillCalculationCrosstabBucketingService_CollectedList

@synthesize span = span_;
@synthesize key = key_;
@synthesize orderValue = orderValue_;

- (id)init {
  if ((self = [super init])) {
    span_ = 0;
  }
  return self;
}

- (id<JavaUtilIterator>)iterator {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}

- (void)addWithOrgOssPdfreporterCrosstabsFillCalculationCrosstabBucketingService_CollectedList:(OrgOssPdfreporterCrosstabsFillCalculationCrosstabBucketingService_CollectedList *)sublist {
  [self addSublistWithOrgOssPdfreporterCrosstabsFillCalculationCrosstabBucketingService_CollectedList:sublist];
  [self incrementSpanWithOrgOssPdfreporterCrosstabsFillCalculationCrosstabBucketingService_CollectedList:sublist];
}

- (void)addSublistWithOrgOssPdfreporterCrosstabsFillCalculationCrosstabBucketingService_CollectedList:(OrgOssPdfreporterCrosstabsFillCalculationCrosstabBucketingService_CollectedList *)sublist {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
}

- (void)incrementSpanWithOrgOssPdfreporterCrosstabsFillCalculationCrosstabBucketingService_CollectedList:(OrgOssPdfreporterCrosstabsFillCalculationCrosstabBucketingService_CollectedList *)sublist {
  if (sublist != nil) {
    span_ += sublist.span;
  }
  else {
    span_ += 1;
  }
}

- (NSString *)description {
  return [NSString stringWithFormat:@"%@/%d: %@", key_, span_, [super description]];
}

- (void)copyAllPropertiesTo:(id)copy {
  [super copyAllPropertiesTo:copy];
  OrgOssPdfreporterCrosstabsFillCalculationCrosstabBucketingService_CollectedList *typedCopy = (OrgOssPdfreporterCrosstabsFillCalculationCrosstabBucketingService_CollectedList *) copy;
  typedCopy.span = span_;
  typedCopy.key = key_;
  typedCopy.orderValue = orderValue_;
}

@end
@implementation OrgOssPdfreporterCrosstabsFillCalculationCrosstabBucketingService_SequentialCollectedList

@synthesize totalPosition = totalPosition_;
@synthesize list = list_;

- (id)initWithOrgOssPdfreporterCrosstabsTypeCrosstabTotalPositionEnumEnum:(OrgOssPdfreporterCrosstabsTypeCrosstabTotalPositionEnumEnum *)totalPosition {
  if ((self = [super init])) {
    self.totalPosition = totalPosition;
    list_ = [[JavaUtilLinkedList alloc] init];
  }
  return self;
}

- (id<JavaUtilIterator>)iterator {
  return [((JavaUtilLinkedList *) nil_chk(list_)) iterator];
}

- (void)addSublistWithOrgOssPdfreporterCrosstabsFillCalculationCrosstabBucketingService_CollectedList:(OrgOssPdfreporterCrosstabsFillCalculationCrosstabBucketingService_CollectedList *)sublist {
  if ([((OrgOssPdfreporterCrosstabsFillCalculationBucketDefinition_Bucket *) nil_chk(((OrgOssPdfreporterCrosstabsFillCalculationCrosstabBucketingService_CollectedList *) nil_chk(sublist)).key)) isTotal] && totalPosition_ == [OrgOssPdfreporterCrosstabsTypeCrosstabTotalPositionEnumEnum START]) {
    [((JavaUtilLinkedList *) nil_chk(list_)) addFirstWithId:sublist];
  }
  else {
    [((JavaUtilLinkedList *) nil_chk(list_)) addWithId:sublist];
  }
}

- (void)copyAllPropertiesTo:(id)copy {
  [super copyAllPropertiesTo:copy];
  OrgOssPdfreporterCrosstabsFillCalculationCrosstabBucketingService_SequentialCollectedList *typedCopy = (OrgOssPdfreporterCrosstabsFillCalculationCrosstabBucketingService_SequentialCollectedList *) copy;
  typedCopy.totalPosition = totalPosition_;
  typedCopy.list = list_;
}

@end
@implementation OrgOssPdfreporterCrosstabsFillCalculationCrosstabBucketingService_OrderedCollectedList

@synthesize list = list_;

- (id)initWithOrgOssPdfreporterCrosstabsFillCalculationBucketDefinition:(OrgOssPdfreporterCrosstabsFillCalculationBucketDefinition *)bucketDefinition {
  if ((self = [super init])) {
    OrgOssPdfreporterCrosstabsFillCalculationCrosstabBucketingService_CollectedListComparator *comparator = [[OrgOssPdfreporterCrosstabsFillCalculationCrosstabBucketingService_CollectedListComparator alloc] initWithOrgOssPdfreporterCrosstabsFillCalculationBucketDefinition:bucketDefinition];
    list_ = [[JavaUtilTreeSet alloc] initWithJavaUtilComparator:comparator];
  }
  return self;
}

- (id<JavaUtilIterator>)iterator {
  return [((JavaUtilTreeSet *) nil_chk(list_)) iterator];
}

- (void)addSublistWithOrgOssPdfreporterCrosstabsFillCalculationCrosstabBucketingService_CollectedList:(OrgOssPdfreporterCrosstabsFillCalculationCrosstabBucketingService_CollectedList *)sublist {
  [((JavaUtilTreeSet *) nil_chk(list_)) addWithId:sublist];
}

- (void)copyAllPropertiesTo:(id)copy {
  [super copyAllPropertiesTo:copy];
  OrgOssPdfreporterCrosstabsFillCalculationCrosstabBucketingService_OrderedCollectedList *typedCopy = (OrgOssPdfreporterCrosstabsFillCalculationCrosstabBucketingService_OrderedCollectedList *) copy;
  typedCopy.list = list_;
}

@end
@implementation OrgOssPdfreporterCrosstabsFillCalculationCrosstabBucketingService_CollectedListComparator

@synthesize bucketDefinition = bucketDefinition_;
@synthesize totalFirst = totalFirst_;

- (id)initWithOrgOssPdfreporterCrosstabsFillCalculationBucketDefinition:(OrgOssPdfreporterCrosstabsFillCalculationBucketDefinition *)bucketDefinition {
  if ((self = [super init])) {
    self.bucketDefinition = bucketDefinition;
    self.totalFirst = [((OrgOssPdfreporterCrosstabsFillCalculationBucketDefinition *) nil_chk(bucketDefinition)) getTotalPosition] == [OrgOssPdfreporterCrosstabsTypeCrosstabTotalPositionEnumEnum START];
  }
  return self;
}

- (int)compareWithId:(OrgOssPdfreporterCrosstabsFillCalculationCrosstabBucketingService_CollectedList *)l1
              withId:(OrgOssPdfreporterCrosstabsFillCalculationCrosstabBucketingService_CollectedList *)l2 {
  if (l1 == l2) {
    return 0;
  }
  int order;
  if ([((OrgOssPdfreporterCrosstabsFillCalculationBucketDefinition_Bucket *) nil_chk(((OrgOssPdfreporterCrosstabsFillCalculationCrosstabBucketingService_CollectedList *) nil_chk(l1)).key)) isTotal]) {
    if ([((OrgOssPdfreporterCrosstabsFillCalculationBucketDefinition_Bucket *) nil_chk(((OrgOssPdfreporterCrosstabsFillCalculationCrosstabBucketingService_CollectedList *) nil_chk(l2)).key)) isTotal]) {
      @throw [[OrgOssPdfreporterEngineJRRuntimeException alloc] initWithNSString:@"Two total keys in the same list"];
    }
    order = totalFirst_ ? -1 : 1;
  }
  else if ([((OrgOssPdfreporterCrosstabsFillCalculationBucketDefinition_Bucket *) nil_chk(((OrgOssPdfreporterCrosstabsFillCalculationCrosstabBucketingService_CollectedList *) nil_chk(l2)).key)) isTotal]) {
    order = totalFirst_ ? 1 : -1;
  }
  else {
    order = [((OrgOssPdfreporterCrosstabsFillCalculationBucketDefinition *) nil_chk(bucketDefinition_)) compareOrderValuesWithId:((OrgOssPdfreporterCrosstabsFillCalculationCrosstabBucketingService_CollectedList *) nil_chk(l1)).orderValue withId:((OrgOssPdfreporterCrosstabsFillCalculationCrosstabBucketingService_CollectedList *) nil_chk(l2)).orderValue];
    if (order == 0) {
      order = [((OrgOssPdfreporterCrosstabsFillCalculationBucketDefinition_Bucket *) nil_chk(((OrgOssPdfreporterCrosstabsFillCalculationCrosstabBucketingService_CollectedList *) nil_chk(l1)).key)) compareToWithId:((OrgOssPdfreporterCrosstabsFillCalculationCrosstabBucketingService_CollectedList *) nil_chk(l2)).key];
    }
  }
  return order;
}

- (void)copyAllPropertiesTo:(id)copy {
  [super copyAllPropertiesTo:copy];
  OrgOssPdfreporterCrosstabsFillCalculationCrosstabBucketingService_CollectedListComparator *typedCopy = (OrgOssPdfreporterCrosstabsFillCalculationCrosstabBucketingService_CollectedListComparator *) copy;
  typedCopy.bucketDefinition = bucketDefinition_;
  typedCopy.totalFirst = totalFirst_;
}

@end
