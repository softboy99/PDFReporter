//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: pdfreporter-core/src/org/oss/pdfreporter/font/FontProxy.java
//
//  Created by kendra on 9/27/13.
//

#include "IOSClass.h"
#include "java/io/IOException.h"
#include "java/lang/Boolean.h"
#include "java/lang/RuntimeException.h"
#include "java/util/logging/Logger.h"
#include "org/oss/pdfreporter/font/AbstractFontManager.h"
#include "org/oss/pdfreporter/font/FontProxy.h"
#include "org/oss/pdfreporter/font/IFont.h"
#include "org/oss/pdfreporter/font/IFontManager.h"
#include "org/oss/pdfreporter/font/IFontMetric.h"
#include "org/oss/pdfreporter/font/IFontPeer.h"

@implementation OrgOssPdfreporterFontFontProxy

static JavaUtilLoggingLogger * OrgOssPdfreporterFontFontProxy_logger_;

@synthesize fontManager = fontManager_;
@synthesize filePath = filePath_;
@synthesize encoding = encoding_;
@synthesize embed = embed_;
@synthesize name = name_;
@synthesize style = style_;
@synthesize delegate = delegate_;

+ (JavaUtilLoggingLogger *)logger {
  return OrgOssPdfreporterFontFontProxy_logger_;
}

- (id)initWithOrgOssPdfreporterFontAbstractFontManager:(OrgOssPdfreporterFontAbstractFontManager *)fontManager
                                          withNSString:(NSString *)filePath
                                          withNSString:(NSString *)encoding
                                              withBOOL:(BOOL)embed
                                          withNSString:(NSString *)name
          withOrgOssPdfreporterFontIFont_FontStyleEnum:(OrgOssPdfreporterFontIFont_FontStyleEnum *)style {
  if ((self = [super init])) {
    delegate_ = nil;
    self.fontManager = fontManager;
    self.filePath = filePath;
    self.encoding = encoding;
    self.embed = embed;
    self.name = name;
    self.style = style;
  }
  return self;
}

- (NSString *)getName {
  return name_;
}

- (float)getSize {
  return 1.0f;
}

- (OrgOssPdfreporterFontIFont_FontStyleEnum *)getStyle {
  return style_;
}

- (OrgOssPdfreporterFontIFont_FontDecorationEnum *)getDecoration {
  return [OrgOssPdfreporterFontIFont_FontDecorationEnum NONE];
}

- (id<OrgOssPdfreporterFontIFontMetric>)getMetric {
  return [((id<OrgOssPdfreporterFontIFontPeer>) nil_chk([self getDelegate])) getMetric];
}

- (NSString *)getResourcePath {
  return filePath_;
}

- (id)getPeer {
  return [((id<OrgOssPdfreporterFontIFontPeer>) nil_chk([self getDelegate])) getPeer];
}

- (id<OrgOssPdfreporterFontIFontPeer>)getDelegate {
  [self load__];
  return delegate_;
}

- (NSString *)getEncoding {
  return encoding_;
}

- (void)load__ {
  @try {
    if (delegate_ == nil) {
      NSString *name = [((OrgOssPdfreporterFontAbstractFontManager *) nil_chk(fontManager_)) loadFontInternalWithNSString:filePath_ withNSString:encoding_ withBOOL:embed_];
      self.delegate = [((OrgOssPdfreporterFontAbstractFontManager *) nil_chk(fontManager_)) getFontInternalWithNSString:name];
      [((JavaUtilLoggingLogger *) nil_chk(OrgOssPdfreporterFontFontProxy_logger_)) fineWithNSString:[NSString stringWithFormat:@"Load TTF font: %@, from: %@, encoding: %@, embed: %@", name, filePath_, encoding_, [JavaLangBoolean toStringWithBOOL:embed_]]];
    }
  }
  @catch (JavaIoIOException *e) {
    @throw [[JavaLangRuntimeException alloc] initWithNSString:[NSString stringWithFormat:@"Exception while loading font resource :%@", filePath_]];
  }
}

- (id<OrgOssPdfreporterFontIFontManager>)getFontManager {
  return fontManager_;
}

+ (void)initialize {
  if (self == [OrgOssPdfreporterFontFontProxy class]) {
    OrgOssPdfreporterFontFontProxy_logger_ = [JavaUtilLoggingLogger getLoggerWithNSString:[[IOSClass classWithClass:[OrgOssPdfreporterFontFontProxy class]] getName]];
  }
}

- (void)copyAllPropertiesTo:(id)copy {
  [super copyAllPropertiesTo:copy];
  OrgOssPdfreporterFontFontProxy *typedCopy = (OrgOssPdfreporterFontFontProxy *) copy;
  typedCopy.fontManager = fontManager_;
  typedCopy.filePath = filePath_;
  typedCopy.encoding = encoding_;
  typedCopy.embed = embed_;
  typedCopy.name = name_;
  typedCopy.style = style_;
  typedCopy.delegate = delegate_;
}

@end
