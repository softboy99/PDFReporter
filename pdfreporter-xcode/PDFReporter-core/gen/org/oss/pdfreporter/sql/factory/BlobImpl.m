//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: pdfreporter-core/src/org/oss/pdfreporter/sql/factory/BlobImpl.java
//
//  Created by kendra on 9/27/13.
//

#include "IOSByteArray.h"
#include "java/io/ByteArrayInputStream.h"
#include "java/io/ByteArrayOutputStream.h"
#include "java/io/IOException.h"
#include "java/io/InputStream.h"
#include "org/oss/pdfreporter/sql/SQLException.h"
#include "org/oss/pdfreporter/sql/factory/BlobImpl.h"

@implementation OrgOssPdfreporterSqlFactoryBlobImpl

@synthesize in = in_;
@synthesize consumed = consumed_;

- (id)initOrgOssPdfreporterSqlFactoryBlobImplWithJavaIoInputStream:(JavaIoInputStream *)is {
  if ((self = [super init])) {
    consumed_ = NO;
    self.in = is;
  }
  return self;
}

- (id)initWithJavaIoInputStream:(JavaIoInputStream *)is {
  return [self initOrgOssPdfreporterSqlFactoryBlobImplWithJavaIoInputStream:is];
}

- (id)initWithByteArray:(IOSByteArray *)bytes {
  return [self initOrgOssPdfreporterSqlFactoryBlobImplWithJavaIoInputStream:[[JavaIoByteArrayInputStream alloc] initWithByteArray:bytes]];
}

- (JavaIoInputStream *)getInputStream {
  @try {
    if (!consumed_) {
      return in_;
    }
    @throw [[OrgOssPdfreporterSqlSQLException alloc] initWithNSString:@"Data already consumed."];
  }
  @finally {
    consumed_ = YES;
  }
}

- (IOSByteArray *)getBytes {
  @try {
    if (!consumed_) {
      JavaIoByteArrayOutputStream *out = [[JavaIoByteArrayOutputStream alloc] init];
      IOSByteArray *buffer = [IOSByteArray arrayWithLength:1024];
      int len = [((JavaIoInputStream *) nil_chk(in_)) readWithByteArray:buffer];
      while (len != -1) {
        [((JavaIoByteArrayOutputStream *) nil_chk(out)) writeWithByteArray:buffer withInt:0 withInt:len];
        len = [((JavaIoInputStream *) nil_chk(in_)) readWithByteArray:buffer];
      }
      [((JavaIoInputStream *) nil_chk(in_)) close];
      return [((JavaIoByteArrayOutputStream *) nil_chk(out)) toByteArray];
    }
    @throw [[OrgOssPdfreporterSqlSQLException alloc] initWithNSString:@"Data already consumed."];
  }
  @catch (JavaIoIOException *e) {
    @throw [[OrgOssPdfreporterSqlSQLException alloc] initWithNSString:[((JavaIoIOException *) nil_chk(e)) getMessage]];
  }
  @finally {
    consumed_ = YES;
  }
}

- (void)copyAllPropertiesTo:(id)copy {
  [super copyAllPropertiesTo:copy];
  OrgOssPdfreporterSqlFactoryBlobImpl *typedCopy = (OrgOssPdfreporterSqlFactoryBlobImpl *) copy;
  typedCopy.in = in_;
  typedCopy.consumed = consumed_;
}

@end
