//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: pdfreporter-core/src/org/oss/pdfreporter/compilers/jeval/JEvalExpression.java
//
//  Created by kendra on 9/27/13.
//

#include "IOSClass.h"
#include "java/lang/Double.h"
#include "java/lang/Float.h"
#include "java/lang/StringBuffer.h"
#include "java/math/BigDecimal.h"
#include "java/util/Date.h"
#include "java/util/HashMap.h"
#include "java/util/Iterator.h"
#include "java/util/List.h"
#include "java/util/Map.h"
#include "java/util/logging/Logger.h"
#include "org/oss/pdfreporter/compilers/ExpressionEvaluationException.h"
#include "org/oss/pdfreporter/compilers/jeval/ExpressionParseException.h"
#include "org/oss/pdfreporter/compilers/jeval/IExpressionChunk.h"
#include "org/oss/pdfreporter/compilers/jeval/IVariable.h"
#include "org/oss/pdfreporter/compilers/jeval/IVariableExpressionChunk.h"
#include "org/oss/pdfreporter/compilers/jeval/JEvalExpression.h"
#include "org/oss/pdfreporter/compilers/jeval/functions/BooleanConverter.h"
#include "org/oss/pdfreporter/compilers/jeval/functions/Conditional.h"
#include "org/oss/pdfreporter/compilers/jeval/functions/CurrentDate.h"
#include "org/oss/pdfreporter/compilers/jeval/functions/DateStringConverter.h"
#include "org/oss/pdfreporter/compilers/jeval/functions/DoubleStringConverter.h"
#include "org/oss/pdfreporter/compilers/jeval/functions/IntegerStringConverter.h"
#include "org/oss/pdfreporter/compilers/jeval/functions/IsNull.h"
#include "org/oss/pdfreporter/compilers/jeval/functions/Message.h"
#include "org/oss/pdfreporter/compilers/jeval/functions/NullValue.h"
#include "org/oss/pdfreporter/compilers/jeval/functions/TruncateDateTo.h"
#include "org/oss/pdfreporter/uses/net/sourceforge/jeval/EvaluationConstants.h"
#include "org/oss/pdfreporter/uses/net/sourceforge/jeval/EvaluationException.h"
#include "org/oss/pdfreporter/uses/net/sourceforge/jeval/Evaluator.h"
#include "org/oss/pdfreporter/uses/net/sourceforge/jeval/function/Function.h"
#include "org/oss/pdfreporter/uses/net/sourceforge/jeval/function/FunctionException.h"

@implementation OrgOssPdfreporterCompilersJevalJEvalExpression

static NSString * OrgOssPdfreporterCompilersJevalJEvalExpression_EXP_TRUE_;
static JavaUtilLoggingLogger * OrgOssPdfreporterCompilersJevalJEvalExpression_logger_;

@synthesize variables = variables_;
@synthesize userFunctions = userFunctions_;
@synthesize valueEvaluator = valueEvaluator_;
@synthesize oldValueEvaluator = oldValueEvaluator_;
@synthesize expression = expression_;

+ (NSString *)EXP_TRUE {
  return OrgOssPdfreporterCompilersJevalJEvalExpression_EXP_TRUE_;
}

+ (void)setEXP_TRUE:(NSString *)EXP_TRUE {
  OrgOssPdfreporterCompilersJevalJEvalExpression_EXP_TRUE_ = EXP_TRUE;
}

+ (JavaUtilLoggingLogger *)logger {
  return OrgOssPdfreporterCompilersJevalJEvalExpression_logger_;
}

- (id)init {
  if ((self = [super init])) {
    self.variables = [[JavaUtilHashMap alloc] init];
    self.userFunctions = [[JavaUtilHashMap alloc] init];
    [self putFunctionWithOrgOssPdfreporterUsesNetSourceforgeJevalFunctionFunction:[[OrgOssPdfreporterCompilersJevalFunctionsBooleanConverter alloc] init]];
    [self putFunctionWithOrgOssPdfreporterUsesNetSourceforgeJevalFunctionFunction:[[OrgOssPdfreporterCompilersJevalFunctionsIntegerStringConverter alloc] init]];
    [self putFunctionWithOrgOssPdfreporterUsesNetSourceforgeJevalFunctionFunction:[[OrgOssPdfreporterCompilersJevalFunctionsDoubleStringConverter alloc] init]];
    [self putFunctionWithOrgOssPdfreporterUsesNetSourceforgeJevalFunctionFunction:[[OrgOssPdfreporterCompilersJevalFunctionsDateStringConverter alloc] init]];
    [self putFunctionWithOrgOssPdfreporterUsesNetSourceforgeJevalFunctionFunction:[[OrgOssPdfreporterCompilersJevalFunctionsTruncateDateTo alloc] init]];
    [self putFunctionWithOrgOssPdfreporterUsesNetSourceforgeJevalFunctionFunction:[[OrgOssPdfreporterCompilersJevalFunctionsConditional alloc] init]];
    [self putFunctionWithOrgOssPdfreporterUsesNetSourceforgeJevalFunctionFunction:[[OrgOssPdfreporterCompilersJevalFunctionsCurrentDate alloc] init]];
    [self putFunctionWithOrgOssPdfreporterUsesNetSourceforgeJevalFunctionFunction:[[OrgOssPdfreporterCompilersJevalFunctionsNullValue alloc] init]];
    [self putFunctionWithOrgOssPdfreporterUsesNetSourceforgeJevalFunctionFunction:[[OrgOssPdfreporterCompilersJevalFunctionsIsNull alloc] init]];
    [self putFunctionWithOrgOssPdfreporterUsesNetSourceforgeJevalFunctionFunction:[[OrgOssPdfreporterCompilersJevalFunctionsMessage alloc] init]];
    self.valueEvaluator = [[OrgOssPdfreporterUsesNetSourceforgeJevalEvaluator alloc] init];
    [((OrgOssPdfreporterUsesNetSourceforgeJevalEvaluator *) nil_chk(self.valueEvaluator)) setVariableResolverWithOrgOssPdfreporterUsesNetSourceforgeJevalVariableResolver:[[OrgOssPdfreporterCompilersJevalJEvalExpression_ValueResolver alloc] initWithOrgOssPdfreporterCompilersJevalJEvalExpression:self]];
    [((id<JavaUtilMap>) nil_chk([((OrgOssPdfreporterUsesNetSourceforgeJevalEvaluator *) nil_chk(self.valueEvaluator)) getFunctions])) putAllWithJavaUtilMap:userFunctions_];
    self.oldValueEvaluator = [[OrgOssPdfreporterUsesNetSourceforgeJevalEvaluator alloc] init];
    [((OrgOssPdfreporterUsesNetSourceforgeJevalEvaluator *) nil_chk(self.oldValueEvaluator)) setVariableResolverWithOrgOssPdfreporterUsesNetSourceforgeJevalVariableResolver:[[OrgOssPdfreporterCompilersJevalJEvalExpression_OldValueResolver alloc] initWithOrgOssPdfreporterCompilersJevalJEvalExpression:self]];
    [((id<JavaUtilMap>) nil_chk([((OrgOssPdfreporterUsesNetSourceforgeJevalEvaluator *) nil_chk(self.oldValueEvaluator)) getFunctions])) putAllWithJavaUtilMap:userFunctions_];
  }
  return self;
}

- (void)putFunctionWithOrgOssPdfreporterUsesNetSourceforgeJevalFunctionFunction:(id<OrgOssPdfreporterUsesNetSourceforgeJevalFunctionFunction>)function {
  (void) [((id<JavaUtilMap>) nil_chk(userFunctions_)) putWithId:[((id<OrgOssPdfreporterUsesNetSourceforgeJevalFunctionFunction>) nil_chk(function)) getName] withId:function];
}

+ (OrgOssPdfreporterCompilersJevalJEvalExpression *)newInstanceWithJavaUtilList:(id<JavaUtilList>)chunks OBJC_METHOD_FAMILY_NONE {
  OrgOssPdfreporterCompilersJevalJEvalExpression *expression = [[OrgOssPdfreporterCompilersJevalJEvalExpression alloc] init];
  [((OrgOssPdfreporterCompilersJevalJEvalExpression *) nil_chk(expression)) parseWithJavaUtilList:chunks];
  return expression;
}

- (void)parseWithJavaUtilList:(id<JavaUtilList>)chunks {
  self.expression = [self buildExpressionWithJavaUtilList:chunks];
  @try {
    [((OrgOssPdfreporterUsesNetSourceforgeJevalEvaluator *) nil_chk(valueEvaluator_)) parseWithNSString:expression_];
    [((OrgOssPdfreporterUsesNetSourceforgeJevalEvaluator *) nil_chk(oldValueEvaluator_)) parseWithNSString:expression_];
  }
  @catch (OrgOssPdfreporterUsesNetSourceforgeJevalEvaluationException *e) {
    @throw [[OrgOssPdfreporterCompilersJevalExpressionParseException alloc] initWithNSString:[NSString stringWithFormat:@"Cannot parse '%@', error: %@", expression_, [((OrgOssPdfreporterUsesNetSourceforgeJevalEvaluationException *) nil_chk(e)) getMessage]]];
  }
}

- (NSString *)getExpression {
  return expression_;
}

- (id<OrgOssPdfreporterCompilersJevalIVariable>)getVariableWithNSString:(NSString *)name {
  return [((id<JavaUtilMap>) nil_chk(variables_)) getWithId:[self getKeyWithOrgOssPdfreporterCompilersJevalIExpressionChunk_ExpresionTypeEnum:[OrgOssPdfreporterCompilersJevalIExpressionChunk_ExpresionTypeEnum TYPE_VARIABLE] withNSString:name]];
}

- (id<OrgOssPdfreporterCompilersJevalIVariable>)getParameterWithNSString:(NSString *)name {
  return [((id<JavaUtilMap>) nil_chk(variables_)) getWithId:[self getKeyWithOrgOssPdfreporterCompilersJevalIExpressionChunk_ExpresionTypeEnum:[OrgOssPdfreporterCompilersJevalIExpressionChunk_ExpresionTypeEnum TYPE_PARAMETER] withNSString:name]];
}

- (id<OrgOssPdfreporterCompilersJevalIVariable>)getFieldWithNSString:(NSString *)name {
  return [((id<JavaUtilMap>) nil_chk(variables_)) getWithId:[self getKeyWithOrgOssPdfreporterCompilersJevalIExpressionChunk_ExpresionTypeEnum:[OrgOssPdfreporterCompilersJevalIExpressionChunk_ExpresionTypeEnum TYPE_FIELD] withNSString:name]];
}

- (NSString *)buildExpressionWithJavaUtilList:(id<JavaUtilList>)chunks {
  JavaLangStringBuffer *sb = [[JavaLangStringBuffer alloc] init];
  NSString *name;
  id<OrgOssPdfreporterCompilersJevalIVariable> variable;
  {
    id<JavaUtilIterator> iter__ = [((id<JavaUtilList>) nil_chk(chunks)) iterator];
    while ([((id<JavaUtilIterator>) nil_chk(iter__)) hasNext]) {
      id<OrgOssPdfreporterCompilersJevalIExpressionChunk> chunk = [((id<JavaUtilIterator>) nil_chk(iter__)) next];
      switch ([[((id<OrgOssPdfreporterCompilersJevalIExpressionChunk>) nil_chk(chunk)) getType] ordinal]) {
        case OrgOssPdfreporterCompilersJevalIExpressionChunk_ExpresionType_TYPE_FIELD:
        case OrgOssPdfreporterCompilersJevalIExpressionChunk_ExpresionType_TYPE_PARAMETER:
        case OrgOssPdfreporterCompilersJevalIExpressionChunk_ExpresionType_TYPE_VARIABLE:
        name = [self getKeyWithOrgOssPdfreporterCompilersJevalIExpressionChunk_ExpresionTypeEnum:[((id<OrgOssPdfreporterCompilersJevalIExpressionChunk>) nil_chk(chunk)) getType] withNSString:[((id<OrgOssPdfreporterCompilersJevalIExpressionChunk>) nil_chk(chunk)) getText]];
        (void) [((JavaLangStringBuffer *) nil_chk(sb)) appendWithNSString:@"#{"];
        (void) [((JavaLangStringBuffer *) nil_chk(sb)) appendWithNSString:name];
        (void) [((JavaLangStringBuffer *) nil_chk(sb)) appendWithNSString:@"}"];
        variable = [((id<OrgOssPdfreporterCompilersJevalIVariableExpressionChunk>) chunk) getVariable];
        (void) [((id<JavaUtilMap>) nil_chk(variables_)) putWithId:name withId:variable];
        break;
        case OrgOssPdfreporterCompilersJevalIExpressionChunk_ExpresionType_TYPE_TEXT:
        case OrgOssPdfreporterCompilersJevalIExpressionChunk_ExpresionType_TYPE_RESOURCE:
        (void) [((JavaLangStringBuffer *) nil_chk(sb)) appendWithNSString:[((id<OrgOssPdfreporterCompilersJevalIExpressionChunk>) nil_chk(chunk)) getText]];
        break;
      }
    }
  }
  return [((JavaLangStringBuffer *) nil_chk(sb)) description];
}

- (NSString *)getKeyWithOrgOssPdfreporterCompilersJevalIExpressionChunk_ExpresionTypeEnum:(OrgOssPdfreporterCompilersJevalIExpressionChunk_ExpresionTypeEnum *)type
                                                                             withNSString:(NSString *)name {
  switch ([((OrgOssPdfreporterCompilersJevalIExpressionChunk_ExpresionTypeEnum *) nil_chk(type)) ordinal]) {
    case 1:
    return [NSString stringWithFormat:@"P_%@", name];
    case 2:
    return [NSString stringWithFormat:@"F_%@", name];
    case 3:
    return [NSString stringWithFormat:@"V_%@", name];
    case 4:
    return [NSString stringWithFormat:@"R_%@", name];
    default:
    return [NSString stringWithFormat:@"T_%@", name];
  }
}

- (NSString *)evaluateValue {
  @try {
    return [((OrgOssPdfreporterUsesNetSourceforgeJevalEvaluator *) nil_chk(valueEvaluator_)) evaluate];
  }
  @catch (OrgOssPdfreporterUsesNetSourceforgeJevalEvaluationException *e) {
    @throw [[OrgOssPdfreporterCompilersExpressionEvaluationException alloc] initWithNSString:[NSString stringWithFormat:@"Error while evaluating '%@'", expression_] withJavaLangThrowable:e];
  }
}

- (NSString *)evaluateOldValue {
  @try {
    return [((OrgOssPdfreporterUsesNetSourceforgeJevalEvaluator *) nil_chk(oldValueEvaluator_)) evaluate];
  }
  @catch (OrgOssPdfreporterUsesNetSourceforgeJevalEvaluationException *e) {
    @throw [[OrgOssPdfreporterCompilersExpressionEvaluationException alloc] initWithNSString:[NSString stringWithFormat:@"Error while evaluating '%@'", expression_] withJavaLangThrowable:e];
  }
}

- (NSString *)getStringWithId:(id)value {
  if ([value isKindOfClass:[JavaUtilDate class]]) {
    return [NSString valueOfLong:[((JavaUtilDate *) value) getTime]];
  }
  else if (value == nil) {
    return [OrgOssPdfreporterCompilersJevalFunctionsNullValue QUOTED_NULL];
  }
  else if ([value isKindOfClass:[NSString class]]) {
    return [NSString stringWithFormat:@"'%@'", [value description]];
  }
  else if ([value isKindOfClass:[JavaLangDouble class]]) {
    return [((JavaMathBigDecimal *) nil_chk([JavaMathBigDecimal valueOfWithDouble:[(JavaLangDouble *) value doubleValue]])) toPlainString];
  }
  else if ([value isKindOfClass:[JavaLangFloat class]]) {
    return [((JavaMathBigDecimal *) nil_chk([JavaMathBigDecimal valueOfWithDouble:[(JavaLangFloat *) value floatValue]])) toPlainString];
  }
  else {
    [((JavaUtilLoggingLogger *) nil_chk(OrgOssPdfreporterCompilersJevalJEvalExpression_logger_)) finestWithNSString:[NSString stringWithFormat:@"Convert Object to String class: %@, toString: %@", [value getClass], [value description]]];
    return [value description];
  }
}

+ (void)initialize {
  if (self == [OrgOssPdfreporterCompilersJevalJEvalExpression class]) {
    OrgOssPdfreporterCompilersJevalJEvalExpression_EXP_TRUE_ = @"1.0";
    OrgOssPdfreporterCompilersJevalJEvalExpression_logger_ = [JavaUtilLoggingLogger getLoggerWithNSString:[[IOSClass classWithClass:[OrgOssPdfreporterCompilersJevalJEvalExpression class]] getName]];
  }
}

- (void)copyAllPropertiesTo:(id)copy {
  [super copyAllPropertiesTo:copy];
  OrgOssPdfreporterCompilersJevalJEvalExpression *typedCopy = (OrgOssPdfreporterCompilersJevalJEvalExpression *) copy;
  typedCopy.variables = variables_;
  typedCopy.userFunctions = userFunctions_;
  typedCopy.valueEvaluator = valueEvaluator_;
  typedCopy.oldValueEvaluator = oldValueEvaluator_;
  typedCopy.expression = expression_;
}

@end
@implementation OrgOssPdfreporterCompilersJevalJEvalExpression_ValueResolver

@synthesize this$0 = this$0_;

- (NSString *)resolveVariableWithNSString:(NSString *)variableName {
  @try {
    return [this$0_ getStringWithId:[((id<OrgOssPdfreporterCompilersJevalIVariable>) nil_chk([((id<JavaUtilMap>) nil_chk(this$0_.variables)) getWithId:variableName])) getValue]];
  }
  @catch (OrgOssPdfreporterCompilersExpressionEvaluationException *e) {
    @throw [[OrgOssPdfreporterUsesNetSourceforgeJevalFunctionFunctionException alloc] initWithJavaLangException:e];
  }
}

- (id)initWithOrgOssPdfreporterCompilersJevalJEvalExpression:(OrgOssPdfreporterCompilersJevalJEvalExpression *)outer$ {
  if ((self = [super init])) {
    this$0_ = outer$;
  }
  return self;
}

- (void)copyAllPropertiesTo:(id)copy {
  [super copyAllPropertiesTo:copy];
  OrgOssPdfreporterCompilersJevalJEvalExpression_ValueResolver *typedCopy = (OrgOssPdfreporterCompilersJevalJEvalExpression_ValueResolver *) copy;
  typedCopy.this$0 = this$0_;
}

@end
@implementation OrgOssPdfreporterCompilersJevalJEvalExpression_OldValueResolver

@synthesize this$0 = this$0_;

- (NSString *)resolveVariableWithNSString:(NSString *)variableName {
  @try {
    return [this$0_ getStringWithId:[((id<OrgOssPdfreporterCompilersJevalIVariable>) nil_chk([((id<JavaUtilMap>) nil_chk(this$0_.variables)) getWithId:variableName])) getOldValue]];
  }
  @catch (OrgOssPdfreporterCompilersExpressionEvaluationException *e) {
    @throw [[OrgOssPdfreporterUsesNetSourceforgeJevalFunctionFunctionException alloc] initWithJavaLangException:e];
  }
}

- (id)initWithOrgOssPdfreporterCompilersJevalJEvalExpression:(OrgOssPdfreporterCompilersJevalJEvalExpression *)outer$ {
  if ((self = [super init])) {
    this$0_ = outer$;
  }
  return self;
}

- (void)copyAllPropertiesTo:(id)copy {
  [super copyAllPropertiesTo:copy];
  OrgOssPdfreporterCompilersJevalJEvalExpression_OldValueResolver *typedCopy = (OrgOssPdfreporterCompilersJevalJEvalExpression_OldValueResolver *) copy;
  typedCopy.this$0 = this$0_;
}

@end
