//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: pdfreporter-core/src/org/oss/pdfreporter/compilers/jeval/functions/Message.java
//
//  Created by kendra on 9/27/13.
//

#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "java/lang/Double.h"
#include "java/lang/Long.h"
#include "java/lang/Math.h"
#include "java/util/ArrayList.h"
#include "java/util/Date.h"
#include "java/util/List.h"
#include "org/oss/pdfreporter/compilers/jeval/ResultUtil.h"
#include "org/oss/pdfreporter/compilers/jeval/functions/Message.h"
#include "org/oss/pdfreporter/registry/ApiRegistry.h"
#include "org/oss/pdfreporter/text/format/IMessageFormat.h"
#include "org/oss/pdfreporter/text/format/factory/IFormatFactory.h"
#include "org/oss/pdfreporter/uses/net/sourceforge/jeval/ArgumentTokenizer.h"
#include "org/oss/pdfreporter/uses/net/sourceforge/jeval/EvaluationConstants.h"
#include "org/oss/pdfreporter/uses/net/sourceforge/jeval/Evaluator.h"
#include "org/oss/pdfreporter/uses/net/sourceforge/jeval/function/FunctionConstants.h"
#include "org/oss/pdfreporter/uses/net/sourceforge/jeval/function/FunctionHelper.h"
#include "org/oss/pdfreporter/uses/net/sourceforge/jeval/function/FunctionResult.h"

@implementation OrgOssPdfreporterCompilersJevalFunctionsMessage

static NSString * OrgOssPdfreporterCompilersJevalFunctionsMessage_DATE_CONVERTER_ = @"(date)";

+ (NSString *)DATE_CONVERTER {
  return OrgOssPdfreporterCompilersJevalFunctionsMessage_DATE_CONVERTER_;
}

- (NSString *)getName {
  return @"msg";
}

- (OrgOssPdfreporterUsesNetSourceforgeJevalFunctionFunctionResult *)executeWithOrgOssPdfreporterUsesNetSourceforgeJevalEvaluator:(OrgOssPdfreporterUsesNetSourceforgeJevalEvaluator *)evaluator
                                                                                                                    withNSString:(NSString *)arguments {
  NSString *pattern = nil;
  OrgOssPdfreporterUsesNetSourceforgeJevalArgumentTokenizer *tokenizer = [[OrgOssPdfreporterUsesNetSourceforgeJevalArgumentTokenizer alloc] initWithNSString:arguments withUnichar:OrgOssPdfreporterUsesNetSourceforgeJevalEvaluationConstants_FUNCTION_ARGUMENT_SEPARATOR];
  id<JavaUtilList> args = [[JavaUtilArrayList alloc] init];
  pattern = [OrgOssPdfreporterUsesNetSourceforgeJevalFunctionFunctionHelper trimAndRemoveQuoteCharsWithNSString:[((OrgOssPdfreporterUsesNetSourceforgeJevalArgumentTokenizer *) nil_chk(tokenizer)) nextToken] withUnichar:[((OrgOssPdfreporterUsesNetSourceforgeJevalEvaluator *) nil_chk(evaluator)) getQuoteCharacter]];
  while ([((OrgOssPdfreporterUsesNetSourceforgeJevalArgumentTokenizer *) nil_chk(tokenizer)) hasMoreTokens]) {
    NSString *rawarg = [((OrgOssPdfreporterUsesNetSourceforgeJevalArgumentTokenizer *) nil_chk(tokenizer)) nextToken];
    if ([OrgOssPdfreporterCompilersJevalResultUtil isStringWithNSString:rawarg withUnichar:[((OrgOssPdfreporterUsesNetSourceforgeJevalEvaluator *) nil_chk(evaluator)) getQuoteCharacter]]) {
      NSString *stringArg = [OrgOssPdfreporterUsesNetSourceforgeJevalFunctionFunctionHelper trimAndRemoveQuoteCharsWithNSString:rawarg withUnichar:[((OrgOssPdfreporterUsesNetSourceforgeJevalEvaluator *) nil_chk(evaluator)) getQuoteCharacter]];
      if ([((NSString *) nil_chk(stringArg)) hasPrefix:OrgOssPdfreporterCompilersJevalFunctionsMessage_DATE_CONVERTER_]) {
        [((id<JavaUtilList>) nil_chk(args)) addWithId:[[JavaUtilDate alloc] initWithLongInt:[JavaLangLong parseLongWithNSString:[((NSString *) nil_chk(stringArg)) substring:6]]]];
      }
      else {
        [((id<JavaUtilList>) nil_chk(args)) addWithId:stringArg];
      }
    }
    else {
      JavaLangDouble *doubleArg = [[JavaLangDouble alloc] initWithNSString:rawarg];
      if ([((JavaLangDouble *) nil_chk(doubleArg)) compareToWithId:[JavaLangDouble valueOfWithDouble:[JavaLangMath floorWithDouble:[((JavaLangDouble *) nil_chk(doubleArg)) doubleValue]]]] == 0) {
        [((id<JavaUtilList>) nil_chk(args)) addWithId:[JavaLangLong valueOfWithLongInt:[((JavaLangDouble *) nil_chk(doubleArg)) longLongValue]]];
      }
      else {
        [((id<JavaUtilList>) nil_chk(args)) addWithId:doubleArg];
      }
    }
  }
  id<OrgOssPdfreporterTextFormatIMessageFormat> formatter = [((id<OrgOssPdfreporterTextFormatFactoryIFormatFactory>) nil_chk([OrgOssPdfreporterRegistryApiRegistry getIFormatFactoryWithOrgOssPdfreporterTextFormatFactoryIFormatFactory_FormatTypeEnum:[OrgOssPdfreporterTextFormatFactoryIFormatFactory_FormatTypeEnum STANDARD]])) newMessageFormatWithNSString:pattern withJavaUtilLocale:nil];
  return [[OrgOssPdfreporterUsesNetSourceforgeJevalFunctionFunctionResult alloc] initWithNSString:[((id<OrgOssPdfreporterTextFormatIMessageFormat>) nil_chk(formatter)) formatWithNSObjectArray:[((id<JavaUtilList>) nil_chk(args)) toArray]] withInt:OrgOssPdfreporterUsesNetSourceforgeJevalFunctionFunctionConstants_FUNCTION_RESULT_TYPE_STRING];
}

- (id)init {
  return [super init];
}

@end
