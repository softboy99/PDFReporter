//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: pdfreporter-core/src/org/oss/pdfreporter/compilers/jeval/IExpressionChunk.java
//
//  Created by kendra on 9/27/13.
//

#include "IOSClass.h"
#include "java/lang/IllegalArgumentException.h"
#include "org/oss/pdfreporter/compilers/jeval/IExpressionChunk.h"


static OrgOssPdfreporterCompilersJevalIExpressionChunk_ExpresionTypeEnum *OrgOssPdfreporterCompilersJevalIExpressionChunk_ExpresionTypeEnum_TYPE_TEXT;
static OrgOssPdfreporterCompilersJevalIExpressionChunk_ExpresionTypeEnum *OrgOssPdfreporterCompilersJevalIExpressionChunk_ExpresionTypeEnum_TYPE_PARAMETER;
static OrgOssPdfreporterCompilersJevalIExpressionChunk_ExpresionTypeEnum *OrgOssPdfreporterCompilersJevalIExpressionChunk_ExpresionTypeEnum_TYPE_FIELD;
static OrgOssPdfreporterCompilersJevalIExpressionChunk_ExpresionTypeEnum *OrgOssPdfreporterCompilersJevalIExpressionChunk_ExpresionTypeEnum_TYPE_VARIABLE;
static OrgOssPdfreporterCompilersJevalIExpressionChunk_ExpresionTypeEnum *OrgOssPdfreporterCompilersJevalIExpressionChunk_ExpresionTypeEnum_TYPE_RESOURCE;
IOSObjectArray *OrgOssPdfreporterCompilersJevalIExpressionChunk_ExpresionTypeEnum_values;

@implementation OrgOssPdfreporterCompilersJevalIExpressionChunk_ExpresionTypeEnum

+ (OrgOssPdfreporterCompilersJevalIExpressionChunk_ExpresionTypeEnum *)TYPE_TEXT {
  return OrgOssPdfreporterCompilersJevalIExpressionChunk_ExpresionTypeEnum_TYPE_TEXT;
}
+ (OrgOssPdfreporterCompilersJevalIExpressionChunk_ExpresionTypeEnum *)TYPE_PARAMETER {
  return OrgOssPdfreporterCompilersJevalIExpressionChunk_ExpresionTypeEnum_TYPE_PARAMETER;
}
+ (OrgOssPdfreporterCompilersJevalIExpressionChunk_ExpresionTypeEnum *)TYPE_FIELD {
  return OrgOssPdfreporterCompilersJevalIExpressionChunk_ExpresionTypeEnum_TYPE_FIELD;
}
+ (OrgOssPdfreporterCompilersJevalIExpressionChunk_ExpresionTypeEnum *)TYPE_VARIABLE {
  return OrgOssPdfreporterCompilersJevalIExpressionChunk_ExpresionTypeEnum_TYPE_VARIABLE;
}
+ (OrgOssPdfreporterCompilersJevalIExpressionChunk_ExpresionTypeEnum *)TYPE_RESOURCE {
  return OrgOssPdfreporterCompilersJevalIExpressionChunk_ExpresionTypeEnum_TYPE_RESOURCE;
}

- (id)copyWithZone:(NSZone *)zone {
  return self;
}

- (id)initWithNSString:(NSString *)name withInt:(int)ordinal {
  return [super initWithNSString:name withInt:ordinal];
}

+ (void)initialize {
  if (self == [OrgOssPdfreporterCompilersJevalIExpressionChunk_ExpresionTypeEnum class]) {
    OrgOssPdfreporterCompilersJevalIExpressionChunk_ExpresionTypeEnum_TYPE_TEXT = [[OrgOssPdfreporterCompilersJevalIExpressionChunk_ExpresionTypeEnum alloc] initWithNSString:@"TYPE_TEXT" withInt:0];
    OrgOssPdfreporterCompilersJevalIExpressionChunk_ExpresionTypeEnum_TYPE_PARAMETER = [[OrgOssPdfreporterCompilersJevalIExpressionChunk_ExpresionTypeEnum alloc] initWithNSString:@"TYPE_PARAMETER" withInt:1];
    OrgOssPdfreporterCompilersJevalIExpressionChunk_ExpresionTypeEnum_TYPE_FIELD = [[OrgOssPdfreporterCompilersJevalIExpressionChunk_ExpresionTypeEnum alloc] initWithNSString:@"TYPE_FIELD" withInt:2];
    OrgOssPdfreporterCompilersJevalIExpressionChunk_ExpresionTypeEnum_TYPE_VARIABLE = [[OrgOssPdfreporterCompilersJevalIExpressionChunk_ExpresionTypeEnum alloc] initWithNSString:@"TYPE_VARIABLE" withInt:3];
    OrgOssPdfreporterCompilersJevalIExpressionChunk_ExpresionTypeEnum_TYPE_RESOURCE = [[OrgOssPdfreporterCompilersJevalIExpressionChunk_ExpresionTypeEnum alloc] initWithNSString:@"TYPE_RESOURCE" withInt:4];
    OrgOssPdfreporterCompilersJevalIExpressionChunk_ExpresionTypeEnum_values = [[IOSObjectArray alloc] initWithObjects:(id[]){ OrgOssPdfreporterCompilersJevalIExpressionChunk_ExpresionTypeEnum_TYPE_TEXT, OrgOssPdfreporterCompilersJevalIExpressionChunk_ExpresionTypeEnum_TYPE_PARAMETER, OrgOssPdfreporterCompilersJevalIExpressionChunk_ExpresionTypeEnum_TYPE_FIELD, OrgOssPdfreporterCompilersJevalIExpressionChunk_ExpresionTypeEnum_TYPE_VARIABLE, OrgOssPdfreporterCompilersJevalIExpressionChunk_ExpresionTypeEnum_TYPE_RESOURCE, nil } count:5 type:[IOSClass classWithClass:[OrgOssPdfreporterCompilersJevalIExpressionChunk_ExpresionTypeEnum class]]];
  }
}

+ (IOSObjectArray *)values {
  return [IOSObjectArray arrayWithArray:OrgOssPdfreporterCompilersJevalIExpressionChunk_ExpresionTypeEnum_values];
}

+ (OrgOssPdfreporterCompilersJevalIExpressionChunk_ExpresionTypeEnum *)valueOfWithNSString:(NSString *)name {
  for (int i = 0; i < [OrgOssPdfreporterCompilersJevalIExpressionChunk_ExpresionTypeEnum_values count]; i++) {
    OrgOssPdfreporterCompilersJevalIExpressionChunk_ExpresionTypeEnum *e = [OrgOssPdfreporterCompilersJevalIExpressionChunk_ExpresionTypeEnum_values objectAtIndex:i];
    if ([name isEqual:[e name]]) {
      return e;
    }
  }
  @throw [[JavaLangIllegalArgumentException alloc] initWithNSString:name];
  return nil;
}

@end
