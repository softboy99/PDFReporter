//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: pdfreporter-core/src/org/oss/pdfreporter/compilers/jeval/SingleChunkExpressionFactory.java
//
//  Created by kendra on 9/27/13.
//

#include "org/oss/pdfreporter/compilers/IExpressionElement.h"
#include "org/oss/pdfreporter/compilers/jeval/ExpressionParseException.h"
#include "org/oss/pdfreporter/compilers/jeval/IDataHolder.h"
#include "org/oss/pdfreporter/compilers/jeval/SingleChunkExpressionFactory.h"
#include "org/oss/pdfreporter/compilers/jeval/SingleChunkTextTypeFactory.h"
#include "org/oss/pdfreporter/engine/JRExpressionChunk.h"
#include "org/oss/pdfreporter/engine/JRValueParameter.h"
#include "org/oss/pdfreporter/engine/fill/JRFillField.h"
#include "org/oss/pdfreporter/engine/fill/JRFillVariable.h"

@implementation OrgOssPdfreporterCompilersJevalSingleChunkExpressionFactory

+ (id<OrgOssPdfreporterCompilersIExpressionElement>)buildExpressionWithOrgOssPdfreporterCompilersJevalIDataHolder:(id<OrgOssPdfreporterCompilersJevalIDataHolder>)dataholder
                                                                     withOrgOssPdfreporterEngineJRExpressionChunk:(id<OrgOssPdfreporterEngineJRExpressionChunk>)chunk {
  NSString *chunkText = [((id<OrgOssPdfreporterEngineJRExpressionChunk>) nil_chk(chunk)) getText];
  if (chunkText == nil) {
    chunkText = @"";
  }
  switch ([((id<OrgOssPdfreporterEngineJRExpressionChunk>) nil_chk(chunk)) getType]) {
    case OrgOssPdfreporterEngineJRExpressionChunk_TYPE_TEXT:
    {
      return [OrgOssPdfreporterCompilersJevalSingleChunkTextTypeFactory buildExpressionWithNSString:chunkText];
    }
    case OrgOssPdfreporterEngineJRExpressionChunk_TYPE_PARAMETER:
    {
      return [[OrgOssPdfreporterCompilersJevalSingleChunkExpressionFactory_ParameterElement alloc] initWithOrgOssPdfreporterCompilersJevalIDataHolder:dataholder withNSString:chunkText];
    }
    case OrgOssPdfreporterEngineJRExpressionChunk_TYPE_FIELD:
    {
      return [[OrgOssPdfreporterCompilersJevalSingleChunkExpressionFactory_FieldElement alloc] initWithOrgOssPdfreporterCompilersJevalIDataHolder:dataholder withNSString:chunkText];
    }
    case OrgOssPdfreporterEngineJRExpressionChunk_TYPE_VARIABLE:
    {
      return [[OrgOssPdfreporterCompilersJevalSingleChunkExpressionFactory_VariableElement alloc] initWithOrgOssPdfreporterCompilersJevalIDataHolder:dataholder withNSString:chunkText];
    }
    case OrgOssPdfreporterEngineJRExpressionChunk_TYPE_RESOURCE:
    {
      return [OrgOssPdfreporterCompilersJevalSingleChunkTextTypeFactory buildExpressionWithNSString:[NSString stringWithFormat:@"str(\"%@\")", chunkText]];
    }
  }
  @throw [[OrgOssPdfreporterCompilersJevalExpressionParseException alloc] initWithNSString:[NSString stringWithFormat:@"Unreachable type: %d, text: %@", [((id<OrgOssPdfreporterEngineJRExpressionChunk>) nil_chk(chunk)) getType], chunkText]];
}

- (id)init {
  return [super init];
}

@end
@implementation OrgOssPdfreporterCompilersJevalSingleChunkExpressionFactory_AbstractElement

@synthesize dataholder = dataholder_;
@synthesize key = key_;

- (id)initWithOrgOssPdfreporterCompilersJevalIDataHolder:(id<OrgOssPdfreporterCompilersJevalIDataHolder>)dataholder
                                            withNSString:(NSString *)key {
  if ((self = [super init])) {
    self.dataholder = dataholder;
    self.key = key;
  }
  return self;
}

- (id)getOldValue {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}

- (id)getValue {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}

- (void)copyAllPropertiesTo:(id)copy {
  [super copyAllPropertiesTo:copy];
  OrgOssPdfreporterCompilersJevalSingleChunkExpressionFactory_AbstractElement *typedCopy = (OrgOssPdfreporterCompilersJevalSingleChunkExpressionFactory_AbstractElement *) copy;
  typedCopy.dataholder = dataholder_;
  typedCopy.key = key_;
}

@end
@implementation OrgOssPdfreporterCompilersJevalSingleChunkExpressionFactory_ParameterElement

- (id)initWithOrgOssPdfreporterCompilersJevalIDataHolder:(id<OrgOssPdfreporterCompilersJevalIDataHolder>)dataholder
                                            withNSString:(NSString *)key {
  return [super initWithOrgOssPdfreporterCompilersJevalIDataHolder:dataholder withNSString:key];
}

- (id)getValue {
  return [((id<OrgOssPdfreporterEngineJRValueParameter>) nil_chk([((id<OrgOssPdfreporterCompilersJevalIDataHolder>) nil_chk(dataholder_)) getParameterWithNSString:key_])) getValue];
}

- (id)getOldValue {
  return [self getValue];
}

@end
@implementation OrgOssPdfreporterCompilersJevalSingleChunkExpressionFactory_FieldElement

- (id)initWithOrgOssPdfreporterCompilersJevalIDataHolder:(id<OrgOssPdfreporterCompilersJevalIDataHolder>)dataholder
                                            withNSString:(NSString *)key {
  return [super initWithOrgOssPdfreporterCompilersJevalIDataHolder:dataholder withNSString:key];
}

- (id)getValue {
  return [((OrgOssPdfreporterEngineFillJRFillField *) nil_chk([((id<OrgOssPdfreporterCompilersJevalIDataHolder>) nil_chk(dataholder_)) getFieldWithNSString:key_])) getValue];
}

- (id)getOldValue {
  return [((OrgOssPdfreporterEngineFillJRFillField *) nil_chk([((id<OrgOssPdfreporterCompilersJevalIDataHolder>) nil_chk(dataholder_)) getFieldWithNSString:key_])) getOldValue];
}

@end
@implementation OrgOssPdfreporterCompilersJevalSingleChunkExpressionFactory_VariableElement

- (id)initWithOrgOssPdfreporterCompilersJevalIDataHolder:(id<OrgOssPdfreporterCompilersJevalIDataHolder>)dataholder
                                            withNSString:(NSString *)key {
  return [super initWithOrgOssPdfreporterCompilersJevalIDataHolder:dataholder withNSString:key];
}

- (id)getValue {
  return [((OrgOssPdfreporterEngineFillJRFillVariable *) nil_chk([((id<OrgOssPdfreporterCompilersJevalIDataHolder>) nil_chk(dataholder_)) getVariableWithNSString:key_])) getValue];
}

- (id)getOldValue {
  return [((OrgOssPdfreporterEngineFillJRFillVariable *) nil_chk([((id<OrgOssPdfreporterCompilersJevalIDataHolder>) nil_chk(dataholder_)) getVariableWithNSString:key_])) getOldValue];
}

@end
