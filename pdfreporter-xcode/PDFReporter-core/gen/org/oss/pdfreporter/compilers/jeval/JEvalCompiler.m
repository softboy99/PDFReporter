//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: pdfreporter-core/src/org/oss/pdfreporter/compilers/jeval/JEvalCompiler.java
//
//  Created by kendra on 9/27/13.
//

#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "java/io/File.h"
#include "java/io/Serializable.h"
#include "java/util/HashMap.h"
#include "java/util/Map.h"
#include "java/util/logging/Logger.h"
#include "org/oss/pdfreporter/compilers/jeval/JEvalCompiler.h"
#include "org/oss/pdfreporter/compilers/jeval/JEvalExpressionEvaluator.h"
#include "org/oss/pdfreporter/engine/JRException.h"
#include "org/oss/pdfreporter/engine/JRReport.h"
#include "org/oss/pdfreporter/engine/JasperReportsContext.h"
#include "org/oss/pdfreporter/engine/design/JRCompilationSourceCode.h"
#include "org/oss/pdfreporter/engine/design/JRCompilationUnit.h"
#include "org/oss/pdfreporter/engine/design/JRDefaultCompilationSourceCode.h"
#include "org/oss/pdfreporter/engine/design/JRSourceCompileTask.h"
#include "org/oss/pdfreporter/engine/fill/JREvaluator.h"

@implementation OrgOssPdfreporterCompilersJevalJEvalCompiler

static JavaUtilLoggingLogger * OrgOssPdfreporterCompilersJevalJEvalCompiler_logger_;
static id<JavaUtilMap> OrgOssPdfreporterCompilersJevalJEvalCompiler_evaluators_;

+ (JavaUtilLoggingLogger *)logger {
  return OrgOssPdfreporterCompilersJevalJEvalCompiler_logger_;
}

+ (id<JavaUtilMap>)evaluators {
  return OrgOssPdfreporterCompilersJevalJEvalCompiler_evaluators_;
}

- (id)initOrgOssPdfreporterCompilersJevalJEvalCompilerWithOrgOssPdfreporterEngineJasperReportsContext:(id<OrgOssPdfreporterEngineJasperReportsContext>)jasperReportsContext
                                                                                             withBOOL:(BOOL)needsSourceFiles {
  return [super initWithOrgOssPdfreporterEngineJasperReportsContext:jasperReportsContext withBOOL:needsSourceFiles];
}

- (id)initWithOrgOssPdfreporterEngineJasperReportsContext:(id<OrgOssPdfreporterEngineJasperReportsContext>)jasperReportsContext
                                                 withBOOL:(BOOL)needsSourceFiles {
  return [self initOrgOssPdfreporterCompilersJevalJEvalCompilerWithOrgOssPdfreporterEngineJasperReportsContext:jasperReportsContext withBOOL:needsSourceFiles];
}

- (id)initWithOrgOssPdfreporterEngineJasperReportsContext:(id<OrgOssPdfreporterEngineJasperReportsContext>)jasperReportsContext {
  return [self initOrgOssPdfreporterCompilersJevalJEvalCompilerWithOrgOssPdfreporterEngineJasperReportsContext:jasperReportsContext withBOOL:NO];
}

- (OrgOssPdfreporterEngineFillJREvaluator *)loadEvaluatorWithJavaIoSerializable:(id<JavaIoSerializable>)compileData
                                                                   withNSString:(NSString *)unitName {
  [((JavaUtilLoggingLogger *) nil_chk(OrgOssPdfreporterCompilersJevalJEvalCompiler_logger_)) finestWithNSString:[NSString stringWithFormat:@"loadEvaluator: compileData=%@, unitName=%@", compileData, unitName]];
  return [((id<JavaUtilMap>) nil_chk(OrgOssPdfreporterCompilersJevalJEvalCompiler_evaluators_)) getWithId:unitName];
}

- (void)checkLanguageWithNSString:(NSString *)language {
  if (![((NSString *) nil_chk([OrgOssPdfreporterEngineJRReport LANGUAGE_JEVAL])) isEqual:language]) {
    @throw [[OrgOssPdfreporterEngineJRException alloc] initWithNSString:[NSString stringWithFormat:@"Language \"%@\" not supported by this report compiler.\nExpecting \"objectivec\" instead.", language]];
  }
}

- (id<OrgOssPdfreporterEngineDesignJRCompilationSourceCode>)generateSourceCodeWithOrgOssPdfreporterEngineDesignJRSourceCompileTask:(OrgOssPdfreporterEngineDesignJRSourceCompileTask *)sourceTask {
  OrgOssPdfreporterCompilersJevalJEvalExpressionEvaluator *evaluator = [[OrgOssPdfreporterCompilersJevalJEvalExpressionEvaluator alloc] init];
  [((OrgOssPdfreporterCompilersJevalJEvalExpressionEvaluator *) nil_chk(evaluator)) initializeWithDefaultsWithOrgOssPdfreporterEngineDesignJRSourceCompileTask:sourceTask];
  [((OrgOssPdfreporterCompilersJevalJEvalExpressionEvaluator *) nil_chk(evaluator)) parseExpressionsWithOrgOssPdfreporterEngineDesignJRSourceCompileTask:sourceTask];
  (void) [((id<JavaUtilMap>) nil_chk(OrgOssPdfreporterCompilersJevalJEvalCompiler_evaluators_)) putWithId:[((OrgOssPdfreporterEngineDesignJRSourceCompileTask *) nil_chk(sourceTask)) getUnitName] withId:evaluator];
  return [[OrgOssPdfreporterEngineDesignJRDefaultCompilationSourceCode alloc] initWithNSString:[((OrgOssPdfreporterEngineDesignJRSourceCompileTask *) nil_chk(sourceTask)) getUnitName] withOrgOssPdfreporterEngineJRExpressionArray:nil];
}

- (NSString *)compileUnitsWithOrgOssPdfreporterEngineDesignJRCompilationUnitArray:(IOSObjectArray *)units
                                                                     withNSString:(NSString *)classpath
                                                                   withJavaIoFile:(JavaIoFile *)tempDirFile {
  {
    IOSObjectArray *a__ = units;
    int n__ = (int) [((IOSObjectArray *) nil_chk(a__)) count];
    for (int i__ = 0; i__ < n__; i__++) {
      OrgOssPdfreporterEngineDesignJRCompilationUnit *unit = [((IOSObjectArray *) nil_chk(a__)) objectAtIndex:i__];
      [((OrgOssPdfreporterEngineDesignJRCompilationUnit *) nil_chk(unit)) setCompileDataWithJavaIoSerializable:[[OrgOssPdfreporterCompilersJevalJEvalCompiler_DummyCompileData alloc] init]];
    }
  }
  return nil;
}

- (NSString *)getSourceFileNameWithNSString:(NSString *)unitName {
  return nil;
}

+ (void)initialize {
  if (self == [OrgOssPdfreporterCompilersJevalJEvalCompiler class]) {
    OrgOssPdfreporterCompilersJevalJEvalCompiler_logger_ = [JavaUtilLoggingLogger getLoggerWithNSString:[[IOSClass classWithClass:[OrgOssPdfreporterCompilersJevalJEvalCompiler class]] getName]];
    OrgOssPdfreporterCompilersJevalJEvalCompiler_evaluators_ = [[JavaUtilHashMap alloc] init];
  }
}

@end
@implementation OrgOssPdfreporterCompilersJevalJEvalCompiler_DummyCompileData

- (id)init {
  return [super init];
}

@end
