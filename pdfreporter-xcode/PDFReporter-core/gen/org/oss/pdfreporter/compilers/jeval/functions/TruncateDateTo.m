//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: pdfreporter-core/src/org/oss/pdfreporter/compilers/jeval/functions/TruncateDateTo.java
//
//  Created by kendra on 9/27/13.
//

#include "java/lang/Double.h"
#include "java/lang/Exception.h"
#include "java/lang/Long.h"
#include "java/util/Calendar.h"
#include "org/oss/pdfreporter/compilers/jeval/functions/TruncateDateTo.h"
#include "org/oss/pdfreporter/uses/net/sourceforge/jeval/ArgumentTokenizer.h"
#include "org/oss/pdfreporter/uses/net/sourceforge/jeval/EvaluationConstants.h"
#include "org/oss/pdfreporter/uses/net/sourceforge/jeval/Evaluator.h"
#include "org/oss/pdfreporter/uses/net/sourceforge/jeval/function/FunctionConstants.h"
#include "org/oss/pdfreporter/uses/net/sourceforge/jeval/function/FunctionException.h"
#include "org/oss/pdfreporter/uses/net/sourceforge/jeval/function/FunctionResult.h"

@implementation OrgOssPdfreporterCompilersJevalFunctionsTruncateDateTo

static NSString * OrgOssPdfreporterCompilersJevalFunctionsTruncateDateTo_MODE_MONTH_ = @"'M'";

+ (NSString *)MODE_MONTH {
  return OrgOssPdfreporterCompilersJevalFunctionsTruncateDateTo_MODE_MONTH_;
}

- (NSString *)getName {
  return @"truncateDateTo";
}

- (OrgOssPdfreporterUsesNetSourceforgeJevalFunctionFunctionResult *)executeWithOrgOssPdfreporterUsesNetSourceforgeJevalEvaluator:(OrgOssPdfreporterUsesNetSourceforgeJevalEvaluator *)evaluator
                                                                                                                    withNSString:(NSString *)arguments {
  JavaLangLong *date = nil;
  @try {
    OrgOssPdfreporterUsesNetSourceforgeJevalArgumentTokenizer *tokenizer = [[OrgOssPdfreporterUsesNetSourceforgeJevalArgumentTokenizer alloc] initWithNSString:arguments withUnichar:OrgOssPdfreporterUsesNetSourceforgeJevalEvaluationConstants_FUNCTION_ARGUMENT_SEPARATOR];
    NSString *mode = [((OrgOssPdfreporterUsesNetSourceforgeJevalArgumentTokenizer *) nil_chk(tokenizer)) nextToken];
    date = [JavaLangLong valueOfWithLongInt:[((JavaLangDouble *) [[JavaLangDouble alloc] initWithNSString:[((OrgOssPdfreporterUsesNetSourceforgeJevalArgumentTokenizer *) nil_chk(tokenizer)) nextToken]]) longLongValue]];
    JavaUtilCalendar *calendar = [JavaUtilCalendar getInstance];
    [((JavaUtilCalendar *) nil_chk(calendar)) setTimeInMillisWithLongInt:[((JavaLangLong *) nil_chk(date)) longLongValue]];
    int year = [((JavaUtilCalendar *) nil_chk(calendar)) getWithInt:JavaUtilCalendar_YEAR];
    int month = [((JavaUtilCalendar *) nil_chk(calendar)) getWithInt:JavaUtilCalendar_MONTH];
    [((JavaUtilCalendar *) nil_chk(calendar)) clear];
    [((JavaUtilCalendar *) nil_chk(calendar)) setWithInt:JavaUtilCalendar_YEAR withInt:year];
    if ([((NSString *) nil_chk(mode)) equalsIgnoreCase:OrgOssPdfreporterCompilersJevalFunctionsTruncateDateTo_MODE_MONTH_]) {
      [((JavaUtilCalendar *) nil_chk(calendar)) setWithInt:JavaUtilCalendar_MONTH withInt:month];
    }
    date = [JavaLangLong valueOfWithLongInt:[((JavaUtilCalendar *) nil_chk(calendar)) getTimeInMillis]];
  }
  @catch (JavaLangException *e) {
    @throw [[OrgOssPdfreporterUsesNetSourceforgeJevalFunctionFunctionException alloc] initWithNSString:@"Invalid argument." withJavaLangException:e];
  }
  return [[OrgOssPdfreporterUsesNetSourceforgeJevalFunctionFunctionResult alloc] initWithNSString:[((JavaLangLong *) nil_chk(date)) description] withInt:OrgOssPdfreporterUsesNetSourceforgeJevalFunctionFunctionConstants_FUNCTION_RESULT_TYPE_NUMERIC];
}

- (id)init {
  return [super init];
}

@end
