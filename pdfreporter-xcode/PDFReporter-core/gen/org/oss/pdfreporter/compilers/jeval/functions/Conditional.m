//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: pdfreporter-core/src/org/oss/pdfreporter/compilers/jeval/functions/Conditional.java
//
//  Created by kendra on 9/27/13.
//

#include "java/lang/Double.h"
#include "java/lang/Exception.h"
#include "org/oss/pdfreporter/compilers/jeval/ResultUtil.h"
#include "org/oss/pdfreporter/compilers/jeval/functions/Conditional.h"
#include "org/oss/pdfreporter/uses/net/sourceforge/jeval/ArgumentTokenizer.h"
#include "org/oss/pdfreporter/uses/net/sourceforge/jeval/EvaluationConstants.h"
#include "org/oss/pdfreporter/uses/net/sourceforge/jeval/Evaluator.h"
#include "org/oss/pdfreporter/uses/net/sourceforge/jeval/function/FunctionConstants.h"
#include "org/oss/pdfreporter/uses/net/sourceforge/jeval/function/FunctionException.h"
#include "org/oss/pdfreporter/uses/net/sourceforge/jeval/function/FunctionHelper.h"
#include "org/oss/pdfreporter/uses/net/sourceforge/jeval/function/FunctionResult.h"

@implementation OrgOssPdfreporterCompilersJevalFunctionsConditional

static JavaLangDouble * OrgOssPdfreporterCompilersJevalFunctionsConditional_TRUE__;

+ (JavaLangDouble *)getTRUE {
  return OrgOssPdfreporterCompilersJevalFunctionsConditional_TRUE__;
}

- (NSString *)getName {
  return @"ifelse";
}

- (OrgOssPdfreporterUsesNetSourceforgeJevalFunctionFunctionResult *)executeWithOrgOssPdfreporterUsesNetSourceforgeJevalEvaluator:(OrgOssPdfreporterUsesNetSourceforgeJevalEvaluator *)evaluator
                                                                                                                    withNSString:(NSString *)arguments {
  NSString *resultTrue = nil;
  NSString *resultFalse = nil;
  JavaLangDouble *expression = nil;
  @try {
    OrgOssPdfreporterUsesNetSourceforgeJevalArgumentTokenizer *tokenizer = [[OrgOssPdfreporterUsesNetSourceforgeJevalArgumentTokenizer alloc] initWithNSString:arguments withUnichar:OrgOssPdfreporterUsesNetSourceforgeJevalEvaluationConstants_FUNCTION_ARGUMENT_SEPARATOR];
    expression = [[JavaLangDouble alloc] initWithNSString:[((OrgOssPdfreporterUsesNetSourceforgeJevalArgumentTokenizer *) nil_chk(tokenizer)) nextToken]];
    resultTrue = [((OrgOssPdfreporterUsesNetSourceforgeJevalArgumentTokenizer *) nil_chk(tokenizer)) nextToken];
    resultFalse = [((OrgOssPdfreporterUsesNetSourceforgeJevalArgumentTokenizer *) nil_chk(tokenizer)) nextToken];
  }
  @catch (JavaLangException *e) {
    @throw [[OrgOssPdfreporterUsesNetSourceforgeJevalFunctionFunctionException alloc] initWithNSString:@"Invalid argument." withJavaLangException:e];
  }
  NSString *result = [((JavaLangDouble *) nil_chk(expression)) compareToWithId:OrgOssPdfreporterCompilersJevalFunctionsConditional_TRUE__] == 0 ? resultTrue : resultFalse;
  BOOL isResultString = [OrgOssPdfreporterCompilersJevalResultUtil isStringWithNSString:result withUnichar:[((OrgOssPdfreporterUsesNetSourceforgeJevalEvaluator *) nil_chk(evaluator)) getQuoteCharacter]];
  if (isResultString) {
    result = [OrgOssPdfreporterUsesNetSourceforgeJevalFunctionFunctionHelper trimAndRemoveQuoteCharsWithNSString:result withUnichar:[((OrgOssPdfreporterUsesNetSourceforgeJevalEvaluator *) nil_chk(evaluator)) getQuoteCharacter]];
  }
  return [[OrgOssPdfreporterUsesNetSourceforgeJevalFunctionFunctionResult alloc] initWithNSString:result withInt:isResultString ? OrgOssPdfreporterUsesNetSourceforgeJevalFunctionFunctionConstants_FUNCTION_RESULT_TYPE_STRING : OrgOssPdfreporterUsesNetSourceforgeJevalFunctionFunctionConstants_FUNCTION_RESULT_TYPE_NUMERIC];
}

- (id)init {
  return [super init];
}

+ (void)initialize {
  if (self == [OrgOssPdfreporterCompilersJevalFunctionsConditional class]) {
    OrgOssPdfreporterCompilersJevalFunctionsConditional_TRUE__ = [JavaLangDouble valueOfWithDouble:1.0];
  }
}

@end
