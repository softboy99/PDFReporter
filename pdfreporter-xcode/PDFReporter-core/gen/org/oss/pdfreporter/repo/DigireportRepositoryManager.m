//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: pdfreporter-core/src/org/oss/pdfreporter/repo/DigireportRepositoryManager.java
//
//  Created by kendra on 9/27/13.
//

#include "IOSClass.h"
#include "java/util/ArrayList.h"
#include "java/util/List.h"
#include "java/util/logging/Logger.h"
#include "org/oss/pdfreporter/repo/DigireportRepositoryManager.h"

@implementation OrgOssPdfreporterRepoDigireportRepositoryManager

static JavaUtilLoggingLogger * OrgOssPdfreporterRepoDigireportRepositoryManager_logger_;
static NSString * OrgOssPdfreporterRepoDigireportRepositoryManager_PATH_DELIMITER_ = @"/";
static OrgOssPdfreporterRepoDigireportRepositoryManager * OrgOssPdfreporterRepoDigireportRepositoryManager_INSTANCE_;
static NSString * OrgOssPdfreporterRepoDigireportRepositoryManager_DEFAULT_RESOURCE_FOLDER_ = @"./resource/";
static NSString * OrgOssPdfreporterRepoDigireportRepositoryManager_DEFAULT_REPORT_FOLDER_ = @"./data/";

@synthesize repositoryFolders = repositoryFolders_;

+ (JavaUtilLoggingLogger *)logger {
  return OrgOssPdfreporterRepoDigireportRepositoryManager_logger_;
}

+ (NSString *)PATH_DELIMITER {
  return OrgOssPdfreporterRepoDigireportRepositoryManager_PATH_DELIMITER_;
}

+ (OrgOssPdfreporterRepoDigireportRepositoryManager *)INSTANCE {
  return OrgOssPdfreporterRepoDigireportRepositoryManager_INSTANCE_;
}

+ (NSString *)DEFAULT_RESOURCE_FOLDER {
  return OrgOssPdfreporterRepoDigireportRepositoryManager_DEFAULT_RESOURCE_FOLDER_;
}

+ (NSString *)DEFAULT_REPORT_FOLDER {
  return OrgOssPdfreporterRepoDigireportRepositoryManager_DEFAULT_REPORT_FOLDER_;
}

- (id)init {
  if ((self = [super init])) {
    self.repositoryFolders = [[JavaUtilArrayList alloc] init];
    [self reset];
  }
  return self;
}

+ (OrgOssPdfreporterRepoDigireportRepositoryManager *)getInstance {
  return OrgOssPdfreporterRepoDigireportRepositoryManager_INSTANCE_;
}

- (id<JavaUtilList>)getRepositoryFolders {
  [self ensureDefaultFoldersSet];
  return repositoryFolders_;
}

- (void)setDefaultResourceFolderWithNSString:(NSString *)folder {
  (void) [((id<JavaUtilList>) nil_chk(repositoryFolders_)) setWithInt:0 withId:folder];
}

- (NSString *)getDefaultResourceFolder {
  return [((id<JavaUtilList>) nil_chk(repositoryFolders_)) getWithInt:0];
}

- (void)setDefaulReportFolderWithNSString:(NSString *)folder {
  (void) [((id<JavaUtilList>) nil_chk(repositoryFolders_)) setWithInt:1 withId:folder];
}

- (NSString *)getDefaulReportFolder {
  return [((id<JavaUtilList>) nil_chk(repositoryFolders_)) getWithInt:1];
}

- (void)addExtraReportFolderWithNSString:(NSString *)folder {
  if (folder != nil) {
    [((id<JavaUtilList>) nil_chk(repositoryFolders_)) addWithId:folder];
  }
}

- (void)reset {
  [((id<JavaUtilList>) nil_chk(repositoryFolders_)) clear];
  [((id<JavaUtilList>) nil_chk(repositoryFolders_)) addWithId:nil];
  [((id<JavaUtilList>) nil_chk(repositoryFolders_)) addWithId:nil];
}

- (void)ensureDefaultFoldersSet {
  if ([self getDefaultResourceFolder] == nil) {
    [((JavaUtilLoggingLogger *) nil_chk(OrgOssPdfreporterRepoDigireportRepositoryManager_logger_)) warningWithNSString:@"Set Resourcefolder to './resource/', you should call setDefaultResourceFolder()."];
    [self setDefaultResourceFolderWithNSString:OrgOssPdfreporterRepoDigireportRepositoryManager_DEFAULT_RESOURCE_FOLDER_];
  }
  if ([self getDefaulReportFolder] == nil) {
    [((JavaUtilLoggingLogger *) nil_chk(OrgOssPdfreporterRepoDigireportRepositoryManager_logger_)) warningWithNSString:@"Set Reportfolder to './data/', you should call setDefaulReportFolder()."];
    [self setDefaulReportFolderWithNSString:OrgOssPdfreporterRepoDigireportRepositoryManager_DEFAULT_REPORT_FOLDER_];
  }
}

- (NSString *)description {
  return [NSString stringWithFormat:@"DigireportRepositoryManager [repositoryFolders=%@]", repositoryFolders_];
}

+ (void)initialize {
  if (self == [OrgOssPdfreporterRepoDigireportRepositoryManager class]) {
    OrgOssPdfreporterRepoDigireportRepositoryManager_logger_ = [JavaUtilLoggingLogger getLoggerWithNSString:[[IOSClass classWithClass:[OrgOssPdfreporterRepoDigireportRepositoryManager class]] getName]];
    OrgOssPdfreporterRepoDigireportRepositoryManager_INSTANCE_ = [[OrgOssPdfreporterRepoDigireportRepositoryManager alloc] init];
  }
}

- (void)copyAllPropertiesTo:(id)copy {
  [super copyAllPropertiesTo:copy];
  OrgOssPdfreporterRepoDigireportRepositoryManager *typedCopy = (OrgOssPdfreporterRepoDigireportRepositoryManager *) copy;
  typedCopy.repositoryFolders = repositoryFolders_;
}

@end
