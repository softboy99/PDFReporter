//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: pdfreporter-core/src/org/oss/pdfreporter/repo/DigireportFileResourceLoader.java
//
//  Created by kendra on 9/27/13.
//

#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "java/io/File.h"
#include "java/io/FileNotFoundException.h"
#include "java/io/FilenameFilter.h"
#include "java/io/IOException.h"
#include "java/io/InputStream.h"
#include "java/util/ArrayList.h"
#include "java/util/Iterator.h"
#include "java/util/List.h"
#include "java/util/logging/Level.h"
#include "java/util/logging/Logger.h"
#include "org/oss/pdfreporter/net/FileResourceLoader.h"
#include "org/oss/pdfreporter/net/IURL.h"
#include "org/oss/pdfreporter/net/MalformedURLException.h"
#include "org/oss/pdfreporter/net/factory/INetFactory.h"
#include "org/oss/pdfreporter/registry/IRegistry.h"
#include "org/oss/pdfreporter/repo/DigireportFileResourceLoader.h"
#include "org/oss/pdfreporter/repo/DigireportRepositoryManager.h"
#include "org/oss/pdfreporter/repo/FileSystemResource.h"

@implementation OrgOssPdfreporterRepoDigireportFileResourceLoader

static JavaUtilLoggingLogger * OrgOssPdfreporterRepoDigireportFileResourceLoader_logger_;
static NSString * OrgOssPdfreporterRepoDigireportFileResourceLoader_URL_MATCH_ = @"^[a-z]+://.*";

+ (JavaUtilLoggingLogger *)logger {
  return OrgOssPdfreporterRepoDigireportFileResourceLoader_logger_;
}

+ (NSString *)URL_MATCH {
  return OrgOssPdfreporterRepoDigireportFileResourceLoader_URL_MATCH_;
}

+ (JavaIoInputStream *)getInputStreamWithNSString:(NSString *)resourceName {
  @try {
    id<OrgOssPdfreporterNetIURL> url = [OrgOssPdfreporterRepoDigireportFileResourceLoader getURLWithNSString:resourceName];
    return url == nil ? nil : [((id<OrgOssPdfreporterNetIURL>) nil_chk(url)) openStream];
  }
  @catch (JavaIoFileNotFoundException *e) {
    [((JavaUtilLoggingLogger *) nil_chk(OrgOssPdfreporterRepoDigireportFileResourceLoader_logger_)) logWithJavaUtilLoggingLevel:[JavaUtilLoggingLevel SEVERE] withNSString:[NSString stringWithFormat:@"Error loading resource: %@", resourceName] withJavaLangThrowable:e];
    return nil;
  }
  @catch (JavaIoIOException *e) {
    [((JavaUtilLoggingLogger *) nil_chk(OrgOssPdfreporterRepoDigireportFileResourceLoader_logger_)) logWithJavaUtilLoggingLevel:[JavaUtilLoggingLevel SEVERE] withNSString:[NSString stringWithFormat:@"Failed to open connection: %@", resourceName] withJavaLangThrowable:e];
    return nil;
  }
}

+ (id<OrgOssPdfreporterNetIURL>)getURLWithNSString:(NSString *)resourceName {
  @try {
    if ([((NSString *) nil_chk(resourceName)) matches:OrgOssPdfreporterRepoDigireportFileResourceLoader_URL_MATCH_]) {
      return [((id<OrgOssPdfreporterNetFactoryINetFactory>) nil_chk([OrgOssPdfreporterRegistryIRegistry getINetFactory])) newURLWithNSString:resourceName];
    }
    id<OrgOssPdfreporterNetIURL> url = [OrgOssPdfreporterRepoDigireportFileResourceLoader findFirstConfiguredFileResourceWithNSString:resourceName];
    return url == nil ? nil : url;
  }
  @catch (OrgOssPdfreporterNetMalformedURLException *e) {
    [((JavaUtilLoggingLogger *) nil_chk(OrgOssPdfreporterRepoDigireportFileResourceLoader_logger_)) logWithJavaUtilLoggingLevel:[JavaUtilLoggingLevel SEVERE] withNSString:[NSString stringWithFormat:@"Invalid URL: %@", resourceName] withJavaLangThrowable:e];
    return nil;
  }
}

+ (id<JavaUtilList>)getConfiguredFileResources {
  return [[OrgOssPdfreporterRepoDigireportFileResourceLoader_DelegatingUrlList alloc] initWithJavaUtilList:[OrgOssPdfreporterRepoDigireportFileResourceLoader findFilesWithJavaUtilList:[((OrgOssPdfreporterRepoDigireportRepositoryManager *) nil_chk([OrgOssPdfreporterRepoDigireportRepositoryManager getInstance])) getRepositoryFolders] withJavaIoFilenameFilter:[[OrgOssPdfreporterRepoDigireportFileResourceLoader_AccepptAll alloc] init] withBOOL:NO]];
}

+ (id<JavaUtilList>)findConfiguredFileResourcesWithNSString:(NSString *)resource {
  return [[OrgOssPdfreporterRepoDigireportFileResourceLoader_DelegatingUrlList alloc] initWithJavaUtilList:[OrgOssPdfreporterRepoDigireportFileResourceLoader findFilesWithJavaUtilList:[((OrgOssPdfreporterRepoDigireportRepositoryManager *) nil_chk([OrgOssPdfreporterRepoDigireportRepositoryManager getInstance])) getRepositoryFolders] withJavaIoFilenameFilter:[[OrgOssPdfreporterRepoDigireportFileResourceLoader_FileResourceFilter alloc] initWithNSString:resource] withBOOL:NO]];
}

+ (id<JavaUtilList>)findConfiguredFileSystemResourcesWithNSString:(NSString *)resource {
  return [[OrgOssPdfreporterRepoDigireportFileResourceLoader_DelegatingFileSystemResourceList alloc] initWithJavaUtilList:[OrgOssPdfreporterRepoDigireportFileResourceLoader findFilesWithJavaUtilList:[((OrgOssPdfreporterRepoDigireportRepositoryManager *) nil_chk([OrgOssPdfreporterRepoDigireportRepositoryManager getInstance])) getRepositoryFolders] withJavaIoFilenameFilter:[[OrgOssPdfreporterRepoDigireportFileResourceLoader_FileResourceFilter alloc] initWithNSString:resource] withBOOL:NO]];
}

+ (id<OrgOssPdfreporterNetIURL>)findFirstConfiguredFileResourceWithNSString:(NSString *)resource {
  id<JavaUtilList> files = [OrgOssPdfreporterRepoDigireportFileResourceLoader findFilesWithJavaUtilList:[((OrgOssPdfreporterRepoDigireportRepositoryManager *) nil_chk([OrgOssPdfreporterRepoDigireportRepositoryManager getInstance])) getRepositoryFolders] withJavaIoFilenameFilter:[[OrgOssPdfreporterRepoDigireportFileResourceLoader_FileResourceFilter alloc] initWithNSString:resource] withBOOL:YES];
  return [((id<JavaUtilList>) nil_chk(files)) isEmpty] ? nil : [[OrgOssPdfreporterNetFileResourceLoader alloc] initWithJavaIoFile:[((id<JavaUtilList>) nil_chk(files)) getWithInt:0]];
}

+ (id<JavaUtilList>)findFilesWithJavaUtilList:(id<JavaUtilList>)rootFolders
                     withJavaIoFilenameFilter:(id<JavaIoFilenameFilter>)filter
                                     withBOOL:(BOOL)onlyFirst {
  id<JavaUtilList> resultAll = [[JavaUtilArrayList alloc] init];
  {
    id<JavaUtilIterator> iter__ = [((id<JavaUtilList>) nil_chk(rootFolders)) iterator];
    while ([((id<JavaUtilIterator>) nil_chk(iter__)) hasNext]) {
      NSString *folder = [((id<JavaUtilIterator>) nil_chk(iter__)) next];
      id<JavaUtilList> result = [OrgOssPdfreporterRepoDigireportFileResourceLoader findFilesWithJavaIoFile:[[JavaIoFile alloc] initWithNSString:folder] withJavaIoFilenameFilter:filter withBOOL:onlyFirst];
      if (![((id<JavaUtilList>) nil_chk(result)) isEmpty] && onlyFirst) {
        [((id<JavaUtilList>) nil_chk(resultAll)) addWithId:[((id<JavaUtilList>) nil_chk(result)) getWithInt:0]];
        break;
      }
      [((id<JavaUtilList>) nil_chk(resultAll)) addAllWithJavaUtilCollection:result];
    }
  }
  [((JavaUtilLoggingLogger *) nil_chk(OrgOssPdfreporterRepoDigireportFileResourceLoader_logger_)) finestWithNSString:[NSString stringWithFormat:@"find resource: %@ in %@, found: %@", filter, [((id<JavaUtilList>) nil_chk(rootFolders)) description], [((id<JavaUtilList>) nil_chk(resultAll)) description]]];
  return resultAll;
}

+ (id<JavaUtilList>)findFilesWithJavaIoFile:(JavaIoFile *)folder
                   withJavaIoFilenameFilter:(id<JavaIoFilenameFilter>)filter
                                   withBOOL:(BOOL)onlyFirst {
  id<JavaUtilList> resources = [[JavaUtilArrayList alloc] init];
  if ([((JavaIoFile *) nil_chk(folder)) exists]) {
    {
      IOSObjectArray *a__ = [((JavaIoFile *) nil_chk(folder)) listFiles];
      int n__ = (int) [((IOSObjectArray *) nil_chk(a__)) count];
      for (int i__ = 0; i__ < n__; i__++) {
        JavaIoFile *f = [((IOSObjectArray *) nil_chk(a__)) objectAtIndex:i__];
        if ([((JavaIoFile *) nil_chk(f)) isFile]) {
          if ([((id<JavaIoFilenameFilter>) nil_chk(filter)) acceptWithJavaIoFile:folder withNSString:[((JavaIoFile *) nil_chk(f)) getName]]) {
            [((id<JavaUtilList>) nil_chk(resources)) addWithId:f];
          }
        }
        else {
          [((id<JavaUtilList>) nil_chk(resources)) addAllWithJavaUtilCollection:[OrgOssPdfreporterRepoDigireportFileResourceLoader findFilesWithJavaIoFile:f withJavaIoFilenameFilter:filter withBOOL:onlyFirst]];
        }
        if (onlyFirst && ![((id<JavaUtilList>) nil_chk(resources)) isEmpty]) {
          break;
        }
      }
    }
  }
  else {
    [((JavaUtilLoggingLogger *) nil_chk(OrgOssPdfreporterRepoDigireportFileResourceLoader_logger_)) warningWithNSString:[NSString stringWithFormat:@"Resource folder: %@ does not exist.", [((JavaIoFile *) nil_chk(folder)) getName]]];
  }
  return resources;
}

- (id)init {
  return [super init];
}

+ (void)initialize {
  if (self == [OrgOssPdfreporterRepoDigireportFileResourceLoader class]) {
    OrgOssPdfreporterRepoDigireportFileResourceLoader_logger_ = [JavaUtilLoggingLogger getLoggerWithNSString:[[IOSClass classWithClass:[OrgOssPdfreporterRepoDigireportFileResourceLoader class]] getName]];
  }
}

@end
@implementation OrgOssPdfreporterRepoDigireportFileResourceLoader_FileResourceFilter

@synthesize path = path_;
@synthesize file = file_;

- (id)initWithNSString:(NSString *)resource {
  if ((self = [super init])) {
    int idx = [((NSString *) nil_chk(resource)) lastIndexOfString:[OrgOssPdfreporterRepoDigireportRepositoryManager PATH_DELIMITER]];
    if (idx >= 0) {
      file_ = [((NSString *) nil_chk(resource)) substring:idx + 1];
      path_ = [((NSString *) nil_chk(resource)) substring:0 endIndex:idx];
    }
    else {
      file_ = resource;
      path_ = nil;
    }
  }
  return self;
}

- (BOOL)acceptWithJavaIoFile:(JavaIoFile *)dir
                withNSString:(NSString *)name {
  return path_ == nil ? [((NSString *) nil_chk(name)) isEqual:file_] : [((NSString *) nil_chk([((JavaIoFile *) nil_chk(dir)) getPath])) hasSuffix:path_] && [((NSString *) nil_chk(name)) isEqual:file_];
}

- (NSString *)description {
  return (path_ == nil ? file_ : [NSString stringWithFormat:@"%@/%@", path_, file_]);
}

- (void)copyAllPropertiesTo:(id)copy {
  [super copyAllPropertiesTo:copy];
  OrgOssPdfreporterRepoDigireportFileResourceLoader_FileResourceFilter *typedCopy = (OrgOssPdfreporterRepoDigireportFileResourceLoader_FileResourceFilter *) copy;
  typedCopy.path = path_;
  typedCopy.file = file_;
}

@end
@implementation OrgOssPdfreporterRepoDigireportFileResourceLoader_AccepptAll

- (BOOL)acceptWithJavaIoFile:(JavaIoFile *)dir
                withNSString:(NSString *)name {
  return YES;
}

- (NSString *)description {
  return @"*.*";
}

- (id)init {
  return [super init];
}

@end
@implementation OrgOssPdfreporterRepoDigireportFileResourceLoader_DelegatingUrlList

@synthesize delegate = delegate_;

- (id)initWithJavaUtilList:(id<JavaUtilList>)delegate {
  if ((self = [super init])) {
    self.delegate = delegate;
  }
  return self;
}

- (id<OrgOssPdfreporterNetIURL>)getWithInt:(int)index {
  return [[OrgOssPdfreporterNetFileResourceLoader alloc] initWithJavaIoFile:[((id<JavaUtilList>) nil_chk(delegate_)) getWithInt:index]];
}

- (int)size {
  return [((id<JavaUtilList>) nil_chk(delegate_)) size];
}

- (void)copyAllPropertiesTo:(id)copy {
  [super copyAllPropertiesTo:copy];
  OrgOssPdfreporterRepoDigireportFileResourceLoader_DelegatingUrlList *typedCopy = (OrgOssPdfreporterRepoDigireportFileResourceLoader_DelegatingUrlList *) copy;
  typedCopy.delegate = delegate_;
}

@end
@implementation OrgOssPdfreporterRepoDigireportFileResourceLoader_DelegatingFileSystemResourceList

@synthesize delegate = delegate_;

- (id)initWithJavaUtilList:(id<JavaUtilList>)delegate {
  if ((self = [super init])) {
    self.delegate = delegate;
  }
  return self;
}

- (OrgOssPdfreporterRepoFileSystemResource *)getWithInt:(int)index {
  return [[OrgOssPdfreporterRepoFileSystemResource alloc] initWithJavaIoFile:[((id<JavaUtilList>) nil_chk(delegate_)) getWithInt:index]];
}

- (int)size {
  return [((id<JavaUtilList>) nil_chk(delegate_)) size];
}

- (void)copyAllPropertiesTo:(id)copy {
  [super copyAllPropertiesTo:copy];
  OrgOssPdfreporterRepoDigireportFileResourceLoader_DelegatingFileSystemResourceList *typedCopy = (OrgOssPdfreporterRepoDigireportFileResourceLoader_DelegatingFileSystemResourceList *) copy;
  typedCopy.delegate = delegate_;
}

@end
