//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: pdfreporter-core/src/org/oss/pdfreporter/repo/RepositoryUtil.java
//
//  Created by kendra on 9/27/13.
//

#include "IOSByteArray.h"
#include "IOSClass.h"
#include "java/io/ByteArrayOutputStream.h"
#include "java/io/IOException.h"
#include "java/io/InputStream.h"
#include "java/util/Iterator.h"
#include "java/util/List.h"
#include "org/oss/pdfreporter/engine/DefaultJasperReportsContext.h"
#include "org/oss/pdfreporter/engine/JRException.h"
#include "org/oss/pdfreporter/engine/JasperReport.h"
#include "org/oss/pdfreporter/engine/JasperReportsContext.h"
#include "org/oss/pdfreporter/engine/ReportContext.h"
#include "org/oss/pdfreporter/repo/DigireportFileResourceLoader.h"
#include "org/oss/pdfreporter/repo/JasperDesignCache.h"
#include "org/oss/pdfreporter/repo/ReportResource.h"
#include "org/oss/pdfreporter/repo/RepositoryService.h"
#include "org/oss/pdfreporter/repo/RepositoryUtil.h"
#include "org/oss/pdfreporter/repo/Resource.h"

@implementation OrgOssPdfreporterRepoRepositoryUtil

@synthesize jasperReportsContext = jasperReportsContext_;

- (id)initWithOrgOssPdfreporterEngineJasperReportsContext:(id<OrgOssPdfreporterEngineJasperReportsContext>)jasperReportsContext {
  if ((self = [super init])) {
    self.jasperReportsContext = jasperReportsContext;
  }
  return self;
}

+ (OrgOssPdfreporterRepoRepositoryUtil *)getDefaultInstance {
  return [[OrgOssPdfreporterRepoRepositoryUtil alloc] initWithOrgOssPdfreporterEngineJasperReportsContext:[OrgOssPdfreporterEngineDefaultJasperReportsContext getInstance]];
}

+ (OrgOssPdfreporterRepoRepositoryUtil *)getInstanceWithOrgOssPdfreporterEngineJasperReportsContext:(id<OrgOssPdfreporterEngineJasperReportsContext>)jasperReportsContext {
  return [[OrgOssPdfreporterRepoRepositoryUtil alloc] initWithOrgOssPdfreporterEngineJasperReportsContext:jasperReportsContext];
}

- (id<JavaUtilList>)getServices {
  return [((id<OrgOssPdfreporterEngineJasperReportsContext>) nil_chk(jasperReportsContext_)) getExtensionsWithIOSClass:[IOSClass classWithProtocol:@protocol(OrgOssPdfreporterRepoRepositoryService)]];
}

+ (id<JavaUtilList>)getRepositoryServices {
  return [((OrgOssPdfreporterRepoRepositoryUtil *) nil_chk([OrgOssPdfreporterRepoRepositoryUtil getDefaultInstance])) getServices];
}

- (OrgOssPdfreporterEngineJasperReport *)getReportWithOrgOssPdfreporterEngineReportContext:(id<OrgOssPdfreporterEngineReportContext>)reportContext
                                                                              withNSString:(NSString *)location {
  OrgOssPdfreporterEngineJasperReport *jasperReport = nil;
  OrgOssPdfreporterRepoJasperDesignCache *cache = [OrgOssPdfreporterRepoJasperDesignCache getInstanceWithOrgOssPdfreporterEngineJasperReportsContext:jasperReportsContext_ withOrgOssPdfreporterEngineReportContext:reportContext];
  if (cache != nil) {
    jasperReport = [cache getJasperReportWithNSString:location];
  }
  if (jasperReport == nil) {
    OrgOssPdfreporterRepoReportResource *resource = [self getResourceFromLocationWithNSString:location withIOSClass:[IOSClass classWithClass:[OrgOssPdfreporterRepoReportResource class]]];
    if (resource == nil) {
      @throw [[OrgOssPdfreporterEngineJRException alloc] initWithNSString:[NSString stringWithFormat:@"Report not found at : %@", location]];
    }
    jasperReport = [((OrgOssPdfreporterRepoReportResource *) nil_chk(resource)) getReport];
    if (cache != nil) {
      [cache setWithNSString:location withOrgOssPdfreporterEngineJasperReport:jasperReport];
    }
  }
  return jasperReport;
}

- (id)getResourceFromLocationWithNSString:(NSString *)location
                             withIOSClass:(IOSClass *)resourceType {
  id<OrgOssPdfreporterRepoResource> resource = nil;
  id<JavaUtilList> services = [self getServices];
  if (services != nil) {
    {
      id<JavaUtilIterator> iter__ = [services iterator];
      while ([((id<JavaUtilIterator>) nil_chk(iter__)) hasNext]) {
        id<OrgOssPdfreporterRepoRepositoryService> service = [((id<JavaUtilIterator>) nil_chk(iter__)) next];
        resource = [((id<OrgOssPdfreporterRepoRepositoryService>) nil_chk(service)) getResourceWithNSString:location withIOSClass:resourceType];
        if (resource != nil) {
          break;
        }
      }
    }
  }
  if (resource == nil) {
    @throw [[OrgOssPdfreporterEngineJRException alloc] initWithNSString:[NSString stringWithFormat:@"Resource not found at : %@", location]];
  }
  return resource;
}

+ (id)getResourceWithNSString:(NSString *)location
                 withIOSClass:(IOSClass *)resourceType {
  return [((OrgOssPdfreporterRepoRepositoryUtil *) nil_chk([OrgOssPdfreporterRepoRepositoryUtil getDefaultInstance])) getResourceFromLocationWithNSString:location withIOSClass:resourceType];
}

- (JavaIoInputStream *)getInputStreamFromLocationWithNSString:(NSString *)location {
  JavaIoInputStream *is = [self findInputStreamWithNSString:location];
  if (is == nil) {
    @throw [[OrgOssPdfreporterEngineJRException alloc] initWithNSString:[NSString stringWithFormat:@"Input stream not found at : %@", location]];
  }
  return is;
}

+ (JavaIoInputStream *)getInputStreamWithNSString:(NSString *)location {
  return [((OrgOssPdfreporterRepoRepositoryUtil *) nil_chk([OrgOssPdfreporterRepoRepositoryUtil getDefaultInstance])) getInputStreamFromLocationWithNSString:location];
}

- (JavaIoInputStream *)findInputStreamWithNSString:(NSString *)location {
  return [OrgOssPdfreporterRepoDigireportFileResourceLoader getInputStreamWithNSString:location];
}

- (IOSByteArray *)getBytesFromLocationWithNSString:(NSString *)location {
  JavaIoInputStream *is = [self findInputStreamWithNSString:location];
  if (is == nil) {
    @throw [[OrgOssPdfreporterEngineJRException alloc] initWithNSString:[NSString stringWithFormat:@"Byte data not found at : %@", location]];
  }
  JavaIoByteArrayOutputStream *baos = nil;
  @try {
    baos = [[JavaIoByteArrayOutputStream alloc] init];
    IOSByteArray *bytes = [IOSByteArray arrayWithLength:10000];
    int ln = 0;
    while ((ln = [((JavaIoInputStream *) nil_chk(is)) readWithByteArray:bytes]) > 0) {
      [((JavaIoByteArrayOutputStream *) nil_chk(baos)) writeWithByteArray:bytes withInt:0 withInt:ln];
    }
    [((JavaIoByteArrayOutputStream *) nil_chk(baos)) flush];
  }
  @catch (JavaIoIOException *e) {
    @throw [[OrgOssPdfreporterEngineJRException alloc] initWithNSString:[NSString stringWithFormat:@"Error loading byte data from : %@", location] withJavaLangThrowable:e];
  }
  @finally {
    if (baos != nil) {
      @try {
        [baos close];
      }
      @catch (JavaIoIOException *e) {
      }
    }
    if (is != nil) {
      @try {
        [is close];
      }
      @catch (JavaIoIOException *e) {
      }
    }
  }
  return [((JavaIoByteArrayOutputStream *) nil_chk(baos)) toByteArray];
}

+ (IOSByteArray *)getBytesWithNSString:(NSString *)location {
  return [((OrgOssPdfreporterRepoRepositoryUtil *) nil_chk([OrgOssPdfreporterRepoRepositoryUtil getDefaultInstance])) getBytesFromLocationWithNSString:location];
}

- (void)copyAllPropertiesTo:(id)copy {
  [super copyAllPropertiesTo:copy];
  OrgOssPdfreporterRepoRepositoryUtil *typedCopy = (OrgOssPdfreporterRepoRepositoryUtil *) copy;
  typedCopy.jasperReportsContext = jasperReportsContext_;
}

@end
