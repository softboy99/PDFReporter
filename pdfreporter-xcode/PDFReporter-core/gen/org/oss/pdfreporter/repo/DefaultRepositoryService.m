//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: pdfreporter-core/src/org/oss/pdfreporter/repo/DefaultRepositoryService.java
//
//  Created by kendra on 9/27/13.
//

#include "IOSClass.h"
#include "java/io/File.h"
#include "java/io/InputStream.h"
#include "java/io/OutputStream.h"
#include "java/lang/ClassLoader.h"
#include "java/lang/UnsupportedOperationException.h"
#include "org/oss/pdfreporter/engine/DefaultJasperReportsContext.h"
#include "org/oss/pdfreporter/engine/JRException.h"
#include "org/oss/pdfreporter/engine/JRRuntimeException.h"
#include "org/oss/pdfreporter/engine/JasperReportsContext.h"
#include "org/oss/pdfreporter/engine/util/FileResolver.h"
#include "org/oss/pdfreporter/engine/util/JRLoader.h"
#include "org/oss/pdfreporter/engine/util/JRResourcesUtil.h"
#include "org/oss/pdfreporter/net/IURL.h"
#include "org/oss/pdfreporter/repo/DefaultRepositoryService.h"
#include "org/oss/pdfreporter/repo/DigireportFileResourceLoader.h"
#include "org/oss/pdfreporter/repo/PersistenceService.h"
#include "org/oss/pdfreporter/repo/PersistenceUtil.h"
#include "org/oss/pdfreporter/repo/RepositoryContext.h"
#include "org/oss/pdfreporter/repo/Resource.h"

@implementation OrgOssPdfreporterRepoDefaultRepositoryService

@synthesize jasperReportsContext = jasperReportsContext_;
@synthesize classLoader = classLoader_;
@synthesize fileResolver = fileResolver_;

- (id)init {
  return [self initOrgOssPdfreporterRepoDefaultRepositoryServiceWithOrgOssPdfreporterEngineJasperReportsContext:[OrgOssPdfreporterEngineDefaultJasperReportsContext getInstance]];
}

- (id)initOrgOssPdfreporterRepoDefaultRepositoryServiceWithOrgOssPdfreporterEngineJasperReportsContext:(id<OrgOssPdfreporterEngineJasperReportsContext>)jasperReportsContext {
  if ((self = [super init])) {
    self.jasperReportsContext = jasperReportsContext;
  }
  return self;
}

- (id)initWithOrgOssPdfreporterEngineJasperReportsContext:(id<OrgOssPdfreporterEngineJasperReportsContext>)jasperReportsContext {
  return [self initOrgOssPdfreporterRepoDefaultRepositoryServiceWithOrgOssPdfreporterEngineJasperReportsContext:jasperReportsContext];
}

- (void)setClassLoaderWithJavaLangClassLoader:(JavaLangClassLoader *)classLoader {
  self.classLoader = classLoader;
}

- (void)setFileResolverWithOrgOssPdfreporterEngineUtilFileResolver:(id<OrgOssPdfreporterEngineUtilFileResolver>)fileResolver {
  self.fileResolver = fileResolver;
}

- (id<OrgOssPdfreporterEngineUtilFileResolver>)getFileResolver {
  return fileResolver_;
}

- (void)setContextWithOrgOssPdfreporterRepoRepositoryContext:(id<OrgOssPdfreporterRepoRepositoryContext>)context {
}

- (void)revertContext {
}

- (JavaIoInputStream *)getInputStreamWithNSString:(NSString *)uri {
  @try {
    id<OrgOssPdfreporterNetIURL> url = [OrgOssPdfreporterEngineUtilJRResourcesUtil createURLWithNSString:uri];
    if (url != nil) {
      return [OrgOssPdfreporterEngineUtilJRLoader getInputStreamWithOrgOssPdfreporterNetIURL:url];
    }
    JavaIoFile *file = [OrgOssPdfreporterEngineUtilJRResourcesUtil resolveFileWithNSString:uri withOrgOssPdfreporterEngineUtilFileResolver:fileResolver_];
    if (file != nil) {
      return [OrgOssPdfreporterEngineUtilJRLoader getInputStreamWithJavaIoFile:file];
    }
    url = [OrgOssPdfreporterRepoDigireportFileResourceLoader getURLWithNSString:uri];
    if (url != nil) {
      return [OrgOssPdfreporterEngineUtilJRLoader getInputStreamWithOrgOssPdfreporterNetIURL:url];
    }
  }
  @catch (OrgOssPdfreporterEngineJRException *e) {
    @throw [[OrgOssPdfreporterEngineJRRuntimeException alloc] initWithJavaLangThrowable:e];
  }
  return nil;
}

- (JavaIoOutputStream *)getOutputStreamWithNSString:(NSString *)uri {
  @throw [[JavaLangUnsupportedOperationException alloc] init];
}

- (id<OrgOssPdfreporterRepoResource>)getResourceWithNSString:(NSString *)uri {
  @throw [[OrgOssPdfreporterEngineJRRuntimeException alloc] initWithNSString:@"Not implemented."];
}

- (void)saveResourceWithNSString:(NSString *)uri
withOrgOssPdfreporterRepoResource:(id<OrgOssPdfreporterRepoResource>)resource {
  @throw [[JavaLangUnsupportedOperationException alloc] init];
}

- (id)getResourceWithNSString:(NSString *)uri
                 withIOSClass:(IOSClass *)resourceType {
  id<OrgOssPdfreporterRepoPersistenceService> persistenceService = [((OrgOssPdfreporterRepoPersistenceUtil *) nil_chk([OrgOssPdfreporterRepoPersistenceUtil getInstanceWithOrgOssPdfreporterEngineJasperReportsContext:jasperReportsContext_])) getServiceWithIOSClass:[IOSClass classWithClass:[OrgOssPdfreporterRepoDefaultRepositoryService class]] withIOSClass:resourceType];
  if (persistenceService != nil) {
    return (id<OrgOssPdfreporterRepoResource>) [persistenceService load__WithNSString:uri withOrgOssPdfreporterRepoRepositoryService:self];
  }
  return nil;
}

- (void)copyAllPropertiesTo:(id)copy {
  [super copyAllPropertiesTo:copy];
  OrgOssPdfreporterRepoDefaultRepositoryService *typedCopy = (OrgOssPdfreporterRepoDefaultRepositoryService *) copy;
  typedCopy.jasperReportsContext = jasperReportsContext_;
  typedCopy.classLoader = classLoader_;
  typedCopy.fileResolver = fileResolver_;
}

@end
