//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: pdfreporter-core/src/org/oss/pdfreporter/text/Paragraph.java
//
//  Created by kendra on 9/27/13.
//

#include "java/lang/IllegalArgumentException.h"
#include "java/lang/Integer.h"
#include "java/lang/StringBuilder.h"
#include "java/lang/UnsupportedOperationException.h"
#include "java/util/ArrayList.h"
#include "java/util/HashMap.h"
#include "java/util/Iterator.h"
#include "java/util/List.h"
#include "java/util/Map.h"
#include "org/oss/pdfreporter/text/Paragraph.h"
#include "org/oss/pdfreporter/text/ParagraphText.h"

@implementation OrgOssPdfreporterTextParagraph

@synthesize textList = textList_;
@synthesize beginPosMap = beginPosMap_;
@synthesize lastBeginPos = lastBeginPos_;

- (id)initOrgOssPdfreporterTextParagraph {
  if ((self = [super init])) {
    self.textList = [[JavaUtilArrayList alloc] init];
    self.beginPosMap = [[JavaUtilHashMap alloc] init];
    self.lastBeginPos = 0;
  }
  return self;
}

- (id)init {
  return [self initOrgOssPdfreporterTextParagraph];
}

- (id)initWithJavaUtilList:(id<JavaUtilList>)textList {
  if ((self = [self initOrgOssPdfreporterTextParagraph])) {
    [self addAllWithJavaUtilList:textList];
  }
  return self;
}

- (void)addWithOrgOssPdfreporterTextParagraphText:(OrgOssPdfreporterTextParagraphText *)text {
  [((id<JavaUtilList>) nil_chk(self.textList)) addWithId:text];
  (void) [((id<JavaUtilMap>) nil_chk(self.beginPosMap)) putWithId:[[JavaLangInteger alloc] initWithInt:lastBeginPos_] withId:text];
  self.lastBeginPos += [((OrgOssPdfreporterTextParagraphText *) nil_chk(text)) getLength];
}

- (void)addAllWithJavaUtilList:(id<JavaUtilList>)all {
  {
    id<JavaUtilIterator> iter__ = [((id<JavaUtilList>) nil_chk(all)) iterator];
    while ([((id<JavaUtilIterator>) nil_chk(iter__)) hasNext]) {
      OrgOssPdfreporterTextParagraphText *text = [((id<JavaUtilIterator>) nil_chk(iter__)) next];
      [self addWithOrgOssPdfreporterTextParagraphText:text];
    }
  }
}

- (id<JavaUtilIterator>)iterator {
  return [[OrgOssPdfreporterTextParagraph_SplitableIterator alloc] initWithJavaUtilList:textList_];
}

- (OrgOssPdfreporterTextParagraph *)subParagraphWithInt:(int)beginIndex
                                                withInt:(int)endIndex {
  if (beginIndex < 0 || endIndex < 0) {
    @throw [[JavaLangIllegalArgumentException alloc] initWithNSString:@"Index cannot be before first paragraph text."];
  }
  if (endIndex < beginIndex) {
    @throw [[JavaLangIllegalArgumentException alloc] initWithNSString:@"End starts before begin index."];
  }
  OrgOssPdfreporterTextParagraph *subParagraph = [[OrgOssPdfreporterTextParagraph alloc] init];
  int start = 0;
  {
    id<JavaUtilIterator> iter__ = [((id<JavaUtilList>) nil_chk(textList_)) iterator];
    while ([((id<JavaUtilIterator>) nil_chk(iter__)) hasNext]) {
      OrgOssPdfreporterTextParagraphText *text = [((id<JavaUtilIterator>) nil_chk(iter__)) next];
      int end = start + [((OrgOssPdfreporterTextParagraphText *) nil_chk(text)) getLength];
      if (beginIndex >= start && beginIndex < end) {
        if (endIndex > start && endIndex <= end) {
          [((OrgOssPdfreporterTextParagraph *) nil_chk(subParagraph)) addWithOrgOssPdfreporterTextParagraphText:[[OrgOssPdfreporterTextParagraphText alloc] initWithNSString:[((NSString *) nil_chk([((OrgOssPdfreporterTextParagraphText *) nil_chk(text)) getText])) substring:beginIndex - start endIndex:endIndex - start] withOrgOssPdfreporterTextParagraphText:text]];
          return subParagraph;
        }
        if (beginIndex == start) {
          [((OrgOssPdfreporterTextParagraph *) nil_chk(subParagraph)) addWithOrgOssPdfreporterTextParagraphText:text];
        }
        else {
          [((OrgOssPdfreporterTextParagraph *) nil_chk(subParagraph)) addWithOrgOssPdfreporterTextParagraphText:[[OrgOssPdfreporterTextParagraphText alloc] initWithNSString:[((NSString *) nil_chk([((OrgOssPdfreporterTextParagraphText *) nil_chk(text)) getText])) substring:beginIndex - start] withOrgOssPdfreporterTextParagraphText:text]];
        }
      }
      if (beginIndex < start && endIndex > end) {
        [((OrgOssPdfreporterTextParagraph *) nil_chk(subParagraph)) addWithOrgOssPdfreporterTextParagraphText:text];
      }
      if (endIndex > start && endIndex <= end) {
        if (endIndex == start) {
          [((OrgOssPdfreporterTextParagraph *) nil_chk(subParagraph)) addWithOrgOssPdfreporterTextParagraphText:text];
        }
        else {
          [((OrgOssPdfreporterTextParagraph *) nil_chk(subParagraph)) addWithOrgOssPdfreporterTextParagraphText:[[OrgOssPdfreporterTextParagraphText alloc] initWithNSString:[((NSString *) nil_chk([((OrgOssPdfreporterTextParagraphText *) nil_chk(text)) getText])) substring:0 endIndex:endIndex - start] withOrgOssPdfreporterTextParagraphText:text]];
        }
        return subParagraph;
      }
      start = end;
    }
  }
  @throw [[JavaLangIllegalArgumentException alloc] initWithNSString:@"Index cannot be past last paragraph text."];
}

- (OrgOssPdfreporterTextParagraph *)subParagraphWithInt:(int)beginIndex {
  if (beginIndex < 0) {
    @throw [[JavaLangIllegalArgumentException alloc] initWithNSString:@"Index cannot be before first paragraph text."];
  }
  OrgOssPdfreporterTextParagraph *subParagraph = [[OrgOssPdfreporterTextParagraph alloc] init];
  int start = 0;
  int index = 0;
  {
    id<JavaUtilIterator> iter__ = [((id<JavaUtilList>) nil_chk(textList_)) iterator];
    while ([((id<JavaUtilIterator>) nil_chk(iter__)) hasNext]) {
      OrgOssPdfreporterTextParagraphText *text = [((id<JavaUtilIterator>) nil_chk(iter__)) next];
      int end = start + [((OrgOssPdfreporterTextParagraphText *) nil_chk(text)) getLength];
      if (beginIndex >= start && beginIndex < end) {
        if (beginIndex == start) {
          [((OrgOssPdfreporterTextParagraph *) nil_chk(subParagraph)) addAllWithJavaUtilList:[((id<JavaUtilList>) nil_chk(textList_)) subListWithInt:index withInt:[((id<JavaUtilList>) nil_chk(textList_)) size]]];
        }
        else {
          [((OrgOssPdfreporterTextParagraph *) nil_chk(subParagraph)) addWithOrgOssPdfreporterTextParagraphText:[[OrgOssPdfreporterTextParagraphText alloc] initWithNSString:[((NSString *) nil_chk([((OrgOssPdfreporterTextParagraphText *) nil_chk(text)) getText])) substring:beginIndex - start] withOrgOssPdfreporterTextParagraphText:text]];
          [((OrgOssPdfreporterTextParagraph *) nil_chk(subParagraph)) addAllWithJavaUtilList:[((id<JavaUtilList>) nil_chk(textList_)) subListWithInt:index + 1 withInt:[((id<JavaUtilList>) nil_chk(textList_)) size]]];
        }
        return subParagraph;
      }
      start = end;
      index++;
    }
  }
  @throw [[JavaLangIllegalArgumentException alloc] initWithNSString:@"Index cannot be past last paragraph text."];
}

- (NSString *)getText {
  JavaLangStringBuilder *builder = [[JavaLangStringBuilder alloc] init];
  {
    id<JavaUtilIterator> iter__ = [((id<JavaUtilList>) nil_chk(textList_)) iterator];
    while ([((id<JavaUtilIterator>) nil_chk(iter__)) hasNext]) {
      OrgOssPdfreporterTextParagraphText *text = [((id<JavaUtilIterator>) nil_chk(iter__)) next];
      (void) [((JavaLangStringBuilder *) nil_chk(builder)) appendWithNSString:[((OrgOssPdfreporterTextParagraphText *) nil_chk(text)) getText]];
    }
  }
  return [((JavaLangStringBuilder *) nil_chk(builder)) description];
}

- (OrgOssPdfreporterTextParagraphText *)getFirstParagraphText {
  return [((id<JavaUtilList>) nil_chk(textList_)) isEmpty] ? nil : [((id<JavaUtilList>) nil_chk(textList_)) getWithInt:0];
}

- (OrgOssPdfreporterTextParagraphText *)getLastParagraphText {
  return [((id<JavaUtilList>) nil_chk(textList_)) isEmpty] ? nil : [((id<JavaUtilList>) nil_chk(textList_)) getWithInt:[((id<JavaUtilList>) nil_chk(textList_)) size] - 1];
}

- (void)copyAllPropertiesTo:(id)copy {
  [super copyAllPropertiesTo:copy];
  OrgOssPdfreporterTextParagraph *typedCopy = (OrgOssPdfreporterTextParagraph *) copy;
  typedCopy.textList = textList_;
  typedCopy.beginPosMap = beginPosMap_;
  typedCopy.lastBeginPos = lastBeginPos_;
}

@end
@implementation OrgOssPdfreporterTextParagraph_SplitableIterator

@synthesize textList = textList_;
@synthesize index = index_;

- (id)initWithJavaUtilList:(id<JavaUtilList>)original {
  if ((self = [super init])) {
    index_ = 0;
    self.textList = [[JavaUtilArrayList alloc] initWithJavaUtilCollection:original];
  }
  return self;
}

- (BOOL)hasNext {
  return index_ < [((id<JavaUtilList>) nil_chk(textList_)) size];
}

- (OrgOssPdfreporterTextParagraphText *)next {
  OrgOssPdfreporterTextParagraphText *current = [((id<JavaUtilList>) nil_chk(textList_)) getWithInt:index_++];
  [((OrgOssPdfreporterTextParagraphText *) nil_chk(current)) setSplitListenerWithOrgOssPdfreporterTextISplitListener:self];
  return current;
}

- (void)remove {
  @throw [[JavaLangUnsupportedOperationException alloc] init];
}

- (void)splitWithId:(OrgOssPdfreporterTextParagraphText *)before
             withId:(OrgOssPdfreporterTextParagraphText *)left
             withId:(OrgOssPdfreporterTextParagraphText *)right {
  int oldIndex = [((id<JavaUtilList>) nil_chk(textList_)) indexOfWithId:before];
  (void) [((id<JavaUtilList>) nil_chk(textList_)) setWithInt:oldIndex withId:left];
  [((id<JavaUtilList>) nil_chk(textList_)) addWithInt:oldIndex + 1 withId:right];
}

- (void)copyAllPropertiesTo:(id)copy {
  [super copyAllPropertiesTo:copy];
  OrgOssPdfreporterTextParagraph_SplitableIterator *typedCopy = (OrgOssPdfreporterTextParagraph_SplitableIterator *) copy;
  typedCopy.textList = textList_;
  typedCopy.index = index_;
}

@end
