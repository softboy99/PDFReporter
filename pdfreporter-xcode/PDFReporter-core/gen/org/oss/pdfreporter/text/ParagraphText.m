//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: pdfreporter-core/src/org/oss/pdfreporter/text/ParagraphText.java
//
//  Created by kendra on 9/27/13.
//

#include "java/lang/Float.h"
#include "org/oss/pdfreporter/font/IFont.h"
#include "org/oss/pdfreporter/font/IFontMetric.h"
#include "org/oss/pdfreporter/geometry/IColor.h"
#include "org/oss/pdfreporter/text/IPositionedLine.h"
#include "org/oss/pdfreporter/text/ISplitListener.h"
#include "org/oss/pdfreporter/text/ParagraphText.h"
#include "org/oss/pdfreporter/text/ScaledLine.h"

@implementation OrgOssPdfreporterTextParagraphText

@synthesize text = text_;
@synthesize font = font_;
@synthesize foreground = foreground_;
@synthesize background = background_;
@synthesize line = line_;
@synthesize listener = listener_;
@synthesize width = width_;

- (id)initOrgOssPdfreporterTextParagraphTextWithNSString:(NSString *)text
                          withOrgOssPdfreporterFontIFont:(id<OrgOssPdfreporterFontIFont>)font
                     withOrgOssPdfreporterGeometryIColor:(id<OrgOssPdfreporterGeometryIColor>)foreground
                     withOrgOssPdfreporterGeometryIColor:(id<OrgOssPdfreporterGeometryIColor>)background
                withOrgOssPdfreporterTextIPositionedLine:(id<OrgOssPdfreporterTextIPositionedLine>)line {
  if ((self = [super init])) {
    listener_ = nil;
    width_ = nil;
    self.text = text;
    self.font = font;
    self.foreground = foreground;
    self.background = background;
    self.line = line;
  }
  return self;
}

- (id)initWithNSString:(NSString *)text
withOrgOssPdfreporterFontIFont:(id<OrgOssPdfreporterFontIFont>)font
withOrgOssPdfreporterGeometryIColor:(id<OrgOssPdfreporterGeometryIColor>)foreground
withOrgOssPdfreporterGeometryIColor:(id<OrgOssPdfreporterGeometryIColor>)background
withOrgOssPdfreporterTextIPositionedLine:(id<OrgOssPdfreporterTextIPositionedLine>)line {
  return [self initOrgOssPdfreporterTextParagraphTextWithNSString:text withOrgOssPdfreporterFontIFont:font withOrgOssPdfreporterGeometryIColor:foreground withOrgOssPdfreporterGeometryIColor:background withOrgOssPdfreporterTextIPositionedLine:line];
}

- (id)initWithNSString:(NSString *)text
withOrgOssPdfreporterTextParagraphText:(OrgOssPdfreporterTextParagraphText *)template_ {
  return [self initOrgOssPdfreporterTextParagraphTextWithNSString:text withOrgOssPdfreporterFontIFont:[((OrgOssPdfreporterTextParagraphText *) nil_chk(template_)) getFont] withOrgOssPdfreporterGeometryIColor:[((OrgOssPdfreporterTextParagraphText *) nil_chk(template_)) getForeground] withOrgOssPdfreporterGeometryIColor:[((OrgOssPdfreporterTextParagraphText *) nil_chk(template_)) getBackground] withOrgOssPdfreporterTextIPositionedLine:[((OrgOssPdfreporterTextParagraphText *) nil_chk(template_)) getLine]];
}

- (id)initWithNSString:(NSString *)text
withOrgOssPdfreporterFontIFont:(id<OrgOssPdfreporterFontIFont>)font
withOrgOssPdfreporterGeometryIColor:(id<OrgOssPdfreporterGeometryIColor>)foreground {
  return [self initOrgOssPdfreporterTextParagraphTextWithNSString:text withOrgOssPdfreporterFontIFont:font withOrgOssPdfreporterGeometryIColor:foreground withOrgOssPdfreporterGeometryIColor:nil withOrgOssPdfreporterTextIPositionedLine:nil];
}

- (NSString *)getText {
  return text_;
}

- (int)getLength {
  return [((NSString *) nil_chk(text_)) length];
}

- (float)getWidth {
  if (width_ == nil) {
    width_ = [[JavaLangFloat alloc] initWithFloat:[((id<OrgOssPdfreporterFontIFontMetric>) nil_chk([((id<OrgOssPdfreporterFontIFont>) nil_chk(font_)) getMetric])) getWidthWithNSString:[self getText]] * [((id<OrgOssPdfreporterFontIFont>) nil_chk([self getFont])) getSize] / 1000];
  }
  return [((JavaLangFloat *) nil_chk(width_)) floatValue];
}

- (int)measureTextWithFloat:(float)wrappingwidth
                   withBOOL:(BOOL)wordwrap {
  return [((id<OrgOssPdfreporterFontIFontMetric>) nil_chk([((id<OrgOssPdfreporterFontIFont>) nil_chk(font_)) getMetric])) measureTextWithNSString:text_ withInt:(int) (wrappingwidth * 1000 / [((id<OrgOssPdfreporterFontIFont>) nil_chk(font_)) getSize]) withBOOL:wordwrap];
}

- (id<OrgOssPdfreporterFontIFont>)getFont {
  return font_;
}

- (id<OrgOssPdfreporterGeometryIColor>)getForeground {
  return foreground_;
}

- (id<OrgOssPdfreporterGeometryIColor>)getBackground {
  return background_;
}

- (id<OrgOssPdfreporterTextIPositionedLine>)getLine {
  return line_ == nil ? nil : [((OrgOssPdfreporterTextIPositionedLine_LineTypeEnum *) nil_chk([((id<OrgOssPdfreporterTextIPositionedLine>) nil_chk(line_)) getType])) isEqual:[OrgOssPdfreporterTextIPositionedLine_LineTypeEnum ABSOLUTE]] ? ((id) line_) : [[OrgOssPdfreporterTextScaledLine alloc] initWithOrgOssPdfreporterTextIPositionedLine:line_ withFloat:[((id<OrgOssPdfreporterFontIFont>) nil_chk([self getFont])) getSize]];
}

- (void)setSplitListenerWithOrgOssPdfreporterTextISplitListener:(id<OrgOssPdfreporterTextISplitListener>)listener {
  self.listener = listener;
}

- (OrgOssPdfreporterTextParagraphText *)splitWithInt:(int)charIndex {
  if (charIndex == 0) {
    charIndex = 1;
  }
  OrgOssPdfreporterTextParagraphText *left = [[OrgOssPdfreporterTextParagraphText alloc] initWithNSString:[((NSString *) nil_chk(text_)) substring:0 endIndex:charIndex] withOrgOssPdfreporterTextParagraphText:self];
  OrgOssPdfreporterTextParagraphText *right = [[OrgOssPdfreporterTextParagraphText alloc] initWithNSString:[((NSString *) nil_chk(text_)) substring:charIndex] withOrgOssPdfreporterTextParagraphText:self];
  if (listener_ != nil) {
    [listener_ splitWithId:self withId:left withId:right];
  }
  return left;
}

- (void)copyAllPropertiesTo:(id)copy {
  [super copyAllPropertiesTo:copy];
  OrgOssPdfreporterTextParagraphText *typedCopy = (OrgOssPdfreporterTextParagraphText *) copy;
  typedCopy.text = text_;
  typedCopy.font = font_;
  typedCopy.foreground = foreground_;
  typedCopy.background = background_;
  typedCopy.line = line_;
  typedCopy.listener = listener_;
  typedCopy.width = width_;
}

@end
