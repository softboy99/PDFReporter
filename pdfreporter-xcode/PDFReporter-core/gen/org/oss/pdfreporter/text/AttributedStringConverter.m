//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: pdfreporter-core/src/org/oss/pdfreporter/text/AttributedStringConverter.java
//
//  Created by kendra on 9/27/13.
//

#include "java/lang/Boolean.h"
#include "java/lang/Float.h"
#include "java/lang/Integer.h"
#include "java/lang/StringBuilder.h"
#include "java/util/HashSet.h"
#include "java/util/Map.h"
#include "java/util/Set.h"
#include "org/oss/pdfreporter/font/IFont.h"
#include "org/oss/pdfreporter/font/IFontManager.h"
#include "org/oss/pdfreporter/font/factory/IFontFactory.h"
#include "org/oss/pdfreporter/font/text/TextAttribute.h"
#include "org/oss/pdfreporter/geometry/IColor.h"
#include "org/oss/pdfreporter/registry/ApiRegistry.h"
#include "org/oss/pdfreporter/text/AttributedStringConverter.h"
#include "org/oss/pdfreporter/text/IPositionedLine.h"
#include "org/oss/pdfreporter/text/Paragraph.h"
#include "org/oss/pdfreporter/text/ParagraphText.h"
#include "org/oss/pdfreporter/text/PositionedLined.h"
#include "org/oss/pdfreporter/uses/java/awt/text/AttributedString.h"
#include "org/oss/pdfreporter/uses/java/awt/text/IAttributedCharacterIterator.h"
#include "org/oss/pdfreporter/uses/java/awt/text/ICharacterIterator.h"

@implementation OrgOssPdfreporterTextAttributedStringConverter

static id<JavaUtilSet> OrgOssPdfreporterTextAttributedStringConverter_SEGMENTATION_ATTRIBUTES_;

@synthesize fontFactory = fontFactory_;
@synthesize attributedText = attributedText_;
@synthesize plainText = plainText_;

+ (id<JavaUtilSet>)SEGMENTATION_ATTRIBUTES {
  return OrgOssPdfreporterTextAttributedStringConverter_SEGMENTATION_ATTRIBUTES_;
}

- (id)initOrgOssPdfreporterTextAttributedStringConverterWithOrgOssPdfreporterUsesJavaAwtTextAttributedString:(OrgOssPdfreporterUsesJavaAwtTextAttributedString *)attributedText
                                                                                                withNSString:(NSString *)plainText {
  if ((self = [super init])) {
    self.fontFactory = [OrgOssPdfreporterRegistryApiRegistry getFontFactory];
    self.attributedText = attributedText;
    self.plainText = plainText;
  }
  return self;
}

- (id)initWithOrgOssPdfreporterUsesJavaAwtTextAttributedString:(OrgOssPdfreporterUsesJavaAwtTextAttributedString *)attributedText
                                                  withNSString:(NSString *)plainText {
  return [self initOrgOssPdfreporterTextAttributedStringConverterWithOrgOssPdfreporterUsesJavaAwtTextAttributedString:attributedText withNSString:plainText];
}

- (id)initWithOrgOssPdfreporterUsesJavaAwtTextAttributedString:(OrgOssPdfreporterUsesJavaAwtTextAttributedString *)attributedText {
  return [self initOrgOssPdfreporterTextAttributedStringConverterWithOrgOssPdfreporterUsesJavaAwtTextAttributedString:attributedText withNSString:[OrgOssPdfreporterTextAttributedStringConverter getPlainTextWithOrgOssPdfreporterUsesJavaAwtTextAttributedString:attributedText]];
}

+ (OrgOssPdfreporterTextParagraph *)convertWithOrgOssPdfreporterUsesJavaAwtTextAttributedString:(OrgOssPdfreporterUsesJavaAwtTextAttributedString *)attributedText
                                                                                   withNSString:(NSString *)plainText {
  return [((OrgOssPdfreporterTextAttributedStringConverter *) [[OrgOssPdfreporterTextAttributedStringConverter alloc] initWithOrgOssPdfreporterUsesJavaAwtTextAttributedString:attributedText withNSString:plainText]) convert];
}

+ (OrgOssPdfreporterTextParagraph *)convertWithOrgOssPdfreporterUsesJavaAwtTextAttributedString:(OrgOssPdfreporterUsesJavaAwtTextAttributedString *)attributedText {
  return [((OrgOssPdfreporterTextAttributedStringConverter *) [[OrgOssPdfreporterTextAttributedStringConverter alloc] initWithOrgOssPdfreporterUsesJavaAwtTextAttributedString:attributedText]) convert];
}

- (OrgOssPdfreporterTextParagraph *)convert {
  OrgOssPdfreporterTextParagraph *paragraph = [[OrgOssPdfreporterTextParagraph alloc] init];
  int runLimit = 0;
  id<OrgOssPdfreporterUsesJavaAwtTextIAttributedCharacterIterator> iterator = [((OrgOssPdfreporterUsesJavaAwtTextAttributedString *) nil_chk(attributedText_)) getIterator];
  while (runLimit < [((NSString *) nil_chk(plainText_)) length] && (runLimit = [((id<OrgOssPdfreporterUsesJavaAwtTextIAttributedCharacterIterator>) nil_chk(iterator)) getRunLimitWithJavaUtilSet:OrgOssPdfreporterTextAttributedStringConverter_SEGMENTATION_ATTRIBUTES_]) <= [((id<OrgOssPdfreporterUsesJavaAwtTextIAttributedCharacterIterator>) nil_chk(iterator)) getEndIndex]) {
    id<JavaUtilMap> attributes = [((id<OrgOssPdfreporterUsesJavaAwtTextIAttributedCharacterIterator>) nil_chk(iterator)) getAttributes];
    OrgOssPdfreporterTextParagraphText *paragraphText = [self getParagrapghTextWithJavaUtilMap:attributes withNSString:[((NSString *) nil_chk(plainText_)) substring:[((id<OrgOssPdfreporterUsesJavaAwtTextIAttributedCharacterIterator>) nil_chk(iterator)) getIndex] endIndex:runLimit]];
    [((OrgOssPdfreporterTextParagraph *) nil_chk(paragraph)) addWithOrgOssPdfreporterTextParagraphText:paragraphText];
    [((id<OrgOssPdfreporterUsesJavaAwtTextIAttributedCharacterIterator>) nil_chk(iterator)) setIndexWithInt:runLimit];
  }
  return paragraph;
}

- (OrgOssPdfreporterTextParagraphText *)getParagrapghTextWithJavaUtilMap:(id<JavaUtilMap>)attributes
                                                            withNSString:(NSString *)text {
  id<OrgOssPdfreporterFontIFont> font = (id<OrgOssPdfreporterFontIFont>) [((id<JavaUtilMap>) nil_chk(attributes)) getWithId:[OrgOssPdfreporterFontTextTextAttribute FONT]];
  if (font == nil) {
    id<OrgOssPdfreporterFontIFontManager> fontManager = [((id<OrgOssPdfreporterFontFactoryIFontFactory>) nil_chk(fontFactory_)) getFontManager];
    NSString *fontFamily = (NSString *) [((id<JavaUtilMap>) nil_chk(attributes)) getWithId:[OrgOssPdfreporterFontTextTextAttribute FAMILY]];
    JavaLangFloat *fontSize = (JavaLangFloat *) [((id<JavaUtilMap>) nil_chk(attributes)) getWithId:[OrgOssPdfreporterFontTextTextAttribute SIZE]];
    font = [((id<OrgOssPdfreporterFontIFontManager>) nil_chk(fontManager)) getFontWithNSString:fontFamily withOrgOssPdfreporterFontIFont_FontStyleEnum:[OrgOssPdfreporterFontIFont_FontStyleEnum PLAIN]];
    font = [((id<OrgOssPdfreporterFontIFontManager>) nil_chk(fontManager)) getModifiedFontWithOrgOssPdfreporterFontIFont:font withFloat:[((JavaLangFloat *) nil_chk(fontSize)) floatValue] withOrgOssPdfreporterFontIFont_FontDecorationEnum:[OrgOssPdfreporterFontIFont_FontDecorationEnum NONE]];
  }
  BOOL underline = [OrgOssPdfreporterTextAttributedStringConverter hasUnderlineWithJavaUtilMap:attributes];
  BOOL strikethrough = [OrgOssPdfreporterTextAttributedStringConverter hasStrikethroughWithJavaUtilMap:attributes];
  BOOL superscript = [OrgOssPdfreporterTextAttributedStringConverter hasSupersciptWithJavaUtilMap:attributes];
  BOOL subscript = [OrgOssPdfreporterTextAttributedStringConverter hasSubsciptWithJavaUtilMap:attributes];
  id<OrgOssPdfreporterTextIPositionedLine> line = underline ? [OrgOssPdfreporterTextPositionedLined newUnderline] : strikethrough ? [OrgOssPdfreporterTextPositionedLined newStrikethrough] : nil;
  OrgOssPdfreporterFontIFont_FontDecorationEnum *decoration = underline ? [OrgOssPdfreporterFontIFont_FontDecorationEnum UNDERLINE] : strikethrough ? [OrgOssPdfreporterFontIFont_FontDecorationEnum STRIKE_THROUGH] : superscript ? [OrgOssPdfreporterFontIFont_FontDecorationEnum SUPERSCRIPT] : subscript ? [OrgOssPdfreporterFontIFont_FontDecorationEnum SUBSCRIPT] : [OrgOssPdfreporterFontIFont_FontDecorationEnum NONE];
  float fontSizeScale = superscript || subscript ? 2.0f / 3 : 1.0f;
  font = [((id<OrgOssPdfreporterFontIFontManager>) nil_chk([((id<OrgOssPdfreporterFontFactoryIFontFactory>) nil_chk(fontFactory_)) getFontManager])) getModifiedFontWithOrgOssPdfreporterFontIFont:font withFloat:[((id<OrgOssPdfreporterFontIFont>) nil_chk(font)) getSize] * fontSizeScale withOrgOssPdfreporterFontIFont_FontDecorationEnum:decoration];
  id<OrgOssPdfreporterGeometryIColor> forecolor = (id<OrgOssPdfreporterGeometryIColor>) [((id<JavaUtilMap>) nil_chk(attributes)) getWithId:[OrgOssPdfreporterFontTextTextAttribute FOREGROUND]];
  id<OrgOssPdfreporterGeometryIColor> backcolor = (id<OrgOssPdfreporterGeometryIColor>) [((id<JavaUtilMap>) nil_chk(attributes)) getWithId:[OrgOssPdfreporterFontTextTextAttribute BACKGROUND]];
  return [[OrgOssPdfreporterTextParagraphText alloc] initWithNSString:text withOrgOssPdfreporterFontIFont:font withOrgOssPdfreporterGeometryIColor:forecolor withOrgOssPdfreporterGeometryIColor:backcolor withOrgOssPdfreporterTextIPositionedLine:line];
}

+ (BOOL)hasUnderlineWithJavaUtilMap:(id<JavaUtilMap>)attributes {
  JavaLangInteger *underline = (JavaLangInteger *) [((id<JavaUtilMap>) nil_chk(attributes)) getWithId:[OrgOssPdfreporterFontTextTextAttribute UNDERLINE]];
  return [((JavaLangInteger *) nil_chk([OrgOssPdfreporterFontTextTextAttribute UNDERLINE_ON])) isEqual:underline];
}

+ (BOOL)hasStrikethroughWithJavaUtilMap:(id<JavaUtilMap>)attributes {
  JavaLangBoolean *strike = (JavaLangBoolean *) [((id<JavaUtilMap>) nil_chk(attributes)) getWithId:[OrgOssPdfreporterFontTextTextAttribute STRIKETHROUGH]];
  return [((JavaLangBoolean *) nil_chk([OrgOssPdfreporterFontTextTextAttribute STRIKETHROUGH_ON])) isEqual:strike];
}

+ (BOOL)hasSupersciptWithJavaUtilMap:(id<JavaUtilMap>)attributes {
  JavaLangInteger *scriptStyle = (JavaLangInteger *) [((id<JavaUtilMap>) nil_chk(attributes)) getWithId:[OrgOssPdfreporterFontTextTextAttribute SUPERSCRIPT]];
  return (scriptStyle != nil && [((JavaLangInteger *) nil_chk([OrgOssPdfreporterFontTextTextAttribute SUPERSCRIPT_SUPER])) isEqual:scriptStyle]);
}

+ (BOOL)hasSubsciptWithJavaUtilMap:(id<JavaUtilMap>)attributes {
  JavaLangInteger *scriptStyle = (JavaLangInteger *) [((id<JavaUtilMap>) nil_chk(attributes)) getWithId:[OrgOssPdfreporterFontTextTextAttribute SUPERSCRIPT]];
  return (scriptStyle != nil && [((JavaLangInteger *) nil_chk([OrgOssPdfreporterFontTextTextAttribute SUPERSCRIPT_SUB])) isEqual:scriptStyle]);
}

+ (NSString *)getPlainTextWithOrgOssPdfreporterUsesJavaAwtTextAttributedString:(OrgOssPdfreporterUsesJavaAwtTextAttributedString *)attributedText {
  JavaLangStringBuilder *builder = [[JavaLangStringBuilder alloc] init];
  id<OrgOssPdfreporterUsesJavaAwtTextIAttributedCharacterIterator> iterator = [((OrgOssPdfreporterUsesJavaAwtTextAttributedString *) nil_chk(attributedText)) getIterator];
  for (unichar c = [((id<OrgOssPdfreporterUsesJavaAwtTextIAttributedCharacterIterator>) nil_chk(iterator)) first]; c != OrgOssPdfreporterUsesJavaAwtTextICharacterIterator_DONE; c = [((id<OrgOssPdfreporterUsesJavaAwtTextIAttributedCharacterIterator>) nil_chk(iterator)) next]) {
    (void) [((JavaLangStringBuilder *) nil_chk(builder)) appendWithUnichar:c];
  }
  return [((JavaLangStringBuilder *) nil_chk(builder)) description];
}

+ (void)initialize {
  if (self == [OrgOssPdfreporterTextAttributedStringConverter class]) {
    OrgOssPdfreporterTextAttributedStringConverter_SEGMENTATION_ATTRIBUTES_ = [[JavaUtilHashSet alloc] init];
    {
      [((id<JavaUtilSet>) nil_chk(OrgOssPdfreporterTextAttributedStringConverter_SEGMENTATION_ATTRIBUTES_)) addWithId:[OrgOssPdfreporterFontTextTextAttribute FONT]];
      [((id<JavaUtilSet>) nil_chk(OrgOssPdfreporterTextAttributedStringConverter_SEGMENTATION_ATTRIBUTES_)) addWithId:[OrgOssPdfreporterFontTextTextAttribute FOREGROUND]];
      [((id<JavaUtilSet>) nil_chk(OrgOssPdfreporterTextAttributedStringConverter_SEGMENTATION_ATTRIBUTES_)) addWithId:[OrgOssPdfreporterFontTextTextAttribute BACKGROUND]];
      [((id<JavaUtilSet>) nil_chk(OrgOssPdfreporterTextAttributedStringConverter_SEGMENTATION_ATTRIBUTES_)) addWithId:[OrgOssPdfreporterFontTextTextAttribute WEIGHT]];
      [((id<JavaUtilSet>) nil_chk(OrgOssPdfreporterTextAttributedStringConverter_SEGMENTATION_ATTRIBUTES_)) addWithId:[OrgOssPdfreporterFontTextTextAttribute POSTURE]];
      [((id<JavaUtilSet>) nil_chk(OrgOssPdfreporterTextAttributedStringConverter_SEGMENTATION_ATTRIBUTES_)) addWithId:[OrgOssPdfreporterFontTextTextAttribute UNDERLINE]];
      [((id<JavaUtilSet>) nil_chk(OrgOssPdfreporterTextAttributedStringConverter_SEGMENTATION_ATTRIBUTES_)) addWithId:[OrgOssPdfreporterFontTextTextAttribute SUPERSCRIPT]];
    }
  }
}

- (void)copyAllPropertiesTo:(id)copy {
  [super copyAllPropertiesTo:copy];
  OrgOssPdfreporterTextAttributedStringConverter *typedCopy = (OrgOssPdfreporterTextAttributedStringConverter *) copy;
  typedCopy.fontFactory = fontFactory_;
  typedCopy.attributedText = attributedText_;
  typedCopy.plainText = plainText_;
}

@end
