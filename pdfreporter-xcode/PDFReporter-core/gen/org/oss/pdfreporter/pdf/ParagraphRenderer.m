//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: pdfreporter-core/src/org/oss/pdfreporter/pdf/ParagraphRenderer.java
//
//  Created by kendra on 9/27/13.
//

#include "java/lang/Math.h"
#include "java/util/ArrayList.h"
#include "java/util/Iterator.h"
#include "java/util/List.h"
#include "org/oss/pdfreporter/font/IFont.h"
#include "org/oss/pdfreporter/geometry/IColor.h"
#include "org/oss/pdfreporter/geometry/IRectangle.h"
#include "org/oss/pdfreporter/pdf/IPage.h"
#include "org/oss/pdfreporter/pdf/ParagraphRenderer.h"
#include "org/oss/pdfreporter/text/HorizontalAlignment.h"
#include "org/oss/pdfreporter/text/Paragraph.h"
#include "org/oss/pdfreporter/text/ParagraphText.h"

@implementation OrgOssPdfreporterPdfParagraphRenderer

static float OrgOssPdfreporterPdfParagraphRenderer_LEADING_FACTOR_;

@synthesize paragraph = paragraph_;
@synthesize alignment = alignment_;
@synthesize bounding = bounding_;
@synthesize textLine = textLine_;
@synthesize leading = leading_;
@synthesize y = y_;
@synthesize widthLeft = widthLeft_;

+ (float)LEADING_FACTOR {
  return OrgOssPdfreporterPdfParagraphRenderer_LEADING_FACTOR_;
}

+ (float *)LEADING_FACTORRef {
  return &OrgOssPdfreporterPdfParagraphRenderer_LEADING_FACTOR_;
}

- (id)initWithOrgOssPdfreporterTextParagraph:(OrgOssPdfreporterTextParagraph *)paragraph
withOrgOssPdfreporterTextHorizontalAlignmentEnum:(OrgOssPdfreporterTextHorizontalAlignmentEnum *)alignment
     withOrgOssPdfreporterGeometryIRectangle:(id<OrgOssPdfreporterGeometryIRectangle>)bounding {
  if ((self = [super init])) {
    self.paragraph = paragraph;
    self.alignment = alignment;
    self.bounding = bounding;
    self.textLine = [[JavaUtilArrayList alloc] init];
  }
  return self;
}

- (void)renderWithOrgOssPdfreporterPdfIPage:(id<OrgOssPdfreporterPdfIPage>)page
                                   withBOOL:(BOOL)wordwrap {
  [((id<OrgOssPdfreporterPdfIPage>) nil_chk(page)) beginText];
  leading_ = 0;
  y_ = [((id<OrgOssPdfreporterGeometryIRectangle>) nil_chk(bounding_)) getY];
  widthLeft_ = [((id<OrgOssPdfreporterGeometryIRectangle>) nil_chk(bounding_)) getWidth];
  {
    id<JavaUtilIterator> iter__ = [((OrgOssPdfreporterTextParagraph *) nil_chk(paragraph_)) iterator];
    while ([((id<JavaUtilIterator>) nil_chk(iter__)) hasNext]) {
      OrgOssPdfreporterTextParagraphText *text = [((id<JavaUtilIterator>) nil_chk(iter__)) next];
      int chars = [((OrgOssPdfreporterTextParagraphText *) nil_chk(text)) measureTextWithFloat:widthLeft_ withBOOL:wordwrap];
      if (chars < [((OrgOssPdfreporterTextParagraphText *) nil_chk(text)) getLength]) {
        [self addWithOrgOssPdfreporterTextParagraphText:[((OrgOssPdfreporterTextParagraphText *) nil_chk(text)) splitWithInt:[self calcSpiltPosWithInt:chars withBOOL:wordwrap]]];
        [self renderLineWithOrgOssPdfreporterPdfIPage:page];
      }
      else {
        [self addWithOrgOssPdfreporterTextParagraphText:text];
        if ([((NSString *) nil_chk([((OrgOssPdfreporterTextParagraphText *) nil_chk(text)) getText])) contains:@"\n"]) {
          [self renderLineWithOrgOssPdfreporterPdfIPage:page];
        }
      }
    }
  }
  [self renderLineWithOrgOssPdfreporterPdfIPage:page];
  [((id<OrgOssPdfreporterPdfIPage>) nil_chk(page)) endText];
}

- (int)calcSpiltPosWithInt:(int)splitpos
                  withBOOL:(BOOL)wordwrap {
  if (wordwrap && splitpos > 0) {
    if (alignment_ == [OrgOssPdfreporterTextHorizontalAlignmentEnum ALIGN_RIGHT]) {
      splitpos--;
    }
  }
  return splitpos;
}

- (void)addWithOrgOssPdfreporterTextParagraphText:(OrgOssPdfreporterTextParagraphText *)text {
  [((id<JavaUtilList>) nil_chk(textLine_)) addWithId:text];
  widthLeft_ -= [((OrgOssPdfreporterTextParagraphText *) nil_chk(text)) getWidth];
  leading_ = [JavaLangMath maxWithFloat:leading_ withFloat:[((id<OrgOssPdfreporterFontIFont>) nil_chk([((OrgOssPdfreporterTextParagraphText *) nil_chk(text)) getFont])) getSize] * OrgOssPdfreporterPdfParagraphRenderer_LEADING_FACTOR_];
}

- (void)renderLineWithOrgOssPdfreporterPdfIPage:(id<OrgOssPdfreporterPdfIPage>)page {
  float x;
  switch ([alignment_ ordinal]) {
    case OrgOssPdfreporterTextHorizontalAlignment_ALIGN_LEFT:
    x = [((id<OrgOssPdfreporterGeometryIRectangle>) nil_chk(bounding_)) getX];
    break;
    case OrgOssPdfreporterTextHorizontalAlignment_ALIGN_RIGHT:
    x = [((id<OrgOssPdfreporterGeometryIRectangle>) nil_chk(bounding_)) getX] + widthLeft_;
    break;
    case OrgOssPdfreporterTextHorizontalAlignment_ALIGN_CENTER:
    x = [((id<OrgOssPdfreporterGeometryIRectangle>) nil_chk(bounding_)) getX] + widthLeft_ / 2;
    break;
    case OrgOssPdfreporterTextHorizontalAlignment_ALIGN_JUSTIFY:
    default:
    x = [((id<OrgOssPdfreporterGeometryIRectangle>) nil_chk(bounding_)) getX];
  }
  {
    id<JavaUtilIterator> iter__ = [((id<JavaUtilList>) nil_chk(textLine_)) iterator];
    while ([((id<JavaUtilIterator>) nil_chk(iter__)) hasNext]) {
      OrgOssPdfreporterTextParagraphText *text = [((id<JavaUtilIterator>) nil_chk(iter__)) next];
      [((id<OrgOssPdfreporterPdfIPage>) nil_chk(page)) setFontWithOrgOssPdfreporterFontIFont:[((OrgOssPdfreporterTextParagraphText *) nil_chk(text)) getFont]];
      [((id<OrgOssPdfreporterPdfIPage>) nil_chk(page)) setRGBColorFillWithOrgOssPdfreporterGeometryIColor:[((OrgOssPdfreporterTextParagraphText *) nil_chk(text)) getForeground]];
      [((id<OrgOssPdfreporterPdfIPage>) nil_chk(page)) setTextPosWithFloat:x withFloat:y_];
      [((id<OrgOssPdfreporterPdfIPage>) nil_chk(page)) textOutWithNSString:[((OrgOssPdfreporterTextParagraphText *) nil_chk(text)) getText]];
      x += [((OrgOssPdfreporterTextParagraphText *) nil_chk(text)) getWidth];
    }
  }
  y_ -= leading_;
  leading_ = 0;
  widthLeft_ = [((id<OrgOssPdfreporterGeometryIRectangle>) nil_chk(bounding_)) getWidth];
  [((id<JavaUtilList>) nil_chk(textLine_)) clear];
}

+ (void)initialize {
  if (self == [OrgOssPdfreporterPdfParagraphRenderer class]) {
    OrgOssPdfreporterPdfParagraphRenderer_LEADING_FACTOR_ = 1.25f;
  }
}

- (void)copyAllPropertiesTo:(id)copy {
  [super copyAllPropertiesTo:copy];
  OrgOssPdfreporterPdfParagraphRenderer *typedCopy = (OrgOssPdfreporterPdfParagraphRenderer *) copy;
  typedCopy.paragraph = paragraph_;
  typedCopy.alignment = alignment_;
  typedCopy.bounding = bounding_;
  typedCopy.textLine = textLine_;
  typedCopy.leading = leading_;
  typedCopy.y = y_;
  typedCopy.widthLeft = widthLeft_;
}

@end
