//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: pdfreporter-core/src/org/oss/pdfreporter/image/ImageProxy.java
//
//  Created by kendra on 9/27/13.
//

#include "java/io/IOException.h"
#include "java/lang/RuntimeException.h"
#include "org/oss/pdfreporter/image/AbstractImageManager.h"
#include "org/oss/pdfreporter/image/IImage.h"
#include "org/oss/pdfreporter/image/IImageManager.h"
#include "org/oss/pdfreporter/image/ImageProxy.h"

@implementation OrgOssPdfreporterImageImageProxy

@synthesize imageManager = imageManager_;
@synthesize filePath = filePath_;
@synthesize quality = quality_;
@synthesize scale_ = scale__;
@synthesize delegate = delegate_;

- (id)initWithOrgOssPdfreporterImageAbstractImageManager:(OrgOssPdfreporterImageAbstractImageManager *)imageManager
                                            withNSString:(NSString *)filePath
                                               withFloat:(float)quality
                                               withFloat:(float)scale_ {
  if ((self = [super init])) {
    delegate_ = nil;
    self.imageManager = imageManager;
    self.filePath = filePath;
    self.quality = quality;
    self.scale_ = scale_;
  }
  return self;
}

- (int)getWidth {
  return [((id<OrgOssPdfreporterImageIImage>) nil_chk([self getDelegate])) getWidth];
}

- (int)getHeight {
  return [((id<OrgOssPdfreporterImageIImage>) nil_chk([self getDelegate])) getHeight];
}

- (id)getPeer {
  return [((id<OrgOssPdfreporterImageIImage>) nil_chk([self getDelegate])) getPeer];
}

- (NSString *)getResourcePath {
  return filePath_;
}

- (id<OrgOssPdfreporterImageIImage>)getDelegate {
  [self load__];
  return delegate_;
}

- (void)load__ {
  @try {
    if (nil == delegate_) {
      self.delegate = [((OrgOssPdfreporterImageAbstractImageManager *) nil_chk(imageManager_)) loadImageInternalWithNSString:filePath_ withFloat:quality_ withFloat:scale__];
    }
  }
  @catch (JavaIoIOException *e) {
    @throw [[JavaLangRuntimeException alloc] initWithNSString:[NSString stringWithFormat:@"Exception while loading image resource :%@", filePath_]];
  }
}

- (id<OrgOssPdfreporterImageIImageManager>)getImageManager {
  return imageManager_;
}

- (void)copyAllPropertiesTo:(id)copy {
  [super copyAllPropertiesTo:copy];
  OrgOssPdfreporterImageImageProxy *typedCopy = (OrgOssPdfreporterImageImageProxy *) copy;
  typedCopy.imageManager = imageManager_;
  typedCopy.filePath = filePath_;
  typedCopy.quality = quality_;
  typedCopy.scale_ = scale__;
  typedCopy.delegate = delegate_;
}

@end
