//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: pdfreporter-core/src/org/oss/pdfreporter/image/AbstractImageManager.java
//
//  Created by kendra on 9/27/13.
//

#include "IOSClass.h"
#include "java/util/Collection.h"
#include "java/util/HashMap.h"
#include "java/util/Map.h"
#include "java/util/logging/Logger.h"
#include "org/oss/pdfreporter/image/AbstractImageManager.h"
#include "org/oss/pdfreporter/image/IImage.h"
#include "org/oss/pdfreporter/image/ImageProxy.h"
#include "org/oss/pdfreporter/registry/ISessionObject.h"

@implementation OrgOssPdfreporterImageAbstractImageManager

@synthesize logger = logger_;
@synthesize imageCache = imageCache_;

- (id)init {
  if ((self = [super init])) {
    logger_ = [JavaUtilLoggingLogger getLoggerWithNSString:[[IOSClass classWithClass:[OrgOssPdfreporterImageAbstractImageManager class]] getName]];
    imageCache_ = [[JavaUtilHashMap alloc] init];
  }
  return self;
}

- (id<OrgOssPdfreporterImageIImage>)loadImageWithNSString:(NSString *)filePath {
  return [self loadImageWithNSString:filePath withFloat:0.0f withFloat:0.0f];
}

- (id<OrgOssPdfreporterImageIImage>)loadImageWithNSString:(NSString *)filePath
                                                withFloat:(float)quality
                                                withFloat:(float)scale_ {
  NSString *key = [NSString stringWithFormat:@"%@ quality:%f scale:%f", filePath, quality, scale_];
  if (![((id<JavaUtilMap>) nil_chk(imageCache_)) containsKeyWithId:key]) {
    (void) [((id<JavaUtilMap>) nil_chk(imageCache_)) putWithId:key withId:[[OrgOssPdfreporterImageImageProxy alloc] initWithOrgOssPdfreporterImageAbstractImageManager:self withNSString:filePath withFloat:quality withFloat:scale_]];
    [((JavaUtilLoggingLogger *) nil_chk(logger_)) finestWithNSString:[NSString stringWithFormat:@"Caching image: %@", filePath]];
  }
  else {
    [((JavaUtilLoggingLogger *) nil_chk(logger_)) finestWithNSString:[NSString stringWithFormat:@"Load Image from cache: %@", filePath]];
  }
  return [((id<JavaUtilMap>) nil_chk(imageCache_)) getWithId:key];
}

- (void)dispose {
  [((id<JavaUtilMap>) nil_chk(imageCache_)) clear];
  [self disposeInternal];
}

- (void)getWithNSString:(NSString *)key {
}

- (void)putWithNSString:(NSString *)key
withOrgOssPdfreporterRegistryISessionObject:(id<OrgOssPdfreporterRegistryISessionObject>)value {
}

- (void)removeWithNSString:(NSString *)key {
}

- (id<JavaUtilCollection>)getLoadedImages {
  return [((id<JavaUtilMap>) nil_chk(imageCache_)) values];
}

- (id<OrgOssPdfreporterImageIImage>)loadImageInternalWithNSString:(NSString *)filePath
                                                        withFloat:(float)quality
                                                        withFloat:(float)scale_ {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}

- (void)disposeInternal {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
}

- (void)copyAllPropertiesTo:(id)copy {
  [super copyAllPropertiesTo:copy];
  OrgOssPdfreporterImageAbstractImageManager *typedCopy = (OrgOssPdfreporterImageAbstractImageManager *) copy;
  typedCopy.logger = logger_;
  typedCopy.imageCache = imageCache_;
}

@end
