//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: pdfreporter-portable/src/org/oss/pdfreporter/beans/BeanUtils.java
//
//  Created by kendra on 9/27/13.
//

#include "IOSClass.h"
#include "java/lang/Exception.h"
#include "java/lang/NoSuchFieldException.h"
#include "java/lang/SecurityException.h"
#include "java/lang/reflect/Field.h"
#include "java/lang/reflect/Modifier.h"
#include "java/util/Iterator.h"
#include "java/util/Map.h"
#include "java/util/Set.h"
#include "org/oss/pdfreporter/beans/BeanUtils.h"
#include "org/oss/pdfreporter/exception/ConversionException.h"

@implementation OrgOssPdfreporterBeansBeanUtils

- (void)setPropertyWithId:(id)top
             withNSString:(NSString *)propertyName
                   withId:(id)value {
  if (top != nil) {
    @try {
      JavaLangReflectField *field = [[top getClass] getDeclaredField:propertyName];
      [((JavaLangReflectField *) nil_chk(field)) setAccessibleWithBOOL:YES];
      [((JavaLangReflectField *) nil_chk(field)) setWithId:top withId:value];
    }
    @catch (JavaLangException *e) {
      @throw [[OrgOssPdfreporterExceptionConversionException alloc] initWithNSString:[NSString stringWithFormat:@"Cannot set Property %@ on Object %@", propertyName, top] withJavaLangThrowable:e];
    }
  }
}

- (id)getPropertyWithId:(id)top
           withNSString:(NSString *)propertyName {
  @try {
    JavaLangReflectField *field = [[nil_chk(top) getClass] getDeclaredField:propertyName];
    [((JavaLangReflectField *) nil_chk(field)) setAccessibleWithBOOL:YES];
    return [((JavaLangReflectField *) nil_chk(field)) getWithId:top];
  }
  @catch (JavaLangException *e) {
    @throw [[OrgOssPdfreporterExceptionConversionException alloc] initWithNSString:[NSString stringWithFormat:@"Cannot get Property %@ from Object %@", propertyName, top] withJavaLangThrowable:e];
  }
}

- (BOOL)isWriteableWithId:(id)bean
             withNSString:(NSString *)name {
  @try {
    JavaLangReflectField *field = [[nil_chk(bean) getClass] getDeclaredField:name];
    return ![JavaLangReflectModifier isFinalWithInt:[((JavaLangReflectField *) nil_chk(field)) getModifiers]];
  }
  @catch (JavaLangException *e) {
    @throw [[OrgOssPdfreporterExceptionConversionException alloc] initWithNSString:[NSString stringWithFormat:@"Cannot get Property %@ from Object %@", name, bean] withJavaLangThrowable:e];
  }
}

- (BOOL)hasPropertyWithId:(id)bean
             withNSString:(NSString *)name {
  @try {
    (void) [[nil_chk(bean) getClass] getDeclaredField:name];
    return YES;
  }
  @catch (JavaLangSecurityException *e) {
    @throw [[OrgOssPdfreporterExceptionConversionException alloc] initWithNSString:[NSString stringWithFormat:@"Cannot get Property %@ from Object %@", name, bean] withJavaLangThrowable:e];
  }
  @catch (JavaLangNoSuchFieldException *e) {
    return NO;
  }
}

- (void)populateWithId:(id)bean
       withJavaUtilMap:(id<JavaUtilMap>)properties {
  if ((bean == nil) || (properties == nil)) {
    return;
  }
  id<JavaUtilIterator> entries = [((id<JavaUtilSet>) nil_chk([((id<JavaUtilMap>) nil_chk(properties)) entrySet])) iterator];
  while ([((id<JavaUtilIterator>) nil_chk(entries)) hasNext]) {
    id<JavaUtilMap_Entry> entry = (id<JavaUtilMap_Entry>) [((id<JavaUtilIterator>) nil_chk(entries)) next];
    NSString *name = (NSString *) [((id<JavaUtilMap_Entry>) nil_chk(entry)) getKey];
    if (name == nil) {
      continue;
    }
    [self setPropertyWithId:bean withNSString:name withId:[((id<JavaUtilMap_Entry>) nil_chk(entry)) getValue]];
  }
}

- (id)init {
  return [super init];
}

@end
