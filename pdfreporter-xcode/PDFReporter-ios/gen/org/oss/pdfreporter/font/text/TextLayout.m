//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: pdfreporter-portable/src/org/oss/pdfreporter/font/text/TextLayout.java
//
//  Created by kendra on 9/27/13.
//

#include "java/lang/Float.h"
#include "java/lang/Math.h"
#include "java/lang/StringBuilder.h"
#include "java/util/Iterator.h"
#include "org/oss/pdfreporter/font/IFont.h"
#include "org/oss/pdfreporter/font/IFontMetric.h"
#include "org/oss/pdfreporter/font/text/ITextLayout.h"
#include "org/oss/pdfreporter/font/text/TextLayout.h"
#include "org/oss/pdfreporter/text/Paragraph.h"
#include "org/oss/pdfreporter/text/ParagraphText.h"

@implementation OrgOssPdfreporterFontTextTextLayout

@synthesize paragraph = paragraph_;
@synthesize characterCount = characterCount_;
@synthesize advance = advance_;
@synthesize visibleAdvance = visibleAdvance_;
@synthesize ascent = ascent_;
@synthesize descent = descent_;
@synthesize leading = leading_;

- (id)initWithOrgOssPdfreporterTextParagraph:(OrgOssPdfreporterTextParagraph *)paragraph
                                     withInt:(int)characterCount {
  if ((self = [super init])) {
    advance_ = nil;
    visibleAdvance_ = nil;
    ascent_ = nil;
    descent_ = nil;
    leading_ = nil;
    self.paragraph = paragraph;
    self.characterCount = characterCount;
  }
  return self;
}

- (id<OrgOssPdfreporterFontTextITextLayout>)getJustifiedLayoutWithFloat:(float)justificationWidth {
  return self;
}

- (float)getAdvance {
  if (advance_ == nil) {
    [self calcAdvance];
  }
  return [((JavaLangFloat *) nil_chk(advance_)) floatValue];
}

- (float)getVisibleAdvance {
  if (visibleAdvance_ == nil) {
    [self calcAdvance];
  }
  return [((JavaLangFloat *) nil_chk(visibleAdvance_)) floatValue];
}

- (float)getAscent {
  if (ascent_ == nil) {
    [self calcMetric];
  }
  return [((JavaLangFloat *) nil_chk(ascent_)) floatValue];
}

- (float)getDescent {
  if (descent_ == nil) {
    [self calcMetric];
  }
  return [((JavaLangFloat *) nil_chk(descent_)) floatValue];
}

- (float)getLeading {
  if (leading_ == nil) {
    [self calcMetric];
  }
  return [((JavaLangFloat *) nil_chk(leading_)) floatValue];
}

- (BOOL)isLeftToRight {
  return YES;
}

- (int)getCharacterCount {
  return characterCount_;
}

- (OrgOssPdfreporterTextParagraph *)getParagraph {
  return paragraph_;
}

- (void)calcMetric {
  float calcAscent = 0;
  float calcDescent = 0;
  float calcLeading = 0;
  {
    id<JavaUtilIterator> iter__ = [((OrgOssPdfreporterTextParagraph *) nil_chk(paragraph_)) iterator];
    while ([((id<JavaUtilIterator>) nil_chk(iter__)) hasNext]) {
      OrgOssPdfreporterTextParagraphText *text = [((id<JavaUtilIterator>) nil_chk(iter__)) next];
      id<OrgOssPdfreporterFontIFontMetric> metric = [((id<OrgOssPdfreporterFontIFont>) nil_chk([((OrgOssPdfreporterTextParagraphText *) nil_chk(text)) getFont])) getMetric];
      calcAscent = [JavaLangMath maxWithFloat:calcAscent withFloat:[((id<OrgOssPdfreporterFontIFontMetric>) nil_chk(metric)) getAscent]];
      calcDescent = [JavaLangMath maxWithFloat:calcDescent withFloat:[((id<OrgOssPdfreporterFontIFontMetric>) nil_chk(metric)) getDescent]];
      calcLeading = [JavaLangMath maxWithFloat:calcLeading withFloat:[((id<OrgOssPdfreporterFontIFontMetric>) nil_chk(metric)) getLeading]];
    }
  }
  self.ascent = [JavaLangFloat valueOfWithFloat:calcAscent];
  self.descent = [JavaLangFloat valueOfWithFloat:calcDescent];
  self.leading = [JavaLangFloat valueOfWithFloat:calcLeading];
}

- (void)calcAdvance {
  JavaLangStringBuilder *builder = [[JavaLangStringBuilder alloc] init];
  float totalAdvance = 0;
  {
    id<JavaUtilIterator> iter__ = [((OrgOssPdfreporterTextParagraph *) nil_chk(paragraph_)) iterator];
    while ([((id<JavaUtilIterator>) nil_chk(iter__)) hasNext]) {
      OrgOssPdfreporterTextParagraphText *text = [((id<JavaUtilIterator>) nil_chk(iter__)) next];
      totalAdvance += [((OrgOssPdfreporterTextParagraphText *) nil_chk(text)) getWidth];
      (void) [((JavaLangStringBuilder *) nil_chk(builder)) appendWithNSString:[((OrgOssPdfreporterTextParagraphText *) nil_chk(text)) getText]];
    }
  }
  float invisibleAdvance = [((OrgOssPdfreporterTextParagraphText *) [[OrgOssPdfreporterTextParagraphText alloc] initWithNSString:[OrgOssPdfreporterFontTextTextLayout invisibleCharsAtEndWithNSString:[((JavaLangStringBuilder *) nil_chk(builder)) description]] withOrgOssPdfreporterTextParagraphText:[((OrgOssPdfreporterTextParagraph *) nil_chk(paragraph_)) getLastParagraphText]]) getWidth];
  self.advance = [JavaLangFloat valueOfWithFloat:totalAdvance];
  self.visibleAdvance = [JavaLangFloat valueOfWithFloat:totalAdvance - invisibleAdvance];
}

+ (NSString *)invisibleCharsAtEndWithNSString:(NSString *)text {
  int begin = [((NSString *) nil_chk(text)) length];
  while (begin > 0 && [((NSString *) nil_chk(text)) charAtWithInt:begin - 1] <= ' ') {
    begin--;
  }
  return [((NSString *) nil_chk(text)) substring:begin endIndex:[((NSString *) nil_chk(text)) length]];
}

- (void)copyAllPropertiesTo:(id)copy {
  [super copyAllPropertiesTo:copy];
  OrgOssPdfreporterFontTextTextLayout *typedCopy = (OrgOssPdfreporterFontTextTextLayout *) copy;
  typedCopy.paragraph = paragraph_;
  typedCopy.characterCount = characterCount_;
  typedCopy.advance = advance_;
  typedCopy.visibleAdvance = visibleAdvance_;
  typedCopy.ascent = ascent_;
  typedCopy.descent = descent_;
  typedCopy.leading = leading_;
}

@end
