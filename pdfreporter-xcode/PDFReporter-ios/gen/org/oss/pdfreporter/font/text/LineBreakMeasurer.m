//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: pdfreporter-portable/src/org/oss/pdfreporter/font/text/LineBreakMeasurer.java
//
//  Created by kendra on 9/27/13.
//

#include "java/lang/IllegalArgumentException.h"
#include "java/lang/UnsupportedOperationException.h"
#include "org/oss/pdfreporter/font/text/CharacterBreakIterator.h"
#include "org/oss/pdfreporter/font/text/IBreakIterator.h"
#include "org/oss/pdfreporter/font/text/ITextLayout.h"
#include "org/oss/pdfreporter/font/text/LineBreakMeasurer.h"
#include "org/oss/pdfreporter/font/text/TextLayout.h"
#include "org/oss/pdfreporter/font/text/WordBreakIterator.h"
#include "org/oss/pdfreporter/text/AttributedStringConverter.h"
#include "org/oss/pdfreporter/text/Paragraph.h"
#include "org/oss/pdfreporter/uses/java/awt/text/AttributedString.h"
#include "org/oss/pdfreporter/uses/java/awt/text/IAttributedCharacterIterator.h"

@implementation OrgOssPdfreporterFontTextLineBreakMeasurer

@synthesize paragraph = paragraph_;
@synthesize wordBreakIterator = wordBreakIterator_;
@synthesize characterBreakIterator = characterBreakIterator_;
@synthesize limit = limit_;
@synthesize start = start_;
@synthesize pos = pos_;

- (id)initOrgOssPdfreporterFontTextLineBreakMeasurerWithOrgOssPdfreporterUsesJavaAwtTextAttributedString:(OrgOssPdfreporterUsesJavaAwtTextAttributedString *)attributedText
                                                                                            withNSString:(NSString *)plainText
                                                             withOrgOssPdfreporterFontTextIBreakIterator:(id<OrgOssPdfreporterFontTextIBreakIterator>)breakIterator {
  if ((self = [super init])) {
    id<OrgOssPdfreporterUsesJavaAwtTextIAttributedCharacterIterator> charcterIterator = [((OrgOssPdfreporterUsesJavaAwtTextAttributedString *) nil_chk(attributedText)) getIterator];
    self.limit = [((id<OrgOssPdfreporterUsesJavaAwtTextIAttributedCharacterIterator>) nil_chk(charcterIterator)) getEndIndex];
    self.pos = self.start = [((id<OrgOssPdfreporterUsesJavaAwtTextIAttributedCharacterIterator>) nil_chk(charcterIterator)) getBeginIndex];
    self.paragraph = [OrgOssPdfreporterTextAttributedStringConverter convertWithOrgOssPdfreporterUsesJavaAwtTextAttributedString:attributedText withNSString:plainText];
    self.wordBreakIterator = breakIterator;
    [((id<OrgOssPdfreporterFontTextIBreakIterator>) nil_chk(self.wordBreakIterator)) setTextWithOrgOssPdfreporterTextParagraph:paragraph_];
    self.characterBreakIterator = [[OrgOssPdfreporterFontTextCharacterBreakIterator alloc] init];
    [((id<OrgOssPdfreporterFontTextIBreakIterator>) nil_chk(self.characterBreakIterator)) setTextWithOrgOssPdfreporterTextParagraph:paragraph_];
  }
  return self;
}

- (id)initWithOrgOssPdfreporterUsesJavaAwtTextAttributedString:(OrgOssPdfreporterUsesJavaAwtTextAttributedString *)attributedText
                                                  withNSString:(NSString *)plainText
                   withOrgOssPdfreporterFontTextIBreakIterator:(id<OrgOssPdfreporterFontTextIBreakIterator>)breakIterator {
  return [self initOrgOssPdfreporterFontTextLineBreakMeasurerWithOrgOssPdfreporterUsesJavaAwtTextAttributedString:attributedText withNSString:plainText withOrgOssPdfreporterFontTextIBreakIterator:breakIterator];
}

- (id)initWithOrgOssPdfreporterUsesJavaAwtTextAttributedString:(OrgOssPdfreporterUsesJavaAwtTextAttributedString *)attributedText
                                                  withNSString:(NSString *)plainText {
  return [self initOrgOssPdfreporterFontTextLineBreakMeasurerWithOrgOssPdfreporterUsesJavaAwtTextAttributedString:attributedText withNSString:plainText withOrgOssPdfreporterFontTextIBreakIterator:[[OrgOssPdfreporterFontTextWordBreakIterator alloc] init]];
}

- (id)initOrgOssPdfreporterFontTextLineBreakMeasurerWithOrgOssPdfreporterUsesJavaAwtTextAttributedString:(OrgOssPdfreporterUsesJavaAwtTextAttributedString *)attributedText
                                                             withOrgOssPdfreporterFontTextIBreakIterator:(id<OrgOssPdfreporterFontTextIBreakIterator>)breakIterator {
  return [self initOrgOssPdfreporterFontTextLineBreakMeasurerWithOrgOssPdfreporterUsesJavaAwtTextAttributedString:attributedText withNSString:[OrgOssPdfreporterTextAttributedStringConverter getPlainTextWithOrgOssPdfreporterUsesJavaAwtTextAttributedString:attributedText] withOrgOssPdfreporterFontTextIBreakIterator:breakIterator];
}

- (id)initWithOrgOssPdfreporterUsesJavaAwtTextAttributedString:(OrgOssPdfreporterUsesJavaAwtTextAttributedString *)attributedText
                   withOrgOssPdfreporterFontTextIBreakIterator:(id<OrgOssPdfreporterFontTextIBreakIterator>)breakIterator {
  return [self initOrgOssPdfreporterFontTextLineBreakMeasurerWithOrgOssPdfreporterUsesJavaAwtTextAttributedString:attributedText withOrgOssPdfreporterFontTextIBreakIterator:breakIterator];
}

- (id)initWithOrgOssPdfreporterUsesJavaAwtTextAttributedString:(OrgOssPdfreporterUsesJavaAwtTextAttributedString *)attributedText {
  return [self initOrgOssPdfreporterFontTextLineBreakMeasurerWithOrgOssPdfreporterUsesJavaAwtTextAttributedString:attributedText withOrgOssPdfreporterFontTextIBreakIterator:[[OrgOssPdfreporterFontTextWordBreakIterator alloc] init]];
}

- (int)nextOffsetWithFloat:(float)wrappingWidth {
  return [self nextOffsetWithFloat:wrappingWidth withInt:limit_ withBOOL:NO];
}

- (int)nextOffsetWithFloat:(float)wrappingWidth
                   withInt:(int)offsetLimit
                  withBOOL:(BOOL)requireNextWord {
  int nextOffset = pos_;
  if (pos_ < limit_) {
    if (offsetLimit <= pos_) {
      @throw [[JavaLangIllegalArgumentException alloc] initWithNSString:@"offsetLimit must be after current position"];
    }
    nextOffset += [((id<OrgOssPdfreporterFontTextIBreakIterator>) nil_chk(wordBreakIterator_)) nextWithFloat:wrappingWidth];
    if (pos_ == nextOffset && !requireNextWord) {
      nextOffset += [((id<OrgOssPdfreporterFontTextIBreakIterator>) nil_chk(characterBreakIterator_)) nextWithFloat:wrappingWidth];
    }
    if (nextOffset > offsetLimit) {
      nextOffset = offsetLimit;
    }
  }
  return nextOffset;
}

- (id<OrgOssPdfreporterFontTextITextLayout>)nextLayoutWithFloat:(float)wrappingWidth {
  return [self nextLayoutWithFloat:wrappingWidth withInt:limit_ withBOOL:NO];
}

- (id<OrgOssPdfreporterFontTextITextLayout>)nextLayoutWithFloat:(float)wrappingWidth
                                                        withInt:(int)offsetLimit
                                                       withBOOL:(BOOL)requireNextWord {
  int currentOffset = pos_;
  int nextOffset = [self nextOffsetWithFloat:wrappingWidth withInt:offsetLimit withBOOL:requireNextWord];
  if (currentOffset == nextOffset && requireNextWord) {
    return nil;
  }
  [self setPositionWithInt:nextOffset];
  OrgOssPdfreporterTextParagraph *textLine = [((OrgOssPdfreporterTextParagraph *) nil_chk(paragraph_)) subParagraphWithInt:currentOffset withInt:nextOffset];
  return [[OrgOssPdfreporterFontTextTextLayout alloc] initWithOrgOssPdfreporterTextParagraph:textLine withInt:nextOffset - currentOffset];
}

- (int)getPosition {
  return pos_;
}

- (void)setPositionWithInt:(int)newPosition {
  if (newPosition < start_ || newPosition > limit_) {
    @throw [[JavaLangIllegalArgumentException alloc] initWithNSString:@"position is out of range"];
  }
  if (newPosition < limit_) {
    OrgOssPdfreporterTextParagraph *nextParagraph = [((OrgOssPdfreporterTextParagraph *) nil_chk(paragraph_)) subParagraphWithInt:newPosition];
    [((id<OrgOssPdfreporterFontTextIBreakIterator>) nil_chk(wordBreakIterator_)) setTextWithOrgOssPdfreporterTextParagraph:nextParagraph];
    [((id<OrgOssPdfreporterFontTextIBreakIterator>) nil_chk(characterBreakIterator_)) setTextWithOrgOssPdfreporterTextParagraph:nextParagraph];
  }
  pos_ = newPosition;
}

- (void)insertCharWithOrgOssPdfreporterUsesJavaAwtTextIAttributedCharacterIterator:(id<OrgOssPdfreporterUsesJavaAwtTextIAttributedCharacterIterator>)newParagraph
                                                                           withInt:(int)insertPos {
  @throw [[JavaLangUnsupportedOperationException alloc] init];
}

- (void)deleteCharWithOrgOssPdfreporterUsesJavaAwtTextIAttributedCharacterIterator:(id<OrgOssPdfreporterUsesJavaAwtTextIAttributedCharacterIterator>)newParagraph
                                                                           withInt:(int)deletePos {
  @throw [[JavaLangUnsupportedOperationException alloc] init];
}

- (BOOL)isEqual:(id)param0 {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}

- (NSUInteger)hash {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}

- (NSString *)description {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}

- (void)copyAllPropertiesTo:(id)copy {
  [super copyAllPropertiesTo:copy];
  OrgOssPdfreporterFontTextLineBreakMeasurer *typedCopy = (OrgOssPdfreporterFontTextLineBreakMeasurer *) copy;
  typedCopy.paragraph = paragraph_;
  typedCopy.wordBreakIterator = wordBreakIterator_;
  typedCopy.characterBreakIterator = characterBreakIterator_;
  typedCopy.limit = limit_;
  typedCopy.start = start_;
  typedCopy.pos = pos_;
}

@end
