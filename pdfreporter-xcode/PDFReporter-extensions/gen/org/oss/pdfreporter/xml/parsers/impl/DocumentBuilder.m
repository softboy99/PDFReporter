//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: pdfreporter-extensions/src/org/oss/pdfreporter/xml/parsers/impl/DocumentBuilder.java
//
//  Created by kendra on 9/27/13.
//

#include "IOSClass.h"
#include "java/io/File.h"
#include "java/io/FileInputStream.h"
#include "java/io/IOException.h"
#include "java/io/InputStream.h"
#include "java/io/Reader.h"
#include "java/util/logging/Level.h"
#include "java/util/logging/Logger.h"
#include "org/oss/pdfreporter/exception/NotImplementedException.h"
#include "org/oss/pdfreporter/net/IURL.h"
#include "org/oss/pdfreporter/net/MalformedURLException.h"
#include "org/oss/pdfreporter/net/factory/INetFactory.h"
#include "org/oss/pdfreporter/registry/IRegistry.h"
#include "org/oss/pdfreporter/uses/org/w3c/dom/DOMImplementation.h"
#include "org/oss/pdfreporter/uses/org/w3c/dom/Document.h"
#include "org/oss/pdfreporter/xml/parsers/IInputSource.h"
#include "org/oss/pdfreporter/xml/parsers/IXmlParser.h"
#include "org/oss/pdfreporter/xml/parsers/ParserConfigurationException.h"
#include "org/oss/pdfreporter/xml/parsers/XMLEntityResolver.h"
#include "org/oss/pdfreporter/xml/parsers/XMLErrorHandler.h"
#include "org/oss/pdfreporter/xml/parsers/XMLParseException.h"
#include "org/oss/pdfreporter/xml/parsers/factory/IXmlParserFactory.h"
#include "org/oss/pdfreporter/xml/parsers/impl/DocumentBuilder.h"
#include "org/oss/pdfreporter/xml/parsers/impl/DocumentImpl.h"
#include "org/oss/pdfreporter/xml/parsers/impl/SaxToDomHandler.h"

@implementation OrgOssPdfreporterXmlParsersImplDocumentBuilder

static JavaUtilLoggingLogger * OrgOssPdfreporterXmlParsersImplDocumentBuilder_logger_;

@synthesize namespaceAware = namespaceAware_;
@synthesize validating = validating_;
@synthesize xIncludeAware = xIncludeAware_;
@synthesize errorHandler = errorHandler_;
@synthesize entityResolver = entityResolver_;
@synthesize factory = factory_;

+ (JavaUtilLoggingLogger *)logger {
  return OrgOssPdfreporterXmlParsersImplDocumentBuilder_logger_;
}

- (id)initWithBOOL:(BOOL)namespaceAware
          withBOOL:(BOOL)validating
          withBOOL:(BOOL)xIncludeAware {
  if ((self = [super init])) {
    errorHandler_ = nil;
    entityResolver_ = nil;
    factory_ = nil;
    self.namespaceAware = namespaceAware;
    self.validating = validating;
    self.xIncludeAware = xIncludeAware;
  }
  return self;
}

- (void)reset {
  errorHandler_ = nil;
  entityResolver_ = nil;
  factory_ = nil;
}

- (id<OrgOssPdfreporterUsesOrgW3cDomDocument>)parseWithJavaIoInputStream:(JavaIoInputStream *)is {
  id<OrgOssPdfreporterXmlParsersIInputSource> input = [((id<OrgOssPdfreporterXmlParsersFactoryIXmlParserFactory>) nil_chk([self getFactory])) newInputSourceWithJavaIoInputStream:is];
  return [self parseWithOrgOssPdfreporterXmlParsersIInputSource:input];
}

- (id<OrgOssPdfreporterUsesOrgW3cDomDocument>)parseWithJavaIoInputStream:(JavaIoInputStream *)is
                                                            withNSString:(NSString *)systemId {
  @throw [[OrgOssPdfreporterExceptionNotImplementedException alloc] init];
}

- (id<OrgOssPdfreporterUsesOrgW3cDomDocument>)parseWithNSString:(NSString *)uri {
  @try {
    id<OrgOssPdfreporterNetIURL> url = [((id<OrgOssPdfreporterNetFactoryINetFactory>) nil_chk([OrgOssPdfreporterRegistryIRegistry getINetFactory])) newURLWithNSString:uri];
    id<OrgOssPdfreporterXmlParsersIInputSource> is = [((id<OrgOssPdfreporterXmlParsersFactoryIXmlParserFactory>) nil_chk([self getFactory])) newInputSourceWithJavaIoInputStream:[((id<OrgOssPdfreporterNetIURL>) nil_chk(url)) openStream]];
    return [self parseWithOrgOssPdfreporterXmlParsersIInputSource:is];
  }
  @catch (OrgOssPdfreporterNetMalformedURLException *e) {
    [((JavaUtilLoggingLogger *) nil_chk(OrgOssPdfreporterXmlParsersImplDocumentBuilder_logger_)) logWithJavaUtilLoggingLevel:[JavaUtilLoggingLevel SEVERE] withNSString:[NSString stringWithFormat:@"Exception creating URL for '%@'", uri] withJavaLangThrowable:e];
    @throw [[OrgOssPdfreporterXmlParsersXMLParseException alloc] initWithNSString:[((OrgOssPdfreporterNetMalformedURLException *) nil_chk(e)) getMessage]];
  }
}

- (id<OrgOssPdfreporterUsesOrgW3cDomDocument>)parseWithJavaIoFile:(JavaIoFile *)f {
  id<OrgOssPdfreporterXmlParsersIInputSource> input = [((id<OrgOssPdfreporterXmlParsersFactoryIXmlParserFactory>) nil_chk([self getFactory])) newInputSourceWithJavaIoInputStream:[[JavaIoFileInputStream alloc] initWithJavaIoFile:f]];
  return [self parseWithOrgOssPdfreporterXmlParsersIInputSource:input];
}

- (id<OrgOssPdfreporterUsesOrgW3cDomDocument>)parseWithOrgOssPdfreporterXmlParsersIInputSource:(id<OrgOssPdfreporterXmlParsersIInputSource>)input {
  id<OrgOssPdfreporterUsesOrgW3cDomDocument> document = [self newDocument];
  @try {
    [((id<OrgOssPdfreporterXmlParsersIXmlParser>) nil_chk([self newParserWithOrgOssPdfreporterXmlParsersIInputSource:input withOrgOssPdfreporterUsesOrgW3cDomDocument:document])) parse];
    return document;
  }
  @catch (OrgOssPdfreporterXmlParsersParserConfigurationException *e) {
    [((JavaUtilLoggingLogger *) nil_chk(OrgOssPdfreporterXmlParsersImplDocumentBuilder_logger_)) logWithJavaUtilLoggingLevel:[JavaUtilLoggingLevel SEVERE] withNSString:@"Exception configuring XML parser" withJavaLangThrowable:e];
    @throw [[OrgOssPdfreporterXmlParsersXMLParseException alloc] initWithJavaLangThrowable:e];
  }
  @finally {
    [self closeWithOrgOssPdfreporterXmlParsersIInputSource:input];
  }
}

- (BOOL)isNamespaceAware {
  return namespaceAware_;
}

- (BOOL)isValidating {
  return validating_;
}

- (void)setEntityResolverWithOrgOssPdfreporterXmlParsersXMLEntityResolver:(id<OrgOssPdfreporterXmlParsersXMLEntityResolver>)entityResolver {
  self.entityResolver = entityResolver;
}

- (void)setErrorHandlerWithOrgOssPdfreporterXmlParsersXMLErrorHandler:(id<OrgOssPdfreporterXmlParsersXMLErrorHandler>)errorHandler {
  self.errorHandler = errorHandler;
}

- (id<OrgOssPdfreporterUsesOrgW3cDomDocument>)newDocument OBJC_METHOD_FAMILY_NONE {
  return [[OrgOssPdfreporterXmlParsersImplDocumentImpl alloc] init];
}

- (id<OrgOssPdfreporterUsesOrgW3cDomDOMImplementation>)getDOMImplementation {
  @throw [[OrgOssPdfreporterExceptionNotImplementedException alloc] init];
}

- (BOOL)isXIncludeAware {
  return xIncludeAware_;
}

- (id<OrgOssPdfreporterXmlParsersFactoryIXmlParserFactory>)getFactory {
  if (factory_ == nil) {
    factory_ = [OrgOssPdfreporterRegistryIRegistry getIXmlParserFactory];
    [factory_ setNamespaceAwareWithBOOL:namespaceAware_];
    [factory_ setValidatingWithBOOL:validating_];
    [factory_ setXIncludeAwareWithBOOL:xIncludeAware_];
    [factory_ configure];
  }
  return factory_;
}

- (id<OrgOssPdfreporterXmlParsersIXmlParser>)newParserWithOrgOssPdfreporterXmlParsersIInputSource:(id<OrgOssPdfreporterXmlParsersIInputSource>)input
                                                       withOrgOssPdfreporterUsesOrgW3cDomDocument:(id<OrgOssPdfreporterUsesOrgW3cDomDocument>)document OBJC_METHOD_FAMILY_NONE {
  id<OrgOssPdfreporterXmlParsersIXmlParser> parser = [((id<OrgOssPdfreporterXmlParsersFactoryIXmlParserFactory>) nil_chk([self getFactory])) newXmlParserWithOrgOssPdfreporterXmlParsersIInputSource:input withOrgOssPdfreporterXmlParsersIContentHandler:[[OrgOssPdfreporterXmlParsersImplSaxToDomHandler alloc] initWithOrgOssPdfreporterUsesOrgW3cDomDocument:document]];
  [((id<OrgOssPdfreporterXmlParsersIXmlParser>) nil_chk(parser)) setEntityResolverWithOrgOssPdfreporterXmlParsersXMLEntityResolver:entityResolver_];
  [((id<OrgOssPdfreporterXmlParsersIXmlParser>) nil_chk(parser)) setErrorHandlerWithOrgOssPdfreporterXmlParsersXMLErrorHandler:errorHandler_];
  return parser;
}

- (void)closeWithOrgOssPdfreporterXmlParsersIInputSource:(id<OrgOssPdfreporterXmlParsersIInputSource>)is {
  @try {
    if ([((id<OrgOssPdfreporterXmlParsersIInputSource>) nil_chk(is)) getByteStream] != nil) {
      [((JavaIoInputStream *) nil_chk([((id<OrgOssPdfreporterXmlParsersIInputSource>) nil_chk(is)) getByteStream])) close];
    }
    if ([((id<OrgOssPdfreporterXmlParsersIInputSource>) nil_chk(is)) getCharacterStream] != nil) {
      [((JavaIoReader *) nil_chk([((id<OrgOssPdfreporterXmlParsersIInputSource>) nil_chk(is)) getCharacterStream])) close];
    }
  }
  @catch (JavaIoIOException *e) {
    [((JavaUtilLoggingLogger *) nil_chk(OrgOssPdfreporterXmlParsersImplDocumentBuilder_logger_)) logWithJavaUtilLoggingLevel:[JavaUtilLoggingLevel SEVERE] withNSString:@"Exception while closing xml stream." withJavaLangThrowable:e];
  }
}

+ (void)initialize {
  if (self == [OrgOssPdfreporterXmlParsersImplDocumentBuilder class]) {
    OrgOssPdfreporterXmlParsersImplDocumentBuilder_logger_ = [JavaUtilLoggingLogger getLoggerWithNSString:[[IOSClass classWithClass:[OrgOssPdfreporterXmlParsersImplDocumentBuilder class]] getName]];
  }
}

- (void)copyAllPropertiesTo:(id)copy {
  [super copyAllPropertiesTo:copy];
  OrgOssPdfreporterXmlParsersImplDocumentBuilder *typedCopy = (OrgOssPdfreporterXmlParsersImplDocumentBuilder *) copy;
  typedCopy.namespaceAware = namespaceAware_;
  typedCopy.validating = validating_;
  typedCopy.xIncludeAware = xIncludeAware_;
  typedCopy.errorHandler = errorHandler_;
  typedCopy.entityResolver = entityResolver_;
  typedCopy.factory = factory_;
}

@end
