//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: pdfreporter-extensions/src/org/oss/pdfreporter/uses/java/awt/text/AttributedString.java
//
//  Created by kendra on 9/27/13.
//

#include "IOSClass.h"
#include "IOSIntArray.h"
#include "IOSObjectArray.h"
#include "java/lang/CloneNotSupportedException.h"
#include "java/lang/Exception.h"
#include "java/lang/IllegalArgumentException.h"
#include "java/lang/InternalError.h"
#include "java/lang/NullPointerException.h"
#include "java/lang/StringBuffer.h"
#include "java/lang/UnsupportedOperationException.h"
#include "java/util/HashSet.h"
#include "java/util/Hashtable.h"
#include "java/util/Iterator.h"
#include "java/util/Map.h"
#include "java/util/Set.h"
#include "java/util/Vector.h"
#include "org/oss/pdfreporter/uses/java/awt/text/Annotation.h"
#include "org/oss/pdfreporter/uses/java/awt/text/AttributedString.h"
#include "org/oss/pdfreporter/uses/java/awt/text/IAttributedCharacterIterator.h"
#include "org/oss/pdfreporter/uses/java/awt/text/ICharacterIterator.h"

@implementation OrgOssPdfreporterUsesJavaAwtTextAttributedString

@synthesize text = text_;
@synthesize runArraySize = runArraySize_;
@synthesize runCount = runCount_;
@synthesize runStarts = runStarts_;
@synthesize runAttributes = runAttributes_;
@synthesize runAttributeValues = runAttributeValues_;

- (id)initWithOrgOssPdfreporterUsesJavaAwtTextIAttributedCharacterIteratorArray:(IOSObjectArray *)iterators {
  if ((self = [super init])) {
    if (iterators == nil) {
      @throw [[JavaLangNullPointerException alloc] initWithNSString:@"Iterators must not be null"];
    }
    if ((int) [((IOSObjectArray *) nil_chk(iterators)) count] == 0) {
      text_ = @"";
    }
    else {
      JavaLangStringBuffer *buffer = [[JavaLangStringBuffer alloc] init];
      for (int counter = 0; counter < (int) [((IOSObjectArray *) nil_chk(iterators)) count]; counter++) {
        [self appendContentsWithJavaLangStringBuffer:buffer withOrgOssPdfreporterUsesJavaAwtTextICharacterIterator:[((IOSObjectArray *) nil_chk(iterators)) objectAtIndex:counter]];
      }
      text_ = [((JavaLangStringBuffer *) nil_chk(buffer)) description];
      if ([((NSString *) nil_chk(text_)) length] > 0) {
        int offset = 0;
        id<JavaUtilMap> last = nil;
        for (int counter = 0; counter < (int) [((IOSObjectArray *) nil_chk(iterators)) count]; counter++) {
          id<OrgOssPdfreporterUsesJavaAwtTextIAttributedCharacterIterator> iterator = [((IOSObjectArray *) nil_chk(iterators)) objectAtIndex:counter];
          int start = [((id<OrgOssPdfreporterUsesJavaAwtTextIAttributedCharacterIterator>) nil_chk(iterator)) getBeginIndex];
          int end = [((id<OrgOssPdfreporterUsesJavaAwtTextIAttributedCharacterIterator>) nil_chk(iterator)) getEndIndex];
          int index = start;
          while (index < end) {
            [((id<OrgOssPdfreporterUsesJavaAwtTextIAttributedCharacterIterator>) nil_chk(iterator)) setIndexWithInt:index];
            id<JavaUtilMap> attrs = [((id<OrgOssPdfreporterUsesJavaAwtTextIAttributedCharacterIterator>) nil_chk(iterator)) getAttributes];
            if ([OrgOssPdfreporterUsesJavaAwtTextAttributedString mapsDifferWithJavaUtilMap:last withJavaUtilMap:attrs]) {
              [self setAttributesWithJavaUtilMap:attrs withInt:index - start + offset];
            }
            last = attrs;
            index = [((id<OrgOssPdfreporterUsesJavaAwtTextIAttributedCharacterIterator>) nil_chk(iterator)) getRunLimit];
          }
          offset += (end - start);
        }
      }
    }
  }
  return self;
}

- (id)initWithNSString:(NSString *)text {
  if ((self = [super init])) {
    if (text == nil) {
      @throw [[JavaLangNullPointerException alloc] init];
    }
    self.text = text;
  }
  return self;
}

- (id)initWithNSString:(NSString *)text
       withJavaUtilMap:(id<JavaUtilMap>)attributes {
  if ((self = [super init])) {
    if (text == nil || attributes == nil) {
      @throw [[JavaLangNullPointerException alloc] init];
    }
    self.text = text;
    if ([((NSString *) nil_chk(text)) length] == 0) {
      if ([((id<JavaUtilMap>) nil_chk(attributes)) isEmpty]) return self;
      @throw [[JavaLangIllegalArgumentException alloc] initWithNSString:@"Can't add attribute to 0-length text"];
    }
    int attributeCount = [((id<JavaUtilMap>) nil_chk(attributes)) size];
    if (attributeCount > 0) {
      [self createRunAttributeDataVectors];
      JavaUtilVector *newRunAttributes = [[JavaUtilVector alloc] initWithInt:attributeCount];
      JavaUtilVector *newRunAttributeValues = [[JavaUtilVector alloc] initWithInt:attributeCount];
      (void) [((IOSObjectArray *) nil_chk(runAttributes_)) replaceObjectAtIndex:0 withObject:newRunAttributes];
      (void) [((IOSObjectArray *) nil_chk(runAttributeValues_)) replaceObjectAtIndex:0 withObject:newRunAttributeValues];
      id<JavaUtilIterator> iterator = [((id<JavaUtilSet>) nil_chk([((id<JavaUtilMap>) nil_chk(attributes)) entrySet])) iterator];
      while ([((id<JavaUtilIterator>) nil_chk(iterator)) hasNext]) {
        id<JavaUtilMap_Entry> entry = (id<JavaUtilMap_Entry>) [((id<JavaUtilIterator>) nil_chk(iterator)) next];
        [((JavaUtilVector *) nil_chk(newRunAttributes)) addElementWithId:[((id<JavaUtilMap_Entry>) nil_chk(entry)) getKey]];
        [((JavaUtilVector *) nil_chk(newRunAttributeValues)) addElementWithId:[((id<JavaUtilMap_Entry>) nil_chk(entry)) getValue]];
      }
    }
  }
  return self;
}

- (id)initWithOrgOssPdfreporterUsesJavaAwtTextIAttributedCharacterIterator:(id<OrgOssPdfreporterUsesJavaAwtTextIAttributedCharacterIterator>)text {
  return [self initOrgOssPdfreporterUsesJavaAwtTextAttributedStringWithOrgOssPdfreporterUsesJavaAwtTextIAttributedCharacterIterator:text withInt:[((id<OrgOssPdfreporterUsesJavaAwtTextIAttributedCharacterIterator>) nil_chk(text)) getBeginIndex] withInt:[((id<OrgOssPdfreporterUsesJavaAwtTextIAttributedCharacterIterator>) nil_chk(text)) getEndIndex] withOrgOssPdfreporterUsesJavaAwtTextIAttributedCharacterIterator_AttributeArray:nil];
}

- (id)initWithOrgOssPdfreporterUsesJavaAwtTextIAttributedCharacterIterator:(id<OrgOssPdfreporterUsesJavaAwtTextIAttributedCharacterIterator>)text
                                                                   withInt:(int)beginIndex
                                                                   withInt:(int)endIndex {
  return [self initOrgOssPdfreporterUsesJavaAwtTextAttributedStringWithOrgOssPdfreporterUsesJavaAwtTextIAttributedCharacterIterator:text withInt:beginIndex withInt:endIndex withOrgOssPdfreporterUsesJavaAwtTextIAttributedCharacterIterator_AttributeArray:nil];
}

- (id)initOrgOssPdfreporterUsesJavaAwtTextAttributedStringWithOrgOssPdfreporterUsesJavaAwtTextIAttributedCharacterIterator:(id<OrgOssPdfreporterUsesJavaAwtTextIAttributedCharacterIterator>)text
                                                                                                                   withInt:(int)beginIndex
                                                                                                                   withInt:(int)endIndex
                                           withOrgOssPdfreporterUsesJavaAwtTextIAttributedCharacterIterator_AttributeArray:(IOSObjectArray *)attributes {
  if ((self = [super init])) {
    if (text == nil) {
      @throw [[JavaLangNullPointerException alloc] init];
    }
    int textBeginIndex = [((id<OrgOssPdfreporterUsesJavaAwtTextIAttributedCharacterIterator>) nil_chk(text)) getBeginIndex];
    int textEndIndex = [((id<OrgOssPdfreporterUsesJavaAwtTextIAttributedCharacterIterator>) nil_chk(text)) getEndIndex];
    if (beginIndex < textBeginIndex || endIndex > textEndIndex || beginIndex > endIndex) @throw [[JavaLangIllegalArgumentException alloc] initWithNSString:@"Invalid substring range"];
    JavaLangStringBuffer *textBuffer = [[JavaLangStringBuffer alloc] init];
    [((id<OrgOssPdfreporterUsesJavaAwtTextIAttributedCharacterIterator>) nil_chk(text)) setIndexWithInt:beginIndex];
    for (unichar c = [((id<OrgOssPdfreporterUsesJavaAwtTextIAttributedCharacterIterator>) nil_chk(text)) current]; [((id<OrgOssPdfreporterUsesJavaAwtTextIAttributedCharacterIterator>) nil_chk(text)) getIndex] < endIndex; c = [((id<OrgOssPdfreporterUsesJavaAwtTextIAttributedCharacterIterator>) nil_chk(text)) next]) (void) [((JavaLangStringBuffer *) nil_chk(textBuffer)) appendWithUnichar:c];
    self.text = [((JavaLangStringBuffer *) nil_chk(textBuffer)) description];
    if (beginIndex == endIndex) return self;
    JavaUtilHashSet *keys = [[JavaUtilHashSet alloc] init];
    if (attributes == nil) {
      [((JavaUtilHashSet *) nil_chk(keys)) addAllWithJavaUtilCollection:[((id<OrgOssPdfreporterUsesJavaAwtTextIAttributedCharacterIterator>) nil_chk(text)) getAllAttributeKeys]];
    }
    else {
      for (int i = 0; i < (int) [attributes count]; i++) [((JavaUtilHashSet *) nil_chk(keys)) addWithId:[attributes objectAtIndex:i]];
      [((JavaUtilHashSet *) nil_chk(keys)) retainAllWithJavaUtilCollection:[((id<OrgOssPdfreporterUsesJavaAwtTextIAttributedCharacterIterator>) nil_chk(text)) getAllAttributeKeys]];
    }
    if ([((JavaUtilHashSet *) nil_chk(keys)) isEmpty]) return self;
    id<JavaUtilIterator> itr = [((JavaUtilHashSet *) nil_chk(keys)) iterator];
    while ([((id<JavaUtilIterator>) nil_chk(itr)) hasNext]) {
      OrgOssPdfreporterUsesJavaAwtTextIAttributedCharacterIterator_Attribute *attributeKey = (OrgOssPdfreporterUsesJavaAwtTextIAttributedCharacterIterator_Attribute *) [((id<JavaUtilIterator>) nil_chk(itr)) next];
      [((id<OrgOssPdfreporterUsesJavaAwtTextIAttributedCharacterIterator>) nil_chk(text)) setIndexWithInt:textBeginIndex];
      while ([((id<OrgOssPdfreporterUsesJavaAwtTextIAttributedCharacterIterator>) nil_chk(text)) getIndex] < endIndex) {
        int start = [((id<OrgOssPdfreporterUsesJavaAwtTextIAttributedCharacterIterator>) nil_chk(text)) getRunStartWithOrgOssPdfreporterUsesJavaAwtTextIAttributedCharacterIterator_Attribute:attributeKey];
        int limit = [((id<OrgOssPdfreporterUsesJavaAwtTextIAttributedCharacterIterator>) nil_chk(text)) getRunLimitWithOrgOssPdfreporterUsesJavaAwtTextIAttributedCharacterIterator_Attribute:attributeKey];
        id value = [((id<OrgOssPdfreporterUsesJavaAwtTextIAttributedCharacterIterator>) nil_chk(text)) getAttributeWithOrgOssPdfreporterUsesJavaAwtTextIAttributedCharacterIterator_Attribute:attributeKey];
        if (value != nil) {
          if ([value isKindOfClass:[OrgOssPdfreporterUsesJavaAwtTextAnnotation class]]) {
            if (start >= beginIndex && limit <= endIndex) {
              [self addAttributeWithOrgOssPdfreporterUsesJavaAwtTextIAttributedCharacterIterator_Attribute:attributeKey withId:value withInt:start - beginIndex withInt:limit - beginIndex];
            }
            else {
              if (limit > endIndex) break;
            }
          }
          else {
            if (start >= endIndex) break;
            if (limit > beginIndex) {
              if (start < beginIndex) start = beginIndex;
              if (limit > endIndex) limit = endIndex;
              if (start != limit) {
                [self addAttributeWithOrgOssPdfreporterUsesJavaAwtTextIAttributedCharacterIterator_Attribute:attributeKey withId:value withInt:start - beginIndex withInt:limit - beginIndex];
              }
            }
          }
        }
        [((id<OrgOssPdfreporterUsesJavaAwtTextIAttributedCharacterIterator>) nil_chk(text)) setIndexWithInt:limit];
      }
    }
  }
  return self;
}

- (id)initWithOrgOssPdfreporterUsesJavaAwtTextIAttributedCharacterIterator:(id<OrgOssPdfreporterUsesJavaAwtTextIAttributedCharacterIterator>)text
                                                                   withInt:(int)beginIndex
                                                                   withInt:(int)endIndex
withOrgOssPdfreporterUsesJavaAwtTextIAttributedCharacterIterator_AttributeArray:(IOSObjectArray *)attributes {
  return [self initOrgOssPdfreporterUsesJavaAwtTextAttributedStringWithOrgOssPdfreporterUsesJavaAwtTextIAttributedCharacterIterator:text withInt:beginIndex withInt:endIndex withOrgOssPdfreporterUsesJavaAwtTextIAttributedCharacterIterator_AttributeArray:attributes];
}

- (void)addAttributeWithOrgOssPdfreporterUsesJavaAwtTextIAttributedCharacterIterator_Attribute:(OrgOssPdfreporterUsesJavaAwtTextIAttributedCharacterIterator_Attribute *)attribute
                                                                                        withId:(id)value {
  if (attribute == nil) {
    @throw [[JavaLangNullPointerException alloc] init];
  }
  int len = [self length];
  if (len == 0) {
    @throw [[JavaLangIllegalArgumentException alloc] initWithNSString:@"Can't add attribute to 0-length text"];
  }
  [self addAttributeImplWithOrgOssPdfreporterUsesJavaAwtTextIAttributedCharacterIterator_Attribute:attribute withId:value withInt:0 withInt:len];
}

- (void)addAttributeWithOrgOssPdfreporterUsesJavaAwtTextIAttributedCharacterIterator_Attribute:(OrgOssPdfreporterUsesJavaAwtTextIAttributedCharacterIterator_Attribute *)attribute
                                                                                        withId:(id)value
                                                                                       withInt:(int)beginIndex
                                                                                       withInt:(int)endIndex {
  if (attribute == nil) {
    @throw [[JavaLangNullPointerException alloc] init];
  }
  if (beginIndex < 0 || endIndex > [self length] || beginIndex >= endIndex) {
    @throw [[JavaLangIllegalArgumentException alloc] initWithNSString:@"Invalid substring range"];
  }
  [self addAttributeImplWithOrgOssPdfreporterUsesJavaAwtTextIAttributedCharacterIterator_Attribute:attribute withId:value withInt:beginIndex withInt:endIndex];
}

- (void)addAttributesWithJavaUtilMap:(id<JavaUtilMap>)attributes
                             withInt:(int)beginIndex
                             withInt:(int)endIndex {
  if (attributes == nil) {
    @throw [[JavaLangNullPointerException alloc] init];
  }
  if (beginIndex < 0 || endIndex > [self length] || beginIndex > endIndex) {
    @throw [[JavaLangIllegalArgumentException alloc] initWithNSString:@"Invalid substring range"];
  }
  if (beginIndex == endIndex) {
    if ([((id<JavaUtilMap>) nil_chk(attributes)) isEmpty]) return;
    @throw [[JavaLangIllegalArgumentException alloc] initWithNSString:@"Can't add attribute to 0-length text"];
  }
  if (runCount_ == 0) {
    [self createRunAttributeDataVectors];
  }
  int beginRunIndex = [self ensureRunBreakWithInt:beginIndex];
  int endRunIndex = [self ensureRunBreakWithInt:endIndex];
  id<JavaUtilIterator> iterator = [((id<JavaUtilSet>) nil_chk([((id<JavaUtilMap>) nil_chk(attributes)) entrySet])) iterator];
  while ([((id<JavaUtilIterator>) nil_chk(iterator)) hasNext]) {
    id<JavaUtilMap_Entry> entry = (id<JavaUtilMap_Entry>) [((id<JavaUtilIterator>) nil_chk(iterator)) next];
    [self addAttributeRunDataWithOrgOssPdfreporterUsesJavaAwtTextIAttributedCharacterIterator_Attribute:(OrgOssPdfreporterUsesJavaAwtTextIAttributedCharacterIterator_Attribute *) [((id<JavaUtilMap_Entry>) nil_chk(entry)) getKey] withId:[((id<JavaUtilMap_Entry>) nil_chk(entry)) getValue] withInt:beginRunIndex withInt:endRunIndex];
  }
}

- (void)addAttributeImplWithOrgOssPdfreporterUsesJavaAwtTextIAttributedCharacterIterator_Attribute:(OrgOssPdfreporterUsesJavaAwtTextIAttributedCharacterIterator_Attribute *)attribute
                                                                                            withId:(id)value
                                                                                           withInt:(int)beginIndex
                                                                                           withInt:(int)endIndex {
  @synchronized(self) {
    {
      if (runCount_ == 0) {
        [self createRunAttributeDataVectors];
      }
      int beginRunIndex = [self ensureRunBreakWithInt:beginIndex];
      int endRunIndex = [self ensureRunBreakWithInt:endIndex];
      [self addAttributeRunDataWithOrgOssPdfreporterUsesJavaAwtTextIAttributedCharacterIterator_Attribute:attribute withId:value withInt:beginRunIndex withInt:endRunIndex];
    }
  }
}

- (void)createRunAttributeDataVectors {
  IOSIntArray *newRunStarts = [IOSIntArray arrayWithLength:OrgOssPdfreporterUsesJavaAwtTextAttributedString_ARRAY_SIZE_INCREMENT];
  IOSObjectArray *newRunAttributes = [IOSObjectArray arrayWithLength:OrgOssPdfreporterUsesJavaAwtTextAttributedString_ARRAY_SIZE_INCREMENT type:[IOSClass classWithClass:[JavaUtilVector class]]];
  IOSObjectArray *newRunAttributeValues = [IOSObjectArray arrayWithLength:OrgOssPdfreporterUsesJavaAwtTextAttributedString_ARRAY_SIZE_INCREMENT type:[IOSClass classWithClass:[JavaUtilVector class]]];
  runStarts_ = newRunStarts;
  runAttributes_ = newRunAttributes;
  runAttributeValues_ = newRunAttributeValues;
  runArraySize_ = OrgOssPdfreporterUsesJavaAwtTextAttributedString_ARRAY_SIZE_INCREMENT;
  runCount_ = 1;
}

- (int)ensureRunBreakWithInt:(int)offset {
  return [self ensureRunBreakWithInt:offset withBOOL:YES];
}

- (int)ensureRunBreakWithInt:(int)offset
                    withBOOL:(BOOL)copyAttrs {
  if (offset == [self length]) {
    return runCount_;
  }
  int runIndex = 0;
  while (runIndex < runCount_ && [((IOSIntArray *) nil_chk(runStarts_)) intAtIndex:runIndex] < offset) {
    runIndex++;
  }
  if (runIndex < runCount_ && [((IOSIntArray *) nil_chk(runStarts_)) intAtIndex:runIndex] == offset) {
    return runIndex;
  }
  if (runCount_ == runArraySize_) {
    int newArraySize = runArraySize_ + OrgOssPdfreporterUsesJavaAwtTextAttributedString_ARRAY_SIZE_INCREMENT;
    IOSIntArray *newRunStarts = [IOSIntArray arrayWithLength:newArraySize];
    IOSObjectArray *newRunAttributes = [IOSObjectArray arrayWithLength:newArraySize type:[IOSClass classWithClass:[JavaUtilVector class]]];
    IOSObjectArray *newRunAttributeValues = [IOSObjectArray arrayWithLength:newArraySize type:[IOSClass classWithClass:[JavaUtilVector class]]];
    for (int i = 0; i < runArraySize_; i++) {
      (*[((IOSIntArray *) nil_chk(newRunStarts)) intRefAtIndex:i]) = [((IOSIntArray *) nil_chk(runStarts_)) intAtIndex:i];
      (void) [((IOSObjectArray *) nil_chk(newRunAttributes)) replaceObjectAtIndex:i withObject:[((IOSObjectArray *) nil_chk(runAttributes_)) objectAtIndex:i]];
      (void) [((IOSObjectArray *) nil_chk(newRunAttributeValues)) replaceObjectAtIndex:i withObject:[((IOSObjectArray *) nil_chk(runAttributeValues_)) objectAtIndex:i]];
    }
    runStarts_ = newRunStarts;
    runAttributes_ = newRunAttributes;
    runAttributeValues_ = newRunAttributeValues;
    runArraySize_ = newArraySize;
  }
  JavaUtilVector *newRunAttributes = nil;
  JavaUtilVector *newRunAttributeValues = nil;
  if (copyAttrs) {
    JavaUtilVector *oldRunAttributes = [((IOSObjectArray *) nil_chk(runAttributes_)) objectAtIndex:runIndex - 1];
    JavaUtilVector *oldRunAttributeValues = [((IOSObjectArray *) nil_chk(runAttributeValues_)) objectAtIndex:runIndex - 1];
    if (oldRunAttributes != nil) {
      newRunAttributes = (JavaUtilVector *) [oldRunAttributes clone];
    }
    if (oldRunAttributeValues != nil) {
      newRunAttributeValues = (JavaUtilVector *) [oldRunAttributeValues clone];
    }
  }
  runCount_++;
  for (int i = runCount_ - 1; i > runIndex; i--) {
    (*[((IOSIntArray *) nil_chk(runStarts_)) intRefAtIndex:i]) = [((IOSIntArray *) nil_chk(runStarts_)) intAtIndex:i - 1];
    (void) [((IOSObjectArray *) nil_chk(runAttributes_)) replaceObjectAtIndex:i withObject:[((IOSObjectArray *) nil_chk(runAttributes_)) objectAtIndex:i - 1]];
    (void) [((IOSObjectArray *) nil_chk(runAttributeValues_)) replaceObjectAtIndex:i withObject:[((IOSObjectArray *) nil_chk(runAttributeValues_)) objectAtIndex:i - 1]];
  }
  (*[((IOSIntArray *) nil_chk(runStarts_)) intRefAtIndex:runIndex]) = offset;
  (void) [((IOSObjectArray *) nil_chk(runAttributes_)) replaceObjectAtIndex:runIndex withObject:newRunAttributes];
  (void) [((IOSObjectArray *) nil_chk(runAttributeValues_)) replaceObjectAtIndex:runIndex withObject:newRunAttributeValues];
  return runIndex;
}

- (void)addAttributeRunDataWithOrgOssPdfreporterUsesJavaAwtTextIAttributedCharacterIterator_Attribute:(OrgOssPdfreporterUsesJavaAwtTextIAttributedCharacterIterator_Attribute *)attribute
                                                                                               withId:(id)value
                                                                                              withInt:(int)beginRunIndex
                                                                                              withInt:(int)endRunIndex {
  for (int i = beginRunIndex; i < endRunIndex; i++) {
    int keyValueIndex = -1;
    if ([((IOSObjectArray *) nil_chk(runAttributes_)) objectAtIndex:i] == nil) {
      JavaUtilVector *newRunAttributes = [[JavaUtilVector alloc] init];
      JavaUtilVector *newRunAttributeValues = [[JavaUtilVector alloc] init];
      (void) [((IOSObjectArray *) nil_chk(runAttributes_)) replaceObjectAtIndex:i withObject:newRunAttributes];
      (void) [((IOSObjectArray *) nil_chk(runAttributeValues_)) replaceObjectAtIndex:i withObject:newRunAttributeValues];
    }
    else {
      keyValueIndex = [((JavaUtilVector *) nil_chk([((IOSObjectArray *) nil_chk(runAttributes_)) objectAtIndex:i])) indexOfWithId:attribute];
    }
    if (keyValueIndex == -1) {
      int oldSize = [((JavaUtilVector *) nil_chk([((IOSObjectArray *) nil_chk(runAttributes_)) objectAtIndex:i])) size];
      [((JavaUtilVector *) nil_chk([((IOSObjectArray *) nil_chk(runAttributes_)) objectAtIndex:i])) addElementWithId:attribute];
      @try {
        [((JavaUtilVector *) nil_chk([((IOSObjectArray *) nil_chk(runAttributeValues_)) objectAtIndex:i])) addElementWithId:value];
      }
      @catch (JavaLangException *e) {
        [((JavaUtilVector *) nil_chk([((IOSObjectArray *) nil_chk(runAttributes_)) objectAtIndex:i])) setSizeWithInt:oldSize];
        [((JavaUtilVector *) nil_chk([((IOSObjectArray *) nil_chk(runAttributeValues_)) objectAtIndex:i])) setSizeWithInt:oldSize];
      }
    }
    else {
      (void) [((JavaUtilVector *) nil_chk([((IOSObjectArray *) nil_chk(runAttributeValues_)) objectAtIndex:i])) setWithInt:keyValueIndex withId:value];
    }
  }
}

- (id<OrgOssPdfreporterUsesJavaAwtTextIAttributedCharacterIterator>)getIterator {
  return [self getIteratorWithOrgOssPdfreporterUsesJavaAwtTextIAttributedCharacterIterator_AttributeArray:nil withInt:0 withInt:[self length]];
}

- (id<OrgOssPdfreporterUsesJavaAwtTextIAttributedCharacterIterator>)getIteratorWithOrgOssPdfreporterUsesJavaAwtTextIAttributedCharacterIterator_AttributeArray:(IOSObjectArray *)attributes {
  return [self getIteratorWithOrgOssPdfreporterUsesJavaAwtTextIAttributedCharacterIterator_AttributeArray:attributes withInt:0 withInt:[self length]];
}

- (id<OrgOssPdfreporterUsesJavaAwtTextIAttributedCharacterIterator>)getIteratorWithOrgOssPdfreporterUsesJavaAwtTextIAttributedCharacterIterator_AttributeArray:(IOSObjectArray *)attributes
                                                                                                                                                       withInt:(int)beginIndex
                                                                                                                                                       withInt:(int)endIndex {
  return [[OrgOssPdfreporterUsesJavaAwtTextAttributedString_AttributedStringIterator alloc] initWithOrgOssPdfreporterUsesJavaAwtTextAttributedString:self withOrgOssPdfreporterUsesJavaAwtTextIAttributedCharacterIterator_AttributeArray:attributes withInt:beginIndex withInt:endIndex];
}

- (int)length {
  return [((NSString *) nil_chk(text_)) length];
}

- (unichar)charAtWithInt:(int)index {
  return [((NSString *) nil_chk(text_)) charAtWithInt:index];
}

- (id)getAttributeWithOrgOssPdfreporterUsesJavaAwtTextIAttributedCharacterIterator_Attribute:(OrgOssPdfreporterUsesJavaAwtTextIAttributedCharacterIterator_Attribute *)attribute
                                                                                     withInt:(int)runIndex {
  @synchronized(self) {
    {
      JavaUtilVector *currentRunAttributes = [((IOSObjectArray *) nil_chk(runAttributes_)) objectAtIndex:runIndex];
      JavaUtilVector *currentRunAttributeValues = [((IOSObjectArray *) nil_chk(runAttributeValues_)) objectAtIndex:runIndex];
      if (currentRunAttributes == nil) {
        return nil;
      }
      int attributeIndex = [((JavaUtilVector *) nil_chk(currentRunAttributes)) indexOfWithId:attribute];
      if (attributeIndex != -1) {
        return [((JavaUtilVector *) nil_chk(currentRunAttributeValues)) elementAtWithInt:attributeIndex];
      }
      else {
        return nil;
      }
    }
  }
}

- (id)getAttributeCheckRangeWithOrgOssPdfreporterUsesJavaAwtTextIAttributedCharacterIterator_Attribute:(OrgOssPdfreporterUsesJavaAwtTextIAttributedCharacterIterator_Attribute *)attribute
                                                                                               withInt:(int)runIndex
                                                                                               withInt:(int)beginIndex
                                                                                               withInt:(int)endIndex {
  id value = [self getAttributeWithOrgOssPdfreporterUsesJavaAwtTextIAttributedCharacterIterator_Attribute:attribute withInt:runIndex];
  if ([value isKindOfClass:[OrgOssPdfreporterUsesJavaAwtTextAnnotation class]]) {
    if (beginIndex > 0) {
      int currIndex = runIndex;
      int runStart = [((IOSIntArray *) nil_chk(runStarts_)) intAtIndex:currIndex];
      while (runStart >= beginIndex && [OrgOssPdfreporterUsesJavaAwtTextAttributedString valuesMatchWithId:value withId:[self getAttributeWithOrgOssPdfreporterUsesJavaAwtTextIAttributedCharacterIterator_Attribute:attribute withInt:currIndex - 1]]) {
        currIndex--;
        runStart = [((IOSIntArray *) nil_chk(runStarts_)) intAtIndex:currIndex];
      }
      if (runStart < beginIndex) {
        return nil;
      }
    }
    int textLength = [self length];
    if (endIndex < textLength) {
      int currIndex = runIndex;
      int runLimit = (currIndex < runCount_ - 1) ? [((IOSIntArray *) nil_chk(runStarts_)) intAtIndex:currIndex + 1] : textLength;
      while (runLimit <= endIndex && [OrgOssPdfreporterUsesJavaAwtTextAttributedString valuesMatchWithId:value withId:[self getAttributeWithOrgOssPdfreporterUsesJavaAwtTextIAttributedCharacterIterator_Attribute:attribute withInt:currIndex + 1]]) {
        currIndex++;
        runLimit = (currIndex < runCount_ - 1) ? [((IOSIntArray *) nil_chk(runStarts_)) intAtIndex:currIndex + 1] : textLength;
      }
      if (runLimit > endIndex) {
        return nil;
      }
    }
  }
  return value;
}

- (BOOL)attributeValuesMatchWithJavaUtilSet:(id<JavaUtilSet>)attributes
                                    withInt:(int)runIndex1
                                    withInt:(int)runIndex2 {
  id<JavaUtilIterator> iterator = [((id<JavaUtilSet>) nil_chk(attributes)) iterator];
  while ([((id<JavaUtilIterator>) nil_chk(iterator)) hasNext]) {
    OrgOssPdfreporterUsesJavaAwtTextIAttributedCharacterIterator_Attribute *key = (OrgOssPdfreporterUsesJavaAwtTextIAttributedCharacterIterator_Attribute *) [((id<JavaUtilIterator>) nil_chk(iterator)) next];
    if (![OrgOssPdfreporterUsesJavaAwtTextAttributedString valuesMatchWithId:[self getAttributeWithOrgOssPdfreporterUsesJavaAwtTextIAttributedCharacterIterator_Attribute:key withInt:runIndex1] withId:[self getAttributeWithOrgOssPdfreporterUsesJavaAwtTextIAttributedCharacterIterator_Attribute:key withInt:runIndex2]]) {
      return NO;
    }
  }
  return YES;
}

+ (BOOL)valuesMatchWithId:(id)value1
                   withId:(id)value2 {
  if (value1 == nil) {
    return value2 == nil;
  }
  else {
    return [value1 isEqual:value2];
  }
}

- (void)appendContentsWithJavaLangStringBuffer:(JavaLangStringBuffer *)buf
withOrgOssPdfreporterUsesJavaAwtTextICharacterIterator:(id<OrgOssPdfreporterUsesJavaAwtTextICharacterIterator>)iterator {
  int index = [((id<OrgOssPdfreporterUsesJavaAwtTextICharacterIterator>) nil_chk(iterator)) getBeginIndex];
  int end = [((id<OrgOssPdfreporterUsesJavaAwtTextICharacterIterator>) nil_chk(iterator)) getEndIndex];
  while (index < end) {
    [((id<OrgOssPdfreporterUsesJavaAwtTextICharacterIterator>) nil_chk(iterator)) setIndexWithInt:index++];
    (void) [((JavaLangStringBuffer *) nil_chk(buf)) appendWithUnichar:[((id<OrgOssPdfreporterUsesJavaAwtTextICharacterIterator>) nil_chk(iterator)) current]];
  }
}

- (void)setAttributesWithJavaUtilMap:(id<JavaUtilMap>)attrs
                             withInt:(int)offset {
  if (runCount_ == 0) {
    [self createRunAttributeDataVectors];
  }
  int index = [self ensureRunBreakWithInt:offset withBOOL:NO];
  int size;
  if (attrs != nil && (size = [((id<JavaUtilMap>) nil_chk(attrs)) size]) > 0) {
    JavaUtilVector *runAttrs = [[JavaUtilVector alloc] initWithInt:size];
    JavaUtilVector *runValues = [[JavaUtilVector alloc] initWithInt:size];
    id<JavaUtilIterator> iterator = [((id<JavaUtilSet>) nil_chk([((id<JavaUtilMap>) nil_chk(attrs)) entrySet])) iterator];
    while ([((id<JavaUtilIterator>) nil_chk(iterator)) hasNext]) {
      id<JavaUtilMap_Entry> entry = (id<JavaUtilMap_Entry>) [((id<JavaUtilIterator>) nil_chk(iterator)) next];
      [((JavaUtilVector *) nil_chk(runAttrs)) addWithId:[((id<JavaUtilMap_Entry>) nil_chk(entry)) getKey]];
      [((JavaUtilVector *) nil_chk(runValues)) addWithId:[((id<JavaUtilMap_Entry>) nil_chk(entry)) getValue]];
    }
    (void) [((IOSObjectArray *) nil_chk(runAttributes_)) replaceObjectAtIndex:index withObject:runAttrs];
    (void) [((IOSObjectArray *) nil_chk(runAttributeValues_)) replaceObjectAtIndex:index withObject:runValues];
  }
}

+ (BOOL)mapsDifferWithJavaUtilMap:(id<JavaUtilMap>)last
                  withJavaUtilMap:(id<JavaUtilMap>)attrs {
  if (last == nil) {
    return (attrs != nil && [((id<JavaUtilMap>) nil_chk(attrs)) size] > 0);
  }
  return (![((id<JavaUtilMap>) nil_chk(last)) isEqual:attrs]);
}

- (void)copyAllPropertiesTo:(id)copy {
  [super copyAllPropertiesTo:copy];
  OrgOssPdfreporterUsesJavaAwtTextAttributedString *typedCopy = (OrgOssPdfreporterUsesJavaAwtTextAttributedString *) copy;
  typedCopy.text = text_;
  typedCopy.runArraySize = runArraySize_;
  typedCopy.runCount = runCount_;
  typedCopy.runStarts = runStarts_;
  typedCopy.runAttributes = runAttributes_;
  typedCopy.runAttributeValues = runAttributeValues_;
}

@end
@implementation OrgOssPdfreporterUsesJavaAwtTextAttributeEntry

@synthesize key = key_;
@synthesize value = value_;

- (id)initWithOrgOssPdfreporterUsesJavaAwtTextIAttributedCharacterIterator_Attribute:(OrgOssPdfreporterUsesJavaAwtTextIAttributedCharacterIterator_Attribute *)key
                                                                              withId:(id)value {
  if ((self = [super init])) {
    self.key = key;
    self.value = value;
  }
  return self;
}

- (BOOL)isEqual:(id)o {
  if (!([o isKindOfClass:[OrgOssPdfreporterUsesJavaAwtTextAttributeEntry class]])) {
    return NO;
  }
  OrgOssPdfreporterUsesJavaAwtTextAttributeEntry *other = (OrgOssPdfreporterUsesJavaAwtTextAttributeEntry *) o;
  return [((OrgOssPdfreporterUsesJavaAwtTextIAttributedCharacterIterator_Attribute *) nil_chk(((OrgOssPdfreporterUsesJavaAwtTextAttributeEntry *) nil_chk(other)).key)) isEqual:key_] && (value_ == nil ? ((OrgOssPdfreporterUsesJavaAwtTextAttributeEntry *) nil_chk(other)).value == nil : [nil_chk(((OrgOssPdfreporterUsesJavaAwtTextAttributeEntry *) nil_chk(other)).value) isEqual:value_]);
}

- (id)getKey {
  return key_;
}

- (id)getValue {
  return value_;
}

- (id)setValueWithId:(id)newValue {
  @throw [[JavaLangUnsupportedOperationException alloc] init];
}

- (NSUInteger)hash {
  return [((OrgOssPdfreporterUsesJavaAwtTextIAttributedCharacterIterator_Attribute *) nil_chk(key_)) hash] ^ (value_ == nil ? 0 : [nil_chk(value_) hash]);
}

- (NSString *)description {
  return [NSString stringWithFormat:@"%@=%@", [((OrgOssPdfreporterUsesJavaAwtTextIAttributedCharacterIterator_Attribute *) nil_chk(key_)) description], [nil_chk(value_) description]];
}

- (void)copyAllPropertiesTo:(id)copy {
  [super copyAllPropertiesTo:copy];
  OrgOssPdfreporterUsesJavaAwtTextAttributeEntry *typedCopy = (OrgOssPdfreporterUsesJavaAwtTextAttributeEntry *) copy;
  typedCopy.key = key_;
  typedCopy.value = value_;
}

@end
@implementation OrgOssPdfreporterUsesJavaAwtTextAttributedString_AttributedStringIterator

@synthesize this$0 = this$0_;
@synthesize beginIndex = beginIndex_;
@synthesize endIndex = endIndex_;
@synthesize relevantAttributes = relevantAttributes_;
@synthesize currentIndex = currentIndex_;
@synthesize currentRunIndex = currentRunIndex_;
@synthesize currentRunStart = currentRunStart_;
@synthesize currentRunLimit = currentRunLimit_;

- (id)initWithOrgOssPdfreporterUsesJavaAwtTextAttributedString:(OrgOssPdfreporterUsesJavaAwtTextAttributedString *)outer$
withOrgOssPdfreporterUsesJavaAwtTextIAttributedCharacterIterator_AttributeArray:(IOSObjectArray *)attributes
                                                       withInt:(int)beginIndex
                                                       withInt:(int)endIndex {
  if ((self = [super init])) {
    this$0_ = outer$;
    if (beginIndex < 0 || beginIndex > endIndex || endIndex > [outer$ length]) {
      @throw [[JavaLangIllegalArgumentException alloc] initWithNSString:@"Invalid substring range"];
    }
    self.beginIndex = beginIndex;
    self.endIndex = endIndex;
    self.currentIndex = beginIndex;
    [self updateRunInfo];
    if (attributes != nil) {
      relevantAttributes_ = (IOSObjectArray *) [attributes clone];
    }
  }
  return self;
}

- (BOOL)isEqual:(id)obj {
  if (self == obj) {
    return YES;
  }
  if (!([obj isKindOfClass:[OrgOssPdfreporterUsesJavaAwtTextAttributedString_AttributedStringIterator class]])) {
    return NO;
  }
  OrgOssPdfreporterUsesJavaAwtTextAttributedString_AttributedStringIterator *that = (OrgOssPdfreporterUsesJavaAwtTextAttributedString_AttributedStringIterator *) obj;
  if (this$0_ != [((OrgOssPdfreporterUsesJavaAwtTextAttributedString_AttributedStringIterator *) nil_chk(that)) getString]) return NO;
  if (currentIndex_ != ((OrgOssPdfreporterUsesJavaAwtTextAttributedString_AttributedStringIterator *) nil_chk(that)).currentIndex || beginIndex_ != ((OrgOssPdfreporterUsesJavaAwtTextAttributedString_AttributedStringIterator *) nil_chk(that)).beginIndex || endIndex_ != ((OrgOssPdfreporterUsesJavaAwtTextAttributedString_AttributedStringIterator *) nil_chk(that)).endIndex) return NO;
  return YES;
}

- (NSUInteger)hash {
  return [((NSString *) nil_chk(this$0_.text)) hash] ^ currentIndex_ ^ beginIndex_ ^ endIndex_;
}

- (id)clone {
  @try {
    OrgOssPdfreporterUsesJavaAwtTextAttributedString_AttributedStringIterator *other = (OrgOssPdfreporterUsesJavaAwtTextAttributedString_AttributedStringIterator *) [super clone];
    return other;
  }
  @catch (JavaLangCloneNotSupportedException *e) {
    @throw [[JavaLangInternalError alloc] init];
  }
}

- (unichar)first {
  return [self internalSetIndexWithInt:beginIndex_];
}

- (unichar)last {
  if (endIndex_ == beginIndex_) {
    return [self internalSetIndexWithInt:endIndex_];
  }
  else {
    return [self internalSetIndexWithInt:endIndex_ - 1];
  }
}

- (unichar)current {
  if (currentIndex_ == endIndex_) {
    return OrgOssPdfreporterUsesJavaAwtTextICharacterIterator_DONE;
  }
  else {
    return [this$0_ charAtWithInt:currentIndex_];
  }
}

- (unichar)next {
  if (currentIndex_ < endIndex_) {
    return [self internalSetIndexWithInt:currentIndex_ + 1];
  }
  else {
    return OrgOssPdfreporterUsesJavaAwtTextICharacterIterator_DONE;
  }
}

- (unichar)previous {
  if (currentIndex_ > beginIndex_) {
    return [self internalSetIndexWithInt:currentIndex_ - 1];
  }
  else {
    return OrgOssPdfreporterUsesJavaAwtTextICharacterIterator_DONE;
  }
}

- (unichar)setIndexWithInt:(int)position {
  if (position < beginIndex_ || position > endIndex_) @throw [[JavaLangIllegalArgumentException alloc] initWithNSString:@"Invalid index"];
  return [self internalSetIndexWithInt:position];
}

- (int)getBeginIndex {
  return beginIndex_;
}

- (int)getEndIndex {
  return endIndex_;
}

- (int)getIndex {
  return currentIndex_;
}

- (int)getRunStart {
  return currentRunStart_;
}

- (int)getRunStartWithOrgOssPdfreporterUsesJavaAwtTextIAttributedCharacterIterator_Attribute:(OrgOssPdfreporterUsesJavaAwtTextIAttributedCharacterIterator_Attribute *)attribute {
  if (currentRunStart_ == beginIndex_ || currentRunIndex_ == -1) {
    return currentRunStart_;
  }
  else {
    id value = [self getAttributeWithOrgOssPdfreporterUsesJavaAwtTextIAttributedCharacterIterator_Attribute:attribute];
    int runStart = currentRunStart_;
    int runIndex = currentRunIndex_;
    while (runStart > beginIndex_ && [OrgOssPdfreporterUsesJavaAwtTextAttributedString valuesMatchWithId:value withId:[this$0_ getAttributeWithOrgOssPdfreporterUsesJavaAwtTextIAttributedCharacterIterator_Attribute:attribute withInt:runIndex - 1]]) {
      runIndex--;
      runStart = [((IOSIntArray *) nil_chk(this$0_.runStarts)) intAtIndex:runIndex];
    }
    if (runStart < beginIndex_) {
      runStart = beginIndex_;
    }
    return runStart;
  }
}

- (int)getRunStartWithJavaUtilSet:(id<JavaUtilSet>)attributes {
  if (currentRunStart_ == beginIndex_ || currentRunIndex_ == -1) {
    return currentRunStart_;
  }
  else {
    int runStart = currentRunStart_;
    int runIndex = currentRunIndex_;
    while (runStart > beginIndex_ && [this$0_ attributeValuesMatchWithJavaUtilSet:attributes withInt:currentRunIndex_ withInt:runIndex - 1]) {
      runIndex--;
      runStart = [((IOSIntArray *) nil_chk(this$0_.runStarts)) intAtIndex:runIndex];
    }
    if (runStart < beginIndex_) {
      runStart = beginIndex_;
    }
    return runStart;
  }
}

- (int)getRunLimit {
  return currentRunLimit_;
}

- (int)getRunLimitWithOrgOssPdfreporterUsesJavaAwtTextIAttributedCharacterIterator_Attribute:(OrgOssPdfreporterUsesJavaAwtTextIAttributedCharacterIterator_Attribute *)attribute {
  if (currentRunLimit_ == endIndex_ || currentRunIndex_ == -1) {
    return currentRunLimit_;
  }
  else {
    id value = [self getAttributeWithOrgOssPdfreporterUsesJavaAwtTextIAttributedCharacterIterator_Attribute:attribute];
    int runLimit = currentRunLimit_;
    int runIndex = currentRunIndex_;
    while (runLimit < endIndex_ && [OrgOssPdfreporterUsesJavaAwtTextAttributedString valuesMatchWithId:value withId:[this$0_ getAttributeWithOrgOssPdfreporterUsesJavaAwtTextIAttributedCharacterIterator_Attribute:attribute withInt:runIndex + 1]]) {
      runIndex++;
      runLimit = runIndex < this$0_.runCount - 1 ? [((IOSIntArray *) nil_chk(this$0_.runStarts)) intAtIndex:runIndex + 1] : endIndex_;
    }
    if (runLimit > endIndex_) {
      runLimit = endIndex_;
    }
    return runLimit;
  }
}

- (int)getRunLimitWithJavaUtilSet:(id<JavaUtilSet>)attributes {
  if (currentRunLimit_ == endIndex_ || currentRunIndex_ == -1) {
    return currentRunLimit_;
  }
  else {
    int runLimit = currentRunLimit_;
    int runIndex = currentRunIndex_;
    while (runLimit < endIndex_ && [this$0_ attributeValuesMatchWithJavaUtilSet:attributes withInt:currentRunIndex_ withInt:runIndex + 1]) {
      runIndex++;
      runLimit = runIndex < this$0_.runCount - 1 ? [((IOSIntArray *) nil_chk(this$0_.runStarts)) intAtIndex:runIndex + 1] : endIndex_;
    }
    if (runLimit > endIndex_) {
      runLimit = endIndex_;
    }
    return runLimit;
  }
}

- (id<JavaUtilMap>)getAttributes {
  if (this$0_.runAttributes == nil || currentRunIndex_ == -1 || [((IOSObjectArray *) nil_chk(this$0_.runAttributes)) objectAtIndex:currentRunIndex_] == nil) {
    return [[JavaUtilHashtable alloc] init];
  }
  return [[OrgOssPdfreporterUsesJavaAwtTextAttributedString_AttributeMap alloc] initWithOrgOssPdfreporterUsesJavaAwtTextAttributedString:this$0_ withInt:currentRunIndex_ withInt:beginIndex_ withInt:endIndex_];
}

- (id<JavaUtilSet>)getAllAttributeKeys {
  if (this$0_.runAttributes == nil) {
    return [[JavaUtilHashSet alloc] init];
  }
  @synchronized (this$0_) {
    id<JavaUtilSet> keys = [[JavaUtilHashSet alloc] init];
    int i = 0;
    while (i < this$0_.runCount) {
      if ([((IOSIntArray *) nil_chk(this$0_.runStarts)) intAtIndex:i] < endIndex_ && (i == this$0_.runCount - 1 || [((IOSIntArray *) nil_chk(this$0_.runStarts)) intAtIndex:i + 1] > beginIndex_)) {
        JavaUtilVector *currentRunAttributes = [((IOSObjectArray *) nil_chk(this$0_.runAttributes)) objectAtIndex:i];
        if (currentRunAttributes != nil) {
          int j = [currentRunAttributes size];
          while (j-- > 0) {
            [((id<JavaUtilSet>) nil_chk(keys)) addWithId:[currentRunAttributes getWithInt:j]];
          }
        }
      }
      i++;
    }
    return keys;
  }
}

- (id)getAttributeWithOrgOssPdfreporterUsesJavaAwtTextIAttributedCharacterIterator_Attribute:(OrgOssPdfreporterUsesJavaAwtTextIAttributedCharacterIterator_Attribute *)attribute {
  int runIndex = currentRunIndex_;
  if (runIndex < 0) {
    return nil;
  }
  return [this$0_ getAttributeCheckRangeWithOrgOssPdfreporterUsesJavaAwtTextIAttributedCharacterIterator_Attribute:attribute withInt:runIndex withInt:beginIndex_ withInt:endIndex_];
}

- (OrgOssPdfreporterUsesJavaAwtTextAttributedString *)getString {
  return this$0_;
}

- (unichar)internalSetIndexWithInt:(int)position {
  currentIndex_ = position;
  if (position < currentRunStart_ || position >= currentRunLimit_) {
    [self updateRunInfo];
  }
  if (currentIndex_ == endIndex_) {
    return OrgOssPdfreporterUsesJavaAwtTextICharacterIterator_DONE;
  }
  else {
    return [this$0_ charAtWithInt:position];
  }
}

- (void)updateRunInfo {
  if (currentIndex_ == endIndex_) {
    currentRunStart_ = currentRunLimit_ = endIndex_;
    currentRunIndex_ = -1;
  }
  else {
    @synchronized (this$0_) {
      int runIndex = -1;
      while (runIndex < this$0_.runCount - 1 && [((IOSIntArray *) nil_chk(this$0_.runStarts)) intAtIndex:runIndex + 1] <= currentIndex_) runIndex++;
      currentRunIndex_ = runIndex;
      if (runIndex >= 0) {
        currentRunStart_ = [((IOSIntArray *) nil_chk(this$0_.runStarts)) intAtIndex:runIndex];
        if (currentRunStart_ < beginIndex_) currentRunStart_ = beginIndex_;
      }
      else {
        currentRunStart_ = beginIndex_;
      }
      if (runIndex < this$0_.runCount - 1) {
        currentRunLimit_ = [((IOSIntArray *) nil_chk(this$0_.runStarts)) intAtIndex:runIndex + 1];
        if (currentRunLimit_ > endIndex_) currentRunLimit_ = endIndex_;
      }
      else {
        currentRunLimit_ = endIndex_;
      }
    }
  }
}

- (id)copyWithZone:(NSZone *)zone {
  return [self clone];
}

- (void)copyAllPropertiesTo:(id)copy {
  [super copyAllPropertiesTo:copy];
  OrgOssPdfreporterUsesJavaAwtTextAttributedString_AttributedStringIterator *typedCopy = (OrgOssPdfreporterUsesJavaAwtTextAttributedString_AttributedStringIterator *) copy;
  typedCopy.this$0 = this$0_;
  typedCopy.beginIndex = beginIndex_;
  typedCopy.endIndex = endIndex_;
  typedCopy.relevantAttributes = relevantAttributes_;
  typedCopy.currentIndex = currentIndex_;
  typedCopy.currentRunIndex = currentRunIndex_;
  typedCopy.currentRunStart = currentRunStart_;
  typedCopy.currentRunLimit = currentRunLimit_;
}

@end
@implementation OrgOssPdfreporterUsesJavaAwtTextAttributedString_AttributeMap

@synthesize this$0 = this$0_;
@synthesize runIndex = runIndex_;
@synthesize beginIndex = beginIndex_;
@synthesize endIndex = endIndex_;

- (id)initWithOrgOssPdfreporterUsesJavaAwtTextAttributedString:(OrgOssPdfreporterUsesJavaAwtTextAttributedString *)outer$
                                                       withInt:(int)runIndex
                                                       withInt:(int)beginIndex
                                                       withInt:(int)endIndex {
  if ((self = [super init])) {
    this$0_ = outer$;
    self.runIndex = runIndex;
    self.beginIndex = beginIndex;
    self.endIndex = endIndex;
  }
  return self;
}

- (id<JavaUtilSet>)entrySet {
  JavaUtilHashSet *set = [[JavaUtilHashSet alloc] init];
  @synchronized (this$0_) {
    int size = [((JavaUtilVector *) nil_chk([((IOSObjectArray *) nil_chk(this$0_.runAttributes)) objectAtIndex:runIndex_])) size];
    for (int i = 0; i < size; i++) {
      OrgOssPdfreporterUsesJavaAwtTextIAttributedCharacterIterator_Attribute *key = (OrgOssPdfreporterUsesJavaAwtTextIAttributedCharacterIterator_Attribute *) [((JavaUtilVector *) nil_chk([((IOSObjectArray *) nil_chk(this$0_.runAttributes)) objectAtIndex:runIndex_])) getWithInt:i];
      id value = [((JavaUtilVector *) nil_chk([((IOSObjectArray *) nil_chk(this$0_.runAttributeValues)) objectAtIndex:runIndex_])) getWithInt:i];
      if ([value isKindOfClass:[OrgOssPdfreporterUsesJavaAwtTextAnnotation class]]) {
        value = [this$0_ getAttributeCheckRangeWithOrgOssPdfreporterUsesJavaAwtTextIAttributedCharacterIterator_Attribute:key withInt:runIndex_ withInt:beginIndex_ withInt:endIndex_];
        if (value == nil) {
          continue;
        }
      }
      id<JavaUtilMap_Entry> entry = [[OrgOssPdfreporterUsesJavaAwtTextAttributeEntry alloc] initWithOrgOssPdfreporterUsesJavaAwtTextIAttributedCharacterIterator_Attribute:key withId:value];
      [((JavaUtilHashSet *) nil_chk(set)) addWithId:entry];
    }
  }
  return set;
}

- (id)getWithId:(id)key {
  return [this$0_ getAttributeCheckRangeWithOrgOssPdfreporterUsesJavaAwtTextIAttributedCharacterIterator_Attribute:(OrgOssPdfreporterUsesJavaAwtTextIAttributedCharacterIterator_Attribute *) key withInt:runIndex_ withInt:beginIndex_ withInt:endIndex_];
}

- (void)copyAllPropertiesTo:(id)copy {
  [super copyAllPropertiesTo:copy];
  OrgOssPdfreporterUsesJavaAwtTextAttributedString_AttributeMap *typedCopy = (OrgOssPdfreporterUsesJavaAwtTextAttributedString_AttributeMap *) copy;
  typedCopy.this$0 = this$0_;
  typedCopy.runIndex = runIndex_;
  typedCopy.beginIndex = beginIndex_;
  typedCopy.endIndex = endIndex_;
}

@end
