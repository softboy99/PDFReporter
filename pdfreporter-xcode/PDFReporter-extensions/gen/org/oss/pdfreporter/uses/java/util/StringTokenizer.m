//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: pdfreporter-extensions/src/org/oss/pdfreporter/uses/java/util/StringTokenizer.java
//
//  Created by kendra on 9/27/13.
//

#include "IOSIntArray.h"
#include "java/lang/Character.h"
#include "java/lang/NullPointerException.h"
#include "java/lang/RuntimeException.h"
#include "org/oss/pdfreporter/uses/java/util/StringTokenizer.h"

@implementation OrgOssPdfreporterUsesJavaUtilStringTokenizer

@synthesize currentPosition = currentPosition_;
@synthesize newPosition = newPosition_;
@synthesize maxPosition = maxPosition_;
@synthesize str = str_;
@synthesize delimiters = delimiters_;
@synthesize retDelims = retDelims_;
@synthesize delimsChanged = delimsChanged_;
@synthesize maxDelimCodePoint = maxDelimCodePoint_;
@synthesize hasSurrogates = hasSurrogates_;
@synthesize delimiterCodePoints = delimiterCodePoints_;

- (void)setMaxDelimCodePoint {
  if (delimiters_ == nil) {
    maxDelimCodePoint_ = 0;
    return;
  }
  int m = 0;
  int c;
  int count = 0;
  for (int i = 0; i < [((NSString *) nil_chk(delimiters_)) length]; i += [JavaLangCharacter charCountWithInt:c]) {
    c = [((NSString *) nil_chk(delimiters_)) charAtWithInt:i];
    if (c >= [JavaLangCharacter MIN_HIGH_SURROGATE] && c <= [JavaLangCharacter MAX_LOW_SURROGATE]) {
      c = [((NSString *) nil_chk(delimiters_)) codePointAt:i];
      hasSurrogates_ = YES;
    }
    if (m < c) m = c;
    count++;
  }
  maxDelimCodePoint_ = m;
  if (hasSurrogates_) {
    delimiterCodePoints_ = [IOSIntArray arrayWithLength:count];
    for (int i = 0, j = 0; i < count; i++, j += [JavaLangCharacter charCountWithInt:c]) {
      c = [((NSString *) nil_chk(delimiters_)) codePointAt:j];
      (*[((IOSIntArray *) nil_chk(delimiterCodePoints_)) intRefAtIndex:i]) = c;
    }
  }
}

- (id)initOrgOssPdfreporterUsesJavaUtilStringTokenizerWithNSString:(NSString *)str
                                                      withNSString:(NSString *)delim
                                                          withBOOL:(BOOL)returnDelims {
  if ((self = [super init])) {
    hasSurrogates_ = NO;
    currentPosition_ = 0;
    newPosition_ = -1;
    delimsChanged_ = NO;
    self.str = str;
    maxPosition_ = [((NSString *) nil_chk(str)) length];
    delimiters_ = delim;
    retDelims_ = returnDelims;
    [self setMaxDelimCodePoint];
  }
  return self;
}

- (id)initWithNSString:(NSString *)str
          withNSString:(NSString *)delim
              withBOOL:(BOOL)returnDelims {
  return [self initOrgOssPdfreporterUsesJavaUtilStringTokenizerWithNSString:str withNSString:delim withBOOL:returnDelims];
}

- (id)initWithNSString:(NSString *)str
          withNSString:(NSString *)delim {
  return [self initOrgOssPdfreporterUsesJavaUtilStringTokenizerWithNSString:str withNSString:delim withBOOL:NO];
}

- (id)initWithNSString:(NSString *)str {
  return [self initOrgOssPdfreporterUsesJavaUtilStringTokenizerWithNSString:str withNSString:@" \t\n\r\f" withBOOL:NO];
}

- (int)skipDelimitersWithInt:(int)startPos {
  if (delimiters_ == nil) @throw [[JavaLangNullPointerException alloc] init];
  int position = startPos;
  while (!retDelims_ && position < maxPosition_) {
    if (!hasSurrogates_) {
      unichar c = [((NSString *) nil_chk(str_)) charAtWithInt:position];
      if ((c > maxDelimCodePoint_) || ([((NSString *) nil_chk(delimiters_)) indexOf:c] < 0)) break;
      position++;
    }
    else {
      int c = [((NSString *) nil_chk(str_)) codePointAt:position];
      if ((c > maxDelimCodePoint_) || ![self isDelimiterWithInt:c]) {
        break;
      }
      position += [JavaLangCharacter charCountWithInt:c];
    }
  }
  return position;
}

- (int)scanTokenWithInt:(int)startPos {
  int position = startPos;
  while (position < maxPosition_) {
    if (!hasSurrogates_) {
      unichar c = [((NSString *) nil_chk(str_)) charAtWithInt:position];
      if ((c <= maxDelimCodePoint_) && ([((NSString *) nil_chk(delimiters_)) indexOf:c] >= 0)) break;
      position++;
    }
    else {
      int c = [((NSString *) nil_chk(str_)) codePointAt:position];
      if ((c <= maxDelimCodePoint_) && [self isDelimiterWithInt:c]) break;
      position += [JavaLangCharacter charCountWithInt:c];
    }
  }
  if (retDelims_ && (startPos == position)) {
    if (!hasSurrogates_) {
      unichar c = [((NSString *) nil_chk(str_)) charAtWithInt:position];
      if ((c <= maxDelimCodePoint_) && ([((NSString *) nil_chk(delimiters_)) indexOf:c] >= 0)) position++;
    }
    else {
      int c = [((NSString *) nil_chk(str_)) codePointAt:position];
      if ((c <= maxDelimCodePoint_) && [self isDelimiterWithInt:c]) position += [JavaLangCharacter charCountWithInt:c];
    }
  }
  return position;
}

- (BOOL)isDelimiterWithInt:(int)codePoint {
  for (int i = 0; i < (int) [((IOSIntArray *) nil_chk(delimiterCodePoints_)) count]; i++) {
    if ([((IOSIntArray *) nil_chk(delimiterCodePoints_)) intAtIndex:i] == codePoint) {
      return YES;
    }
  }
  return NO;
}

- (BOOL)hasMoreTokens {
  newPosition_ = [self skipDelimitersWithInt:currentPosition_];
  return (newPosition_ < maxPosition_);
}

- (NSString *)nextToken {
  currentPosition_ = (newPosition_ >= 0 && !delimsChanged_) ? newPosition_ : [self skipDelimitersWithInt:currentPosition_];
  delimsChanged_ = NO;
  newPosition_ = -1;
  if (currentPosition_ >= maxPosition_) @throw [[JavaLangRuntimeException alloc] initWithNSString:@"NoSuchElementException"];
  int start = currentPosition_;
  currentPosition_ = [self scanTokenWithInt:currentPosition_];
  return [((NSString *) nil_chk(str_)) substring:start endIndex:currentPosition_];
}

- (NSString *)nextTokenWithNSString:(NSString *)delim {
  delimiters_ = delim;
  delimsChanged_ = YES;
  [self setMaxDelimCodePoint];
  return [self nextToken];
}

- (BOOL)hasMoreElements {
  return [self hasMoreTokens];
}

- (id)nextElement {
  return [self nextToken];
}

- (int)countTokens {
  int count = 0;
  int currpos = currentPosition_;
  while (currpos < maxPosition_) {
    currpos = [self skipDelimitersWithInt:currpos];
    if (currpos >= maxPosition_) break;
    currpos = [self scanTokenWithInt:currpos];
    count++;
  }
  return count;
}

- (void)copyAllPropertiesTo:(id)copy {
  [super copyAllPropertiesTo:copy];
  OrgOssPdfreporterUsesJavaUtilStringTokenizer *typedCopy = (OrgOssPdfreporterUsesJavaUtilStringTokenizer *) copy;
  typedCopy.currentPosition = currentPosition_;
  typedCopy.newPosition = newPosition_;
  typedCopy.maxPosition = maxPosition_;
  typedCopy.str = str_;
  typedCopy.delimiters = delimiters_;
  typedCopy.retDelims = retDelims_;
  typedCopy.delimsChanged = delimsChanged_;
  typedCopy.maxDelimCodePoint = maxDelimCodePoint_;
  typedCopy.hasSurrogates = hasSurrogates_;
  typedCopy.delimiterCodePoints = delimiterCodePoints_;
}

@end
