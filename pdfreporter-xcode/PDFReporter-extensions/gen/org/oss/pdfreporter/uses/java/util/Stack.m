//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: pdfreporter-extensions/src/org/oss/pdfreporter/uses/java/util/Stack.java
//
//  Created by kendra on 9/27/13.
//

#include "IOSObjectArray.h"
#include "java/util/Collection.h"
#include "java/util/EmptyStackException.h"
#include "java/util/Enumeration.h"
#include "java/util/Iterator.h"
#include "java/util/List.h"
#include "java/util/ListIterator.h"
#include "java/util/Vector.h"
#include "org/oss/pdfreporter/uses/java/util/Stack.h"

@implementation OrgOssPdfreporterUsesJavaUtilStack

@synthesize vector = vector_;

- (id)init {
  if ((self = [super init])) {
    vector_ = [[JavaUtilVector alloc] init];
  }
  return self;
}

- (id)initWithOrgOssPdfreporterUsesJavaUtilStack:(OrgOssPdfreporterUsesJavaUtilStack *)source {
  if ((self = [super init])) {
    vector_ = (JavaUtilVector *) [((JavaUtilVector *) nil_chk(((OrgOssPdfreporterUsesJavaUtilStack *) nil_chk(source)).vector)) clone];
  }
  return self;
}

- (id)pushWithId:(id)item {
  [((JavaUtilVector *) nil_chk(vector_)) addElementWithId:item];
  return item;
}

- (id)pop {
  @synchronized(self) {
    {
      id obj;
      int len = [((JavaUtilVector *) nil_chk(vector_)) size];
      obj = [self peek];
      [((JavaUtilVector *) nil_chk(vector_)) removeElementAtWithInt:len - 1];
      return obj;
    }
  }
}

- (id)peek {
  @synchronized(self) {
    {
      int len = [((JavaUtilVector *) nil_chk(vector_)) size];
      if (len == 0) @throw [[JavaUtilEmptyStackException alloc] init];
      return [((JavaUtilVector *) nil_chk(vector_)) elementAtWithInt:len - 1];
    }
  }
}

- (BOOL)empty {
  return [((JavaUtilVector *) nil_chk(vector_)) size] == 0;
}

- (int)searchWithId:(id)o {
  @synchronized(self) {
    {
      int i = [((JavaUtilVector *) nil_chk(vector_)) lastIndexOfWithId:o];
      if (i >= 0) {
        return [((JavaUtilVector *) nil_chk(vector_)) size] - i;
      }
      return -1;
    }
  }
}

- (OrgOssPdfreporterUsesJavaUtilStack *)clone {
  return [[OrgOssPdfreporterUsesJavaUtilStack alloc] initWithOrgOssPdfreporterUsesJavaUtilStack:self];
}

- (void)copyIntoWithNSObjectArray:(IOSObjectArray *)anArray OBJC_METHOD_FAMILY_NONE {
  [((JavaUtilVector *) nil_chk(vector_)) copyIntoWithNSObjectArray:anArray];
}

- (void)trimToSize {
  [((JavaUtilVector *) nil_chk(vector_)) trimToSize];
}

- (void)ensureCapacityWithInt:(int)minCapacity {
  [((JavaUtilVector *) nil_chk(vector_)) ensureCapacityWithInt:minCapacity];
}

- (id<JavaUtilIterator>)iterator {
  return [((JavaUtilVector *) nil_chk(vector_)) iterator];
}

- (void)setSizeWithInt:(int)newSize {
  [((JavaUtilVector *) nil_chk(vector_)) setSizeWithInt:newSize];
}

- (id<JavaUtilListIterator>)listIterator {
  return [((JavaUtilVector *) nil_chk(vector_)) listIterator];
}

- (id<JavaUtilListIterator>)listIteratorWithInt:(int)index {
  return [((JavaUtilVector *) nil_chk(vector_)) listIteratorWithInt:index];
}

- (int)capacity {
  return [((JavaUtilVector *) nil_chk(vector_)) capacity];
}

- (int)size {
  return [((JavaUtilVector *) nil_chk(vector_)) size];
}

- (BOOL)isEmpty {
  return [((JavaUtilVector *) nil_chk(vector_)) isEmpty];
}

- (id<JavaUtilEnumeration>)elements {
  return [((JavaUtilVector *) nil_chk(vector_)) elements];
}

- (BOOL)containsWithId:(id)o {
  return [((JavaUtilVector *) nil_chk(vector_)) containsWithId:o];
}

- (int)indexOfWithId:(id)o {
  return [((JavaUtilVector *) nil_chk(vector_)) indexOfWithId:o];
}

- (int)indexOfWithId:(id)o
             withInt:(int)index {
  return [((JavaUtilVector *) nil_chk(vector_)) indexOfWithId:o withInt:index];
}

- (int)lastIndexOfWithId:(id)o {
  return [((JavaUtilVector *) nil_chk(vector_)) lastIndexOfWithId:o];
}

- (int)lastIndexOfWithId:(id)o
                 withInt:(int)index {
  return [((JavaUtilVector *) nil_chk(vector_)) lastIndexOfWithId:o withInt:index];
}

- (id)elementAtWithInt:(int)index {
  return [((JavaUtilVector *) nil_chk(vector_)) elementAtWithInt:index];
}

- (id)firstElement {
  return [((JavaUtilVector *) nil_chk(vector_)) firstElement];
}

- (id)lastElement {
  return [((JavaUtilVector *) nil_chk(vector_)) lastElement];
}

- (void)setElementAtWithId:(id)obj
                   withInt:(int)index {
  [((JavaUtilVector *) nil_chk(vector_)) setElementAtWithId:obj withInt:index];
}

- (void)removeElementAtWithInt:(int)index {
  [((JavaUtilVector *) nil_chk(vector_)) removeElementAtWithInt:index];
}

- (void)insertElementAtWithId:(id)obj
                      withInt:(int)index {
  [((JavaUtilVector *) nil_chk(vector_)) insertElementAtWithId:obj withInt:index];
}

- (void)addElementWithId:(id)obj {
  [((JavaUtilVector *) nil_chk(vector_)) addElementWithId:obj];
}

- (BOOL)removeElementWithId:(id)obj {
  return [((JavaUtilVector *) nil_chk(vector_)) removeElementWithId:obj];
}

- (void)removeAllElements {
  [((JavaUtilVector *) nil_chk(vector_)) removeAllElements];
}

- (IOSObjectArray *)toArray {
  return [((JavaUtilVector *) nil_chk(vector_)) toArray];
}

- (IOSObjectArray *)toArrayWithNSObjectArray:(IOSObjectArray *)a {
  return [((JavaUtilVector *) nil_chk(vector_)) toArrayWithNSObjectArray:a];
}

- (id)getWithInt:(int)index {
  return [((JavaUtilVector *) nil_chk(vector_)) getWithInt:index];
}

- (id)setWithInt:(int)index
          withId:(id)element {
  return [((JavaUtilVector *) nil_chk(vector_)) setWithInt:index withId:element];
}

- (BOOL)addWithId:(id)e {
  return [((JavaUtilVector *) nil_chk(vector_)) addWithId:e];
}

- (BOOL)removeWithId:(id)o {
  return [((JavaUtilVector *) nil_chk(vector_)) removeWithId:o];
}

- (void)addWithInt:(int)index
            withId:(id)element {
  [((JavaUtilVector *) nil_chk(vector_)) addWithInt:index withId:element];
}

- (id)removeWithInt:(int)index {
  return [((JavaUtilVector *) nil_chk(vector_)) removeWithInt:index];
}

- (void)clear {
  [((JavaUtilVector *) nil_chk(vector_)) clear];
}

- (BOOL)containsAllWithJavaUtilCollection:(id<JavaUtilCollection>)c {
  return [((JavaUtilVector *) nil_chk(vector_)) containsAllWithJavaUtilCollection:c];
}

- (BOOL)addAllWithJavaUtilCollection:(id<JavaUtilCollection>)c {
  return [((JavaUtilVector *) nil_chk(vector_)) addAllWithJavaUtilCollection:c];
}

- (BOOL)removeAllWithJavaUtilCollection:(id<JavaUtilCollection>)c {
  return [((JavaUtilVector *) nil_chk(vector_)) removeAllWithJavaUtilCollection:c];
}

- (BOOL)retainAllWithJavaUtilCollection:(id<JavaUtilCollection>)c {
  return [((JavaUtilVector *) nil_chk(vector_)) retainAllWithJavaUtilCollection:c];
}

- (BOOL)addAllWithInt:(int)index
withJavaUtilCollection:(id<JavaUtilCollection>)c {
  return [((JavaUtilVector *) nil_chk(vector_)) addAllWithInt:index withJavaUtilCollection:c];
}

- (BOOL)isEqual:(id)o {
  return [((JavaUtilVector *) nil_chk(vector_)) isEqual:o];
}

- (NSUInteger)hash {
  return [((JavaUtilVector *) nil_chk(vector_)) hash];
}

- (NSString *)description {
  return [((JavaUtilVector *) nil_chk(vector_)) description];
}

- (id<JavaUtilList>)subListWithInt:(int)fromIndex
                           withInt:(int)toIndex {
  return [((JavaUtilVector *) nil_chk(vector_)) subListWithInt:fromIndex withInt:toIndex];
}

- (void)copyAllPropertiesTo:(id)copy {
  [super copyAllPropertiesTo:copy];
  OrgOssPdfreporterUsesJavaUtilStack *typedCopy = (OrgOssPdfreporterUsesJavaUtilStack *) copy;
  typedCopy.vector = vector_;
}

@end
