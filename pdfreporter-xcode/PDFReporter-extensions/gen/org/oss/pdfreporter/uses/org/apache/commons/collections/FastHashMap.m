//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: pdfreporter-extensions/src/org/oss/pdfreporter/uses/org/apache/commons/collections/FastHashMap.java
//
//  Created by kendra on 9/27/13.
//

#include "IOSObjectArray.h"
#include "java/lang/IllegalStateException.h"
#include "java/lang/UnsupportedOperationException.h"
#include "java/util/Collection.h"
#include "java/util/ConcurrentModificationException.h"
#include "java/util/HashMap.h"
#include "java/util/Iterator.h"
#include "java/util/Map.h"
#include "java/util/Set.h"
#include "org/oss/pdfreporter/uses/org/apache/commons/collections/FastHashMap.h"

@implementation OrgOssPdfreporterUsesOrgApacheCommonsCollectionsFastHashMap

@synthesize map = map_;
@synthesize fast = fast_;

- (id)init {
  if ((self = [super init])) {
    map_ = nil;
    fast_ = NO;
    self.map = [[JavaUtilHashMap alloc] init];
  }
  return self;
}

- (id)initWithInt:(int)capacity {
  if ((self = [super init])) {
    map_ = nil;
    fast_ = NO;
    self.map = [[JavaUtilHashMap alloc] initWithInt:capacity];
  }
  return self;
}

- (id)initWithInt:(int)capacity
        withFloat:(float)factor {
  if ((self = [super init])) {
    map_ = nil;
    fast_ = NO;
    self.map = [[JavaUtilHashMap alloc] initWithInt:capacity withFloat:factor];
  }
  return self;
}

- (id)initWithJavaUtilMap:(id<JavaUtilMap>)map {
  if ((self = [super init])) {
    map_ = nil;
    fast_ = NO;
    self.map = [[JavaUtilHashMap alloc] initWithJavaUtilMap:map];
  }
  return self;
}

- (BOOL)getFast {
  return (self.fast);
}

- (void)setFastWithBOOL:(BOOL)fast {
  self.fast = fast;
}

- (void)clear {
  if (fast_) {
    @synchronized (self) {
      JavaUtilHashMap *temp = (JavaUtilHashMap *) [((JavaUtilHashMap *) nil_chk(map_)) clone];
      [((JavaUtilHashMap *) nil_chk(temp)) clear];
      map_ = temp;
    }
  }
  else {
    @synchronized (map_) {
      [((JavaUtilHashMap *) nil_chk(map_)) clear];
    }
  }
}

- (id)clone {
  OrgOssPdfreporterUsesOrgApacheCommonsCollectionsFastHashMap *results = nil;
  if (fast_) {
    results = [[OrgOssPdfreporterUsesOrgApacheCommonsCollectionsFastHashMap alloc] initWithJavaUtilMap:map_];
  }
  else {
    @synchronized (map_) {
      results = [[OrgOssPdfreporterUsesOrgApacheCommonsCollectionsFastHashMap alloc] initWithJavaUtilMap:map_];
    }
  }
  [((OrgOssPdfreporterUsesOrgApacheCommonsCollectionsFastHashMap *) nil_chk(results)) setFastWithBOOL:[self getFast]];
  return (results);
}

- (BOOL)containsKeyWithId:(id)key {
  if (fast_) {
    return ([((JavaUtilHashMap *) nil_chk(map_)) containsKeyWithId:key]);
  }
  else {
    @synchronized (map_) {
      return ([((JavaUtilHashMap *) nil_chk(map_)) containsKeyWithId:key]);
    }
  }
}

- (BOOL)containsValueWithId:(id)value {
  if (fast_) {
    return ([((JavaUtilHashMap *) nil_chk(map_)) containsValueWithId:value]);
  }
  else {
    @synchronized (map_) {
      return ([((JavaUtilHashMap *) nil_chk(map_)) containsValueWithId:value]);
    }
  }
}

- (id<JavaUtilSet>)entrySet {
  return [[OrgOssPdfreporterUsesOrgApacheCommonsCollectionsFastHashMap_EntrySet alloc] initWithOrgOssPdfreporterUsesOrgApacheCommonsCollectionsFastHashMap:self];
}

- (BOOL)isEqual:(id)o {
  if (o == self) return (YES);
  else if (!([o conformsToProtocol: @protocol(JavaUtilMap)])) return (NO);
  id<JavaUtilMap> mo = (id<JavaUtilMap>) o;
  if (fast_) {
    if ([((id<JavaUtilMap>) nil_chk(mo)) size] != [((JavaUtilHashMap *) nil_chk(map_)) size]) return (NO);
    id<JavaUtilIterator> i = [((id<JavaUtilSet>) nil_chk([((JavaUtilHashMap *) nil_chk(map_)) entrySet])) iterator];
    while ([((id<JavaUtilIterator>) nil_chk(i)) hasNext]) {
      id<JavaUtilMap_Entry> e = (id<JavaUtilMap_Entry>) [((id<JavaUtilIterator>) nil_chk(i)) next];
      id key = [((id<JavaUtilMap_Entry>) nil_chk(e)) getKey];
      id value = [((id<JavaUtilMap_Entry>) nil_chk(e)) getValue];
      if (value == nil) {
        if (!([((id<JavaUtilMap>) nil_chk(mo)) getWithId:key] == nil && [((id<JavaUtilMap>) nil_chk(mo)) containsKeyWithId:key])) return (NO);
      }
      else {
        if (![value isEqual:[((id<JavaUtilMap>) nil_chk(mo)) getWithId:key]]) return (NO);
      }
    }
    return (YES);
  }
  else {
    @synchronized (map_) {
      if ([((id<JavaUtilMap>) nil_chk(mo)) size] != [((JavaUtilHashMap *) nil_chk(map_)) size]) return (NO);
      id<JavaUtilIterator> i = [((id<JavaUtilSet>) nil_chk([((JavaUtilHashMap *) nil_chk(map_)) entrySet])) iterator];
      while ([((id<JavaUtilIterator>) nil_chk(i)) hasNext]) {
        id<JavaUtilMap_Entry> e = (id<JavaUtilMap_Entry>) [((id<JavaUtilIterator>) nil_chk(i)) next];
        id key = [((id<JavaUtilMap_Entry>) nil_chk(e)) getKey];
        id value = [((id<JavaUtilMap_Entry>) nil_chk(e)) getValue];
        if (value == nil) {
          if (!([((id<JavaUtilMap>) nil_chk(mo)) getWithId:key] == nil && [((id<JavaUtilMap>) nil_chk(mo)) containsKeyWithId:key])) return (NO);
        }
        else {
          if (![value isEqual:[((id<JavaUtilMap>) nil_chk(mo)) getWithId:key]]) return (NO);
        }
      }
      return (YES);
    }
  }
}

- (id)getWithId:(id)key {
  if (fast_) {
    return ([((JavaUtilHashMap *) nil_chk(map_)) getWithId:key]);
  }
  else {
    @synchronized (map_) {
      return ([((JavaUtilHashMap *) nil_chk(map_)) getWithId:key]);
    }
  }
}

- (NSUInteger)hash {
  if (fast_) {
    int h = 0;
    id<JavaUtilIterator> i = [((id<JavaUtilSet>) nil_chk([((JavaUtilHashMap *) nil_chk(map_)) entrySet])) iterator];
    while ([((id<JavaUtilIterator>) nil_chk(i)) hasNext]) h += [nil_chk([((id<JavaUtilIterator>) nil_chk(i)) next]) hash];
    return (h);
  }
  else {
    @synchronized (map_) {
      int h = 0;
      id<JavaUtilIterator> i = [((id<JavaUtilSet>) nil_chk([((JavaUtilHashMap *) nil_chk(map_)) entrySet])) iterator];
      while ([((id<JavaUtilIterator>) nil_chk(i)) hasNext]) h += [nil_chk([((id<JavaUtilIterator>) nil_chk(i)) next]) hash];
      return (h);
    }
  }
}

- (BOOL)isEmpty {
  if (fast_) {
    return ([((JavaUtilHashMap *) nil_chk(map_)) isEmpty]);
  }
  else {
    @synchronized (map_) {
      return ([((JavaUtilHashMap *) nil_chk(map_)) isEmpty]);
    }
  }
}

- (id<JavaUtilSet>)keySet {
  return [[OrgOssPdfreporterUsesOrgApacheCommonsCollectionsFastHashMap_KeySet alloc] initWithOrgOssPdfreporterUsesOrgApacheCommonsCollectionsFastHashMap:self];
}

- (id)putWithId:(id)key
         withId:(id)value {
  if (fast_) {
    @synchronized (self) {
      JavaUtilHashMap *temp = (JavaUtilHashMap *) [((JavaUtilHashMap *) nil_chk(map_)) clone];
      id result = [((JavaUtilHashMap *) nil_chk(temp)) putWithId:key withId:value];
      map_ = temp;
      return (result);
    }
  }
  else {
    @synchronized (map_) {
      return ([((JavaUtilHashMap *) nil_chk(map_)) putWithId:key withId:value]);
    }
  }
}

- (void)putAllWithJavaUtilMap:(id<JavaUtilMap>)inArg {
  if (fast_) {
    @synchronized (self) {
      JavaUtilHashMap *temp = (JavaUtilHashMap *) [((JavaUtilHashMap *) nil_chk(map_)) clone];
      [((JavaUtilHashMap *) nil_chk(temp)) putAllWithJavaUtilMap:inArg];
      map_ = temp;
    }
  }
  else {
    @synchronized (map_) {
      [((JavaUtilHashMap *) nil_chk(map_)) putAllWithJavaUtilMap:inArg];
    }
  }
}

- (id)removeWithId:(id)key {
  if (fast_) {
    @synchronized (self) {
      JavaUtilHashMap *temp = (JavaUtilHashMap *) [((JavaUtilHashMap *) nil_chk(map_)) clone];
      id result = [((JavaUtilHashMap *) nil_chk(temp)) removeWithId:key];
      map_ = temp;
      return (result);
    }
  }
  else {
    @synchronized (map_) {
      return ([((JavaUtilHashMap *) nil_chk(map_)) removeWithId:key]);
    }
  }
}

- (int)size {
  if (fast_) {
    return ([((JavaUtilHashMap *) nil_chk(map_)) size]);
  }
  else {
    @synchronized (map_) {
      return ([((JavaUtilHashMap *) nil_chk(map_)) size]);
    }
  }
}

- (id<JavaUtilCollection>)values {
  return [[OrgOssPdfreporterUsesOrgApacheCommonsCollectionsFastHashMap_Values alloc] initWithOrgOssPdfreporterUsesOrgApacheCommonsCollectionsFastHashMap:self];
}

- (void)copyAllPropertiesTo:(id)copy {
  [super copyAllPropertiesTo:copy];
  OrgOssPdfreporterUsesOrgApacheCommonsCollectionsFastHashMap *typedCopy = (OrgOssPdfreporterUsesOrgApacheCommonsCollectionsFastHashMap *) copy;
  typedCopy.map = map_;
  typedCopy.fast = fast_;
}

@end
@implementation OrgOssPdfreporterUsesOrgApacheCommonsCollectionsFastHashMap_CollectionView_CollectionViewIterator

@synthesize this$0 = this$0_;
@synthesize expected = expected_;
@synthesize lastReturned = lastReturned_;
@synthesize iterator = iterator_;

- (id)initWithOrgOssPdfreporterUsesOrgApacheCommonsCollectionsFastHashMap_CollectionView:(OrgOssPdfreporterUsesOrgApacheCommonsCollectionsFastHashMap_CollectionView *)outer$ {
  if ((self = [super init])) {
    this$0_ = outer$;
    lastReturned_ = nil;
    self.expected = outer$.this$0.map;
    self.iterator = [((id<JavaUtilSet>) nil_chk([((id<JavaUtilMap>) nil_chk(expected_)) entrySet])) iterator];
  }
  return self;
}

- (BOOL)hasNext {
  if (expected_ != this$0_.this$0.map) {
    @throw [[JavaUtilConcurrentModificationException alloc] init];
  }
  return [((id<JavaUtilIterator>) nil_chk(iterator_)) hasNext];
}

- (id)next {
  if (expected_ != this$0_.this$0.map) {
    @throw [[JavaUtilConcurrentModificationException alloc] init];
  }
  lastReturned_ = (id<JavaUtilMap_Entry>) [((id<JavaUtilIterator>) nil_chk(iterator_)) next];
  return [this$0_ iteratorNextWithJavaUtilMap_Entry:lastReturned_];
}

- (void)remove {
  if (lastReturned_ == nil) {
    @throw [[JavaLangIllegalStateException alloc] init];
  }
  if (this$0_.this$0.fast) {
    @synchronized (this$0_.this$0) {
      if (expected_ != this$0_.this$0.map) {
        @throw [[JavaUtilConcurrentModificationException alloc] init];
      }
      (void) [this$0_.this$0 removeWithId:[((id<JavaUtilMap_Entry>) nil_chk(lastReturned_)) getKey]];
      lastReturned_ = nil;
      expected_ = this$0_.this$0.map;
    }
  }
  else {
    [((id<JavaUtilIterator>) nil_chk(iterator_)) remove];
    lastReturned_ = nil;
  }
}

- (void)copyAllPropertiesTo:(id)copy {
  [super copyAllPropertiesTo:copy];
  OrgOssPdfreporterUsesOrgApacheCommonsCollectionsFastHashMap_CollectionView_CollectionViewIterator *typedCopy = (OrgOssPdfreporterUsesOrgApacheCommonsCollectionsFastHashMap_CollectionView_CollectionViewIterator *) copy;
  typedCopy.this$0 = this$0_;
  typedCopy.expected = expected_;
  typedCopy.lastReturned = lastReturned_;
  typedCopy.iterator = iterator_;
}

@end
@implementation OrgOssPdfreporterUsesOrgApacheCommonsCollectionsFastHashMap_CollectionView

@synthesize this$0 = this$0_;

- (id)initWithOrgOssPdfreporterUsesOrgApacheCommonsCollectionsFastHashMap:(OrgOssPdfreporterUsesOrgApacheCommonsCollectionsFastHashMap *)outer$ {
  if ((self = [super init])) {
    this$0_ = outer$;
  }
  return self;
}

- (id<JavaUtilCollection>)getWithJavaUtilMap:(id<JavaUtilMap>)map {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}

- (id)iteratorNextWithJavaUtilMap_Entry:(id<JavaUtilMap_Entry>)entry {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}

- (void)clear {
  if (this$0_.fast) {
    @synchronized (this$0_) {
      JavaUtilHashMap *temp = (JavaUtilHashMap *) [((JavaUtilHashMap *) nil_chk(this$0_.map)) clone];
      [((id<JavaUtilCollection>) nil_chk([self getWithJavaUtilMap:temp])) clear];
      this$0_.map = temp;
    }
  }
  else {
    @synchronized (this$0_.map) {
      [((id<JavaUtilCollection>) nil_chk([self getWithJavaUtilMap:this$0_.map])) clear];
    }
  }
}

- (BOOL)removeWithId:(id)o {
  if (this$0_.fast) {
    @synchronized (this$0_) {
      JavaUtilHashMap *temp = (JavaUtilHashMap *) [((JavaUtilHashMap *) nil_chk(this$0_.map)) clone];
      BOOL r = [((id<JavaUtilCollection>) nil_chk([self getWithJavaUtilMap:temp])) removeWithId:o];
      this$0_.map = temp;
      return r;
    }
  }
  else {
    @synchronized (this$0_.map) {
      return [((id<JavaUtilCollection>) nil_chk([self getWithJavaUtilMap:this$0_.map])) removeWithId:o];
    }
  }
}

- (BOOL)removeAllWithJavaUtilCollection:(id<JavaUtilCollection>)o {
  if (this$0_.fast) {
    @synchronized (this$0_) {
      JavaUtilHashMap *temp = (JavaUtilHashMap *) [((JavaUtilHashMap *) nil_chk(this$0_.map)) clone];
      BOOL r = [((id<JavaUtilCollection>) nil_chk([self getWithJavaUtilMap:temp])) removeAllWithJavaUtilCollection:o];
      this$0_.map = temp;
      return r;
    }
  }
  else {
    @synchronized (this$0_.map) {
      return [((id<JavaUtilCollection>) nil_chk([self getWithJavaUtilMap:this$0_.map])) removeAllWithJavaUtilCollection:o];
    }
  }
}

- (BOOL)retainAllWithJavaUtilCollection:(id<JavaUtilCollection>)o {
  if (this$0_.fast) {
    @synchronized (this$0_) {
      JavaUtilHashMap *temp = (JavaUtilHashMap *) [((JavaUtilHashMap *) nil_chk(this$0_.map)) clone];
      BOOL r = [((id<JavaUtilCollection>) nil_chk([self getWithJavaUtilMap:temp])) retainAllWithJavaUtilCollection:o];
      this$0_.map = temp;
      return r;
    }
  }
  else {
    @synchronized (this$0_.map) {
      return [((id<JavaUtilCollection>) nil_chk([self getWithJavaUtilMap:this$0_.map])) retainAllWithJavaUtilCollection:o];
    }
  }
}

- (int)size {
  if (this$0_.fast) {
    return [((id<JavaUtilCollection>) nil_chk([self getWithJavaUtilMap:this$0_.map])) size];
  }
  else {
    @synchronized (this$0_.map) {
      return [((id<JavaUtilCollection>) nil_chk([self getWithJavaUtilMap:this$0_.map])) size];
    }
  }
}

- (BOOL)isEmpty {
  if (this$0_.fast) {
    return [((id<JavaUtilCollection>) nil_chk([self getWithJavaUtilMap:this$0_.map])) isEmpty];
  }
  else {
    @synchronized (this$0_.map) {
      return [((id<JavaUtilCollection>) nil_chk([self getWithJavaUtilMap:this$0_.map])) isEmpty];
    }
  }
}

- (BOOL)containsWithId:(id)o {
  if (this$0_.fast) {
    return [((id<JavaUtilCollection>) nil_chk([self getWithJavaUtilMap:this$0_.map])) containsWithId:o];
  }
  else {
    @synchronized (this$0_.map) {
      return [((id<JavaUtilCollection>) nil_chk([self getWithJavaUtilMap:this$0_.map])) containsWithId:o];
    }
  }
}

- (BOOL)containsAllWithJavaUtilCollection:(id<JavaUtilCollection>)o {
  if (this$0_.fast) {
    return [((id<JavaUtilCollection>) nil_chk([self getWithJavaUtilMap:this$0_.map])) containsAllWithJavaUtilCollection:o];
  }
  else {
    @synchronized (this$0_.map) {
      return [((id<JavaUtilCollection>) nil_chk([self getWithJavaUtilMap:this$0_.map])) containsAllWithJavaUtilCollection:o];
    }
  }
}

- (IOSObjectArray *)toArrayWithNSObjectArray:(IOSObjectArray *)o {
  if (this$0_.fast) {
    return [((id<JavaUtilCollection>) nil_chk([self getWithJavaUtilMap:this$0_.map])) toArrayWithNSObjectArray:o];
  }
  else {
    @synchronized (this$0_.map) {
      return [((id<JavaUtilCollection>) nil_chk([self getWithJavaUtilMap:this$0_.map])) toArrayWithNSObjectArray:o];
    }
  }
}

- (IOSObjectArray *)toArray {
  if (this$0_.fast) {
    return [((id<JavaUtilCollection>) nil_chk([self getWithJavaUtilMap:this$0_.map])) toArray];
  }
  else {
    @synchronized (this$0_.map) {
      return [((id<JavaUtilCollection>) nil_chk([self getWithJavaUtilMap:this$0_.map])) toArray];
    }
  }
}

- (BOOL)isEqual:(id)o {
  if (o == self) return YES;
  if (this$0_.fast) {
    return [((id<JavaUtilCollection>) nil_chk([self getWithJavaUtilMap:this$0_.map])) isEqual:o];
  }
  else {
    @synchronized (this$0_.map) {
      return [((id<JavaUtilCollection>) nil_chk([self getWithJavaUtilMap:this$0_.map])) isEqual:o];
    }
  }
}

- (NSUInteger)hash {
  if (this$0_.fast) {
    return [((id<JavaUtilCollection>) nil_chk([self getWithJavaUtilMap:this$0_.map])) hash];
  }
  else {
    @synchronized (this$0_.map) {
      return [((id<JavaUtilCollection>) nil_chk([self getWithJavaUtilMap:this$0_.map])) hash];
    }
  }
}

- (BOOL)addWithId:(id)o {
  @throw [[JavaLangUnsupportedOperationException alloc] init];
}

- (BOOL)addAllWithJavaUtilCollection:(id<JavaUtilCollection>)c {
  @throw [[JavaLangUnsupportedOperationException alloc] init];
}

- (id<JavaUtilIterator>)iterator {
  return [[OrgOssPdfreporterUsesOrgApacheCommonsCollectionsFastHashMap_CollectionView_CollectionViewIterator alloc] initWithOrgOssPdfreporterUsesOrgApacheCommonsCollectionsFastHashMap_CollectionView:self];
}

- (void)copyAllPropertiesTo:(id)copy {
  [super copyAllPropertiesTo:copy];
  OrgOssPdfreporterUsesOrgApacheCommonsCollectionsFastHashMap_CollectionView *typedCopy = (OrgOssPdfreporterUsesOrgApacheCommonsCollectionsFastHashMap_CollectionView *) copy;
  typedCopy.this$0 = this$0_;
}

@end
@implementation OrgOssPdfreporterUsesOrgApacheCommonsCollectionsFastHashMap_KeySet

- (id<JavaUtilCollection>)getWithJavaUtilMap:(id<JavaUtilMap>)map {
  return [((id<JavaUtilMap>) nil_chk(map)) keySet];
}

- (id)iteratorNextWithJavaUtilMap_Entry:(id<JavaUtilMap_Entry>)entry {
  return [((id<JavaUtilMap_Entry>) nil_chk(entry)) getKey];
}

- (id)initWithOrgOssPdfreporterUsesOrgApacheCommonsCollectionsFastHashMap:(OrgOssPdfreporterUsesOrgApacheCommonsCollectionsFastHashMap *)outer$ {
  return [super initWithOrgOssPdfreporterUsesOrgApacheCommonsCollectionsFastHashMap:outer$];
}

@end
@implementation OrgOssPdfreporterUsesOrgApacheCommonsCollectionsFastHashMap_Values

- (id<JavaUtilCollection>)getWithJavaUtilMap:(id<JavaUtilMap>)map {
  return [((id<JavaUtilMap>) nil_chk(map)) values];
}

- (id)iteratorNextWithJavaUtilMap_Entry:(id<JavaUtilMap_Entry>)entry {
  return [((id<JavaUtilMap_Entry>) nil_chk(entry)) getValue];
}

- (id)initWithOrgOssPdfreporterUsesOrgApacheCommonsCollectionsFastHashMap:(OrgOssPdfreporterUsesOrgApacheCommonsCollectionsFastHashMap *)outer$ {
  return [super initWithOrgOssPdfreporterUsesOrgApacheCommonsCollectionsFastHashMap:outer$];
}

@end
@implementation OrgOssPdfreporterUsesOrgApacheCommonsCollectionsFastHashMap_EntrySet

- (id<JavaUtilCollection>)getWithJavaUtilMap:(id<JavaUtilMap>)map {
  return [((id<JavaUtilMap>) nil_chk(map)) entrySet];
}

- (id)iteratorNextWithJavaUtilMap_Entry:(id<JavaUtilMap_Entry>)entry {
  return entry;
}

- (id)initWithOrgOssPdfreporterUsesOrgApacheCommonsCollectionsFastHashMap:(OrgOssPdfreporterUsesOrgApacheCommonsCollectionsFastHashMap *)outer$ {
  return [super initWithOrgOssPdfreporterUsesOrgApacheCommonsCollectionsFastHashMap:outer$];
}

@end
