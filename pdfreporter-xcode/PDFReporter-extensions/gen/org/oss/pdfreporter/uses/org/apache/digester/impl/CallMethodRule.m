//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: pdfreporter-extensions/src/org/oss/pdfreporter/uses/org/apache/digester/impl/CallMethodRule.java
//
//  Created by kendra on 9/27/13.
//

#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "java/lang/StringBuffer.h"
#include "java/util/logging/Level.h"
#include "java/util/logging/Logger.h"
#include "org/oss/pdfreporter/uses/org/apache/commons/beanutils/MethodUtils.h"
#include "org/oss/pdfreporter/uses/org/apache/digester/IDigester.h"
#include "org/oss/pdfreporter/uses/org/apache/digester/impl/CallMethodRule.h"
#include "org/oss/pdfreporter/xml/parsers/IAttributes.h"
#include "org/xml/sax/SAXException.h"

@implementation OrgOssPdfreporterUsesOrgApacheDigesterImplCallMethodRule

static JavaUtilLoggingLogger * OrgOssPdfreporterUsesOrgApacheDigesterImplCallMethodRule_logger_;

@synthesize bodyText = bodyText_;
@synthesize targetOffset = targetOffset_;
@synthesize methodName = methodName_;
@synthesize paramCount = paramCount_;
@synthesize paramTypes = paramTypes_;
@synthesize paramClassNames = paramClassNames_;
@synthesize useExactMatch = useExactMatch_;

+ (JavaUtilLoggingLogger *)logger {
  return OrgOssPdfreporterUsesOrgApacheDigesterImplCallMethodRule_logger_;
}

- (id)initOrgOssPdfreporterUsesOrgApacheDigesterImplCallMethodRuleWithInt:(int)targetOffset
                                                             withNSString:(NSString *)methodName
                                                                  withInt:(int)paramCount {
  if ((self = [super init])) {
    bodyText_ = nil;
    targetOffset_ = 0;
    methodName_ = nil;
    paramCount_ = 0;
    paramTypes_ = nil;
    paramClassNames_ = nil;
    useExactMatch_ = NO;
    self.targetOffset = targetOffset;
    self.methodName = methodName;
    self.paramCount = paramCount;
    if (paramCount == 0) {
      self.paramTypes = [IOSObjectArray arrayWithObjects:(id[]){ [IOSClass classWithClass:[NSString class]] } count:1 type:[IOSClass classWithClass:[IOSClass class]]];
    }
    else {
      self.paramTypes = [IOSObjectArray arrayWithLength:paramCount type:[IOSClass classWithClass:[IOSClass class]]];
      for (int i = 0; i < (int) [((IOSObjectArray *) nil_chk(self.paramTypes)) count]; i++) {
        (void) [((IOSObjectArray *) nil_chk(self.paramTypes)) replaceObjectAtIndex:i withObject:[IOSClass classWithClass:[NSString class]]];
      }
    }
  }
  return self;
}

- (id)initWithInt:(int)targetOffset
     withNSString:(NSString *)methodName
          withInt:(int)paramCount {
  return [self initOrgOssPdfreporterUsesOrgApacheDigesterImplCallMethodRuleWithInt:targetOffset withNSString:methodName withInt:paramCount];
}

- (id)initWithInt:(int)targetOffset
     withNSString:(NSString *)methodName
          withInt:(int)paramCount
withNSStringArray:(IOSObjectArray *)paramTypes {
  if ((self = [super init])) {
    bodyText_ = nil;
    targetOffset_ = 0;
    methodName_ = nil;
    paramCount_ = 0;
    paramTypes_ = nil;
    paramClassNames_ = nil;
    useExactMatch_ = NO;
    self.targetOffset = targetOffset;
    self.methodName = methodName;
    self.paramCount = paramCount;
    if (paramTypes == nil) {
      self.paramTypes = [IOSObjectArray arrayWithLength:paramCount type:[IOSClass classWithClass:[IOSClass class]]];
      for (int i = 0; i < (int) [((IOSObjectArray *) nil_chk(self.paramTypes)) count]; i++) {
        (void) [((IOSObjectArray *) nil_chk(self.paramTypes)) replaceObjectAtIndex:i withObject:[IOSClass classWithClass:[NSString class]]];
      }
    }
    else {
      self.paramClassNames = [IOSObjectArray arrayWithLength:(int) [paramTypes count] type:[IOSClass classWithClass:[NSString class]]];
      for (int i = 0; i < (int) [((IOSObjectArray *) nil_chk(self.paramClassNames)) count]; i++) {
        (void) [((IOSObjectArray *) nil_chk(self.paramClassNames)) replaceObjectAtIndex:i withObject:[paramTypes objectAtIndex:i]];
      }
    }
  }
  return self;
}

- (id)initOrgOssPdfreporterUsesOrgApacheDigesterImplCallMethodRuleWithInt:(int)targetOffset
                                                             withNSString:(NSString *)methodName
                                                                  withInt:(int)paramCount
                                                        withIOSClassArray:(IOSObjectArray *)paramTypes {
  if ((self = [super init])) {
    bodyText_ = nil;
    targetOffset_ = 0;
    methodName_ = nil;
    paramCount_ = 0;
    paramTypes_ = nil;
    paramClassNames_ = nil;
    useExactMatch_ = NO;
    self.targetOffset = targetOffset;
    self.methodName = methodName;
    self.paramCount = paramCount;
    if (paramTypes == nil) {
      self.paramTypes = [IOSObjectArray arrayWithLength:paramCount type:[IOSClass classWithClass:[IOSClass class]]];
      for (int i = 0; i < (int) [((IOSObjectArray *) nil_chk(self.paramTypes)) count]; i++) {
        (void) [((IOSObjectArray *) nil_chk(self.paramTypes)) replaceObjectAtIndex:i withObject:[IOSClass classWithClass:[NSString class]]];
      }
    }
    else {
      self.paramTypes = [IOSObjectArray arrayWithLength:(int) [paramTypes count] type:[IOSClass classWithClass:[IOSClass class]]];
      for (int i = 0; i < (int) [((IOSObjectArray *) nil_chk(self.paramTypes)) count]; i++) {
        (void) [((IOSObjectArray *) nil_chk(self.paramTypes)) replaceObjectAtIndex:i withObject:[paramTypes objectAtIndex:i]];
      }
    }
  }
  return self;
}

- (id)initWithInt:(int)targetOffset
     withNSString:(NSString *)methodName
          withInt:(int)paramCount
withIOSClassArray:(IOSObjectArray *)paramTypes {
  return [self initOrgOssPdfreporterUsesOrgApacheDigesterImplCallMethodRuleWithInt:targetOffset withNSString:methodName withInt:paramCount withIOSClassArray:paramTypes];
}

- (id)initWithInt:(int)targetOffset
     withNSString:(NSString *)methodName {
  return [self initOrgOssPdfreporterUsesOrgApacheDigesterImplCallMethodRuleWithInt:targetOffset withNSString:methodName withInt:0 withIOSClassArray:(IOSObjectArray *) nil];
}

- (id)initWithNSString:(NSString *)methodName
               withInt:(int)paramCount {
  return [self initOrgOssPdfreporterUsesOrgApacheDigesterImplCallMethodRuleWithInt:0 withNSString:methodName withInt:paramCount];
}

- (id)initWithNSString:(NSString *)methodName
               withInt:(int)paramCount
     withIOSClassArray:(IOSObjectArray *)paramTypes {
  return [self initOrgOssPdfreporterUsesOrgApacheDigesterImplCallMethodRuleWithInt:0 withNSString:methodName withInt:paramCount withIOSClassArray:paramTypes];
}

- (id)initWithNSString:(NSString *)methodName {
  return [self initOrgOssPdfreporterUsesOrgApacheDigesterImplCallMethodRuleWithInt:0 withNSString:methodName withInt:0 withIOSClassArray:(IOSObjectArray *) nil];
}

- (void)beginWithNSString:(NSString *)namespace_
             withNSString:(NSString *)name
withOrgOssPdfreporterXmlParsersIAttributes:(id<OrgOssPdfreporterXmlParsersIAttributes>)attributes {
  if (paramCount_ > 0) {
    IOSObjectArray *parameters = [IOSObjectArray arrayWithLength:paramCount_ type:[IOSClass classWithClass:[NSObject class]]];
    for (int i = 0; i < (int) [((IOSObjectArray *) nil_chk(parameters)) count]; i++) {
      (void) [((IOSObjectArray *) nil_chk(parameters)) replaceObjectAtIndex:i withObject:nil];
    }
    [((id<OrgOssPdfreporterUsesOrgApacheDigesterIDigester>) nil_chk(digester_)) pushParamsWithId:parameters];
  }
}

- (void)endWithNSString:(NSString *)namespace_
           withNSString:(NSString *)name {
  IOSObjectArray *parameters = nil;
  if (paramCount_ > 0) {
    parameters = (IOSObjectArray *) [((id<OrgOssPdfreporterUsesOrgApacheDigesterIDigester>) nil_chk(digester_)) popParams];
    if (paramCount_ == 1 && [((IOSObjectArray *) nil_chk(parameters)) objectAtIndex:0] == nil) {
      return;
    }
  }
  else if (paramTypes_ != nil && (int) [((IOSObjectArray *) nil_chk(paramTypes_)) count] != 0) {
    if (bodyText_ == nil) {
      return;
    }
    parameters = [IOSObjectArray arrayWithLength:1 type:[IOSClass classWithClass:[NSObject class]]];
    (void) [((IOSObjectArray *) nil_chk(parameters)) replaceObjectAtIndex:0 withObject:bodyText_];
    if ((int) [((IOSObjectArray *) nil_chk(paramTypes_)) count] == 0) {
      paramTypes_ = [IOSObjectArray arrayWithLength:1 type:[IOSClass classWithClass:[IOSClass class]]];
      (void) [((IOSObjectArray *) nil_chk(paramTypes_)) replaceObjectAtIndex:0 withObject:[IOSClass classWithClass:[NSString class]]];
    }
  }
  else {
  }
  IOSObjectArray *paramValues = [IOSObjectArray arrayWithLength:(int) [((IOSObjectArray *) nil_chk(paramTypes_)) count] type:[IOSClass classWithClass:[NSObject class]]];
  for (int i = 0; i < (int) [((IOSObjectArray *) nil_chk(paramTypes_)) count]; i++) {
    if ([((IOSObjectArray *) nil_chk(parameters)) objectAtIndex:i] == nil || ([[((IOSObjectArray *) nil_chk(parameters)) objectAtIndex:i] isKindOfClass:[NSString class]] && ![[IOSClass classWithClass:[NSString class]] isAssignableFrom:[((IOSObjectArray *) nil_chk(paramTypes_)) objectAtIndex:i]])) {
    }
    else {
      (void) [((IOSObjectArray *) nil_chk(paramValues)) replaceObjectAtIndex:i withObject:[((IOSObjectArray *) nil_chk(parameters)) objectAtIndex:i]];
    }
  }
  id target;
  if (targetOffset_ >= 0) {
    target = [((id<OrgOssPdfreporterUsesOrgApacheDigesterIDigester>) nil_chk(digester_)) peekWithInt:targetOffset_];
  }
  else {
    target = [((id<OrgOssPdfreporterUsesOrgApacheDigesterIDigester>) nil_chk(digester_)) peekWithInt:[((id<OrgOssPdfreporterUsesOrgApacheDigesterIDigester>) nil_chk(digester_)) getCount] + targetOffset_];
  }
  if (target == nil) {
    JavaLangStringBuffer *sb = [[JavaLangStringBuffer alloc] init];
    (void) [((JavaLangStringBuffer *) nil_chk(sb)) appendWithNSString:@"[CallMethodRule]{"];
    (void) [((JavaLangStringBuffer *) nil_chk(sb)) appendWithNSString:[((id<OrgOssPdfreporterUsesOrgApacheDigesterIDigester>) nil_chk(digester_)) getMatch]];
    (void) [((JavaLangStringBuffer *) nil_chk(sb)) appendWithNSString:@"} Call target is null ("];
    (void) [((JavaLangStringBuffer *) nil_chk(sb)) appendWithNSString:@"targetOffset="];
    (void) [((JavaLangStringBuffer *) nil_chk(sb)) appendWithInt:targetOffset_];
    (void) [((JavaLangStringBuffer *) nil_chk(sb)) appendWithNSString:@",stackdepth="];
    (void) [((JavaLangStringBuffer *) nil_chk(sb)) appendWithInt:[((id<OrgOssPdfreporterUsesOrgApacheDigesterIDigester>) nil_chk(digester_)) getCount]];
    (void) [((JavaLangStringBuffer *) nil_chk(sb)) appendWithNSString:@")"];
    @throw [[OrgXmlSaxSAXException alloc] initWithNSString:[((JavaLangStringBuffer *) nil_chk(sb)) description]];
  }
  if ([((JavaUtilLoggingLogger *) nil_chk(OrgOssPdfreporterUsesOrgApacheDigesterImplCallMethodRule_logger_)) isLoggableWithJavaUtilLoggingLevel:[JavaUtilLoggingLevel FINEST]]) {
    JavaLangStringBuffer *sb = [[JavaLangStringBuffer alloc] initWithNSString:@"[CallMethodRule]{"];
    (void) [((JavaLangStringBuffer *) nil_chk(sb)) appendWithNSString:[((id<OrgOssPdfreporterUsesOrgApacheDigesterIDigester>) nil_chk(digester_)) getMatch]];
    (void) [((JavaLangStringBuffer *) nil_chk(sb)) appendWithNSString:@"} Call "];
    (void) [((JavaLangStringBuffer *) nil_chk(sb)) appendWithNSString:[[nil_chk(target) getClass] getName]];
    (void) [((JavaLangStringBuffer *) nil_chk(sb)) appendWithNSString:@"."];
    (void) [((JavaLangStringBuffer *) nil_chk(sb)) appendWithNSString:methodName_];
    (void) [((JavaLangStringBuffer *) nil_chk(sb)) appendWithNSString:@"("];
    for (int i = 0; i < (int) [((IOSObjectArray *) nil_chk(paramValues)) count]; i++) {
      if (i > 0) {
        (void) [((JavaLangStringBuffer *) nil_chk(sb)) appendWithNSString:@","];
      }
      if ([((IOSObjectArray *) nil_chk(paramValues)) objectAtIndex:i] == nil) {
        (void) [((JavaLangStringBuffer *) nil_chk(sb)) appendWithNSString:@"null"];
      }
      else {
        (void) [((JavaLangStringBuffer *) nil_chk(sb)) appendWithNSString:[nil_chk([((IOSObjectArray *) nil_chk(paramValues)) objectAtIndex:i]) description]];
      }
      (void) [((JavaLangStringBuffer *) nil_chk(sb)) appendWithNSString:@"/"];
      if ([((IOSObjectArray *) nil_chk(paramTypes_)) objectAtIndex:i] == nil) {
        (void) [((JavaLangStringBuffer *) nil_chk(sb)) appendWithNSString:@"null"];
      }
      else {
        (void) [((JavaLangStringBuffer *) nil_chk(sb)) appendWithNSString:[((IOSClass *) nil_chk([((IOSObjectArray *) nil_chk(paramTypes_)) objectAtIndex:i])) getName]];
      }
    }
    (void) [((JavaLangStringBuffer *) nil_chk(sb)) appendWithNSString:@")"];
    [((JavaUtilLoggingLogger *) nil_chk(OrgOssPdfreporterUsesOrgApacheDigesterImplCallMethodRule_logger_)) finestWithNSString:[((JavaLangStringBuffer *) nil_chk(sb)) description]];
  }
  id result = nil;
  if (useExactMatch_) {
    result = [OrgOssPdfreporterUsesOrgApacheCommonsBeanutilsMethodUtils invokeExactMethodWithId:target withNSString:methodName_ withNSObjectArray:paramValues withIOSClassArray:paramTypes_];
  }
  else {
    result = [OrgOssPdfreporterUsesOrgApacheCommonsBeanutilsMethodUtils invokeMethodWithId:target withNSString:methodName_ withNSObjectArray:paramValues withIOSClassArray:paramTypes_];
  }
}

- (void)bodyWithNSString:(NSString *)namespace_
            withNSString:(NSString *)name
            withNSString:(NSString *)bodyText {
  if (paramCount_ == 0) {
    self.bodyText = [((NSString *) nil_chk(bodyText)) trim];
  }
}

- (void)finish {
  bodyText_ = nil;
}

- (NSString *)description {
  JavaLangStringBuffer *sb = [[JavaLangStringBuffer alloc] initWithNSString:@"CallMethodRule["];
  (void) [((JavaLangStringBuffer *) nil_chk(sb)) appendWithNSString:@"methodName="];
  (void) [((JavaLangStringBuffer *) nil_chk(sb)) appendWithNSString:methodName_];
  (void) [((JavaLangStringBuffer *) nil_chk(sb)) appendWithNSString:@", paramCount="];
  (void) [((JavaLangStringBuffer *) nil_chk(sb)) appendWithInt:paramCount_];
  (void) [((JavaLangStringBuffer *) nil_chk(sb)) appendWithNSString:@", paramTypes={"];
  if (paramTypes_ != nil) {
    for (int i = 0; i < (int) [paramTypes_ count]; i++) {
      if (i > 0) {
        (void) [((JavaLangStringBuffer *) nil_chk(sb)) appendWithNSString:@", "];
      }
      (void) [((JavaLangStringBuffer *) nil_chk(sb)) appendWithNSString:[((IOSClass *) nil_chk([paramTypes_ objectAtIndex:i])) getName]];
    }
  }
  (void) [((JavaLangStringBuffer *) nil_chk(sb)) appendWithNSString:@"}"];
  (void) [((JavaLangStringBuffer *) nil_chk(sb)) appendWithNSString:@"]"];
  return ([((JavaLangStringBuffer *) nil_chk(sb)) description]);
}

+ (void)initialize {
  if (self == [OrgOssPdfreporterUsesOrgApacheDigesterImplCallMethodRule class]) {
    OrgOssPdfreporterUsesOrgApacheDigesterImplCallMethodRule_logger_ = [JavaUtilLoggingLogger getLoggerWithNSString:[[IOSClass classWithClass:[OrgOssPdfreporterUsesOrgApacheDigesterImplCallMethodRule class]] getName]];
  }
}

- (void)copyAllPropertiesTo:(id)copy {
  [super copyAllPropertiesTo:copy];
  OrgOssPdfreporterUsesOrgApacheDigesterImplCallMethodRule *typedCopy = (OrgOssPdfreporterUsesOrgApacheDigesterImplCallMethodRule *) copy;
  typedCopy.bodyText = bodyText_;
  typedCopy.targetOffset = targetOffset_;
  typedCopy.methodName = methodName_;
  typedCopy.paramCount = paramCount_;
  typedCopy.paramTypes = paramTypes_;
  typedCopy.paramClassNames = paramClassNames_;
  typedCopy.useExactMatch = useExactMatch_;
}

@end
