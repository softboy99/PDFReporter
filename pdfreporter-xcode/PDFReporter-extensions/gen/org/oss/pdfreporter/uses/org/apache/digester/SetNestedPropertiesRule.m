//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: pdfreporter-extensions/src/org/oss/pdfreporter/uses/org/apache/digester/SetNestedPropertiesRule.java
//
//  Created by kendra on 9/27/13.
//

#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "java/lang/NoSuchMethodException.h"
#include "java/lang/NullPointerException.h"
#include "java/lang/StringBuffer.h"
#include "java/util/ArrayList.h"
#include "java/util/HashMap.h"
#include "java/util/LinkedList.h"
#include "java/util/List.h"
#include "org/oss/pdfreporter/commons/beans/IBeansUtils.h"
#include "org/oss/pdfreporter/commons/beans/factory/IBeansFactory.h"
#include "org/oss/pdfreporter/registry/IRegistry.h"
#include "org/oss/pdfreporter/uses/org/apache/digester/IDigester.h"
#include "org/oss/pdfreporter/uses/org/apache/digester/IRule.h"
#include "org/oss/pdfreporter/uses/org/apache/digester/IRules.h"
#include "org/oss/pdfreporter/uses/org/apache/digester/SetNestedPropertiesRule.h"
#include "org/oss/pdfreporter/xml/parsers/IAttributes.h"

@implementation OrgOssPdfreporterUsesOrgApacheDigesterSetNestedPropertiesRule

@synthesize trimData = trimData_;
@synthesize allowUnknownChildElements = allowUnknownChildElements_;
@synthesize elementNames = elementNames_;

- (id)init {
  if ((self = [super init])) {
    trimData_ = YES;
    allowUnknownChildElements_ = NO;
    elementNames_ = [[JavaUtilHashMap alloc] init];
  }
  return self;
}

- (id)initWithNSString:(NSString *)elementName
          withNSString:(NSString *)propertyName {
  if ((self = [super init])) {
    trimData_ = YES;
    allowUnknownChildElements_ = NO;
    elementNames_ = [[JavaUtilHashMap alloc] init];
    (void) [((JavaUtilHashMap *) nil_chk(elementNames_)) putWithId:elementName withId:propertyName];
  }
  return self;
}

- (id)initWithNSStringArray:(IOSObjectArray *)elementNames
          withNSStringArray:(IOSObjectArray *)propertyNames {
  if ((self = [super init])) {
    trimData_ = YES;
    allowUnknownChildElements_ = NO;
    elementNames_ = [[JavaUtilHashMap alloc] init];
    for (int i = 0, size = (int) [((IOSObjectArray *) nil_chk(elementNames)) count]; i < size; i++) {
      NSString *propName = nil;
      if (i < (int) [((IOSObjectArray *) nil_chk(propertyNames)) count]) {
        propName = [((IOSObjectArray *) nil_chk(propertyNames)) objectAtIndex:i];
      }
      (void) [((JavaUtilHashMap *) nil_chk(self.elementNames)) putWithId:[((IOSObjectArray *) nil_chk(elementNames)) objectAtIndex:i] withId:propName];
    }
  }
  return self;
}

- (void)setDigesterWithOrgOssPdfreporterUsesOrgApacheDigesterIDigester:(id<OrgOssPdfreporterUsesOrgApacheDigesterIDigester>)digester {
  [super setDigesterWithOrgOssPdfreporterUsesOrgApacheDigesterIDigester:digester];
}

- (void)setTrimDataWithBOOL:(BOOL)trimData {
  self.trimData = trimData;
}

- (BOOL)getTrimData {
  return trimData_;
}

- (void)setAllowUnknownChildElementsWithBOOL:(BOOL)allowUnknownChildElements {
  self.allowUnknownChildElements = allowUnknownChildElements;
}

- (BOOL)getAllowUnknownChildElements {
  return allowUnknownChildElements_;
}

- (void)beginWithNSString:(NSString *)namespace_
             withNSString:(NSString *)name
withOrgOssPdfreporterXmlParsersIAttributes:(id<OrgOssPdfreporterXmlParsersIAttributes>)attributes {
  id<OrgOssPdfreporterUsesOrgApacheDigesterIRules> oldRules = [((id<OrgOssPdfreporterUsesOrgApacheDigesterIDigester>) nil_chk(digester_)) getRules];
  OrgOssPdfreporterUsesOrgApacheDigesterSetNestedPropertiesRule_AnyChildRule *anyChildRule = [[OrgOssPdfreporterUsesOrgApacheDigesterSetNestedPropertiesRule_AnyChildRule alloc] initWithOrgOssPdfreporterUsesOrgApacheDigesterSetNestedPropertiesRule:self];
  [((OrgOssPdfreporterUsesOrgApacheDigesterSetNestedPropertiesRule_AnyChildRule *) nil_chk(anyChildRule)) setDigesterWithOrgOssPdfreporterUsesOrgApacheDigesterIDigester:digester_];
  OrgOssPdfreporterUsesOrgApacheDigesterSetNestedPropertiesRule_AnyChildRules *newRules = [[OrgOssPdfreporterUsesOrgApacheDigesterSetNestedPropertiesRule_AnyChildRules alloc] initWithOrgOssPdfreporterUsesOrgApacheDigesterSetNestedPropertiesRule:self withOrgOssPdfreporterUsesOrgApacheDigesterSetNestedPropertiesRule_AnyChildRule:anyChildRule];
  [((OrgOssPdfreporterUsesOrgApacheDigesterSetNestedPropertiesRule_AnyChildRules *) nil_chk(newRules)) init__WithNSString:[NSString stringWithFormat:@"%@/", [((id<OrgOssPdfreporterUsesOrgApacheDigesterIDigester>) nil_chk(digester_)) getMatch]] withOrgOssPdfreporterUsesOrgApacheDigesterIRules:oldRules];
  [((id<OrgOssPdfreporterUsesOrgApacheDigesterIDigester>) nil_chk(digester_)) setRulesWithOrgOssPdfreporterUsesOrgApacheDigesterIRules:newRules];
}

- (void)bodyWithNSString:(NSString *)bodyText {
  OrgOssPdfreporterUsesOrgApacheDigesterSetNestedPropertiesRule_AnyChildRules *newRules = (OrgOssPdfreporterUsesOrgApacheDigesterSetNestedPropertiesRule_AnyChildRules *) [((id<OrgOssPdfreporterUsesOrgApacheDigesterIDigester>) nil_chk(digester_)) getRules];
  [((id<OrgOssPdfreporterUsesOrgApacheDigesterIDigester>) nil_chk(digester_)) setRulesWithOrgOssPdfreporterUsesOrgApacheDigesterIRules:[((OrgOssPdfreporterUsesOrgApacheDigesterSetNestedPropertiesRule_AnyChildRules *) nil_chk(newRules)) getOldRules]];
}

- (void)addAliasWithNSString:(NSString *)elementName
                withNSString:(NSString *)propertyName {
  (void) [((JavaUtilHashMap *) nil_chk(elementNames_)) putWithId:elementName withId:propertyName];
}

- (NSString *)description {
  JavaLangStringBuffer *sb = [[JavaLangStringBuffer alloc] initWithNSString:@"SetNestedPropertiesRule["];
  (void) [((JavaLangStringBuffer *) nil_chk(sb)) appendWithNSString:@"allowUnknownChildElements="];
  (void) [((JavaLangStringBuffer *) nil_chk(sb)) appendWithBOOL:allowUnknownChildElements_];
  (void) [((JavaLangStringBuffer *) nil_chk(sb)) appendWithNSString:@", trimData="];
  (void) [((JavaLangStringBuffer *) nil_chk(sb)) appendWithBOOL:trimData_];
  (void) [((JavaLangStringBuffer *) nil_chk(sb)) appendWithNSString:@", elementNames="];
  (void) [((JavaLangStringBuffer *) nil_chk(sb)) appendWithId:elementNames_];
  (void) [((JavaLangStringBuffer *) nil_chk(sb)) appendWithNSString:@"]"];
  return [((JavaLangStringBuffer *) nil_chk(sb)) description];
}

- (void)copyAllPropertiesTo:(id)copy {
  [super copyAllPropertiesTo:copy];
  OrgOssPdfreporterUsesOrgApacheDigesterSetNestedPropertiesRule *typedCopy = (OrgOssPdfreporterUsesOrgApacheDigesterSetNestedPropertiesRule *) copy;
  typedCopy.trimData = trimData_;
  typedCopy.allowUnknownChildElements = allowUnknownChildElements_;
  typedCopy.elementNames = elementNames_;
}

@end
@implementation OrgOssPdfreporterUsesOrgApacheDigesterSetNestedPropertiesRule_AnyChildRules

@synthesize matchPrefix = matchPrefix_;
@synthesize decoratedRules = decoratedRules_;
@synthesize rules_ = rules__;
@synthesize rule = rule_;

- (id)initWithOrgOssPdfreporterUsesOrgApacheDigesterSetNestedPropertiesRule:(OrgOssPdfreporterUsesOrgApacheDigesterSetNestedPropertiesRule *)outer$
withOrgOssPdfreporterUsesOrgApacheDigesterSetNestedPropertiesRule_AnyChildRule:(OrgOssPdfreporterUsesOrgApacheDigesterSetNestedPropertiesRule_AnyChildRule *)rule {
  if ((self = [super init])) {
    matchPrefix_ = nil;
    decoratedRules_ = nil;
    rules__ = [[JavaUtilArrayList alloc] initWithInt:1];
    self.rule = rule;
    [((JavaUtilArrayList *) nil_chk(rules__)) addWithId:rule];
  }
  return self;
}

- (id<OrgOssPdfreporterUsesOrgApacheDigesterIDigester>)getDigester {
  return nil;
}

- (void)setDigesterWithOrgOssPdfreporterUsesOrgApacheDigesterIDigester:(id<OrgOssPdfreporterUsesOrgApacheDigesterIDigester>)digester {
}

- (NSString *)getNamespaceURI {
  return nil;
}

- (void)setNamespaceURIWithNSString:(NSString *)namespaceURI {
}

- (void)addWithNSString:(NSString *)pattern
withOrgOssPdfreporterUsesOrgApacheDigesterIRule:(id<OrgOssPdfreporterUsesOrgApacheDigesterIRule>)rule {
}

- (void)clear {
}

- (id<JavaUtilList>)matchWithNSString:(NSString *)matchPath {
  return [self matchWithNSString:nil withNSString:matchPath];
}

- (id<JavaUtilList>)matchWithNSString:(NSString *)namespaceURI
                         withNSString:(NSString *)matchPath {
  id<JavaUtilList> match = [((id<OrgOssPdfreporterUsesOrgApacheDigesterIRules>) nil_chk(decoratedRules_)) matchWithNSString:namespaceURI withNSString:matchPath];
  if (([((NSString *) nil_chk(matchPath)) hasPrefix:matchPrefix_]) && ([((NSString *) nil_chk(matchPath)) indexOf:'/' fromIndex:[((NSString *) nil_chk(matchPrefix_)) length]] == -1)) {
    if ((match == nil || [((id<JavaUtilList>) nil_chk(match)) size] == 0)) {
      return rules__;
    }
    else {
      JavaUtilLinkedList *newMatch = [[JavaUtilLinkedList alloc] initWithJavaUtilCollection:match];
      [((JavaUtilLinkedList *) nil_chk(newMatch)) addLastWithId:rule_];
      return newMatch;
    }
  }
  else {
    return match;
  }
}

- (id<JavaUtilList>)rules {
  return [((id<OrgOssPdfreporterUsesOrgApacheDigesterIRules>) nil_chk(decoratedRules_)) rules];
}

- (void)init__WithNSString:(NSString *)prefix
withOrgOssPdfreporterUsesOrgApacheDigesterIRules:(id<OrgOssPdfreporterUsesOrgApacheDigesterIRules>)rules OBJC_METHOD_FAMILY_NONE {
  matchPrefix_ = prefix;
  decoratedRules_ = rules;
}

- (id<OrgOssPdfreporterUsesOrgApacheDigesterIRules>)getOldRules {
  return decoratedRules_;
}

- (void)copyAllPropertiesTo:(id)copy {
  [super copyAllPropertiesTo:copy];
  OrgOssPdfreporterUsesOrgApacheDigesterSetNestedPropertiesRule_AnyChildRules *typedCopy = (OrgOssPdfreporterUsesOrgApacheDigesterSetNestedPropertiesRule_AnyChildRules *) copy;
  typedCopy.matchPrefix = matchPrefix_;
  typedCopy.decoratedRules = decoratedRules_;
  typedCopy.rules_ = rules__;
  typedCopy.rule = rule_;
}

@end
@implementation OrgOssPdfreporterUsesOrgApacheDigesterSetNestedPropertiesRule_AnyChildRule

@synthesize this$0 = this$0_;
@synthesize currChildElementName = currChildElementName_;

- (void)beginWithNSString:(NSString *)namespaceURI
             withNSString:(NSString *)name
withOrgOssPdfreporterXmlParsersIAttributes:(id<OrgOssPdfreporterXmlParsersIAttributes>)attributes {
  currChildElementName_ = name;
}

- (void)bodyWithNSString:(NSString *)value {
  NSString *propName = currChildElementName_;
  if ([((JavaUtilHashMap *) nil_chk(this$0_.elementNames)) containsKeyWithId:currChildElementName_]) {
    propName = [((JavaUtilHashMap *) nil_chk(this$0_.elementNames)) getWithId:currChildElementName_];
    if (propName == nil) {
      return;
    }
  }
  id top = [((id<OrgOssPdfreporterUsesOrgApacheDigesterIDigester>) nil_chk(digester_)) peek];
  if (this$0_.trimData) {
    value = [((NSString *) nil_chk(value)) trim];
  }
  if (!this$0_.allowUnknownChildElements) {
    if (![((id<OrgOssPdfreporterCommonsBeansIBeansUtils>) nil_chk([((id<OrgOssPdfreporterCommonsBeansFactoryIBeansFactory>) nil_chk([OrgOssPdfreporterRegistryIRegistry getIBeansFactory])) newBeansUtils])) hasPropertyWithId:top withNSString:propName]) {
      @throw [[JavaLangNoSuchMethodException alloc] initWithNSString:[NSString stringWithFormat:@"Bean has no property named %@", propName]];
    }
  }
  @try {
    [((id<OrgOssPdfreporterCommonsBeansIBeansUtils>) nil_chk([((id<OrgOssPdfreporterCommonsBeansFactoryIBeansFactory>) nil_chk([OrgOssPdfreporterRegistryIRegistry getIBeansFactory])) newBeansUtils])) setPropertyWithId:top withNSString:propName withId:value];
  }
  @catch (JavaLangNullPointerException *e) {
    @throw e;
  }
}

- (void)endWithNSString:(NSString *)namespace_
           withNSString:(NSString *)name {
  currChildElementName_ = nil;
}

- (id)initWithOrgOssPdfreporterUsesOrgApacheDigesterSetNestedPropertiesRule:(OrgOssPdfreporterUsesOrgApacheDigesterSetNestedPropertiesRule *)outer$ {
  if ((self = [super init])) {
    this$0_ = outer$;
    currChildElementName_ = nil;
  }
  return self;
}

- (void)copyAllPropertiesTo:(id)copy {
  [super copyAllPropertiesTo:copy];
  OrgOssPdfreporterUsesOrgApacheDigesterSetNestedPropertiesRule_AnyChildRule *typedCopy = (OrgOssPdfreporterUsesOrgApacheDigesterSetNestedPropertiesRule_AnyChildRule *) copy;
  typedCopy.this$0 = this$0_;
  typedCopy.currChildElementName = currChildElementName_;
}

@end
