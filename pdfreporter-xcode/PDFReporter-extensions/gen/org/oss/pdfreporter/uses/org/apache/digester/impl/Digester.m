//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: pdfreporter-extensions/src/org/oss/pdfreporter/uses/org/apache/digester/impl/Digester.java
//
//  Created by kendra on 9/27/13.
//

#include "IOSCharArray.h"
#include "IOSClass.h"
#include "java/lang/Error.h"
#include "java/lang/Exception.h"
#include "java/lang/StringBuffer.h"
#include "java/lang/Throwable.h"
#include "java/lang/reflect/InvocationTargetException.h"
#include "java/util/EmptyStackException.h"
#include "java/util/List.h"
#include "java/util/Stack.h"
#include "java/util/logging/Level.h"
#include "java/util/logging/Logger.h"
#include "org/oss/pdfreporter/registry/IRegistry.h"
#include "org/oss/pdfreporter/uses/org/apache/digester/IObjectCreationFactory.h"
#include "org/oss/pdfreporter/uses/org/apache/digester/IRule.h"
#include "org/oss/pdfreporter/uses/org/apache/digester/IRules.h"
#include "org/oss/pdfreporter/uses/org/apache/digester/impl/CallMethodRule.h"
#include "org/oss/pdfreporter/uses/org/apache/digester/impl/CallParamRule.h"
#include "org/oss/pdfreporter/uses/org/apache/digester/impl/Digester.h"
#include "org/oss/pdfreporter/uses/org/apache/digester/impl/FactoryCreateRule.h"
#include "org/oss/pdfreporter/uses/org/apache/digester/impl/ObjectCreateRule.h"
#include "org/oss/pdfreporter/uses/org/apache/digester/impl/RulesBase.h"
#include "org/oss/pdfreporter/uses/org/apache/digester/impl/SetNextRule.h"
#include "org/oss/pdfreporter/xml/parsers/IAttributes.h"
#include "org/oss/pdfreporter/xml/parsers/IInputSource.h"
#include "org/oss/pdfreporter/xml/parsers/IXmlParser.h"
#include "org/oss/pdfreporter/xml/parsers/XMLEntityResolver.h"
#include "org/oss/pdfreporter/xml/parsers/XMLErrorHandler.h"
#include "org/oss/pdfreporter/xml/parsers/XMLParseException.h"
#include "org/oss/pdfreporter/xml/parsers/factory/IXmlParserFactory.h"

@implementation OrgOssPdfreporterUsesOrgApacheDigesterImplDigester

static JavaUtilLoggingLogger * OrgOssPdfreporterUsesOrgApacheDigesterImplDigester_logger_;

@synthesize stack = stack_;
@synthesize match = match_;
@synthesize matches = matches_;
@synthesize root = root_;
@synthesize params = params_;
@synthesize bodyText = bodyText_;
@synthesize bodyTexts = bodyTexts_;
@synthesize rules = rules_;
@synthesize errorHandler = errorHandler_;
@synthesize resolver = resolver_;

+ (JavaUtilLoggingLogger *)logger {
  return OrgOssPdfreporterUsesOrgApacheDigesterImplDigester_logger_;
}

- (id)init {
  if ((self = [super init])) {
    rules_ = nil;
    errorHandler_ = nil;
    resolver_ = nil;
    self.stack = [[JavaUtilStack alloc] init];
    self.match = @"";
    self.matches = [[JavaUtilStack alloc] init];
    self.root = nil;
    self.params = [[JavaUtilStack alloc] init];
    self.bodyText = [[JavaLangStringBuffer alloc] init];
    self.bodyTexts = [[JavaUtilStack alloc] init];
  }
  return self;
}

- (id<OrgOssPdfreporterXmlParsersFactoryIXmlParserFactory>)getXMLParserFactory {
  return [OrgOssPdfreporterRegistryIRegistry getIXmlParserFactory];
}

- (void)startElementWithNSString:(NSString *)namespaceURI
                    withNSString:(NSString *)localName
                    withNSString:(NSString *)qName
withOrgOssPdfreporterXmlParsersIAttributes:(id<OrgOssPdfreporterXmlParsersIAttributes>)list {
  BOOL debug = [((JavaUtilLoggingLogger *) nil_chk(OrgOssPdfreporterUsesOrgApacheDigesterImplDigester_logger_)) isLoggableWithJavaUtilLoggingLevel:[JavaUtilLoggingLevel FINEST]];
  if (debug) {
    [((JavaUtilLoggingLogger *) nil_chk(OrgOssPdfreporterUsesOrgApacheDigesterImplDigester_logger_)) finestWithNSString:[NSString stringWithFormat:@"startElement(%@,%@,%@)", namespaceURI, localName, qName]];
  }
  (void) [((JavaUtilStack *) nil_chk(bodyTexts_)) pushWithId:bodyText_];
  if (debug) {
    [((JavaUtilLoggingLogger *) nil_chk(OrgOssPdfreporterUsesOrgApacheDigesterImplDigester_logger_)) finestWithNSString:[NSString stringWithFormat:@"  Pushing body text '%@'", [((JavaLangStringBuffer *) nil_chk(bodyText_)) description]]];
  }
  bodyText_ = [[JavaLangStringBuffer alloc] init];
  NSString *name = localName;
  if ((name == nil) || ([((NSString *) nil_chk(name)) length] < 1)) {
    name = qName;
  }
  JavaLangStringBuffer *sb = [[JavaLangStringBuffer alloc] initWithNSString:match_];
  if ([((NSString *) nil_chk(match_)) length] > 0) {
    (void) [((JavaLangStringBuffer *) nil_chk(sb)) appendWithUnichar:'/'];
  }
  (void) [((JavaLangStringBuffer *) nil_chk(sb)) appendWithNSString:name];
  match_ = [((JavaLangStringBuffer *) nil_chk(sb)) description];
  if (debug) {
    [((JavaUtilLoggingLogger *) nil_chk(OrgOssPdfreporterUsesOrgApacheDigesterImplDigester_logger_)) finestWithNSString:[NSString stringWithFormat:@"  New match='%@'", match_]];
  }
  id<JavaUtilList> rules = [((id<OrgOssPdfreporterUsesOrgApacheDigesterIRules>) nil_chk([self getRules])) matchWithNSString:namespaceURI withNSString:match_];
  (void) [((JavaUtilStack *) nil_chk(matches_)) pushWithId:rules];
  if ((rules != nil) && ([((id<JavaUtilList>) nil_chk(rules)) size] > 0)) {
    for (int i = 0; i < [((id<JavaUtilList>) nil_chk(rules)) size]; i++) {
      @try {
        id<OrgOssPdfreporterUsesOrgApacheDigesterIRule> rule = [((id<JavaUtilList>) nil_chk(rules)) getWithInt:i];
        if (debug) {
          [((JavaUtilLoggingLogger *) nil_chk(OrgOssPdfreporterUsesOrgApacheDigesterImplDigester_logger_)) finestWithNSString:[NSString stringWithFormat:@"  Fire begin() for %@", rule]];
        }
        [((id<OrgOssPdfreporterUsesOrgApacheDigesterIRule>) nil_chk(rule)) beginWithNSString:namespaceURI withNSString:name withOrgOssPdfreporterXmlParsersIAttributes:list];
      }
      @catch (JavaLangException *e) {
        [((JavaUtilLoggingLogger *) nil_chk(OrgOssPdfreporterUsesOrgApacheDigesterImplDigester_logger_)) logWithJavaUtilLoggingLevel:[JavaUtilLoggingLevel SEVERE] withNSString:@"Begin event threw exception" withJavaLangThrowable:e];
        @throw [self createSAXExceptionWithJavaLangException:e];
      }
      @catch (JavaLangError *e) {
        [((JavaUtilLoggingLogger *) nil_chk(OrgOssPdfreporterUsesOrgApacheDigesterImplDigester_logger_)) logWithJavaUtilLoggingLevel:[JavaUtilLoggingLevel SEVERE] withNSString:@"Begin event threw error" withJavaLangThrowable:e];
        @throw e;
      }
    }
  }
  else {
    if (debug) {
      [((JavaUtilLoggingLogger *) nil_chk(OrgOssPdfreporterUsesOrgApacheDigesterImplDigester_logger_)) finestWithNSString:[NSString stringWithFormat:@"  No rules found matching '%@'.", match_]];
    }
  }
}

- (void)charactersWithCharArray:(IOSCharArray *)buffer
                        withInt:(int)start
                        withInt:(int)length {
  if ([((JavaUtilLoggingLogger *) nil_chk(OrgOssPdfreporterUsesOrgApacheDigesterImplDigester_logger_)) isLoggableWithJavaUtilLoggingLevel:[JavaUtilLoggingLevel FINEST]]) {
    [((JavaUtilLoggingLogger *) nil_chk(OrgOssPdfreporterUsesOrgApacheDigesterImplDigester_logger_)) finestWithNSString:[NSString stringWithFormat:@"characters(%@)", [NSString stringWithCharacters:buffer offset:start length:length]]];
  }
  (void) [((JavaLangStringBuffer *) nil_chk(bodyText_)) appendWithCharArray:buffer withInt:start withInt:length];
}

- (void)endElementWithNSString:(NSString *)namespaceURI
                  withNSString:(NSString *)localName
                  withNSString:(NSString *)qName {
  BOOL debug = [((JavaUtilLoggingLogger *) nil_chk(OrgOssPdfreporterUsesOrgApacheDigesterImplDigester_logger_)) isLoggableWithJavaUtilLoggingLevel:[JavaUtilLoggingLevel FINEST]];
  if (debug) {
    [((JavaUtilLoggingLogger *) nil_chk(OrgOssPdfreporterUsesOrgApacheDigesterImplDigester_logger_)) finestWithNSString:[NSString stringWithFormat:@"endElement(%@,%@,%@)", namespaceURI, localName, qName]];
    [((JavaUtilLoggingLogger *) nil_chk(OrgOssPdfreporterUsesOrgApacheDigesterImplDigester_logger_)) finestWithNSString:[NSString stringWithFormat:@"  match='%@'", match_]];
  }
  NSString *name = localName;
  if ((name == nil) || ([((NSString *) nil_chk(name)) length] < 1)) {
    name = qName;
  }
  id<JavaUtilList> rules = [((JavaUtilStack *) nil_chk(matches_)) pop];
  if ((rules != nil) && ([((id<JavaUtilList>) nil_chk(rules)) size] > 0)) {
    NSString *bodyText = [((JavaLangStringBuffer *) nil_chk(self.bodyText)) description];
    for (int i = 0; i < [((id<JavaUtilList>) nil_chk(rules)) size]; i++) {
      @try {
        id<OrgOssPdfreporterUsesOrgApacheDigesterIRule> rule = [((id<JavaUtilList>) nil_chk(rules)) getWithInt:i];
        if (debug) {
          [((JavaUtilLoggingLogger *) nil_chk(OrgOssPdfreporterUsesOrgApacheDigesterImplDigester_logger_)) finestWithNSString:[NSString stringWithFormat:@"  Fire body() for %@", rule]];
        }
        [((id<OrgOssPdfreporterUsesOrgApacheDigesterIRule>) nil_chk(rule)) bodyWithNSString:namespaceURI withNSString:name withNSString:bodyText];
      }
      @catch (JavaLangException *e) {
        [((JavaUtilLoggingLogger *) nil_chk(OrgOssPdfreporterUsesOrgApacheDigesterImplDigester_logger_)) logWithJavaUtilLoggingLevel:[JavaUtilLoggingLevel SEVERE] withNSString:@"Body event threw exception" withJavaLangThrowable:e];
        @throw [self createSAXExceptionWithJavaLangException:e];
      }
      @catch (JavaLangError *e) {
        [((JavaUtilLoggingLogger *) nil_chk(OrgOssPdfreporterUsesOrgApacheDigesterImplDigester_logger_)) logWithJavaUtilLoggingLevel:[JavaUtilLoggingLevel SEVERE] withNSString:@"Body event threw error" withJavaLangThrowable:e];
        @throw e;
      }
    }
  }
  else {
    if (debug) {
      [((JavaUtilLoggingLogger *) nil_chk(OrgOssPdfreporterUsesOrgApacheDigesterImplDigester_logger_)) finestWithNSString:[NSString stringWithFormat:@"  No rules found matching '%@'.", match_]];
    }
  }
  bodyText_ = [((JavaUtilStack *) nil_chk(bodyTexts_)) pop];
  if (debug) {
    [((JavaUtilLoggingLogger *) nil_chk(OrgOssPdfreporterUsesOrgApacheDigesterImplDigester_logger_)) finestWithNSString:[NSString stringWithFormat:@"  Popping body text '%@'", [((JavaLangStringBuffer *) nil_chk(bodyText_)) description]]];
  }
  if (rules != nil) {
    for (int i = 0; i < [rules size]; i++) {
      int j = ([rules size] - i) - 1;
      @try {
        id<OrgOssPdfreporterUsesOrgApacheDigesterIRule> rule = [rules getWithInt:j];
        if (debug) {
          [((JavaUtilLoggingLogger *) nil_chk(OrgOssPdfreporterUsesOrgApacheDigesterImplDigester_logger_)) finestWithNSString:[NSString stringWithFormat:@"  Fire end() for %@", rule]];
        }
        [((id<OrgOssPdfreporterUsesOrgApacheDigesterIRule>) nil_chk(rule)) endWithNSString:namespaceURI withNSString:name];
      }
      @catch (JavaLangException *e) {
        [((JavaUtilLoggingLogger *) nil_chk(OrgOssPdfreporterUsesOrgApacheDigesterImplDigester_logger_)) logWithJavaUtilLoggingLevel:[JavaUtilLoggingLevel SEVERE] withNSString:@"End event threw exception" withJavaLangThrowable:e];
        @throw [self createSAXExceptionWithJavaLangException:e];
      }
      @catch (JavaLangError *e) {
        [((JavaUtilLoggingLogger *) nil_chk(OrgOssPdfreporterUsesOrgApacheDigesterImplDigester_logger_)) logWithJavaUtilLoggingLevel:[JavaUtilLoggingLevel SEVERE] withNSString:@"End event threw error" withJavaLangThrowable:e];
        @throw e;
      }
    }
  }
  int slash = [((NSString *) nil_chk(match_)) lastIndexOf:'/'];
  if (slash >= 0) {
    match_ = [((NSString *) nil_chk(match_)) substring:0 endIndex:slash];
  }
  else {
    match_ = @"";
  }
}

- (id)peek {
  @try {
    return ([((JavaUtilStack *) nil_chk(stack_)) peek]);
  }
  @catch (JavaUtilEmptyStackException *e) {
    [((JavaUtilLoggingLogger *) nil_chk(OrgOssPdfreporterUsesOrgApacheDigesterImplDigester_logger_)) warningWithNSString:@"Empty stack (returning null)"];
    return (nil);
  }
}

- (id)peekWithInt:(int)n {
  int index = ([((JavaUtilStack *) nil_chk(stack_)) size] - 1) - n;
  if (index < 0) {
    [((JavaUtilLoggingLogger *) nil_chk(OrgOssPdfreporterUsesOrgApacheDigesterImplDigester_logger_)) warningWithNSString:@"Empty stack (returning null)"];
    return (nil);
  }
  @try {
    return ([((JavaUtilStack *) nil_chk(stack_)) getWithInt:index]);
  }
  @catch (JavaUtilEmptyStackException *e) {
    [((JavaUtilLoggingLogger *) nil_chk(OrgOssPdfreporterUsesOrgApacheDigesterImplDigester_logger_)) warningWithNSString:@"Empty stack (returning null)"];
    return (nil);
  }
}

- (id)pop {
  @try {
    id popped = [((JavaUtilStack *) nil_chk(stack_)) pop];
    return popped;
  }
  @catch (JavaUtilEmptyStackException *e) {
    [((JavaUtilLoggingLogger *) nil_chk(OrgOssPdfreporterUsesOrgApacheDigesterImplDigester_logger_)) warningWithNSString:@"Empty stack (returning null)"];
    return (nil);
  }
}

- (void)pushWithId:(id)object {
  if ([((JavaUtilStack *) nil_chk(stack_)) size] == 0) {
    root_ = object;
  }
  (void) [((JavaUtilStack *) nil_chk(stack_)) pushWithId:object];
}

- (int)getCount {
  return ([((JavaUtilStack *) nil_chk(stack_)) size]);
}

- (void)setNamespaceAwareWithBOOL:(BOOL)namespaceAware {
  [((id<OrgOssPdfreporterXmlParsersFactoryIXmlParserFactory>) nil_chk([self getXMLParserFactory])) setNamespaceAwareWithBOOL:namespaceAware];
  [((id<OrgOssPdfreporterXmlParsersFactoryIXmlParserFactory>) nil_chk([self getXMLParserFactory])) configure];
}

- (void)setRuleNamespaceURIWithNSString:(NSString *)ruleNamespaceURI {
  [((id<OrgOssPdfreporterUsesOrgApacheDigesterIRules>) nil_chk([self getRules])) setNamespaceURIWithNSString:ruleNamespaceURI];
}

- (void)setErrorHandlerWithOrgOssPdfreporterXmlParsersXMLErrorHandler:(id<OrgOssPdfreporterXmlParsersXMLErrorHandler>)errorHandler {
  self.errorHandler = errorHandler;
}

- (void)setValidatingWithBOOL:(BOOL)validating {
  [((id<OrgOssPdfreporterXmlParsersFactoryIXmlParserFactory>) nil_chk([self getXMLParserFactory])) setValidatingWithBOOL:validating];
  [((id<OrgOssPdfreporterXmlParsersFactoryIXmlParserFactory>) nil_chk([self getXMLParserFactory])) configure];
}

- (void)setXmlEntityResolverWithOrgOssPdfreporterXmlParsersXMLEntityResolver:(id<OrgOssPdfreporterXmlParsersXMLEntityResolver>)resolver {
  self.resolver = resolver;
}

- (id)parseWithOrgOssPdfreporterXmlParsersIInputSource:(id<OrgOssPdfreporterXmlParsersIInputSource>)input {
  id<OrgOssPdfreporterXmlParsersIXmlParser> parser = [((id<OrgOssPdfreporterXmlParsersFactoryIXmlParserFactory>) nil_chk([self getXMLParserFactory])) newXmlParserWithOrgOssPdfreporterXmlParsersIInputSource:input withOrgOssPdfreporterXmlParsersIContentHandler:self];
  [((id<OrgOssPdfreporterXmlParsersIXmlParser>) nil_chk(parser)) setErrorHandlerWithOrgOssPdfreporterXmlParsersXMLErrorHandler:errorHandler_];
  [((id<OrgOssPdfreporterXmlParsersIXmlParser>) nil_chk(parser)) setEntityResolverWithOrgOssPdfreporterXmlParsersXMLEntityResolver:resolver_];
  [((id<OrgOssPdfreporterXmlParsersIXmlParser>) nil_chk(parser)) parse];
  return root_;
}

- (id<OrgOssPdfreporterUsesOrgApacheDigesterIRules>)getRules {
  if (self.rules == nil) {
    self.rules = [[OrgOssPdfreporterUsesOrgApacheDigesterImplRulesBase alloc] init];
    [self.rules setDigesterWithOrgOssPdfreporterUsesOrgApacheDigesterIDigester:self];
  }
  return (self.rules);
}

- (void)setRulesWithOrgOssPdfreporterUsesOrgApacheDigesterIRules:(id<OrgOssPdfreporterUsesOrgApacheDigesterIRules>)rules {
  self.rules = rules;
  [((id<OrgOssPdfreporterUsesOrgApacheDigesterIRules>) nil_chk(self.rules)) setDigesterWithOrgOssPdfreporterUsesOrgApacheDigesterIDigester:self];
}

- (void)addRuleWithNSString:(NSString *)pattern
withOrgOssPdfreporterUsesOrgApacheDigesterIRule:(id<OrgOssPdfreporterUsesOrgApacheDigesterIRule>)rule {
  [((id<OrgOssPdfreporterUsesOrgApacheDigesterIRule>) nil_chk(rule)) setDigesterWithOrgOssPdfreporterUsesOrgApacheDigesterIDigester:self];
  [((id<OrgOssPdfreporterUsesOrgApacheDigesterIRules>) nil_chk([self getRules])) addWithNSString:pattern withOrgOssPdfreporterUsesOrgApacheDigesterIRule:rule];
}

- (void)addCallMethodWithNSString:(NSString *)pattern
                     withNSString:(NSString *)methodName
                          withInt:(int)paramCount {
  [self addRuleWithNSString:pattern withOrgOssPdfreporterUsesOrgApacheDigesterIRule:[[OrgOssPdfreporterUsesOrgApacheDigesterImplCallMethodRule alloc] initWithNSString:methodName withInt:paramCount]];
}

- (void)addCallMethodWithNSString:(NSString *)pattern
                     withNSString:(NSString *)methodName {
  [self addRuleWithNSString:pattern withOrgOssPdfreporterUsesOrgApacheDigesterIRule:[[OrgOssPdfreporterUsesOrgApacheDigesterImplCallMethodRule alloc] initWithNSString:methodName]];
}

- (void)addCallParamWithNSString:(NSString *)pattern
                         withInt:(int)paramIndex
                    withNSString:(NSString *)attributeName {
  [self addRuleWithNSString:pattern withOrgOssPdfreporterUsesOrgApacheDigesterIRule:[[OrgOssPdfreporterUsesOrgApacheDigesterImplCallParamRule alloc] initWithInt:paramIndex withNSString:attributeName]];
}

- (void)addFactoryCreateWithNSString:(NSString *)pattern
                        withNSString:(NSString *)className_ {
  [self addRuleWithNSString:pattern withOrgOssPdfreporterUsesOrgApacheDigesterIRule:[[OrgOssPdfreporterUsesOrgApacheDigesterImplFactoryCreateRule alloc] initWithNSString:className_ withNSString:nil withBOOL:NO]];
}

- (void)addFactoryCreateWithNSString:(NSString *)pattern
withOrgOssPdfreporterUsesOrgApacheDigesterIObjectCreationFactory:(id<OrgOssPdfreporterUsesOrgApacheDigesterIObjectCreationFactory>)creationFactory {
  [((id<OrgOssPdfreporterUsesOrgApacheDigesterIObjectCreationFactory>) nil_chk(creationFactory)) setDigesterWithOrgOssPdfreporterUsesOrgApacheDigesterIDigester:self];
  [self addRuleWithNSString:pattern withOrgOssPdfreporterUsesOrgApacheDigesterIRule:[[OrgOssPdfreporterUsesOrgApacheDigesterImplFactoryCreateRule alloc] initWithOrgOssPdfreporterUsesOrgApacheDigesterIObjectCreationFactory:creationFactory withBOOL:NO]];
}

- (void)addFactoryCreateWithNSString:(NSString *)pattern
                        withIOSClass:(IOSClass *)clazz {
  [self addRuleWithNSString:pattern withOrgOssPdfreporterUsesOrgApacheDigesterIRule:[[OrgOssPdfreporterUsesOrgApacheDigesterImplFactoryCreateRule alloc] initWithNSString:[((IOSClass *) nil_chk(clazz)) getName] withNSString:nil withBOOL:NO]];
}

- (void)addObjectCreateWithNSString:(NSString *)pattern
                       withIOSClass:(IOSClass *)clazz {
  [self addRuleWithNSString:pattern withOrgOssPdfreporterUsesOrgApacheDigesterIRule:[[OrgOssPdfreporterUsesOrgApacheDigesterImplObjectCreateRule alloc] initWithNSString:[((IOSClass *) nil_chk(clazz)) getName]]];
}

- (void)addSetNextWithNSString:(NSString *)pattern
                  withNSString:(NSString *)methodName
                  withNSString:(NSString *)paramType {
  [self addRuleWithNSString:pattern withOrgOssPdfreporterUsesOrgApacheDigesterIRule:[[OrgOssPdfreporterUsesOrgApacheDigesterImplSetNextRule alloc] initWithNSString:methodName withNSString:paramType]];
}

- (void)addSetNextWithNSString:(NSString *)pattern
                  withNSString:(NSString *)methodName {
  [self addRuleWithNSString:pattern withOrgOssPdfreporterUsesOrgApacheDigesterIRule:[[OrgOssPdfreporterUsesOrgApacheDigesterImplSetNextRule alloc] initWithNSString:methodName]];
}

- (void)pushParamsWithId:(id)object {
  (void) [((JavaUtilStack *) nil_chk(params_)) pushWithId:object];
}

- (id)popParams {
  @try {
    return ([((JavaUtilStack *) nil_chk(params_)) pop]);
  }
  @catch (JavaUtilEmptyStackException *e) {
    [((JavaUtilLoggingLogger *) nil_chk(OrgOssPdfreporterUsesOrgApacheDigesterImplDigester_logger_)) warningWithNSString:@"Empty stack (returning null)"];
    return (nil);
  }
}

- (id)peekParams {
  @try {
    return ([((JavaUtilStack *) nil_chk(params_)) peek]);
  }
  @catch (JavaUtilEmptyStackException *e) {
    [((JavaUtilLoggingLogger *) nil_chk(OrgOssPdfreporterUsesOrgApacheDigesterImplDigester_logger_)) warningWithNSString:@"Empty stack (returning null)"];
    return (nil);
  }
}

- (NSString *)getMatch {
  return match_;
}

- (void)clear {
  match_ = @"";
  [((JavaUtilStack *) nil_chk(bodyTexts_)) clear];
  [((JavaUtilStack *) nil_chk(params_)) clear];
  [((JavaUtilStack *) nil_chk(stack_)) clear];
}

- (OrgOssPdfreporterXmlParsersXMLParseException *)createSAXExceptionWithJavaLangException:(JavaLangException *)e {
  if ([e isKindOfClass:[JavaLangReflectInvocationTargetException class]]) {
    JavaLangThrowable *t = [((JavaLangReflectInvocationTargetException *) e) getTargetException];
    if ((t != nil) && ([t isKindOfClass:[JavaLangException class]])) {
      e = (JavaLangException *) t;
    }
  }
  return [[OrgOssPdfreporterXmlParsersXMLParseException alloc] initWithNSString:[((JavaLangException *) nil_chk(e)) getMessage] withJavaLangThrowable:e];
}

+ (void)initialize {
  if (self == [OrgOssPdfreporterUsesOrgApacheDigesterImplDigester class]) {
    OrgOssPdfreporterUsesOrgApacheDigesterImplDigester_logger_ = [JavaUtilLoggingLogger getLoggerWithNSString:[[IOSClass classWithClass:[OrgOssPdfreporterUsesOrgApacheDigesterImplDigester class]] getName]];
  }
}

- (void)copyAllPropertiesTo:(id)copy {
  [super copyAllPropertiesTo:copy];
  OrgOssPdfreporterUsesOrgApacheDigesterImplDigester *typedCopy = (OrgOssPdfreporterUsesOrgApacheDigesterImplDigester *) copy;
  typedCopy.stack = stack_;
  typedCopy.match = match_;
  typedCopy.matches = matches_;
  typedCopy.root = root_;
  typedCopy.params = params_;
  typedCopy.bodyText = bodyText_;
  typedCopy.bodyTexts = bodyTexts_;
  typedCopy.rules = rules_;
  typedCopy.errorHandler = errorHandler_;
  typedCopy.resolver = resolver_;
}

@end
