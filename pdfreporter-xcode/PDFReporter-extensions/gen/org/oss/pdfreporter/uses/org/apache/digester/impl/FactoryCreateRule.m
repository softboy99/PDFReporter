//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: pdfreporter-extensions/src/org/oss/pdfreporter/uses/org/apache/digester/impl/FactoryCreateRule.java
//
//  Created by kendra on 9/27/13.
//

#include "IOSClass.h"
#include "java/lang/Boolean.h"
#include "java/lang/Exception.h"
#include "java/lang/StringBuffer.h"
#include "java/util/Stack.h"
#include "java/util/logging/Level.h"
#include "java/util/logging/Logger.h"
#include "org/oss/pdfreporter/uses/org/apache/digester/IDigester.h"
#include "org/oss/pdfreporter/uses/org/apache/digester/IObjectCreationFactory.h"
#include "org/oss/pdfreporter/uses/org/apache/digester/impl/FactoryCreateRule.h"
#include "org/oss/pdfreporter/xml/parsers/IAttributes.h"

@implementation OrgOssPdfreporterUsesOrgApacheDigesterImplFactoryCreateRule

static JavaUtilLoggingLogger * OrgOssPdfreporterUsesOrgApacheDigesterImplFactoryCreateRule_logger_;

@synthesize ignoreCreateExceptions = ignoreCreateExceptions_;
@synthesize exceptionIgnoredStack = exceptionIgnoredStack_;
@synthesize attributeName = attributeName_;
@synthesize className_ = className__;
@synthesize creationFactory = creationFactory_;

+ (JavaUtilLoggingLogger *)logger {
  return OrgOssPdfreporterUsesOrgApacheDigesterImplFactoryCreateRule_logger_;
}

- (id)initWithNSString:(NSString *)className_
          withNSString:(NSString *)attributeName
              withBOOL:(BOOL)ignoreCreateExceptions {
  if ((self = [super init])) {
    attributeName_ = nil;
    className__ = nil;
    creationFactory_ = nil;
    self.className_ = className_;
    self.attributeName = attributeName;
    self.ignoreCreateExceptions = ignoreCreateExceptions;
  }
  return self;
}

- (id)initWithOrgOssPdfreporterUsesOrgApacheDigesterIObjectCreationFactory:(id<OrgOssPdfreporterUsesOrgApacheDigesterIObjectCreationFactory>)creationFactory
                                                                  withBOOL:(BOOL)ignoreCreateExceptions {
  if ((self = [super init])) {
    attributeName_ = nil;
    className__ = nil;
    creationFactory_ = nil;
    self.creationFactory = creationFactory;
    self.ignoreCreateExceptions = ignoreCreateExceptions;
  }
  return self;
}

- (void)beginWithNSString:(NSString *)namespace_
             withNSString:(NSString *)name
withOrgOssPdfreporterXmlParsersIAttributes:(id<OrgOssPdfreporterXmlParsersIAttributes>)attributes {
  if (ignoreCreateExceptions_) {
    if (exceptionIgnoredStack_ == nil) {
      exceptionIgnoredStack_ = [[JavaUtilStack alloc] init];
    }
    @try {
      id instance = [((id<OrgOssPdfreporterUsesOrgApacheDigesterIObjectCreationFactory>) nil_chk([self getFactoryWithOrgOssPdfreporterXmlParsersIAttributes:attributes])) createObjectWithOrgOssPdfreporterXmlParsersIAttributes:attributes];
      if ([((JavaUtilLoggingLogger *) nil_chk(OrgOssPdfreporterUsesOrgApacheDigesterImplFactoryCreateRule_logger_)) isLoggableWithJavaUtilLoggingLevel:[JavaUtilLoggingLevel FINEST]]) {
        [((JavaUtilLoggingLogger *) nil_chk(OrgOssPdfreporterUsesOrgApacheDigesterImplFactoryCreateRule_logger_)) finestWithNSString:[NSString stringWithFormat:@"[FactoryCreateRule]{%@} New %@", [((id<OrgOssPdfreporterUsesOrgApacheDigesterIDigester>) nil_chk(digester_)) getMatch], (instance == nil ? @"null object" : [[nil_chk(instance) getClass] getName])]];
      }
      [((id<OrgOssPdfreporterUsesOrgApacheDigesterIDigester>) nil_chk(digester_)) pushWithId:instance];
      (void) [((JavaUtilStack *) nil_chk(exceptionIgnoredStack_)) pushWithId:[JavaLangBoolean getFALSE]];
    }
    @catch (JavaLangException *e) {
      if ([((JavaUtilLoggingLogger *) nil_chk(OrgOssPdfreporterUsesOrgApacheDigesterImplFactoryCreateRule_logger_)) isLoggableWithJavaUtilLoggingLevel:[JavaUtilLoggingLevel INFO]]) {
        [((JavaUtilLoggingLogger *) nil_chk(OrgOssPdfreporterUsesOrgApacheDigesterImplFactoryCreateRule_logger_)) infoWithNSString:[NSString stringWithFormat:@"[FactoryCreateRule] Create exception ignored: %@", (([((JavaLangException *) nil_chk(e)) getMessage] == nil) ? [[((JavaLangException *) nil_chk(e)) getClass] getName] : [((JavaLangException *) nil_chk(e)) getMessage])]];
        if ([((JavaUtilLoggingLogger *) nil_chk(OrgOssPdfreporterUsesOrgApacheDigesterImplFactoryCreateRule_logger_)) isLoggableWithJavaUtilLoggingLevel:[JavaUtilLoggingLevel FINEST]]) {
          [((JavaUtilLoggingLogger *) nil_chk(OrgOssPdfreporterUsesOrgApacheDigesterImplFactoryCreateRule_logger_)) logWithJavaUtilLoggingLevel:[JavaUtilLoggingLevel FINEST] withNSString:@"[FactoryCreateRule] Ignored exception:" withJavaLangThrowable:e];
        }
      }
      (void) [((JavaUtilStack *) nil_chk(exceptionIgnoredStack_)) pushWithId:[JavaLangBoolean getTRUE]];
    }
  }
  else {
    id instance = [((id<OrgOssPdfreporterUsesOrgApacheDigesterIObjectCreationFactory>) nil_chk([self getFactoryWithOrgOssPdfreporterXmlParsersIAttributes:attributes])) createObjectWithOrgOssPdfreporterXmlParsersIAttributes:attributes];
    if ([((JavaUtilLoggingLogger *) nil_chk(OrgOssPdfreporterUsesOrgApacheDigesterImplFactoryCreateRule_logger_)) isLoggableWithJavaUtilLoggingLevel:[JavaUtilLoggingLevel FINEST]]) {
      [((JavaUtilLoggingLogger *) nil_chk(OrgOssPdfreporterUsesOrgApacheDigesterImplFactoryCreateRule_logger_)) finestWithNSString:[NSString stringWithFormat:@"[FactoryCreateRule]{%@} New %@", [((id<OrgOssPdfreporterUsesOrgApacheDigesterIDigester>) nil_chk(digester_)) getMatch], (instance == nil ? @"null object" : [[nil_chk(instance) getClass] getName])]];
    }
    [((id<OrgOssPdfreporterUsesOrgApacheDigesterIDigester>) nil_chk(digester_)) pushWithId:instance];
  }
}

- (void)endWithNSString:(NSString *)namespace_
           withNSString:(NSString *)name {
  if (ignoreCreateExceptions_ && exceptionIgnoredStack_ != nil && !([((JavaUtilStack *) nil_chk(exceptionIgnoredStack_)) empty])) {
    if ([((JavaLangBoolean *) nil_chk([((JavaUtilStack *) nil_chk(exceptionIgnoredStack_)) pop])) booleanValue]) {
      if ([((JavaUtilLoggingLogger *) nil_chk(OrgOssPdfreporterUsesOrgApacheDigesterImplFactoryCreateRule_logger_)) isLoggableWithJavaUtilLoggingLevel:[JavaUtilLoggingLevel FINEST]]) {
        [((JavaUtilLoggingLogger *) nil_chk(OrgOssPdfreporterUsesOrgApacheDigesterImplFactoryCreateRule_logger_)) finestWithNSString:@"[FactoryCreateRule] No creation so no push so no pop"];
      }
      return;
    }
  }
  id top = [((id<OrgOssPdfreporterUsesOrgApacheDigesterIDigester>) nil_chk(digester_)) pop];
  if ([((JavaUtilLoggingLogger *) nil_chk(OrgOssPdfreporterUsesOrgApacheDigesterImplFactoryCreateRule_logger_)) isLoggableWithJavaUtilLoggingLevel:[JavaUtilLoggingLevel FINEST]]) {
    [((JavaUtilLoggingLogger *) nil_chk(OrgOssPdfreporterUsesOrgApacheDigesterImplFactoryCreateRule_logger_)) finestWithNSString:[NSString stringWithFormat:@"[FactoryCreateRule]{%@} Pop %@", [((id<OrgOssPdfreporterUsesOrgApacheDigesterIDigester>) nil_chk(digester_)) getMatch], [[nil_chk(top) getClass] getName]]];
  }
}

- (void)finish {
  if (attributeName_ != nil) {
    creationFactory_ = nil;
  }
}

- (NSString *)description {
  JavaLangStringBuffer *sb = [[JavaLangStringBuffer alloc] initWithNSString:@"FactoryCreateRule["];
  (void) [((JavaLangStringBuffer *) nil_chk(sb)) appendWithNSString:@"className="];
  (void) [((JavaLangStringBuffer *) nil_chk(sb)) appendWithNSString:className__];
  (void) [((JavaLangStringBuffer *) nil_chk(sb)) appendWithNSString:@", attributeName="];
  (void) [((JavaLangStringBuffer *) nil_chk(sb)) appendWithNSString:attributeName_];
  if (creationFactory_ != nil) {
    (void) [((JavaLangStringBuffer *) nil_chk(sb)) appendWithNSString:@", creationFactory="];
    (void) [((JavaLangStringBuffer *) nil_chk(sb)) appendWithId:creationFactory_];
  }
  (void) [((JavaLangStringBuffer *) nil_chk(sb)) appendWithNSString:@"]"];
  return ([((JavaLangStringBuffer *) nil_chk(sb)) description]);
}

- (id<OrgOssPdfreporterUsesOrgApacheDigesterIObjectCreationFactory>)getFactoryWithOrgOssPdfreporterXmlParsersIAttributes:(id<OrgOssPdfreporterXmlParsersIAttributes>)attributes {
  if (creationFactory_ == nil) {
    NSString *realClassName = className__;
    if (attributeName_ != nil) {
      NSString *value = [((id<OrgOssPdfreporterXmlParsersIAttributes>) nil_chk(attributes)) getValueWithNSString:attributeName_];
      if (value != nil) {
        realClassName = value;
      }
    }
    if ([((JavaUtilLoggingLogger *) nil_chk(OrgOssPdfreporterUsesOrgApacheDigesterImplFactoryCreateRule_logger_)) isLoggableWithJavaUtilLoggingLevel:[JavaUtilLoggingLevel FINEST]]) {
      [((JavaUtilLoggingLogger *) nil_chk(OrgOssPdfreporterUsesOrgApacheDigesterImplFactoryCreateRule_logger_)) finestWithNSString:[NSString stringWithFormat:@"[FactoryCreateRule]{%@} New factory %@", [((id<OrgOssPdfreporterUsesOrgApacheDigesterIDigester>) nil_chk(digester_)) getMatch], realClassName]];
    }
    IOSClass *clazz = [IOSClass forName:realClassName];
    creationFactory_ = (id<OrgOssPdfreporterUsesOrgApacheDigesterIObjectCreationFactory>) [((IOSClass *) nil_chk(clazz)) newInstance];
    [creationFactory_ setDigesterWithOrgOssPdfreporterUsesOrgApacheDigesterIDigester:digester_];
  }
  return (creationFactory_);
}

+ (void)initialize {
  if (self == [OrgOssPdfreporterUsesOrgApacheDigesterImplFactoryCreateRule class]) {
    OrgOssPdfreporterUsesOrgApacheDigesterImplFactoryCreateRule_logger_ = [JavaUtilLoggingLogger getLoggerWithNSString:[[IOSClass classWithClass:[OrgOssPdfreporterUsesOrgApacheDigesterImplFactoryCreateRule class]] getName]];
  }
}

- (void)copyAllPropertiesTo:(id)copy {
  [super copyAllPropertiesTo:copy];
  OrgOssPdfreporterUsesOrgApacheDigesterImplFactoryCreateRule *typedCopy = (OrgOssPdfreporterUsesOrgApacheDigesterImplFactoryCreateRule *) copy;
  typedCopy.ignoreCreateExceptions = ignoreCreateExceptions_;
  typedCopy.exceptionIgnoredStack = exceptionIgnoredStack_;
  typedCopy.attributeName = attributeName_;
  typedCopy.className_ = className__;
  typedCopy.creationFactory = creationFactory_;
}

@end
