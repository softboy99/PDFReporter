//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: pdfreporter-extensions/src/org/oss/pdfreporter/uses/org/apache/digester/impl/RulesBase.java
//
//  Created by kendra on 9/27/13.
//

#include "IOSClass.h"
#include "java/util/ArrayList.h"
#include "java/util/HashMap.h"
#include "java/util/Iterator.h"
#include "java/util/List.h"
#include "java/util/Set.h"
#include "org/oss/pdfreporter/uses/org/apache/digester/IDigester.h"
#include "org/oss/pdfreporter/uses/org/apache/digester/IRule.h"
#include "org/oss/pdfreporter/uses/org/apache/digester/impl/RulesBase.h"

@implementation OrgOssPdfreporterUsesOrgApacheDigesterImplRulesBase

@synthesize cache = cache_;
@synthesize digester = digester_;
@synthesize namespaceURI = namespaceURI_;
@synthesize rules_ = rules__;

- (id<OrgOssPdfreporterUsesOrgApacheDigesterIDigester>)getDigester {
  return digester_;
}

- (void)setDigesterWithOrgOssPdfreporterUsesOrgApacheDigesterIDigester:(id<OrgOssPdfreporterUsesOrgApacheDigesterIDigester>)digester {
  self.digester = digester;
  {
    id<JavaUtilIterator> iter__ = [((JavaUtilArrayList *) nil_chk(rules__)) iterator];
    while ([((id<JavaUtilIterator>) nil_chk(iter__)) hasNext]) {
      id<OrgOssPdfreporterUsesOrgApacheDigesterIRule> rule = [((id<JavaUtilIterator>) nil_chk(iter__)) next];
      [((id<OrgOssPdfreporterUsesOrgApacheDigesterIRule>) nil_chk(rule)) setDigesterWithOrgOssPdfreporterUsesOrgApacheDigesterIDigester:digester];
    }
  }
}

- (NSString *)getNamespaceURI {
  return (self.namespaceURI);
}

- (void)setNamespaceURIWithNSString:(NSString *)namespaceURI {
  self.namespaceURI = namespaceURI;
}

- (void)addWithNSString:(NSString *)pattern
withOrgOssPdfreporterUsesOrgApacheDigesterIRule:(id<OrgOssPdfreporterUsesOrgApacheDigesterIRule>)rule {
  int patternLength = [((NSString *) nil_chk(pattern)) length];
  if (patternLength > 1 && [((NSString *) nil_chk(pattern)) hasSuffix:@"/"]) {
    pattern = [((NSString *) nil_chk(pattern)) substring:0 endIndex:patternLength - 1];
  }
  id<JavaUtilList> list = [((JavaUtilHashMap *) nil_chk(cache_)) getWithId:pattern];
  if (list == nil) {
    list = [[JavaUtilArrayList alloc] init];
    (void) [((JavaUtilHashMap *) nil_chk(cache_)) putWithId:pattern withId:list];
  }
  [((id<JavaUtilList>) nil_chk(list)) addWithId:rule];
  [((JavaUtilArrayList *) nil_chk(rules__)) addWithId:rule];
  if (self.digester != nil) {
    [((id<OrgOssPdfreporterUsesOrgApacheDigesterIRule>) nil_chk(rule)) setDigesterWithOrgOssPdfreporterUsesOrgApacheDigesterIDigester:self.digester];
  }
  if (self.namespaceURI != nil) {
    [((id<OrgOssPdfreporterUsesOrgApacheDigesterIRule>) nil_chk(rule)) setNamespaceURIWithNSString:self.namespaceURI];
  }
}

- (void)clear {
  [((JavaUtilHashMap *) nil_chk(cache_)) clear];
  [((JavaUtilArrayList *) nil_chk(rules__)) clear];
}

- (id<JavaUtilList>)matchWithNSString:(NSString *)pattern {
  return ([self matchWithNSString:nil withNSString:pattern]);
}

- (id<JavaUtilList>)matchWithNSString:(NSString *)namespaceURI
                         withNSString:(NSString *)pattern {
  id<JavaUtilList> rulesList = [self lookupWithNSString:namespaceURI withNSString:pattern];
  if ((rulesList == nil) || ([((id<JavaUtilList>) nil_chk(rulesList)) size] < 1)) {
    NSString *longKey = @"";
    {
      id<JavaUtilIterator> iter__ = [((id<JavaUtilSet>) nil_chk([((JavaUtilHashMap *) nil_chk(cache_)) keySet])) iterator];
      while ([((id<JavaUtilIterator>) nil_chk(iter__)) hasNext]) {
        NSString *key = [((id<JavaUtilIterator>) nil_chk(iter__)) next];
        if ([((NSString *) nil_chk(key)) hasPrefix:@"*/"]) {
          if ([((NSString *) nil_chk(pattern)) isEqual:[((NSString *) nil_chk(key)) substring:2]] || [((NSString *) nil_chk(pattern)) hasSuffix:[((NSString *) nil_chk(key)) substring:1]]) {
            if ([((NSString *) nil_chk(key)) length] > [((NSString *) nil_chk(longKey)) length]) {
              rulesList = [self lookupWithNSString:namespaceURI withNSString:key];
              longKey = key;
            }
          }
        }
      }
    }
  }
  if (rulesList == nil) {
    rulesList = [[JavaUtilArrayList alloc] init];
  }
  return (rulesList);
}

- (id<JavaUtilList>)rules {
  return (self.rules_);
}

- (id<JavaUtilList>)lookupWithNSString:(NSString *)namespaceURI
                          withNSString:(NSString *)pattern {
  id<JavaUtilList> list = [((JavaUtilHashMap *) nil_chk(self.cache)) getWithId:pattern];
  if (list == nil) {
    return (nil);
  }
  if ((namespaceURI == nil) || ([((NSString *) nil_chk(namespaceURI)) length] == 0)) {
    return (list);
  }
  JavaUtilArrayList *results = [[JavaUtilArrayList alloc] init];
  {
    id<JavaUtilIterator> iter__ = [((id<JavaUtilList>) nil_chk(list)) iterator];
    while ([((id<JavaUtilIterator>) nil_chk(iter__)) hasNext]) {
      id<OrgOssPdfreporterUsesOrgApacheDigesterIRule> item = [((id<JavaUtilIterator>) nil_chk(iter__)) next];
      if (([((NSString *) nil_chk(namespaceURI)) isEqual:[((id<OrgOssPdfreporterUsesOrgApacheDigesterIRule>) nil_chk(item)) getNamespaceURI]]) || ([((id<OrgOssPdfreporterUsesOrgApacheDigesterIRule>) nil_chk(item)) getNamespaceURI] == nil)) {
        [((JavaUtilArrayList *) nil_chk(results)) addWithId:item];
      }
    }
  }
  return (results);
}

- (id)init {
  if ((self = [super init])) {
    cache_ = [[JavaUtilHashMap alloc] init];
    digester_ = nil;
    namespaceURI_ = nil;
    rules__ = [[JavaUtilArrayList alloc] init];
  }
  return self;
}

- (void)copyAllPropertiesTo:(id)copy {
  [super copyAllPropertiesTo:copy];
  OrgOssPdfreporterUsesOrgApacheDigesterImplRulesBase *typedCopy = (OrgOssPdfreporterUsesOrgApacheDigesterImplRulesBase *) copy;
  typedCopy.cache = cache_;
  typedCopy.digester = digester_;
  typedCopy.namespaceURI = namespaceURI_;
  typedCopy.rules_ = rules__;
}

@end
