//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: pdfreporter-extensions/src/org/oss/pdfreporter/uses/org/apache/commons/collections/SequencedHashMap.java
//
//  Created by kendra on 9/27/13.
//

#include "IOSClass.h"
#include "java/lang/ArrayIndexOutOfBoundsException.h"
#include "java/lang/Error.h"
#include "java/lang/IllegalStateException.h"
#include "java/lang/StringBuffer.h"
#include "java/util/ArrayList.h"
#include "java/util/Collection.h"
#include "java/util/Collections.h"
#include "java/util/ConcurrentModificationException.h"
#include "java/util/HashMap.h"
#include "java/util/Iterator.h"
#include "java/util/List.h"
#include "java/util/Map.h"
#include "java/util/NoSuchElementException.h"
#include "java/util/Set.h"
#include "org/oss/pdfreporter/uses/org/apache/commons/collections/SequencedHashMap.h"

@implementation OrgOssPdfreporterUsesOrgApacheCommonsCollectionsSequencedHashMap

@synthesize sentinel = sentinel_;
@synthesize entries = entries_;
@synthesize modCount = modCount_;

+ (OrgOssPdfreporterUsesOrgApacheCommonsCollectionsSequencedHashMap_Entry *)createSentinel {
  OrgOssPdfreporterUsesOrgApacheCommonsCollectionsSequencedHashMap_Entry *s = [[OrgOssPdfreporterUsesOrgApacheCommonsCollectionsSequencedHashMap_Entry alloc] initWithId:nil withId:nil];
  ((OrgOssPdfreporterUsesOrgApacheCommonsCollectionsSequencedHashMap_Entry *) nil_chk(s)).prev = s;
  ((OrgOssPdfreporterUsesOrgApacheCommonsCollectionsSequencedHashMap_Entry *) nil_chk(s)).next = s;
  return s;
}

- (id)initOrgOssPdfreporterUsesOrgApacheCommonsCollectionsSequencedHashMap {
  if ((self = [super init])) {
    modCount_ = 0;
    sentinel_ = [OrgOssPdfreporterUsesOrgApacheCommonsCollectionsSequencedHashMap createSentinel];
    entries_ = [[JavaUtilHashMap alloc] init];
  }
  return self;
}

- (id)init {
  return [self initOrgOssPdfreporterUsesOrgApacheCommonsCollectionsSequencedHashMap];
}

- (id)initWithInt:(int)initialSize {
  if ((self = [super init])) {
    modCount_ = 0;
    sentinel_ = [OrgOssPdfreporterUsesOrgApacheCommonsCollectionsSequencedHashMap createSentinel];
    entries_ = [[JavaUtilHashMap alloc] initWithInt:initialSize];
  }
  return self;
}

- (id)initWithInt:(int)initialSize
        withFloat:(float)loadFactor {
  if ((self = [super init])) {
    modCount_ = 0;
    sentinel_ = [OrgOssPdfreporterUsesOrgApacheCommonsCollectionsSequencedHashMap createSentinel];
    entries_ = [[JavaUtilHashMap alloc] initWithInt:initialSize withFloat:loadFactor];
  }
  return self;
}

- (id)initWithJavaUtilMap:(id<JavaUtilMap>)m {
  if ((self = [self initOrgOssPdfreporterUsesOrgApacheCommonsCollectionsSequencedHashMap])) {
    [self putAllWithJavaUtilMap:m];
  }
  return self;
}

- (void)removeEntryWithOrgOssPdfreporterUsesOrgApacheCommonsCollectionsSequencedHashMap_Entry:(OrgOssPdfreporterUsesOrgApacheCommonsCollectionsSequencedHashMap_Entry *)entry {
  ((OrgOssPdfreporterUsesOrgApacheCommonsCollectionsSequencedHashMap_Entry *) nil_chk(((OrgOssPdfreporterUsesOrgApacheCommonsCollectionsSequencedHashMap_Entry *) nil_chk(entry)).next)).prev = ((OrgOssPdfreporterUsesOrgApacheCommonsCollectionsSequencedHashMap_Entry *) nil_chk(entry)).prev;
  ((OrgOssPdfreporterUsesOrgApacheCommonsCollectionsSequencedHashMap_Entry *) nil_chk(((OrgOssPdfreporterUsesOrgApacheCommonsCollectionsSequencedHashMap_Entry *) nil_chk(entry)).prev)).next = ((OrgOssPdfreporterUsesOrgApacheCommonsCollectionsSequencedHashMap_Entry *) nil_chk(entry)).next;
}

- (void)insertEntryWithOrgOssPdfreporterUsesOrgApacheCommonsCollectionsSequencedHashMap_Entry:(OrgOssPdfreporterUsesOrgApacheCommonsCollectionsSequencedHashMap_Entry *)entry {
  ((OrgOssPdfreporterUsesOrgApacheCommonsCollectionsSequencedHashMap_Entry *) nil_chk(entry)).next = sentinel_;
  ((OrgOssPdfreporterUsesOrgApacheCommonsCollectionsSequencedHashMap_Entry *) nil_chk(entry)).prev = ((OrgOssPdfreporterUsesOrgApacheCommonsCollectionsSequencedHashMap_Entry *) nil_chk(sentinel_)).prev;
  ((OrgOssPdfreporterUsesOrgApacheCommonsCollectionsSequencedHashMap_Entry *) nil_chk(((OrgOssPdfreporterUsesOrgApacheCommonsCollectionsSequencedHashMap_Entry *) nil_chk(sentinel_)).prev)).next = entry;
  ((OrgOssPdfreporterUsesOrgApacheCommonsCollectionsSequencedHashMap_Entry *) nil_chk(sentinel_)).prev = entry;
}

- (int)size {
  return [((JavaUtilHashMap *) nil_chk(entries_)) size];
}

- (BOOL)isEmpty {
  return ((OrgOssPdfreporterUsesOrgApacheCommonsCollectionsSequencedHashMap_Entry *) nil_chk(sentinel_)).next == sentinel_;
}

- (BOOL)containsKeyWithId:(id)key {
  return [((JavaUtilHashMap *) nil_chk(entries_)) containsKeyWithId:key];
}

- (BOOL)containsValueWithId:(id)value {
  if (value == nil) {
    for (OrgOssPdfreporterUsesOrgApacheCommonsCollectionsSequencedHashMap_Entry * pos = ((OrgOssPdfreporterUsesOrgApacheCommonsCollectionsSequencedHashMap_Entry *) nil_chk(sentinel_)).next; pos != sentinel_; pos = ((OrgOssPdfreporterUsesOrgApacheCommonsCollectionsSequencedHashMap_Entry *) nil_chk(pos)).next) {
      if ([((OrgOssPdfreporterUsesOrgApacheCommonsCollectionsSequencedHashMap_Entry *) nil_chk(pos)) getValue] == nil) return YES;
    }
  }
  else {
    for (OrgOssPdfreporterUsesOrgApacheCommonsCollectionsSequencedHashMap_Entry * pos = ((OrgOssPdfreporterUsesOrgApacheCommonsCollectionsSequencedHashMap_Entry *) nil_chk(sentinel_)).next; pos != sentinel_; pos = ((OrgOssPdfreporterUsesOrgApacheCommonsCollectionsSequencedHashMap_Entry *) nil_chk(pos)).next) {
      if ([value isEqual:[((OrgOssPdfreporterUsesOrgApacheCommonsCollectionsSequencedHashMap_Entry *) nil_chk(pos)) getValue]]) return YES;
    }
  }
  return NO;
}

- (id)getWithId:(id)o {
  OrgOssPdfreporterUsesOrgApacheCommonsCollectionsSequencedHashMap_Entry *entry = (OrgOssPdfreporterUsesOrgApacheCommonsCollectionsSequencedHashMap_Entry *) [((JavaUtilHashMap *) nil_chk(entries_)) getWithId:o];
  if (entry == nil) return nil;
  return [((OrgOssPdfreporterUsesOrgApacheCommonsCollectionsSequencedHashMap_Entry *) nil_chk(entry)) getValue];
}

- (id<JavaUtilMap_Entry>)getFirst {
  return ([self isEmpty]) ? nil : ((OrgOssPdfreporterUsesOrgApacheCommonsCollectionsSequencedHashMap_Entry *) nil_chk(sentinel_)).next;
}

- (id)getFirstKey {
  return [((OrgOssPdfreporterUsesOrgApacheCommonsCollectionsSequencedHashMap_Entry *) nil_chk(((OrgOssPdfreporterUsesOrgApacheCommonsCollectionsSequencedHashMap_Entry *) nil_chk(sentinel_)).next)) getKey];
}

- (id)getFirstValue {
  return [((OrgOssPdfreporterUsesOrgApacheCommonsCollectionsSequencedHashMap_Entry *) nil_chk(((OrgOssPdfreporterUsesOrgApacheCommonsCollectionsSequencedHashMap_Entry *) nil_chk(sentinel_)).next)) getValue];
}

- (id<JavaUtilMap_Entry>)getLast {
  return ([self isEmpty]) ? nil : ((OrgOssPdfreporterUsesOrgApacheCommonsCollectionsSequencedHashMap_Entry *) nil_chk(sentinel_)).prev;
}

- (id)getLastKey {
  return [((OrgOssPdfreporterUsesOrgApacheCommonsCollectionsSequencedHashMap_Entry *) nil_chk(((OrgOssPdfreporterUsesOrgApacheCommonsCollectionsSequencedHashMap_Entry *) nil_chk(sentinel_)).prev)) getKey];
}

- (id)getLastValue {
  return [((OrgOssPdfreporterUsesOrgApacheCommonsCollectionsSequencedHashMap_Entry *) nil_chk(((OrgOssPdfreporterUsesOrgApacheCommonsCollectionsSequencedHashMap_Entry *) nil_chk(sentinel_)).prev)) getValue];
}

- (id)putWithId:(id)key
         withId:(id)value {
  modCount_++;
  id oldValue = nil;
  OrgOssPdfreporterUsesOrgApacheCommonsCollectionsSequencedHashMap_Entry *e = (OrgOssPdfreporterUsesOrgApacheCommonsCollectionsSequencedHashMap_Entry *) [((JavaUtilHashMap *) nil_chk(entries_)) getWithId:key];
  if (e != nil) {
    [self removeEntryWithOrgOssPdfreporterUsesOrgApacheCommonsCollectionsSequencedHashMap_Entry:e];
    oldValue = [e setValueWithId:value];
  }
  else {
    e = [[OrgOssPdfreporterUsesOrgApacheCommonsCollectionsSequencedHashMap_Entry alloc] initWithId:key withId:value];
    (void) [((JavaUtilHashMap *) nil_chk(entries_)) putWithId:key withId:e];
  }
  [self insertEntryWithOrgOssPdfreporterUsesOrgApacheCommonsCollectionsSequencedHashMap_Entry:e];
  return oldValue;
}

- (id)removeWithId:(id)key {
  OrgOssPdfreporterUsesOrgApacheCommonsCollectionsSequencedHashMap_Entry *e = [self removeImplWithId:key];
  return (e == nil) ? nil : [((OrgOssPdfreporterUsesOrgApacheCommonsCollectionsSequencedHashMap_Entry *) nil_chk(e)) getValue];
}

- (OrgOssPdfreporterUsesOrgApacheCommonsCollectionsSequencedHashMap_Entry *)removeImplWithId:(id)key {
  OrgOssPdfreporterUsesOrgApacheCommonsCollectionsSequencedHashMap_Entry *e = (OrgOssPdfreporterUsesOrgApacheCommonsCollectionsSequencedHashMap_Entry *) [((JavaUtilHashMap *) nil_chk(entries_)) removeWithId:key];
  if (e == nil) return nil;
  modCount_++;
  [self removeEntryWithOrgOssPdfreporterUsesOrgApacheCommonsCollectionsSequencedHashMap_Entry:e];
  return e;
}

- (void)putAllWithJavaUtilMap:(id<JavaUtilMap>)t {
  id<JavaUtilIterator> iter = [((id<JavaUtilSet>) nil_chk([((id<JavaUtilMap>) nil_chk(t)) entrySet])) iterator];
  while ([((id<JavaUtilIterator>) nil_chk(iter)) hasNext]) {
    id<JavaUtilMap_Entry> entry = (id<JavaUtilMap_Entry>) [((id<JavaUtilIterator>) nil_chk(iter)) next];
    (void) [self putWithId:[((id<JavaUtilMap_Entry>) nil_chk(entry)) getKey] withId:[((id<JavaUtilMap_Entry>) nil_chk(entry)) getValue]];
  }
}

- (void)clear {
  modCount_++;
  [((JavaUtilHashMap *) nil_chk(entries_)) clear];
  ((OrgOssPdfreporterUsesOrgApacheCommonsCollectionsSequencedHashMap_Entry *) nil_chk(sentinel_)).next = sentinel_;
  ((OrgOssPdfreporterUsesOrgApacheCommonsCollectionsSequencedHashMap_Entry *) nil_chk(sentinel_)).prev = sentinel_;
}

- (BOOL)isEqual:(id)obj {
  if (obj == nil) return NO;
  if (obj == self) return YES;
  if (!([obj conformsToProtocol: @protocol(JavaUtilMap)])) return NO;
  return [((id<JavaUtilSet>) nil_chk([self entrySet])) isEqual:[((id<JavaUtilMap>) obj) entrySet]];
}

- (NSUInteger)hash {
  return [((id<JavaUtilSet>) nil_chk([self entrySet])) hash];
}

- (NSString *)description {
  JavaLangStringBuffer *buf = [[JavaLangStringBuffer alloc] init];
  (void) [((JavaLangStringBuffer *) nil_chk(buf)) appendWithUnichar:'['];
  for (OrgOssPdfreporterUsesOrgApacheCommonsCollectionsSequencedHashMap_Entry * pos = ((OrgOssPdfreporterUsesOrgApacheCommonsCollectionsSequencedHashMap_Entry *) nil_chk(sentinel_)).next; pos != sentinel_; pos = ((OrgOssPdfreporterUsesOrgApacheCommonsCollectionsSequencedHashMap_Entry *) nil_chk(pos)).next) {
    (void) [((JavaLangStringBuffer *) nil_chk(buf)) appendWithId:[((OrgOssPdfreporterUsesOrgApacheCommonsCollectionsSequencedHashMap_Entry *) nil_chk(pos)) getKey]];
    (void) [((JavaLangStringBuffer *) nil_chk(buf)) appendWithUnichar:'='];
    (void) [((JavaLangStringBuffer *) nil_chk(buf)) appendWithId:[((OrgOssPdfreporterUsesOrgApacheCommonsCollectionsSequencedHashMap_Entry *) nil_chk(pos)) getValue]];
    if (((OrgOssPdfreporterUsesOrgApacheCommonsCollectionsSequencedHashMap_Entry *) nil_chk(pos)).next != sentinel_) {
      (void) [((JavaLangStringBuffer *) nil_chk(buf)) appendWithUnichar:','];
    }
  }
  (void) [((JavaLangStringBuffer *) nil_chk(buf)) appendWithUnichar:']'];
  return [((JavaLangStringBuffer *) nil_chk(buf)) description];
}

- (id<JavaUtilSet>)keySet {
  return [[OrgOssPdfreporterUsesOrgApacheCommonsCollectionsSequencedHashMap_$1 alloc] initWithOrgOssPdfreporterUsesOrgApacheCommonsCollectionsSequencedHashMap:self];
}

- (id<JavaUtilCollection>)values {
  return [[OrgOssPdfreporterUsesOrgApacheCommonsCollectionsSequencedHashMap_$2 alloc] initWithOrgOssPdfreporterUsesOrgApacheCommonsCollectionsSequencedHashMap:self];
}

- (id<JavaUtilSet>)entrySet {
  return [[OrgOssPdfreporterUsesOrgApacheCommonsCollectionsSequencedHashMap_$3 alloc] initWithOrgOssPdfreporterUsesOrgApacheCommonsCollectionsSequencedHashMap:self];
}

- (id)clone {
  OrgOssPdfreporterUsesOrgApacheCommonsCollectionsSequencedHashMap *map = (OrgOssPdfreporterUsesOrgApacheCommonsCollectionsSequencedHashMap *) [super clone];
  ((OrgOssPdfreporterUsesOrgApacheCommonsCollectionsSequencedHashMap *) nil_chk(map)).sentinel = [OrgOssPdfreporterUsesOrgApacheCommonsCollectionsSequencedHashMap createSentinel];
  ((OrgOssPdfreporterUsesOrgApacheCommonsCollectionsSequencedHashMap *) nil_chk(map)).entries = [[JavaUtilHashMap alloc] init];
  [((OrgOssPdfreporterUsesOrgApacheCommonsCollectionsSequencedHashMap *) nil_chk(map)) putAllWithJavaUtilMap:self];
  return map;
}

- (id<JavaUtilMap_Entry>)getEntryWithInt:(int)index {
  OrgOssPdfreporterUsesOrgApacheCommonsCollectionsSequencedHashMap_Entry *pos = sentinel_;
  if (index < 0) {
    @throw [[JavaLangArrayIndexOutOfBoundsException alloc] initWithNSString:[NSString stringWithFormat:@"%d < 0", index]];
  }
  int i = -1;
  while (i < (index - 1) && ((OrgOssPdfreporterUsesOrgApacheCommonsCollectionsSequencedHashMap_Entry *) nil_chk(pos)).next != sentinel_) {
    i++;
    pos = ((OrgOssPdfreporterUsesOrgApacheCommonsCollectionsSequencedHashMap_Entry *) nil_chk(pos)).next;
  }
  if (((OrgOssPdfreporterUsesOrgApacheCommonsCollectionsSequencedHashMap_Entry *) nil_chk(pos)).next == sentinel_) {
    @throw [[JavaLangArrayIndexOutOfBoundsException alloc] initWithNSString:[NSString stringWithFormat:@"%d >= %d", index, (i + 1)]];
  }
  return ((OrgOssPdfreporterUsesOrgApacheCommonsCollectionsSequencedHashMap_Entry *) nil_chk(pos)).next;
}

- (id)getWithInt:(int)index {
  return [((id<JavaUtilMap_Entry>) nil_chk([self getEntryWithInt:index])) getKey];
}

- (id)getValueWithInt:(int)index {
  return [((id<JavaUtilMap_Entry>) nil_chk([self getEntryWithInt:index])) getValue];
}

- (int)indexOfWithId:(id)key {
  OrgOssPdfreporterUsesOrgApacheCommonsCollectionsSequencedHashMap_Entry *e = (OrgOssPdfreporterUsesOrgApacheCommonsCollectionsSequencedHashMap_Entry *) [((JavaUtilHashMap *) nil_chk(entries_)) getWithId:key];
  int pos = 0;
  while (((OrgOssPdfreporterUsesOrgApacheCommonsCollectionsSequencedHashMap_Entry *) nil_chk(e)).prev != sentinel_) {
    pos++;
    e = ((OrgOssPdfreporterUsesOrgApacheCommonsCollectionsSequencedHashMap_Entry *) nil_chk(e)).prev;
  }
  return pos;
}

- (id<JavaUtilIterator>)iterator {
  return [((id<JavaUtilSet>) nil_chk([self keySet])) iterator];
}

- (int)lastIndexOfWithId:(id)key {
  return [self indexOfWithId:key];
}

- (id<JavaUtilList>)sequence {
  id<JavaUtilList> l = [[JavaUtilArrayList alloc] initWithInt:[self size]];
  id<JavaUtilIterator> iter = [((id<JavaUtilSet>) nil_chk([self keySet])) iterator];
  while ([((id<JavaUtilIterator>) nil_chk(iter)) hasNext]) {
    [((id<JavaUtilList>) nil_chk(l)) addWithId:[((id<JavaUtilIterator>) nil_chk(iter)) next]];
  }
  return [JavaUtilCollections unmodifiableListWithJavaUtilList:l];
}

- (id)removeWithInt:(int)index {
  return [self removeWithId:[self getWithInt:index]];
}

- (id)copyWithZone:(NSZone *)zone {
  return [self clone];
}

- (void)copyAllPropertiesTo:(id)copy {
  [super copyAllPropertiesTo:copy];
  OrgOssPdfreporterUsesOrgApacheCommonsCollectionsSequencedHashMap *typedCopy = (OrgOssPdfreporterUsesOrgApacheCommonsCollectionsSequencedHashMap *) copy;
  typedCopy.sentinel = sentinel_;
  typedCopy.entries = entries_;
  typedCopy.modCount = modCount_;
}

@end
@implementation OrgOssPdfreporterUsesOrgApacheCommonsCollectionsSequencedHashMap_Entry

@synthesize key = key_;
@synthesize value = value_;
@synthesize next = next_;
@synthesize prev = prev_;

- (id)initWithId:(id)key
          withId:(id)value {
  if ((self = [super init])) {
    next_ = nil;
    prev_ = nil;
    self.key = key;
    self.value = value;
  }
  return self;
}

- (id)getKey {
  return self.key;
}

- (id)getValue {
  return self.value;
}

- (id)setValueWithId:(id)value {
  id oldValue = self.value;
  self.value = value;
  return oldValue;
}

- (NSUInteger)hash {
  return (([self getKey] == nil ? 0 : [nil_chk([self getKey]) hash]) ^ ([self getValue] == nil ? 0 : [nil_chk([self getValue]) hash]));
}

- (BOOL)isEqual:(id)obj {
  if (obj == nil) return NO;
  if (obj == self) return YES;
  if (!([obj conformsToProtocol: @protocol(JavaUtilMap_Entry)])) return NO;
  id<JavaUtilMap_Entry> other = (id<JavaUtilMap_Entry>) obj;
  return (([self getKey] == nil ? [((id<JavaUtilMap_Entry>) nil_chk(other)) getKey] == nil : [nil_chk([self getKey]) isEqual:[((id<JavaUtilMap_Entry>) nil_chk(other)) getKey]]) && ([self getValue] == nil ? [((id<JavaUtilMap_Entry>) nil_chk(other)) getValue] == nil : [nil_chk([self getValue]) isEqual:[((id<JavaUtilMap_Entry>) nil_chk(other)) getValue]]));
}

- (NSString *)description {
  return [NSString stringWithFormat:@"[%@=%@]", [self getKey], [self getValue]];
}

- (void)copyAllPropertiesTo:(id)copy {
  [super copyAllPropertiesTo:copy];
  OrgOssPdfreporterUsesOrgApacheCommonsCollectionsSequencedHashMap_Entry *typedCopy = (OrgOssPdfreporterUsesOrgApacheCommonsCollectionsSequencedHashMap_Entry *) copy;
  typedCopy.key = key_;
  typedCopy.value = value_;
  typedCopy.next = next_;
  typedCopy.prev = prev_;
}

@end
@implementation OrgOssPdfreporterUsesOrgApacheCommonsCollectionsSequencedHashMap_OrderedIterator

@synthesize this$0 = this$0_;
@synthesize returnType = returnType_;
@synthesize pos = pos_;
@synthesize expectedModCount = expectedModCount_;

- (id)initWithOrgOssPdfreporterUsesOrgApacheCommonsCollectionsSequencedHashMap:(OrgOssPdfreporterUsesOrgApacheCommonsCollectionsSequencedHashMap *)outer$
                                                                       withInt:(int)returnType {
  if ((self = [super init])) {
    this$0_ = outer$;
    pos_ = outer$.sentinel;
    expectedModCount_ = outer$.modCount;
    self.returnType = returnType | OrgOssPdfreporterUsesOrgApacheCommonsCollectionsSequencedHashMap_REMOVED_MASK;
  }
  return self;
}

- (BOOL)hasNext {
  return ((OrgOssPdfreporterUsesOrgApacheCommonsCollectionsSequencedHashMap_Entry *) nil_chk(pos_)).next != this$0_.sentinel;
}

- (id)next {
  if (this$0_.modCount != expectedModCount_) {
    @throw [[JavaUtilConcurrentModificationException alloc] init];
  }
  if (((OrgOssPdfreporterUsesOrgApacheCommonsCollectionsSequencedHashMap_Entry *) nil_chk(pos_)).next == this$0_.sentinel) {
    @throw [[JavaUtilNoSuchElementException alloc] init];
  }
  returnType_ = returnType_ & ~OrgOssPdfreporterUsesOrgApacheCommonsCollectionsSequencedHashMap_REMOVED_MASK;
  pos_ = ((OrgOssPdfreporterUsesOrgApacheCommonsCollectionsSequencedHashMap_Entry *) nil_chk(pos_)).next;
  switch (returnType_) {
    case OrgOssPdfreporterUsesOrgApacheCommonsCollectionsSequencedHashMap_KEY:
    return [((OrgOssPdfreporterUsesOrgApacheCommonsCollectionsSequencedHashMap_Entry *) nil_chk(pos_)) getKey];
    case OrgOssPdfreporterUsesOrgApacheCommonsCollectionsSequencedHashMap_VALUE:
    return [((OrgOssPdfreporterUsesOrgApacheCommonsCollectionsSequencedHashMap_Entry *) nil_chk(pos_)) getValue];
    case OrgOssPdfreporterUsesOrgApacheCommonsCollectionsSequencedHashMap_ENTRY:
    return pos_;
    default:
    @throw [[JavaLangError alloc] initWithNSString:[NSString stringWithFormat:@"bad iterator type: %d", returnType_]];
  }
}

- (void)remove {
  if ((returnType_ & OrgOssPdfreporterUsesOrgApacheCommonsCollectionsSequencedHashMap_REMOVED_MASK) != 0) {
    @throw [[JavaLangIllegalStateException alloc] initWithNSString:@"remove() must follow next()"];
  }
  if (this$0_.modCount != expectedModCount_) {
    @throw [[JavaUtilConcurrentModificationException alloc] init];
  }
  (void) [this$0_ removeImplWithId:[((OrgOssPdfreporterUsesOrgApacheCommonsCollectionsSequencedHashMap_Entry *) nil_chk(pos_)) getKey]];
  expectedModCount_++;
  returnType_ = returnType_ | OrgOssPdfreporterUsesOrgApacheCommonsCollectionsSequencedHashMap_REMOVED_MASK;
}

- (void)copyAllPropertiesTo:(id)copy {
  [super copyAllPropertiesTo:copy];
  OrgOssPdfreporterUsesOrgApacheCommonsCollectionsSequencedHashMap_OrderedIterator *typedCopy = (OrgOssPdfreporterUsesOrgApacheCommonsCollectionsSequencedHashMap_OrderedIterator *) copy;
  typedCopy.this$0 = this$0_;
  typedCopy.returnType = returnType_;
  typedCopy.pos = pos_;
  typedCopy.expectedModCount = expectedModCount_;
}

@end
@implementation OrgOssPdfreporterUsesOrgApacheCommonsCollectionsSequencedHashMap_$1

@synthesize this$0 = this$0_;

- (id<JavaUtilIterator>)iterator {
  return [[OrgOssPdfreporterUsesOrgApacheCommonsCollectionsSequencedHashMap_OrderedIterator alloc] initWithOrgOssPdfreporterUsesOrgApacheCommonsCollectionsSequencedHashMap:this$0_ withInt:OrgOssPdfreporterUsesOrgApacheCommonsCollectionsSequencedHashMap_KEY];
}

- (BOOL)removeWithId:(id)o {
  OrgOssPdfreporterUsesOrgApacheCommonsCollectionsSequencedHashMap_Entry *e = [this$0_ removeImplWithId:o];
  return (e != nil);
}

- (void)clear {
  [this$0_ clear];
}

- (int)size {
  return [this$0_ size];
}

- (BOOL)isEmpty {
  return [this$0_ isEmpty];
}

- (BOOL)containsWithId:(id)o {
  return [this$0_ containsKeyWithId:o];
}

- (id)initWithOrgOssPdfreporterUsesOrgApacheCommonsCollectionsSequencedHashMap:(OrgOssPdfreporterUsesOrgApacheCommonsCollectionsSequencedHashMap *)outer$ {
  if ((self = [super init])) {
    this$0_ = outer$;
  }
  return self;
}

- (void)copyAllPropertiesTo:(id)copy {
  [super copyAllPropertiesTo:copy];
  OrgOssPdfreporterUsesOrgApacheCommonsCollectionsSequencedHashMap_$1 *typedCopy = (OrgOssPdfreporterUsesOrgApacheCommonsCollectionsSequencedHashMap_$1 *) copy;
  typedCopy.this$0 = this$0_;
}

@end
@implementation OrgOssPdfreporterUsesOrgApacheCommonsCollectionsSequencedHashMap_$2

@synthesize this$0 = this$0_;

- (id<JavaUtilIterator>)iterator {
  return [[OrgOssPdfreporterUsesOrgApacheCommonsCollectionsSequencedHashMap_OrderedIterator alloc] initWithOrgOssPdfreporterUsesOrgApacheCommonsCollectionsSequencedHashMap:this$0_ withInt:OrgOssPdfreporterUsesOrgApacheCommonsCollectionsSequencedHashMap_VALUE];
}

- (BOOL)removeWithId:(id)value {
  if (value == nil) {
    for (OrgOssPdfreporterUsesOrgApacheCommonsCollectionsSequencedHashMap_Entry * pos = ((OrgOssPdfreporterUsesOrgApacheCommonsCollectionsSequencedHashMap_Entry *) nil_chk(this$0_.sentinel)).next; pos != this$0_.sentinel; pos = ((OrgOssPdfreporterUsesOrgApacheCommonsCollectionsSequencedHashMap_Entry *) nil_chk(pos)).next) {
      if ([((OrgOssPdfreporterUsesOrgApacheCommonsCollectionsSequencedHashMap_Entry *) nil_chk(pos)) getValue] == nil) {
        (void) [this$0_ removeImplWithId:[((OrgOssPdfreporterUsesOrgApacheCommonsCollectionsSequencedHashMap_Entry *) nil_chk(pos)) getKey]];
        return YES;
      }
    }
  }
  else {
    for (OrgOssPdfreporterUsesOrgApacheCommonsCollectionsSequencedHashMap_Entry * pos = ((OrgOssPdfreporterUsesOrgApacheCommonsCollectionsSequencedHashMap_Entry *) nil_chk(this$0_.sentinel)).next; pos != this$0_.sentinel; pos = ((OrgOssPdfreporterUsesOrgApacheCommonsCollectionsSequencedHashMap_Entry *) nil_chk(pos)).next) {
      if ([value isEqual:[((OrgOssPdfreporterUsesOrgApacheCommonsCollectionsSequencedHashMap_Entry *) nil_chk(pos)) getValue]]) {
        (void) [this$0_ removeImplWithId:[((OrgOssPdfreporterUsesOrgApacheCommonsCollectionsSequencedHashMap_Entry *) nil_chk(pos)) getKey]];
        return YES;
      }
    }
  }
  return NO;
}

- (void)clear {
  [this$0_ clear];
}

- (int)size {
  return [this$0_ size];
}

- (BOOL)isEmpty {
  return [this$0_ isEmpty];
}

- (BOOL)containsWithId:(id)o {
  return [this$0_ containsValueWithId:o];
}

- (id)initWithOrgOssPdfreporterUsesOrgApacheCommonsCollectionsSequencedHashMap:(OrgOssPdfreporterUsesOrgApacheCommonsCollectionsSequencedHashMap *)outer$ {
  if ((self = [super init])) {
    this$0_ = outer$;
  }
  return self;
}

- (void)copyAllPropertiesTo:(id)copy {
  [super copyAllPropertiesTo:copy];
  OrgOssPdfreporterUsesOrgApacheCommonsCollectionsSequencedHashMap_$2 *typedCopy = (OrgOssPdfreporterUsesOrgApacheCommonsCollectionsSequencedHashMap_$2 *) copy;
  typedCopy.this$0 = this$0_;
}

@end
@implementation OrgOssPdfreporterUsesOrgApacheCommonsCollectionsSequencedHashMap_$3

@synthesize this$0 = this$0_;

- (OrgOssPdfreporterUsesOrgApacheCommonsCollectionsSequencedHashMap_Entry *)findEntryWithId:(id)o {
  if (o == nil) return nil;
  if (!([o conformsToProtocol: @protocol(JavaUtilMap_Entry)])) return nil;
  id<JavaUtilMap_Entry> e = (id<JavaUtilMap_Entry>) o;
  OrgOssPdfreporterUsesOrgApacheCommonsCollectionsSequencedHashMap_Entry *entry = (OrgOssPdfreporterUsesOrgApacheCommonsCollectionsSequencedHashMap_Entry *) [((JavaUtilHashMap *) nil_chk(this$0_.entries)) getWithId:[((id<JavaUtilMap_Entry>) nil_chk(e)) getKey]];
  if (entry != nil && [((OrgOssPdfreporterUsesOrgApacheCommonsCollectionsSequencedHashMap_Entry *) nil_chk(entry)) isEqual:e]) return entry;
  else return nil;
}

- (id<JavaUtilIterator>)iterator {
  return [[OrgOssPdfreporterUsesOrgApacheCommonsCollectionsSequencedHashMap_OrderedIterator alloc] initWithOrgOssPdfreporterUsesOrgApacheCommonsCollectionsSequencedHashMap:this$0_ withInt:OrgOssPdfreporterUsesOrgApacheCommonsCollectionsSequencedHashMap_ENTRY];
}

- (BOOL)removeWithId:(id)o {
  OrgOssPdfreporterUsesOrgApacheCommonsCollectionsSequencedHashMap_Entry *e = [self findEntryWithId:o];
  if (e == nil) return NO;
  return [this$0_ removeImplWithId:[((OrgOssPdfreporterUsesOrgApacheCommonsCollectionsSequencedHashMap_Entry *) nil_chk(e)) getKey]] != nil;
}

- (void)clear {
  [this$0_ clear];
}

- (int)size {
  return [this$0_ size];
}

- (BOOL)isEmpty {
  return [this$0_ isEmpty];
}

- (BOOL)containsWithId:(id)o {
  return [self findEntryWithId:o] != nil;
}

- (id)initWithOrgOssPdfreporterUsesOrgApacheCommonsCollectionsSequencedHashMap:(OrgOssPdfreporterUsesOrgApacheCommonsCollectionsSequencedHashMap *)outer$ {
  if ((self = [super init])) {
    this$0_ = outer$;
  }
  return self;
}

- (void)copyAllPropertiesTo:(id)copy {
  [super copyAllPropertiesTo:copy];
  OrgOssPdfreporterUsesOrgApacheCommonsCollectionsSequencedHashMap_$3 *typedCopy = (OrgOssPdfreporterUsesOrgApacheCommonsCollectionsSequencedHashMap_$3 *) copy;
  typedCopy.this$0 = this$0_;
}

@end
