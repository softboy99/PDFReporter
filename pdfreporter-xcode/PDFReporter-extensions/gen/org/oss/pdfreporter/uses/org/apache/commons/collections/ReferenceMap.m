//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: pdfreporter-extensions/src/org/oss/pdfreporter/uses/org/apache/commons/collections/ReferenceMap.java
//
//  Created by kendra on 9/27/13.
//

#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "java/lang/IllegalArgumentException.h"
#include "java/lang/IllegalStateException.h"
#include "java/lang/NullPointerException.h"
#include "java/util/ArrayList.h"
#include "java/util/Arrays.h"
#include "java/util/Collection.h"
#include "java/util/ConcurrentModificationException.h"
#include "java/util/Iterator.h"
#include "java/util/Map.h"
#include "java/util/NoSuchElementException.h"
#include "java/util/Set.h"
#include "org/oss/pdfreporter/uses/org/apache/commons/collections/DefaultMapEntry.h"
#include "org/oss/pdfreporter/uses/org/apache/commons/collections/ReferenceMap.h"

@implementation OrgOssPdfreporterUsesOrgApacheCommonsCollectionsReferenceMap

@synthesize keyType = keyType_;
@synthesize valueType = valueType_;
@synthesize loadFactor = loadFactor_;
@synthesize table = table_;
@synthesize size_ = size__;
@synthesize threshold = threshold_;
@synthesize modCount = modCount_;
@synthesize keySet_ReferenceMap = keySet_ReferenceMap_;
@synthesize entrySet_ = entrySet__;
@synthesize values_ = values__;

+ (int)HARD {
  return OrgOssPdfreporterUsesOrgApacheCommonsCollectionsReferenceMap_HARD;
}

+ (int)SOFT {
  return OrgOssPdfreporterUsesOrgApacheCommonsCollectionsReferenceMap_SOFT;
}

+ (int)WEAK {
  return OrgOssPdfreporterUsesOrgApacheCommonsCollectionsReferenceMap_WEAK;
}

- (id)init {
  return [self initOrgOssPdfreporterUsesOrgApacheCommonsCollectionsReferenceMapWithInt:OrgOssPdfreporterUsesOrgApacheCommonsCollectionsReferenceMap_HARD withInt:OrgOssPdfreporterUsesOrgApacheCommonsCollectionsReferenceMap_SOFT];
}

- (id)initOrgOssPdfreporterUsesOrgApacheCommonsCollectionsReferenceMapWithInt:(int)keyType
                                                                      withInt:(int)valueType {
  return [self initOrgOssPdfreporterUsesOrgApacheCommonsCollectionsReferenceMapWithInt:keyType withInt:valueType withInt:16 withFloat:0.75f];
}

- (id)initWithInt:(int)keyType
          withInt:(int)valueType {
  return [self initOrgOssPdfreporterUsesOrgApacheCommonsCollectionsReferenceMapWithInt:keyType withInt:valueType];
}

- (id)initOrgOssPdfreporterUsesOrgApacheCommonsCollectionsReferenceMapWithInt:(int)keyType
                                                                      withInt:(int)valueType
                                                                      withInt:(int)capacity
                                                                    withFloat:(float)loadFactor {
  if ((self = [super init])) {
    [OrgOssPdfreporterUsesOrgApacheCommonsCollectionsReferenceMap verifyWithNSString:@"keyType" withInt:keyType];
    [OrgOssPdfreporterUsesOrgApacheCommonsCollectionsReferenceMap verifyWithNSString:@"valueType" withInt:valueType];
    if (capacity <= 0) {
      @throw [[JavaLangIllegalArgumentException alloc] initWithNSString:@"capacity must be positive"];
    }
    if ((loadFactor <= 0.0f) || (loadFactor >= 1.0f)) {
      @throw [[JavaLangIllegalArgumentException alloc] initWithNSString:@"Load factor must be greater than 0 and less than 1."];
    }
    self.keyType = keyType;
    self.valueType = valueType;
    int v = 1;
    while (v < capacity) v *= 2;
    self.table = [IOSObjectArray arrayWithLength:v type:[IOSClass classWithClass:[OrgOssPdfreporterUsesOrgApacheCommonsCollectionsReferenceMap_Entry class]]];
    self.loadFactor = loadFactor;
    self.threshold = (int) (v * loadFactor);
  }
  return self;
}

- (id)initWithInt:(int)keyType
          withInt:(int)valueType
          withInt:(int)capacity
        withFloat:(float)loadFactor {
  return [self initOrgOssPdfreporterUsesOrgApacheCommonsCollectionsReferenceMapWithInt:keyType withInt:valueType withInt:capacity withFloat:loadFactor];
}

+ (void)verifyWithNSString:(NSString *)name
                   withInt:(int)type {
  if ((type < OrgOssPdfreporterUsesOrgApacheCommonsCollectionsReferenceMap_HARD) || (type > OrgOssPdfreporterUsesOrgApacheCommonsCollectionsReferenceMap_WEAK)) {
    @throw [[JavaLangIllegalArgumentException alloc] initWithNSString:[NSString stringWithFormat:@"%@ must be HARD, SOFT, WEAK.", name]];
  }
}

- (OrgOssPdfreporterUsesOrgApacheCommonsCollectionsReferenceMap_Entry *)getEntryWithId:(id)key {
  if (key == nil) return nil;
  int hash_ = [nil_chk(key) hash];
  int index = [self indexForWithInt:hash_];
  for (OrgOssPdfreporterUsesOrgApacheCommonsCollectionsReferenceMap_Entry * entry = [((IOSObjectArray *) nil_chk(table_)) objectAtIndex:index]; entry != nil; entry = ((OrgOssPdfreporterUsesOrgApacheCommonsCollectionsReferenceMap_Entry *) nil_chk(entry)).next) {
    if ((((OrgOssPdfreporterUsesOrgApacheCommonsCollectionsReferenceMap_Entry *) nil_chk(entry)).hash_ == hash_) && [nil_chk(key) isEqual:[((OrgOssPdfreporterUsesOrgApacheCommonsCollectionsReferenceMap_Entry *) nil_chk(entry)) getKey]]) {
      return entry;
    }
  }
  return nil;
}

- (int)indexForWithInt:(int)hash_ {
  hash_ += ~(hash_ << 15);
  hash_ ^= ((int) (((unsigned int) hash_) >> 10));
  hash_ += (hash_ << 3);
  hash_ ^= ((int) (((unsigned int) hash_) >> 6));
  hash_ += ~(hash_ << 11);
  hash_ ^= ((int) (((unsigned int) hash_) >> 16));
  return hash_ & ((int) [((IOSObjectArray *) nil_chk(table_)) count] - 1);
}

- (void)resize {
  IOSObjectArray *old = table_;
  table_ = [IOSObjectArray arrayWithLength:(int) [((IOSObjectArray *) nil_chk(old)) count] * 2 type:[IOSClass classWithClass:[OrgOssPdfreporterUsesOrgApacheCommonsCollectionsReferenceMap_Entry class]]];
  for (int i = 0; i < (int) [((IOSObjectArray *) nil_chk(old)) count]; i++) {
    OrgOssPdfreporterUsesOrgApacheCommonsCollectionsReferenceMap_Entry *next = [((IOSObjectArray *) nil_chk(old)) objectAtIndex:i];
    while (next != nil) {
      OrgOssPdfreporterUsesOrgApacheCommonsCollectionsReferenceMap_Entry *entry = next;
      next = ((OrgOssPdfreporterUsesOrgApacheCommonsCollectionsReferenceMap_Entry *) nil_chk(next)).next;
      int index = [self indexForWithInt:((OrgOssPdfreporterUsesOrgApacheCommonsCollectionsReferenceMap_Entry *) nil_chk(entry)).hash_];
      ((OrgOssPdfreporterUsesOrgApacheCommonsCollectionsReferenceMap_Entry *) nil_chk(entry)).next = [((IOSObjectArray *) nil_chk(table_)) objectAtIndex:index];
      (void) [((IOSObjectArray *) nil_chk(table_)) replaceObjectAtIndex:index withObject:entry];
    }
    (void) [((IOSObjectArray *) nil_chk(old)) replaceObjectAtIndex:i withObject:nil];
  }
  threshold_ = (int) ((int) [((IOSObjectArray *) nil_chk(table_)) count] * loadFactor_);
}

- (int)size {
  return size__;
}

- (BOOL)isEmpty {
  return size__ == 0;
}

- (BOOL)containsKeyWithId:(id)key {
  OrgOssPdfreporterUsesOrgApacheCommonsCollectionsReferenceMap_Entry *entry = [self getEntryWithId:key];
  if (entry == nil) return NO;
  return [((OrgOssPdfreporterUsesOrgApacheCommonsCollectionsReferenceMap_Entry *) nil_chk(entry)) getValue] != nil;
}

- (id)getWithId:(id)key {
  OrgOssPdfreporterUsesOrgApacheCommonsCollectionsReferenceMap_Entry *entry = [self getEntryWithId:key];
  if (entry == nil) return nil;
  return [((OrgOssPdfreporterUsesOrgApacheCommonsCollectionsReferenceMap_Entry *) nil_chk(entry)) getValue];
}

- (id)putWithId:(id)key
         withId:(id)value {
  if (key == nil) @throw [[JavaLangNullPointerException alloc] initWithNSString:@"null keys not allowed"];
  if (value == nil) @throw [[JavaLangNullPointerException alloc] initWithNSString:@"null values not allowed"];
  if (size__ + 1 > threshold_) [self resize];
  int hash_ = [nil_chk(key) hash];
  int index = [self indexForWithInt:hash_];
  OrgOssPdfreporterUsesOrgApacheCommonsCollectionsReferenceMap_Entry *entry = [((IOSObjectArray *) nil_chk(table_)) objectAtIndex:index];
  while (entry != nil) {
    if ((hash_ == ((OrgOssPdfreporterUsesOrgApacheCommonsCollectionsReferenceMap_Entry *) nil_chk(entry)).hash_) && [nil_chk(key) isEqual:[((OrgOssPdfreporterUsesOrgApacheCommonsCollectionsReferenceMap_Entry *) nil_chk(entry)) getKey]]) {
      id result = [((OrgOssPdfreporterUsesOrgApacheCommonsCollectionsReferenceMap_Entry *) nil_chk(entry)) getValue];
      (void) [((OrgOssPdfreporterUsesOrgApacheCommonsCollectionsReferenceMap_Entry *) nil_chk(entry)) setValueWithId:value];
      return result;
    }
    entry = ((OrgOssPdfreporterUsesOrgApacheCommonsCollectionsReferenceMap_Entry *) nil_chk(entry)).next;
  }
  self.size_++;
  modCount_++;
  (void) [((IOSObjectArray *) nil_chk(table_)) replaceObjectAtIndex:index withObject:[[OrgOssPdfreporterUsesOrgApacheCommonsCollectionsReferenceMap_Entry alloc] initWithOrgOssPdfreporterUsesOrgApacheCommonsCollectionsReferenceMap:self withId:key withInt:hash_ withId:value withOrgOssPdfreporterUsesOrgApacheCommonsCollectionsReferenceMap_Entry:[((IOSObjectArray *) nil_chk(table_)) objectAtIndex:index]]];
  return nil;
}

- (id)removeWithId:(id)key {
  if (key == nil) return nil;
  int hash_ = [nil_chk(key) hash];
  int index = [self indexForWithInt:hash_];
  OrgOssPdfreporterUsesOrgApacheCommonsCollectionsReferenceMap_Entry *previous = nil;
  OrgOssPdfreporterUsesOrgApacheCommonsCollectionsReferenceMap_Entry *entry = [((IOSObjectArray *) nil_chk(table_)) objectAtIndex:index];
  while (entry != nil) {
    if ((hash_ == ((OrgOssPdfreporterUsesOrgApacheCommonsCollectionsReferenceMap_Entry *) nil_chk(entry)).hash_) && [nil_chk(key) isEqual:[((OrgOssPdfreporterUsesOrgApacheCommonsCollectionsReferenceMap_Entry *) nil_chk(entry)) getKey]]) {
      if (previous == nil) (void) [((IOSObjectArray *) nil_chk(table_)) replaceObjectAtIndex:index withObject:((OrgOssPdfreporterUsesOrgApacheCommonsCollectionsReferenceMap_Entry *) nil_chk(entry)).next];
      else previous.next = ((OrgOssPdfreporterUsesOrgApacheCommonsCollectionsReferenceMap_Entry *) nil_chk(entry)).next;
      self.size_--;
      modCount_++;
      return [((OrgOssPdfreporterUsesOrgApacheCommonsCollectionsReferenceMap_Entry *) nil_chk(entry)) getValue];
    }
    previous = entry;
    entry = ((OrgOssPdfreporterUsesOrgApacheCommonsCollectionsReferenceMap_Entry *) nil_chk(entry)).next;
  }
  return nil;
}

- (void)clear {
  [JavaUtilArrays fillWithNSObjectArray:table_ withId:nil];
  size__ = 0;
}

- (id<JavaUtilSet>)entrySet {
  if (entrySet__ != nil) return entrySet__;
  entrySet__ = [[OrgOssPdfreporterUsesOrgApacheCommonsCollectionsReferenceMap_$1 alloc] initWithOrgOssPdfreporterUsesOrgApacheCommonsCollectionsReferenceMap:self];
  return entrySet__;
}

- (id<JavaUtilSet>)keySet {
  if (keySet_ReferenceMap_ != nil) return keySet_ReferenceMap_;
  keySet_ReferenceMap_ = [[OrgOssPdfreporterUsesOrgApacheCommonsCollectionsReferenceMap_$2 alloc] initWithOrgOssPdfreporterUsesOrgApacheCommonsCollectionsReferenceMap:self];
  return keySet_ReferenceMap_;
}

- (id<JavaUtilCollection>)values {
  if (values__ != nil) return values__;
  values__ = [[OrgOssPdfreporterUsesOrgApacheCommonsCollectionsReferenceMap_$3 alloc] initWithOrgOssPdfreporterUsesOrgApacheCommonsCollectionsReferenceMap:self];
  return values__;
}

- (void)copyAllPropertiesTo:(id)copy {
  [super copyAllPropertiesTo:copy];
  OrgOssPdfreporterUsesOrgApacheCommonsCollectionsReferenceMap *typedCopy = (OrgOssPdfreporterUsesOrgApacheCommonsCollectionsReferenceMap *) copy;
  typedCopy.keyType = keyType_;
  typedCopy.valueType = valueType_;
  typedCopy.loadFactor = loadFactor_;
  typedCopy.table = table_;
  typedCopy.size_ = size__;
  typedCopy.threshold = threshold_;
  typedCopy.modCount = modCount_;
  typedCopy.keySet_ReferenceMap = keySet_ReferenceMap_;
  typedCopy.entrySet_ = entrySet__;
  typedCopy.values_ = values__;
}

@end
@implementation OrgOssPdfreporterUsesOrgApacheCommonsCollectionsReferenceMap_Entry

@synthesize key = key_;
@synthesize value = value_;
@synthesize hash_ = hash__;
@synthesize next = next_;

- (id)initWithOrgOssPdfreporterUsesOrgApacheCommonsCollectionsReferenceMap:(OrgOssPdfreporterUsesOrgApacheCommonsCollectionsReferenceMap *)outer$
                                                                    withId:(id)key
                                                                   withInt:(int)hash_
                                                                    withId:(id)value
    withOrgOssPdfreporterUsesOrgApacheCommonsCollectionsReferenceMap_Entry:(OrgOssPdfreporterUsesOrgApacheCommonsCollectionsReferenceMap_Entry *)next {
  if ((self = [super init])) {
    self.key = key;
    self.hash_ = hash_;
    self.value = value;
    self.next = next;
  }
  return self;
}

- (id)getKey {
  return key_;
}

- (id)getValue {
  return value_;
}

- (id)setValueWithId:(id)object {
  id old = [self getValue];
  value_ = object;
  return old;
}

- (BOOL)isEqual:(id)o {
  if (o == nil) return NO;
  if (o == self) return YES;
  if (!([o conformsToProtocol: @protocol(JavaUtilMap_Entry)])) return NO;
  id<JavaUtilMap_Entry> entry = (id<JavaUtilMap_Entry>) o;
  id key = [((id<JavaUtilMap_Entry>) nil_chk(entry)) getKey];
  id value = [((id<JavaUtilMap_Entry>) nil_chk(entry)) getValue];
  if ((key == nil) || (value == nil)) return NO;
  return [nil_chk(key) isEqual:[self getKey]] && [nil_chk(value) isEqual:[self getValue]];
}

- (NSUInteger)hash {
  id v = [self getValue];
  return hash__ ^ ((v == nil) ? 0 : [nil_chk(v) hash]);
}

- (NSString *)description {
  return [NSString stringWithFormat:@"%@=%@", [self getKey], [self getValue]];
}

- (void)copyAllPropertiesTo:(id)copy {
  [super copyAllPropertiesTo:copy];
  OrgOssPdfreporterUsesOrgApacheCommonsCollectionsReferenceMap_Entry *typedCopy = (OrgOssPdfreporterUsesOrgApacheCommonsCollectionsReferenceMap_Entry *) copy;
  typedCopy.key = key_;
  typedCopy.value = value_;
  typedCopy.hash_ = hash__;
  typedCopy.next = next_;
}

@end
@implementation OrgOssPdfreporterUsesOrgApacheCommonsCollectionsReferenceMap_EntryIterator

@synthesize this$0 = this$0_;
@synthesize index = index_;
@synthesize entry = entry_;
@synthesize previous = previous_;
@synthesize nextKey = nextKey_;
@synthesize nextValue = nextValue_;
@synthesize currentKey = currentKey_;
@synthesize currentValue = currentValue_;
@synthesize expectedModCount = expectedModCount_;

- (id)initWithOrgOssPdfreporterUsesOrgApacheCommonsCollectionsReferenceMap:(OrgOssPdfreporterUsesOrgApacheCommonsCollectionsReferenceMap *)outer$ {
  if ((self = [super init])) {
    this$0_ = outer$;
    index_ = ([outer$ size] != 0 ? (int) [((IOSObjectArray *) nil_chk(outer$.table)) count] : 0);
    expectedModCount_ = outer$.modCount;
  }
  return self;
}

- (BOOL)hasNext {
  [self checkMod];
  while ([self nextNull]) {
    OrgOssPdfreporterUsesOrgApacheCommonsCollectionsReferenceMap_Entry *e = entry_;
    int i = index_;
    while ((e == nil) && (i > 0)) {
      i--;
      e = [((IOSObjectArray *) nil_chk(this$0_.table)) objectAtIndex:i];
    }
    entry_ = e;
    index_ = i;
    if (e == nil) {
      currentKey_ = nil;
      currentValue_ = nil;
      return NO;
    }
    nextKey_ = [((OrgOssPdfreporterUsesOrgApacheCommonsCollectionsReferenceMap_Entry *) nil_chk(e)) getKey];
    nextValue_ = [((OrgOssPdfreporterUsesOrgApacheCommonsCollectionsReferenceMap_Entry *) nil_chk(e)) getValue];
    if ([self nextNull]) entry_ = ((OrgOssPdfreporterUsesOrgApacheCommonsCollectionsReferenceMap_Entry *) nil_chk(entry_)).next;
  }
  return YES;
}

- (void)checkMod {
  if (this$0_.modCount != expectedModCount_) {
    @throw [[JavaUtilConcurrentModificationException alloc] init];
  }
}

- (BOOL)nextNull {
  return (nextKey_ == nil) || (nextValue_ == nil);
}

- (OrgOssPdfreporterUsesOrgApacheCommonsCollectionsReferenceMap_Entry *)nextEntry {
  [self checkMod];
  if ([self nextNull] && ![self hasNext]) @throw [[JavaUtilNoSuchElementException alloc] init];
  previous_ = entry_;
  entry_ = ((OrgOssPdfreporterUsesOrgApacheCommonsCollectionsReferenceMap_Entry *) nil_chk(entry_)).next;
  currentKey_ = nextKey_;
  currentValue_ = nextValue_;
  nextKey_ = nil;
  nextValue_ = nil;
  return previous_;
}

- (id)next {
  return [self nextEntry];
}

- (void)remove {
  [self checkMod];
  if (previous_ == nil) @throw [[JavaLangIllegalStateException alloc] init];
  (void) [this$0_ removeWithId:currentKey_];
  previous_ = nil;
  currentKey_ = nil;
  currentValue_ = nil;
  expectedModCount_ = this$0_.modCount;
}

- (void)copyAllPropertiesTo:(id)copy {
  [super copyAllPropertiesTo:copy];
  OrgOssPdfreporterUsesOrgApacheCommonsCollectionsReferenceMap_EntryIterator *typedCopy = (OrgOssPdfreporterUsesOrgApacheCommonsCollectionsReferenceMap_EntryIterator *) copy;
  typedCopy.this$0 = this$0_;
  typedCopy.index = index_;
  typedCopy.entry = entry_;
  typedCopy.previous = previous_;
  typedCopy.nextKey = nextKey_;
  typedCopy.nextValue = nextValue_;
  typedCopy.currentKey = currentKey_;
  typedCopy.currentValue = currentValue_;
  typedCopy.expectedModCount = expectedModCount_;
}

@end
@implementation OrgOssPdfreporterUsesOrgApacheCommonsCollectionsReferenceMap_ValueIterator

- (id)next {
  return [((OrgOssPdfreporterUsesOrgApacheCommonsCollectionsReferenceMap_Entry *) nil_chk([self nextEntry])) getValue];
}

- (id)initWithOrgOssPdfreporterUsesOrgApacheCommonsCollectionsReferenceMap:(OrgOssPdfreporterUsesOrgApacheCommonsCollectionsReferenceMap *)outer$ {
  return [super initWithOrgOssPdfreporterUsesOrgApacheCommonsCollectionsReferenceMap:outer$];
}

@end
@implementation OrgOssPdfreporterUsesOrgApacheCommonsCollectionsReferenceMap_KeyIterator

- (id)next {
  return [((OrgOssPdfreporterUsesOrgApacheCommonsCollectionsReferenceMap_Entry *) nil_chk([self nextEntry])) getKey];
}

- (id)initWithOrgOssPdfreporterUsesOrgApacheCommonsCollectionsReferenceMap:(OrgOssPdfreporterUsesOrgApacheCommonsCollectionsReferenceMap *)outer$ {
  return [super initWithOrgOssPdfreporterUsesOrgApacheCommonsCollectionsReferenceMap:outer$];
}

@end
@implementation OrgOssPdfreporterUsesOrgApacheCommonsCollectionsReferenceMap_$1

@synthesize this$0 = this$0_;

- (int)size {
  return [this$0_ size];
}

- (void)clear {
  [this$0_ clear];
}

- (BOOL)containsWithId:(id)o {
  if (o == nil) return NO;
  if (!([o conformsToProtocol: @protocol(JavaUtilMap_Entry)])) return NO;
  id<JavaUtilMap_Entry> e = (id<JavaUtilMap_Entry>) o;
  OrgOssPdfreporterUsesOrgApacheCommonsCollectionsReferenceMap_Entry *e2 = [this$0_ getEntryWithId:[((id<JavaUtilMap_Entry>) nil_chk(e)) getKey]];
  return (e2 != nil) && [((id<JavaUtilMap_Entry>) nil_chk(e)) isEqual:e2];
}

- (BOOL)removeWithId:(id)o {
  BOOL r = [self containsWithId:o];
  if (r) {
    id<JavaUtilMap_Entry> e = (id<JavaUtilMap_Entry>) o;
    (void) [this$0_ removeWithId:[((id<JavaUtilMap_Entry>) nil_chk(e)) getKey]];
  }
  return r;
}

- (id<JavaUtilIterator>)iterator {
  return [[OrgOssPdfreporterUsesOrgApacheCommonsCollectionsReferenceMap_EntryIterator alloc] initWithOrgOssPdfreporterUsesOrgApacheCommonsCollectionsReferenceMap:this$0_];
}

- (IOSObjectArray *)toArray {
  return [self toArrayWithNSObjectArray:[IOSObjectArray arrayWithLength:0 type:[IOSClass classWithClass:[NSObject class]]]];
}

- (IOSObjectArray *)toArrayWithNSObjectArray:(IOSObjectArray *)arr {
  JavaUtilArrayList *list = [[JavaUtilArrayList alloc] init];
  id<JavaUtilIterator> iterator = [self iterator];
  while ([((id<JavaUtilIterator>) nil_chk(iterator)) hasNext]) {
    OrgOssPdfreporterUsesOrgApacheCommonsCollectionsReferenceMap_Entry *e = (OrgOssPdfreporterUsesOrgApacheCommonsCollectionsReferenceMap_Entry *) [((id<JavaUtilIterator>) nil_chk(iterator)) next];
    [((JavaUtilArrayList *) nil_chk(list)) addWithId:[[OrgOssPdfreporterUsesOrgApacheCommonsCollectionsDefaultMapEntry alloc] initWithId:[((OrgOssPdfreporterUsesOrgApacheCommonsCollectionsReferenceMap_Entry *) nil_chk(e)) getKey] withId:[((OrgOssPdfreporterUsesOrgApacheCommonsCollectionsReferenceMap_Entry *) nil_chk(e)) getValue]]];
  }
  return [((JavaUtilArrayList *) nil_chk(list)) toArrayWithNSObjectArray:arr];
}

- (id)initWithOrgOssPdfreporterUsesOrgApacheCommonsCollectionsReferenceMap:(OrgOssPdfreporterUsesOrgApacheCommonsCollectionsReferenceMap *)outer$ {
  if ((self = [super init])) {
    this$0_ = outer$;
  }
  return self;
}

- (void)copyAllPropertiesTo:(id)copy {
  [super copyAllPropertiesTo:copy];
  OrgOssPdfreporterUsesOrgApacheCommonsCollectionsReferenceMap_$1 *typedCopy = (OrgOssPdfreporterUsesOrgApacheCommonsCollectionsReferenceMap_$1 *) copy;
  typedCopy.this$0 = this$0_;
}

@end
@implementation OrgOssPdfreporterUsesOrgApacheCommonsCollectionsReferenceMap_$2

@synthesize this$0 = this$0_;

- (int)size {
  return this$0_.size_;
}

- (id<JavaUtilIterator>)iterator {
  return [[OrgOssPdfreporterUsesOrgApacheCommonsCollectionsReferenceMap_KeyIterator alloc] initWithOrgOssPdfreporterUsesOrgApacheCommonsCollectionsReferenceMap:this$0_];
}

- (BOOL)containsWithId:(id)o {
  return [this$0_ containsKeyWithId:o];
}

- (BOOL)removeWithId:(id)o {
  id r = [this$0_ removeWithId:o];
  return r != nil;
}

- (void)clear {
  [this$0_ clear];
}

- (id)initWithOrgOssPdfreporterUsesOrgApacheCommonsCollectionsReferenceMap:(OrgOssPdfreporterUsesOrgApacheCommonsCollectionsReferenceMap *)outer$ {
  if ((self = [super init])) {
    this$0_ = outer$;
  }
  return self;
}

- (void)copyAllPropertiesTo:(id)copy {
  [super copyAllPropertiesTo:copy];
  OrgOssPdfreporterUsesOrgApacheCommonsCollectionsReferenceMap_$2 *typedCopy = (OrgOssPdfreporterUsesOrgApacheCommonsCollectionsReferenceMap_$2 *) copy;
  typedCopy.this$0 = this$0_;
}

@end
@implementation OrgOssPdfreporterUsesOrgApacheCommonsCollectionsReferenceMap_$3

@synthesize this$0 = this$0_;

- (int)size {
  return this$0_.size_;
}

- (void)clear {
  [this$0_ clear];
}

- (id<JavaUtilIterator>)iterator {
  return [[OrgOssPdfreporterUsesOrgApacheCommonsCollectionsReferenceMap_ValueIterator alloc] initWithOrgOssPdfreporterUsesOrgApacheCommonsCollectionsReferenceMap:this$0_];
}

- (id)initWithOrgOssPdfreporterUsesOrgApacheCommonsCollectionsReferenceMap:(OrgOssPdfreporterUsesOrgApacheCommonsCollectionsReferenceMap *)outer$ {
  if ((self = [super init])) {
    this$0_ = outer$;
  }
  return self;
}

- (void)copyAllPropertiesTo:(id)copy {
  [super copyAllPropertiesTo:copy];
  OrgOssPdfreporterUsesOrgApacheCommonsCollectionsReferenceMap_$3 *typedCopy = (OrgOssPdfreporterUsesOrgApacheCommonsCollectionsReferenceMap_$3 *) copy;
  typedCopy.this$0 = this$0_;
}

@end
