//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: pdfreporter-extensions/src/org/oss/pdfreporter/uses/org/apache/commons/beanutils/MethodUtils.java
//
//  Created by kendra on 9/27/13.
//

#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "java/lang/Boolean.h"
#include "java/lang/Byte.h"
#include "java/lang/Character.h"
#include "java/lang/Double.h"
#include "java/lang/Float.h"
#include "java/lang/IllegalArgumentException.h"
#include "java/lang/Integer.h"
#include "java/lang/Long.h"
#include "java/lang/NoSuchMethodException.h"
#include "java/lang/SecurityException.h"
#include "java/lang/Short.h"
#include "java/lang/System.h"
#include "java/lang/reflect/Method.h"
#include "java/lang/reflect/Modifier.h"
#include "java/util/Arrays.h"
#include "java/util/HashMap.h"
#include "java/util/Map.h"
#include "org/oss/pdfreporter/uses/org/apache/commons/beanutils/MethodUtils.h"

@implementation OrgOssPdfreporterUsesOrgApacheCommonsBeanutilsMethodUtils

static BOOL OrgOssPdfreporterUsesOrgApacheCommonsBeanutilsMethodUtils_loggedAccessibleWarning_;
static BOOL OrgOssPdfreporterUsesOrgApacheCommonsBeanutilsMethodUtils_CACHE_METHODS_;
static IOSObjectArray * OrgOssPdfreporterUsesOrgApacheCommonsBeanutilsMethodUtils_EMPTY_CLASS_PARAMETERS_;
static IOSObjectArray * OrgOssPdfreporterUsesOrgApacheCommonsBeanutilsMethodUtils_EMPTY_OBJECT_ARRAY_;
static id<JavaUtilMap> OrgOssPdfreporterUsesOrgApacheCommonsBeanutilsMethodUtils_cache_;

+ (BOOL)loggedAccessibleWarning {
  return OrgOssPdfreporterUsesOrgApacheCommonsBeanutilsMethodUtils_loggedAccessibleWarning_;
}

+ (BOOL *)loggedAccessibleWarningRef {
  return &OrgOssPdfreporterUsesOrgApacheCommonsBeanutilsMethodUtils_loggedAccessibleWarning_;
}

+ (BOOL)CACHE_METHODS {
  return OrgOssPdfreporterUsesOrgApacheCommonsBeanutilsMethodUtils_CACHE_METHODS_;
}

+ (BOOL *)CACHE_METHODSRef {
  return &OrgOssPdfreporterUsesOrgApacheCommonsBeanutilsMethodUtils_CACHE_METHODS_;
}

+ (IOSObjectArray *)EMPTY_CLASS_PARAMETERS {
  return OrgOssPdfreporterUsesOrgApacheCommonsBeanutilsMethodUtils_EMPTY_CLASS_PARAMETERS_;
}

+ (IOSObjectArray *)EMPTY_OBJECT_ARRAY {
  return OrgOssPdfreporterUsesOrgApacheCommonsBeanutilsMethodUtils_EMPTY_OBJECT_ARRAY_;
}

+ (id<JavaUtilMap>)cache {
  return OrgOssPdfreporterUsesOrgApacheCommonsBeanutilsMethodUtils_cache_;
}

+ (void)setCacheMethodsWithBOOL:(BOOL)cacheMethods {
  @synchronized([self class]) {
    {
      OrgOssPdfreporterUsesOrgApacheCommonsBeanutilsMethodUtils_CACHE_METHODS_ = cacheMethods;
      if (!OrgOssPdfreporterUsesOrgApacheCommonsBeanutilsMethodUtils_CACHE_METHODS_) {
        [OrgOssPdfreporterUsesOrgApacheCommonsBeanutilsMethodUtils clearCache];
      }
    }
  }
}

+ (int)clearCache {
  int size = [((id<JavaUtilMap>) nil_chk(OrgOssPdfreporterUsesOrgApacheCommonsBeanutilsMethodUtils_cache_)) size];
  [((id<JavaUtilMap>) nil_chk(OrgOssPdfreporterUsesOrgApacheCommonsBeanutilsMethodUtils_cache_)) clear];
  return size;
}

+ (id)invokeMethodWithId:(id)object
            withNSString:(NSString *)methodName
                  withId:(id)arg {
  IOSObjectArray *args = [IOSObjectArray arrayWithObjects:(id[]){ arg } count:1 type:[IOSClass classWithClass:[NSObject class]]];
  return [OrgOssPdfreporterUsesOrgApacheCommonsBeanutilsMethodUtils invokeMethodWithId:object withNSString:methodName withNSObjectArray:args];
}

+ (id)invokeMethodWithId:(id)object
            withNSString:(NSString *)methodName
       withNSObjectArray:(IOSObjectArray *)args {
  if (args == nil) {
    args = OrgOssPdfreporterUsesOrgApacheCommonsBeanutilsMethodUtils_EMPTY_OBJECT_ARRAY_;
  }
  int arguments = (int) [((IOSObjectArray *) nil_chk(args)) count];
  IOSObjectArray *parameterTypes = [IOSObjectArray arrayWithLength:arguments type:[IOSClass classWithClass:[IOSClass class]]];
  for (int i = 0; i < arguments; i++) {
    (void) [((IOSObjectArray *) nil_chk(parameterTypes)) replaceObjectAtIndex:i withObject:[nil_chk([((IOSObjectArray *) nil_chk(args)) objectAtIndex:i]) getClass]];
  }
  return [OrgOssPdfreporterUsesOrgApacheCommonsBeanutilsMethodUtils invokeMethodWithId:object withNSString:methodName withNSObjectArray:args withIOSClassArray:parameterTypes];
}

+ (id)invokeMethodWithId:(id)object
            withNSString:(NSString *)methodName
       withNSObjectArray:(IOSObjectArray *)args
       withIOSClassArray:(IOSObjectArray *)parameterTypes {
  if (parameterTypes == nil) {
    parameterTypes = OrgOssPdfreporterUsesOrgApacheCommonsBeanutilsMethodUtils_EMPTY_CLASS_PARAMETERS_;
  }
  if (args == nil) {
    args = OrgOssPdfreporterUsesOrgApacheCommonsBeanutilsMethodUtils_EMPTY_OBJECT_ARRAY_;
  }
  JavaLangReflectMethod *method = [OrgOssPdfreporterUsesOrgApacheCommonsBeanutilsMethodUtils getMatchingAccessibleMethodWithIOSClass:[nil_chk(object) getClass] withNSString:methodName withIOSClassArray:parameterTypes];
  if (method == nil) {
    @throw [[JavaLangNoSuchMethodException alloc] initWithNSString:[NSString stringWithFormat:@"No such accessible method: %@() on object: %@", methodName, [[nil_chk(object) getClass] getName]]];
  }
  return [((JavaLangReflectMethod *) nil_chk(method)) invokeWithId:object withNSObjectArray:args];
}

+ (id)invokeExactMethodWithId:(id)object
                 withNSString:(NSString *)methodName
                       withId:(id)arg {
  IOSObjectArray *args = [IOSObjectArray arrayWithObjects:(id[]){ arg } count:1 type:[IOSClass classWithClass:[NSObject class]]];
  return [OrgOssPdfreporterUsesOrgApacheCommonsBeanutilsMethodUtils invokeExactMethodWithId:object withNSString:methodName withNSObjectArray:args];
}

+ (id)invokeExactMethodWithId:(id)object
                 withNSString:(NSString *)methodName
            withNSObjectArray:(IOSObjectArray *)args {
  if (args == nil) {
    args = OrgOssPdfreporterUsesOrgApacheCommonsBeanutilsMethodUtils_EMPTY_OBJECT_ARRAY_;
  }
  int arguments = (int) [((IOSObjectArray *) nil_chk(args)) count];
  IOSObjectArray *parameterTypes = [IOSObjectArray arrayWithLength:arguments type:[IOSClass classWithClass:[IOSClass class]]];
  for (int i = 0; i < arguments; i++) {
    (void) [((IOSObjectArray *) nil_chk(parameterTypes)) replaceObjectAtIndex:i withObject:[nil_chk([((IOSObjectArray *) nil_chk(args)) objectAtIndex:i]) getClass]];
  }
  return [OrgOssPdfreporterUsesOrgApacheCommonsBeanutilsMethodUtils invokeExactMethodWithId:object withNSString:methodName withNSObjectArray:args withIOSClassArray:parameterTypes];
}

+ (id)invokeExactMethodWithId:(id)object
                 withNSString:(NSString *)methodName
            withNSObjectArray:(IOSObjectArray *)args
            withIOSClassArray:(IOSObjectArray *)parameterTypes {
  if (args == nil) {
    args = OrgOssPdfreporterUsesOrgApacheCommonsBeanutilsMethodUtils_EMPTY_OBJECT_ARRAY_;
  }
  if (parameterTypes == nil) {
    parameterTypes = OrgOssPdfreporterUsesOrgApacheCommonsBeanutilsMethodUtils_EMPTY_CLASS_PARAMETERS_;
  }
  JavaLangReflectMethod *method = [OrgOssPdfreporterUsesOrgApacheCommonsBeanutilsMethodUtils getAccessibleMethodWithIOSClass:[nil_chk(object) getClass] withNSString:methodName withIOSClassArray:parameterTypes];
  if (method == nil) {
    @throw [[JavaLangNoSuchMethodException alloc] initWithNSString:[NSString stringWithFormat:@"No such accessible method: %@() on object: %@", methodName, [[nil_chk(object) getClass] getName]]];
  }
  return [((JavaLangReflectMethod *) nil_chk(method)) invokeWithId:object withNSObjectArray:args];
}

+ (id)invokeExactStaticMethodWithIOSClass:(IOSClass *)objectClass
                             withNSString:(NSString *)methodName
                        withNSObjectArray:(IOSObjectArray *)args
                        withIOSClassArray:(IOSObjectArray *)parameterTypes {
  if (args == nil) {
    args = OrgOssPdfreporterUsesOrgApacheCommonsBeanutilsMethodUtils_EMPTY_OBJECT_ARRAY_;
  }
  if (parameterTypes == nil) {
    parameterTypes = OrgOssPdfreporterUsesOrgApacheCommonsBeanutilsMethodUtils_EMPTY_CLASS_PARAMETERS_;
  }
  JavaLangReflectMethod *method = [OrgOssPdfreporterUsesOrgApacheCommonsBeanutilsMethodUtils getAccessibleMethodWithIOSClass:objectClass withNSString:methodName withIOSClassArray:parameterTypes];
  if (method == nil) {
    @throw [[JavaLangNoSuchMethodException alloc] initWithNSString:[NSString stringWithFormat:@"No such accessible method: %@() on class: %@", methodName, [((IOSClass *) nil_chk(objectClass)) getName]]];
  }
  return [((JavaLangReflectMethod *) nil_chk(method)) invokeWithId:nil withNSObjectArray:args];
}

+ (id)invokeStaticMethodWithIOSClass:(IOSClass *)objectClass
                        withNSString:(NSString *)methodName
                              withId:(id)arg {
  IOSObjectArray *args = [IOSObjectArray arrayWithObjects:(id[]){ arg } count:1 type:[IOSClass classWithClass:[NSObject class]]];
  return [OrgOssPdfreporterUsesOrgApacheCommonsBeanutilsMethodUtils invokeStaticMethodWithIOSClass:objectClass withNSString:methodName withNSObjectArray:args];
}

+ (id)invokeStaticMethodWithIOSClass:(IOSClass *)objectClass
                        withNSString:(NSString *)methodName
                   withNSObjectArray:(IOSObjectArray *)args {
  if (args == nil) {
    args = OrgOssPdfreporterUsesOrgApacheCommonsBeanutilsMethodUtils_EMPTY_OBJECT_ARRAY_;
  }
  int arguments = (int) [((IOSObjectArray *) nil_chk(args)) count];
  IOSObjectArray *parameterTypes = [IOSObjectArray arrayWithLength:arguments type:[IOSClass classWithClass:[IOSClass class]]];
  for (int i = 0; i < arguments; i++) {
    (void) [((IOSObjectArray *) nil_chk(parameterTypes)) replaceObjectAtIndex:i withObject:[nil_chk([((IOSObjectArray *) nil_chk(args)) objectAtIndex:i]) getClass]];
  }
  return [OrgOssPdfreporterUsesOrgApacheCommonsBeanutilsMethodUtils invokeStaticMethodWithIOSClass:objectClass withNSString:methodName withNSObjectArray:args withIOSClassArray:parameterTypes];
}

+ (id)invokeStaticMethodWithIOSClass:(IOSClass *)objectClass
                        withNSString:(NSString *)methodName
                   withNSObjectArray:(IOSObjectArray *)args
                   withIOSClassArray:(IOSObjectArray *)parameterTypes {
  if (parameterTypes == nil) {
    parameterTypes = OrgOssPdfreporterUsesOrgApacheCommonsBeanutilsMethodUtils_EMPTY_CLASS_PARAMETERS_;
  }
  if (args == nil) {
    args = OrgOssPdfreporterUsesOrgApacheCommonsBeanutilsMethodUtils_EMPTY_OBJECT_ARRAY_;
  }
  JavaLangReflectMethod *method = [OrgOssPdfreporterUsesOrgApacheCommonsBeanutilsMethodUtils getMatchingAccessibleMethodWithIOSClass:objectClass withNSString:methodName withIOSClassArray:parameterTypes];
  if (method == nil) {
    @throw [[JavaLangNoSuchMethodException alloc] initWithNSString:[NSString stringWithFormat:@"No such accessible method: %@() on class: %@", methodName, [((IOSClass *) nil_chk(objectClass)) getName]]];
  }
  return [((JavaLangReflectMethod *) nil_chk(method)) invokeWithId:nil withNSObjectArray:args];
}

+ (id)invokeExactStaticMethodWithIOSClass:(IOSClass *)objectClass
                             withNSString:(NSString *)methodName
                                   withId:(id)arg {
  IOSObjectArray *args = [IOSObjectArray arrayWithObjects:(id[]){ arg } count:1 type:[IOSClass classWithClass:[NSObject class]]];
  return [OrgOssPdfreporterUsesOrgApacheCommonsBeanutilsMethodUtils invokeExactStaticMethodWithIOSClass:objectClass withNSString:methodName withNSObjectArray:args];
}

+ (id)invokeExactStaticMethodWithIOSClass:(IOSClass *)objectClass
                             withNSString:(NSString *)methodName
                        withNSObjectArray:(IOSObjectArray *)args {
  if (args == nil) {
    args = OrgOssPdfreporterUsesOrgApacheCommonsBeanutilsMethodUtils_EMPTY_OBJECT_ARRAY_;
  }
  int arguments = (int) [((IOSObjectArray *) nil_chk(args)) count];
  IOSObjectArray *parameterTypes = [IOSObjectArray arrayWithLength:arguments type:[IOSClass classWithClass:[IOSClass class]]];
  for (int i = 0; i < arguments; i++) {
    (void) [((IOSObjectArray *) nil_chk(parameterTypes)) replaceObjectAtIndex:i withObject:[nil_chk([((IOSObjectArray *) nil_chk(args)) objectAtIndex:i]) getClass]];
  }
  return [OrgOssPdfreporterUsesOrgApacheCommonsBeanutilsMethodUtils invokeExactStaticMethodWithIOSClass:objectClass withNSString:methodName withNSObjectArray:args withIOSClassArray:parameterTypes];
}

+ (JavaLangReflectMethod *)getAccessibleMethodWithIOSClass:(IOSClass *)clazz
                                              withNSString:(NSString *)methodName
                                              withIOSClass:(IOSClass *)parameterType {
  IOSObjectArray *parameterTypes = [IOSObjectArray arrayWithObjects:(id[]){ parameterType } count:1 type:[IOSClass classWithClass:[IOSClass class]]];
  return [OrgOssPdfreporterUsesOrgApacheCommonsBeanutilsMethodUtils getAccessibleMethodWithIOSClass:clazz withNSString:methodName withIOSClassArray:parameterTypes];
}

+ (JavaLangReflectMethod *)getAccessibleMethodWithIOSClass:(IOSClass *)clazz
                                              withNSString:(NSString *)methodName
                                         withIOSClassArray:(IOSObjectArray *)parameterTypes {
  @try {
    OrgOssPdfreporterUsesOrgApacheCommonsBeanutilsMethodUtils_MethodDescriptor *md = [[OrgOssPdfreporterUsesOrgApacheCommonsBeanutilsMethodUtils_MethodDescriptor alloc] initWithIOSClass:clazz withNSString:methodName withIOSClassArray:parameterTypes withBOOL:YES];
    JavaLangReflectMethod *method = [OrgOssPdfreporterUsesOrgApacheCommonsBeanutilsMethodUtils getCachedMethodWithOrgOssPdfreporterUsesOrgApacheCommonsBeanutilsMethodUtils_MethodDescriptor:md];
    if (method != nil) {
      return method;
    }
    method = [OrgOssPdfreporterUsesOrgApacheCommonsBeanutilsMethodUtils getAccessibleMethodWithIOSClass:clazz withJavaLangReflectMethod:[((IOSClass *) nil_chk(clazz)) getMethod:methodName parameterTypes:parameterTypes]];
    [OrgOssPdfreporterUsesOrgApacheCommonsBeanutilsMethodUtils cacheMethodWithOrgOssPdfreporterUsesOrgApacheCommonsBeanutilsMethodUtils_MethodDescriptor:md withJavaLangReflectMethod:method];
    return method;
  }
  @catch (JavaLangNoSuchMethodException *e) {
    return (nil);
  }
}

+ (JavaLangReflectMethod *)getAccessibleMethodWithJavaLangReflectMethod:(JavaLangReflectMethod *)method {
  if (method == nil) {
    return (nil);
  }
  return [OrgOssPdfreporterUsesOrgApacheCommonsBeanutilsMethodUtils getAccessibleMethodWithIOSClass:[((JavaLangReflectMethod *) nil_chk(method)) getDeclaringClass] withJavaLangReflectMethod:method];
}

+ (JavaLangReflectMethod *)getAccessibleMethodWithIOSClass:(IOSClass *)clazz
                                 withJavaLangReflectMethod:(JavaLangReflectMethod *)method {
  if (method == nil) {
    return (nil);
  }
  if (![JavaLangReflectModifier isPublicWithInt:[((JavaLangReflectMethod *) nil_chk(method)) getModifiers]]) {
    return (nil);
  }
  BOOL sameClass = YES;
  if (clazz == nil) {
    clazz = [((JavaLangReflectMethod *) nil_chk(method)) getDeclaringClass];
  }
  else {
    sameClass = [clazz isEqual:[((JavaLangReflectMethod *) nil_chk(method)) getDeclaringClass]];
    if (![nil_chk([((JavaLangReflectMethod *) nil_chk(method)) getDeclaringClass]) isAssignableFrom:clazz]) {
      @throw [[JavaLangIllegalArgumentException alloc] initWithNSString:[NSString stringWithFormat:@"%@ is not assignable from %@", [clazz getName], [((IOSClass *) nil_chk([((JavaLangReflectMethod *) nil_chk(method)) getDeclaringClass])) getName]]];
    }
  }
  if ([JavaLangReflectModifier isPublicWithInt:[((IOSClass *) nil_chk(clazz)) getModifiers]]) {
    if (!sameClass && ![JavaLangReflectModifier isPublicWithInt:[((IOSClass *) nil_chk([((JavaLangReflectMethod *) nil_chk(method)) getDeclaringClass])) getModifiers]]) {
      [OrgOssPdfreporterUsesOrgApacheCommonsBeanutilsMethodUtils setMethodAccessibleWithJavaLangReflectMethod:method];
    }
    return (method);
  }
  NSString *methodName = [((JavaLangReflectMethod *) nil_chk(method)) getName];
  IOSObjectArray *parameterTypes = [((JavaLangReflectMethod *) nil_chk(method)) getParameterTypes];
  method = [OrgOssPdfreporterUsesOrgApacheCommonsBeanutilsMethodUtils getAccessibleMethodFromInterfaceNestWithIOSClass:clazz withNSString:methodName withIOSClassArray:parameterTypes];
  if (method == nil) {
    method = [OrgOssPdfreporterUsesOrgApacheCommonsBeanutilsMethodUtils getAccessibleMethodFromSuperclassWithIOSClass:clazz withNSString:methodName withIOSClassArray:parameterTypes];
  }
  return (method);
}

+ (JavaLangReflectMethod *)getAccessibleMethodFromSuperclassWithIOSClass:(IOSClass *)clazz
                                                            withNSString:(NSString *)methodName
                                                       withIOSClassArray:(IOSObjectArray *)parameterTypes {
  IOSClass *parentClazz = [((IOSClass *) nil_chk(clazz)) getSuperclass];
  while (parentClazz != nil) {
    if ([JavaLangReflectModifier isPublicWithInt:[((IOSClass *) nil_chk(parentClazz)) getModifiers]]) {
      @try {
        return [((IOSClass *) nil_chk(parentClazz)) getMethod:methodName parameterTypes:parameterTypes];
      }
      @catch (JavaLangNoSuchMethodException *e) {
        return nil;
      }
    }
    parentClazz = [((IOSClass *) nil_chk(parentClazz)) getSuperclass];
  }
  return nil;
}

+ (JavaLangReflectMethod *)getAccessibleMethodFromInterfaceNestWithIOSClass:(IOSClass *)clazz
                                                               withNSString:(NSString *)methodName
                                                          withIOSClassArray:(IOSObjectArray *)parameterTypes {
  JavaLangReflectMethod *method = nil;
  for (; clazz != nil; clazz = [((IOSClass *) nil_chk(clazz)) getSuperclass]) {
    IOSObjectArray *interfaces = [((IOSClass *) nil_chk(clazz)) getInterfaces];
    for (int i = 0; i < (int) [((IOSObjectArray *) nil_chk(interfaces)) count]; i++) {
      if (![JavaLangReflectModifier isPublicWithInt:[((IOSClass *) nil_chk([((IOSObjectArray *) nil_chk(interfaces)) objectAtIndex:i])) getModifiers]]) {
        continue;
      }
      @try {
        method = [((IOSClass *) nil_chk([((IOSObjectArray *) nil_chk(interfaces)) objectAtIndex:i])) getDeclaredMethod:methodName parameterTypes:parameterTypes];
      }
      @catch (JavaLangNoSuchMethodException *e) {
      }
      if (method != nil) {
        return method;
      }
      method = [OrgOssPdfreporterUsesOrgApacheCommonsBeanutilsMethodUtils getAccessibleMethodFromInterfaceNestWithIOSClass:[((IOSObjectArray *) nil_chk(interfaces)) objectAtIndex:i] withNSString:methodName withIOSClassArray:parameterTypes];
      if (method != nil) {
        return method;
      }
    }
  }
  if (method != nil) {
    return (method);
  }
  return (nil);
}

+ (JavaLangReflectMethod *)getMatchingAccessibleMethodWithIOSClass:(IOSClass *)clazz
                                                      withNSString:(NSString *)methodName
                                                 withIOSClassArray:(IOSObjectArray *)parameterTypes {
  OrgOssPdfreporterUsesOrgApacheCommonsBeanutilsMethodUtils_MethodDescriptor *md = [[OrgOssPdfreporterUsesOrgApacheCommonsBeanutilsMethodUtils_MethodDescriptor alloc] initWithIOSClass:clazz withNSString:methodName withIOSClassArray:parameterTypes withBOOL:NO];
  @try {
    JavaLangReflectMethod *method = [OrgOssPdfreporterUsesOrgApacheCommonsBeanutilsMethodUtils getCachedMethodWithOrgOssPdfreporterUsesOrgApacheCommonsBeanutilsMethodUtils_MethodDescriptor:md];
    if (method != nil) {
      return method;
    }
    method = [((IOSClass *) nil_chk(clazz)) getMethod:methodName parameterTypes:parameterTypes];
    if (method != nil) {
      [OrgOssPdfreporterUsesOrgApacheCommonsBeanutilsMethodUtils setMethodAccessibleWithJavaLangReflectMethod:method];
      [OrgOssPdfreporterUsesOrgApacheCommonsBeanutilsMethodUtils cacheMethodWithOrgOssPdfreporterUsesOrgApacheCommonsBeanutilsMethodUtils_MethodDescriptor:md withJavaLangReflectMethod:method];
      return method;
    }
  }
  @catch (JavaLangNoSuchMethodException *e) {
  }
  int paramSize = (int) [((IOSObjectArray *) nil_chk(parameterTypes)) count];
  JavaLangReflectMethod *bestMatch = nil;
  IOSObjectArray *methods = [((IOSClass *) nil_chk(clazz)) getMethods];
  float bestMatchCost = JavaLangFloat_MAX_VALUE;
  float myCost = JavaLangFloat_MAX_VALUE;
  for (int i = 0, size = (int) [((IOSObjectArray *) nil_chk(methods)) count]; i < size; i++) {
    if ([OrgOssPdfreporterUsesOrgApacheCommonsBeanutilsMethodUtils methodMatchesOrStartsSameWithNSString:[((JavaLangReflectMethod *) nil_chk([((IOSObjectArray *) nil_chk(methods)) objectAtIndex:i])) getName] withNSString:methodName]) {
      IOSObjectArray *methodsParams = [((JavaLangReflectMethod *) nil_chk([((IOSObjectArray *) nil_chk(methods)) objectAtIndex:i])) getParameterTypes];
      int methodParamSize = (int) [((IOSObjectArray *) nil_chk(methodsParams)) count];
      if (methodParamSize == paramSize) {
        BOOL match = YES;
        for (int n = 0; n < methodParamSize; n++) {
          if (![OrgOssPdfreporterUsesOrgApacheCommonsBeanutilsMethodUtils isAssignmentCompatibleWithIOSClass:[((IOSObjectArray *) nil_chk(methodsParams)) objectAtIndex:n] withIOSClass:[((IOSObjectArray *) nil_chk(parameterTypes)) objectAtIndex:n]]) {
            match = NO;
            break;
          }
        }
        if (match) {
          JavaLangReflectMethod *method = [OrgOssPdfreporterUsesOrgApacheCommonsBeanutilsMethodUtils getAccessibleMethodWithIOSClass:clazz withJavaLangReflectMethod:[((IOSObjectArray *) nil_chk(methods)) objectAtIndex:i]];
          if (method != nil) {
            [OrgOssPdfreporterUsesOrgApacheCommonsBeanutilsMethodUtils setMethodAccessibleWithJavaLangReflectMethod:method];
            myCost = [OrgOssPdfreporterUsesOrgApacheCommonsBeanutilsMethodUtils getTotalTransformationCostWithIOSClassArray:parameterTypes withIOSClassArray:[method getParameterTypes]];
            if (myCost < bestMatchCost) {
              bestMatch = method;
              bestMatchCost = myCost;
            }
          }
        }
      }
    }
  }
  if (bestMatch != nil) {
    [OrgOssPdfreporterUsesOrgApacheCommonsBeanutilsMethodUtils cacheMethodWithOrgOssPdfreporterUsesOrgApacheCommonsBeanutilsMethodUtils_MethodDescriptor:md withJavaLangReflectMethod:bestMatch];
  }
  return bestMatch;
}

+ (BOOL)methodMatchesOrStartsSameWithNSString:(NSString *)iOSMethodName
                                 withNSString:(NSString *)javaMethodName {
  if (iOSMethodName == nil || javaMethodName == nil) {
    return NO;
  }
  if ([((NSString *) nil_chk(iOSMethodName)) length] >= [((NSString *) nil_chk(javaMethodName)) length] && [((NSString *) nil_chk(iOSMethodName)) hasPrefix:javaMethodName]) {
    if ([((NSString *) nil_chk([((NSString *) nil_chk(iOSMethodName)) substring:[((NSString *) nil_chk(javaMethodName)) length] endIndex:[((NSString *) nil_chk(iOSMethodName)) length]])) hasPrefix:@"With"] || [((NSString *) nil_chk(iOSMethodName)) length] == [((NSString *) nil_chk(javaMethodName)) length]) {
      return YES;
    }
  }
  return NO;
}

+ (void)setMethodAccessibleWithJavaLangReflectMethod:(JavaLangReflectMethod *)method {
  @try {
    [((JavaLangReflectMethod *) nil_chk(method)) setAccessibleWithBOOL:YES];
  }
  @catch (JavaLangSecurityException *se) {
    if (!OrgOssPdfreporterUsesOrgApacheCommonsBeanutilsMethodUtils_loggedAccessibleWarning_) {
      BOOL vulnerableJVM = NO;
      @try {
        NSString *specVersion = [JavaLangSystem getPropertyWithNSString:@"java.specification.version"];
        if ([((NSString *) nil_chk(specVersion)) charAtWithInt:0] == '1' && ([((NSString *) nil_chk(specVersion)) charAtWithInt:2] == '0' || [((NSString *) nil_chk(specVersion)) charAtWithInt:2] == '1' || [((NSString *) nil_chk(specVersion)) charAtWithInt:2] == '2' || [((NSString *) nil_chk(specVersion)) charAtWithInt:2] == '3')) {
          vulnerableJVM = YES;
        }
      }
      @catch (JavaLangSecurityException *e) {
        vulnerableJVM = YES;
      }
      OrgOssPdfreporterUsesOrgApacheCommonsBeanutilsMethodUtils_loggedAccessibleWarning_ = YES;
    }
  }
}

+ (float)getTotalTransformationCostWithIOSClassArray:(IOSObjectArray *)srcArgs
                                   withIOSClassArray:(IOSObjectArray *)destArgs {
  float totalCost = 0.0f;
  for (int i = 0; i < (int) [((IOSObjectArray *) nil_chk(srcArgs)) count]; i++) {
    IOSClass *srcClass, *destClass;
    srcClass = [((IOSObjectArray *) nil_chk(srcArgs)) objectAtIndex:i];
    destClass = [((IOSObjectArray *) nil_chk(destArgs)) objectAtIndex:i];
    totalCost += [OrgOssPdfreporterUsesOrgApacheCommonsBeanutilsMethodUtils getObjectTransformationCostWithIOSClass:srcClass withIOSClass:destClass];
  }
  return totalCost;
}

+ (float)getObjectTransformationCostWithIOSClass:(IOSClass *)srcClass
                                    withIOSClass:(IOSClass *)destClass {
  float cost = 0.0f;
  while (destClass != nil && ![((IOSClass *) nil_chk(destClass)) isEqual:srcClass]) {
    if ([((IOSClass *) nil_chk(destClass)) isInterface] && [OrgOssPdfreporterUsesOrgApacheCommonsBeanutilsMethodUtils isAssignmentCompatibleWithIOSClass:destClass withIOSClass:srcClass]) {
      cost += 0.25f;
      break;
    }
    cost++;
    destClass = [((IOSClass *) nil_chk(destClass)) getSuperclass];
  }
  if (destClass == nil) {
    cost += 1.5f;
  }
  return cost;
}

+ (BOOL)isAssignmentCompatibleWithIOSClass:(IOSClass *)parameterType
                              withIOSClass:(IOSClass *)parameterization {
  if ([nil_chk(parameterType) isAssignableFrom:parameterization]) {
    return YES;
  }
  if ([((IOSClass *) nil_chk(parameterType)) isPrimitive]) {
    IOSClass *parameterWrapperClazz = [OrgOssPdfreporterUsesOrgApacheCommonsBeanutilsMethodUtils getPrimitiveWrapperWithIOSClass:parameterType];
    if (parameterWrapperClazz != nil) {
      return [parameterWrapperClazz isEqual:parameterization];
    }
  }
  return NO;
}

+ (IOSClass *)getPrimitiveWrapperWithIOSClass:(IOSClass *)primitiveType {
  if ([[JavaLangBoolean TYPE] isEqual:primitiveType]) {
    return [IOSClass classWithClass:[JavaLangBoolean class]];
  }
  else if ([[JavaLangFloat TYPE] isEqual:primitiveType]) {
    return [IOSClass classWithClass:[JavaLangFloat class]];
  }
  else if ([[JavaLangLong TYPE] isEqual:primitiveType]) {
    return [IOSClass classWithClass:[JavaLangLong class]];
  }
  else if ([[JavaLangInteger TYPE] isEqual:primitiveType]) {
    return [IOSClass classWithClass:[JavaLangInteger class]];
  }
  else if ([[JavaLangShort TYPE] isEqual:primitiveType]) {
    return [IOSClass classWithClass:[JavaLangShort class]];
  }
  else if ([[JavaLangByte TYPE] isEqual:primitiveType]) {
    return [IOSClass classWithClass:[JavaLangByte class]];
  }
  else if ([[JavaLangDouble TYPE] isEqual:primitiveType]) {
    return [IOSClass classWithClass:[JavaLangDouble class]];
  }
  else if ([[JavaLangCharacter TYPE] isEqual:primitiveType]) {
    return [IOSClass classWithClass:[JavaLangCharacter class]];
  }
  else {
    return nil;
  }
}

+ (IOSClass *)getPrimitiveTypeWithIOSClass:(IOSClass *)wrapperType {
  if ([[IOSClass classWithClass:[JavaLangBoolean class]] isEqual:wrapperType]) {
    return [JavaLangBoolean TYPE];
  }
  else if ([[IOSClass classWithClass:[JavaLangFloat class]] isEqual:wrapperType]) {
    return [JavaLangFloat TYPE];
  }
  else if ([[IOSClass classWithClass:[JavaLangLong class]] isEqual:wrapperType]) {
    return [JavaLangLong TYPE];
  }
  else if ([[IOSClass classWithClass:[JavaLangInteger class]] isEqual:wrapperType]) {
    return [JavaLangInteger TYPE];
  }
  else if ([[IOSClass classWithClass:[JavaLangShort class]] isEqual:wrapperType]) {
    return [JavaLangShort TYPE];
  }
  else if ([[IOSClass classWithClass:[JavaLangByte class]] isEqual:wrapperType]) {
    return [JavaLangByte TYPE];
  }
  else if ([[IOSClass classWithClass:[JavaLangDouble class]] isEqual:wrapperType]) {
    return [JavaLangDouble TYPE];
  }
  else if ([[IOSClass classWithClass:[JavaLangCharacter class]] isEqual:wrapperType]) {
    return [JavaLangCharacter TYPE];
  }
  else {
    return nil;
  }
}

+ (IOSClass *)toNonPrimitiveClassWithIOSClass:(IOSClass *)clazz {
  if ([((IOSClass *) nil_chk(clazz)) isPrimitive]) {
    IOSClass *primitiveClazz = [OrgOssPdfreporterUsesOrgApacheCommonsBeanutilsMethodUtils getPrimitiveWrapperWithIOSClass:clazz];
    if (primitiveClazz != nil) {
      return primitiveClazz;
    }
    else {
      return clazz;
    }
  }
  else {
    return clazz;
  }
}

+ (JavaLangReflectMethod *)getCachedMethodWithOrgOssPdfreporterUsesOrgApacheCommonsBeanutilsMethodUtils_MethodDescriptor:(OrgOssPdfreporterUsesOrgApacheCommonsBeanutilsMethodUtils_MethodDescriptor *)md {
  if (OrgOssPdfreporterUsesOrgApacheCommonsBeanutilsMethodUtils_CACHE_METHODS_) {
    return [((id<JavaUtilMap>) nil_chk(OrgOssPdfreporterUsesOrgApacheCommonsBeanutilsMethodUtils_cache_)) getWithId:md];
  }
  return nil;
}

+ (void)cacheMethodWithOrgOssPdfreporterUsesOrgApacheCommonsBeanutilsMethodUtils_MethodDescriptor:(OrgOssPdfreporterUsesOrgApacheCommonsBeanutilsMethodUtils_MethodDescriptor *)md
                                                                        withJavaLangReflectMethod:(JavaLangReflectMethod *)method {
  if (OrgOssPdfreporterUsesOrgApacheCommonsBeanutilsMethodUtils_CACHE_METHODS_) {
    if (method != nil) {
      (void) [((id<JavaUtilMap>) nil_chk(OrgOssPdfreporterUsesOrgApacheCommonsBeanutilsMethodUtils_cache_)) putWithId:md withId:method];
    }
  }
}

- (id)init {
  return [super init];
}

+ (void)initialize {
  if (self == [OrgOssPdfreporterUsesOrgApacheCommonsBeanutilsMethodUtils class]) {
    OrgOssPdfreporterUsesOrgApacheCommonsBeanutilsMethodUtils_loggedAccessibleWarning_ = NO;
    OrgOssPdfreporterUsesOrgApacheCommonsBeanutilsMethodUtils_CACHE_METHODS_ = YES;
    OrgOssPdfreporterUsesOrgApacheCommonsBeanutilsMethodUtils_EMPTY_CLASS_PARAMETERS_ = [IOSObjectArray arrayWithLength:0 type:[IOSClass classWithClass:[IOSClass class]]];
    OrgOssPdfreporterUsesOrgApacheCommonsBeanutilsMethodUtils_EMPTY_OBJECT_ARRAY_ = [IOSObjectArray arrayWithLength:0 type:[IOSClass classWithClass:[NSObject class]]];
    OrgOssPdfreporterUsesOrgApacheCommonsBeanutilsMethodUtils_cache_ = [[JavaUtilHashMap alloc] init];
  }
}

@end
@implementation OrgOssPdfreporterUsesOrgApacheCommonsBeanutilsMethodUtils_MethodDescriptor

@synthesize cls = cls_;
@synthesize methodName = methodName_;
@synthesize paramTypes = paramTypes_;
@synthesize exact = exact_;
@synthesize hashCode_ = hashCode__;

- (id)initWithIOSClass:(IOSClass *)cls
          withNSString:(NSString *)methodName
     withIOSClassArray:(IOSObjectArray *)paramTypes
              withBOOL:(BOOL)exact {
  if ((self = [super init])) {
    if (cls == nil) {
      @throw [[JavaLangIllegalArgumentException alloc] initWithNSString:@"Class cannot be null"];
    }
    if (methodName == nil) {
      @throw [[JavaLangIllegalArgumentException alloc] initWithNSString:@"Method Name cannot be null"];
    }
    if (paramTypes == nil) {
      paramTypes = [OrgOssPdfreporterUsesOrgApacheCommonsBeanutilsMethodUtils EMPTY_CLASS_PARAMETERS];
    }
    self.cls = cls;
    self.methodName = methodName;
    self.paramTypes = paramTypes;
    self.exact = exact;
    self.hashCode_ = [((NSString *) nil_chk(methodName)) length];
  }
  return self;
}

- (BOOL)isEqual:(id)obj {
  if (!([obj isKindOfClass:[OrgOssPdfreporterUsesOrgApacheCommonsBeanutilsMethodUtils_MethodDescriptor class]])) {
    return NO;
  }
  OrgOssPdfreporterUsesOrgApacheCommonsBeanutilsMethodUtils_MethodDescriptor *md = (OrgOssPdfreporterUsesOrgApacheCommonsBeanutilsMethodUtils_MethodDescriptor *) obj;
  return (exact_ == ((OrgOssPdfreporterUsesOrgApacheCommonsBeanutilsMethodUtils_MethodDescriptor *) nil_chk(md)).exact && [((NSString *) nil_chk(methodName_)) isEqual:((OrgOssPdfreporterUsesOrgApacheCommonsBeanutilsMethodUtils_MethodDescriptor *) nil_chk(md)).methodName] && [((IOSClass *) nil_chk(cls_)) isEqual:((OrgOssPdfreporterUsesOrgApacheCommonsBeanutilsMethodUtils_MethodDescriptor *) nil_chk(md)).cls] && [JavaUtilArrays equalsWithNSObjectArray:paramTypes_ withNSObjectArray:((OrgOssPdfreporterUsesOrgApacheCommonsBeanutilsMethodUtils_MethodDescriptor *) nil_chk(md)).paramTypes]);
}

- (NSUInteger)hash {
  return hashCode__;
}

- (void)copyAllPropertiesTo:(id)copy {
  [super copyAllPropertiesTo:copy];
  OrgOssPdfreporterUsesOrgApacheCommonsBeanutilsMethodUtils_MethodDescriptor *typedCopy = (OrgOssPdfreporterUsesOrgApacheCommonsBeanutilsMethodUtils_MethodDescriptor *) copy;
  typedCopy.cls = cls_;
  typedCopy.methodName = methodName_;
  typedCopy.paramTypes = paramTypes_;
  typedCopy.exact = exact_;
  typedCopy.hashCode_ = hashCode__;
}

@end
