//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: pdfreporter-extensions/src/org/oss/pdfreporter/uses/net/sourceforge/jeval/EvaluationResult.java
//
//  Created by kendra on 9/27/13.
//

#include "java/lang/Double.h"
#include "org/oss/pdfreporter/uses/net/sourceforge/jeval/EvaluationConstants.h"
#include "org/oss/pdfreporter/uses/net/sourceforge/jeval/EvaluationResult.h"

@implementation OrgOssPdfreporterUsesNetSourceforgeJevalEvaluationResult

@synthesize result = result_;
@synthesize quoteCharacter = quoteCharacter_;

- (id)initWithNSString:(NSString *)result
           withUnichar:(unichar)quoteCharacter {
  if ((self = [super init])) {
    self.result = result;
    self.quoteCharacter = quoteCharacter;
  }
  return self;
}

- (unichar)getQuoteCharacter {
  return quoteCharacter_;
}

- (void)setQuoteCharacterWithUnichar:(unichar)quoteCharacter {
  self.quoteCharacter = quoteCharacter;
}

- (NSString *)getResult {
  return result_;
}

- (void)setResultWithNSString:(NSString *)result {
  self.result = result;
}

- (BOOL)isBooleanTrue {
  if (result_ != nil && [((NSString *) nil_chk([OrgOssPdfreporterUsesNetSourceforgeJevalEvaluationConstants BOOLEAN_STRING_TRUE])) isEqual:result_]) {
    return YES;
  }
  return NO;
}

- (BOOL)isBooleanFalse {
  if (result_ != nil && [((NSString *) nil_chk([OrgOssPdfreporterUsesNetSourceforgeJevalEvaluationConstants BOOLEAN_STRING_FALSE])) isEqual:result_]) {
    return YES;
  }
  return NO;
}

- (BOOL)isString {
  if (result_ != nil && [((NSString *) nil_chk(result_)) length] >= 2) {
    if ([((NSString *) nil_chk(result_)) charAtWithInt:0] == quoteCharacter_ && [((NSString *) nil_chk(result_)) charAtWithInt:[((NSString *) nil_chk(result_)) length] - 1] == quoteCharacter_) {
      return YES;
    }
  }
  return NO;
}

- (JavaLangDouble *)getDouble {
  return [[JavaLangDouble alloc] initWithNSString:result_];
}

- (NSString *)getUnwrappedString {
  if (result_ != nil && [((NSString *) nil_chk(result_)) length] >= 2) {
    if ([((NSString *) nil_chk(result_)) charAtWithInt:0] == quoteCharacter_ && [((NSString *) nil_chk(result_)) charAtWithInt:[((NSString *) nil_chk(result_)) length] - 1] == quoteCharacter_) {
      return [((NSString *) nil_chk(result_)) substring:1 endIndex:[((NSString *) nil_chk(result_)) length] - 1];
    }
  }
  return nil;
}

- (void)copyAllPropertiesTo:(id)copy {
  [super copyAllPropertiesTo:copy];
  OrgOssPdfreporterUsesNetSourceforgeJevalEvaluationResult *typedCopy = (OrgOssPdfreporterUsesNetSourceforgeJevalEvaluationResult *) copy;
  typedCopy.result = result_;
  typedCopy.quoteCharacter = quoteCharacter_;
}

@end
