//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: pdfreporter-extensions/src/org/oss/pdfreporter/uses/net/sourceforge/jeval/ExpressionTree.java
//
//  Created by kendra on 9/27/13.
//

#include "java/lang/Double.h"
#include "java/lang/NumberFormatException.h"
#include "org/oss/pdfreporter/uses/net/sourceforge/jeval/EvaluationException.h"
#include "org/oss/pdfreporter/uses/net/sourceforge/jeval/Evaluator.h"
#include "org/oss/pdfreporter/uses/net/sourceforge/jeval/ExpressionOperand.h"
#include "org/oss/pdfreporter/uses/net/sourceforge/jeval/ExpressionTree.h"
#include "org/oss/pdfreporter/uses/net/sourceforge/jeval/ParsedFunction.h"
#include "org/oss/pdfreporter/uses/net/sourceforge/jeval/function/Function.h"
#include "org/oss/pdfreporter/uses/net/sourceforge/jeval/function/FunctionConstants.h"
#include "org/oss/pdfreporter/uses/net/sourceforge/jeval/function/FunctionException.h"
#include "org/oss/pdfreporter/uses/net/sourceforge/jeval/function/FunctionResult.h"
#include "org/oss/pdfreporter/uses/net/sourceforge/jeval/operator/Operator.h"

@implementation OrgOssPdfreporterUsesNetSourceforgeJevalExpressionTree

@synthesize leftOperand = leftOperand_;
@synthesize rightOperand = rightOperand_;
@synthesize operator_ = operator__;
@synthesize unaryOperator = unaryOperator_;
@synthesize evaluator = evaluator_;

- (id)initWithOrgOssPdfreporterUsesNetSourceforgeJevalEvaluator:(OrgOssPdfreporterUsesNetSourceforgeJevalEvaluator *)evaluator
                                                         withId:(id)leftOperand
                                                         withId:(id)rightOperand
   withOrgOssPdfreporterUsesNetSourceforgeJevalOperatorOperator:(id<OrgOssPdfreporterUsesNetSourceforgeJevalOperatorOperator>)operator_
   withOrgOssPdfreporterUsesNetSourceforgeJevalOperatorOperator:(id<OrgOssPdfreporterUsesNetSourceforgeJevalOperatorOperator>)unaryOperator {
  if ((self = [super init])) {
    leftOperand_ = nil;
    rightOperand_ = nil;
    operator__ = nil;
    unaryOperator_ = nil;
    evaluator_ = nil;
    self.evaluator = evaluator;
    self.leftOperand = leftOperand;
    self.rightOperand = rightOperand;
    self.operator_ = operator_;
    self.unaryOperator = unaryOperator;
  }
  return self;
}

- (id)getLeftOperand {
  return leftOperand_;
}

- (id)getRightOperand {
  return rightOperand_;
}

- (id<OrgOssPdfreporterUsesNetSourceforgeJevalOperatorOperator>)getOperator {
  return operator__;
}

- (id<OrgOssPdfreporterUsesNetSourceforgeJevalOperatorOperator>)getUnaryOperator {
  return unaryOperator_;
}

- (NSString *)evaluateWithBOOL:(BOOL)wrapStringFunctionResults {
  NSString *rtnResult = nil;
  NSString *leftResultString = nil;
  JavaLangDouble *leftResultDouble = nil;
  if ([leftOperand_ isKindOfClass:[OrgOssPdfreporterUsesNetSourceforgeJevalExpressionTree class]]) {
    leftResultString = [((OrgOssPdfreporterUsesNetSourceforgeJevalExpressionTree *) leftOperand_) evaluateWithBOOL:wrapStringFunctionResults];
    @try {
      leftResultDouble = [[JavaLangDouble alloc] initWithNSString:leftResultString];
      leftResultString = nil;
    }
    @catch (JavaLangNumberFormatException *exception) {
      leftResultDouble = nil;
    }
  }
  else if ([leftOperand_ isKindOfClass:[OrgOssPdfreporterUsesNetSourceforgeJevalExpressionOperand class]]) {
    OrgOssPdfreporterUsesNetSourceforgeJevalExpressionOperand *leftExpressionOperand = (OrgOssPdfreporterUsesNetSourceforgeJevalExpressionOperand *) leftOperand_;
    leftResultString = [((OrgOssPdfreporterUsesNetSourceforgeJevalExpressionOperand *) nil_chk(leftExpressionOperand)) getValue];
    leftResultString = [((OrgOssPdfreporterUsesNetSourceforgeJevalEvaluator *) nil_chk(evaluator_)) replaceVariablesWithNSString:leftResultString];
    if (![((OrgOssPdfreporterUsesNetSourceforgeJevalEvaluator *) nil_chk(evaluator_)) isExpressionStringWithNSString:leftResultString]) {
      @try {
        leftResultDouble = [[JavaLangDouble alloc] initWithNSString:leftResultString];
        leftResultString = nil;
      }
      @catch (JavaLangNumberFormatException *nfe) {
        @throw [[OrgOssPdfreporterUsesNetSourceforgeJevalEvaluationException alloc] initWithNSString:@"Expression is invalid." withJavaLangException:nfe];
      }
      if ([((OrgOssPdfreporterUsesNetSourceforgeJevalExpressionOperand *) nil_chk(leftExpressionOperand)) getUnaryOperator] != nil) {
        leftResultDouble = [[JavaLangDouble alloc] initWithDouble:[((id<OrgOssPdfreporterUsesNetSourceforgeJevalOperatorOperator>) nil_chk([((OrgOssPdfreporterUsesNetSourceforgeJevalExpressionOperand *) nil_chk(leftExpressionOperand)) getUnaryOperator])) evaluateWithDouble:[((JavaLangDouble *) nil_chk(leftResultDouble)) doubleValue]]];
      }
    }
    else {
      if ([((OrgOssPdfreporterUsesNetSourceforgeJevalExpressionOperand *) nil_chk(leftExpressionOperand)) getUnaryOperator] != nil) {
        @throw [[OrgOssPdfreporterUsesNetSourceforgeJevalEvaluationException alloc] initWithNSString:@"Invalid operand for unary operator."];
      }
    }
  }
  else if ([leftOperand_ isKindOfClass:[OrgOssPdfreporterUsesNetSourceforgeJevalParsedFunction class]]) {
    OrgOssPdfreporterUsesNetSourceforgeJevalParsedFunction *parsedFunction = (OrgOssPdfreporterUsesNetSourceforgeJevalParsedFunction *) leftOperand_;
    id<OrgOssPdfreporterUsesNetSourceforgeJevalFunctionFunction> function = [((OrgOssPdfreporterUsesNetSourceforgeJevalParsedFunction *) nil_chk(parsedFunction)) getFunction];
    NSString *arguments = [((OrgOssPdfreporterUsesNetSourceforgeJevalParsedFunction *) nil_chk(parsedFunction)) getArguments];
    arguments = [((OrgOssPdfreporterUsesNetSourceforgeJevalEvaluator *) nil_chk(evaluator_)) replaceVariablesWithNSString:arguments];
    if ([((OrgOssPdfreporterUsesNetSourceforgeJevalEvaluator *) nil_chk(evaluator_)) getProcessNestedFunctions]) {
      arguments = [((OrgOssPdfreporterUsesNetSourceforgeJevalEvaluator *) nil_chk(evaluator_)) processNestedFunctionsWithNSString:arguments];
    }
    @try {
      OrgOssPdfreporterUsesNetSourceforgeJevalFunctionFunctionResult *functionResult = [((id<OrgOssPdfreporterUsesNetSourceforgeJevalFunctionFunction>) nil_chk(function)) executeWithOrgOssPdfreporterUsesNetSourceforgeJevalEvaluator:evaluator_ withNSString:arguments];
      leftResultString = [((OrgOssPdfreporterUsesNetSourceforgeJevalFunctionFunctionResult *) nil_chk(functionResult)) getResult];
      if ([((OrgOssPdfreporterUsesNetSourceforgeJevalFunctionFunctionResult *) nil_chk(functionResult)) getType] == OrgOssPdfreporterUsesNetSourceforgeJevalFunctionFunctionConstants_FUNCTION_RESULT_TYPE_NUMERIC) {
        JavaLangDouble *resultDouble = [[JavaLangDouble alloc] initWithNSString:leftResultString];
        if ([((OrgOssPdfreporterUsesNetSourceforgeJevalParsedFunction *) nil_chk(parsedFunction)) getUnaryOperator] != nil) {
          resultDouble = [[JavaLangDouble alloc] initWithDouble:[((id<OrgOssPdfreporterUsesNetSourceforgeJevalOperatorOperator>) nil_chk([((OrgOssPdfreporterUsesNetSourceforgeJevalParsedFunction *) nil_chk(parsedFunction)) getUnaryOperator])) evaluateWithDouble:[((JavaLangDouble *) nil_chk(resultDouble)) doubleValue]]];
        }
        leftResultString = [NSString valueOfDouble:[((JavaLangDouble *) nil_chk(resultDouble)) doubleValue]];
      }
      else if ([((OrgOssPdfreporterUsesNetSourceforgeJevalFunctionFunctionResult *) nil_chk(functionResult)) getType] == OrgOssPdfreporterUsesNetSourceforgeJevalFunctionFunctionConstants_FUNCTION_RESULT_TYPE_STRING) {
        if (wrapStringFunctionResults) {
          leftResultString = [NSString stringWithFormat:@"%c%@%c", [((OrgOssPdfreporterUsesNetSourceforgeJevalEvaluator *) nil_chk(evaluator_)) getQuoteCharacter], leftResultString, [((OrgOssPdfreporterUsesNetSourceforgeJevalEvaluator *) nil_chk(evaluator_)) getQuoteCharacter]];
        }
        if ([((OrgOssPdfreporterUsesNetSourceforgeJevalParsedFunction *) nil_chk(parsedFunction)) getUnaryOperator] != nil) {
          @throw [[OrgOssPdfreporterUsesNetSourceforgeJevalEvaluationException alloc] initWithNSString:@"Invalid operand for unary operator."];
        }
      }
    }
    @catch (OrgOssPdfreporterUsesNetSourceforgeJevalFunctionFunctionException *fe) {
      @throw [[OrgOssPdfreporterUsesNetSourceforgeJevalEvaluationException alloc] initWithNSString:[((OrgOssPdfreporterUsesNetSourceforgeJevalFunctionFunctionException *) nil_chk(fe)) getMessage] withJavaLangException:fe];
    }
    if (![((OrgOssPdfreporterUsesNetSourceforgeJevalEvaluator *) nil_chk(evaluator_)) isExpressionStringWithNSString:leftResultString]) {
      @try {
        leftResultDouble = [[JavaLangDouble alloc] initWithNSString:leftResultString];
        leftResultString = nil;
      }
      @catch (JavaLangNumberFormatException *nfe) {
        @throw [[OrgOssPdfreporterUsesNetSourceforgeJevalEvaluationException alloc] initWithNSString:@"Expression is invalid." withJavaLangException:nfe];
      }
    }
  }
  else {
    if (leftOperand_ != nil) {
      @throw [[OrgOssPdfreporterUsesNetSourceforgeJevalEvaluationException alloc] initWithNSString:@"Expression is invalid."];
    }
  }
  NSString *rightResultString = nil;
  JavaLangDouble *rightResultDouble = nil;
  if ([rightOperand_ isKindOfClass:[OrgOssPdfreporterUsesNetSourceforgeJevalExpressionTree class]]) {
    rightResultString = [((OrgOssPdfreporterUsesNetSourceforgeJevalExpressionTree *) rightOperand_) evaluateWithBOOL:wrapStringFunctionResults];
    @try {
      rightResultDouble = [[JavaLangDouble alloc] initWithNSString:rightResultString];
      rightResultString = nil;
    }
    @catch (JavaLangNumberFormatException *exception) {
      rightResultDouble = nil;
    }
  }
  else if ([rightOperand_ isKindOfClass:[OrgOssPdfreporterUsesNetSourceforgeJevalExpressionOperand class]]) {
    OrgOssPdfreporterUsesNetSourceforgeJevalExpressionOperand *rightExpressionOperand = (OrgOssPdfreporterUsesNetSourceforgeJevalExpressionOperand *) rightOperand_;
    rightResultString = [((OrgOssPdfreporterUsesNetSourceforgeJevalExpressionOperand *) rightOperand_) getValue];
    rightResultString = [((OrgOssPdfreporterUsesNetSourceforgeJevalEvaluator *) nil_chk(evaluator_)) replaceVariablesWithNSString:rightResultString];
    if (![((OrgOssPdfreporterUsesNetSourceforgeJevalEvaluator *) nil_chk(evaluator_)) isExpressionStringWithNSString:rightResultString]) {
      @try {
        rightResultDouble = [[JavaLangDouble alloc] initWithNSString:rightResultString];
        rightResultString = nil;
      }
      @catch (JavaLangNumberFormatException *nfe) {
        @throw [[OrgOssPdfreporterUsesNetSourceforgeJevalEvaluationException alloc] initWithNSString:@"Expression is invalid." withJavaLangException:nfe];
      }
      if ([((OrgOssPdfreporterUsesNetSourceforgeJevalExpressionOperand *) nil_chk(rightExpressionOperand)) getUnaryOperator] != nil) {
        rightResultDouble = [[JavaLangDouble alloc] initWithDouble:[((id<OrgOssPdfreporterUsesNetSourceforgeJevalOperatorOperator>) nil_chk([((OrgOssPdfreporterUsesNetSourceforgeJevalExpressionOperand *) nil_chk(rightExpressionOperand)) getUnaryOperator])) evaluateWithDouble:[((JavaLangDouble *) nil_chk(rightResultDouble)) doubleValue]]];
      }
    }
    else {
      if ([((OrgOssPdfreporterUsesNetSourceforgeJevalExpressionOperand *) nil_chk(rightExpressionOperand)) getUnaryOperator] != nil) {
        @throw [[OrgOssPdfreporterUsesNetSourceforgeJevalEvaluationException alloc] initWithNSString:@"Invalid operand for unary operator."];
      }
    }
  }
  else if ([rightOperand_ isKindOfClass:[OrgOssPdfreporterUsesNetSourceforgeJevalParsedFunction class]]) {
    OrgOssPdfreporterUsesNetSourceforgeJevalParsedFunction *parsedFunction = (OrgOssPdfreporterUsesNetSourceforgeJevalParsedFunction *) rightOperand_;
    id<OrgOssPdfreporterUsesNetSourceforgeJevalFunctionFunction> function = [((OrgOssPdfreporterUsesNetSourceforgeJevalParsedFunction *) nil_chk(parsedFunction)) getFunction];
    NSString *arguments = [((OrgOssPdfreporterUsesNetSourceforgeJevalParsedFunction *) nil_chk(parsedFunction)) getArguments];
    arguments = [((OrgOssPdfreporterUsesNetSourceforgeJevalEvaluator *) nil_chk(evaluator_)) replaceVariablesWithNSString:arguments];
    if ([((OrgOssPdfreporterUsesNetSourceforgeJevalEvaluator *) nil_chk(evaluator_)) getProcessNestedFunctions]) {
      arguments = [((OrgOssPdfreporterUsesNetSourceforgeJevalEvaluator *) nil_chk(evaluator_)) processNestedFunctionsWithNSString:arguments];
    }
    @try {
      OrgOssPdfreporterUsesNetSourceforgeJevalFunctionFunctionResult *functionResult = [((id<OrgOssPdfreporterUsesNetSourceforgeJevalFunctionFunction>) nil_chk(function)) executeWithOrgOssPdfreporterUsesNetSourceforgeJevalEvaluator:evaluator_ withNSString:arguments];
      rightResultString = [((OrgOssPdfreporterUsesNetSourceforgeJevalFunctionFunctionResult *) nil_chk(functionResult)) getResult];
      if ([((OrgOssPdfreporterUsesNetSourceforgeJevalFunctionFunctionResult *) nil_chk(functionResult)) getType] == OrgOssPdfreporterUsesNetSourceforgeJevalFunctionFunctionConstants_FUNCTION_RESULT_TYPE_NUMERIC) {
        JavaLangDouble *resultDouble = [[JavaLangDouble alloc] initWithNSString:rightResultString];
        if ([((OrgOssPdfreporterUsesNetSourceforgeJevalParsedFunction *) nil_chk(parsedFunction)) getUnaryOperator] != nil) {
          resultDouble = [[JavaLangDouble alloc] initWithDouble:[((id<OrgOssPdfreporterUsesNetSourceforgeJevalOperatorOperator>) nil_chk([((OrgOssPdfreporterUsesNetSourceforgeJevalParsedFunction *) nil_chk(parsedFunction)) getUnaryOperator])) evaluateWithDouble:[((JavaLangDouble *) nil_chk(resultDouble)) doubleValue]]];
        }
        rightResultString = [NSString valueOfDouble:[((JavaLangDouble *) nil_chk(resultDouble)) doubleValue]];
      }
      else if ([((OrgOssPdfreporterUsesNetSourceforgeJevalFunctionFunctionResult *) nil_chk(functionResult)) getType] == OrgOssPdfreporterUsesNetSourceforgeJevalFunctionFunctionConstants_FUNCTION_RESULT_TYPE_STRING) {
        if (wrapStringFunctionResults) {
          rightResultString = [NSString stringWithFormat:@"%c%@%c", [((OrgOssPdfreporterUsesNetSourceforgeJevalEvaluator *) nil_chk(evaluator_)) getQuoteCharacter], rightResultString, [((OrgOssPdfreporterUsesNetSourceforgeJevalEvaluator *) nil_chk(evaluator_)) getQuoteCharacter]];
        }
        if ([((OrgOssPdfreporterUsesNetSourceforgeJevalParsedFunction *) nil_chk(parsedFunction)) getUnaryOperator] != nil) {
          @throw [[OrgOssPdfreporterUsesNetSourceforgeJevalEvaluationException alloc] initWithNSString:@"Invalid operand for unary operator."];
        }
      }
    }
    @catch (OrgOssPdfreporterUsesNetSourceforgeJevalFunctionFunctionException *fe) {
      @throw [[OrgOssPdfreporterUsesNetSourceforgeJevalEvaluationException alloc] initWithNSString:[((OrgOssPdfreporterUsesNetSourceforgeJevalFunctionFunctionException *) nil_chk(fe)) getMessage] withJavaLangException:fe];
    }
    if (![((OrgOssPdfreporterUsesNetSourceforgeJevalEvaluator *) nil_chk(evaluator_)) isExpressionStringWithNSString:rightResultString]) {
      @try {
        rightResultDouble = [[JavaLangDouble alloc] initWithNSString:rightResultString];
        rightResultString = nil;
      }
      @catch (JavaLangNumberFormatException *nfe) {
        @throw [[OrgOssPdfreporterUsesNetSourceforgeJevalEvaluationException alloc] initWithNSString:@"Expression is invalid." withJavaLangException:nfe];
      }
    }
  }
  else if (rightOperand_ == nil) {
  }
  else {
    @throw [[OrgOssPdfreporterUsesNetSourceforgeJevalEvaluationException alloc] initWithNSString:@"Expression is invalid."];
  }
  if (leftResultDouble != nil && rightResultDouble != nil) {
    double doubleResult = [((id<OrgOssPdfreporterUsesNetSourceforgeJevalOperatorOperator>) nil_chk(operator__)) evaluateWithDouble:[((JavaLangDouble *) nil_chk(leftResultDouble)) doubleValue] withDouble:[((JavaLangDouble *) nil_chk(rightResultDouble)) doubleValue]];
    if ([self getUnaryOperator] != nil) {
      doubleResult = [((id<OrgOssPdfreporterUsesNetSourceforgeJevalOperatorOperator>) nil_chk([self getUnaryOperator])) evaluateWithDouble:doubleResult];
    }
    rtnResult = [NSString valueOfDouble:doubleResult];
  }
  else if (leftResultString != nil && rightResultString != nil) {
    rtnResult = [((id<OrgOssPdfreporterUsesNetSourceforgeJevalOperatorOperator>) nil_chk(operator__)) evaluateWithNSString:leftResultString withNSString:rightResultString];
  }
  else if (leftResultDouble != nil && rightResultDouble == nil) {
    double doubleResult = -1;
    if (unaryOperator_ != nil) {
      doubleResult = [unaryOperator_ evaluateWithDouble:[((JavaLangDouble *) nil_chk(leftResultDouble)) doubleValue]];
    }
    else {
      @throw [[OrgOssPdfreporterUsesNetSourceforgeJevalEvaluationException alloc] initWithNSString:@"Expression is invalid."];
    }
    rtnResult = [NSString valueOfDouble:doubleResult];
  }
  else {
    @throw [[OrgOssPdfreporterUsesNetSourceforgeJevalEvaluationException alloc] initWithNSString:@"Expression is invalid."];
  }
  return rtnResult;
}

- (void)copyAllPropertiesTo:(id)copy {
  [super copyAllPropertiesTo:copy];
  OrgOssPdfreporterUsesNetSourceforgeJevalExpressionTree *typedCopy = (OrgOssPdfreporterUsesNetSourceforgeJevalExpressionTree *) copy;
  typedCopy.leftOperand = leftOperand_;
  typedCopy.rightOperand = rightOperand_;
  typedCopy.operator_ = operator__;
  typedCopy.unaryOperator = unaryOperator_;
  typedCopy.evaluator = evaluator_;
}

@end
