//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: pdfreporter-extensions/src/org/oss/pdfreporter/uses/net/sourceforge/jeval/EvaluationHelper.java
//
//  Created by kendra on 9/27/13.
//

#include "java/lang/StringBuffer.h"
#include "org/oss/pdfreporter/uses/net/sourceforge/jeval/EvaluationHelper.h"

@implementation OrgOssPdfreporterUsesNetSourceforgeJevalEvaluationHelper

+ (NSString *)replaceAllWithNSString:(NSString *)expression
                        withNSString:(NSString *)oldString
                        withNSString:(NSString *)newString {
  NSString *replacedExpression = expression;
  if (replacedExpression != nil) {
    int charCtr = 0;
    int oldStringIndex = [replacedExpression indexOfString:oldString fromIndex:charCtr];
    while (oldStringIndex > -1) {
      JavaLangStringBuffer *buffer = [[JavaLangStringBuffer alloc] initWithNSString:[NSString stringWithFormat:@"%@%@", [replacedExpression substring:0 endIndex:oldStringIndex], [replacedExpression substring:oldStringIndex + [((NSString *) nil_chk(oldString)) length]]]];
      (void) [((JavaLangStringBuffer *) nil_chk(buffer)) insertWithInt:oldStringIndex withNSString:newString];
      replacedExpression = [((JavaLangStringBuffer *) nil_chk(buffer)) description];
      charCtr = oldStringIndex + [((NSString *) nil_chk(newString)) length];
      if (charCtr < [replacedExpression length]) {
        oldStringIndex = [replacedExpression indexOfString:oldString fromIndex:charCtr];
      }
      else {
        oldStringIndex = -1;
      }
    }
  }
  return replacedExpression;
}

+ (BOOL)isSpaceWithUnichar:(unichar)character {
  if (character == ' ' || character == 0x0009 || character == 0x000a || character == 0x000d || character == 0x000c) {
    return YES;
  }
  return NO;
}

- (id)init {
  return [super init];
}

@end
