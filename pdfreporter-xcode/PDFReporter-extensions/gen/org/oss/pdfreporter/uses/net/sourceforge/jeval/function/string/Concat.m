//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: pdfreporter-extensions/src/org/oss/pdfreporter/uses/net/sourceforge/jeval/function/string/Concat.java
//
//  Created by kendra on 9/27/13.
//

#include "java/lang/Exception.h"
#include "java/util/ArrayList.h"
#include "org/oss/pdfreporter/uses/net/sourceforge/jeval/EvaluationConstants.h"
#include "org/oss/pdfreporter/uses/net/sourceforge/jeval/Evaluator.h"
#include "org/oss/pdfreporter/uses/net/sourceforge/jeval/function/FunctionConstants.h"
#include "org/oss/pdfreporter/uses/net/sourceforge/jeval/function/FunctionException.h"
#include "org/oss/pdfreporter/uses/net/sourceforge/jeval/function/FunctionHelper.h"
#include "org/oss/pdfreporter/uses/net/sourceforge/jeval/function/FunctionResult.h"
#include "org/oss/pdfreporter/uses/net/sourceforge/jeval/function/string/Concat.h"

@implementation OrgOssPdfreporterUsesNetSourceforgeJevalFunctionStringConcat

- (NSString *)getName {
  return @"concat";
}

- (OrgOssPdfreporterUsesNetSourceforgeJevalFunctionFunctionResult *)executeWithOrgOssPdfreporterUsesNetSourceforgeJevalEvaluator:(OrgOssPdfreporterUsesNetSourceforgeJevalEvaluator *)evaluator
                                                                                                                    withNSString:(NSString *)arguments {
  NSString *result = nil;
  NSString *exceptionMessage = @"Two string arguments are required.";
  JavaUtilArrayList *strings = [OrgOssPdfreporterUsesNetSourceforgeJevalFunctionFunctionHelper getStringsWithNSString:arguments withUnichar:OrgOssPdfreporterUsesNetSourceforgeJevalEvaluationConstants_FUNCTION_ARGUMENT_SEPARATOR];
  if ([((JavaUtilArrayList *) nil_chk(strings)) size] != 2) {
    @throw [[OrgOssPdfreporterUsesNetSourceforgeJevalFunctionFunctionException alloc] initWithNSString:exceptionMessage];
  }
  @try {
    NSString *argumentOne = [OrgOssPdfreporterUsesNetSourceforgeJevalFunctionFunctionHelper trimAndRemoveQuoteCharsWithNSString:(NSString *) [((JavaUtilArrayList *) nil_chk(strings)) getWithInt:0] withUnichar:[((OrgOssPdfreporterUsesNetSourceforgeJevalEvaluator *) nil_chk(evaluator)) getQuoteCharacter]];
    NSString *argumentTwo = [OrgOssPdfreporterUsesNetSourceforgeJevalFunctionFunctionHelper trimAndRemoveQuoteCharsWithNSString:(NSString *) [((JavaUtilArrayList *) nil_chk(strings)) getWithInt:1] withUnichar:[((OrgOssPdfreporterUsesNetSourceforgeJevalEvaluator *) nil_chk(evaluator)) getQuoteCharacter]];
    result = [((NSString *) nil_chk(argumentOne)) concat:argumentTwo];
  }
  @catch (OrgOssPdfreporterUsesNetSourceforgeJevalFunctionFunctionException *fe) {
    @throw [[OrgOssPdfreporterUsesNetSourceforgeJevalFunctionFunctionException alloc] initWithNSString:[((OrgOssPdfreporterUsesNetSourceforgeJevalFunctionFunctionException *) nil_chk(fe)) getMessage] withJavaLangException:fe];
  }
  @catch (JavaLangException *e) {
    @throw [[OrgOssPdfreporterUsesNetSourceforgeJevalFunctionFunctionException alloc] initWithNSString:exceptionMessage withJavaLangException:e];
  }
  return [[OrgOssPdfreporterUsesNetSourceforgeJevalFunctionFunctionResult alloc] initWithNSString:result withInt:OrgOssPdfreporterUsesNetSourceforgeJevalFunctionFunctionConstants_FUNCTION_RESULT_TYPE_STRING];
}

- (id)init {
  return [super init];
}

@end
