//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: pdfreporter-extensions/src/org/oss/pdfreporter/uses/net/sourceforge/jeval/ArgumentTokenizer.java
//
//  Created by kendra on 9/27/13.
//

#include "org/oss/pdfreporter/uses/net/sourceforge/jeval/ArgumentTokenizer.h"
#include "org/oss/pdfreporter/uses/net/sourceforge/jeval/EvaluationConstants.h"

@implementation OrgOssPdfreporterUsesNetSourceforgeJevalArgumentTokenizer

@synthesize defaultDelimiter = defaultDelimiter_;
@synthesize arguments = arguments_;
@synthesize delimiter = delimiter_;

- (id)initWithNSString:(NSString *)arguments
           withUnichar:(unichar)delimiter {
  if ((self = [super init])) {
    defaultDelimiter_ = OrgOssPdfreporterUsesNetSourceforgeJevalEvaluationConstants_FUNCTION_ARGUMENT_SEPARATOR;
    arguments_ = nil;
    delimiter_ = defaultDelimiter_;
    self.arguments = arguments;
    self.delimiter = delimiter;
  }
  return self;
}

- (BOOL)hasMoreElements {
  return [self hasMoreTokens];
}

- (BOOL)hasMoreTokens {
  if ([((NSString *) nil_chk(arguments_)) length] > 0) {
    return YES;
  }
  return NO;
}

- (id)nextElement {
  return [self nextToken];
}

- (NSString *)nextToken {
  int charCtr = 0;
  int size = [((NSString *) nil_chk(arguments_)) length];
  int parenthesesCtr = 0;
  NSString *returnArgument = nil;
  while (charCtr < size) {
    if ([((NSString *) nil_chk(arguments_)) charAtWithInt:charCtr] == '(') {
      parenthesesCtr++;
    }
    else if ([((NSString *) nil_chk(arguments_)) charAtWithInt:charCtr] == ')') {
      parenthesesCtr--;
    }
    else if ([((NSString *) nil_chk(arguments_)) charAtWithInt:charCtr] == delimiter_ && parenthesesCtr == 0) {
      returnArgument = [((NSString *) nil_chk(arguments_)) substring:0 endIndex:charCtr];
      arguments_ = [((NSString *) nil_chk(arguments_)) substring:charCtr + 1];
      break;
    }
    charCtr++;
  }
  if (returnArgument == nil) {
    returnArgument = arguments_;
    arguments_ = @"";
  }
  return returnArgument;
}

- (void)copyAllPropertiesTo:(id)copy {
  [super copyAllPropertiesTo:copy];
  OrgOssPdfreporterUsesNetSourceforgeJevalArgumentTokenizer *typedCopy = (OrgOssPdfreporterUsesNetSourceforgeJevalArgumentTokenizer *) copy;
  typedCopy.defaultDelimiter = defaultDelimiter_;
  typedCopy.arguments = arguments_;
  typedCopy.delimiter = delimiter_;
}

@end
