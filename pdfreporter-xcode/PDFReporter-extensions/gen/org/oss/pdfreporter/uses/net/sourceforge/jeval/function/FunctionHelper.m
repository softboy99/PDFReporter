//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: pdfreporter-extensions/src/org/oss/pdfreporter/uses/net/sourceforge/jeval/function/FunctionHelper.java
//
//  Created by kendra on 9/27/13.
//

#include "java/lang/Double.h"
#include "java/lang/Exception.h"
#include "java/lang/Integer.h"
#include "java/util/ArrayList.h"
#include "org/oss/pdfreporter/uses/net/sourceforge/jeval/ArgumentTokenizer.h"
#include "org/oss/pdfreporter/uses/net/sourceforge/jeval/function/FunctionException.h"
#include "org/oss/pdfreporter/uses/net/sourceforge/jeval/function/FunctionHelper.h"

@implementation OrgOssPdfreporterUsesNetSourceforgeJevalFunctionFunctionHelper

+ (NSString *)trimAndRemoveQuoteCharsWithNSString:(NSString *)arguments
                                      withUnichar:(unichar)quoteCharacter {
  NSString *trimmedArgument = arguments;
  trimmedArgument = [((NSString *) nil_chk(trimmedArgument)) trim];
  if ([((NSString *) nil_chk(trimmedArgument)) charAtWithInt:0] == quoteCharacter) {
    trimmedArgument = [((NSString *) nil_chk(trimmedArgument)) substring:1 endIndex:[((NSString *) nil_chk(trimmedArgument)) length]];
  }
  else {
    @throw [[OrgOssPdfreporterUsesNetSourceforgeJevalFunctionFunctionException alloc] initWithNSString:@"Value does not start with a quote."];
  }
  if ([((NSString *) nil_chk(trimmedArgument)) charAtWithInt:[((NSString *) nil_chk(trimmedArgument)) length] - 1] == quoteCharacter) {
    trimmedArgument = [((NSString *) nil_chk(trimmedArgument)) substring:0 endIndex:[((NSString *) nil_chk(trimmedArgument)) length] - 1];
  }
  else {
    @throw [[OrgOssPdfreporterUsesNetSourceforgeJevalFunctionFunctionException alloc] initWithNSString:@"Value does not end with a quote."];
  }
  return trimmedArgument;
}

+ (JavaUtilArrayList *)getDoublesWithNSString:(NSString *)arguments
                                  withUnichar:(unichar)delimiter {
  JavaUtilArrayList *returnValues = [[JavaUtilArrayList alloc] init];
  @try {
    OrgOssPdfreporterUsesNetSourceforgeJevalArgumentTokenizer *tokenizer = [[OrgOssPdfreporterUsesNetSourceforgeJevalArgumentTokenizer alloc] initWithNSString:arguments withUnichar:delimiter];
    while ([((OrgOssPdfreporterUsesNetSourceforgeJevalArgumentTokenizer *) nil_chk(tokenizer)) hasMoreTokens]) {
      NSString *token = [((NSString *) nil_chk([((OrgOssPdfreporterUsesNetSourceforgeJevalArgumentTokenizer *) nil_chk(tokenizer)) nextToken])) trim];
      [((JavaUtilArrayList *) nil_chk(returnValues)) addWithId:[[JavaLangDouble alloc] initWithNSString:token]];
    }
  }
  @catch (JavaLangException *e) {
    @throw [[OrgOssPdfreporterUsesNetSourceforgeJevalFunctionFunctionException alloc] initWithNSString:@"Invalid values in string." withJavaLangException:e];
  }
  return returnValues;
}

+ (JavaUtilArrayList *)getStringsWithNSString:(NSString *)arguments
                                  withUnichar:(unichar)delimiter {
  JavaUtilArrayList *returnValues = [[JavaUtilArrayList alloc] init];
  @try {
    OrgOssPdfreporterUsesNetSourceforgeJevalArgumentTokenizer *tokenizer = [[OrgOssPdfreporterUsesNetSourceforgeJevalArgumentTokenizer alloc] initWithNSString:arguments withUnichar:delimiter];
    while ([((OrgOssPdfreporterUsesNetSourceforgeJevalArgumentTokenizer *) nil_chk(tokenizer)) hasMoreTokens]) {
      NSString *token = [((OrgOssPdfreporterUsesNetSourceforgeJevalArgumentTokenizer *) nil_chk(tokenizer)) nextToken];
      [((JavaUtilArrayList *) nil_chk(returnValues)) addWithId:token];
    }
  }
  @catch (JavaLangException *e) {
    @throw [[OrgOssPdfreporterUsesNetSourceforgeJevalFunctionFunctionException alloc] initWithNSString:@"Invalid values in string." withJavaLangException:e];
  }
  return returnValues;
}

+ (JavaUtilArrayList *)getOneStringAndOneIntegerWithNSString:(NSString *)arguments
                                                 withUnichar:(unichar)delimiter {
  JavaUtilArrayList *returnValues = [[JavaUtilArrayList alloc] init];
  @try {
    OrgOssPdfreporterUsesNetSourceforgeJevalArgumentTokenizer *tokenizer = [[OrgOssPdfreporterUsesNetSourceforgeJevalArgumentTokenizer alloc] initWithNSString:arguments withUnichar:delimiter];
    int tokenCtr = 0;
    while ([((OrgOssPdfreporterUsesNetSourceforgeJevalArgumentTokenizer *) nil_chk(tokenizer)) hasMoreTokens]) {
      if (tokenCtr == 0) {
        NSString *token = [((OrgOssPdfreporterUsesNetSourceforgeJevalArgumentTokenizer *) nil_chk(tokenizer)) nextToken];
        [((JavaUtilArrayList *) nil_chk(returnValues)) addWithId:token];
      }
      else if (tokenCtr == 1) {
        NSString *token = [((NSString *) nil_chk([((OrgOssPdfreporterUsesNetSourceforgeJevalArgumentTokenizer *) nil_chk(tokenizer)) nextToken])) trim];
        [((JavaUtilArrayList *) nil_chk(returnValues)) addWithId:[[JavaLangInteger alloc] initWithInt:[((JavaLangDouble *) [[JavaLangDouble alloc] initWithNSString:token]) intValue]]];
      }
      else {
        @throw [[OrgOssPdfreporterUsesNetSourceforgeJevalFunctionFunctionException alloc] initWithNSString:@"Invalid values in string."];
      }
      tokenCtr++;
    }
  }
  @catch (JavaLangException *e) {
    @throw [[OrgOssPdfreporterUsesNetSourceforgeJevalFunctionFunctionException alloc] initWithNSString:@"Invalid values in string." withJavaLangException:e];
  }
  return returnValues;
}

+ (JavaUtilArrayList *)getTwoStringsAndOneIntegerWithNSString:(NSString *)arguments
                                                  withUnichar:(unichar)delimiter {
  JavaUtilArrayList *returnValues = [[JavaUtilArrayList alloc] init];
  @try {
    OrgOssPdfreporterUsesNetSourceforgeJevalArgumentTokenizer *tokenizer = [[OrgOssPdfreporterUsesNetSourceforgeJevalArgumentTokenizer alloc] initWithNSString:arguments withUnichar:delimiter];
    int tokenCtr = 0;
    while ([((OrgOssPdfreporterUsesNetSourceforgeJevalArgumentTokenizer *) nil_chk(tokenizer)) hasMoreTokens]) {
      if (tokenCtr == 0 || tokenCtr == 1) {
        NSString *token = [((OrgOssPdfreporterUsesNetSourceforgeJevalArgumentTokenizer *) nil_chk(tokenizer)) nextToken];
        [((JavaUtilArrayList *) nil_chk(returnValues)) addWithId:token];
      }
      else if (tokenCtr == 2) {
        NSString *token = [((NSString *) nil_chk([((OrgOssPdfreporterUsesNetSourceforgeJevalArgumentTokenizer *) nil_chk(tokenizer)) nextToken])) trim];
        [((JavaUtilArrayList *) nil_chk(returnValues)) addWithId:[[JavaLangInteger alloc] initWithInt:[((JavaLangDouble *) [[JavaLangDouble alloc] initWithNSString:token]) intValue]]];
      }
      else {
        @throw [[OrgOssPdfreporterUsesNetSourceforgeJevalFunctionFunctionException alloc] initWithNSString:@"Invalid values in string."];
      }
      tokenCtr++;
    }
  }
  @catch (JavaLangException *e) {
    @throw [[OrgOssPdfreporterUsesNetSourceforgeJevalFunctionFunctionException alloc] initWithNSString:@"Invalid values in string." withJavaLangException:e];
  }
  return returnValues;
}

+ (JavaUtilArrayList *)getOneStringAndTwoIntegersWithNSString:(NSString *)arguments
                                                  withUnichar:(unichar)delimiter {
  JavaUtilArrayList *returnValues = [[JavaUtilArrayList alloc] init];
  @try {
    OrgOssPdfreporterUsesNetSourceforgeJevalArgumentTokenizer *tokenizer = [[OrgOssPdfreporterUsesNetSourceforgeJevalArgumentTokenizer alloc] initWithNSString:arguments withUnichar:delimiter];
    int tokenCtr = 0;
    while ([((OrgOssPdfreporterUsesNetSourceforgeJevalArgumentTokenizer *) nil_chk(tokenizer)) hasMoreTokens]) {
      if (tokenCtr == 0) {
        NSString *token = [((NSString *) nil_chk([((OrgOssPdfreporterUsesNetSourceforgeJevalArgumentTokenizer *) nil_chk(tokenizer)) nextToken])) trim];
        [((JavaUtilArrayList *) nil_chk(returnValues)) addWithId:token];
      }
      else if (tokenCtr == 1 || tokenCtr == 2) {
        NSString *token = [((NSString *) nil_chk([((OrgOssPdfreporterUsesNetSourceforgeJevalArgumentTokenizer *) nil_chk(tokenizer)) nextToken])) trim];
        [((JavaUtilArrayList *) nil_chk(returnValues)) addWithId:[[JavaLangInteger alloc] initWithInt:[((JavaLangDouble *) [[JavaLangDouble alloc] initWithNSString:token]) intValue]]];
      }
      else {
        @throw [[OrgOssPdfreporterUsesNetSourceforgeJevalFunctionFunctionException alloc] initWithNSString:@"Invalid values in string."];
      }
      tokenCtr++;
    }
  }
  @catch (JavaLangException *e) {
    @throw [[OrgOssPdfreporterUsesNetSourceforgeJevalFunctionFunctionException alloc] initWithNSString:@"Invalid values in string." withJavaLangException:e];
  }
  return returnValues;
}

- (id)init {
  return [super init];
}

@end
