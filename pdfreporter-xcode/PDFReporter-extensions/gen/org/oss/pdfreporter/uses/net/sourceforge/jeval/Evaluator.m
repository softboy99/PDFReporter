//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: pdfreporter-extensions/src/org/oss/pdfreporter/uses/net/sourceforge/jeval/Evaluator.java
//
//  Created by kendra on 9/27/13.
//

#include "IOSClass.h"
#include "java/lang/Double.h"
#include "java/lang/Exception.h"
#include "java/lang/IllegalArgumentException.h"
#include "java/lang/Math.h"
#include "java/lang/NumberFormatException.h"
#include "java/lang/StringBuffer.h"
#include "java/util/ArrayList.h"
#include "java/util/HashMap.h"
#include "java/util/Iterator.h"
#include "java/util/List.h"
#include "java/util/Map.h"
#include "org/oss/pdfreporter/uses/java/util/Stack.h"
#include "org/oss/pdfreporter/uses/net/sourceforge/jeval/ArgumentTokenizer.h"
#include "org/oss/pdfreporter/uses/net/sourceforge/jeval/EvaluationConstants.h"
#include "org/oss/pdfreporter/uses/net/sourceforge/jeval/EvaluationException.h"
#include "org/oss/pdfreporter/uses/net/sourceforge/jeval/EvaluationHelper.h"
#include "org/oss/pdfreporter/uses/net/sourceforge/jeval/Evaluator.h"
#include "org/oss/pdfreporter/uses/net/sourceforge/jeval/ExpressionOperand.h"
#include "org/oss/pdfreporter/uses/net/sourceforge/jeval/ExpressionOperator.h"
#include "org/oss/pdfreporter/uses/net/sourceforge/jeval/ExpressionTree.h"
#include "org/oss/pdfreporter/uses/net/sourceforge/jeval/NextOperator.h"
#include "org/oss/pdfreporter/uses/net/sourceforge/jeval/ParsedFunction.h"
#include "org/oss/pdfreporter/uses/net/sourceforge/jeval/VariableResolver.h"
#include "org/oss/pdfreporter/uses/net/sourceforge/jeval/function/Function.h"
#include "org/oss/pdfreporter/uses/net/sourceforge/jeval/function/FunctionConstants.h"
#include "org/oss/pdfreporter/uses/net/sourceforge/jeval/function/FunctionException.h"
#include "org/oss/pdfreporter/uses/net/sourceforge/jeval/function/FunctionGroup.h"
#include "org/oss/pdfreporter/uses/net/sourceforge/jeval/function/FunctionResult.h"
#include "org/oss/pdfreporter/uses/net/sourceforge/jeval/function/math/MathFunctions.h"
#include "org/oss/pdfreporter/uses/net/sourceforge/jeval/function/string/StringFunctions.h"
#include "org/oss/pdfreporter/uses/net/sourceforge/jeval/operator/AdditionOperator.h"
#include "org/oss/pdfreporter/uses/net/sourceforge/jeval/operator/BooleanAndOperator.h"
#include "org/oss/pdfreporter/uses/net/sourceforge/jeval/operator/BooleanNotOperator.h"
#include "org/oss/pdfreporter/uses/net/sourceforge/jeval/operator/BooleanOrOperator.h"
#include "org/oss/pdfreporter/uses/net/sourceforge/jeval/operator/ClosedParenthesesOperator.h"
#include "org/oss/pdfreporter/uses/net/sourceforge/jeval/operator/DivisionOperator.h"
#include "org/oss/pdfreporter/uses/net/sourceforge/jeval/operator/EqualOperator.h"
#include "org/oss/pdfreporter/uses/net/sourceforge/jeval/operator/GreaterThanOperator.h"
#include "org/oss/pdfreporter/uses/net/sourceforge/jeval/operator/GreaterThanOrEqualOperator.h"
#include "org/oss/pdfreporter/uses/net/sourceforge/jeval/operator/LessThanOperator.h"
#include "org/oss/pdfreporter/uses/net/sourceforge/jeval/operator/LessThanOrEqualOperator.h"
#include "org/oss/pdfreporter/uses/net/sourceforge/jeval/operator/ModulusOperator.h"
#include "org/oss/pdfreporter/uses/net/sourceforge/jeval/operator/MultiplicationOperator.h"
#include "org/oss/pdfreporter/uses/net/sourceforge/jeval/operator/NotEqualOperator.h"
#include "org/oss/pdfreporter/uses/net/sourceforge/jeval/operator/OpenParenthesesOperator.h"
#include "org/oss/pdfreporter/uses/net/sourceforge/jeval/operator/Operator.h"
#include "org/oss/pdfreporter/uses/net/sourceforge/jeval/operator/SubtractionOperator.h"

@implementation OrgOssPdfreporterUsesNetSourceforgeJevalEvaluator

@synthesize operators = operators_;
@synthesize functions = functions_;
@synthesize variables = variables_;
@synthesize quoteCharacter = quoteCharacter_;
@synthesize openParenthesesOperator = openParenthesesOperator_;
@synthesize closedParenthesesOperator = closedParenthesesOperator_;
@synthesize loadMathVariables = loadMathVariables_;
@synthesize loadMathFunctions = loadMathFunctions_;
@synthesize loadStringFunctions = loadStringFunctions_;
@synthesize processNestedFunctions_ = processNestedFunctions__;
@synthesize previousExpression = previousExpression_;
@synthesize previousOperatorStack = previousOperatorStack_;
@synthesize previousOperandStack = previousOperandStack_;
@synthesize operatorStack = operatorStack_;
@synthesize operandStack = operandStack_;
@synthesize variableResolver = variableResolver_;

- (id)init {
  return [self initOrgOssPdfreporterUsesNetSourceforgeJevalEvaluatorWithUnichar:OrgOssPdfreporterUsesNetSourceforgeJevalEvaluationConstants_SINGLE_QUOTE withBOOL:YES withBOOL:YES withBOOL:YES withBOOL:YES];
}

- (id)initOrgOssPdfreporterUsesNetSourceforgeJevalEvaluatorWithUnichar:(unichar)quoteCharacter
                                                              withBOOL:(BOOL)loadMathVariables
                                                              withBOOL:(BOOL)loadMathFunctions
                                                              withBOOL:(BOOL)loadStringFunctions
                                                              withBOOL:(BOOL)processNestedFunctions {
  if ((self = [super init])) {
    operators_ = [[JavaUtilArrayList alloc] init];
    functions_ = [[JavaUtilHashMap alloc] init];
    variables_ = [[JavaUtilHashMap alloc] init];
    quoteCharacter_ = OrgOssPdfreporterUsesNetSourceforgeJevalEvaluationConstants_SINGLE_QUOTE;
    openParenthesesOperator_ = [[OrgOssPdfreporterUsesNetSourceforgeJevalOperatorOpenParenthesesOperator alloc] init];
    closedParenthesesOperator_ = [[OrgOssPdfreporterUsesNetSourceforgeJevalOperatorClosedParenthesesOperator alloc] init];
    previousExpression_ = nil;
    previousOperatorStack_ = nil;
    previousOperandStack_ = nil;
    operatorStack_ = nil;
    operandStack_ = nil;
    variableResolver_ = nil;
    [self installOperators];
    self.loadMathVariables = loadMathVariables;
    [self loadSystemVariables];
    self.loadMathFunctions = loadMathFunctions;
    self.loadStringFunctions = loadStringFunctions;
    [self loadSystemFunctions];
    [self setQuoteCharacterWithUnichar:quoteCharacter];
    self.processNestedFunctions_ = processNestedFunctions;
  }
  return self;
}

- (id)initWithUnichar:(unichar)quoteCharacter
             withBOOL:(BOOL)loadMathVariables
             withBOOL:(BOOL)loadMathFunctions
             withBOOL:(BOOL)loadStringFunctions
             withBOOL:(BOOL)processNestedFunctions {
  return [self initOrgOssPdfreporterUsesNetSourceforgeJevalEvaluatorWithUnichar:quoteCharacter withBOOL:loadMathVariables withBOOL:loadMathFunctions withBOOL:loadStringFunctions withBOOL:processNestedFunctions];
}

- (unichar)getQuoteCharacter {
  return quoteCharacter_;
}

- (void)setQuoteCharacterWithUnichar:(unichar)quoteCharacter {
  if (quoteCharacter == OrgOssPdfreporterUsesNetSourceforgeJevalEvaluationConstants_SINGLE_QUOTE || quoteCharacter == OrgOssPdfreporterUsesNetSourceforgeJevalEvaluationConstants_DOUBLE_QUOTE) {
    self.quoteCharacter = quoteCharacter;
  }
  else {
    @throw [[JavaLangIllegalArgumentException alloc] initWithNSString:@"Invalid quote character."];
  }
}

- (void)putFunctionWithOrgOssPdfreporterUsesNetSourceforgeJevalFunctionFunction:(id<OrgOssPdfreporterUsesNetSourceforgeJevalFunctionFunction>)function {
  [self isValidNameWithNSString:[((id<OrgOssPdfreporterUsesNetSourceforgeJevalFunctionFunction>) nil_chk(function)) getName]];
  id<OrgOssPdfreporterUsesNetSourceforgeJevalFunctionFunction> existingFunction = (id<OrgOssPdfreporterUsesNetSourceforgeJevalFunctionFunction>) [((id<JavaUtilMap>) nil_chk(functions_)) getWithId:[((id<OrgOssPdfreporterUsesNetSourceforgeJevalFunctionFunction>) nil_chk(function)) getName]];
  if (existingFunction == nil) {
    (void) [((id<JavaUtilMap>) nil_chk(functions_)) putWithId:[((id<OrgOssPdfreporterUsesNetSourceforgeJevalFunctionFunction>) nil_chk(function)) getName] withId:function];
  }
  else {
    @throw [[JavaLangIllegalArgumentException alloc] initWithNSString:@"A function with the same name already exists."];
  }
}

- (id<OrgOssPdfreporterUsesNetSourceforgeJevalFunctionFunction>)getFunctionWithNSString:(NSString *)functionName {
  return (id<OrgOssPdfreporterUsesNetSourceforgeJevalFunctionFunction>) [((id<JavaUtilMap>) nil_chk(functions_)) getWithId:functionName];
}

- (void)removeFunctionWithNSString:(NSString *)functionName {
  if ([((id<JavaUtilMap>) nil_chk(functions_)) containsKeyWithId:functionName]) {
    (void) [((id<JavaUtilMap>) nil_chk(functions_)) removeWithId:functionName];
  }
  else {
    @throw [[JavaLangIllegalArgumentException alloc] initWithNSString:@"The function does not exist."];
  }
}

- (void)clearFunctions {
  [((id<JavaUtilMap>) nil_chk(functions_)) clear];
  [self loadSystemFunctions];
}

- (id<JavaUtilMap>)getFunctions {
  return functions_;
}

- (void)setFunctionsWithJavaUtilMap:(id<JavaUtilMap>)functions {
  self.functions = functions;
}

- (void)putVariableWithNSString:(NSString *)variableName
                   withNSString:(NSString *)variableValue {
  [self isValidNameWithNSString:variableName];
  (void) [((id<JavaUtilMap>) nil_chk(variables_)) putWithId:variableName withId:variableValue];
}

- (NSString *)getVariableValueWithNSString:(NSString *)variableName {
  NSString *variableValue = nil;
  if (variableResolver_ != nil) {
    @try {
      variableValue = [variableResolver_ resolveVariableWithNSString:variableName];
    }
    @catch (OrgOssPdfreporterUsesNetSourceforgeJevalFunctionFunctionException *fe) {
      @throw [[OrgOssPdfreporterUsesNetSourceforgeJevalEvaluationException alloc] initWithNSString:[((OrgOssPdfreporterUsesNetSourceforgeJevalFunctionFunctionException *) nil_chk(fe)) getMessage] withJavaLangException:fe];
    }
  }
  if (variableValue == nil) {
    variableValue = (NSString *) [((id<JavaUtilMap>) nil_chk(variables_)) getWithId:variableName];
  }
  if (variableValue == nil) {
    @throw [[OrgOssPdfreporterUsesNetSourceforgeJevalEvaluationException alloc] initWithNSString:[NSString stringWithFormat:@"Can not resolve variable with name equal to \"%@\".", variableName]];
  }
  return variableValue;
}

- (void)removeVaraibleWithNSString:(NSString *)variableName {
  if ([((id<JavaUtilMap>) nil_chk(variables_)) containsKeyWithId:variableName]) {
    (void) [((id<JavaUtilMap>) nil_chk(variables_)) removeWithId:variableName];
  }
  else {
    @throw [[JavaLangIllegalArgumentException alloc] initWithNSString:@"The variable does not exist."];
  }
}

- (void)clearVariables {
  [((id<JavaUtilMap>) nil_chk(variables_)) clear];
  [self loadSystemVariables];
}

- (id<JavaUtilMap>)getVariables {
  return variables_;
}

- (void)setVariablesWithJavaUtilMap:(id<JavaUtilMap>)variables {
  self.variables = variables;
}

- (id<OrgOssPdfreporterUsesNetSourceforgeJevalVariableResolver>)getVariableResolver {
  return variableResolver_;
}

- (void)setVariableResolverWithOrgOssPdfreporterUsesNetSourceforgeJevalVariableResolver:(id<OrgOssPdfreporterUsesNetSourceforgeJevalVariableResolver>)variableResolver {
  self.variableResolver = variableResolver;
}

- (NSString *)evaluateWithNSString:(NSString *)expression {
  return [self evaluateWithNSString:expression withBOOL:YES withBOOL:YES];
}

- (NSString *)evaluate {
  NSString *expression = previousExpression_;
  if (expression == nil || [((NSString *) nil_chk(expression)) length] == 0) {
    @throw [[OrgOssPdfreporterUsesNetSourceforgeJevalEvaluationException alloc] initWithNSString:@"No expression has been specified."];
  }
  return [self evaluateWithNSString:expression withBOOL:YES withBOOL:YES];
}

- (NSString *)evaluateWithNSString:(NSString *)expression
                          withBOOL:(BOOL)keepQuotes
                          withBOOL:(BOOL)wrapStringFunctionResults {
  [self parseWithNSString:expression];
  NSString *result = [self getResultWithOrgOssPdfreporterUsesJavaUtilStack:operatorStack_ withOrgOssPdfreporterUsesJavaUtilStack:operandStack_ withBOOL:wrapStringFunctionResults];
  if ([self isExpressionStringWithNSString:result] && !keepQuotes) {
    result = [((NSString *) nil_chk(result)) substring:1 endIndex:[((NSString *) nil_chk(result)) length] - 1];
  }
  return result;
}

- (NSString *)evaluateWithBOOL:(BOOL)keepQuotes
                      withBOOL:(BOOL)wrapStringFunctionResults {
  NSString *expression = previousExpression_;
  if (expression == nil || [((NSString *) nil_chk(expression)) length] == 0) {
    @throw [[OrgOssPdfreporterUsesNetSourceforgeJevalEvaluationException alloc] initWithNSString:@"No expression has been specified."];
  }
  return [self evaluateWithNSString:expression withBOOL:keepQuotes withBOOL:wrapStringFunctionResults];
}

- (BOOL)getBooleanResultWithNSString:(NSString *)expression {
  NSString *result = [self evaluateWithNSString:expression];
  @try {
    JavaLangDouble *doubleResult = [[JavaLangDouble alloc] initWithNSString:result];
    if ([((JavaLangDouble *) nil_chk(doubleResult)) doubleValue] == 1.0) {
      return YES;
    }
  }
  @catch (JavaLangNumberFormatException *exception) {
    return NO;
  }
  return NO;
}

- (double)getNumberResultWithNSString:(NSString *)expression {
  NSString *result = [self evaluateWithNSString:expression];
  JavaLangDouble *doubleResult = nil;
  @try {
    doubleResult = [[JavaLangDouble alloc] initWithNSString:result];
  }
  @catch (JavaLangNumberFormatException *nfe) {
    @throw [[OrgOssPdfreporterUsesNetSourceforgeJevalEvaluationException alloc] initWithNSString:@"Expression does not produce a number." withJavaLangException:nfe];
  }
  return [((JavaLangDouble *) nil_chk(doubleResult)) doubleValue];
}

- (void)parseWithNSString:(NSString *)expression {
  BOOL parse = YES;
  if (![((NSString *) nil_chk(expression)) isEqual:previousExpression_]) {
    previousExpression_ = expression;
  }
  else {
    parse = NO;
    operatorStack_ = (OrgOssPdfreporterUsesJavaUtilStack *) [((OrgOssPdfreporterUsesJavaUtilStack *) nil_chk(previousOperatorStack_)) clone];
    operandStack_ = (OrgOssPdfreporterUsesJavaUtilStack *) [((OrgOssPdfreporterUsesJavaUtilStack *) nil_chk(previousOperandStack_)) clone];
  }
  @try {
    if (parse) {
      operandStack_ = [[OrgOssPdfreporterUsesJavaUtilStack alloc] init];
      operatorStack_ = [[OrgOssPdfreporterUsesJavaUtilStack alloc] init];
      BOOL haveOperand = NO;
      BOOL haveOperator = NO;
      id<OrgOssPdfreporterUsesNetSourceforgeJevalOperatorOperator> unaryOperator = nil;
      int numChars = [((NSString *) nil_chk(expression)) length];
      int charCtr = 0;
      while (charCtr < numChars) {
        id<OrgOssPdfreporterUsesNetSourceforgeJevalOperatorOperator> operator_ = nil;
        int operatorIndex = -1;
        if ([OrgOssPdfreporterUsesNetSourceforgeJevalEvaluationHelper isSpaceWithUnichar:[((NSString *) nil_chk(expression)) charAtWithInt:charCtr]]) {
          charCtr++;
          continue;
        }
        OrgOssPdfreporterUsesNetSourceforgeJevalNextOperator *nextOperator = [self getNextOperatorWithNSString:expression withInt:charCtr withOrgOssPdfreporterUsesNetSourceforgeJevalOperatorOperator:nil];
        if (nextOperator != nil) {
          operator_ = [nextOperator getOperator];
          operatorIndex = [nextOperator getIndex];
        }
        if (operatorIndex > charCtr || operatorIndex == -1) {
          charCtr = [self processOperandWithNSString:expression withInt:charCtr withInt:operatorIndex withOrgOssPdfreporterUsesJavaUtilStack:operandStack_ withOrgOssPdfreporterUsesNetSourceforgeJevalOperatorOperator:unaryOperator];
          haveOperand = YES;
          haveOperator = NO;
          unaryOperator = nil;
        }
        if (operatorIndex == charCtr) {
          if ([((id<OrgOssPdfreporterUsesNetSourceforgeJevalOperatorOperator>) nil_chk([((OrgOssPdfreporterUsesNetSourceforgeJevalNextOperator *) nil_chk(nextOperator)) getOperator])) isUnary] && (haveOperator || charCtr == 0)) {
            charCtr = [self processUnaryOperatorWithInt:operatorIndex withOrgOssPdfreporterUsesNetSourceforgeJevalOperatorOperator:[((OrgOssPdfreporterUsesNetSourceforgeJevalNextOperator *) nil_chk(nextOperator)) getOperator]];
            if (unaryOperator == nil) {
              unaryOperator = [((OrgOssPdfreporterUsesNetSourceforgeJevalNextOperator *) nil_chk(nextOperator)) getOperator];
            }
            else {
              @throw [[OrgOssPdfreporterUsesNetSourceforgeJevalEvaluationException alloc] initWithNSString:[NSString stringWithFormat:@"%@%d).", @"Consecutive unary operators are not allowed (index=", charCtr]];
            }
          }
          else {
            charCtr = [self processOperatorWithNSString:expression withInt:operatorIndex withOrgOssPdfreporterUsesNetSourceforgeJevalOperatorOperator:operator_ withOrgOssPdfreporterUsesJavaUtilStack:operatorStack_ withOrgOssPdfreporterUsesJavaUtilStack:operandStack_ withBOOL:haveOperand withOrgOssPdfreporterUsesNetSourceforgeJevalOperatorOperator:unaryOperator];
            unaryOperator = nil;
          }
          if (!([(id) [((OrgOssPdfreporterUsesNetSourceforgeJevalNextOperator *) nil_chk(nextOperator)) getOperator] isKindOfClass:[OrgOssPdfreporterUsesNetSourceforgeJevalOperatorClosedParenthesesOperator class]])) {
            haveOperand = NO;
            haveOperator = YES;
          }
        }
      }
      previousOperatorStack_ = (OrgOssPdfreporterUsesJavaUtilStack *) [((OrgOssPdfreporterUsesJavaUtilStack *) nil_chk(operatorStack_)) clone];
      previousOperandStack_ = (OrgOssPdfreporterUsesJavaUtilStack *) [((OrgOssPdfreporterUsesJavaUtilStack *) nil_chk(operandStack_)) clone];
    }
  }
  @catch (JavaLangException *e) {
    previousExpression_ = @"";
    @throw [[OrgOssPdfreporterUsesNetSourceforgeJevalEvaluationException alloc] initWithNSString:[((JavaLangException *) nil_chk(e)) getMessage] withJavaLangException:e];
  }
}

- (void)installOperators {
  [((id<JavaUtilList>) nil_chk(operators_)) addWithId:openParenthesesOperator_];
  [((id<JavaUtilList>) nil_chk(operators_)) addWithId:closedParenthesesOperator_];
  [((id<JavaUtilList>) nil_chk(operators_)) addWithId:[[OrgOssPdfreporterUsesNetSourceforgeJevalOperatorAdditionOperator alloc] init]];
  [((id<JavaUtilList>) nil_chk(operators_)) addWithId:[[OrgOssPdfreporterUsesNetSourceforgeJevalOperatorSubtractionOperator alloc] init]];
  [((id<JavaUtilList>) nil_chk(operators_)) addWithId:[[OrgOssPdfreporterUsesNetSourceforgeJevalOperatorMultiplicationOperator alloc] init]];
  [((id<JavaUtilList>) nil_chk(operators_)) addWithId:[[OrgOssPdfreporterUsesNetSourceforgeJevalOperatorDivisionOperator alloc] init]];
  [((id<JavaUtilList>) nil_chk(operators_)) addWithId:[[OrgOssPdfreporterUsesNetSourceforgeJevalOperatorEqualOperator alloc] init]];
  [((id<JavaUtilList>) nil_chk(operators_)) addWithId:[[OrgOssPdfreporterUsesNetSourceforgeJevalOperatorNotEqualOperator alloc] init]];
  [((id<JavaUtilList>) nil_chk(operators_)) addWithId:[[OrgOssPdfreporterUsesNetSourceforgeJevalOperatorLessThanOrEqualOperator alloc] init]];
  [((id<JavaUtilList>) nil_chk(operators_)) addWithId:[[OrgOssPdfreporterUsesNetSourceforgeJevalOperatorLessThanOperator alloc] init]];
  [((id<JavaUtilList>) nil_chk(operators_)) addWithId:[[OrgOssPdfreporterUsesNetSourceforgeJevalOperatorGreaterThanOrEqualOperator alloc] init]];
  [((id<JavaUtilList>) nil_chk(operators_)) addWithId:[[OrgOssPdfreporterUsesNetSourceforgeJevalOperatorGreaterThanOperator alloc] init]];
  [((id<JavaUtilList>) nil_chk(operators_)) addWithId:[[OrgOssPdfreporterUsesNetSourceforgeJevalOperatorBooleanAndOperator alloc] init]];
  [((id<JavaUtilList>) nil_chk(operators_)) addWithId:[[OrgOssPdfreporterUsesNetSourceforgeJevalOperatorBooleanOrOperator alloc] init]];
  [((id<JavaUtilList>) nil_chk(operators_)) addWithId:[[OrgOssPdfreporterUsesNetSourceforgeJevalOperatorBooleanNotOperator alloc] init]];
  [((id<JavaUtilList>) nil_chk(operators_)) addWithId:[[OrgOssPdfreporterUsesNetSourceforgeJevalOperatorModulusOperator alloc] init]];
}

- (int)processOperandWithNSString:(NSString *)expression
                          withInt:(int)charCtr
                          withInt:(int)operatorIndex
withOrgOssPdfreporterUsesJavaUtilStack:(OrgOssPdfreporterUsesJavaUtilStack *)operandStack
withOrgOssPdfreporterUsesNetSourceforgeJevalOperatorOperator:(id<OrgOssPdfreporterUsesNetSourceforgeJevalOperatorOperator>)unaryOperator {
  NSString *operandString = nil;
  int rtnCtr = -1;
  if (operatorIndex == -1) {
    operandString = [((NSString *) nil_chk([((NSString *) nil_chk(expression)) substring:charCtr])) trim];
    rtnCtr = [((NSString *) nil_chk(expression)) length];
  }
  else {
    operandString = [((NSString *) nil_chk([((NSString *) nil_chk(expression)) substring:charCtr endIndex:operatorIndex])) trim];
    rtnCtr = operatorIndex;
  }
  if ([((NSString *) nil_chk(operandString)) length] == 0) {
    @throw [[OrgOssPdfreporterUsesNetSourceforgeJevalEvaluationException alloc] initWithNSString:@"Expression is invalid."];
  }
  OrgOssPdfreporterUsesNetSourceforgeJevalExpressionOperand *operand = [[OrgOssPdfreporterUsesNetSourceforgeJevalExpressionOperand alloc] initWithNSString:operandString withOrgOssPdfreporterUsesNetSourceforgeJevalOperatorOperator:unaryOperator];
  (void) [((OrgOssPdfreporterUsesJavaUtilStack *) nil_chk(operandStack)) pushWithId:operand];
  return rtnCtr;
}

- (int)processOperatorWithNSString:(NSString *)expression
                           withInt:(int)originalOperatorIndex
withOrgOssPdfreporterUsesNetSourceforgeJevalOperatorOperator:(id<OrgOssPdfreporterUsesNetSourceforgeJevalOperatorOperator>)originalOperator
withOrgOssPdfreporterUsesJavaUtilStack:(OrgOssPdfreporterUsesJavaUtilStack *)operatorStack
withOrgOssPdfreporterUsesJavaUtilStack:(OrgOssPdfreporterUsesJavaUtilStack *)operandStack
                          withBOOL:(BOOL)haveOperand
withOrgOssPdfreporterUsesNetSourceforgeJevalOperatorOperator:(id<OrgOssPdfreporterUsesNetSourceforgeJevalOperatorOperator>)unaryOperator {
  int operatorIndex = originalOperatorIndex;
  id<OrgOssPdfreporterUsesNetSourceforgeJevalOperatorOperator> operator_ = originalOperator;
  if (haveOperand && [(id) operator_ isKindOfClass:[OrgOssPdfreporterUsesNetSourceforgeJevalOperatorOpenParenthesesOperator class]]) {
    OrgOssPdfreporterUsesNetSourceforgeJevalNextOperator *nextOperator = [self processFunctionWithNSString:expression withInt:operatorIndex withOrgOssPdfreporterUsesJavaUtilStack:operandStack];
    operator_ = [((OrgOssPdfreporterUsesNetSourceforgeJevalNextOperator *) nil_chk(nextOperator)) getOperator];
    operatorIndex = [((OrgOssPdfreporterUsesNetSourceforgeJevalNextOperator *) nil_chk(nextOperator)) getIndex] + [((id<OrgOssPdfreporterUsesNetSourceforgeJevalOperatorOperator>) nil_chk(operator_)) getLength];
    nextOperator = [self getNextOperatorWithNSString:expression withInt:operatorIndex withOrgOssPdfreporterUsesNetSourceforgeJevalOperatorOperator:nil];
    if (nextOperator != nil) {
      operator_ = [nextOperator getOperator];
      operatorIndex = [nextOperator getIndex];
    }
    else {
      return operatorIndex;
    }
  }
  if ([(id) operator_ isKindOfClass:[OrgOssPdfreporterUsesNetSourceforgeJevalOperatorOpenParenthesesOperator class]]) {
    OrgOssPdfreporterUsesNetSourceforgeJevalExpressionOperator *expressionOperator = [[OrgOssPdfreporterUsesNetSourceforgeJevalExpressionOperator alloc] initWithOrgOssPdfreporterUsesNetSourceforgeJevalOperatorOperator:operator_ withOrgOssPdfreporterUsesNetSourceforgeJevalOperatorOperator:unaryOperator];
    (void) [((OrgOssPdfreporterUsesJavaUtilStack *) nil_chk(operatorStack)) pushWithId:expressionOperator];
  }
  else if ([(id) operator_ isKindOfClass:[OrgOssPdfreporterUsesNetSourceforgeJevalOperatorClosedParenthesesOperator class]]) {
    OrgOssPdfreporterUsesNetSourceforgeJevalExpressionOperator *stackOperator = nil;
    if ([((OrgOssPdfreporterUsesJavaUtilStack *) nil_chk(operatorStack)) size] > 0) {
      stackOperator = (OrgOssPdfreporterUsesNetSourceforgeJevalExpressionOperator *) [((OrgOssPdfreporterUsesJavaUtilStack *) nil_chk(operatorStack)) peek];
    }
    while (stackOperator != nil && !([(id) [((OrgOssPdfreporterUsesNetSourceforgeJevalExpressionOperator *) nil_chk(stackOperator)) getOperator] isKindOfClass:[OrgOssPdfreporterUsesNetSourceforgeJevalOperatorOpenParenthesesOperator class]])) {
      [self processTreeWithOrgOssPdfreporterUsesJavaUtilStack:operandStack withOrgOssPdfreporterUsesJavaUtilStack:operatorStack];
      if ([((OrgOssPdfreporterUsesJavaUtilStack *) nil_chk(operatorStack)) size] > 0) {
        stackOperator = (OrgOssPdfreporterUsesNetSourceforgeJevalExpressionOperator *) [((OrgOssPdfreporterUsesJavaUtilStack *) nil_chk(operatorStack)) peek];
      }
      else {
        stackOperator = nil;
      }
    }
    if ([((OrgOssPdfreporterUsesJavaUtilStack *) nil_chk(operatorStack)) isEmpty]) {
      @throw [[OrgOssPdfreporterUsesNetSourceforgeJevalEvaluationException alloc] initWithNSString:@"Expression is invalid."];
    }
    OrgOssPdfreporterUsesNetSourceforgeJevalExpressionOperator *expressionOperator = (OrgOssPdfreporterUsesNetSourceforgeJevalExpressionOperator *) [((OrgOssPdfreporterUsesJavaUtilStack *) nil_chk(operatorStack)) pop];
    if (!([(id) [((OrgOssPdfreporterUsesNetSourceforgeJevalExpressionOperator *) nil_chk(expressionOperator)) getOperator] isKindOfClass:[OrgOssPdfreporterUsesNetSourceforgeJevalOperatorOpenParenthesesOperator class]])) {
      @throw [[OrgOssPdfreporterUsesNetSourceforgeJevalEvaluationException alloc] initWithNSString:@"Expression is invalid."];
    }
    if ([((OrgOssPdfreporterUsesNetSourceforgeJevalExpressionOperator *) nil_chk(expressionOperator)) getUnaryOperator] != nil) {
      id operand = [((OrgOssPdfreporterUsesJavaUtilStack *) nil_chk(operandStack)) pop];
      OrgOssPdfreporterUsesNetSourceforgeJevalExpressionTree *tree = [[OrgOssPdfreporterUsesNetSourceforgeJevalExpressionTree alloc] initWithOrgOssPdfreporterUsesNetSourceforgeJevalEvaluator:self withId:operand withId:nil withOrgOssPdfreporterUsesNetSourceforgeJevalOperatorOperator:nil withOrgOssPdfreporterUsesNetSourceforgeJevalOperatorOperator:[((OrgOssPdfreporterUsesNetSourceforgeJevalExpressionOperator *) nil_chk(expressionOperator)) getUnaryOperator]];
      (void) [((OrgOssPdfreporterUsesJavaUtilStack *) nil_chk(operandStack)) pushWithId:tree];
    }
  }
  else {
    if ([((OrgOssPdfreporterUsesJavaUtilStack *) nil_chk(operatorStack)) size] > 0) {
      OrgOssPdfreporterUsesNetSourceforgeJevalExpressionOperator *stackOperator = (OrgOssPdfreporterUsesNetSourceforgeJevalExpressionOperator *) [((OrgOssPdfreporterUsesJavaUtilStack *) nil_chk(operatorStack)) peek];
      while (stackOperator != nil && [((id<OrgOssPdfreporterUsesNetSourceforgeJevalOperatorOperator>) nil_chk([((OrgOssPdfreporterUsesNetSourceforgeJevalExpressionOperator *) nil_chk(stackOperator)) getOperator])) getPrecedence] >= [((id<OrgOssPdfreporterUsesNetSourceforgeJevalOperatorOperator>) nil_chk(operator_)) getPrecedence]) {
        [self processTreeWithOrgOssPdfreporterUsesJavaUtilStack:operandStack withOrgOssPdfreporterUsesJavaUtilStack:operatorStack];
        if ([((OrgOssPdfreporterUsesJavaUtilStack *) nil_chk(operatorStack)) size] > 0) {
          stackOperator = (OrgOssPdfreporterUsesNetSourceforgeJevalExpressionOperator *) [((OrgOssPdfreporterUsesJavaUtilStack *) nil_chk(operatorStack)) peek];
        }
        else {
          stackOperator = nil;
        }
      }
    }
    OrgOssPdfreporterUsesNetSourceforgeJevalExpressionOperator *expressionOperator = [[OrgOssPdfreporterUsesNetSourceforgeJevalExpressionOperator alloc] initWithOrgOssPdfreporterUsesNetSourceforgeJevalOperatorOperator:operator_ withOrgOssPdfreporterUsesNetSourceforgeJevalOperatorOperator:unaryOperator];
    (void) [((OrgOssPdfreporterUsesJavaUtilStack *) nil_chk(operatorStack)) pushWithId:expressionOperator];
  }
  int rtnCtr = operatorIndex + [((id<OrgOssPdfreporterUsesNetSourceforgeJevalOperatorOperator>) nil_chk(operator_)) getLength];
  return rtnCtr;
}

- (int)processUnaryOperatorWithInt:(int)operatorIndex
withOrgOssPdfreporterUsesNetSourceforgeJevalOperatorOperator:(id<OrgOssPdfreporterUsesNetSourceforgeJevalOperatorOperator>)operator_ {
  int rtnCtr = operatorIndex + [((NSString *) nil_chk([((id<OrgOssPdfreporterUsesNetSourceforgeJevalOperatorOperator>) nil_chk(operator_)) getSymbol])) length];
  return rtnCtr;
}

- (OrgOssPdfreporterUsesNetSourceforgeJevalNextOperator *)processFunctionWithNSString:(NSString *)expression
                                                                              withInt:(int)operatorIndex
                                               withOrgOssPdfreporterUsesJavaUtilStack:(OrgOssPdfreporterUsesJavaUtilStack *)operandStack {
  int parenthesisCount = 1;
  OrgOssPdfreporterUsesNetSourceforgeJevalNextOperator *nextOperator = nil;
  int nextOperatorIndex = operatorIndex;
  while (parenthesisCount > 0) {
    nextOperator = [self getNextOperatorWithNSString:expression withInt:nextOperatorIndex + 1 withOrgOssPdfreporterUsesNetSourceforgeJevalOperatorOperator:nil];
    if (nextOperator == nil) {
      @throw [[OrgOssPdfreporterUsesNetSourceforgeJevalEvaluationException alloc] initWithNSString:@"Function is not closed."];
    }
    else if ([(id) [nextOperator getOperator] isKindOfClass:[OrgOssPdfreporterUsesNetSourceforgeJevalOperatorOpenParenthesesOperator class]]) {
      parenthesisCount++;
    }
    else if ([(id) [nextOperator getOperator] isKindOfClass:[OrgOssPdfreporterUsesNetSourceforgeJevalOperatorClosedParenthesesOperator class]]) {
      parenthesisCount--;
    }
    nextOperatorIndex = [((OrgOssPdfreporterUsesNetSourceforgeJevalNextOperator *) nil_chk(nextOperator)) getIndex];
  }
  NSString *arguments = [((NSString *) nil_chk(expression)) substring:operatorIndex + 1 endIndex:nextOperatorIndex];
  OrgOssPdfreporterUsesNetSourceforgeJevalExpressionOperand *operand = (OrgOssPdfreporterUsesNetSourceforgeJevalExpressionOperand *) [((OrgOssPdfreporterUsesJavaUtilStack *) nil_chk(operandStack)) pop];
  id<OrgOssPdfreporterUsesNetSourceforgeJevalOperatorOperator> unaryOperator = [((OrgOssPdfreporterUsesNetSourceforgeJevalExpressionOperand *) nil_chk(operand)) getUnaryOperator];
  NSString *functionName = [((OrgOssPdfreporterUsesNetSourceforgeJevalExpressionOperand *) nil_chk(operand)) getValue];
  @try {
    [self isValidNameWithNSString:functionName];
  }
  @catch (JavaLangIllegalArgumentException *iae) {
    @throw [[OrgOssPdfreporterUsesNetSourceforgeJevalEvaluationException alloc] initWithNSString:[NSString stringWithFormat:@"Invalid function name of \"%@\".", functionName] withJavaLangException:iae];
  }
  id<OrgOssPdfreporterUsesNetSourceforgeJevalFunctionFunction> function = (id<OrgOssPdfreporterUsesNetSourceforgeJevalFunctionFunction>) [((id<JavaUtilMap>) nil_chk(functions_)) getWithId:functionName];
  if (function == nil) {
    @throw [[OrgOssPdfreporterUsesNetSourceforgeJevalEvaluationException alloc] initWithNSString:[NSString stringWithFormat:@"A function is not defined (index=%d).", operatorIndex]];
  }
  OrgOssPdfreporterUsesNetSourceforgeJevalParsedFunction *parsedFunction = [[OrgOssPdfreporterUsesNetSourceforgeJevalParsedFunction alloc] initWithOrgOssPdfreporterUsesNetSourceforgeJevalFunctionFunction:function withNSString:arguments withOrgOssPdfreporterUsesNetSourceforgeJevalOperatorOperator:unaryOperator];
  (void) [((OrgOssPdfreporterUsesJavaUtilStack *) nil_chk(operandStack)) pushWithId:parsedFunction];
  return nextOperator;
}

- (void)processTreeWithOrgOssPdfreporterUsesJavaUtilStack:(OrgOssPdfreporterUsesJavaUtilStack *)operandStack
                   withOrgOssPdfreporterUsesJavaUtilStack:(OrgOssPdfreporterUsesJavaUtilStack *)operatorStack {
  id rightOperand = nil;
  id leftOperand = nil;
  id<OrgOssPdfreporterUsesNetSourceforgeJevalOperatorOperator> operator_ = nil;
  if ([((OrgOssPdfreporterUsesJavaUtilStack *) nil_chk(operandStack)) size] > 0) {
    rightOperand = [((OrgOssPdfreporterUsesJavaUtilStack *) nil_chk(operandStack)) pop];
  }
  if ([((OrgOssPdfreporterUsesJavaUtilStack *) nil_chk(operandStack)) size] > 0) {
    leftOperand = [((OrgOssPdfreporterUsesJavaUtilStack *) nil_chk(operandStack)) pop];
  }
  operator_ = [((OrgOssPdfreporterUsesNetSourceforgeJevalExpressionOperator *) [((OrgOssPdfreporterUsesJavaUtilStack *) nil_chk(operatorStack)) pop]) getOperator];
  OrgOssPdfreporterUsesNetSourceforgeJevalExpressionTree *tree = [[OrgOssPdfreporterUsesNetSourceforgeJevalExpressionTree alloc] initWithOrgOssPdfreporterUsesNetSourceforgeJevalEvaluator:self withId:leftOperand withId:rightOperand withOrgOssPdfreporterUsesNetSourceforgeJevalOperatorOperator:operator_ withOrgOssPdfreporterUsesNetSourceforgeJevalOperatorOperator:nil];
  (void) [((OrgOssPdfreporterUsesJavaUtilStack *) nil_chk(operandStack)) pushWithId:tree];
}

- (NSString *)getResultWithOrgOssPdfreporterUsesJavaUtilStack:(OrgOssPdfreporterUsesJavaUtilStack *)operatorStack
                       withOrgOssPdfreporterUsesJavaUtilStack:(OrgOssPdfreporterUsesJavaUtilStack *)operandStack
                                                     withBOOL:(BOOL)wrapStringFunctionResults {
  NSString *resultString = nil;
  while ([((OrgOssPdfreporterUsesJavaUtilStack *) nil_chk(operatorStack)) size] > 0) {
    [self processTreeWithOrgOssPdfreporterUsesJavaUtilStack:operandStack withOrgOssPdfreporterUsesJavaUtilStack:operatorStack];
  }
  if ([((OrgOssPdfreporterUsesJavaUtilStack *) nil_chk(operandStack)) size] != 1) {
    @throw [[OrgOssPdfreporterUsesNetSourceforgeJevalEvaluationException alloc] initWithNSString:@"Expression is invalid."];
  }
  id finalOperand = [((OrgOssPdfreporterUsesJavaUtilStack *) nil_chk(operandStack)) pop];
  if ([finalOperand isKindOfClass:[OrgOssPdfreporterUsesNetSourceforgeJevalExpressionTree class]]) {
    resultString = [((OrgOssPdfreporterUsesNetSourceforgeJevalExpressionTree *) finalOperand) evaluateWithBOOL:wrapStringFunctionResults];
  }
  else if ([finalOperand isKindOfClass:[OrgOssPdfreporterUsesNetSourceforgeJevalExpressionOperand class]]) {
    OrgOssPdfreporterUsesNetSourceforgeJevalExpressionOperand *resultExpressionOperand = (OrgOssPdfreporterUsesNetSourceforgeJevalExpressionOperand *) finalOperand;
    resultString = [((OrgOssPdfreporterUsesNetSourceforgeJevalExpressionOperand *) finalOperand) getValue];
    resultString = [self replaceVariablesWithNSString:resultString];
    if (![self isExpressionStringWithNSString:resultString]) {
      JavaLangDouble *resultDouble = nil;
      @try {
        resultDouble = [[JavaLangDouble alloc] initWithNSString:resultString];
      }
      @catch (JavaLangException *e) {
        @throw [[OrgOssPdfreporterUsesNetSourceforgeJevalEvaluationException alloc] initWithNSString:@"Expression is invalid." withJavaLangException:e];
      }
      if ([((OrgOssPdfreporterUsesNetSourceforgeJevalExpressionOperand *) nil_chk(resultExpressionOperand)) getUnaryOperator] != nil) {
        resultDouble = [[JavaLangDouble alloc] initWithDouble:[((id<OrgOssPdfreporterUsesNetSourceforgeJevalOperatorOperator>) nil_chk([((OrgOssPdfreporterUsesNetSourceforgeJevalExpressionOperand *) nil_chk(resultExpressionOperand)) getUnaryOperator])) evaluateWithDouble:[((JavaLangDouble *) nil_chk(resultDouble)) doubleValue]]];
      }
      resultString = [NSString valueOfDouble:[((JavaLangDouble *) nil_chk(resultDouble)) doubleValue]];
    }
    else {
      if ([((OrgOssPdfreporterUsesNetSourceforgeJevalExpressionOperand *) nil_chk(resultExpressionOperand)) getUnaryOperator] != nil) {
        @throw [[OrgOssPdfreporterUsesNetSourceforgeJevalEvaluationException alloc] initWithNSString:@"Invalid operand for unary operator."];
      }
    }
  }
  else if ([finalOperand isKindOfClass:[OrgOssPdfreporterUsesNetSourceforgeJevalParsedFunction class]]) {
    OrgOssPdfreporterUsesNetSourceforgeJevalParsedFunction *parsedFunction = (OrgOssPdfreporterUsesNetSourceforgeJevalParsedFunction *) finalOperand;
    id<OrgOssPdfreporterUsesNetSourceforgeJevalFunctionFunction> function = [((OrgOssPdfreporterUsesNetSourceforgeJevalParsedFunction *) nil_chk(parsedFunction)) getFunction];
    NSString *arguments = [((OrgOssPdfreporterUsesNetSourceforgeJevalParsedFunction *) nil_chk(parsedFunction)) getArguments];
    if (processNestedFunctions__) {
      arguments = [self processNestedFunctionsWithNSString:arguments];
    }
    arguments = [self replaceVariablesWithNSString:arguments];
    @try {
      OrgOssPdfreporterUsesNetSourceforgeJevalFunctionFunctionResult *functionResult = [((id<OrgOssPdfreporterUsesNetSourceforgeJevalFunctionFunction>) nil_chk(function)) executeWithOrgOssPdfreporterUsesNetSourceforgeJevalEvaluator:self withNSString:arguments];
      resultString = [((OrgOssPdfreporterUsesNetSourceforgeJevalFunctionFunctionResult *) nil_chk(functionResult)) getResult];
      if ([((OrgOssPdfreporterUsesNetSourceforgeJevalFunctionFunctionResult *) nil_chk(functionResult)) getType] == OrgOssPdfreporterUsesNetSourceforgeJevalFunctionFunctionConstants_FUNCTION_RESULT_TYPE_NUMERIC) {
        JavaLangDouble *resultDouble = [[JavaLangDouble alloc] initWithNSString:resultString];
        if ([((OrgOssPdfreporterUsesNetSourceforgeJevalParsedFunction *) nil_chk(parsedFunction)) getUnaryOperator] != nil) {
          resultDouble = [[JavaLangDouble alloc] initWithDouble:[((id<OrgOssPdfreporterUsesNetSourceforgeJevalOperatorOperator>) nil_chk([((OrgOssPdfreporterUsesNetSourceforgeJevalParsedFunction *) nil_chk(parsedFunction)) getUnaryOperator])) evaluateWithDouble:[((JavaLangDouble *) nil_chk(resultDouble)) doubleValue]]];
        }
        resultString = [NSString valueOfDouble:[((JavaLangDouble *) nil_chk(resultDouble)) doubleValue]];
      }
      else if ([((OrgOssPdfreporterUsesNetSourceforgeJevalFunctionFunctionResult *) nil_chk(functionResult)) getType] == OrgOssPdfreporterUsesNetSourceforgeJevalFunctionFunctionConstants_FUNCTION_RESULT_TYPE_STRING) {
        if (wrapStringFunctionResults) {
          resultString = [NSString stringWithFormat:@"%c%@%c", quoteCharacter_, resultString, quoteCharacter_];
        }
        if ([((OrgOssPdfreporterUsesNetSourceforgeJevalParsedFunction *) nil_chk(parsedFunction)) getUnaryOperator] != nil) {
          @throw [[OrgOssPdfreporterUsesNetSourceforgeJevalEvaluationException alloc] initWithNSString:@"Invalid operand for unary operator."];
        }
      }
    }
    @catch (OrgOssPdfreporterUsesNetSourceforgeJevalFunctionFunctionException *fe) {
      @throw [[OrgOssPdfreporterUsesNetSourceforgeJevalEvaluationException alloc] initWithNSString:[((OrgOssPdfreporterUsesNetSourceforgeJevalFunctionFunctionException *) nil_chk(fe)) getMessage] withJavaLangException:fe];
    }
  }
  else {
    @throw [[OrgOssPdfreporterUsesNetSourceforgeJevalEvaluationException alloc] initWithNSString:@"Expression is invalid."];
  }
  return resultString;
}

- (OrgOssPdfreporterUsesNetSourceforgeJevalNextOperator *)getNextOperatorWithNSString:(NSString *)expression
                                                                              withInt:(int)start
                         withOrgOssPdfreporterUsesNetSourceforgeJevalOperatorOperator:(id<OrgOssPdfreporterUsesNetSourceforgeJevalOperatorOperator>)match {
  int numChars = [((NSString *) nil_chk(expression)) length];
  int numQuoteCharacters = 0;
  for (int charCtr = start; charCtr < numChars; charCtr++) {
    if ([((NSString *) nil_chk(expression)) charAtWithInt:charCtr] == quoteCharacter_) {
      numQuoteCharacters++;
    }
    if ((numQuoteCharacters % 2) == 1) {
      continue;
    }
    int numOperators = [((id<JavaUtilList>) nil_chk(operators_)) size];
    for (int operatorCtr = 0; operatorCtr < numOperators; operatorCtr++) {
      id<OrgOssPdfreporterUsesNetSourceforgeJevalOperatorOperator> operator_ = (id<OrgOssPdfreporterUsesNetSourceforgeJevalOperatorOperator>) [((id<JavaUtilList>) nil_chk(operators_)) getWithInt:operatorCtr];
      if (match != nil) {
        if (![match isEqual:operator_]) {
          continue;
        }
      }
      if ([((id<OrgOssPdfreporterUsesNetSourceforgeJevalOperatorOperator>) nil_chk(operator_)) getLength] == 2) {
        int endCtr = -1;
        if (charCtr + 2 <= [((NSString *) nil_chk(expression)) length]) {
          endCtr = charCtr + 2;
        }
        else {
          endCtr = [((NSString *) nil_chk(expression)) length];
        }
        if ([((NSString *) nil_chk([((NSString *) nil_chk(expression)) substring:charCtr endIndex:endCtr])) isEqual:[((id<OrgOssPdfreporterUsesNetSourceforgeJevalOperatorOperator>) nil_chk(operator_)) getSymbol]]) {
          OrgOssPdfreporterUsesNetSourceforgeJevalNextOperator *nextOperator = [[OrgOssPdfreporterUsesNetSourceforgeJevalNextOperator alloc] initWithOrgOssPdfreporterUsesNetSourceforgeJevalOperatorOperator:operator_ withInt:charCtr];
          return nextOperator;
        }
      }
      else {
        if ([((NSString *) nil_chk(expression)) charAtWithInt:charCtr] == [((NSString *) nil_chk([((id<OrgOssPdfreporterUsesNetSourceforgeJevalOperatorOperator>) nil_chk(operator_)) getSymbol])) charAtWithInt:0]) {
          OrgOssPdfreporterUsesNetSourceforgeJevalNextOperator *nextOperator = [[OrgOssPdfreporterUsesNetSourceforgeJevalNextOperator alloc] initWithOrgOssPdfreporterUsesNetSourceforgeJevalOperatorOperator:operator_ withInt:charCtr];
          return nextOperator;
        }
      }
    }
  }
  return nil;
}

- (BOOL)isExpressionStringWithNSString:(NSString *)expressionString {
  if ([((NSString *) nil_chk(expressionString)) length] > 1 && [((NSString *) nil_chk(expressionString)) charAtWithInt:0] == quoteCharacter_ && [((NSString *) nil_chk(expressionString)) charAtWithInt:[((NSString *) nil_chk(expressionString)) length] - 1] == quoteCharacter_) {
    return YES;
  }
  if ([((NSString *) nil_chk(expressionString)) indexOf:quoteCharacter_] >= 0) {
    @throw [[OrgOssPdfreporterUsesNetSourceforgeJevalEvaluationException alloc] initWithNSString:@"Invalid use of quotes."];
  }
  return NO;
}

- (void)isValidNameWithNSString:(NSString *)name {
  if ([((NSString *) nil_chk(name)) length] == 0) {
    @throw [[JavaLangIllegalArgumentException alloc] initWithNSString:@"Variable is empty."];
  }
  unichar firstChar = [((NSString *) nil_chk(name)) charAtWithInt:0];
  if (firstChar >= '0' && firstChar <= '9') {
    @throw [[JavaLangIllegalArgumentException alloc] initWithNSString:@"A variable or function name can not start with a number."];
  }
  if ([((NSString *) nil_chk(name)) indexOf:OrgOssPdfreporterUsesNetSourceforgeJevalEvaluationConstants_SINGLE_QUOTE] > -1) {
    @throw [[JavaLangIllegalArgumentException alloc] initWithNSString:@"A variable or function name can not contain a quote character."];
  }
  else if ([((NSString *) nil_chk(name)) indexOf:OrgOssPdfreporterUsesNetSourceforgeJevalEvaluationConstants_DOUBLE_QUOTE] > -1) {
    @throw [[JavaLangIllegalArgumentException alloc] initWithNSString:@"A variable or function name can not contain a quote character."];
  }
  if ([((NSString *) nil_chk(name)) indexOf:OrgOssPdfreporterUsesNetSourceforgeJevalEvaluationConstants_OPEN_BRACE] > -1) {
    @throw [[JavaLangIllegalArgumentException alloc] initWithNSString:@"A variable or function name can not contain an open brace character."];
  }
  else if ([((NSString *) nil_chk(name)) indexOf:OrgOssPdfreporterUsesNetSourceforgeJevalEvaluationConstants_CLOSED_BRACE] > -1) {
    @throw [[JavaLangIllegalArgumentException alloc] initWithNSString:@"A variable or function name can not contain a closed brace character."];
  }
  else if ([((NSString *) nil_chk(name)) indexOf:OrgOssPdfreporterUsesNetSourceforgeJevalEvaluationConstants_POUND_SIGN] > -1) {
    @throw [[JavaLangIllegalArgumentException alloc] initWithNSString:@"A variable or function name can not contain a pound sign character."];
  }
  id<JavaUtilIterator> operatorIterator = [((id<JavaUtilList>) nil_chk(operators_)) iterator];
  while ([((id<JavaUtilIterator>) nil_chk(operatorIterator)) hasNext]) {
    id<OrgOssPdfreporterUsesNetSourceforgeJevalOperatorOperator> operator_ = (id<OrgOssPdfreporterUsesNetSourceforgeJevalOperatorOperator>) [((id<JavaUtilIterator>) nil_chk(operatorIterator)) next];
    if ([((NSString *) nil_chk(name)) indexOfString:[((id<OrgOssPdfreporterUsesNetSourceforgeJevalOperatorOperator>) nil_chk(operator_)) getSymbol]] > -1) {
      @throw [[JavaLangIllegalArgumentException alloc] initWithNSString:@"A variable or function name can not contain an operator symbol."];
    }
  }
  if ([((NSString *) nil_chk(name)) indexOfString:@"!"] > -1) {
    @throw [[JavaLangIllegalArgumentException alloc] initWithNSString:@"A variable or function name can not contain a special character."];
  }
  else if ([((NSString *) nil_chk(name)) indexOfString:@"~"] > -1) {
    @throw [[JavaLangIllegalArgumentException alloc] initWithNSString:@"A variable or function name can not contain a special character."];
  }
  else if ([((NSString *) nil_chk(name)) indexOfString:@"^"] > -1) {
    @throw [[JavaLangIllegalArgumentException alloc] initWithNSString:@"A variable or function name can not contain a special character."];
  }
  else if ([((NSString *) nil_chk(name)) indexOfString:@","] > -1) {
    @throw [[JavaLangIllegalArgumentException alloc] initWithNSString:@"A variable or function name can not contain a special character."];
  }
}

- (void)loadSystemFunctions {
  if (loadMathFunctions_) {
    id<OrgOssPdfreporterUsesNetSourceforgeJevalFunctionFunctionGroup> mathFunctions = [[OrgOssPdfreporterUsesNetSourceforgeJevalFunctionMathMathFunctions alloc] init];
    [((id<OrgOssPdfreporterUsesNetSourceforgeJevalFunctionFunctionGroup>) nil_chk(mathFunctions)) load__WithOrgOssPdfreporterUsesNetSourceforgeJevalEvaluator:self];
  }
  if (loadStringFunctions_) {
    id<OrgOssPdfreporterUsesNetSourceforgeJevalFunctionFunctionGroup> stringFunctions = [[OrgOssPdfreporterUsesNetSourceforgeJevalFunctionStringStringFunctions alloc] init];
    [((id<OrgOssPdfreporterUsesNetSourceforgeJevalFunctionFunctionGroup>) nil_chk(stringFunctions)) load__WithOrgOssPdfreporterUsesNetSourceforgeJevalEvaluator:self];
  }
}

- (void)loadSystemVariables {
  if (loadMathVariables_) {
    [self putVariableWithNSString:@"E" withNSString:[NSString valueOfDouble:JavaLangMath_E]];
    [self putVariableWithNSString:@"PI" withNSString:[NSString valueOfDouble:JavaLangMath_PI]];
  }
}

- (NSString *)replaceVariablesWithNSString:(NSString *)expression {
  int openIndex = [((NSString *) nil_chk(expression)) indexOfString:[OrgOssPdfreporterUsesNetSourceforgeJevalEvaluationConstants OPEN_VARIABLE]];
  if (openIndex < 0) {
    return expression;
  }
  NSString *replacedExpression = expression;
  while (openIndex >= 0) {
    int closedIndex = -1;
    if (openIndex >= 0) {
      closedIndex = [((NSString *) nil_chk(replacedExpression)) indexOfString:[OrgOssPdfreporterUsesNetSourceforgeJevalEvaluationConstants CLOSED_VARIABLE] fromIndex:openIndex + 1];
      if (closedIndex > openIndex) {
        NSString *variableName = [((NSString *) nil_chk(replacedExpression)) substring:openIndex + [((NSString *) nil_chk([OrgOssPdfreporterUsesNetSourceforgeJevalEvaluationConstants OPEN_VARIABLE])) length] endIndex:closedIndex];
        @try {
          [self isValidNameWithNSString:variableName];
        }
        @catch (JavaLangIllegalArgumentException *iae) {
          @throw [[OrgOssPdfreporterUsesNetSourceforgeJevalEvaluationException alloc] initWithNSString:[NSString stringWithFormat:@"Invalid variable name of \"%@\".", variableName] withJavaLangException:iae];
        }
        NSString *variableValue = [self getVariableValueWithNSString:variableName];
        NSString *variableString = [NSString stringWithFormat:@"%@%@%@", [OrgOssPdfreporterUsesNetSourceforgeJevalEvaluationConstants OPEN_VARIABLE], variableName, [OrgOssPdfreporterUsesNetSourceforgeJevalEvaluationConstants CLOSED_VARIABLE]];
        replacedExpression = [OrgOssPdfreporterUsesNetSourceforgeJevalEvaluationHelper replaceAllWithNSString:replacedExpression withNSString:variableString withNSString:variableValue];
      }
      else {
        break;
      }
    }
    openIndex = [((NSString *) nil_chk(replacedExpression)) indexOfString:[OrgOssPdfreporterUsesNetSourceforgeJevalEvaluationConstants OPEN_VARIABLE]];
  }
  int openBraceIndex = [((NSString *) nil_chk(replacedExpression)) indexOfString:[OrgOssPdfreporterUsesNetSourceforgeJevalEvaluationConstants OPEN_VARIABLE]];
  if (openBraceIndex > -1) {
    @throw [[OrgOssPdfreporterUsesNetSourceforgeJevalEvaluationException alloc] initWithNSString:[NSString stringWithFormat:@"A variable has not been closed (index=%d).", openBraceIndex]];
  }
  return replacedExpression;
}

- (NSString *)processNestedFunctionsWithNSString:(NSString *)arguments {
  JavaLangStringBuffer *evaluatedArguments = [[JavaLangStringBuffer alloc] init];
  if ([((NSString *) nil_chk(arguments)) length] > 0) {
    OrgOssPdfreporterUsesNetSourceforgeJevalEvaluator *argumentsEvaluator = [[OrgOssPdfreporterUsesNetSourceforgeJevalEvaluator alloc] initWithUnichar:quoteCharacter_ withBOOL:loadMathVariables_ withBOOL:loadMathFunctions_ withBOOL:loadStringFunctions_ withBOOL:processNestedFunctions__];
    [((OrgOssPdfreporterUsesNetSourceforgeJevalEvaluator *) nil_chk(argumentsEvaluator)) setFunctionsWithJavaUtilMap:[self getFunctions]];
    [((OrgOssPdfreporterUsesNetSourceforgeJevalEvaluator *) nil_chk(argumentsEvaluator)) setVariablesWithJavaUtilMap:[self getVariables]];
    [((OrgOssPdfreporterUsesNetSourceforgeJevalEvaluator *) nil_chk(argumentsEvaluator)) setVariableResolverWithOrgOssPdfreporterUsesNetSourceforgeJevalVariableResolver:[self getVariableResolver]];
    OrgOssPdfreporterUsesNetSourceforgeJevalArgumentTokenizer *tokenizer = [[OrgOssPdfreporterUsesNetSourceforgeJevalArgumentTokenizer alloc] initWithNSString:arguments withUnichar:OrgOssPdfreporterUsesNetSourceforgeJevalEvaluationConstants_FUNCTION_ARGUMENT_SEPARATOR];
    id<JavaUtilList> evalautedArgumentList = [[JavaUtilArrayList alloc] init];
    while ([((OrgOssPdfreporterUsesNetSourceforgeJevalArgumentTokenizer *) nil_chk(tokenizer)) hasMoreTokens]) {
      NSString *argument = [((NSString *) nil_chk([((OrgOssPdfreporterUsesNetSourceforgeJevalArgumentTokenizer *) nil_chk(tokenizer)) nextToken])) trim];
      @try {
        argument = [((OrgOssPdfreporterUsesNetSourceforgeJevalEvaluator *) nil_chk(argumentsEvaluator)) evaluateWithNSString:argument];
      }
      @catch (JavaLangException *e) {
        @throw [[OrgOssPdfreporterUsesNetSourceforgeJevalEvaluationException alloc] initWithNSString:[((JavaLangException *) nil_chk(e)) getMessage] withJavaLangException:e];
      }
      [((id<JavaUtilList>) nil_chk(evalautedArgumentList)) addWithId:argument];
    }
    id<JavaUtilIterator> evaluatedArgumentIterator = [((id<JavaUtilList>) nil_chk(evalautedArgumentList)) iterator];
    while ([((id<JavaUtilIterator>) nil_chk(evaluatedArgumentIterator)) hasNext]) {
      if ([((JavaLangStringBuffer *) nil_chk(evaluatedArguments)) sequenceLength] > 0) {
        (void) [((JavaLangStringBuffer *) nil_chk(evaluatedArguments)) appendWithUnichar:OrgOssPdfreporterUsesNetSourceforgeJevalEvaluationConstants_FUNCTION_ARGUMENT_SEPARATOR];
      }
      NSString *evaluatedArgument = (NSString *) [((id<JavaUtilIterator>) nil_chk(evaluatedArgumentIterator)) next];
      (void) [((JavaLangStringBuffer *) nil_chk(evaluatedArguments)) appendWithNSString:evaluatedArgument];
    }
  }
  return [((JavaLangStringBuffer *) nil_chk(evaluatedArguments)) description];
}

- (BOOL)isLoadMathVariables {
  return loadMathVariables_;
}

- (BOOL)getLoadMathFunctions {
  return loadMathFunctions_;
}

- (BOOL)getLoadStringFunctions {
  return loadStringFunctions_;
}

- (BOOL)getProcessNestedFunctions {
  return processNestedFunctions__;
}

- (void)copyAllPropertiesTo:(id)copy {
  [super copyAllPropertiesTo:copy];
  OrgOssPdfreporterUsesNetSourceforgeJevalEvaluator *typedCopy = (OrgOssPdfreporterUsesNetSourceforgeJevalEvaluator *) copy;
  typedCopy.operators = operators_;
  typedCopy.functions = functions_;
  typedCopy.variables = variables_;
  typedCopy.quoteCharacter = quoteCharacter_;
  typedCopy.openParenthesesOperator = openParenthesesOperator_;
  typedCopy.closedParenthesesOperator = closedParenthesesOperator_;
  typedCopy.loadMathVariables = loadMathVariables_;
  typedCopy.loadMathFunctions = loadMathFunctions_;
  typedCopy.loadStringFunctions = loadStringFunctions_;
  typedCopy.processNestedFunctions_ = processNestedFunctions__;
  typedCopy.previousExpression = previousExpression_;
  typedCopy.previousOperatorStack = previousOperatorStack_;
  typedCopy.previousOperandStack = previousOperandStack_;
  typedCopy.operatorStack = operatorStack_;
  typedCopy.operandStack = operandStack_;
  typedCopy.variableResolver = variableResolver_;
}

@end
